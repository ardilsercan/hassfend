{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport { css, html, LitElement } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport \"../../../components/ha-svg-icon\";\nimport { computeCardSize } from \"../common/compute-card-size\";\n// Find column with < 5 size, else smallest column\nconst getColumnIndex = (columnSizes, size) => {\n  let minIndex = 0;\n  for (let i = 0; i < columnSizes.length; i++) {\n    if (columnSizes[i] < 5) {\n      minIndex = i;\n      break;\n    }\n    if (columnSizes[i] < columnSizes[minIndex]) {\n      minIndex = i;\n    }\n  }\n  columnSizes[minIndex] += size;\n  return minIndex;\n};\nexport let MasonryView = _decorate(null, function (_initialize, _LitElement) {\n  class MasonryView extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: MasonryView,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"lovelace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"index\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isStrategy\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"cards\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"badges\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_columns\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_createColumnsIteration\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_mqls\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_mqlListenerRef\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(MasonryView.prototype), \"connectedCallback\", this).call(this);\n        this._initMqls();\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        var _this$_mqls;\n        _get(_getPrototypeOf(MasonryView.prototype), \"disconnectedCallback\", this).call(this);\n        (_this$_mqls = this._mqls) === null || _this$_mqls === void 0 || _this$_mqls.forEach(mql => {\n          mql.removeListener(this._mqlListenerRef);\n        });\n        this._mqlListenerRef = undefined;\n        this._mqls = undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(_config) {}\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$lovelace, _this$lovelace2;\n        return html`\n      ${this.badges.length > 0 ? html`<div class=\"badges\">${this.badges}</div>` : \"\"}\n      <div\n        id=\"columns\"\n        class=${(_this$lovelace = this.lovelace) !== null && _this$lovelace !== void 0 && _this$lovelace.editMode ? \"edit-mode\" : \"\"}\n      ></div>\n      ${(_this$lovelace2 = this.lovelace) !== null && _this$lovelace2 !== void 0 && _this$lovelace2.editMode ? html`\n            <ha-fab\n              .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.add\")}\n              extended\n              @click=${this._addCard}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>\n          ` : \"\"}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_initMqls\",\n      value: function _initMqls() {\n        this._mqls = [300, 600, 900, 1200].map(width => {\n          const mql = window.matchMedia(`(min-width: ${width}px)`);\n          if (!this._mqlListenerRef) {\n            this._mqlListenerRef = this._updateColumns.bind(this);\n          }\n          mql.addListener(this._mqlListenerRef);\n          return mql;\n        });\n      }\n    }, {\n      kind: \"get\",\n      key: \"mqls\",\n      value: function mqls() {\n        if (!this._mqls) {\n          this._initMqls();\n        }\n        return this._mqls;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        var _this$lovelace3;\n        _get(_getPrototypeOf(MasonryView.prototype), \"willUpdate\", this).call(this, changedProperties);\n        if ((_this$lovelace3 = this.lovelace) !== null && _this$lovelace3 !== void 0 && _this$lovelace3.editMode) {\n          import(\"./default-view-editable\");\n        }\n        if (changedProperties.has(\"hass\")) {\n          const oldHass = changedProperties.get(\"hass\");\n          if (this.hass.dockedSidebar !== (oldHass === null || oldHass === void 0 ? void 0 : oldHass.dockedSidebar)) {\n            this._updateColumns();\n            return;\n          }\n        }\n        if (changedProperties.has(\"narrow\")) {\n          this._updateColumns();\n          return;\n        }\n        const oldLovelace = changedProperties.get(\"lovelace\");\n        if (changedProperties.has(\"cards\") || changedProperties.has(\"lovelace\") && oldLovelace && (oldLovelace.config !== this.lovelace.config || oldLovelace.editMode !== this.lovelace.editMode)) {\n          this._createColumns();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addCard\",\n      value: function _addCard() {\n        fireEvent(this, \"ll-create-card\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createRootElement\",\n      value: function _createRootElement(columns) {\n        const root = this.shadowRoot.getElementById(\"columns\");\n\n        // Remove old columns\n        while (root.lastChild) {\n          root.removeChild(root.lastChild);\n        }\n        columns.forEach(column => root.appendChild(column));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createColumns\",\n      value: async function _createColumns() {\n        if (!this._columns) {\n          return;\n        }\n        this._createColumnsIteration++;\n        const iteration = this._createColumnsIteration;\n\n        // Track the total height of cards in a columns\n        const columnSizes = [];\n        const columnElements = [];\n        // Add columns to DOM, limit number of columns to the number of cards\n        for (let i = 0; i < Math.min(this._columns, this.cards.length); i++) {\n          const columnEl = document.createElement(\"div\");\n          columnEl.classList.add(\"column\");\n          columnSizes.push(0);\n          columnElements.push(columnEl);\n        }\n        if (!this.hasUpdated) {\n          this.updateComplete.then(() => {\n            this._createRootElement(columnElements);\n          });\n        } else {\n          this._createRootElement(columnElements);\n        }\n        let tillNextRender;\n        let start;\n\n        // Calculate the size of every card and determine in what column it should go\n        for (const [index, el] of this.cards.entries()) {\n          if (tillNextRender === undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-loop-func\n            tillNextRender = nextRender().then(() => {\n              tillNextRender = undefined;\n              start = undefined;\n            });\n          }\n          let waitProm;\n\n          // We should work for max 16ms (60fps) before allowing a frame to render\n          if (start === undefined) {\n            // Save the time we start for this frame, no need to wait yet\n            start = new Date();\n          } else if (new Date().getTime() - start.getTime() > 16) {\n            // We are working too long, we will prevent a render, wait to allow for a render\n            waitProm = tillNextRender;\n          }\n          const cardSizeProm = computeCardSize(el);\n          // @ts-ignore\n          // eslint-disable-next-line no-await-in-loop\n          const [cardSize] = await Promise.all([cardSizeProm, waitProm]);\n          if (iteration !== this._createColumnsIteration) {\n            // An other create columns is started, abort this one\n            return;\n          }\n          // Calculate in wich column the card should go based on the size and the cards already in there\n          this._addCardToColumn(columnElements[getColumnIndex(columnSizes, cardSize)], index, this.lovelace.editMode);\n        }\n\n        // Remove empty columns\n        columnElements.forEach(column => {\n          if (!column.lastChild) {\n            column.parentElement.removeChild(column);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addCardToColumn\",\n      value: function _addCardToColumn(columnEl, index, editMode) {\n        const card = this.cards[index];\n        if (!editMode || this.isStrategy) {\n          card.editMode = false;\n          columnEl.appendChild(card);\n        } else {\n          const wrapper = document.createElement(\"hui-card-options\");\n          wrapper.hass = this.hass;\n          wrapper.lovelace = this.lovelace;\n          wrapper.path = [this.index, index];\n          card.editMode = true;\n          wrapper.appendChild(card);\n          columnEl.appendChild(wrapper);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateColumns\",\n      value: function _updateColumns() {\n        const matchColumns = this.mqls.reduce((cols, mql) => cols + Number(mql.matches), 0);\n        // Do -1 column if the menu is docked and open\n        const newColumns = Math.max(1, matchColumns - Number(!this.narrow && this.hass.dockedSidebar === \"docked\"));\n        if (newColumns === this._columns) {\n          return;\n        }\n        this._columns = newColumns;\n        this._createColumns();\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: block;\n        padding-top: 4px;\n      }\n\n      .badges {\n        margin: 8px 16px;\n        font-size: 85%;\n        text-align: center;\n      }\n\n      #columns {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        margin-left: 4px;\n        margin-right: 4px;\n      }\n\n      #columns.edit-mode {\n        margin-bottom: 72px;\n      }\n\n      .column {\n        flex: 1 0 0;\n        max-width: 500px;\n        min-width: 0;\n      }\n\n      /* Fix for safari */\n      .column:has(> *) {\n        flex-grow: 1;\n      }\n\n      .column:not(:has(> *:not([hidden]))) {\n        flex-grow: 0;\n      }\n\n      .column > *:not([hidden]) {\n        display: block;\n        margin: var(--masonry-view-card-margin, 4px 4px 8px);\n      }\n\n      ha-fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        inset-inline-end: calc(16px + env(safe-area-inset-right));\n        inset-inline-start: initial;\n        z-index: 1;\n      }\n\n      @media (max-width: 500px) {\n        .column > * {\n          margin-left: 0;\n          margin-right: 0;\n        }\n      }\n\n      @media (max-width: 599px) {\n        .column {\n          max-width: 600px;\n        }\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);\ncustomElements.define(\"hui-masonry-view\", MasonryView);","map":{"version":3,"names":["css","html","LitElement","property","state","fireEvent","nextRender","computeCardSize","getColumnIndex","columnSizes","size","minIndex","i","length","MasonryView","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","Number","connectedCallback","_get","_getPrototypeOf","prototype","call","_initMqls","disconnectedCallback","_this$_mqls","_mqls","forEach","mql","removeListener","_mqlListenerRef","undefined","setConfig","_config","render","_this$lovelace","_this$lovelace2","badges","lovelace","editMode","hass","localize","_addCard","mdiPlus","map","width","window","matchMedia","_updateColumns","bind","addListener","mqls","willUpdate","changedProperties","_this$lovelace3","has","oldHass","get","dockedSidebar","oldLovelace","config","_createColumns","_createRootElement","columns","root","shadowRoot","getElementById","lastChild","removeChild","column","appendChild","_columns","_createColumnsIteration","iteration","columnElements","Math","min","cards","columnEl","document","createElement","classList","add","push","hasUpdated","updateComplete","then","tillNextRender","start","index","el","entries","waitProm","Date","getTime","cardSizeProm","cardSize","Promise","all","_addCardToColumn","parentElement","card","isStrategy","wrapper","path","matchColumns","reduce","cols","matches","newColumns","max","narrow","static","styles","customElements","define"],"sources":["/workspaces/frontend/src/panels/lovelace/views/hui-masonry-view.ts"],"sourcesContent":["import { mdiPlus } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport \"../../../components/ha-svg-icon\";\nimport type { LovelaceViewElement } from \"../../../data/lovelace\";\nimport type { LovelaceViewConfig } from \"../../../data/lovelace/config/view\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { HuiErrorCard } from \"../cards/hui-error-card\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport type { Lovelace, LovelaceBadge, LovelaceCard } from \"../types\";\n\n// Find column with < 5 size, else smallest column\nconst getColumnIndex = (columnSizes: number[], size: number) => {\n  let minIndex = 0;\n  for (let i = 0; i < columnSizes.length; i++) {\n    if (columnSizes[i] < 5) {\n      minIndex = i;\n      break;\n    }\n    if (columnSizes[i] < columnSizes[minIndex]) {\n      minIndex = i;\n    }\n  }\n\n  columnSizes[minIndex] += size;\n\n  return minIndex;\n};\n\nexport class MasonryView extends LitElement implements LovelaceViewElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: Lovelace;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Number }) public index?: number;\n\n  @property({ type: Boolean }) public isStrategy = false;\n\n  @property({ attribute: false }) public cards: Array<\n    LovelaceCard | HuiErrorCard\n  > = [];\n\n  @property({ attribute: false }) public badges: LovelaceBadge[] = [];\n\n  @state() private _columns?: number;\n\n  private _createColumnsIteration = 0;\n\n  private _mqls?: MediaQueryList[];\n\n  private _mqlListenerRef?: () => void;\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._initMqls();\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mqls?.forEach((mql) => {\n      mql.removeListener(this._mqlListenerRef!);\n    });\n    this._mqlListenerRef = undefined;\n    this._mqls = undefined;\n  }\n\n  public setConfig(_config: LovelaceViewConfig): void {}\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.badges.length > 0\n        ? html`<div class=\"badges\">${this.badges}</div>`\n        : \"\"}\n      <div\n        id=\"columns\"\n        class=${this.lovelace?.editMode ? \"edit-mode\" : \"\"}\n      ></div>\n      ${this.lovelace?.editMode\n        ? html`\n            <ha-fab\n              .label=${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\n              extended\n              @click=${this._addCard}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _initMqls() {\n    this._mqls = [300, 600, 900, 1200].map((width) => {\n      const mql = window.matchMedia(`(min-width: ${width}px)`);\n      if (!this._mqlListenerRef) {\n        this._mqlListenerRef = this._updateColumns.bind(this);\n      }\n      mql.addListener(this._mqlListenerRef);\n      return mql;\n    });\n  }\n\n  private get mqls(): MediaQueryList[] {\n    if (!this._mqls) {\n      this._initMqls();\n    }\n    return this._mqls!;\n  }\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n\n    if (this.lovelace?.editMode) {\n      import(\"./default-view-editable\");\n    }\n\n    if (changedProperties.has(\"hass\")) {\n      const oldHass = changedProperties.get(\"hass\") as\n        | HomeAssistant\n        | undefined;\n\n      if (this.hass!.dockedSidebar !== oldHass?.dockedSidebar) {\n        this._updateColumns();\n        return;\n      }\n    }\n\n    if (changedProperties.has(\"narrow\")) {\n      this._updateColumns();\n      return;\n    }\n\n    const oldLovelace = changedProperties.get(\"lovelace\") as\n      | Lovelace\n      | undefined;\n\n    if (\n      changedProperties.has(\"cards\") ||\n      (changedProperties.has(\"lovelace\") &&\n        oldLovelace &&\n        (oldLovelace.config !== this.lovelace!.config ||\n          oldLovelace.editMode !== this.lovelace!.editMode))\n    ) {\n      this._createColumns();\n    }\n  }\n\n  private _addCard(): void {\n    fireEvent(this, \"ll-create-card\");\n  }\n\n  private _createRootElement(columns: HTMLDivElement[]) {\n    const root = this.shadowRoot!.getElementById(\"columns\") as HTMLDivElement;\n\n    // Remove old columns\n    while (root.lastChild) {\n      root.removeChild(root.lastChild);\n    }\n\n    columns.forEach((column) => root.appendChild(column));\n  }\n\n  private async _createColumns() {\n    if (!this._columns) {\n      return;\n    }\n\n    this._createColumnsIteration++;\n    const iteration = this._createColumnsIteration;\n\n    // Track the total height of cards in a columns\n    const columnSizes: number[] = [];\n    const columnElements: HTMLDivElement[] = [];\n    // Add columns to DOM, limit number of columns to the number of cards\n    for (let i = 0; i < Math.min(this._columns, this.cards.length); i++) {\n      const columnEl = document.createElement(\"div\");\n      columnEl.classList.add(\"column\");\n      columnSizes.push(0);\n      columnElements.push(columnEl);\n    }\n\n    if (!this.hasUpdated) {\n      this.updateComplete.then(() => {\n        this._createRootElement(columnElements);\n      });\n    } else {\n      this._createRootElement(columnElements);\n    }\n\n    let tillNextRender: Promise<unknown> | undefined;\n    let start: Date | undefined;\n\n    // Calculate the size of every card and determine in what column it should go\n    for (const [index, el] of this.cards.entries()) {\n      if (tillNextRender === undefined) {\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        tillNextRender = nextRender().then(() => {\n          tillNextRender = undefined;\n          start = undefined;\n        });\n      }\n\n      let waitProm: Promise<unknown> | undefined;\n\n      // We should work for max 16ms (60fps) before allowing a frame to render\n      if (start === undefined) {\n        // Save the time we start for this frame, no need to wait yet\n        start = new Date();\n      } else if (new Date().getTime() - start.getTime() > 16) {\n        // We are working too long, we will prevent a render, wait to allow for a render\n        waitProm = tillNextRender;\n      }\n\n      const cardSizeProm = computeCardSize(el);\n      // @ts-ignore\n      // eslint-disable-next-line no-await-in-loop\n      const [cardSize] = await Promise.all([cardSizeProm, waitProm]);\n\n      if (iteration !== this._createColumnsIteration) {\n        // An other create columns is started, abort this one\n        return;\n      }\n      // Calculate in wich column the card should go based on the size and the cards already in there\n      this._addCardToColumn(\n        columnElements[getColumnIndex(columnSizes, cardSize as number)],\n        index,\n        this.lovelace!.editMode\n      );\n    }\n\n    // Remove empty columns\n    columnElements.forEach((column) => {\n      if (!column.lastChild) {\n        column.parentElement!.removeChild(column);\n      }\n    });\n  }\n\n  private _addCardToColumn(columnEl, index, editMode) {\n    const card: LovelaceCard = this.cards[index];\n    if (!editMode || this.isStrategy) {\n      card.editMode = false;\n      columnEl.appendChild(card);\n    } else {\n      const wrapper = document.createElement(\"hui-card-options\");\n      wrapper.hass = this.hass;\n      wrapper.lovelace = this.lovelace;\n      wrapper.path = [this.index!, index];\n      card.editMode = true;\n      wrapper.appendChild(card);\n      columnEl.appendChild(wrapper);\n    }\n  }\n\n  private _updateColumns() {\n    const matchColumns = this.mqls.reduce(\n      (cols, mql) => cols + Number(mql.matches),\n      0\n    );\n    // Do -1 column if the menu is docked and open\n    const newColumns = Math.max(\n      1,\n      matchColumns -\n        Number(!this.narrow && this.hass!.dockedSidebar === \"docked\")\n    );\n    if (newColumns === this._columns) {\n      return;\n    }\n    this._columns = newColumns;\n    this._createColumns();\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        padding-top: 4px;\n      }\n\n      .badges {\n        margin: 8px 16px;\n        font-size: 85%;\n        text-align: center;\n      }\n\n      #columns {\n        display: flex;\n        flex-direction: row;\n        justify-content: center;\n        margin-left: 4px;\n        margin-right: 4px;\n      }\n\n      #columns.edit-mode {\n        margin-bottom: 72px;\n      }\n\n      .column {\n        flex: 1 0 0;\n        max-width: 500px;\n        min-width: 0;\n      }\n\n      /* Fix for safari */\n      .column:has(> *) {\n        flex-grow: 1;\n      }\n\n      .column:not(:has(> *:not([hidden]))) {\n        flex-grow: 0;\n      }\n\n      .column > *:not([hidden]) {\n        display: block;\n        margin: var(--masonry-view-card-margin, 4px 4px 8px);\n      }\n\n      ha-fab {\n        position: fixed;\n        right: calc(16px + env(safe-area-inset-right));\n        bottom: calc(16px + env(safe-area-inset-bottom));\n        inset-inline-end: calc(16px + env(safe-area-inset-right));\n        inset-inline-start: initial;\n        z-index: 1;\n      }\n\n      @media (max-width: 500px) {\n        .column > * {\n          margin-left: 0;\n          margin-right: 0;\n        }\n      }\n\n      @media (max-width: 599px) {\n        .column {\n          max-width: 600px;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-masonry-view\": MasonryView;\n  }\n}\n\ncustomElements.define(\"hui-masonry-view\", MasonryView);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}