{"ast":null,"code":"/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging } from \"./external_messaging\";\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\"External auth requires either externalApp or webkit defined on Window object.\");\n}\nexport class ExternalAuth extends Auth {\n  constructor(hassUrl) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0\n    });\n    this.external = void 0;\n    this._tokenCallbackPromise = void 0;\n  }\n  async refreshAccessToken(force) {\n    if (this._tokenCallbackPromise && !force) {\n      try {\n        await this._tokenCallbackPromise;\n        return;\n      } catch (err) {\n        // _tokenCallbackPromise is in a rejected state\n        // Clear the _tokenCallbackPromise and go on refreshing access token\n        this._tokenCallbackPromise = undefined;\n      }\n    }\n    const payload = {\n      callback: CALLBACK_SET_TOKEN\n    };\n    if (force) {\n      payload.force = true;\n    }\n    this._tokenCallbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_SET_TOKEN] = (success, data) => success ? resolve(data) : reject(data);\n    });\n\n    // we sleep 1 microtask to get the promise to actually set it on the window object.\n    await Promise.resolve();\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit.messageHandlers.getExternalAuth.postMessage(payload);\n    }\n    const tokens = await this._tokenCallbackPromise;\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n    this._tokenCallbackPromise = undefined;\n  }\n  async revoke() {\n    const payload = {\n      callback: CALLBACK_REVOKE_TOKEN\n    };\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) => success ? resolve(data) : reject(data);\n    });\n\n    // we sleep 1 microtask to get the promise to actually set it on the window object.\n    await Promise.resolve();\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit.messageHandlers.revokeExternalAuth.postMessage(payload);\n    }\n    await callbackPromise;\n  }\n}\nexport const createExternalAuth = async hassUrl => {\n  var _window$externalApp;\n  const auth = new ExternalAuth(hassUrl);\n  if ((_window$externalApp = window.externalApp) !== null && _window$externalApp !== void 0 && _window$externalApp.externalBus || window.webkit && window.webkit.messageHandlers.externalBus) {\n    auth.external = new ExternalMessaging();\n    await auth.external.attach();\n  }\n  return auth;\n};","map":{"version":3,"names":["Auth","ExternalMessaging","CALLBACK_SET_TOKEN","CALLBACK_REVOKE_TOKEN","window","externalApp","webkit","Error","ExternalAuth","constructor","hassUrl","clientId","refresh_token","access_token","expires_in","expires","external","_tokenCallbackPromise","refreshAccessToken","force","err","undefined","payload","callback","Promise","resolve","reject","success","data","getExternalAuth","JSON","stringify","messageHandlers","postMessage","tokens","Date","now","revoke","callbackPromise","revokeExternalAuth","createExternalAuth","_window$externalApp","auth","externalBus","attach"],"sources":["/workspaces/frontend/src/external_app/external_auth.ts"],"sourcesContent":["/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, EMMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface GetExternalAuthPayload extends BasePayload {\n  force?: boolean;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: GetExternalAuthPayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: EMMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nexport class ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  private _tokenCallbackPromise?: Promise<RefreshTokenResponse>;\n\n  public async refreshAccessToken(force?: boolean) {\n    if (this._tokenCallbackPromise && !force) {\n      try {\n        await this._tokenCallbackPromise;\n        return;\n      } catch (err: any) {\n        // _tokenCallbackPromise is in a rejected state\n        // Clear the _tokenCallbackPromise and go on refreshing access token\n        this._tokenCallbackPromise = undefined;\n      }\n    }\n    const payload: GetExternalAuthPayload = {\n      callback: CALLBACK_SET_TOKEN,\n    };\n    if (force) {\n      payload.force = true;\n    }\n\n    this._tokenCallbackPromise = new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    // we sleep 1 microtask to get the promise to actually set it on the window object.\n    await Promise.resolve();\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(payload);\n    }\n\n    const tokens = await this._tokenCallbackPromise;\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n    this._tokenCallbackPromise = undefined;\n  }\n\n  public async revoke() {\n    const payload: BasePayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    const callbackPromise = new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n\n    // we sleep 1 microtask to get the promise to actually set it on the window object.\n    await Promise.resolve();\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(payload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(payload);\n    }\n\n    await callbackPromise;\n  }\n}\n\nexport const createExternalAuth = async (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    window.externalApp?.externalBus ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    await auth.external.attach();\n  }\n  return auth;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}