{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, assign, boolean, literal, number, object, optional, string, union } from \"superstruct\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport { supportedStatTypeMap } from \"../../../../components/chart/statistics-chart\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { getDisplayUnit, getStatisticMetadata, isExternalStatistic, statisticsMetaHasType } from \"../../../../data/recorder\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { DEFAULT_DAYS_TO_SHOW } from \"../../cards/hui-statistics-graph-card\";\nvar statTypeStruct = union([literal(\"state\"), literal(\"sum\"), literal(\"change\"), literal(\"min\"), literal(\"max\"), literal(\"mean\")]);\nvar cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  entities: array(entitiesConfigStruct),\n  title: optional(string()),\n  days_to_show: optional(number()),\n  period: optional(union([literal(\"5minute\"), literal(\"hour\"), literal(\"day\"), literal(\"week\"), literal(\"month\")])),\n  chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n  stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n  unit: optional(string()),\n  hide_legend: optional(boolean()),\n  logarithmic_scale: optional(boolean())\n}));\nvar periods = [\"5minute\", \"hour\", \"day\", \"week\", \"month\"];\nvar stat_types = [\"mean\", \"min\", \"max\", \"sum\", \"state\", \"change\"];\nexport var HuiStatisticsGraphCardEditor = _decorate([customElement(\"hui-statistics-graph-card-editor\")], function (_initialize, _LitElement) {\n  var HuiStatisticsGraphCardEditor = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HuiStatisticsGraphCardEditor, _LitElement2);\n    function HuiStatisticsGraphCardEditor() {\n      var _this;\n      _classCallCheck(this, HuiStatisticsGraphCardEditor);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HuiStatisticsGraphCardEditor, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HuiStatisticsGraphCardEditor);\n  }(_LitElement);\n  return {\n    F: HuiStatisticsGraphCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_configEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_metaDatas\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n        this._configEntities = config.entities ? processConfigEntities(config.entities, false).map(function (cfg) {\n          return cfg.entity;\n        }) : [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getStatisticsMetaData\",\n      value: function value() {\n        var _this2 = this;\n        return /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(statisticIds) {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return getStatisticMetadata(_this2.hass, statisticIds || []);\n                case 2:\n                  _this2._metaDatas = _context.sent;\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        if (changedProps.has(\"_configEntities\") && !deepEqual(this._configEntities, changedProps.get(\"_configEntities\"))) {\n          var _this$_configEntities;\n          this._metaDatas = undefined;\n          if ((_this$_configEntities = this._configEntities) !== null && _this$_configEntities !== void 0 && _this$_configEntities.length) {\n            this._getStatisticsMetaData(this._configEntities);\n          }\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value: function value() {\n        var _this3 = this;\n        return memoizeOne(function (localize, statisticIds, metaDatas) {\n          var units = new Set();\n          metaDatas === null || metaDatas === void 0 || metaDatas.forEach(function (metaData) {\n            var unit = getDisplayUnit(_this3.hass, metaData.statistic_id, metaData);\n            if (unit) {\n              units.add(unit);\n            }\n          });\n          var schema = [{\n            name: \"title\",\n            selector: {\n              text: {}\n            }\n          }, {\n            name: \"\",\n            type: \"grid\",\n            schema: [{\n              name: \"period\",\n              required: true,\n              selector: {\n                select: {\n                  options: periods.map(function (period) {\n                    return {\n                      value: period,\n                      label: localize(\"ui.panel.lovelace.editor.card.statistics-graph.periods.\".concat(period)),\n                      disabled: period === \"5minute\" && ( // External statistics don't support 5-minute statistics.\n                      statisticIds === null || statisticIds === void 0 ? void 0 : statisticIds.some(function (statistic_id) {\n                        return isExternalStatistic(statistic_id);\n                      }))\n                    };\n                  })\n                }\n              }\n            }, {\n              name: \"days_to_show\",\n              default: DEFAULT_DAYS_TO_SHOW,\n              selector: {\n                number: {\n                  min: 1,\n                  mode: \"box\"\n                }\n              }\n            }, {\n              name: \"stat_types\",\n              required: true,\n              selector: {\n                select: {\n                  multiple: true,\n                  mode: \"list\",\n                  options: stat_types.map(function (stat_type) {\n                    return {\n                      value: stat_type,\n                      label: localize(\"ui.panel.lovelace.editor.card.statistics-graph.stat_type_labels.\".concat(stat_type)),\n                      disabled: !metaDatas || !metaDatas.some(function (metaData) {\n                        return statisticsMetaHasType(metaData, supportedStatTypeMap[stat_type]);\n                      })\n                    };\n                  })\n                }\n              }\n            }, {\n              name: \"chart_type\",\n              required: true,\n              type: \"select\",\n              options: [[\"line\", \"Line\"], [\"bar\", \"Bar\"]]\n            }, {\n              name: \"hide_legend\",\n              required: false,\n              selector: {\n                boolean: {}\n              }\n            }, {\n              name: \"logarithmic_scale\",\n              required: false,\n              selector: {\n                boolean: {}\n              }\n            }]\n          }];\n          if (units.size > 1) {\n            schema[1].schema.push({\n              name: \"unit\",\n              required: false,\n              selector: {\n                select: {\n                  options: Array.from(units).map(function (unit) {\n                    return {\n                      value: unit,\n                      label: unit\n                    };\n                  })\n                }\n              }\n            });\n          }\n          return schema;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this4 = this,\n          _this$_metaDatas,\n          _this$_metaDatas2;\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        var schema = this._schema(this.hass.localize, this._configEntities, this._metaDatas);\n        var configured_stat_types = this._config.stat_types ? ensureArray(this._config.stat_types) : stat_types.filter(function (stat_type) {\n          var _this4$_metaDatas;\n          return (_this4$_metaDatas = _this4._metaDatas) === null || _this4$_metaDatas === void 0 ? void 0 : _this4$_metaDatas.some(function (metaData) {\n            return statisticsMetaHasType(metaData, stat_type);\n          });\n        });\n        var data = Object.assign(Object.assign({\n          chart_type: \"line\",\n          period: \"hour\"\n        }, this._config), {}, {\n          stat_types: configured_stat_types\n        });\n        var unitClass = (_this$_metaDatas = this._metaDatas) === null || _this$_metaDatas === void 0 || (_this$_metaDatas = _this$_metaDatas[0]) === null || _this$_metaDatas === void 0 ? void 0 : _this$_metaDatas.unit_class;\n        var statisticsUnit = unitClass ? undefined : (_this$_metaDatas2 = this._metaDatas) === null || _this$_metaDatas2 === void 0 || (_this$_metaDatas2 = _this$_metaDatas2[0]) === null || _this$_metaDatas2 === void 0 ? void 0 : _this$_metaDatas2.statistics_unit_of_measurement;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-form\\n        .hass=\", \"\\n        .data=\", \"\\n        .schema=\", \"\\n        .computeLabel=\", \"\\n        @value-changed=\", \"\\n      ></ha-form>\\n        <ha-statistics-picker\\n          allow-custom-entity\\n          .hass=\", \"\\n          .pickStatisticLabel=\", \"\\n          .pickedStatisticLabel=\", \"\\n          .includeStatisticsUnitOfMeasurement=\", \"\\n          .includeUnitClass=\", \"\\n          .ignoreRestrictionsOnFirstStatistic=\", \"\\n          .value=\", \"\\n          .configValue=\", \"\\n          @value-changed=\", \"\\n        ></ha-statistics-picker>\\n      </div>\\n    \"])), this.hass, data, schema, this._computeLabelCallback, this._valueChanged, this.hass, this.hass.localize(\"ui.panel.lovelace.editor.card.statistics-graph.pick_statistic\"), this.hass.localize(\"ui.panel.lovelace.editor.card.statistics-graph.picked_statistic\"), statisticsUnit, unitClass, true, this._configEntities, \"entities\", this._entitiesChanged);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        fireEvent(this, \"config-changed\", {\n          config: ev.detail.value\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_entitiesChanged\",\n      value: function () {\n        var _entitiesChanged2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ev) {\n          var _this5 = this;\n          var newEntityIds, newEntities, config, metadata;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                newEntityIds = ev.detail.value; // Save the EntityConfig objects from being replaced with strings\n                newEntities = newEntityIds.map(function (newEnt) {\n                  var matchEntity = _this5._config.entities.find(function (oldEnt) {\n                    return typeof oldEnt !== \"string\" && oldEnt.entity === newEnt;\n                  });\n                  return matchEntity !== null && matchEntity !== void 0 ? matchEntity : newEnt;\n                });\n                config = Object.assign(Object.assign({}, this._config), {}, {\n                  entities: newEntities\n                });\n                if (newEntityIds !== null && newEntityIds !== void 0 && newEntityIds.some(function (statistic_id) {\n                  return isExternalStatistic(statistic_id);\n                }) && config.period === \"5minute\") {\n                  delete config.period;\n                }\n                if (!(config.stat_types || config.unit)) {\n                  _context2.next = 10;\n                  break;\n                }\n                _context2.next = 7;\n                return getStatisticMetadata(this.hass, newEntityIds);\n              case 7:\n                _context2.t0 = _context2.sent;\n                _context2.next = 11;\n                break;\n              case 10:\n                _context2.t0 = undefined;\n              case 11:\n                metadata = _context2.t0;\n                if (config.stat_types && config.entities.length) {\n                  config.stat_types = ensureArray(config.stat_types).filter(function (stat_type) {\n                    return metadata.some(function (metaData) {\n                      return statisticsMetaHasType(metaData, stat_type);\n                    });\n                  });\n                  if (!config.stat_types.length) {\n                    delete config.stat_types;\n                  }\n                }\n                if (config.unit && !metadata.some(function (metaData) {\n                  return getDisplayUnit(_this5.hass, metaData === null || metaData === void 0 ? void 0 : metaData.statistic_id, metaData) === config.unit;\n                })) {\n                  delete config.unit;\n                }\n                fireEvent(this, \"config-changed\", {\n                  config: config\n                });\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _entitiesChanged(_x2) {\n          return _entitiesChanged2.apply(this, arguments);\n        }\n        return _entitiesChanged;\n      }()\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value: function value() {\n        var _this6 = this;\n        return function (schema) {\n          switch (schema.name) {\n            case \"chart_type\":\n            case \"stat_types\":\n            case \"period\":\n            case \"unit\":\n            case \"hide_legend\":\n            case \"logarithmic_scale\":\n              return _this6.hass.localize(\"ui.panel.lovelace.editor.card.statistics-graph.\".concat(schema.name));\n            default:\n              return _this6.hass.localize(\"ui.panel.lovelace.editor.card.generic.\".concat(schema.name));\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value: function value() {\n        return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    ha-statistics-picker {\\n      width: 100%;\\n    }\\n  \"])));\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","memoizeOne","array","assert","assign","boolean","literal","number","object","optional","string","union","ensureArray","fireEvent","deepEqual","supportedStatTypeMap","getDisplayUnit","getStatisticMetadata","isExternalStatistic","statisticsMetaHasType","processConfigEntities","baseLovelaceCardConfig","entitiesConfigStruct","DEFAULT_DAYS_TO_SHOW","statTypeStruct","cardConfigStruct","entities","title","days_to_show","period","chart_type","stat_types","unit","hide_legend","logarithmic_scale","periods","HuiStatisticsGraphCardEditor","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","_configEntities","map","cfg","entity","_this2","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","statisticIds","wrap","_callee$","_context","prev","next","hass","_metaDatas","sent","stop","_x","apply","willUpdate","changedProps","has","get","_this$_configEntities","undefined","_getStatisticsMetaData","_this3","localize","metaDatas","units","Set","forEach","metaData","statistic_id","add","schema","name","selector","text","type","required","select","options","label","disabled","some","default","min","mode","multiple","stat_type","size","push","from","render","_this4","_this$_metaDatas","_this$_metaDatas2","_schema","configured_stat_types","filter","_this4$_metaDatas","data","Object","unitClass","unit_class","statisticsUnit","statistics_unit_of_measurement","_templateObject","_taggedTemplateLiteral","_computeLabelCallback","_valueChanged","_entitiesChanged","ev","detail","_entitiesChanged2","_callee2","_this5","newEntityIds","newEntities","metadata","_callee2$","_context2","newEnt","matchEntity","find","oldEnt","t0","_x2","_this6","static","_templateObject2"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/config-elements/hui-statistics-graph-card-editor.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  array,\n  assert,\n  assign,\n  boolean,\n  literal,\n  number,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport { supportedStatTypeMap } from \"../../../../components/chart/statistics-chart\";\nimport \"../../../../components/entity/ha-statistics-picker\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { HaFormSchema } from \"../../../../components/ha-form/types\";\nimport {\n  getDisplayUnit,\n  getStatisticMetadata,\n  isExternalStatistic,\n  StatisticsMetaData,\n  statisticsMetaHasType,\n  StatisticType,\n} from \"../../../../data/recorder\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticsGraphCardConfig } from \"../../cards/types\";\nimport { processConfigEntities } from \"../../common/process-config-entities\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { entitiesConfigStruct } from \"../structs/entities-struct\";\nimport { DEFAULT_DAYS_TO_SHOW } from \"../../cards/hui-statistics-graph-card\";\n\nconst statTypeStruct = union([\n  literal(\"state\"),\n  literal(\"sum\"),\n  literal(\"change\"),\n  literal(\"min\"),\n  literal(\"max\"),\n  literal(\"mean\"),\n]);\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entities: array(entitiesConfigStruct),\n    title: optional(string()),\n    days_to_show: optional(number()),\n    period: optional(\n      union([\n        literal(\"5minute\"),\n        literal(\"hour\"),\n        literal(\"day\"),\n        literal(\"week\"),\n        literal(\"month\"),\n      ])\n    ),\n    chart_type: optional(union([literal(\"bar\"), literal(\"line\")])),\n    stat_types: optional(union([array(statTypeStruct), statTypeStruct])),\n    unit: optional(string()),\n    hide_legend: optional(boolean()),\n    logarithmic_scale: optional(boolean()),\n  })\n);\n\nconst periods = [\"5minute\", \"hour\", \"day\", \"week\", \"month\"] as const;\nconst stat_types = [\n  \"mean\",\n  \"min\",\n  \"max\",\n  \"sum\",\n  \"state\",\n  \"change\",\n] as StatisticType[];\n\n@customElement(\"hui-statistics-graph-card-editor\")\nexport class HuiStatisticsGraphCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticsGraphCardConfig;\n\n  @state() private _configEntities?: string[];\n\n  @state() private _metaDatas?: StatisticsMetaData[];\n\n  public setConfig(config: StatisticsGraphCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities(config.entities, false).map((cfg) => cfg.entity)\n      : [];\n  }\n\n  private _getStatisticsMetaData = async (statisticIds?: string[]) => {\n    this._metaDatas = await getStatisticMetadata(\n      this.hass!,\n      statisticIds || []\n    );\n  };\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"_configEntities\") &&\n      !deepEqual(this._configEntities, changedProps.get(\"_configEntities\"))\n    ) {\n      this._metaDatas = undefined;\n      if (this._configEntities?.length) {\n        this._getStatisticsMetaData(this._configEntities);\n      }\n    }\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      statisticIds: string[] | undefined,\n      metaDatas: StatisticsMetaData[] | undefined\n    ) => {\n      const units = new Set<string>();\n      metaDatas?.forEach((metaData) => {\n        const unit = getDisplayUnit(\n          this.hass!,\n          metaData.statistic_id,\n          metaData\n        );\n        if (unit) {\n          units.add(unit);\n        }\n      });\n      const schema: HaFormSchema[] = [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"period\",\n              required: true,\n              selector: {\n                select: {\n                  options: periods.map((period) => ({\n                    value: period,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.periods.${period}`\n                    ),\n                    disabled:\n                      period === \"5minute\" &&\n                      // External statistics don't support 5-minute statistics.\n                      statisticIds?.some((statistic_id) =>\n                        isExternalStatistic(statistic_id)\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"days_to_show\",\n              default: DEFAULT_DAYS_TO_SHOW,\n              selector: { number: { min: 1, mode: \"box\" } },\n            },\n            {\n              name: \"stat_types\",\n              required: true,\n              selector: {\n                select: {\n                  multiple: true,\n                  mode: \"list\",\n                  options: stat_types.map((stat_type) => ({\n                    value: stat_type,\n                    label: localize(\n                      `ui.panel.lovelace.editor.card.statistics-graph.stat_type_labels.${stat_type}`\n                    ),\n                    disabled:\n                      !metaDatas ||\n                      !metaDatas.some((metaData) =>\n                        statisticsMetaHasType(\n                          metaData,\n                          supportedStatTypeMap[stat_type]\n                        )\n                      ),\n                  })),\n                },\n              },\n            },\n            {\n              name: \"chart_type\",\n              required: true,\n              type: \"select\",\n              options: [\n                [\"line\", \"Line\"],\n                [\"bar\", \"Bar\"],\n              ],\n            },\n            {\n              name: \"hide_legend\",\n              required: false,\n              selector: { boolean: {} },\n            },\n            {\n              name: \"logarithmic_scale\",\n              required: false,\n              selector: { boolean: {} },\n            },\n          ],\n        },\n      ];\n\n      if (units.size > 1) {\n        (schema[1] as any).schema.push({\n          name: \"unit\",\n          required: false,\n          selector: {\n            select: {\n              options: Array.from(units).map((unit) => ({\n                value: unit,\n                label: unit,\n              })),\n            },\n          },\n        });\n      }\n\n      return schema;\n    }\n  );\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n\n    const schema = this._schema(\n      this.hass.localize,\n      this._configEntities,\n      this._metaDatas\n    );\n    const configured_stat_types = this._config!.stat_types\n      ? ensureArray(this._config.stat_types)\n      : stat_types.filter((stat_type) =>\n          this._metaDatas?.some((metaData) =>\n            statisticsMetaHasType(metaData, stat_type)\n          )\n        );\n    const data = {\n      chart_type: \"line\",\n      period: \"hour\",\n      ...this._config,\n      stat_types: configured_stat_types,\n    };\n    const unitClass = this._metaDatas?.[0]?.unit_class;\n    const statisticsUnit = unitClass\n      ? undefined\n      : this._metaDatas?.[0]?.statistics_unit_of_measurement;\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n        <ha-statistics-picker\n          allow-custom-entity\n          .hass=${this.hass}\n          .pickStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.pick_statistic\"\n          )}\n          .pickedStatisticLabel=${this.hass!.localize(\n            \"ui.panel.lovelace.editor.card.statistics-graph.picked_statistic\"\n          )}\n          .includeStatisticsUnitOfMeasurement=${statisticsUnit}\n          .includeUnitClass=${unitClass}\n          .ignoreRestrictionsOnFirstStatistic=${true}\n          .value=${this._configEntities}\n          .configValue=${\"entities\"}\n          @value-changed=${this._entitiesChanged}\n        ></ha-statistics-picker>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    fireEvent(this, \"config-changed\", { config: ev.detail.value });\n  }\n\n  private async _entitiesChanged(ev: CustomEvent): Promise<void> {\n    const newEntityIds = ev.detail.value;\n\n    // Save the EntityConfig objects from being replaced with strings\n    const newEntities = newEntityIds.map((newEnt) => {\n      const matchEntity = this._config!.entities.find(\n        (oldEnt) => typeof oldEnt !== \"string\" && oldEnt.entity === newEnt\n      );\n      return matchEntity ?? newEnt;\n    });\n\n    const config = { ...this._config!, entities: newEntities };\n    if (\n      newEntityIds?.some((statistic_id) => isExternalStatistic(statistic_id)) &&\n      config.period === \"5minute\"\n    ) {\n      delete config.period;\n    }\n    const metadata =\n      config.stat_types || config.unit\n        ? await getStatisticMetadata(this.hass!, newEntityIds)\n        : undefined;\n    if (config.stat_types && config.entities.length) {\n      config.stat_types = ensureArray(config.stat_types).filter((stat_type) =>\n        metadata!.some((metaData) => statisticsMetaHasType(metaData, stat_type))\n      );\n      if (!config.stat_types.length) {\n        delete config.stat_types;\n      }\n    }\n    if (\n      config.unit &&\n      !metadata!.some(\n        (metaData) =>\n          getDisplayUnit(this.hass!, metaData?.statistic_id, metaData) ===\n          config.unit\n      )\n    ) {\n      delete config.unit;\n    }\n    fireEvent(this, \"config-changed\", {\n      config,\n    });\n  }\n\n  private _computeLabelCallback = (schema) => {\n    switch (schema.name) {\n      case \"chart_type\":\n      case \"stat_types\":\n      case \"period\":\n      case \"unit\":\n      case \"hide_legend\":\n      case \"logarithmic_scale\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.statistics-graph.${schema.name}`\n        );\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = css`\n    ha-statistics-picker {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistics-graph-card-editor\": HuiStatisticsGraphCardEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}