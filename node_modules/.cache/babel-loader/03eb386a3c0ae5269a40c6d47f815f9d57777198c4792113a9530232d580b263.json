{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.object.assign.js\";\nimport { expose } from \"comlink\";\nimport { marked } from \"marked\";\nimport { filterXSS, getDefaultWhiteList } from \"xss\";\nvar whiteListNormal;\nvar whiteListSvg;\n\n// Override the default `onTagAttr` behavior to only render\n// our markdown checkboxes.\n// Returning undefined causes the default measure to be taken\n// in the xss library.\nvar onTagAttr = function onTagAttr(tag, name, value) {\n  if (tag === \"input\") {\n    if (name === \"type\" && value === \"checkbox\" || name === \"checked\" || name === \"disabled\") {\n      return undefined;\n    }\n    return \"\";\n  }\n  return undefined;\n};\nvar renderMarkdown = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(content, markedOptions) {\n    var hassOptions,\n      whiteList,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          hassOptions = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n          if (!whiteListNormal) {\n            whiteListNormal = Object.assign(Object.assign({}, getDefaultWhiteList()), {}, {\n              input: [\"type\", \"disabled\", \"checked\"],\n              \"ha-icon\": [\"icon\"],\n              \"ha-svg-icon\": [\"path\"],\n              \"ha-alert\": [\"alert-type\", \"title\"],\n              \"ha-qr-code\": [\"data\", \"scale\", \"width\", \"margin\", \"error-correction-level\", \"center-image\"]\n            });\n          }\n          if (hassOptions.allowSvg) {\n            if (!whiteListSvg) {\n              whiteListSvg = Object.assign(Object.assign({}, whiteListNormal), {}, {\n                svg: [\"xmlns\", \"height\", \"width\"],\n                path: [\"transform\", \"stroke\", \"d\"],\n                img: [\"src\"]\n              });\n            }\n            whiteList = whiteListSvg;\n          } else {\n            whiteList = whiteListNormal;\n          }\n          _context.t0 = filterXSS;\n          _context.next = 6;\n          return marked(content, markedOptions);\n        case 6:\n          _context.t1 = _context.sent;\n          _context.t2 = {\n            whiteList: whiteList,\n            onTagAttr: onTagAttr\n          };\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1, _context.t2));\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function renderMarkdown(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar api = {\n  renderMarkdown: renderMarkdown\n};\nexpose(api);","map":{"version":3,"names":["expose","marked","filterXSS","getDefaultWhiteList","whiteListNormal","whiteListSvg","onTagAttr","tag","name","value","undefined","renderMarkdown","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","content","markedOptions","hassOptions","whiteList","_args","arguments","wrap","_callee$","_context","prev","next","length","Object","assign","input","allowSvg","svg","path","img","t0","t1","sent","t2","abrupt","stop","_x","_x2","apply","api"],"sources":["/workspaces/frontend/src/resources/markdown-worker.ts"],"sourcesContent":["import { expose } from \"comlink\";\nimport { marked, MarkedOptions } from \"marked\";\nimport { filterXSS, getDefaultWhiteList, IWhiteList } from \"xss\";\n\nlet whiteListNormal: IWhiteList | undefined;\nlet whiteListSvg: IWhiteList | undefined;\n\n// Override the default `onTagAttr` behavior to only render\n// our markdown checkboxes.\n// Returning undefined causes the default measure to be taken\n// in the xss library.\nconst onTagAttr = (\n  tag: string,\n  name: string,\n  value: string\n): string | undefined => {\n  if (tag === \"input\") {\n    if (\n      (name === \"type\" && value === \"checkbox\") ||\n      name === \"checked\" ||\n      name === \"disabled\"\n    ) {\n      return undefined;\n    }\n    return \"\";\n  }\n  return undefined;\n};\n\nconst renderMarkdown = async (\n  content: string,\n  markedOptions: MarkedOptions,\n  hassOptions: {\n    // Do not allow SVG on untrusted content, it allows XSS.\n    allowSvg?: boolean;\n  } = {}\n): Promise<string> => {\n  if (!whiteListNormal) {\n    whiteListNormal = {\n      ...getDefaultWhiteList(),\n      input: [\"type\", \"disabled\", \"checked\"],\n      \"ha-icon\": [\"icon\"],\n      \"ha-svg-icon\": [\"path\"],\n      \"ha-alert\": [\"alert-type\", \"title\"],\n      \"ha-qr-code\": [\n        \"data\",\n        \"scale\",\n        \"width\",\n        \"margin\",\n        \"error-correction-level\",\n        \"center-image\",\n      ],\n    };\n  }\n\n  let whiteList: IWhiteList | undefined;\n\n  if (hassOptions.allowSvg) {\n    if (!whiteListSvg) {\n      whiteListSvg = {\n        ...whiteListNormal,\n        svg: [\"xmlns\", \"height\", \"width\"],\n        path: [\"transform\", \"stroke\", \"d\"],\n        img: [\"src\"],\n      };\n    }\n    whiteList = whiteListSvg;\n  } else {\n    whiteList = whiteListNormal;\n  }\n\n  return filterXSS(await marked(content, markedOptions), {\n    whiteList,\n    onTagAttr,\n  });\n};\n\nconst api = {\n  renderMarkdown,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}