{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nexport var IronSelection = /*#__PURE__*/function () {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  function IronSelection(selectCallback) {\n    _classCallCheck(this, IronSelection);\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  _createClass(IronSelection, [{\n    key: \"get\",\n    value: function get() {\n      return this.multi ? this.selection.slice() : this.selection[0];\n    }\n\n    /**\n     * Clears all the selection except the ones indicated.\n     *\n     * @param {Array} excludes items to be excluded.\n     */\n  }, {\n    key: \"clear\",\n    value: function clear(excludes) {\n      this.selection.slice().forEach(function (item) {\n        if (!excludes || excludes.indexOf(item) < 0) {\n          this.setItemSelected(item, false);\n        }\n      }, this);\n    }\n\n    /**\n     * Indicates if a given item is selected.\n     *\n     * @param {*} item The item whose selection state should be checked.\n     * @return {boolean} Returns true if `item` is selected.\n     */\n  }, {\n    key: \"isSelected\",\n    value: function isSelected(item) {\n      return this.selection.indexOf(item) >= 0;\n    }\n\n    /**\n     * Sets the selection state for a given item to either selected or deselected.\n     *\n     * @param {*} item The item to select.\n     * @param {boolean} isSelected True for selected, false for deselected.\n     */\n  }, {\n    key: \"setItemSelected\",\n    value: function setItemSelected(item, isSelected) {\n      if (item != null) {\n        if (isSelected !== this.isSelected(item)) {\n          // proceed to update selection only if requested state differs from\n          // current\n          if (isSelected) {\n            this.selection.push(item);\n          } else {\n            var i = this.selection.indexOf(item);\n            if (i >= 0) {\n              this.selection.splice(i, 1);\n            }\n          }\n          if (this.selectCallback) {\n            this.selectCallback(item, isSelected);\n          }\n        }\n      }\n    }\n\n    /**\n     * Sets the selection state for a given item. If the `multi` property\n     * is true, then the selected state of `item` will be toggled; otherwise\n     * the `item` will be selected.\n     *\n     * @param {*} item The item to select.\n     */\n  }, {\n    key: \"select\",\n    value: function select(item) {\n      if (this.multi) {\n        this.toggle(item);\n      } else if (this.get() !== item) {\n        this.setItemSelected(this.get(), false);\n        this.setItemSelected(item, true);\n      }\n    }\n\n    /**\n     * Toggles the selection state for `item`.\n     *\n     * @param {*} item The item to toggle.\n     */\n  }, {\n    key: \"toggle\",\n    value: function toggle(item) {\n      this.setItemSelected(item, !this.isSelected(item));\n    }\n  }]);\n  return IronSelection;\n}();\n;","map":{"version":3,"names":["IronSelection","selectCallback","_classCallCheck","selection","_createClass","key","value","get","multi","slice","clear","excludes","forEach","item","indexOf","setItemSelected","isSelected","push","i","splice","select","toggle"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/iron-selector/iron-selection.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nexport class IronSelection {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  constructor(selectCallback) {\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get() {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  }\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @param {Array} excludes items to be excluded.\n   */\n  clear(excludes) {\n    this.selection.slice().forEach(function(item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  }\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @param {*} item The item whose selection state should be checked.\n   * @return {boolean} Returns true if `item` is selected.\n   */\n  isSelected(item) {\n    return this.selection.indexOf(item) >= 0;\n  }\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected(item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from\n        // current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @param {*} item The item to select.\n   */\n  select(item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  }\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @param {*} item The item to toggle.\n   */\n  toggle(item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}