{"ast":null,"code":"import { expose } from \"comlink\";\nimport { stringCompare } from \"../../common/string/compare\";\nconst filterData = (data, columns, filter) => {\n  filter = filter.toUpperCase();\n  return data.filter(row => Object.entries(columns).some(columnEntry => {\n    const [key, column] = columnEntry;\n    if (column.filterable) {\n      if (String(column.filterKey ? row[column.valueColumn || key][column.filterKey] : row[column.valueColumn || key]).toUpperCase().includes(filter)) {\n        return true;\n      }\n    }\n    return false;\n  }));\n};\nconst sortData = (data, column, direction, sortColumn, language) => data.sort((a, b) => {\n  let sort = 1;\n  if (direction === \"desc\") {\n    sort = -1;\n  }\n  let valA = column.filterKey ? a[column.valueColumn || sortColumn][column.filterKey] : a[column.valueColumn || sortColumn];\n  let valB = column.filterKey ? b[column.valueColumn || sortColumn][column.filterKey] : b[column.valueColumn || sortColumn];\n  if (column.type === \"numeric\") {\n    valA = isNaN(valA) ? undefined : Number(valA);\n    valB = isNaN(valB) ? undefined : Number(valB);\n  } else if (typeof valA === \"string\" && typeof valB === \"string\") {\n    return sort * stringCompare(valA, valB, language);\n  }\n\n  // Ensure \"undefined\" and \"null\" are always sorted to the bottom\n  if (valA == null && valB != null) {\n    return 1;\n  }\n  if (valB == null && valA != null) {\n    return -1;\n  }\n  if (valA < valB) {\n    return sort * -1;\n  }\n  if (valA > valB) {\n    return sort * 1;\n  }\n  return 0;\n});\nconst api = {\n  filterData,\n  sortData\n};\nexpose(api);","map":{"version":3,"names":["expose","stringCompare","filterData","data","columns","filter","toUpperCase","row","Object","entries","some","columnEntry","key","column","filterable","String","filterKey","valueColumn","includes","sortData","direction","sortColumn","language","sort","a","b","valA","valB","type","isNaN","undefined","Number","api"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/data-table/sort-filter-worker.ts"],"sourcesContent":["import { expose } from \"comlink\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport type {\n  ClonedDataTableColumnData,\n  DataTableRowData,\n  SortableColumnContainer,\n  SortingDirection,\n} from \"./ha-data-table\";\n\nconst filterData = (\n  data: DataTableRowData[],\n  columns: SortableColumnContainer,\n  filter: string\n) => {\n  filter = filter.toUpperCase();\n  return data.filter((row) =>\n    Object.entries(columns).some((columnEntry) => {\n      const [key, column] = columnEntry;\n      if (column.filterable) {\n        if (\n          String(\n            column.filterKey\n              ? row[column.valueColumn || key][column.filterKey]\n              : row[column.valueColumn || key]\n          )\n            .toUpperCase()\n            .includes(filter)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    })\n  );\n};\n\nconst sortData = (\n  data: DataTableRowData[],\n  column: ClonedDataTableColumnData,\n  direction: SortingDirection,\n  sortColumn: string,\n  language?: string\n) =>\n  data.sort((a, b) => {\n    let sort = 1;\n    if (direction === \"desc\") {\n      sort = -1;\n    }\n\n    let valA = column.filterKey\n      ? a[column.valueColumn || sortColumn][column.filterKey]\n      : a[column.valueColumn || sortColumn];\n\n    let valB = column.filterKey\n      ? b[column.valueColumn || sortColumn][column.filterKey]\n      : b[column.valueColumn || sortColumn];\n\n    if (column.type === \"numeric\") {\n      valA = isNaN(valA) ? undefined : Number(valA);\n      valB = isNaN(valB) ? undefined : Number(valB);\n    } else if (typeof valA === \"string\" && typeof valB === \"string\") {\n      return sort * stringCompare(valA, valB, language);\n    }\n\n    // Ensure \"undefined\" and \"null\" are always sorted to the bottom\n    if (valA == null && valB != null) {\n      return 1;\n    }\n    if (valB == null && valA != null) {\n      return -1;\n    }\n\n    if (valA < valB) {\n      return sort * -1;\n    }\n    if (valA > valB) {\n      return sort * 1;\n    }\n    return 0;\n  });\n\nconst api = {\n  filterData,\n  sortData,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAQ3D,MAAMC,UAAU,GAAGA,CACjBC,IAAwB,EACxBC,OAAgC,EAChCC,MAAc,KACX;EACHA,MAAM,GAAGA,MAAM,CAACC,WAAW,CAAC,CAAC;EAC7B,OAAOH,IAAI,CAACE,MAAM,CAAEE,GAAG,IACrBC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,CAACM,IAAI,CAAEC,WAAW,IAAK;IAC5C,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGF,WAAW;IACjC,IAAIE,MAAM,CAACC,UAAU,EAAE;MACrB,IACEC,MAAM,CACJF,MAAM,CAACG,SAAS,GACZT,GAAG,CAACM,MAAM,CAACI,WAAW,IAAIL,GAAG,CAAC,CAACC,MAAM,CAACG,SAAS,CAAC,GAChDT,GAAG,CAACM,MAAM,CAACI,WAAW,IAAIL,GAAG,CACnC,CAAC,CACEN,WAAW,CAAC,CAAC,CACbY,QAAQ,CAACb,MAAM,CAAC,EACnB;QACA,OAAO,IAAI;MACb;IACF;IACA,OAAO,KAAK;EACd,CAAC,CACH,CAAC;AACH,CAAC;AAED,MAAMc,QAAQ,GAAGA,CACfhB,IAAwB,EACxBU,MAAiC,EACjCO,SAA2B,EAC3BC,UAAkB,EAClBC,QAAiB,KAEjBnB,IAAI,CAACoB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;EAClB,IAAIF,IAAI,GAAG,CAAC;EACZ,IAAIH,SAAS,KAAK,MAAM,EAAE;IACxBG,IAAI,GAAG,CAAC,CAAC;EACX;EAEA,IAAIG,IAAI,GAAGb,MAAM,CAACG,SAAS,GACvBQ,CAAC,CAACX,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC,CAACR,MAAM,CAACG,SAAS,CAAC,GACrDQ,CAAC,CAACX,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC;EAEvC,IAAIM,IAAI,GAAGd,MAAM,CAACG,SAAS,GACvBS,CAAC,CAACZ,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC,CAACR,MAAM,CAACG,SAAS,CAAC,GACrDS,CAAC,CAACZ,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC;EAEvC,IAAIR,MAAM,CAACe,IAAI,KAAK,SAAS,EAAE;IAC7BF,IAAI,GAAGG,KAAK,CAACH,IAAI,CAAC,GAAGI,SAAS,GAAGC,MAAM,CAACL,IAAI,CAAC;IAC7CC,IAAI,GAAGE,KAAK,CAACF,IAAI,CAAC,GAAGG,SAAS,GAAGC,MAAM,CAACJ,IAAI,CAAC;EAC/C,CAAC,MAAM,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;IAC/D,OAAOJ,IAAI,GAAGtB,aAAa,CAACyB,IAAI,EAAEC,IAAI,EAAEL,QAAQ,CAAC;EACnD;;EAEA;EACA,IAAII,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;IAChC,OAAO,CAAC;EACV;EACA,IAAIA,IAAI,IAAI,IAAI,IAAID,IAAI,IAAI,IAAI,EAAE;IAChC,OAAO,CAAC,CAAC;EACX;EAEA,IAAIA,IAAI,GAAGC,IAAI,EAAE;IACf,OAAOJ,IAAI,GAAG,CAAC,CAAC;EAClB;EACA,IAAIG,IAAI,GAAGC,IAAI,EAAE;IACf,OAAOJ,IAAI,GAAG,CAAC;EACjB;EACA,OAAO,CAAC;AACV,CAAC,CAAC;AAEJ,MAAMS,GAAG,GAAG;EACV9B,UAAU;EACViB;AACF,CAAC;AAIDnB,MAAM,CAACgC,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}