{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport \"../../../components/ha-switch\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport { turnOnOffEntities } from \"../common/entity/turn-on-off-entities\";\nlet HuiEntitiesToggle = _decorate([customElement(\"hui-entities-toggle\")], function (_initialize, _LitElement) {\n  class HuiEntitiesToggle extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiEntitiesToggle,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"entities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_toggleEntities\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        _get(_getPrototypeOf(HuiEntitiesToggle.prototype), \"willUpdate\", this).call(this, changedProperties);\n        if (changedProperties.has(\"entities\")) {\n          this._toggleEntities = this.entities.filter(entityId => entityId in this.hass.states && DOMAINS_TOGGLE.has(entityId.split(\".\", 1)[0]));\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_toggleEntities;\n        if (!((_this$_toggleEntities = this._toggleEntities) !== null && _this$_toggleEntities !== void 0 && _this$_toggleEntities.length)) {\n          return nothing;\n        }\n        return html`\n      <ha-switch\n        aria-label=${this.hass.localize(\"ui.panel.lovelace.card.entities.toggle\")}\n        .checked=${this._toggleEntities.some(entityId => {\n          const stateObj = this.hass.states[entityId];\n          return stateObj && stateObj.state === \"on\";\n        })}\n        @change=${this._callService}\n      ></ha-switch>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        width: 38px;\n        display: block;\n      }\n      ha-switch {\n        padding: 13px 5px;\n        margin: -4px -8px;\n      }\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_callService\",\n      value: function _callService(ev) {\n        forwardHaptic(\"light\");\n        const turnOn = ev.target.checked;\n        turnOnOffEntities(this.hass, this._toggleEntities, turnOn);\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","DOMAINS_TOGGLE","forwardHaptic","turnOnOffEntities","HuiEntitiesToggle","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Array","key","value","attribute","willUpdate","changedProperties","_get","_getPrototypeOf","prototype","call","has","_toggleEntities","entities","filter","entityId","hass","states","split","render","_this$_toggleEntities","length","localize","some","stateObj","_callService","static","styles","ev","turnOn","target","checked"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/components/hui-entities-toggle.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport \"../../../components/ha-switch\";\nimport type { HaSwitch } from \"../../../components/ha-switch\";\nimport { forwardHaptic } from \"../../../data/haptics\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { turnOnOffEntities } from \"../common/entity/turn-on-off-entities\";\n\n@customElement(\"hui-entities-toggle\")\nclass HuiEntitiesToggle extends LitElement {\n  @property({ type: Array }) public entities?: string[];\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _toggleEntities?: string[];\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"entities\")) {\n      this._toggleEntities = this.entities!.filter(\n        (entityId) =>\n          entityId in this.hass!.states &&\n          DOMAINS_TOGGLE.has(entityId.split(\".\", 1)[0])\n      );\n    }\n  }\n\n  protected render() {\n    if (!this._toggleEntities?.length) {\n      return nothing;\n    }\n\n    return html`\n      <ha-switch\n        aria-label=${this.hass!.localize(\n          \"ui.panel.lovelace.card.entities.toggle\"\n        )}\n        .checked=${this._toggleEntities!.some((entityId) => {\n          const stateObj = this.hass!.states[entityId];\n          return stateObj && stateObj.state === \"on\";\n        })}\n        @change=${this._callService}\n      ></ha-switch>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 38px;\n        display: block;\n      }\n      ha-switch {\n        padding: 13px 5px;\n        margin: -4px -8px;\n      }\n    `;\n  }\n\n  private _callService(ev: MouseEvent): void {\n    forwardHaptic(\"light\");\n    const turnOn = (ev.target as HaSwitch).checked;\n    turnOnOffEntities(this.hass!, this._toggleEntities!, turnOn!);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-entities-toggle\": HuiEntitiesToggle;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}