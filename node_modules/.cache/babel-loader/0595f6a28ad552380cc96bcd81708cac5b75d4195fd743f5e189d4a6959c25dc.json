{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiAbTesting = \"M4 2A2 2 0 0 0 2 4V12H4V8H6V12H8V4A2 2 0 0 0 6 2H4M4 4H6V6H4M22 15.5V14A2 2 0 0 0 20 12H16V22H20A2 2 0 0 0 22 20V18.5A1.54 1.54 0 0 0 20.5 17A1.54 1.54 0 0 0 22 15.5M20 20H18V18H20V20M20 16H18V14H20M5.79 21.61L4.21 20.39L18.21 2.39L19.79 3.61Z\";\nconst mdiArrowDecision = \"M11,5H8L12,1L16,5H13V9.43C12.25,9.89 11.58,10.46 11,11.12V5M22,11L18,7V10C14.39,9.85 11.31,12.57 11,16.17C9.44,16.72 8.62,18.44 9.17,20C9.72,21.56 11.44,22.38 13,21.83C14.56,21.27 15.38,19.56 14.83,18C14.53,17.14 13.85,16.47 13,16.17C13.47,12.17 17.47,11.97 17.95,11.97V14.97L22,11M10.63,11.59C9.3,10.57 7.67,10 6,10V7L2,11L6,15V12C7.34,12.03 8.63,12.5 9.64,13.4C9.89,12.76 10.22,12.15 10.63,11.59Z\";\nconst mdiArrowUp = \"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\";\nconst mdiAsterisk = \"M21 13H14.4L19.1 17.7L17.7 19.1L13 14.4V21H11V14.3L6.3 19L4.9 17.6L9.4 13H3V11H9.6L4.9 6.3L6.3 4.9L11 9.6V3H13V9.4L17.6 4.8L19 6.3L14.3 11H21V13Z\";\nconst mdiCallMissed = \"M19.59,7L12,14.59L6.41,9H11V7H3V15H5V10.41L12,17.41L21,8.41\";\nconst mdiCallReceived = \"M20,5.41L18.59,4L7,15.59V9H5V19H15V17H8.41\";\nconst mdiCallSplit = \"M14,4L16.29,6.29L13.41,9.17L14.83,10.59L17.71,7.71L20,10V4M10,4H4V10L6.29,7.71L11,12.41V20H13V11.59L7.71,6.29\";\nconst mdiCheckboxBlankOutline = \"M19,3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3M19,5V19H5V5H19Z\";\nconst mdiCheckboxMarkedOutline = \"M19,19H5V5H15V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V11H19M7.91,10.08L6.5,11.5L11,16L21,6L19.59,4.58L11,13.17L7.91,10.08Z\";\nconst mdiChevronDown = \"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\";\nconst mdiChevronUp = \"M7.41,15.41L12,10.83L16.59,15.41L18,14L12,8L6,14L7.41,15.41Z\";\nconst mdiClose = \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\";\nconst mdiCodeBraces = \"M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z\";\nconst mdiCodeBrackets = \"M15,4V6H18V18H15V20H20V4M4,4V20H9V18H6V6H9V4H4Z\";\nconst mdiRefresh = \"M17.65,6.35C16.2,4.9 14.21,4 12,4A8,8 0 0,0 4,12A8,8 0 0,0 12,20C15.73,20 18.84,17.45 19.73,14H17.65C16.83,16.33 14.61,18 12,18A6,6 0 0,1 6,12A6,6 0 0,1 12,6C13.66,6 15.14,6.69 16.22,7.78L13,11H20V4L17.65,6.35Z\";\nconst mdiRoomService = \"M12,5A2,2 0 0,1 14,7C14,7.24 13.96,7.47 13.88,7.69C17.95,8.5 21,11.91 21,16H3C3,11.91 6.05,8.5 10.12,7.69C10.04,7.47 10,7.24 10,7A2,2 0 0,1 12,5M22,19H2V17H22V19Z\";\nconst mdiShuffleDisabled = \"M16,4.5V7H5V9H16V11.5L19.5,8M16,12.5V15H5V17H16V19.5L19.5,16\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { ACTION_ICONS } from \"../../data/action\";\nimport { getActionType } from \"../../data/script\";\nimport \"../ha-icon-button\";\nimport \"./hat-graph-branch\";\nimport { BRANCH_HEIGHT, NODE_SIZE, SPACING } from \"./hat-graph-const\";\nimport \"./hat-graph-node\";\nimport \"./hat-graph-spacer\";\nexport let HatScriptGraph = _decorate([customElement(\"hat-script-graph\")], function (_initialize, _LitElement) {\n  class HatScriptGraph extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HatScriptGraph,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"trace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"selected\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"renderedNodes\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"trackedNodes\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"method\",\n      key: \"selectNode\",\n      value: function selectNode(config, path) {\n        return () => {\n          fireEvent(this, \"graph-node-selected\", {\n            config,\n            path\n          });\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_trigger\",\n      value: function render_trigger(config, i) {\n        const path = `trigger/${i}`;\n        const track = this.trace && path in this.trace.trace;\n        this.renderedNodes[path] = {\n          config,\n          path\n        };\n        if (track) {\n          this.trackedNodes[path] = this.renderedNodes[path];\n        }\n        return html`\n      <hat-graph-node\n        graphStart\n        ?track=${track}\n        @focus=${this.selectNode(config, path)}\n        ?active=${this.selected === path}\n        .iconPath=${mdiAsterisk}\n        .notEnabled=${config.enabled === false}\n        tabindex=${track ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_condition\",\n      value: function render_condition(config, i) {\n        const path = `condition/${i}`;\n        this.renderedNodes[path] = {\n          config,\n          path\n        };\n        if (this.trace && path in this.trace.trace) {\n          this.trackedNodes[path] = this.renderedNodes[path];\n        }\n        return this.render_condition_node(config, path);\n      }\n    }, {\n      kind: \"field\",\n      key: \"typeRenderers\",\n      value() {\n        return {\n          condition: this.render_condition_node,\n          and: this.render_condition_node,\n          or: this.render_condition_node,\n          not: this.render_condition_node,\n          service: this.render_service_node,\n          wait_template: this.render_wait_node,\n          wait_for_trigger: this.render_wait_node,\n          repeat: this.render_repeat_node,\n          choose: this.render_choose_node,\n          if: this.render_if_node,\n          parallel: this.render_parallel_node,\n          other: this.render_other_node\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_action_node\",\n      value: function render_action_node(node, path, graphStart = false, disabled = false) {\n        const type = Object.keys(this.typeRenderers).find(key => key in node) || \"other\";\n        this.renderedNodes[path] = {\n          config: node,\n          path\n        };\n        if (this.trace && path in this.trace.trace) {\n          this.trackedNodes[path] = this.renderedNodes[path];\n        }\n        return this.typeRenderers[type].bind(this)(node, path, graphStart, disabled);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_choose_node\",\n      value: function render_choose_node(config, path, graphStart = false, disabled = false) {\n        var _ensureArray, _ensureArray2;\n        const trace = this.trace.trace[path];\n        const trace_path = trace ? trace.map(trc => trc.result === undefined || trc.result.choice === \"default\" ? \"default\" : trc.result.choice) : [];\n        const track_default = trace_path.includes(\"default\");\n        return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(config, path)}\n        ?track=${trace !== undefined}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || config.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiArrowDecision}\n          ?track=${trace !== undefined}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || config.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n\n        ${config.choose ? (_ensureArray = ensureArray(config.choose)) === null || _ensureArray === void 0 ? void 0 : _ensureArray.map((branch, i) => {\n          const branch_path = `${path}/choose/${i}`;\n          const track_this = trace_path.includes(i);\n          this.renderedNodes[branch_path] = {\n            config,\n            path: branch_path\n          };\n          if (track_this) {\n            this.trackedNodes[branch_path] = this.renderedNodes[branch_path];\n          }\n          return html`\n                <div class=\"graph-container\" ?track=${track_this}>\n                  <hat-graph-node\n                    .iconPath=${!trace || track_this ? mdiCheckboxMarkedOutline : mdiCheckboxBlankOutline}\n                    @focus=${this.selectNode(config, branch_path)}\n                    ?track=${track_this}\n                    ?active=${this.selected === branch_path}\n                    .notEnabled=${disabled || config.enabled === false}\n                  ></hat-graph-node>\n                  ${branch.sequence !== null ? ensureArray(branch.sequence).map((action, j) => this.render_action_node(action, `${branch_path}/sequence/${j}`, false, disabled || config.enabled === false)) : \"\"}\n                </div>\n              `;\n        }) : \"\"}\n        <div ?track=${track_default}>\n          <hat-graph-spacer ?track=${track_default}></hat-graph-spacer>\n          ${config.default !== null ? (_ensureArray2 = ensureArray(config.default)) === null || _ensureArray2 === void 0 ? void 0 : _ensureArray2.map((action, i) => this.render_action_node(action, `${path}/default/${i}`, false, disabled || config.enabled === false)) : \"\"}\n        </div>\n      </hat-graph-branch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_if_node\",\n      value: function render_if_node(config, path, graphStart = false, disabled = false) {\n        var _config$then;\n        const trace = this.trace.trace[path];\n        let trackThen = false;\n        let trackElse = false;\n        for (const trc of trace || []) {\n          var _trc$result, _trc$result2;\n          if (!trackThen && ((_trc$result = trc.result) === null || _trc$result === void 0 ? void 0 : _trc$result.choice) === \"then\") {\n            trackThen = true;\n          }\n          if (!trackElse && ((_trc$result2 = trc.result) === null || _trc$result2 === void 0 ? void 0 : _trc$result2.choice) === \"else\" || !trc.result) {\n            trackElse = true;\n          }\n          if (trackElse && trackThen) {\n            break;\n          }\n        }\n        return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(config, path)}\n        ?track=${trace !== undefined}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || config.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiCallSplit}\n          ?track=${trace !== undefined}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || config.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        ${config.else ? html`<div class=\"graph-container\" ?track=${trackElse}>\n              <hat-graph-node\n                .iconPath=${mdiCallMissed}\n                ?track=${trackElse}\n                ?active=${this.selected === path}\n                .notEnabled=${disabled || config.enabled === false}\n                nofocus\n              ></hat-graph-node\n              >${ensureArray(config.else).map((action, j) => this.render_action_node(action, `${path}/else/${j}`, false, disabled || config.enabled === false))}\n            </div>` : html`<hat-graph-spacer ?track=${trackElse}></hat-graph-spacer>`}\n        <div class=\"graph-container\" ?track=${trackThen}>\n          <hat-graph-node\n            .iconPath=${mdiCallReceived}\n            ?track=${trackThen}\n            ?active=${this.selected === path}\n            .notEnabled=${disabled || config.enabled === false}\n            nofocus\n          ></hat-graph-node>\n          ${ensureArray((_config$then = config.then) !== null && _config$then !== void 0 ? _config$then : []).map((action, j) => this.render_action_node(action, `${path}/then/${j}`, false, disabled || config.enabled === false))}\n        </div>\n      </hat-graph-branch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_condition_node\",\n      value: function render_condition_node(node, path, graphStart = false, disabled = false) {\n        const trace = this.trace.trace[path];\n        let track = false;\n        let trackPass = false;\n        let trackFailed = false;\n        if (trace) {\n          for (const trc of trace) {\n            if (trc.result) {\n              track = true;\n              if (trc.result.result) {\n                trackPass = true;\n              } else {\n                trackFailed = true;\n              }\n            }\n            if (trackPass && trackFailed) {\n              break;\n            }\n          }\n        }\n        return html`\n      <hat-graph-branch\n        @focus=${this.selectNode(node, path)}\n        ?track=${track}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        short\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          slot=\"head\"\n          ?track=${track}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          .iconPath=${mdiAbTesting}\n          nofocus\n        ></hat-graph-node>\n        <div\n          style=${`width: ${NODE_SIZE + SPACING}px;`}\n          graphStart\n          graphEnd\n        ></div>\n        <div ?track=${trackPass}></div>\n        <hat-graph-node\n          .iconPath=${mdiClose}\n          nofocus\n          ?track=${trackFailed}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n        ></hat-graph-node>\n      </hat-graph-branch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_repeat_node\",\n      value: function render_repeat_node(node, path, graphStart = false, disabled = false) {\n        var _this$trace;\n        const trace = this.trace.trace[path];\n        const repeats = (_this$trace = this.trace) === null || _this$trace === void 0 || (_this$trace = _this$trace.trace[`${path}/repeat/sequence/0`]) === null || _this$trace === void 0 ? void 0 : _this$trace.length;\n        return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiRefresh}\n          ?track=${path in this.trace.trace}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        <hat-graph-node\n          .iconPath=${mdiArrowUp}\n          ?track=${repeats > 1}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          nofocus\n          .badge=${repeats > 1 ? repeats : undefined}\n        ></hat-graph-node>\n        <div ?track=${trace}>\n          ${ensureArray(node.repeat.sequence).map((action, i) => this.render_action_node(action, `${path}/repeat/sequence/${i}`, false, disabled || node.enabled === false))}\n        </div>\n      </hat-graph-branch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_service_node\",\n      value: function render_service_node(node, path, graphStart = false, disabled = false) {\n        return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${mdiRoomService}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${this.trace && path in this.trace.trace ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_wait_node\",\n      value: function render_wait_node(node, path, graphStart = false, disabled = false) {\n        return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${mdiCodeBraces}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${this.trace && path in this.trace.trace ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_parallel_node\",\n      value: function render_parallel_node(node, path, graphStart = false, disabled = false) {\n        const trace = this.trace.trace[path];\n        return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiShuffleDisabled}\n          ?track=${path in this.trace.trace}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        ${ensureArray(node.parallel).map((action, i) => \"sequence\" in action ? html`<div ?track=${path in this.trace.trace}>\n                ${ensureArray(action.sequence).map((sAction, j) => this.render_action_node(sAction, `${path}/parallel/${i}/sequence/${j}`, false, disabled || node.enabled === false))}\n              </div>` : this.render_action_node(action, `${path}/parallel/${i}/sequence/0`, false, disabled || node.enabled === false))}\n      </hat-graph-branch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render_other_node\",\n      value: function render_other_node(node, path, graphStart = false, disabled = false) {\n        return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${ACTION_ICONS[getActionType(node)] || mdiCodeBrackets}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      ></hat-graph-node>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const paths = Object.keys(this.trackedNodes);\n        const trigger_nodes = \"trigger\" in this.trace.config ? ensureArray(this.trace.config.trigger).map((trigger, i) => this.render_trigger(trigger, i)) : undefined;\n        try {\n          var _ensureArray3;\n          return html`\n        <div class=\"parent graph-container\">\n          ${trigger_nodes ? html`<hat-graph-branch start .short=${trigger_nodes.length < 2}>\n                ${trigger_nodes}\n              </hat-graph-branch>` : \"\"}\n          ${\"condition\" in this.trace.config ? html`${(_ensureArray3 = ensureArray(this.trace.config.condition)) === null || _ensureArray3 === void 0 ? void 0 : _ensureArray3.map((condition, i) => this.render_condition(condition, i))}` : \"\"}\n          ${\"action\" in this.trace.config ? html`${ensureArray(this.trace.config.action).map((action, i) => this.render_action_node(action, `action/${i}`))}` : \"\"}\n          ${\"sequence\" in this.trace.config ? html`${ensureArray(this.trace.config.sequence).map((action, i) => this.render_action_node(action, `sequence/${i}`, i === 0))}` : \"\"}\n        </div>\n        <div class=\"actions\">\n          <ha-icon-button\n            .disabled=${paths.length === 0 || paths[0] === this.selected}\n            @click=${this._previousTrackedNode}\n            .path=${mdiChevronUp}\n          ></ha-icon-button>\n          <ha-icon-button\n            .disabled=${paths.length === 0 || paths[paths.length - 1] === this.selected}\n            @click=${this._nextTrackedNode}\n            .path=${mdiChevronDown}\n          ></ha-icon-button>\n        </div>\n      `;\n        } catch (err) {\n          if (__DEV__) {\n            // eslint-disable-next-line no-console\n            console.log(\"Error creating script graph:\", err);\n          }\n          return html`\n        <div class=\"error\">\n          Error rendering graph. Please download trace and share with the\n          developers.\n        </div>\n      `;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(HatScriptGraph.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"trace\")) {\n          this.renderedNodes = {};\n          this.trackedNodes = {};\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HatScriptGraph.prototype), \"updated\", this).call(this, changedProps);\n        if (!changedProps.has(\"trace\")) {\n          return;\n        }\n\n        // If trace changed and we have no or an invalid selection, select first option.\n        if (!this.selected || !(this.selected in this.trackedNodes)) {\n          const firstNode = this.trackedNodes[Object.keys(this.trackedNodes)[0]];\n          if (firstNode) {\n            fireEvent(this, \"graph-node-selected\", firstNode);\n          }\n        }\n        if (this.trace) {\n          const sortKeys = Object.keys(this.trace.trace);\n          const keys = Object.keys(this.renderedNodes).sort((a, b) => sortKeys.indexOf(a) - sortKeys.indexOf(b));\n          const sortedTrackedNodes = {};\n          const sortedRenderedNodes = {};\n          for (const key of keys) {\n            sortedRenderedNodes[key] = this.renderedNodes[key];\n            if (key in this.trackedNodes) {\n              sortedTrackedNodes[key] = this.trackedNodes[key];\n            }\n          }\n          this.renderedNodes = sortedRenderedNodes;\n          this.trackedNodes = sortedTrackedNodes;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_previousTrackedNode\",\n      value: function _previousTrackedNode() {\n        const nodes = Object.keys(this.trackedNodes);\n        const prevIndex = nodes.indexOf(this.selected) - 1;\n        if (prevIndex >= 0) {\n          fireEvent(this, \"graph-node-selected\", this.trackedNodes[nodes[prevIndex]]);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_nextTrackedNode\",\n      value: function _nextTrackedNode() {\n        const nodes = Object.keys(this.trackedNodes);\n        const nextIndex = nodes.indexOf(this.selected) + 1;\n        if (nextIndex < nodes.length) {\n          fireEvent(this, \"graph-node-selected\", this.trackedNodes[nodes[nextIndex]]);\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: flex;\n        --stroke-clr: var(--stroke-color, var(--secondary-text-color));\n        --active-clr: var(--active-color, var(--primary-color));\n        --track-clr: var(--track-color, var(--accent-color));\n        --hover-clr: var(--hover-color, var(--primary-color));\n        --disabled-clr: var(--disabled-color, var(--disabled-text-color));\n        --disabled-active-clr: rgba(var(--rgb-primary-color), 0.5);\n        --disabled-hover-clr: rgba(var(--rgb-primary-color), 0.7);\n        --default-trigger-color: 3, 169, 244;\n        --rgb-trigger-color: var(--trigger-color, var(--default-trigger-color));\n        --background-clr: var(--background-color, white);\n        --default-icon-clr: var(--icon-color, black);\n        --icon-clr: var(--stroke-clr);\n\n        --hat-graph-spacing: ${SPACING}px;\n        --hat-graph-node-size: ${NODE_SIZE}px;\n        --hat-graph-branch-height: ${BRANCH_HEIGHT}px;\n      }\n      .graph-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .actions {\n        display: flex;\n        flex-direction: column;\n      }\n      .parent {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        margin-top: 16px;\n      }\n      .error {\n        padding: 16px;\n        max-width: 300px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","customElement","property","ensureArray","fireEvent","ACTION_ICONS","getActionType","BRANCH_HEIGHT","NODE_SIZE","SPACING","HatScriptGraph","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","selectNode","config","path","render_trigger","i","track","trace","renderedNodes","trackedNodes","selected","mdiAsterisk","enabled","render_condition","render_condition_node","condition","and","or","not","service","render_service_node","wait_template","render_wait_node","wait_for_trigger","repeat","render_repeat_node","choose","render_choose_node","if","render_if_node","parallel","render_parallel_node","other","render_other_node","render_action_node","node","graphStart","disabled","type","Object","keys","typeRenderers","find","bind","_ensureArray","_ensureArray2","trace_path","map","trc","result","undefined","choice","track_default","includes","mdiArrowDecision","branch","branch_path","track_this","mdiCheckboxMarkedOutline","mdiCheckboxBlankOutline","sequence","action","j","default","_config$then","trackThen","trackElse","_trc$result","_trc$result2","mdiCallSplit","else","mdiCallMissed","mdiCallReceived","then","trackPass","trackFailed","mdiAbTesting","mdiClose","_this$trace","repeats","length","mdiRefresh","mdiArrowUp","mdiRoomService","mdiCodeBraces","mdiShuffleDisabled","sAction","mdiCodeBrackets","render","paths","trigger_nodes","trigger","_ensureArray3","_previousTrackedNode","mdiChevronUp","_nextTrackedNode","mdiChevronDown","err","__DEV__","console","log","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","has","updated","firstNode","sortKeys","sort","a","b","indexOf","sortedTrackedNodes","sortedRenderedNodes","nodes","prevIndex","nextIndex","static","styles"],"sources":["/workspaces/frontend/src/components/trace/hat-script-graph.ts"],"sourcesContent":["import {\n  mdiAbTesting,\n  mdiArrowDecision,\n  mdiArrowUp,\n  mdiAsterisk,\n  mdiCallMissed,\n  mdiCallReceived,\n  mdiCallSplit,\n  mdiCheckboxBlankOutline,\n  mdiCheckboxMarkedOutline,\n  mdiChevronDown,\n  mdiChevronUp,\n  mdiClose,\n  mdiCodeBraces,\n  mdiCodeBrackets,\n  mdiRefresh,\n  mdiRoomService,\n  mdiShuffleDisabled,\n} from \"@mdi/js\";\nimport { LitElement, PropertyValues, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { ACTION_ICONS } from \"../../data/action\";\nimport { Condition, Trigger } from \"../../data/automation\";\nimport {\n  Action,\n  ChooseAction,\n  IfAction,\n  ManualScriptConfig,\n  ParallelAction,\n  RepeatAction,\n  ServiceAction,\n  WaitAction,\n  WaitForTriggerAction,\n  getActionType,\n} from \"../../data/script\";\nimport {\n  ChooseActionTraceStep,\n  ConditionTraceStep,\n  IfActionTraceStep,\n  TraceExtended,\n} from \"../../data/trace\";\nimport \"../ha-icon-button\";\nimport \"./hat-graph-branch\";\nimport { BRANCH_HEIGHT, NODE_SIZE, SPACING } from \"./hat-graph-const\";\nimport \"./hat-graph-node\";\nimport \"./hat-graph-spacer\";\n\nexport interface NodeInfo {\n  path: string;\n  config: any;\n}\n\ndeclare global {\n  interface HASSDomEvents {\n    \"graph-node-selected\": NodeInfo;\n  }\n}\n\n@customElement(\"hat-script-graph\")\nexport class HatScriptGraph extends LitElement {\n  @property({ attribute: false }) public trace!: TraceExtended;\n\n  @property({ attribute: false }) public selected?: string;\n\n  public renderedNodes: Record<string, NodeInfo> = {};\n\n  public trackedNodes: Record<string, NodeInfo> = {};\n\n  private selectNode(config, path) {\n    return () => {\n      fireEvent(this, \"graph-node-selected\", { config, path });\n    };\n  }\n\n  private render_trigger(config: Trigger, i: number) {\n    const path = `trigger/${i}`;\n    const track = this.trace && path in this.trace.trace;\n    this.renderedNodes[path] = { config, path };\n    if (track) {\n      this.trackedNodes[path] = this.renderedNodes[path];\n    }\n    return html`\n      <hat-graph-node\n        graphStart\n        ?track=${track}\n        @focus=${this.selectNode(config, path)}\n        ?active=${this.selected === path}\n        .iconPath=${mdiAsterisk}\n        .notEnabled=${config.enabled === false}\n        tabindex=${track ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n  }\n\n  private render_condition(config: Condition, i: number) {\n    const path = `condition/${i}`;\n    this.renderedNodes[path] = { config, path };\n    if (this.trace && path in this.trace.trace) {\n      this.trackedNodes[path] = this.renderedNodes[path];\n    }\n    return this.render_condition_node(config, path);\n  }\n\n  private typeRenderers = {\n    condition: this.render_condition_node,\n    and: this.render_condition_node,\n    or: this.render_condition_node,\n    not: this.render_condition_node,\n    service: this.render_service_node,\n    wait_template: this.render_wait_node,\n    wait_for_trigger: this.render_wait_node,\n    repeat: this.render_repeat_node,\n    choose: this.render_choose_node,\n    if: this.render_if_node,\n    parallel: this.render_parallel_node,\n    other: this.render_other_node,\n  };\n\n  private render_action_node(\n    node: Action,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const type =\n      Object.keys(this.typeRenderers).find((key) => key in node) || \"other\";\n    this.renderedNodes[path] = { config: node, path };\n    if (this.trace && path in this.trace.trace) {\n      this.trackedNodes[path] = this.renderedNodes[path];\n    }\n    return this.typeRenderers[type].bind(this)(\n      node,\n      path,\n      graphStart,\n      disabled\n    );\n  }\n\n  private render_choose_node(\n    config: ChooseAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const trace = this.trace.trace[path] as ChooseActionTraceStep[] | undefined;\n    const trace_path = trace\n      ? trace.map((trc) =>\n          trc.result === undefined || trc.result.choice === \"default\"\n            ? \"default\"\n            : trc.result.choice\n        )\n      : [];\n    const track_default = trace_path.includes(\"default\");\n    return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(config, path)}\n        ?track=${trace !== undefined}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || config.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiArrowDecision}\n          ?track=${trace !== undefined}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || config.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n\n        ${config.choose\n          ? ensureArray(config.choose)?.map((branch, i) => {\n              const branch_path = `${path}/choose/${i}`;\n              const track_this = trace_path.includes(i);\n              this.renderedNodes[branch_path] = { config, path: branch_path };\n              if (track_this) {\n                this.trackedNodes[branch_path] =\n                  this.renderedNodes[branch_path];\n              }\n              return html`\n                <div class=\"graph-container\" ?track=${track_this}>\n                  <hat-graph-node\n                    .iconPath=${!trace || track_this\n                      ? mdiCheckboxMarkedOutline\n                      : mdiCheckboxBlankOutline}\n                    @focus=${this.selectNode(config, branch_path)}\n                    ?track=${track_this}\n                    ?active=${this.selected === branch_path}\n                    .notEnabled=${disabled || config.enabled === false}\n                  ></hat-graph-node>\n                  ${branch.sequence !== null\n                    ? ensureArray(branch.sequence).map((action, j) =>\n                        this.render_action_node(\n                          action,\n                          `${branch_path}/sequence/${j}`,\n                          false,\n                          disabled || config.enabled === false\n                        )\n                      )\n                    : \"\"}\n                </div>\n              `;\n            })\n          : \"\"}\n        <div ?track=${track_default}>\n          <hat-graph-spacer ?track=${track_default}></hat-graph-spacer>\n          ${config.default !== null\n            ? ensureArray(config.default)?.map((action, i) =>\n                this.render_action_node(\n                  action,\n                  `${path}/default/${i}`,\n                  false,\n                  disabled || config.enabled === false\n                )\n              )\n            : \"\"}\n        </div>\n      </hat-graph-branch>\n    `;\n  }\n\n  private render_if_node(\n    config: IfAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const trace = this.trace.trace[path] as IfActionTraceStep[] | undefined;\n    let trackThen = false;\n    let trackElse = false;\n    for (const trc of trace || []) {\n      if (!trackThen && trc.result?.choice === \"then\") {\n        trackThen = true;\n      }\n      if ((!trackElse && trc.result?.choice === \"else\") || !trc.result) {\n        trackElse = true;\n      }\n      if (trackElse && trackThen) {\n        break;\n      }\n    }\n    return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(config, path)}\n        ?track=${trace !== undefined}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || config.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiCallSplit}\n          ?track=${trace !== undefined}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || config.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        ${config.else\n          ? html`<div class=\"graph-container\" ?track=${trackElse}>\n              <hat-graph-node\n                .iconPath=${mdiCallMissed}\n                ?track=${trackElse}\n                ?active=${this.selected === path}\n                .notEnabled=${disabled || config.enabled === false}\n                nofocus\n              ></hat-graph-node\n              >${ensureArray(config.else).map((action, j) =>\n                this.render_action_node(\n                  action,\n                  `${path}/else/${j}`,\n                  false,\n                  disabled || config.enabled === false\n                )\n              )}\n            </div>`\n          : html`<hat-graph-spacer ?track=${trackElse}></hat-graph-spacer>`}\n        <div class=\"graph-container\" ?track=${trackThen}>\n          <hat-graph-node\n            .iconPath=${mdiCallReceived}\n            ?track=${trackThen}\n            ?active=${this.selected === path}\n            .notEnabled=${disabled || config.enabled === false}\n            nofocus\n          ></hat-graph-node>\n          ${ensureArray(config.then ?? []).map((action, j) =>\n            this.render_action_node(\n              action,\n              `${path}/then/${j}`,\n              false,\n              disabled || config.enabled === false\n            )\n          )}\n        </div>\n      </hat-graph-branch>\n    `;\n  }\n\n  private render_condition_node(\n    node: Condition,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const trace = this.trace.trace[path] as ConditionTraceStep[] | undefined;\n    let track = false;\n    let trackPass = false;\n    let trackFailed = false;\n    if (trace) {\n      for (const trc of trace) {\n        if (trc.result) {\n          track = true;\n          if (trc.result.result) {\n            trackPass = true;\n          } else {\n            trackFailed = true;\n          }\n        }\n        if (trackPass && trackFailed) {\n          break;\n        }\n      }\n    }\n    return html`\n      <hat-graph-branch\n        @focus=${this.selectNode(node, path)}\n        ?track=${track}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        short\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          slot=\"head\"\n          ?track=${track}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          .iconPath=${mdiAbTesting}\n          nofocus\n        ></hat-graph-node>\n        <div\n          style=${`width: ${NODE_SIZE + SPACING}px;`}\n          graphStart\n          graphEnd\n        ></div>\n        <div ?track=${trackPass}></div>\n        <hat-graph-node\n          .iconPath=${mdiClose}\n          nofocus\n          ?track=${trackFailed}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n        ></hat-graph-node>\n      </hat-graph-branch>\n    `;\n  }\n\n  private render_repeat_node(\n    node: RepeatAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const trace: any = this.trace.trace[path];\n    const repeats = this.trace?.trace[`${path}/repeat/sequence/0`]?.length;\n    return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiRefresh}\n          ?track=${path in this.trace.trace}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        <hat-graph-node\n          .iconPath=${mdiArrowUp}\n          ?track=${repeats > 1}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          nofocus\n          .badge=${repeats > 1 ? repeats : undefined}\n        ></hat-graph-node>\n        <div ?track=${trace}>\n          ${ensureArray(node.repeat.sequence).map((action, i) =>\n            this.render_action_node(\n              action,\n              `${path}/repeat/sequence/${i}`,\n              false,\n              disabled || node.enabled === false\n            )\n          )}\n        </div>\n      </hat-graph-branch>\n    `;\n  }\n\n  private render_service_node(\n    node: ServiceAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${mdiRoomService}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${this.trace && path in this.trace.trace ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n  }\n\n  private render_wait_node(\n    node: WaitAction | WaitForTriggerAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${mdiCodeBraces}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n        tabindex=${this.trace && path in this.trace.trace ? \"0\" : \"-1\"}\n      ></hat-graph-node>\n    `;\n  }\n\n  private render_parallel_node(\n    node: ParallelAction,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    const trace: any = this.trace.trace[path];\n    return html`\n      <hat-graph-branch\n        tabindex=${trace === undefined ? \"-1\" : \"0\"}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      >\n        <hat-graph-node\n          .graphStart=${graphStart}\n          .iconPath=${mdiShuffleDisabled}\n          ?track=${path in this.trace.trace}\n          ?active=${this.selected === path}\n          .notEnabled=${disabled || node.enabled === false}\n          slot=\"head\"\n          nofocus\n        ></hat-graph-node>\n        ${ensureArray(node.parallel).map((action, i) =>\n          \"sequence\" in action\n            ? html`<div ?track=${path in this.trace.trace}>\n                ${ensureArray((action as ManualScriptConfig).sequence).map(\n                  (sAction, j) =>\n                    this.render_action_node(\n                      sAction,\n                      `${path}/parallel/${i}/sequence/${j}`,\n                      false,\n                      disabled || node.enabled === false\n                    )\n                )}\n              </div>`\n            : this.render_action_node(\n                action,\n                `${path}/parallel/${i}/sequence/0`,\n                false,\n                disabled || node.enabled === false\n              )\n        )}\n      </hat-graph-branch>\n    `;\n  }\n\n  private render_other_node(\n    node: Action,\n    path: string,\n    graphStart = false,\n    disabled = false\n  ) {\n    return html`\n      <hat-graph-node\n        .graphStart=${graphStart}\n        .iconPath=${ACTION_ICONS[getActionType(node)] || mdiCodeBrackets}\n        @focus=${this.selectNode(node, path)}\n        ?track=${path in this.trace.trace}\n        ?active=${this.selected === path}\n        .notEnabled=${disabled || node.enabled === false}\n      ></hat-graph-node>\n    `;\n  }\n\n  protected render() {\n    const paths = Object.keys(this.trackedNodes);\n    const trigger_nodes =\n      \"trigger\" in this.trace.config\n        ? ensureArray(this.trace.config.trigger).map((trigger, i) =>\n            this.render_trigger(trigger, i)\n          )\n        : undefined;\n    try {\n      return html`\n        <div class=\"parent graph-container\">\n          ${trigger_nodes\n            ? html`<hat-graph-branch start .short=${trigger_nodes.length < 2}>\n                ${trigger_nodes}\n              </hat-graph-branch>`\n            : \"\"}\n          ${\"condition\" in this.trace.config\n            ? html`${ensureArray(this.trace.config.condition)?.map(\n                (condition, i) => this.render_condition(condition, i)\n              )}`\n            : \"\"}\n          ${\"action\" in this.trace.config\n            ? html`${ensureArray(this.trace.config.action).map((action, i) =>\n                this.render_action_node(action, `action/${i}`)\n              )}`\n            : \"\"}\n          ${\"sequence\" in this.trace.config\n            ? html`${ensureArray(this.trace.config.sequence).map((action, i) =>\n                this.render_action_node(action, `sequence/${i}`, i === 0)\n              )}`\n            : \"\"}\n        </div>\n        <div class=\"actions\">\n          <ha-icon-button\n            .disabled=${paths.length === 0 || paths[0] === this.selected}\n            @click=${this._previousTrackedNode}\n            .path=${mdiChevronUp}\n          ></ha-icon-button>\n          <ha-icon-button\n            .disabled=${paths.length === 0 ||\n            paths[paths.length - 1] === this.selected}\n            @click=${this._nextTrackedNode}\n            .path=${mdiChevronDown}\n          ></ha-icon-button>\n        </div>\n      `;\n    } catch (err: any) {\n      if (__DEV__) {\n        // eslint-disable-next-line no-console\n        console.log(\"Error creating script graph:\", err);\n      }\n      return html`\n        <div class=\"error\">\n          Error rendering graph. Please download trace and share with the\n          developers.\n        </div>\n      `;\n    }\n  }\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"trace\")) {\n      this.renderedNodes = {};\n      this.trackedNodes = {};\n    }\n  }\n\n  protected updated(changedProps: PropertyValues<this>) {\n    super.updated(changedProps);\n\n    if (!changedProps.has(\"trace\")) {\n      return;\n    }\n\n    // If trace changed and we have no or an invalid selection, select first option.\n    if (!this.selected || !(this.selected in this.trackedNodes)) {\n      const firstNode = this.trackedNodes[Object.keys(this.trackedNodes)[0]];\n      if (firstNode) {\n        fireEvent(this, \"graph-node-selected\", firstNode);\n      }\n    }\n\n    if (this.trace) {\n      const sortKeys = Object.keys(this.trace.trace);\n      const keys = Object.keys(this.renderedNodes).sort(\n        (a, b) => sortKeys.indexOf(a) - sortKeys.indexOf(b)\n      );\n      const sortedTrackedNodes = {};\n      const sortedRenderedNodes = {};\n      for (const key of keys) {\n        sortedRenderedNodes[key] = this.renderedNodes[key];\n        if (key in this.trackedNodes) {\n          sortedTrackedNodes[key] = this.trackedNodes[key];\n        }\n      }\n      this.renderedNodes = sortedRenderedNodes;\n      this.trackedNodes = sortedTrackedNodes;\n    }\n  }\n\n  private _previousTrackedNode() {\n    const nodes = Object.keys(this.trackedNodes);\n    const prevIndex = nodes.indexOf(this.selected!) - 1;\n    if (prevIndex >= 0) {\n      fireEvent(\n        this,\n        \"graph-node-selected\",\n        this.trackedNodes[nodes[prevIndex]]\n      );\n    }\n  }\n\n  private _nextTrackedNode() {\n    const nodes = Object.keys(this.trackedNodes);\n    const nextIndex = nodes.indexOf(this.selected!) + 1;\n    if (nextIndex < nodes.length) {\n      fireEvent(\n        this,\n        \"graph-node-selected\",\n        this.trackedNodes[nodes[nextIndex]]\n      );\n    }\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: flex;\n        --stroke-clr: var(--stroke-color, var(--secondary-text-color));\n        --active-clr: var(--active-color, var(--primary-color));\n        --track-clr: var(--track-color, var(--accent-color));\n        --hover-clr: var(--hover-color, var(--primary-color));\n        --disabled-clr: var(--disabled-color, var(--disabled-text-color));\n        --disabled-active-clr: rgba(var(--rgb-primary-color), 0.5);\n        --disabled-hover-clr: rgba(var(--rgb-primary-color), 0.7);\n        --default-trigger-color: 3, 169, 244;\n        --rgb-trigger-color: var(--trigger-color, var(--default-trigger-color));\n        --background-clr: var(--background-color, white);\n        --default-icon-clr: var(--icon-color, black);\n        --icon-clr: var(--stroke-clr);\n\n        --hat-graph-spacing: ${SPACING}px;\n        --hat-graph-node-size: ${NODE_SIZE}px;\n        --hat-graph-branch-height: ${BRANCH_HEIGHT}px;\n      }\n      .graph-container {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      .actions {\n        display: flex;\n        flex-direction: column;\n      }\n      .parent {\n        margin-left: 8px;\n        margin-inline-start: 8px;\n        margin-inline-end: initial;\n        margin-top: 16px;\n      }\n      .error {\n        padding: 16px;\n        max-width: 300px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-script-graph\": HatScriptGraph;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAmBA,SAASA,UAAU,EAAkBC,GAAG,EAAEC,IAAI,QAAQ,KAAK;AAC3D,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SAASC,WAAW,QAAQ,iCAAiC;AAC7D,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,YAAY,QAAQ,mBAAmB;AAEhD,SAUEC,aAAa,QACR,mBAAmB;AAO1B,OAAO,mBAAmB;AAC1B,OAAO,oBAAoB;AAC3B,SAASC,aAAa,EAAEC,SAAS,EAAEC,OAAO,QAAQ,mBAAmB;AACrE,OAAO,kBAAkB;AACzB,OAAO,oBAAoB;AAa3B,WACaC,cAAc,GAAAC,SAAA,EAD1BV,aAAa,CAAC,kBAAkB,CAAC,aAAAW,WAAA,EAAAC,WAAA;EAAlC,MACaH,cAAc,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA0mB/C;EAAC;IAAAI,CAAA,EA1mBYN,cAAc;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACxBjB,QAAQ,CAAC;QAAEkB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjB,QAAQ,CAAC;QAAEkB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEkB,CAAC,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEH,CAAC,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAElD,SAAAC,WAAmBC,MAAM,EAAEC,IAAI,EAAE;QAC/B,OAAO,MAAM;UACXrB,SAAS,CAAC,IAAI,EAAE,qBAAqB,EAAE;YAAEoB,MAAM;YAAEC;UAAK,CAAC,CAAC;QAC1D,CAAC;MACH;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAI,eAAuBF,MAAe,EAAEG,CAAS,EAAE;QACjD,MAAMF,IAAI,GAAI,WAAUE,CAAE,EAAC;QAC3B,MAAMC,KAAK,GAAG,IAAI,CAACC,KAAK,IAAIJ,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAK;QACpD,IAAI,CAACC,aAAa,CAACL,IAAI,CAAC,GAAG;UAAED,MAAM;UAAEC;QAAK,CAAC;QAC3C,IAAIG,KAAK,EAAE;UACT,IAAI,CAACG,YAAY,CAACN,IAAI,CAAC,GAAG,IAAI,CAACK,aAAa,CAACL,IAAI,CAAC;QACpD;QACA,OAAOzB,IAAK;AAChB;AACA;AACA,iBAAiB4B,KAAM;AACvB,iBAAiB,IAAI,CAACL,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAE;AAC/C,kBAAkB,IAAI,CAACO,QAAQ,KAAKP,IAAK;AACzC,oBAAoBQ,WAAY;AAChC,sBAAsBT,MAAM,CAACU,OAAO,KAAK,KAAM;AAC/C,mBAAmBN,KAAK,GAAG,GAAG,GAAG,IAAK;AACtC;AACA,KAAK;MACH;IAAC;MAAAV,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAa,iBAAyBX,MAAiB,EAAEG,CAAS,EAAE;QACrD,MAAMF,IAAI,GAAI,aAAYE,CAAE,EAAC;QAC7B,IAAI,CAACG,aAAa,CAACL,IAAI,CAAC,GAAG;UAAED,MAAM;UAAEC;QAAK,CAAC;QAC3C,IAAI,IAAI,CAACI,KAAK,IAAIJ,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAK,EAAE;UAC1C,IAAI,CAACE,YAAY,CAACN,IAAI,CAAC,GAAG,IAAI,CAACK,aAAa,CAACL,IAAI,CAAC;QACpD;QACA,OAAO,IAAI,CAACW,qBAAqB,CAACZ,MAAM,EAAEC,IAAI,CAAC;MACjD;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEuB;UACtBe,SAAS,EAAE,IAAI,CAACD,qBAAqB;UACrCE,GAAG,EAAE,IAAI,CAACF,qBAAqB;UAC/BG,EAAE,EAAE,IAAI,CAACH,qBAAqB;UAC9BI,GAAG,EAAE,IAAI,CAACJ,qBAAqB;UAC/BK,OAAO,EAAE,IAAI,CAACC,mBAAmB;UACjCC,aAAa,EAAE,IAAI,CAACC,gBAAgB;UACpCC,gBAAgB,EAAE,IAAI,CAACD,gBAAgB;UACvCE,MAAM,EAAE,IAAI,CAACC,kBAAkB;UAC/BC,MAAM,EAAE,IAAI,CAACC,kBAAkB;UAC/BC,EAAE,EAAE,IAAI,CAACC,cAAc;UACvBC,QAAQ,EAAE,IAAI,CAACC,oBAAoB;UACnCC,KAAK,EAAE,IAAI,CAACC;QACd,CAAC;MAAA;IAAA;MAAArC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAkC,mBACEC,IAAY,EACZhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,MAAMC,IAAI,GACRC,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC,CAACC,IAAI,CAAE3C,GAAG,IAAKA,GAAG,IAAIoC,IAAI,CAAC,IAAI,OAAO;QACvE,IAAI,CAAC3B,aAAa,CAACL,IAAI,CAAC,GAAG;UAAED,MAAM,EAAEiC,IAAI;UAAEhC;QAAK,CAAC;QACjD,IAAI,IAAI,CAACI,KAAK,IAAIJ,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAK,EAAE;UAC1C,IAAI,CAACE,YAAY,CAACN,IAAI,CAAC,GAAG,IAAI,CAACK,aAAa,CAACL,IAAI,CAAC;QACpD;QACA,OAAO,IAAI,CAACsC,aAAa,CAACH,IAAI,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CACxCR,IAAI,EACJhC,IAAI,EACJiC,UAAU,EACVC,QACF,CAAC;MACH;IAAC;MAAAzC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA2B,mBACEzB,MAAoB,EACpBC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QAAA,IAAAO,YAAA,EAAAC,aAAA;QACA,MAAMtC,KAAK,GAAG,IAAI,CAACA,KAAK,CAACA,KAAK,CAACJ,IAAI,CAAwC;QAC3E,MAAM2C,UAAU,GAAGvC,KAAK,GACpBA,KAAK,CAACwC,GAAG,CAAEC,GAAG,IACZA,GAAG,CAACC,MAAM,KAAKC,SAAS,IAAIF,GAAG,CAACC,MAAM,CAACE,MAAM,KAAK,SAAS,GACvD,SAAS,GACTH,GAAG,CAACC,MAAM,CAACE,MACjB,CAAC,GACD,EAAE;QACN,MAAMC,aAAa,GAAGN,UAAU,CAACO,QAAQ,CAAC,SAAS,CAAC;QACpD,OAAO3E,IAAK;AAChB;AACA,mBAAmB6B,KAAK,KAAK2C,SAAS,GAAG,IAAI,GAAG,GAAI;AACpD,iBAAiB,IAAI,CAACjD,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAE;AAC/C,iBAAiBI,KAAK,KAAK2C,SAAU;AACrC,kBAAkB,IAAI,CAACxC,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AAC3D;AACA;AACA,wBAAwBwB,UAAW;AACnC,sBAAsBkB,gBAAiB;AACvC,mBAAmB/C,KAAK,KAAK2C,SAAU;AACvC,oBAAoB,IAAI,CAACxC,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AAC7D;AACA;AACA;AACA;AACA,UAAUV,MAAM,CAACwB,MAAM,IAAAkB,YAAA,GACX/D,WAAW,CAACqB,MAAM,CAACwB,MAAM,CAAC,cAAAkB,YAAA,uBAA1BA,YAAA,CAA4BG,GAAG,CAAC,CAACQ,MAAM,EAAElD,CAAC,KAAK;UAC7C,MAAMmD,WAAW,GAAI,GAAErD,IAAK,WAAUE,CAAE,EAAC;UACzC,MAAMoD,UAAU,GAAGX,UAAU,CAACO,QAAQ,CAAChD,CAAC,CAAC;UACzC,IAAI,CAACG,aAAa,CAACgD,WAAW,CAAC,GAAG;YAAEtD,MAAM;YAAEC,IAAI,EAAEqD;UAAY,CAAC;UAC/D,IAAIC,UAAU,EAAE;YACd,IAAI,CAAChD,YAAY,CAAC+C,WAAW,CAAC,GAC5B,IAAI,CAAChD,aAAa,CAACgD,WAAW,CAAC;UACnC;UACA,OAAO9E,IAAK;AAC1B,sDAAsD+E,UAAW;AACjE;AACA,gCAAgC,CAAClD,KAAK,IAAIkD,UAAU,GAC5BC,wBAAwB,GACxBC,uBAAwB;AAChD,6BAA6B,IAAI,CAAC1D,UAAU,CAACC,MAAM,EAAEsD,WAAW,CAAE;AAClE,6BAA6BC,UAAW;AACxC,8BAA8B,IAAI,CAAC/C,QAAQ,KAAK8C,WAAY;AAC5D,kCAAkCnB,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AACvE;AACA,oBAAoB2C,MAAM,CAACK,QAAQ,KAAK,IAAI,GACtB/E,WAAW,CAAC0E,MAAM,CAACK,QAAQ,CAAC,CAACb,GAAG,CAAC,CAACc,MAAM,EAAEC,CAAC,KACzC,IAAI,CAAC5B,kBAAkB,CACrB2B,MAAM,EACL,GAAEL,WAAY,aAAYM,CAAE,EAAC,EAC9B,KAAK,EACLzB,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KACjC,CACF,CAAC,GACD,EAAG;AACzB;AACA,eAAe;QACH,CAAC,CAAC,GACF,EAAG;AACf,sBAAsBwC,aAAc;AACpC,qCAAqCA,aAAc;AACnD,YAAYlD,MAAM,CAAC6D,OAAO,KAAK,IAAI,IAAAlB,aAAA,GACrBhE,WAAW,CAACqB,MAAM,CAAC6D,OAAO,CAAC,cAAAlB,aAAA,uBAA3BA,aAAA,CAA6BE,GAAG,CAAC,CAACc,MAAM,EAAExD,CAAC,KACzC,IAAI,CAAC6B,kBAAkB,CACrB2B,MAAM,EACL,GAAE1D,IAAK,YAAWE,CAAE,EAAC,EACtB,KAAK,EACLgC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KACjC,CACF,CAAC,GACD,EAAG;AACjB;AACA;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA6B,eACE3B,MAAgB,EAChBC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QAAA,IAAA2B,YAAA;QACA,MAAMzD,KAAK,GAAG,IAAI,CAACA,KAAK,CAACA,KAAK,CAACJ,IAAI,CAAoC;QACvE,IAAI8D,SAAS,GAAG,KAAK;QACrB,IAAIC,SAAS,GAAG,KAAK;QACrB,KAAK,MAAMlB,GAAG,IAAIzC,KAAK,IAAI,EAAE,EAAE;UAAA,IAAA4D,WAAA,EAAAC,YAAA;UAC7B,IAAI,CAACH,SAAS,IAAI,EAAAE,WAAA,GAAAnB,GAAG,CAACC,MAAM,cAAAkB,WAAA,uBAAVA,WAAA,CAAYhB,MAAM,MAAK,MAAM,EAAE;YAC/Cc,SAAS,GAAG,IAAI;UAClB;UACA,IAAK,CAACC,SAAS,IAAI,EAAAE,YAAA,GAAApB,GAAG,CAACC,MAAM,cAAAmB,YAAA,uBAAVA,YAAA,CAAYjB,MAAM,MAAK,MAAM,IAAK,CAACH,GAAG,CAACC,MAAM,EAAE;YAChEiB,SAAS,GAAG,IAAI;UAClB;UACA,IAAIA,SAAS,IAAID,SAAS,EAAE;YAC1B;UACF;QACF;QACA,OAAOvF,IAAK;AAChB;AACA,mBAAmB6B,KAAK,KAAK2C,SAAS,GAAG,IAAI,GAAG,GAAI;AACpD,iBAAiB,IAAI,CAACjD,UAAU,CAACC,MAAM,EAAEC,IAAI,CAAE;AAC/C,iBAAiBI,KAAK,KAAK2C,SAAU;AACrC,kBAAkB,IAAI,CAACxC,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AAC3D;AACA;AACA,wBAAwBwB,UAAW;AACnC,sBAAsBiC,YAAa;AACnC,mBAAmB9D,KAAK,KAAK2C,SAAU;AACvC,oBAAoB,IAAI,CAACxC,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AAC7D;AACA;AACA;AACA,UAAUV,MAAM,CAACoE,IAAI,GACT5F,IAAK,uCAAsCwF,SAAU;AACjE;AACA,4BAA4BK,aAAc;AAC1C,yBAAyBL,SAAU;AACnC,0BAA0B,IAAI,CAACxD,QAAQ,KAAKP,IAAK;AACjD,8BAA8BkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AACnE;AACA;AACA,iBAAiB/B,WAAW,CAACqB,MAAM,CAACoE,IAAI,CAAC,CAACvB,GAAG,CAAC,CAACc,MAAM,EAAEC,CAAC,KACxC,IAAI,CAAC5B,kBAAkB,CACrB2B,MAAM,EACL,GAAE1D,IAAK,SAAQ2D,CAAE,EAAC,EACnB,KAAK,EACLzB,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KACjC,CACF,CAAE;AAChB,mBAAmB,GACPlC,IAAK,4BAA2BwF,SAAU,sBAAsB;AAC5E,8CAA8CD,SAAU;AACxD;AACA,wBAAwBO,eAAgB;AACxC,qBAAqBP,SAAU;AAC/B,sBAAsB,IAAI,CAACvD,QAAQ,KAAKP,IAAK;AAC7C,0BAA0BkC,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KAAM;AAC/D;AACA;AACA,YAAY/B,WAAW,EAAAmF,YAAA,GAAC9D,MAAM,CAACuE,IAAI,cAAAT,YAAA,cAAAA,YAAA,GAAI,EAAE,CAAC,CAACjB,GAAG,CAAC,CAACc,MAAM,EAAEC,CAAC,KAC7C,IAAI,CAAC5B,kBAAkB,CACrB2B,MAAM,EACL,GAAE1D,IAAK,SAAQ2D,CAAE,EAAC,EACnB,KAAK,EACLzB,QAAQ,IAAInC,MAAM,CAACU,OAAO,KAAK,KACjC,CACF,CAAE;AACZ;AACA;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAc,sBACEqB,IAAe,EACfhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,MAAM9B,KAAK,GAAG,IAAI,CAACA,KAAK,CAACA,KAAK,CAACJ,IAAI,CAAqC;QACxE,IAAIG,KAAK,GAAG,KAAK;QACjB,IAAIoE,SAAS,GAAG,KAAK;QACrB,IAAIC,WAAW,GAAG,KAAK;QACvB,IAAIpE,KAAK,EAAE;UACT,KAAK,MAAMyC,GAAG,IAAIzC,KAAK,EAAE;YACvB,IAAIyC,GAAG,CAACC,MAAM,EAAE;cACd3C,KAAK,GAAG,IAAI;cACZ,IAAI0C,GAAG,CAACC,MAAM,CAACA,MAAM,EAAE;gBACrByB,SAAS,GAAG,IAAI;cAClB,CAAC,MAAM;gBACLC,WAAW,GAAG,IAAI;cACpB;YACF;YACA,IAAID,SAAS,IAAIC,WAAW,EAAE;cAC5B;YACF;UACF;QACF;QACA,OAAOjG,IAAK;AAChB;AACA,iBAAiB,IAAI,CAACuB,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBG,KAAM;AACvB,kBAAkB,IAAI,CAACI,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD,mBAAmBL,KAAK,KAAK2C,SAAS,GAAG,IAAI,GAAG,GAAI;AACpD;AACA;AACA;AACA,wBAAwBd,UAAW;AACnC;AACA,mBAAmB9B,KAAM;AACzB,oBAAoB,IAAI,CAACI,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AAC3D,sBAAsBgE,YAAa;AACnC;AACA;AACA;AACA,kBAAmB,UAAS1F,SAAS,GAAGC,OAAQ,KAAK;AACrD;AACA;AACA;AACA,sBAAsBuF,SAAU;AAChC;AACA,sBAAsBG,QAAS;AAC/B;AACA,mBAAmBF,WAAY;AAC/B,oBAAoB,IAAI,CAACjE,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AAC3D;AACA;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAyB,mBACEU,IAAkB,EAClBhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QAAA,IAAAyC,WAAA;QACA,MAAMvE,KAAU,GAAG,IAAI,CAACA,KAAK,CAACA,KAAK,CAACJ,IAAI,CAAC;QACzC,MAAM4E,OAAO,IAAAD,WAAA,GAAG,IAAI,CAACvE,KAAK,cAAAuE,WAAA,gBAAAA,WAAA,GAAVA,WAAA,CAAYvE,KAAK,CAAE,GAAEJ,IAAK,oBAAmB,CAAC,cAAA2E,WAAA,uBAA9CA,WAAA,CAAgDE,MAAM;QACtE,OAAOtG,IAAK;AAChB;AACA,mBAAmB6B,KAAK,KAAK2C,SAAS,GAAG,IAAI,GAAG,GAAI;AACpD,iBAAiB,IAAI,CAACjD,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBA,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1C,kBAAkB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD;AACA;AACA,wBAAwBwB,UAAW;AACnC,sBAAsB6C,UAAW;AACjC,mBAAmB9E,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC5C,oBAAoB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AAC3D;AACA;AACA;AACA;AACA,sBAAsBsE,UAAW;AACjC,mBAAmBH,OAAO,GAAG,CAAE;AAC/B,oBAAoB,IAAI,CAACrE,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AAC3D;AACA,mBAAmBmE,OAAO,GAAG,CAAC,GAAGA,OAAO,GAAG7B,SAAU;AACrD;AACA,sBAAsB3C,KAAM;AAC5B,YAAY1B,WAAW,CAACsD,IAAI,CAACX,MAAM,CAACoC,QAAQ,CAAC,CAACb,GAAG,CAAC,CAACc,MAAM,EAAExD,CAAC,KAChD,IAAI,CAAC6B,kBAAkB,CACrB2B,MAAM,EACL,GAAE1D,IAAK,oBAAmBE,CAAE,EAAC,EAC9B,KAAK,EACLgC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAC/B,CACF,CAAE;AACZ;AACA;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoB,oBACEe,IAAmB,EACnBhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,OAAO3D,IAAK;AAChB;AACA,sBAAsB0D,UAAW;AACjC,oBAAoB+C,cAAe;AACnC,iBAAiB,IAAI,CAAClF,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBA,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1C,kBAAkB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD,mBAAmB,IAAI,CAACL,KAAK,IAAIJ,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAK,GAAG,GAAG,GAAG,IAAK;AACvE;AACA,KAAK;MACH;IAAC;MAAAX,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAsB,iBACEa,IAAuC,EACvChC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,OAAO3D,IAAK;AAChB;AACA,sBAAsB0D,UAAW;AACjC,oBAAoBgD,aAAc;AAClC,iBAAiB,IAAI,CAACnF,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBA,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1C,kBAAkB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD,mBAAmB,IAAI,CAACL,KAAK,IAAIJ,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAK,GAAG,GAAG,GAAG,IAAK;AACvE;AACA,KAAK;MACH;IAAC;MAAAX,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA+B,qBACEI,IAAoB,EACpBhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,MAAM9B,KAAU,GAAG,IAAI,CAACA,KAAK,CAACA,KAAK,CAACJ,IAAI,CAAC;QACzC,OAAOzB,IAAK;AAChB;AACA,mBAAmB6B,KAAK,KAAK2C,SAAS,GAAG,IAAI,GAAG,GAAI;AACpD,iBAAiB,IAAI,CAACjD,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBA,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1C,kBAAkB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD;AACA;AACA,wBAAwBwB,UAAW;AACnC,sBAAsBiD,kBAAmB;AACzC,mBAAmBlF,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC5C,oBAAoB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AAC3C,wBAAwBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AAC3D;AACA;AACA;AACA,UAAU/B,WAAW,CAACsD,IAAI,CAACL,QAAQ,CAAC,CAACiB,GAAG,CAAC,CAACc,MAAM,EAAExD,CAAC,KACzC,UAAU,IAAIwD,MAAM,GAChBnF,IAAK,eAAcyB,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1D,kBAAkB1B,WAAW,CAAEgF,MAAM,CAAwBD,QAAQ,CAAC,CAACb,GAAG,CACxD,CAACuC,OAAO,EAAExB,CAAC,KACT,IAAI,CAAC5B,kBAAkB,CACrBoD,OAAO,EACN,GAAEnF,IAAK,aAAYE,CAAE,aAAYyD,CAAE,EAAC,EACrC,KAAK,EACLzB,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAC/B,CACJ,CAAE;AAClB,qBAAqB,GACP,IAAI,CAACsB,kBAAkB,CACrB2B,MAAM,EACL,GAAE1D,IAAK,aAAYE,CAAE,aAAY,EAClC,KAAK,EACLgC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAC/B,CACN,CAAE;AACV;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAiC,kBACEE,IAAY,EACZhC,IAAY,EACZiC,UAAU,GAAG,KAAK,EAClBC,QAAQ,GAAG,KAAK,EAChB;QACA,OAAO3D,IAAK;AAChB;AACA,sBAAsB0D,UAAW;AACjC,oBAAoBrD,YAAY,CAACC,aAAa,CAACmD,IAAI,CAAC,CAAC,IAAIoD,eAAgB;AACzE,iBAAiB,IAAI,CAACtF,UAAU,CAACkC,IAAI,EAAEhC,IAAI,CAAE;AAC7C,iBAAiBA,IAAI,IAAI,IAAI,CAACI,KAAK,CAACA,KAAM;AAC1C,kBAAkB,IAAI,CAACG,QAAQ,KAAKP,IAAK;AACzC,sBAAsBkC,QAAQ,IAAIF,IAAI,CAACvB,OAAO,KAAK,KAAM;AACzD;AACA,KAAK;MACH;IAAC;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwF,OAAA,EAAmB;QACjB,MAAMC,KAAK,GAAGlD,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC/B,YAAY,CAAC;QAC5C,MAAMiF,aAAa,GACjB,SAAS,IAAI,IAAI,CAACnF,KAAK,CAACL,MAAM,GAC1BrB,WAAW,CAAC,IAAI,CAAC0B,KAAK,CAACL,MAAM,CAACyF,OAAO,CAAC,CAAC5C,GAAG,CAAC,CAAC4C,OAAO,EAAEtF,CAAC,KACpD,IAAI,CAACD,cAAc,CAACuF,OAAO,EAAEtF,CAAC,CAChC,CAAC,GACD6C,SAAS;QACf,IAAI;UAAA,IAAA0C,aAAA;UACF,OAAOlH,IAAK;AAClB;AACA,YAAYgH,aAAa,GACXhH,IAAK,kCAAiCgH,aAAa,CAACV,MAAM,GAAG,CAAE;AAC7E,kBAAkBU,aAAc;AAChC,kCAAkC,GACpB,EAAG;AACjB,YAAY,WAAW,IAAI,IAAI,CAACnF,KAAK,CAACL,MAAM,GAC9BxB,IAAK,IAAAkH,aAAA,GAAE/G,WAAW,CAAC,IAAI,CAAC0B,KAAK,CAACL,MAAM,CAACa,SAAS,CAAC,cAAA6E,aAAA,uBAAxCA,aAAA,CAA0C7C,GAAG,CAClD,CAAChC,SAAS,EAAEV,CAAC,KAAK,IAAI,CAACQ,gBAAgB,CAACE,SAAS,EAAEV,CAAC,CACtD,CAAE,EAAC,GACH,EAAG;AACjB,YAAY,QAAQ,IAAI,IAAI,CAACE,KAAK,CAACL,MAAM,GAC3BxB,IAAK,GAAEG,WAAW,CAAC,IAAI,CAAC0B,KAAK,CAACL,MAAM,CAAC2D,MAAM,CAAC,CAACd,GAAG,CAAC,CAACc,MAAM,EAAExD,CAAC,KACzD,IAAI,CAAC6B,kBAAkB,CAAC2B,MAAM,EAAG,UAASxD,CAAE,EAAC,CAC/C,CAAE,EAAC,GACH,EAAG;AACjB,YAAY,UAAU,IAAI,IAAI,CAACE,KAAK,CAACL,MAAM,GAC7BxB,IAAK,GAAEG,WAAW,CAAC,IAAI,CAAC0B,KAAK,CAACL,MAAM,CAAC0D,QAAQ,CAAC,CAACb,GAAG,CAAC,CAACc,MAAM,EAAExD,CAAC,KAC3D,IAAI,CAAC6B,kBAAkB,CAAC2B,MAAM,EAAG,YAAWxD,CAAE,EAAC,EAAEA,CAAC,KAAK,CAAC,CAC1D,CAAE,EAAC,GACH,EAAG;AACjB;AACA;AACA;AACA,wBAAwBoF,KAAK,CAACT,MAAM,KAAK,CAAC,IAAIS,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC/E,QAAS;AACzE,qBAAqB,IAAI,CAACmF,oBAAqB;AAC/C,oBAAoBC,YAAa;AACjC;AACA;AACA,wBAAwBL,KAAK,CAACT,MAAM,KAAK,CAAC,IAC9BS,KAAK,CAACA,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAACtE,QAAS;AACtD,qBAAqB,IAAI,CAACqF,gBAAiB;AAC3C,oBAAoBC,cAAe;AACnC;AACA;AACA,OAAO;QACH,CAAC,CAAC,OAAOC,GAAQ,EAAE;UACjB,IAAIC,OAAO,EAAE;YACX;YACAC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEH,GAAG,CAAC;UAClD;UACA,OAAOvH,IAAK;AAClB;AACA;AACA;AACA;AACA,OAAO;QACH;MACF;IAAC;MAAAkB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAqG,WAAkBC,YAAkC,EAAE;QACpDC,IAAA,CAAAC,eAAA,CAhgBSpH,cAAc,CAAAqH,SAAA,uBAAAC,IAAA,OAggBNJ,YAAY;QAC7B,IAAIA,YAAY,CAACK,GAAG,CAAC,OAAO,CAAC,EAAE;UAC7B,IAAI,CAACnG,aAAa,GAAG,CAAC,CAAC;UACvB,IAAI,CAACC,YAAY,GAAG,CAAC,CAAC;QACxB;MACF;IAAC;MAAAb,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA4G,QAAkBN,YAAkC,EAAE;QACpDC,IAAA,CAAAC,eAAA,CAxgBSpH,cAAc,CAAAqH,SAAA,oBAAAC,IAAA,OAwgBTJ,YAAY;QAE1B,IAAI,CAACA,YAAY,CAACK,GAAG,CAAC,OAAO,CAAC,EAAE;UAC9B;QACF;;QAEA;QACA,IAAI,CAAC,IAAI,CAACjG,QAAQ,IAAI,EAAE,IAAI,CAACA,QAAQ,IAAI,IAAI,CAACD,YAAY,CAAC,EAAE;UAC3D,MAAMoG,SAAS,GAAG,IAAI,CAACpG,YAAY,CAAC8B,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC/B,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC;UACtE,IAAIoG,SAAS,EAAE;YACb/H,SAAS,CAAC,IAAI,EAAE,qBAAqB,EAAE+H,SAAS,CAAC;UACnD;QACF;QAEA,IAAI,IAAI,CAACtG,KAAK,EAAE;UACd,MAAMuG,QAAQ,GAAGvE,MAAM,CAACC,IAAI,CAAC,IAAI,CAACjC,KAAK,CAACA,KAAK,CAAC;UAC9C,MAAMiC,IAAI,GAAGD,MAAM,CAACC,IAAI,CAAC,IAAI,CAAChC,aAAa,CAAC,CAACuG,IAAI,CAC/C,CAACC,CAAC,EAAEC,CAAC,KAAKH,QAAQ,CAACI,OAAO,CAACF,CAAC,CAAC,GAAGF,QAAQ,CAACI,OAAO,CAACD,CAAC,CACpD,CAAC;UACD,MAAME,kBAAkB,GAAG,CAAC,CAAC;UAC7B,MAAMC,mBAAmB,GAAG,CAAC,CAAC;UAC9B,KAAK,MAAMrH,GAAG,IAAIyC,IAAI,EAAE;YACtB4E,mBAAmB,CAACrH,GAAG,CAAC,GAAG,IAAI,CAACS,aAAa,CAACT,GAAG,CAAC;YAClD,IAAIA,GAAG,IAAI,IAAI,CAACU,YAAY,EAAE;cAC5B0G,kBAAkB,CAACpH,GAAG,CAAC,GAAG,IAAI,CAACU,YAAY,CAACV,GAAG,CAAC;YAClD;UACF;UACA,IAAI,CAACS,aAAa,GAAG4G,mBAAmB;UACxC,IAAI,CAAC3G,YAAY,GAAG0G,kBAAkB;QACxC;MACF;IAAC;MAAAvH,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA6F,qBAAA,EAA+B;QAC7B,MAAMwB,KAAK,GAAG9E,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC/B,YAAY,CAAC;QAC5C,MAAM6G,SAAS,GAAGD,KAAK,CAACH,OAAO,CAAC,IAAI,CAACxG,QAAS,CAAC,GAAG,CAAC;QACnD,IAAI4G,SAAS,IAAI,CAAC,EAAE;UAClBxI,SAAS,CACP,IAAI,EACJ,qBAAqB,EACrB,IAAI,CAAC2B,YAAY,CAAC4G,KAAK,CAACC,SAAS,CAAC,CACpC,CAAC;QACH;MACF;IAAC;MAAA1H,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA+F,iBAAA,EAA2B;QACzB,MAAMsB,KAAK,GAAG9E,MAAM,CAACC,IAAI,CAAC,IAAI,CAAC/B,YAAY,CAAC;QAC5C,MAAM8G,SAAS,GAAGF,KAAK,CAACH,OAAO,CAAC,IAAI,CAACxG,QAAS,CAAC,GAAG,CAAC;QACnD,IAAI6G,SAAS,GAAGF,KAAK,CAACrC,MAAM,EAAE;UAC5BlG,SAAS,CACP,IAAI,EACJ,qBAAqB,EACrB,IAAI,CAAC2B,YAAY,CAAC4G,KAAK,CAACE,SAAS,CAAC,CACpC,CAAC;QACH;MACF;IAAC;MAAA3H,IAAA;MAAA4H,MAAA;MAAAzH,GAAA;MAAAC,KAAA,EAED,SAAAyH,OAAA,EAAoB;QAClB,OAAOhJ,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BU,OAAQ;AACvC,iCAAiCD,SAAU;AAC3C,qCAAqCD,aAAc;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAzmBiCT,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}