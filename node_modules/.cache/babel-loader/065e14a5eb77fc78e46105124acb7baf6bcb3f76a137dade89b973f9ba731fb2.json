{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"@material/mwc-button\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textarea\";\nimport \"../../../../components/ha-textfield\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nvar DialogAutomationRename = _decorate([customElement(\"ha-dialog-automation-rename\")], function (_initialize, _LitElement) {\n  var DialogAutomationRename = /*#__PURE__*/function (_LitElement2) {\n    _inherits(DialogAutomationRename, _LitElement2);\n    function DialogAutomationRename() {\n      var _this;\n      _classCallCheck(this, DialogAutomationRename);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, DialogAutomationRename, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(DialogAutomationRename);\n  }(_LitElement);\n  return {\n    F: DialogAutomationRename,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_opened\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_newName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_newDescription\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._opened = true;\n        this._params = params;\n        this._newName = params.config.alias || this.hass.localize(\"ui.panel.config.automation.editor.default_name\");\n        this._newDescription = params.config.description || \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._params.onClose();\n        if (this._opened) {\n          fireEvent(this, \"dialog-closed\", {\n            dialog: this.localName\n          });\n        }\n        this._opened = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._opened) {\n          return nothing;\n        }\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-dialog\\n        open\\n        scrimClickAction\\n        @closed=\", \"\\n        .heading=\", \"\\n      >\\n        \", \"\\n        <ha-textfield\\n          dialogInitialFocus\\n          .value=\", \"\\n          .placeholder=\", \"\\n          .label=\", \"\\n          required\\n          type=\\\"string\\\"\\n          @input=\", \"\\n        ></ha-textfield>\\n\\n        <ha-textarea\\n          .label=\", \"\\n          .placeholder=\", \"\\n          name=\\\"description\\\"\\n          autogrow\\n          .value=\", \"\\n          @input=\", \"\\n        ></ha-textarea>\\n\\n        <mwc-button @click=\", \" slot=\\\"secondaryAction\\\">\\n          \", \"\\n        </mwc-button>\\n        <mwc-button @click=\", \" slot=\\\"primaryAction\\\">\\n          \", \"\\n        </mwc-button>\\n      </ha-dialog>\\n    \"])), this.closeDialog, createCloseHeading(this.hass, this.hass.localize(this._params.config.alias ? \"ui.panel.config.automation.editor.rename\" : \"ui.panel.config.automation.editor.save\")), this._error ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<ha-alert alert-type=\\\"error\\\"\\n              >\", \"</ha-alert\\n            >\"])), this.hass.localize(\"ui.panel.config.automation.editor.missing_name\")) : \"\", this._newName, this.hass.localize(\"ui.panel.config.automation.editor.default_name\"), this.hass.localize(\"ui.panel.config.automation.editor.alias\"), this._valueChanged, this.hass.localize(\"ui.panel.config.automation.editor.description.label\"), this.hass.localize(\"ui.panel.config.automation.editor.description.placeholder\"), this._newDescription, this._valueChanged, this.closeDialog, this.hass.localize(\"ui.dialogs.generic.cancel\"), this._save, this.hass.localize(this._params.config.alias ? \"ui.panel.config.automation.editor.rename\" : \"ui.panel.config.automation.editor.save\"));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        ev.stopPropagation();\n        var target = ev.target;\n        if (target.name === \"description\") {\n          this._newDescription = target.value;\n        } else {\n          this._newName = target.value;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: function _save() {\n        if (!this._newName) {\n          this._error = \"Name is required\";\n          return;\n        }\n        this._params.updateAutomation(Object.assign(Object.assign({}, this._params.config), {}, {\n          alias: this._newName,\n          description: this._newDescription\n        }));\n        this.closeDialog();\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, haStyleDialog, css(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n        ha-textfield,\\n        ha-textarea {\\n          display: block;\\n        }\\n        ha-alert {\\n          display: block;\\n          margin-bottom: 16px;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","fireEvent","createCloseHeading","haStyle","haStyleDialog","DialogAutomationRename","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","showDialog","params","_opened","_params","_newName","config","alias","hass","localize","_newDescription","description","closeDialog","onClose","dialog","localName","render","_templateObject","_taggedTemplateLiteral","_error","_templateObject2","_valueChanged","_save","ev","stopPropagation","target","name","updateAutomation","Object","assign","static","styles","_templateObject3"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/automation/automation-rename-dialog/dialog-automation-rename.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textarea\";\nimport \"../../../../components/ha-textfield\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AutomationRenameDialog } from \"./show-dialog-automation-rename\";\n\n@customElement(\"ha-dialog-automation-rename\")\nclass DialogAutomationRename extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  @state() private _error?: string;\n\n  private _params!: AutomationRenameDialog;\n\n  private _newName?: string;\n\n  private _newDescription?: string;\n\n  public showDialog(params: AutomationRenameDialog): void {\n    this._opened = true;\n    this._params = params;\n    this._newName =\n      params.config.alias ||\n      this.hass.localize(\"ui.panel.config.automation.editor.default_name\");\n    this._newDescription = params.config.description || \"\";\n  }\n\n  public closeDialog(): void {\n    this._params.onClose();\n\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  protected render() {\n    if (!this._opened) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )\n        )}\n      >\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\"\n              >${this.hass.localize(\n                \"ui.panel.config.automation.editor.missing_name\"\n              )}</ha-alert\n            >`\n          : \"\"}\n        <ha-textfield\n          dialogInitialFocus\n          .value=${this._newName}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.default_name\"\n          )}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.alias\"\n          )}\n          required\n          type=\"string\"\n          @input=${this._valueChanged}\n        ></ha-textfield>\n\n        <ha-textarea\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.label\"\n          )}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.placeholder\"\n          )}\n          name=\"description\"\n          autogrow\n          .value=${this._newDescription}\n          @input=${this._valueChanged}\n        ></ha-textarea>\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    if (target.name === \"description\") {\n      this._newDescription = target.value;\n    } else {\n      this._newName = target.value;\n    }\n  }\n\n  private _save(): void {\n    if (!this._newName) {\n      this._error = \"Name is required\";\n      return;\n    }\n    this._params.updateAutomation({\n      ...this._params.config,\n      alias: this._newName,\n      description: this._newDescription,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-textfield,\n        ha-textarea {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-automation-rename\": DialogAutomationRename;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}