{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { AriaModalController } from '@vaadin/a11y-base/src/aria-modal-controller.js';\nimport { FocusRestorationController } from '@vaadin/a11y-base/src/focus-restoration-controller.js';\nimport { FocusTrapController } from '@vaadin/a11y-base/src/focus-trap-controller.js';\nimport { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n */\nexport const OverlayFocusMixin = superClass => class OverlayFocusMixin extends ControllerMixin(superClass) {\n  static get properties() {\n    return {\n      /**\n       * When true, opening the overlay moves focus to the first focusable child,\n       * or to the overlay part with tabindex if there are no focusable children.\n       * @attr {boolean} focus-trap\n       */\n      focusTrap: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Set to true to enable restoring of focus when overlay is closed.\n       * @attr {boolean} restore-focus-on-close\n       */\n      restoreFocusOnClose: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Set to specify the element which should be focused on overlay close,\n       * if `restoreFocusOnClose` is set to true.\n       * @type {HTMLElement}\n       */\n      restoreFocusNode: {\n        type: HTMLElement\n      }\n    };\n  }\n  constructor() {\n    super();\n    this.__ariaModalController = new AriaModalController(this);\n    this.__focusTrapController = new FocusTrapController(this);\n    this.__focusRestorationController = new FocusRestorationController();\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this.addController(this.__ariaModalController);\n    this.addController(this.__focusTrapController);\n    this.addController(this.__focusRestorationController);\n  }\n\n  /**\n   * Release focus and restore focus after the overlay is closed.\n   *\n   * @protected\n   */\n  _resetFocus() {\n    if (this.focusTrap) {\n      this.__ariaModalController.close();\n      this.__focusTrapController.releaseFocus();\n    }\n    if (this.restoreFocusOnClose && this._shouldRestoreFocus()) {\n      this.__focusRestorationController.restoreFocus();\n    }\n  }\n\n  /**\n   * Save the previously focused node when the overlay starts to open.\n   *\n   * @protected\n   */\n  _saveFocus() {\n    if (this.restoreFocusOnClose) {\n      this.__focusRestorationController.saveFocus(this.restoreFocusNode);\n    }\n  }\n\n  /**\n   * Trap focus within the overlay after opening has completed.\n   *\n   * @protected\n   */\n  _trapFocus() {\n    if (this.focusTrap) {\n      this.__ariaModalController.showModal();\n      this.__focusTrapController.trapFocus(this.$.overlay);\n    }\n  }\n\n  /**\n   * Returns true if focus is still inside the overlay or on the body element,\n   * otherwise false.\n   *\n   * Focus shouldn't be restored if it's been moved elsewhere by another\n   * component or as a result of a user interaction e.g. the user clicked\n   * on a button outside the overlay while the overlay was open.\n   *\n   * @protected\n   * @return {boolean}\n   */\n  _shouldRestoreFocus() {\n    const activeElement = getDeepActiveElement();\n    return activeElement === document.body || this._deepContains(activeElement);\n  }\n\n  /**\n   * Returns true if the overlay contains the given node,\n   * including those within shadow DOM trees.\n   *\n   * @param {Node} node\n   * @return {boolean}\n   * @protected\n   */\n  _deepContains(node) {\n    if (this.contains(node)) {\n      return true;\n    }\n    let n = node;\n    const doc = node.ownerDocument;\n    // Walk from node to `this` or `document`\n    while (n && n !== doc && n !== this) {\n      n = n.parentNode || n.host;\n    }\n    return n === this;\n  }\n};","map":{"version":3,"names":["AriaModalController","FocusRestorationController","FocusTrapController","getDeepActiveElement","ControllerMixin","OverlayFocusMixin","superClass","properties","focusTrap","type","Boolean","value","restoreFocusOnClose","restoreFocusNode","HTMLElement","constructor","__ariaModalController","__focusTrapController","__focusRestorationController","ready","addController","_resetFocus","close","releaseFocus","_shouldRestoreFocus","restoreFocus","_saveFocus","saveFocus","_trapFocus","showModal","trapFocus","$","overlay","activeElement","document","body","_deepContains","node","contains","n","doc","ownerDocument","parentNode","host"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/overlay/src/vaadin-overlay-focus-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { AriaModalController } from '@vaadin/a11y-base/src/aria-modal-controller.js';\nimport { FocusRestorationController } from '@vaadin/a11y-base/src/focus-restoration-controller.js';\nimport { FocusTrapController } from '@vaadin/a11y-base/src/focus-trap-controller.js';\nimport { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n */\nexport const OverlayFocusMixin = (superClass) =>\n  class OverlayFocusMixin extends ControllerMixin(superClass) {\n    static get properties() {\n      return {\n        /**\n         * When true, opening the overlay moves focus to the first focusable child,\n         * or to the overlay part with tabindex if there are no focusable children.\n         * @attr {boolean} focus-trap\n         */\n        focusTrap: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Set to true to enable restoring of focus when overlay is closed.\n         * @attr {boolean} restore-focus-on-close\n         */\n        restoreFocusOnClose: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Set to specify the element which should be focused on overlay close,\n         * if `restoreFocusOnClose` is set to true.\n         * @type {HTMLElement}\n         */\n        restoreFocusNode: {\n          type: HTMLElement,\n        },\n      };\n    }\n\n    constructor() {\n      super();\n\n      this.__ariaModalController = new AriaModalController(this);\n      this.__focusTrapController = new FocusTrapController(this);\n      this.__focusRestorationController = new FocusRestorationController();\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addController(this.__ariaModalController);\n      this.addController(this.__focusTrapController);\n      this.addController(this.__focusRestorationController);\n    }\n\n    /**\n     * Release focus and restore focus after the overlay is closed.\n     *\n     * @protected\n     */\n    _resetFocus() {\n      if (this.focusTrap) {\n        this.__ariaModalController.close();\n        this.__focusTrapController.releaseFocus();\n      }\n\n      if (this.restoreFocusOnClose && this._shouldRestoreFocus()) {\n        this.__focusRestorationController.restoreFocus();\n      }\n    }\n\n    /**\n     * Save the previously focused node when the overlay starts to open.\n     *\n     * @protected\n     */\n    _saveFocus() {\n      if (this.restoreFocusOnClose) {\n        this.__focusRestorationController.saveFocus(this.restoreFocusNode);\n      }\n    }\n\n    /**\n     * Trap focus within the overlay after opening has completed.\n     *\n     * @protected\n     */\n    _trapFocus() {\n      if (this.focusTrap) {\n        this.__ariaModalController.showModal();\n        this.__focusTrapController.trapFocus(this.$.overlay);\n      }\n    }\n\n    /**\n     * Returns true if focus is still inside the overlay or on the body element,\n     * otherwise false.\n     *\n     * Focus shouldn't be restored if it's been moved elsewhere by another\n     * component or as a result of a user interaction e.g. the user clicked\n     * on a button outside the overlay while the overlay was open.\n     *\n     * @protected\n     * @return {boolean}\n     */\n    _shouldRestoreFocus() {\n      const activeElement = getDeepActiveElement();\n      return activeElement === document.body || this._deepContains(activeElement);\n    }\n\n    /**\n     * Returns true if the overlay contains the given node,\n     * including those within shadow DOM trees.\n     *\n     * @param {Node} node\n     * @return {boolean}\n     * @protected\n     */\n    _deepContains(node) {\n      if (this.contains(node)) {\n        return true;\n      }\n      let n = node;\n      const doc = node.ownerDocument;\n      // Walk from node to `this` or `document`\n      while (n && n !== doc && n !== this) {\n        n = n.parentNode || n.host;\n      }\n      return n === this;\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}