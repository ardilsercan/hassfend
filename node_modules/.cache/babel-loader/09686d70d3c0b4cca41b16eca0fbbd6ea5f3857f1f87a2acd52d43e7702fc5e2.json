{"ast":null,"code":"export const resolveMediaSource = (hass, media_content_id) => hass.callWS({\n  type: \"media_source/resolve_media\",\n  media_content_id\n});\nexport const browseLocalMediaPlayer = (hass, mediaContentId) => hass.callWS({\n  type: \"media_source/browse_media\",\n  media_content_id: mediaContentId\n});\nexport const isLocalMediaSourceContentId = mediaId => mediaId.startsWith(\"media-source://media_source\");\nexport const uploadLocalMedia = async (hass, media_content_id, file) => {\n  const fd = new FormData();\n  fd.append(\"media_content_id\", media_content_id);\n  fd.append(\"file\", file);\n  const resp = await hass.fetchWithAuth(\"/api/media_source/local_source/upload\", {\n    method: \"POST\",\n    body: fd\n  });\n  if (resp.status === 413) {\n    throw new Error(`Uploaded file is too large (${file.name})`);\n  } else if (resp.status !== 200) {\n    throw new Error(\"Unknown error\");\n  }\n  return resp.json();\n};\nexport const removeLocalMedia = async (hass, media_content_id) => hass.callWS({\n  type: \"media_source/local_source/remove\",\n  media_content_id\n});","map":{"version":3,"names":["resolveMediaSource","hass","media_content_id","callWS","type","browseLocalMediaPlayer","mediaContentId","isLocalMediaSourceContentId","mediaId","startsWith","uploadLocalMedia","file","fd","FormData","append","resp","fetchWithAuth","method","body","status","Error","name","json","removeLocalMedia"],"sources":["/workspaces/frontend/src/data/media_source.ts"],"sourcesContent":["import { HomeAssistant } from \"../types\";\nimport { MediaPlayerItem } from \"./media-player\";\n\nexport interface ResolvedMediaSource {\n  url: string;\n  mime_type: string;\n}\n\nexport const resolveMediaSource = (\n  hass: HomeAssistant,\n  media_content_id: string\n) =>\n  hass.callWS<ResolvedMediaSource>({\n    type: \"media_source/resolve_media\",\n    media_content_id,\n  });\n\nexport const browseLocalMediaPlayer = (\n  hass: HomeAssistant,\n  mediaContentId?: string\n): Promise<MediaPlayerItem> =>\n  hass.callWS<MediaPlayerItem>({\n    type: \"media_source/browse_media\",\n    media_content_id: mediaContentId,\n  });\n\nexport const isLocalMediaSourceContentId = (mediaId: string) =>\n  mediaId.startsWith(\"media-source://media_source\");\n\nexport const uploadLocalMedia = async (\n  hass: HomeAssistant,\n  media_content_id: string,\n  file: File\n) => {\n  const fd = new FormData();\n  fd.append(\"media_content_id\", media_content_id);\n  fd.append(\"file\", file);\n  const resp = await hass.fetchWithAuth(\n    \"/api/media_source/local_source/upload\",\n    {\n      method: \"POST\",\n      body: fd,\n    }\n  );\n  if (resp.status === 413) {\n    throw new Error(`Uploaded file is too large (${file.name})`);\n  } else if (resp.status !== 200) {\n    throw new Error(\"Unknown error\");\n  }\n  return resp.json();\n};\n\nexport const removeLocalMedia = async (\n  hass: HomeAssistant,\n  media_content_id: string\n) =>\n  hass.callWS({\n    type: \"media_source/local_source/remove\",\n    media_content_id,\n  });\n"],"mappings":"AAQA,OAAO,MAAMA,kBAAkB,GAAGA,CAChCC,IAAmB,EACnBC,gBAAwB,KAExBD,IAAI,CAACE,MAAM,CAAsB;EAC/BC,IAAI,EAAE,4BAA4B;EAClCF;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMG,sBAAsB,GAAGA,CACpCJ,IAAmB,EACnBK,cAAuB,KAEvBL,IAAI,CAACE,MAAM,CAAkB;EAC3BC,IAAI,EAAE,2BAA2B;EACjCF,gBAAgB,EAAEI;AACpB,CAAC,CAAC;AAEJ,OAAO,MAAMC,2BAA2B,GAAIC,OAAe,IACzDA,OAAO,CAACC,UAAU,CAAC,6BAA6B,CAAC;AAEnD,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAC9BT,IAAmB,EACnBC,gBAAwB,EACxBS,IAAU,KACP;EACH,MAAMC,EAAE,GAAG,IAAIC,QAAQ,CAAC,CAAC;EACzBD,EAAE,CAACE,MAAM,CAAC,kBAAkB,EAAEZ,gBAAgB,CAAC;EAC/CU,EAAE,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACvB,MAAMI,IAAI,GAAG,MAAMd,IAAI,CAACe,aAAa,CACnC,uCAAuC,EACvC;IACEC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CACF,CAAC;EACD,IAAIG,IAAI,CAACI,MAAM,KAAK,GAAG,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAE,+BAA8BT,IAAI,CAACU,IAAK,GAAE,CAAC;EAC9D,CAAC,MAAM,IAAIN,IAAI,CAACI,MAAM,KAAK,GAAG,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAClC;EACA,OAAOL,IAAI,CAACO,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAC9BtB,IAAmB,EACnBC,gBAAwB,KAExBD,IAAI,CAACE,MAAM,CAAC;EACVC,IAAI,EAAE,kCAAkC;EACxCF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}