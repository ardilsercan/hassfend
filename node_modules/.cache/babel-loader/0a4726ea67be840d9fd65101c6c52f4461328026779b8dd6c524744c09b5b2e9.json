{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.split.js\";\nfunction getWeekStartByRegion(regionCode, regionDayMap) {\n  var code = regionDayMap[typeof regionCode === 'string' ? regionCode.toUpperCase() : regionCode];\n  return typeof code === 'number' ? code : 1;\n}\nfunction getWeekStartByLocale(locale, langRegionMap, regionDayMap) {\n  if (locale) {\n    var data = locale.toLowerCase().split(/[-_]/);\n    var langTag = data[0];\n    var language = langTag;\n    var country;\n    if (data[1] && data[1].length === 4) {\n      language += \"_\" + data[1];\n      country = data[2];\n    } else {\n      country = data[1];\n    }\n    if (!country) {\n      country = langRegionMap[language] || langRegionMap[langTag];\n    }\n    if (country) {\n      return getWeekStartByRegion(country.match(/^\\d+$/) ? Number(country) : country, regionDayMap);\n    }\n  }\n  return 1;\n}\nexport { getWeekStartByRegion, getWeekStartByLocale };","map":{"version":3,"names":["getWeekStartByRegion","regionCode","regionDayMap","code","toUpperCase","getWeekStartByLocale","locale","langRegionMap","data","toLowerCase","split","langTag","language","country","length","match","Number"],"sources":["../../src/api.js"],"sourcesContent":["/**\n * Functions to get first day of week.\n * \n * @module api\n */\n\n\n/**\n * Return first day of week for country/region code.\n *\n * @example\n * getWeekStartByRegion('PNG', {});   // 1\n * getWeekStartByRegion('png', {BR: 0, PNG: 3, EG: 6});   // 3\n * getWeekStartByRegion('qa', {QA: 6});   // 6\n * getWeekStartByRegion(50, {BD: 5, 50: 5, SD: 6});   // 5\n *\n * @param {number | string} regionCode\n *      ISO 3166 Alpha-2, Alpha-3 or numeric code.\n * @param {object} regionDayMap\n *      Mapping of country/region code to first day of week that should be used to get result.\n *      Country codes should be in upper case.\n * @return {number}\n *      Code of first day of week for the given country/region code:\n *      0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday.\n * @alias module:api.getWeekStartByRegion\n */\nexport function getWeekStartByRegion(regionCode, regionDayMap) {\n    /* eslint-disable indent */\n    const code = regionDayMap[typeof regionCode === 'string'\n                                ? regionCode.toUpperCase()\n                                : regionCode];\n    /* eslint-enable indent */\n\n    return typeof code === 'number'\n        ? code\n        : 1;\n}\n\n/**\n * Return first day of week for locale identifier.\n *\n * @example\n * getWeekStartByLocale('no', {}, {});   // 1\n * getWeekStartByLocale('no', {no: 'abc'}, {ABC: 3});   // 3\n * getWeekStartByLocale('KK_arab', {kk_arab: 'CN'}, {CN: 0});   // 0\n * getWeekStartByLocale('fr-DZ', {fr: 'FR'}, {FR: 1, DZ: 6});   // 6\n *\n * @param {string} locale\n *      Locale identifier.\n * @param {object} langRegionMap\n *      Mapping of language code to country/region code that should be used to get result.\n *      Language codes should be in lower case.\n * @param {object} regionDayMap\n *      Mapping of country/region code to first day of week that should be used to get result.\n *      Country codes should be in upper case.\n * @return {number}\n *      Code of first day of week for the given locale identifier:\n *      0 - Sunday, 1 - Monday, 2 - Tuesday, 3 - Wednesday, 4 - Thursday, 5 - Friday, 6 - Saturday.\n * @alias module:api.getWeekStartByLocale\n */\nexport function getWeekStartByLocale(locale, langRegionMap, regionDayMap) {\n    if (locale) {\n        // Locale form: http://www.unicode.org/reports/tr35/tr35.html#Unicode_Language_and_Locale_Identifiers\n        const data = locale.toLowerCase().split(/[-_]/);\n        const langTag = data[0];\n        let language = langTag;\n        let country;\n        if (data[1] && data[1].length === 4) {\n            language += `_${data[1]}`;\n            country = data[2];\n        }\n        else {\n            country = data[1];\n        }\n        if (! country) {\n            country = langRegionMap[language] || langRegionMap[langTag];\n        }\n        if (country) {\n            return getWeekStartByRegion(\n                country.match(/^\\d+$/)\n                    ? Number(country)\n                    : country,\n                regionDayMap\n            );\n        }\n    }\n\n    return 1;\n}\n"],"mappings":";;;;AA0BO,SAASA,qBAAqBC,UAAY,EAAAC,YAAA,EAAc;EAE3D,IAAMC,IAAA,GAAOD,YAAA,CAAa,OAAOD,UAAP,KAAsB,QAAtB,GACIA,UAAA,CAAWG,WAAX,KACAH,UAAA;EAG9B,OAAO,OAAOE,IAAP,KAAgB,QAAhB,GACDA,IAAA,GACA;;AAyBV,SAAgBE,qBAAqBC,MAAQ,EAAAC,aAAe,EAAAL,YAAA,EAAc;EACtE,IAAII,MAAA,EAAQ;IAER,IAAME,IAAA,GAAOF,MAAA,CAAOG,WAAP,GAAqBC,KAArB,CAA2B;IACxC,IAAMC,OAAA,GAAUH,IAAA,CAAK;IACrB,IAAII,QAAA,GAAWD,OAAA;IACf,IAAIE,OAAA;IACJ,IAAIL,IAAA,CAAK,EAAL,IAAWA,IAAA,CAAK,EAAL,CAAQM,MAAR,KAAmB,GAAG;MACjCF,QAAA,IAAY,MAAIJ,IAAA,CAAK;MACrBK,OAAA,GAAUL,IAAA,CAAK;WAEd;MACDK,OAAA,GAAUL,IAAA,CAAK;;IAEnB,IAAI,CAAEK,OAAA,EAAS;MACXA,OAAA,GAAUN,aAAA,CAAcK,QAAA,CAAd,IAA2BL,aAAA,CAAcI,OAAA;;IAEvD,IAAIE,OAAA,EAAS;MACT,OAAOb,oBAAA,CACHa,OAAA,CAAQE,KAAR,CAAc,QAAd,GACMC,MAAA,CAAOH,OAAA,IACPA,OAAA,EACNX,YAAA;;;EAKZ,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}