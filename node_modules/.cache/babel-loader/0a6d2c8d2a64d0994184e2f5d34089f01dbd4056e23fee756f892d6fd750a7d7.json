{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { SizeGapPaddingBaseLayout, gap2 as gap2Name } from './SizeGapPaddingBaseLayout.js';\nimport { dim1 } from './BaseLayout.js';\n///\nexport var GridBaseLayout = /*#__PURE__*/function (_SizeGapPaddingBaseLa) {\n  _inherits(GridBaseLayout, _SizeGapPaddingBaseLa);\n  function GridBaseLayout() {\n    var _this;\n    _classCallCheck(this, GridBaseLayout);\n    _this = _callSuper(this, GridBaseLayout, arguments);\n    _this._metrics = null;\n    _this.flex = null;\n    _this.justify = null;\n    return _this;\n  }\n  _createClass(GridBaseLayout, [{\n    key: \"_getDefaultConfig\",\n    value: function _getDefaultConfig() {\n      return Object.assign({}, _get(_getPrototypeOf(GridBaseLayout.prototype), \"_getDefaultConfig\", this).call(this), {\n        flex: false,\n        justify: 'start'\n      });\n    }\n  }, {\n    key: \"gap\",\n    set: function set(spec) {\n      _get(_getPrototypeOf(GridBaseLayout.prototype), \"_setGap\", this).call(this, spec);\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout() {\n      var _this2 = this;\n      var justify = this.justify;\n      var _this$_padding = _slicedToArray(this._padding1, 2),\n        padding1Start = _this$_padding[0],\n        padding1End = _this$_padding[1];\n      var _this$_padding2 = _slicedToArray(this._padding2, 2),\n        padding2Start = _this$_padding2[0],\n        padding2End = _this$_padding2[1];\n      // TODO (graynorton): Omit these checks in production mode\n      ['_gap1', '_gap2'].forEach(function (gap) {\n        var gapValue = _this2[gap];\n        if (gapValue === Infinity && !['space-between', 'space-around', 'space-evenly'].includes(justify)) {\n          throw new Error(\"grid layout: gap can only be set to 'auto' when justify is set to 'space-between', 'space-around' or 'space-evenly'\");\n        }\n        if (gapValue === Infinity && gap === '_gap2') {\n          throw new Error(\"grid layout: \".concat(gap2Name(_this2.direction), \"-gap cannot be set to 'auto' when direction is set to \").concat(_this2.direction));\n        }\n      });\n      var usePaddingAndGap2 = this.flex || ['start', 'center', 'end'].includes(justify);\n      var metrics = {\n        rolumns: -1,\n        itemSize1: -1,\n        itemSize2: -1,\n        // Infinity represents 'auto', so we set an invalid placeholder until we can calculate\n        gap1: this._gap1 === Infinity ? -1 : this._gap1,\n        gap2: usePaddingAndGap2 ? this._gap2 : 0,\n        // Infinity represents 'match-gap', so we set padding to match gap\n        padding1: {\n          start: padding1Start === Infinity ? this._gap1 : padding1Start,\n          end: padding1End === Infinity ? this._gap1 : padding1End\n        },\n        padding2: usePaddingAndGap2 ? {\n          start: padding2Start === Infinity ? this._gap2 : padding2Start,\n          end: padding2End === Infinity ? this._gap2 : padding2End\n        } : {\n          start: 0,\n          end: 0\n        },\n        positions: []\n      };\n      // 1. Calculate available space, taking padding into account\n      var availableSpace = this._viewDim2 - metrics.padding2.start - metrics.padding2.end;\n      if (availableSpace <= 0) {\n        // If we have no space, we won't render any rolumns\n        metrics.rolumns = 0;\n      } else {\n        // 2. Calculate how many ideally sized \"rolumns\" (including gaps) fit in the available space\n        var gapSize = usePaddingAndGap2 ? metrics.gap2 : 0;\n        var rolumns = 0;\n        var spaceTaken = 0;\n        if (availableSpace >= this._idealSize2) {\n          rolumns = Math.floor((availableSpace - this._idealSize2) / (this._idealSize2 + gapSize)) + 1;\n          spaceTaken = rolumns * this._idealSize2 + (rolumns - 1) * gapSize;\n        }\n        // 3. If we're flexing items to fill the available space exactly, decide whether to add\n        // a rolumn and reduce item size, or keep the number of rolumns and increase item size\n        if (this.flex) {\n          // If we have at least half the space we need for another rolumn, go ahead and add one\n          if ((availableSpace - spaceTaken) / (this._idealSize2 + gapSize) >= 0.5) {\n            rolumns = rolumns + 1;\n          }\n          metrics.rolumns = rolumns;\n          // Calculate the flexed item size\n          metrics.itemSize2 = Math.round((availableSpace - gapSize * (rolumns - 1)) / rolumns);\n          // Calculate item size in the other dimension, preserving area (the default), aspect ratio or ideal size in that dimension as specified\n          var preserve = this.flex === true ? 'area' : this.flex.preserve;\n          switch (preserve) {\n            case 'aspect-ratio':\n              metrics.itemSize1 = Math.round(this._idealSize1 / this._idealSize2 * metrics.itemSize2);\n              break;\n            case dim1(this.direction):\n              metrics.itemSize1 = Math.round(this._idealSize1);\n              break;\n            case 'area':\n            default:\n              metrics.itemSize1 = Math.round(this._idealSize1 * this._idealSize2 / metrics.itemSize2);\n          }\n        } else {\n          // We're not flexing, so use the specified sizes unmodified\n          metrics.itemSize1 = this._idealSize1;\n          metrics.itemSize2 = this._idealSize2;\n          metrics.rolumns = rolumns;\n        }\n        // 4. Calculate the position for each item in a template rolumn\n        var pos;\n        if (usePaddingAndGap2) {\n          var _spaceTaken = metrics.rolumns * metrics.itemSize2 + (metrics.rolumns - 1) * metrics.gap2;\n          pos = this.flex || justify === 'start' ? metrics.padding2.start : justify === 'end' ? this._viewDim2 - metrics.padding2.end - _spaceTaken : Math.round(this._viewDim2 / 2 - _spaceTaken / 2);\n        } else {\n          var spaceToDivide = availableSpace - metrics.rolumns * metrics.itemSize2;\n          if (justify === 'space-between') {\n            metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns - 1));\n            pos = 0;\n          } else if (justify === 'space-around') {\n            metrics.gap2 = Math.round(spaceToDivide / metrics.rolumns);\n            pos = Math.round(metrics.gap2 / 2);\n          } else {\n            // justify == 'space-evenly'\n            metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns + 1));\n            pos = metrics.gap2;\n          }\n          // If primary-axis gap was set to 'auto', provide the value now\n          // (and set 'match-gap' padding values transitively)\n          if (this._gap1 === Infinity) {\n            metrics.gap1 = metrics.gap2;\n            if (padding1Start === Infinity) {\n              metrics.padding1.start = pos;\n            }\n            if (padding1End === Infinity) {\n              metrics.padding1.end = pos;\n            }\n          }\n        }\n        for (var i = 0; i < metrics.rolumns; i++) {\n          metrics.positions.push(pos);\n          pos += metrics.itemSize2 + metrics.gap2;\n        }\n      }\n      this._metrics = metrics;\n    }\n  }]);\n  return GridBaseLayout;\n}(SizeGapPaddingBaseLayout);","map":{"version":3,"names":["SizeGapPaddingBaseLayout","gap2","gap2Name","dim1","GridBaseLayout","_SizeGapPaddingBaseLa","_inherits","_this","_classCallCheck","_metrics","flex","justify","_createClass","key","value","_getDefaultConfig","Object","assign","_get","_getPrototypeOf","prototype","call","set","spec","_updateLayout","_this2","_this$_padding","_slicedToArray","_padding1","padding1Start","padding1End","_this$_padding2","_padding2","padding2Start","padding2End","forEach","gap","gapValue","Infinity","includes","Error","concat","direction","usePaddingAndGap2","metrics","rolumns","itemSize1","itemSize2","gap1","_gap1","_gap2","padding1","start","end","padding2","positions","availableSpace","_viewDim2","gapSize","spaceTaken","_idealSize2","Math","floor","round","preserve","_idealSize1","pos","spaceToDivide","i","push"],"sources":["../../src/layouts/shared/GridBaseLayout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  SizeGapPaddingBaseLayout,\n  SizeGapPaddingBaseLayoutConfig,\n  AutoGapSpec,\n  gap2 as gap2Name,\n} from './SizeGapPaddingBaseLayout.js';\nimport {dim1} from './BaseLayout.js';\n\ntype FlexSpec =\n  | boolean\n  | {preserve: 'aspect-ratio' | 'area' | 'width' | 'height'};\ntype JustifySpec =\n  | 'start'\n  | 'center'\n  | 'end'\n  | 'space-evenly'\n  | 'space-around'\n  | 'space-between';\n\nexport interface GridBaseLayoutConfig\n  extends Omit<SizeGapPaddingBaseLayoutConfig, 'gap'> {\n  gap?: AutoGapSpec;\n  flex?: FlexSpec;\n  justify?: JustifySpec;\n}\n\ninterface GridLayoutMetrics {\n  rolumns: number;\n  itemSize1: number;\n  itemSize2: number;\n  gap1: number;\n  gap2: number;\n  padding1: {\n    start: number;\n    end: number;\n  };\n  padding2: {\n    start: number;\n    end: number;\n  };\n  positions: number[];\n}\n\n///\n\nexport abstract class GridBaseLayout<\n  C extends GridBaseLayoutConfig\n> extends SizeGapPaddingBaseLayout<C> {\n  protected _metrics: GridLayoutMetrics | null = null;\n  flex: FlexSpec | null = null;\n  justify: JustifySpec | null = null;\n\n  protected _getDefaultConfig(): C {\n    return Object.assign({}, super._getDefaultConfig(), {\n      flex: false,\n      justify: 'start',\n    });\n  }\n\n  set gap(spec: AutoGapSpec) {\n    super._setGap(spec);\n  }\n\n  protected _updateLayout() {\n    const justify = this.justify as JustifySpec;\n    const [padding1Start, padding1End] = this._padding1;\n    const [padding2Start, padding2End] = this._padding2;\n\n    // TODO (graynorton): Omit these checks in production mode\n    ['_gap1', '_gap2'].forEach((gap) => {\n      const gapValue = this[gap as '_gap1' | '_gap2'];\n      if (\n        gapValue === Infinity &&\n        !['space-between', 'space-around', 'space-evenly'].includes(justify)\n      ) {\n        throw new Error(\n          `grid layout: gap can only be set to 'auto' when justify is set to 'space-between', 'space-around' or 'space-evenly'`\n        );\n      }\n      if (gapValue === Infinity && gap === '_gap2') {\n        throw new Error(\n          `grid layout: ${gap2Name(\n            this.direction\n          )}-gap cannot be set to 'auto' when direction is set to ${\n            this.direction\n          }`\n        );\n      }\n    });\n\n    const usePaddingAndGap2 =\n      this.flex || ['start', 'center', 'end'].includes(justify);\n\n    const metrics: GridLayoutMetrics = {\n      rolumns: -1,\n      itemSize1: -1,\n      itemSize2: -1,\n      // Infinity represents 'auto', so we set an invalid placeholder until we can calculate\n      gap1: this._gap1 === Infinity ? -1 : this._gap1,\n      gap2: usePaddingAndGap2 ? this._gap2 : 0,\n      // Infinity represents 'match-gap', so we set padding to match gap\n      padding1: {\n        start: padding1Start === Infinity ? this._gap1 : padding1Start,\n        end: padding1End === Infinity ? this._gap1 : padding1End,\n      },\n      padding2: usePaddingAndGap2\n        ? {\n            start: padding2Start === Infinity ? this._gap2 : padding2Start,\n            end: padding2End === Infinity ? this._gap2 : padding2End,\n          }\n        : {\n            start: 0,\n            end: 0,\n          },\n      positions: [],\n    };\n\n    // 1. Calculate available space, taking padding into account\n    const availableSpace =\n      this._viewDim2 - metrics.padding2.start - metrics.padding2.end;\n    if (availableSpace <= 0) {\n      // If we have no space, we won't render any rolumns\n      metrics.rolumns = 0;\n    } else {\n      // 2. Calculate how many ideally sized \"rolumns\" (including gaps) fit in the available space\n      const gapSize = usePaddingAndGap2 ? metrics.gap2 : 0;\n      let rolumns = 0;\n      let spaceTaken = 0;\n      if (availableSpace >= this._idealSize2) {\n        rolumns =\n          Math.floor(\n            (availableSpace - this._idealSize2) / (this._idealSize2 + gapSize)\n          ) + 1;\n        spaceTaken = rolumns * this._idealSize2 + (rolumns - 1) * gapSize;\n      }\n      // 3. If we're flexing items to fill the available space exactly, decide whether to add\n      // a rolumn and reduce item size, or keep the number of rolumns and increase item size\n      if (this.flex) {\n        // If we have at least half the space we need for another rolumn, go ahead and add one\n        if (\n          (availableSpace - spaceTaken) / (this._idealSize2 + gapSize) >=\n          0.5\n        ) {\n          rolumns = rolumns + 1;\n        }\n        metrics.rolumns = rolumns;\n        // Calculate the flexed item size\n        metrics.itemSize2 = Math.round(\n          (availableSpace - gapSize * (rolumns - 1)) / rolumns\n        );\n        // Calculate item size in the other dimension, preserving area (the default), aspect ratio or ideal size in that dimension as specified\n        const preserve = this.flex === true ? 'area' : this.flex.preserve;\n        switch (preserve) {\n          case 'aspect-ratio':\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 / this._idealSize2) * metrics.itemSize2\n            );\n            break;\n          case dim1(this.direction):\n            metrics.itemSize1 = Math.round(this._idealSize1);\n            break;\n          case 'area':\n          default:\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 * this._idealSize2) / metrics.itemSize2\n            );\n        }\n      } else {\n        // We're not flexing, so use the specified sizes unmodified\n        metrics.itemSize1 = this._idealSize1;\n        metrics.itemSize2 = this._idealSize2;\n        metrics.rolumns = rolumns;\n      }\n      // 4. Calculate the position for each item in a template rolumn\n      let pos: number;\n      if (usePaddingAndGap2) {\n        const spaceTaken =\n          metrics.rolumns * metrics.itemSize2 +\n          (metrics.rolumns - 1) * metrics.gap2;\n        pos =\n          this.flex || justify === 'start'\n            ? metrics.padding2.start\n            : justify === 'end'\n            ? this._viewDim2 - metrics.padding2.end - spaceTaken\n            : Math.round(this._viewDim2 / 2 - spaceTaken / 2);\n      } else {\n        const spaceToDivide =\n          availableSpace - metrics.rolumns * metrics.itemSize2;\n        if (justify === 'space-between') {\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns - 1));\n          pos = 0;\n        } else if (justify === 'space-around') {\n          metrics.gap2 = Math.round(spaceToDivide / metrics.rolumns);\n          pos = Math.round(metrics.gap2 / 2);\n        } else {\n          // justify == 'space-evenly'\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns + 1));\n          pos = metrics.gap2;\n        }\n        // If primary-axis gap was set to 'auto', provide the value now\n        // (and set 'match-gap' padding values transitively)\n        if (this._gap1 === Infinity) {\n          metrics.gap1 = metrics.gap2;\n          if (padding1Start === Infinity) {\n            metrics.padding1.start = pos;\n          }\n          if (padding1End === Infinity) {\n            metrics.padding1.end = pos;\n          }\n        }\n      }\n      for (let i = 0; i < metrics.rolumns; i++) {\n        metrics.positions.push(pos);\n        pos += metrics.itemSize2 + metrics.gap2;\n      }\n    }\n\n    this._metrics = metrics;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA;;;;;AAMA,SACEA,wBAAwB,EAGxBC,IAAI,IAAIC,QAAQ,QACX,+BAA+B;AACtC,SAAQC,IAAI,QAAO,iBAAiB;AAqCpC;AAEA,WAAsBC,cAEpB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,qBAAA;EAFF,SAAAD,eAAA;IAAA,IAAAG,KAAA;IAAAC,eAAA,OAAAJ,cAAA;;IAGYG,KAAA,CAAAE,QAAQ,GAA6B,IAAI;IACnDF,KAAA,CAAAG,IAAI,GAAoB,IAAI;IAC5BH,KAAA,CAAAI,OAAO,GAAuB,IAAI;IAAC,OAAAJ,KAAA;EAyKrC;EAACK,YAAA,CAAAR,cAAA;IAAAS,GAAA;IAAAC,KAAA,EAvKW,SAAAC,kBAAA,EAAiB;MACzB,OAAOC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAAC,IAAA,CAAAC,eAAA,CAAAf,cAAA,CAAAgB,SAAA,8BAAAC,IAAA,QAA6B;QAClDX,IAAI,EAAE,KAAK;QACXC,OAAO,EAAE;OACV,CAAC;IACJ;EAAC;IAAAE,GAAA;IAAAS,GAAA,EAED,SAAAA,IAAQC,IAAiB;MACvBL,IAAA,CAAAC,eAAA,CAAAf,cAAA,CAAAgB,SAAA,oBAAAC,IAAA,OAAcE,IAAI;IACpB;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAES,SAAAU,cAAA,EAAa;MAAA,IAAAC,MAAA;MACrB,IAAMd,OAAO,GAAG,IAAI,CAACA,OAAsB;MAC3C,IAAAe,cAAA,GAAAC,cAAA,CAAqC,IAAI,CAACC,SAAS;QAA5CC,aAAa,GAAAH,cAAA;QAAEI,WAAW,GAAAJ,cAAA;MACjC,IAAAK,eAAA,GAAAJ,cAAA,CAAqC,IAAI,CAACK,SAAS;QAA5CC,aAAa,GAAAF,eAAA;QAAEG,WAAW,GAAAH,eAAA;MAEjC;MACA,CAAC,OAAO,EAAE,OAAO,CAAC,CAACI,OAAO,CAAC,UAACC,GAAG,EAAI;QACjC,IAAMC,QAAQ,GAAGZ,MAAI,CAACW,GAAwB,CAAC;QAC/C,IACEC,QAAQ,KAAKC,QAAQ,IACrB,CAAC,CAAC,eAAe,EAAE,cAAc,EAAE,cAAc,CAAC,CAACC,QAAQ,CAAC5B,OAAO,CAAC,EACpE;UACA,MAAM,IAAI6B,KAAK,sHACwG,CACtH;;QAEH,IAAIH,QAAQ,KAAKC,QAAQ,IAAIF,GAAG,KAAK,OAAO,EAAE;UAC5C,MAAM,IAAII,KAAK,iBAAAC,MAAA,CACGvC,QAAQ,CACtBuB,MAAI,CAACiB,SAAS,CACf,4DAAAD,MAAA,CACChB,MAAI,CAACiB,SACP,CAAE,CACH;;MAEL,CAAC,CAAC;MAEF,IAAMC,iBAAiB,GACrB,IAAI,CAACjC,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC6B,QAAQ,CAAC5B,OAAO,CAAC;MAE3D,IAAMiC,OAAO,GAAsB;QACjCC,OAAO,EAAE,CAAC,CAAC;QACXC,SAAS,EAAE,CAAC,CAAC;QACbC,SAAS,EAAE,CAAC,CAAC;QACb;QACAC,IAAI,EAAE,IAAI,CAACC,KAAK,KAAKX,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACW,KAAK;QAC/ChD,IAAI,EAAE0C,iBAAiB,GAAG,IAAI,CAACO,KAAK,GAAG,CAAC;QACxC;QACAC,QAAQ,EAAE;UACRC,KAAK,EAAEvB,aAAa,KAAKS,QAAQ,GAAG,IAAI,CAACW,KAAK,GAAGpB,aAAa;UAC9DwB,GAAG,EAAEvB,WAAW,KAAKQ,QAAQ,GAAG,IAAI,CAACW,KAAK,GAAGnB;SAC9C;QACDwB,QAAQ,EAAEX,iBAAiB,GACvB;UACES,KAAK,EAAEnB,aAAa,KAAKK,QAAQ,GAAG,IAAI,CAACY,KAAK,GAAGjB,aAAa;UAC9DoB,GAAG,EAAEnB,WAAW,KAAKI,QAAQ,GAAG,IAAI,CAACY,KAAK,GAAGhB;SAC9C,GACD;UACEkB,KAAK,EAAE,CAAC;UACRC,GAAG,EAAE;SACN;QACLE,SAAS,EAAE;OACZ;MAED;MACA,IAAMC,cAAc,GAClB,IAAI,CAACC,SAAS,GAAGb,OAAO,CAACU,QAAQ,CAACF,KAAK,GAAGR,OAAO,CAACU,QAAQ,CAACD,GAAG;MAChE,IAAIG,cAAc,IAAI,CAAC,EAAE;QACvB;QACAZ,OAAO,CAACC,OAAO,GAAG,CAAC;OACpB,MAAM;QACL;QACA,IAAMa,OAAO,GAAGf,iBAAiB,GAAGC,OAAO,CAAC3C,IAAI,GAAG,CAAC;QACpD,IAAI4C,OAAO,GAAG,CAAC;QACf,IAAIc,UAAU,GAAG,CAAC;QAClB,IAAIH,cAAc,IAAI,IAAI,CAACI,WAAW,EAAE;UACtCf,OAAO,GACLgB,IAAI,CAACC,KAAK,CACR,CAACN,cAAc,GAAG,IAAI,CAACI,WAAW,KAAK,IAAI,CAACA,WAAW,GAAGF,OAAO,CAAC,CACnE,GAAG,CAAC;UACPC,UAAU,GAAGd,OAAO,GAAG,IAAI,CAACe,WAAW,GAAG,CAACf,OAAO,GAAG,CAAC,IAAIa,OAAO;;QAEnE;QACA;QACA,IAAI,IAAI,CAAChD,IAAI,EAAE;UACb;UACA,IACE,CAAC8C,cAAc,GAAGG,UAAU,KAAK,IAAI,CAACC,WAAW,GAAGF,OAAO,CAAC,IAC5D,GAAG,EACH;YACAb,OAAO,GAAGA,OAAO,GAAG,CAAC;;UAEvBD,OAAO,CAACC,OAAO,GAAGA,OAAO;UACzB;UACAD,OAAO,CAACG,SAAS,GAAGc,IAAI,CAACE,KAAK,CAC5B,CAACP,cAAc,GAAGE,OAAO,IAAIb,OAAO,GAAG,CAAC,CAAC,IAAIA,OAAO,CACrD;UACD;UACA,IAAMmB,QAAQ,GAAG,IAAI,CAACtD,IAAI,KAAK,IAAI,GAAG,MAAM,GAAG,IAAI,CAACA,IAAI,CAACsD,QAAQ;UACjE,QAAQA,QAAQ;YACd,KAAK,cAAc;cACjBpB,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAC3B,IAAI,CAACE,WAAW,GAAG,IAAI,CAACL,WAAW,GAAIhB,OAAO,CAACG,SAAS,CAC1D;cACD;YACF,KAAK5C,IAAI,CAAC,IAAI,CAACuC,SAAS,CAAC;cACvBE,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAAC,IAAI,CAACE,WAAW,CAAC;cAChD;YACF,KAAK,MAAM;YACX;cACErB,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAC3B,IAAI,CAACE,WAAW,GAAG,IAAI,CAACL,WAAW,GAAIhB,OAAO,CAACG,SAAS,CAC1D;;SAEN,MAAM;UACL;UACAH,OAAO,CAACE,SAAS,GAAG,IAAI,CAACmB,WAAW;UACpCrB,OAAO,CAACG,SAAS,GAAG,IAAI,CAACa,WAAW;UACpChB,OAAO,CAACC,OAAO,GAAGA,OAAO;;QAE3B;QACA,IAAIqB,GAAW;QACf,IAAIvB,iBAAiB,EAAE;UACrB,IAAMgB,WAAU,GACdf,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACG,SAAS,GACnC,CAACH,OAAO,CAACC,OAAO,GAAG,CAAC,IAAID,OAAO,CAAC3C,IAAI;UACtCiE,GAAG,GACD,IAAI,CAACxD,IAAI,IAAIC,OAAO,KAAK,OAAO,GAC5BiC,OAAO,CAACU,QAAQ,CAACF,KAAK,GACtBzC,OAAO,KAAK,KAAK,GACjB,IAAI,CAAC8C,SAAS,GAAGb,OAAO,CAACU,QAAQ,CAACD,GAAG,GAAGM,WAAU,GAClDE,IAAI,CAACE,KAAK,CAAC,IAAI,CAACN,SAAS,GAAG,CAAC,GAAGE,WAAU,GAAG,CAAC,CAAC;SACtD,MAAM;UACL,IAAMQ,aAAa,GACjBX,cAAc,GAAGZ,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACG,SAAS;UACtD,IAAIpC,OAAO,KAAK,eAAe,EAAE;YAC/BiC,OAAO,CAAC3C,IAAI,GAAG4D,IAAI,CAACE,KAAK,CAACI,aAAa,IAAIvB,OAAO,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC;YAChEqB,GAAG,GAAG,CAAC;WACR,MAAM,IAAIvD,OAAO,KAAK,cAAc,EAAE;YACrCiC,OAAO,CAAC3C,IAAI,GAAG4D,IAAI,CAACE,KAAK,CAACI,aAAa,GAAGvB,OAAO,CAACC,OAAO,CAAC;YAC1DqB,GAAG,GAAGL,IAAI,CAACE,KAAK,CAACnB,OAAO,CAAC3C,IAAI,GAAG,CAAC,CAAC;WACnC,MAAM;YACL;YACA2C,OAAO,CAAC3C,IAAI,GAAG4D,IAAI,CAACE,KAAK,CAACI,aAAa,IAAIvB,OAAO,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC;YAChEqB,GAAG,GAAGtB,OAAO,CAAC3C,IAAI;;UAEpB;UACA;UACA,IAAI,IAAI,CAACgD,KAAK,KAAKX,QAAQ,EAAE;YAC3BM,OAAO,CAACI,IAAI,GAAGJ,OAAO,CAAC3C,IAAI;YAC3B,IAAI4B,aAAa,KAAKS,QAAQ,EAAE;cAC9BM,OAAO,CAACO,QAAQ,CAACC,KAAK,GAAGc,GAAG;;YAE9B,IAAIpC,WAAW,KAAKQ,QAAQ,EAAE;cAC5BM,OAAO,CAACO,QAAQ,CAACE,GAAG,GAAGa,GAAG;;;;QAIhC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,OAAO,CAACC,OAAO,EAAEuB,CAAC,EAAE,EAAE;UACxCxB,OAAO,CAACW,SAAS,CAACc,IAAI,CAACH,GAAG,CAAC;UAC3BA,GAAG,IAAItB,OAAO,CAACG,SAAS,GAAGH,OAAO,CAAC3C,IAAI;;;MAI3C,IAAI,CAACQ,QAAQ,GAAGmC,OAAO;IACzB;EAAC;EAAA,OAAAxC,cAAA;AAAA,EA3KOJ,wBAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}