{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nvar ArraySelectorMixin = dedupingMixin(function (superClass) {\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  var elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  var ArraySelectorMixin = /*#__PURE__*/function (_elementBase) {\n    _inherits(ArraySelectorMixin, _elementBase);\n    function ArraySelectorMixin() {\n      var _this;\n      _classCallCheck(this, ArraySelectorMixin);\n      _this = _callSuper(this, ArraySelectorMixin);\n      _this.__lastItems = null;\n      _this.__lastMulti = null;\n      _this.__selectedMap = null;\n      return _this;\n    }\n    _createClass(ArraySelectorMixin, [{\n      key: \"__updateSelection\",\n      value: function __updateSelection(multi, itemsInfo) {\n        var path = itemsInfo.path;\n        if (path == JSCompiler_renameProperty('items', this)) {\n          // Case 1 - items array changed, so diff against previous array and\n          // deselect any removed items and adjust selected indices\n          var newItems = itemsInfo.base || [];\n          var lastItems = this.__lastItems;\n          var lastMulti = this.__lastMulti;\n          if (multi !== lastMulti) {\n            this.clearSelection();\n          }\n          if (lastItems) {\n            var splices = calculateSplices(newItems, lastItems);\n            this.__applySplices(splices);\n          }\n          this.__lastItems = newItems;\n          this.__lastMulti = multi;\n        } else if (itemsInfo.path == \"\".concat(JSCompiler_renameProperty('items', this), \".splices\")) {\n          // Case 2 - got specific splice information describing the array mutation:\n          // deselect any removed items and adjust selected indices\n          this.__applySplices(itemsInfo.value.indexSplices);\n        } else {\n          // Case 3 - an array element was changed, so deselect the previous\n          // item for that index if it was previously selected\n          var part = path.slice(\"\".concat(JSCompiler_renameProperty('items', this), \".\").length);\n          var idx = parseInt(part, 10);\n          if (part.indexOf('.') < 0 && part == idx) {\n            this.__deselectChangedIdx(idx);\n          }\n        }\n      }\n    }, {\n      key: \"__applySplices\",\n      value: function __applySplices(splices) {\n        var _this2 = this;\n        var selected = this.__selectedMap;\n        // Adjust selected indices and mark removals\n        var _loop = function _loop() {\n          var s = splices[i];\n          selected.forEach(function (idx, item) {\n            if (idx < s.index) {\n              // no change\n            } else if (idx >= s.index + s.removed.length) {\n              // adjust index\n              selected.set(item, idx + s.addedCount - s.removed.length);\n            } else {\n              // remove index\n              selected.set(item, -1);\n            }\n          });\n          for (var j = 0; j < s.addedCount; j++) {\n            var idx = s.index + j;\n            if (selected.has(_this2.items[idx])) {\n              selected.set(_this2.items[idx], idx);\n            }\n          }\n        };\n        for (var i = 0; i < splices.length; i++) {\n          _loop();\n        }\n        // Update linked paths\n        this.__updateLinks();\n        // Remove selected items that were removed from the items array\n        var sidx = 0;\n        selected.forEach(function (idx, item) {\n          if (idx < 0) {\n            if (_this2.multi) {\n              _this2.splice(JSCompiler_renameProperty('selected', _this2), sidx, 1);\n            } else {\n              _this2.selected = _this2.selectedItem = null;\n            }\n            selected.delete(item);\n          } else {\n            sidx++;\n          }\n        });\n      }\n    }, {\n      key: \"__updateLinks\",\n      value: function __updateLinks() {\n        var _this3 = this;\n        this.__dataLinkedPaths = {};\n        if (this.multi) {\n          var sidx = 0;\n          this.__selectedMap.forEach(function (idx) {\n            if (idx >= 0) {\n              _this3.linkPaths(\"\".concat(JSCompiler_renameProperty('items', _this3), \".\").concat(idx), \"\".concat(JSCompiler_renameProperty('selected', _this3), \".\").concat(sidx++));\n            }\n          });\n        } else {\n          this.__selectedMap.forEach(function (idx) {\n            _this3.linkPaths(JSCompiler_renameProperty('selected', _this3), \"\".concat(JSCompiler_renameProperty('items', _this3), \".\").concat(idx));\n            _this3.linkPaths(JSCompiler_renameProperty('selectedItem', _this3), \"\".concat(JSCompiler_renameProperty('items', _this3), \".\").concat(idx));\n          });\n        }\n      }\n\n      /**\n       * Clears the selection state.\n       * @override\n       * @return {void}\n       */\n    }, {\n      key: \"clearSelection\",\n      value: function clearSelection() {\n        // Unbind previous selection\n        this.__dataLinkedPaths = {};\n        // The selected map stores 3 pieces of information:\n        // key: items array object\n        // value: items array index\n        // order: selected array index\n        this.__selectedMap = new Map();\n        // Initialize selection\n        this.selected = this.multi ? [] : null;\n        this.selectedItem = null;\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @override\n       * @param {*} item Item from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n    }, {\n      key: \"isSelected\",\n      value: function isSelected(item) {\n        return this.__selectedMap.has(item);\n      }\n\n      /**\n       * Returns whether the item is currently selected.\n       *\n       * @override\n       * @param {number} idx Index from `items` array to test\n       * @return {boolean} Whether the item is selected\n       */\n    }, {\n      key: \"isIndexSelected\",\n      value: function isIndexSelected(idx) {\n        return this.isSelected(this.items[idx]);\n      }\n    }, {\n      key: \"__deselectChangedIdx\",\n      value: function __deselectChangedIdx(idx) {\n        var _this4 = this;\n        var sidx = this.__selectedIndexForItemIndex(idx);\n        if (sidx >= 0) {\n          var i = 0;\n          this.__selectedMap.forEach(function (idx, item) {\n            if (sidx == i++) {\n              _this4.deselect(item);\n            }\n          });\n        }\n      }\n    }, {\n      key: \"__selectedIndexForItemIndex\",\n      value: function __selectedIndexForItemIndex(idx) {\n        var selected = this.__dataLinkedPaths[\"\".concat(JSCompiler_renameProperty('items', this), \".\").concat(idx)];\n        if (selected) {\n          return parseInt(selected.slice(\"\".concat(JSCompiler_renameProperty('selected', this), \".\").length), 10);\n        }\n      }\n\n      /**\n       * Deselects the given item if it is already selected.\n       *\n       * @override\n       * @param {*} item Item from `items` array to deselect\n       * @return {void}\n       */\n    }, {\n      key: \"deselect\",\n      value: function deselect(item) {\n        var idx = this.__selectedMap.get(item);\n        if (idx >= 0) {\n          this.__selectedMap.delete(item);\n          var sidx;\n          if (this.multi) {\n            sidx = this.__selectedIndexForItemIndex(idx);\n          }\n          this.__updateLinks();\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n        }\n      }\n\n      /**\n       * Deselects the given index if it is already selected.\n       *\n       * @override\n       * @param {number} idx Index from `items` array to deselect\n       * @return {void}\n       */\n    }, {\n      key: \"deselectIndex\",\n      value: function deselectIndex(idx) {\n        this.deselect(this.items[idx]);\n      }\n\n      /**\n       * Selects the given item.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @override\n       * @param {*} item Item from `items` array to select\n       * @return {void}\n       */\n    }, {\n      key: \"select\",\n      value: function select(item) {\n        this.selectIndex(this.items.indexOf(item));\n      }\n\n      /**\n       * Selects the given index.  When `toggle` is true, this will automatically\n       * deselect the item if already selected.\n       *\n       * @override\n       * @param {number} idx Index from `items` array to select\n       * @return {void}\n       */\n    }, {\n      key: \"selectIndex\",\n      value: function selectIndex(idx) {\n        var item = this.items[idx];\n        if (!this.isSelected(item)) {\n          if (!this.multi) {\n            this.__selectedMap.clear();\n          }\n          this.__selectedMap.set(item, idx);\n          this.__updateLinks();\n          if (this.multi) {\n            this.push(JSCompiler_renameProperty('selected', this), item);\n          } else {\n            this.selected = this.selectedItem = item;\n          }\n        } else if (this.toggle) {\n          this.deselectIndex(idx);\n        }\n      }\n    }], [{\n      key: \"properties\",\n      get: function get() {\n        return {\n          /**\n           * An array containing items from which selection will be made.\n           */\n          items: {\n            type: Array\n          },\n          /**\n           * When `true`, multiple items may be selected at once (in this case,\n           * `selected` is an array of currently selected items).  When `false`,\n           * only one item may be selected at a time.\n           */\n          multi: {\n            type: Boolean,\n            value: false\n          },\n          /**\n           * When `multi` is true, this is an array that contains any selected.\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           * @type {?Object|?Array<!Object>}\n           */\n          selected: {\n            type: Object,\n            notify: true\n          },\n          /**\n           * When `multi` is false, this is the currently selected item, or `null`\n           * if no item is selected.\n           * @type {?Object}\n           */\n          selectedItem: {\n            type: Object,\n            notify: true\n          },\n          /**\n           * When `true`, calling `select` on an item that is already selected\n           * will deselect the item.\n           */\n          toggle: {\n            type: Boolean,\n            value: false\n          }\n        };\n      }\n    }, {\n      key: \"observers\",\n      get: function get() {\n        return ['__updateSelection(multi, items.*)'];\n      }\n    }]);\n    return ArraySelectorMixin;\n  }(elementBase);\n  return ArraySelectorMixin;\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nvar baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nvar ArraySelector = /*#__PURE__*/function (_baseArraySelector) {\n  _inherits(ArraySelector, _baseArraySelector);\n  function ArraySelector() {\n    _classCallCheck(this, ArraySelector);\n    return _callSuper(this, ArraySelector, arguments);\n  }\n  _createClass(ArraySelector, null, [{\n    key: \"is\",\n    get:\n    // Not needed to find template; can be removed once the analyzer\n    // can find the tag name from customElements.define call\n    function get() {\n      return 'array-selector';\n    }\n  }, {\n    key: \"template\",\n    get: function get() {\n      return null;\n    }\n  }]);\n  return ArraySelector;\n}(baseArraySelector);\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };","map":{"version":3,"names":["PolymerElement","dedupingMixin","calculateSplices","ElementMixin","ArraySelectorMixin","superClass","elementBase","_elementBase","_inherits","_this","_classCallCheck","_callSuper","__lastItems","__lastMulti","__selectedMap","_createClass","key","value","__updateSelection","multi","itemsInfo","path","JSCompiler_renameProperty","newItems","base","lastItems","lastMulti","clearSelection","splices","__applySplices","concat","indexSplices","part","slice","length","idx","parseInt","indexOf","__deselectChangedIdx","_this2","selected","_loop","s","i","forEach","item","index","removed","set","addedCount","j","has","items","__updateLinks","sidx","splice","selectedItem","delete","_this3","__dataLinkedPaths","linkPaths","Map","isSelected","isIndexSelected","_this4","__selectedIndexForItemIndex","deselect","get","deselectIndex","select","selectIndex","clear","push","toggle","type","Array","Boolean","Object","notify","baseArraySelector","ArraySelector","_baseArraySelector","arguments","customElements","define","is"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/elements/array-selector.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { calculateSplices } from '../utils/array-splice.js';\nimport { ElementMixin } from '../mixins/element-mixin.js';\n\n/**\n * Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array such that path changes to the\n * master array (at the host) element or elsewhere via data-binding) are\n * correctly propagated to items in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * @polymer\n * @mixinFunction\n * @appliesMixin ElementMixin\n * @summary Element mixin for recording dynamic associations between item paths in a\n * master `items` array and a `selected` array\n */\nlet ArraySelectorMixin = dedupingMixin(superClass => {\n\n  /**\n   * @constructor\n   * @implements {Polymer_ElementMixin}\n   * @private\n   */\n  let elementBase = ElementMixin(superClass);\n\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_ArraySelectorMixin}\n   * @unrestricted\n   */\n  class ArraySelectorMixin extends elementBase {\n\n    static get properties() {\n      return {\n\n        /**\n         * An array containing items from which selection will be made.\n         */\n        items: {\n          type: Array,\n        },\n\n        /**\n         * When `true`, multiple items may be selected at once (in this case,\n         * `selected` is an array of currently selected items).  When `false`,\n         * only one item may be selected at a time.\n         */\n        multi: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * When `multi` is true, this is an array that contains any selected.\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object|?Array<!Object>}\n         */\n        selected: {type: Object, notify: true},\n\n        /**\n         * When `multi` is false, this is the currently selected item, or `null`\n         * if no item is selected.\n         * @type {?Object}\n         */\n        selectedItem: {type: Object, notify: true},\n\n        /**\n         * When `true`, calling `select` on an item that is already selected\n         * will deselect the item.\n         */\n        toggle: {type: Boolean, value: false}\n\n      };\n    }\n\n    static get observers() {\n      return ['__updateSelection(multi, items.*)'];\n    }\n\n    constructor() {\n      super();\n      this.__lastItems = null;\n      this.__lastMulti = null;\n      this.__selectedMap = null;\n    }\n\n    __updateSelection(multi, itemsInfo) {\n      let path = itemsInfo.path;\n      if (path == JSCompiler_renameProperty('items', this)) {\n        // Case 1 - items array changed, so diff against previous array and\n        // deselect any removed items and adjust selected indices\n        let newItems = itemsInfo.base || [];\n        let lastItems = this.__lastItems;\n        let lastMulti = this.__lastMulti;\n        if (multi !== lastMulti) {\n          this.clearSelection();\n        }\n        if (lastItems) {\n          let splices = calculateSplices(newItems, lastItems);\n          this.__applySplices(splices);\n        }\n        this.__lastItems = newItems;\n        this.__lastMulti = multi;\n      } else if (itemsInfo.path == `${JSCompiler_renameProperty('items', this)}.splices`) {\n        // Case 2 - got specific splice information describing the array mutation:\n        // deselect any removed items and adjust selected indices\n        this.__applySplices(itemsInfo.value.indexSplices);\n      } else {\n        // Case 3 - an array element was changed, so deselect the previous\n        // item for that index if it was previously selected\n        let part = path.slice(`${JSCompiler_renameProperty('items', this)}.`.length);\n        let idx = parseInt(part, 10);\n        if ((part.indexOf('.') < 0) && part == idx) {\n          this.__deselectChangedIdx(idx);\n        }\n      }\n    }\n\n    __applySplices(splices) {\n      let selected = this.__selectedMap;\n      // Adjust selected indices and mark removals\n      for (let i=0; i<splices.length; i++) {\n        let s = splices[i];\n        selected.forEach((idx, item) => {\n          if (idx < s.index) {\n            // no change\n          } else if (idx >= s.index + s.removed.length) {\n            // adjust index\n            selected.set(item, idx + s.addedCount - s.removed.length);\n          } else {\n            // remove index\n            selected.set(item, -1);\n          }\n        });\n        for (let j=0; j<s.addedCount; j++) {\n          let idx = s.index + j;\n          if (selected.has(this.items[idx])) {\n            selected.set(this.items[idx], idx);\n          }\n        }\n      }\n      // Update linked paths\n      this.__updateLinks();\n      // Remove selected items that were removed from the items array\n      let sidx = 0;\n      selected.forEach((idx, item) => {\n        if (idx < 0) {\n          if (this.multi) {\n            this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n          } else {\n            this.selected = this.selectedItem = null;\n          }\n          selected.delete(item);\n        } else {\n          sidx++;\n        }\n      });\n    }\n\n    __updateLinks() {\n      this.__dataLinkedPaths = {};\n      if (this.multi) {\n        let sidx = 0;\n        this.__selectedMap.forEach(idx => {\n          if (idx >= 0) {\n            this.linkPaths(\n                `${JSCompiler_renameProperty('items', this)}.${idx}`,\n                `${JSCompiler_renameProperty('selected', this)}.${sidx++}`);\n          }\n        });\n      } else {\n        this.__selectedMap.forEach(idx => {\n          this.linkPaths(\n              JSCompiler_renameProperty('selected', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n          this.linkPaths(\n              JSCompiler_renameProperty('selectedItem', this),\n              `${JSCompiler_renameProperty('items', this)}.${idx}`);\n        });\n      }\n    }\n\n    /**\n     * Clears the selection state.\n     * @override\n     * @return {void}\n     */\n    clearSelection() {\n      // Unbind previous selection\n      this.__dataLinkedPaths = {};\n      // The selected map stores 3 pieces of information:\n      // key: items array object\n      // value: items array index\n      // order: selected array index\n      this.__selectedMap = new Map();\n      // Initialize selection\n      this.selected = this.multi ? [] : null;\n      this.selectedItem = null;\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected(item) {\n      return this.__selectedMap.has(item);\n    }\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isIndexSelected(idx) {\n      return this.isSelected(this.items[idx]);\n    }\n\n    __deselectChangedIdx(idx) {\n      let sidx = this.__selectedIndexForItemIndex(idx);\n      if (sidx >= 0) {\n        let i = 0;\n        this.__selectedMap.forEach((idx, item) => {\n          if (sidx == i++) {\n            this.deselect(item);\n          }\n        });\n      }\n    }\n\n    __selectedIndexForItemIndex(idx) {\n      let selected = this.__dataLinkedPaths[`${JSCompiler_renameProperty('items', this)}.${idx}`];\n      if (selected) {\n        return parseInt(selected.slice(`${JSCompiler_renameProperty('selected', this)}.`.length), 10);\n      }\n    }\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to deselect\n     * @return {void}\n     */\n    deselect(item) {\n      let idx = this.__selectedMap.get(item);\n      if (idx >= 0) {\n        this.__selectedMap.delete(item);\n        let sidx;\n        if (this.multi) {\n          sidx = this.__selectedIndexForItemIndex(idx);\n        }\n        this.__updateLinks();\n        if (this.multi) {\n          this.splice(JSCompiler_renameProperty('selected', this), sidx, 1);\n        } else {\n          this.selected = this.selectedItem = null;\n        }\n      }\n    }\n\n    /**\n     * Deselects the given index if it is already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to deselect\n     * @return {void}\n     */\n    deselectIndex(idx) {\n      this.deselect(this.items[idx]);\n    }\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {*} item Item from `items` array to select\n     * @return {void}\n     */\n    select(item) {\n      this.selectIndex(this.items.indexOf(item));\n    }\n\n    /**\n     * Selects the given index.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @override\n     * @param {number} idx Index from `items` array to select\n     * @return {void}\n     */\n    selectIndex(idx) {\n      let item = this.items[idx];\n      if (!this.isSelected(item)) {\n        if (!this.multi) {\n          this.__selectedMap.clear();\n        }\n        this.__selectedMap.set(item, idx);\n        this.__updateLinks();\n        if (this.multi) {\n          this.push(JSCompiler_renameProperty('selected', this), item);\n        } else {\n          this.selected = this.selectedItem = item;\n        }\n      } else if (this.toggle) {\n        this.deselectIndex(idx);\n      }\n    }\n\n  }\n\n  return ArraySelectorMixin;\n\n});\n\n// export mixin\nexport { ArraySelectorMixin };\n\n/**\n * @constructor\n * @extends {PolymerElement}\n * @implements {Polymer_ArraySelectorMixin}\n * @private\n */\nlet baseArraySelector = ArraySelectorMixin(PolymerElement);\n\n/**\n * Element implementing the `ArraySelector` mixin, which records\n * dynamic associations between item paths in a master `items` array and a\n * `selected` array such that path changes to the master array (at the host)\n * element or elsewhere via data-binding) are correctly propagated to items\n * in the selected array and vice-versa.\n *\n * The `items` property accepts an array of user data, and via the\n * `select(item)` and `deselect(item)` API, updates the `selected` property\n * which may be bound to other parts of the application, and any changes to\n * sub-fields of `selected` item(s) will be kept in sync with items in the\n * `items` array.  When `multi` is false, `selected` is a property\n * representing the last selected item.  When `multi` is true, `selected`\n * is an array of multiply selected items.\n *\n * Example:\n *\n * ```js\n * import {PolymerElement} from '@polymer/polymer';\n * import '@polymer/polymer/lib/elements/array-selector.js';\n *\n * class EmployeeList extends PolymerElement {\n *   static get _template() {\n *     return html`\n *         <div> Employee list: </div>\n *         <dom-repeat id=\"employeeList\" items=\"{{employees}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *               <div>Last name: <span>{{item.last}}</span></div>\n *               <button on-click=\"toggleSelection\">Select</button>\n *           </template>\n *         </dom-repeat>\n *\n *         <array-selector id=\"selector\"\n *                         items=\"{{employees}}\"\n *                         selected=\"{{selected}}\"\n *                         multi toggle></array-selector>\n *\n *         <div> Selected employees: </div>\n *         <dom-repeat items=\"{{selected}}\">\n *           <template>\n *             <div>First name: <span>{{item.first}}</span></div>\n *             <div>Last name: <span>{{item.last}}</span></div>\n *           </template>\n *         </dom-repeat>`;\n *   }\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n *   toggleSelection(e) {\n *     const item = this.$.employeeList.itemForElement(e.target);\n *     this.$.selector.select(item);\n *   }\n * }\n * ```\n *\n * @polymer\n * @customElement\n * @extends {baseArraySelector}\n * @appliesMixin ArraySelectorMixin\n * @summary Custom element that links paths between an input `items` array and\n *   an output `selected` item or array based on calls to its selection API.\n */\nclass ArraySelector extends baseArraySelector {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'array-selector'; }\n  static get template() { return null; }\n}\ncustomElements.define(ArraySelector.is, ArraySelector);\nexport { ArraySelector };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}