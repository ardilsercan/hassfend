{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.trim.js\";\nexport var evaluateFilter = function evaluateFilter(stateObj, filter) {\n  var _filter$value;\n  var operator = filter.operator || \"==\";\n  var value = (_filter$value = filter.value) !== null && _filter$value !== void 0 ? _filter$value : filter;\n  var state = filter.attribute ? stateObj.attributes[filter.attribute] : stateObj.state;\n  if (operator === \"==\" || operator === \"!=\") {\n    var valueIsNumeric = typeof value === \"number\" || typeof value === \"string\" && value.trim() && !isNaN(Number(value));\n    var stateIsNumeric = typeof state === \"number\" || typeof state === \"string\" && state.trim() && !isNaN(Number(state));\n    if (valueIsNumeric && stateIsNumeric) {\n      value = Number(value);\n      state = Number(state);\n    }\n  }\n  switch (operator) {\n    case \"==\":\n      return state === value;\n    case \"<=\":\n      return state <= value;\n    case \"<\":\n      return state < value;\n    case \">=\":\n      return state >= value;\n    case \">\":\n      return state > value;\n    case \"!=\":\n      return state !== value;\n    case \"in\":\n      if (Array.isArray(value) || typeof value === \"string\") {\n        return value.includes(state);\n      }\n      return false;\n    case \"not in\":\n      if (Array.isArray(value) || typeof value === \"string\") {\n        return !value.includes(state);\n      }\n      return false;\n    case \"regex\":\n      {\n        if (state !== null && _typeof(state) === \"object\") {\n          return RegExp(value).test(JSON.stringify(state));\n        }\n        return RegExp(value).test(state);\n      }\n    default:\n      return false;\n  }\n};","map":{"version":3,"names":["evaluateFilter","stateObj","filter","_filter$value","operator","value","state","attribute","attributes","valueIsNumeric","trim","isNaN","Number","stateIsNumeric","Array","isArray","includes","_typeof","RegExp","test","JSON","stringify"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/common/evaluate-filter.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\n\nexport const evaluateFilter = (stateObj: HassEntity, filter: any): boolean => {\n  const operator = filter.operator || \"==\";\n  let value = filter.value ?? filter;\n  let state = filter.attribute\n    ? stateObj.attributes[filter.attribute]\n    : stateObj.state;\n\n  if (operator === \"==\" || operator === \"!=\") {\n    const valueIsNumeric =\n      typeof value === \"number\" ||\n      (typeof value === \"string\" && value.trim() && !isNaN(Number(value)));\n    const stateIsNumeric =\n      typeof state === \"number\" ||\n      (typeof state === \"string\" && state.trim() && !isNaN(Number(state)));\n    if (valueIsNumeric && stateIsNumeric) {\n      value = Number(value);\n      state = Number(state);\n    }\n  }\n\n  switch (operator) {\n    case \"==\":\n      return state === value;\n    case \"<=\":\n      return state <= value;\n    case \"<\":\n      return state < value;\n    case \">=\":\n      return state >= value;\n    case \">\":\n      return state > value;\n    case \"!=\":\n      return state !== value;\n    case \"in\":\n      if (Array.isArray(value) || typeof value === \"string\") {\n        return value.includes(state);\n      }\n      return false;\n    case \"not in\":\n      if (Array.isArray(value) || typeof value === \"string\") {\n        return !value.includes(state);\n      }\n      return false;\n    case \"regex\": {\n      if (state !== null && typeof state === \"object\") {\n        return RegExp(value).test(JSON.stringify(state));\n      }\n      return RegExp(value).test(state);\n    }\n    default:\n      return false;\n  }\n};\n"],"mappings":";;;;;;;;;;;;AAEA,OAAO,IAAMA,cAAc,GAAG,SAAjBA,cAAcA,CAAIC,QAAoB,EAAEC,MAAW,EAAc;EAAA,IAAAC,aAAA;EAC5E,IAAMC,QAAQ,GAAGF,MAAM,CAACE,QAAQ,IAAI,IAAI;EACxC,IAAIC,KAAK,IAAAF,aAAA,GAAGD,MAAM,CAACG,KAAK,cAAAF,aAAA,cAAAA,aAAA,GAAID,MAAM;EAClC,IAAII,KAAK,GAAGJ,MAAM,CAACK,SAAS,GACxBN,QAAQ,CAACO,UAAU,CAACN,MAAM,CAACK,SAAS,CAAC,GACrCN,QAAQ,CAACK,KAAK;EAElB,IAAIF,QAAQ,KAAK,IAAI,IAAIA,QAAQ,KAAK,IAAI,EAAE;IAC1C,IAAMK,cAAc,GAClB,OAAOJ,KAAK,KAAK,QAAQ,IACxB,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACK,IAAI,CAAC,CAAC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACP,KAAK,CAAC,CAAE;IACtE,IAAMQ,cAAc,GAClB,OAAOP,KAAK,KAAK,QAAQ,IACxB,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACI,IAAI,CAAC,CAAC,IAAI,CAACC,KAAK,CAACC,MAAM,CAACN,KAAK,CAAC,CAAE;IACtE,IAAIG,cAAc,IAAII,cAAc,EAAE;MACpCR,KAAK,GAAGO,MAAM,CAACP,KAAK,CAAC;MACrBC,KAAK,GAAGM,MAAM,CAACN,KAAK,CAAC;IACvB;EACF;EAEA,QAAQF,QAAQ;IACd,KAAK,IAAI;MACP,OAAOE,KAAK,KAAKD,KAAK;IACxB,KAAK,IAAI;MACP,OAAOC,KAAK,IAAID,KAAK;IACvB,KAAK,GAAG;MACN,OAAOC,KAAK,GAAGD,KAAK;IACtB,KAAK,IAAI;MACP,OAAOC,KAAK,IAAID,KAAK;IACvB,KAAK,GAAG;MACN,OAAOC,KAAK,GAAGD,KAAK;IACtB,KAAK,IAAI;MACP,OAAOC,KAAK,KAAKD,KAAK;IACxB,KAAK,IAAI;MACP,IAAIS,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACrD,OAAOA,KAAK,CAACW,QAAQ,CAACV,KAAK,CAAC;MAC9B;MACA,OAAO,KAAK;IACd,KAAK,QAAQ;MACX,IAAIQ,KAAK,CAACC,OAAO,CAACV,KAAK,CAAC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QACrD,OAAO,CAACA,KAAK,CAACW,QAAQ,CAACV,KAAK,CAAC;MAC/B;MACA,OAAO,KAAK;IACd,KAAK,OAAO;MAAE;QACZ,IAAIA,KAAK,KAAK,IAAI,IAAIW,OAAA,CAAOX,KAAK,MAAK,QAAQ,EAAE;UAC/C,OAAOY,MAAM,CAACb,KAAK,CAAC,CAACc,IAAI,CAACC,IAAI,CAACC,SAAS,CAACf,KAAK,CAAC,CAAC;QAClD;QACA,OAAOY,MAAM,CAACb,KAAK,CAAC,CAACc,IAAI,CAACb,KAAK,CAAC;MAClC;IACA;MACE,OAAO,KAAK;EAChB;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}