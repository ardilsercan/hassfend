{"ast":null,"code":"import { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../common/entity/state_icon\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\nconst resources = {\n  entity: {},\n  entity_component: {},\n  services: {\n    domains: {}\n  }\n};\nexport const getHassIcons = async (hass, category, integration) => hass.callWS({\n  type: \"frontend/get_icons\",\n  category,\n  integration\n});\nexport const getPlatformIcons = async (hass, integration, force = false) => {\n  if (!force && integration in resources.entity) {\n    return resources.entity[integration];\n  }\n  if (!isComponentLoaded(hass, integration)) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"entity\", integration).then(res => res === null || res === void 0 ? void 0 : res.resources[integration]);\n  resources.entity[integration] = result;\n  return resources.entity[integration];\n};\nexport const getComponentIcons = async (hass, domain, force = false) => {\n  var _resources$entity_com;\n  if (!force && resources.entity_component.resources && (_resources$entity_com = resources.entity_component.domains) !== null && _resources$entity_com !== void 0 && _resources$entity_com.includes(domain)) {\n    return resources.entity_component.resources.then(res => res[domain]);\n  }\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  resources.entity_component.domains = [...hass.config.components];\n  resources.entity_component.resources = getHassIcons(hass, \"entity_component\").then(result => result.resources);\n  return resources.entity_component.resources.then(res => res[domain]);\n};\nexport const getServiceIcons = async (hass, domain, force = false) => {\n  if (!domain) {\n    if (!force && resources.services.all) {\n      return resources.services.all;\n    }\n    resources.services.all = getHassIcons(hass, \"services\", domain).then(res => {\n      resources.services.domains = res.resources;\n      return res === null || res === void 0 ? void 0 : res.resources;\n    });\n    return resources.services.all;\n  }\n  if (!force && domain in resources.services.domains) {\n    return resources.services.domains[domain];\n  }\n  if (resources.services.all && !force) {\n    await resources.services.all;\n    if (domain in resources.services.domains) {\n      return resources.services.domains[domain];\n    }\n  }\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"services\", domain);\n  resources.services.domains[domain] = result.then(res => res === null || res === void 0 ? void 0 : res.resources[domain]);\n  return resources.services.domains[domain];\n};\nexport const entityIcon = async (hass, stateObj, state) => {\n  var _hass$entities;\n  const entry = (_hass$entities = hass.entities) === null || _hass$entities === void 0 ? void 0 : _hass$entities[stateObj.entity_id];\n  if (entry !== null && entry !== void 0 && entry.icon) {\n    return entry.icon;\n  }\n  const domain = computeStateDomain(stateObj);\n  return getEntityIcon(hass, domain, stateObj, state, entry);\n};\nexport const entryIcon = async (hass, entry) => {\n  if (entry.icon) {\n    return entry.icon;\n  }\n  const domain = computeDomain(entry.entity_id);\n  return getEntityIcon(hass, domain, undefined, undefined, entry);\n};\nconst getEntityIcon = async (hass, domain, stateObj, stateValue, entry) => {\n  const platform = entry === null || entry === void 0 ? void 0 : entry.platform;\n  const translation_key = entry === null || entry === void 0 ? void 0 : entry.translation_key;\n  const device_class = stateObj === null || stateObj === void 0 ? void 0 : stateObj.attributes.device_class;\n  const state = stateValue !== null && stateValue !== void 0 ? stateValue : stateObj === null || stateObj === void 0 ? void 0 : stateObj.state;\n  let icon;\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      var _platformIcons$domain, _translations$state;\n      const translations = (_platformIcons$domain = platformIcons[domain]) === null || _platformIcons$domain === void 0 ? void 0 : _platformIcons$domain[translation_key];\n      icon = state && (translations === null || translations === void 0 || (_translations$state = translations.state) === null || _translations$state === void 0 ? void 0 : _translations$state[state]) || (translations === null || translations === void 0 ? void 0 : translations.default);\n    }\n  }\n  if (!icon && stateObj) {\n    icon = stateIcon(stateObj, state);\n  }\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      var _translations$state2;\n      const translations = device_class && entityComponentIcons[device_class] || entityComponentIcons._;\n      icon = state && (translations === null || translations === void 0 || (_translations$state2 = translations.state) === null || _translations$state2 === void 0 ? void 0 : _translations$state2[state]) || (translations === null || translations === void 0 ? void 0 : translations.default);\n    }\n  }\n  return icon;\n};\nexport const attributeIcon = async (hass, state, attribute, attributeValue) => {\n  var _hass$entities2;\n  let icon;\n  const domain = computeStateDomain(state);\n  const deviceClass = state.attributes.device_class;\n  const entity = (_hass$entities2 = hass.entities) === null || _hass$entities2 === void 0 ? void 0 : _hass$entities2[state.entity_id];\n  const platform = entity === null || entity === void 0 ? void 0 : entity.platform;\n  const translation_key = entity === null || entity === void 0 ? void 0 : entity.translation_key;\n  const value = attributeValue !== null && attributeValue !== void 0 ? attributeValue : state.attributes[attribute];\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      var _platformIcons$domain2, _translations$state3;\n      const translations = (_platformIcons$domain2 = platformIcons[domain]) === null || _platformIcons$domain2 === void 0 || (_platformIcons$domain2 = _platformIcons$domain2[translation_key]) === null || _platformIcons$domain2 === void 0 || (_platformIcons$domain2 = _platformIcons$domain2.state_attributes) === null || _platformIcons$domain2 === void 0 ? void 0 : _platformIcons$domain2[attribute];\n      icon = value && (translations === null || translations === void 0 || (_translations$state3 = translations.state) === null || _translations$state3 === void 0 ? void 0 : _translations$state3[value]) || (translations === null || translations === void 0 ? void 0 : translations.default);\n    }\n  }\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      var _entityComponentIcons, _entityComponentIcons2, _translations$state4;\n      const translations = deviceClass && ((_entityComponentIcons = entityComponentIcons[deviceClass]) === null || _entityComponentIcons === void 0 || (_entityComponentIcons = _entityComponentIcons.state_attributes) === null || _entityComponentIcons === void 0 ? void 0 : _entityComponentIcons[attribute]) || ((_entityComponentIcons2 = entityComponentIcons._) === null || _entityComponentIcons2 === void 0 || (_entityComponentIcons2 = _entityComponentIcons2.state_attributes) === null || _entityComponentIcons2 === void 0 ? void 0 : _entityComponentIcons2[attribute]);\n      icon = value && (translations === null || translations === void 0 || (_translations$state4 = translations.state) === null || _translations$state4 === void 0 ? void 0 : _translations$state4[value]) || (translations === null || translations === void 0 ? void 0 : translations.default);\n    }\n  }\n  return icon;\n};\nexport const serviceIcon = async (hass, service) => {\n  let icon;\n  const domain = computeDomain(service);\n  const serviceName = computeObjectId(service);\n  const serviceIcons = await getServiceIcons(hass, domain);\n  if (serviceIcons) {\n    icon = serviceIcons[serviceName];\n  }\n  if (!icon) {\n    icon = await domainIcon(hass, domain);\n  }\n  return icon;\n};\nexport const domainIcon = async (hass, domain, deviceClass) => {\n  const entityComponentIcons = await getComponentIcons(hass, domain);\n  if (entityComponentIcons) {\n    const translations = deviceClass && entityComponentIcons[deviceClass] || entityComponentIcons._;\n    return translations === null || translations === void 0 ? void 0 : translations.default;\n  }\n  return undefined;\n};","map":{"version":3,"names":["computeDomain","computeObjectId","computeStateDomain","stateIcon","isComponentLoaded","resources","entity","entity_component","services","domains","getHassIcons","hass","category","integration","callWS","type","getPlatformIcons","force","undefined","result","then","res","getComponentIcons","domain","_resources$entity_com","includes","config","components","getServiceIcons","all","entityIcon","stateObj","state","_hass$entities","entry","entities","entity_id","icon","getEntityIcon","entryIcon","stateValue","platform","translation_key","device_class","attributes","platformIcons","_platformIcons$domain","_translations$state","translations","default","entityComponentIcons","_translations$state2","_","attributeIcon","attribute","attributeValue","_hass$entities2","deviceClass","value","_platformIcons$domain2","_translations$state3","state_attributes","_entityComponentIcons","_entityComponentIcons2","_translations$state4","serviceIcon","service","serviceName","serviceIcons","domainIcon"],"sources":["/workspaces/frontend/src/data/icons.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeObjectId } from \"../common/entity/compute_object_id\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { stateIcon } from \"../common/entity/state_icon\";\nimport { HomeAssistant } from \"../types\";\nimport {\n  EntityRegistryDisplayEntry,\n  EntityRegistryEntry,\n} from \"./entity_registry\";\nimport { isComponentLoaded } from \"../common/config/is_component_loaded\";\n\nconst resources: {\n  entity: Record<string, Promise<PlatformIcons>>;\n  entity_component: {\n    domains?: string[];\n    resources?: Promise<Record<string, ComponentIcons>>;\n  };\n  services: {\n    all?: Promise<Record<string, ServiceIcons>>;\n    domains: { [domain: string]: ServiceIcons | Promise<ServiceIcons> };\n  };\n} = {\n  entity: {},\n  entity_component: {},\n  services: { domains: {} },\n};\n\ninterface IconResources<\n  T extends ComponentIcons | PlatformIcons | ServiceIcons,\n> {\n  resources: Record<string, T>;\n}\n\ninterface PlatformIcons {\n  [translation_key: string]: {\n    state: Record<string, string>;\n    state_attributes: Record<\n      string,\n      {\n        state: Record<string, string>;\n        default: string;\n      }\n    >;\n    default: string;\n  };\n}\n\ninterface ComponentIcons {\n  [device_class: string]: {\n    state: Record<string, string>;\n    state_attributes: Record<\n      string,\n      {\n        state: Record<string, string>;\n        default: string;\n      }\n    >;\n    default: string;\n  };\n}\n\ninterface ServiceIcons {\n  [service: string]: string;\n}\n\nexport type IconCategory = \"entity\" | \"entity_component\" | \"services\";\n\ntype CategoryType = {\n  entity: PlatformIcons;\n  entity_component: ComponentIcons;\n  services: ServiceIcons;\n};\n\nexport const getHassIcons = async <T extends IconCategory>(\n  hass: HomeAssistant,\n  category: T,\n  integration?: string\n) =>\n  hass.callWS<IconResources<CategoryType[T]>>({\n    type: \"frontend/get_icons\",\n    category,\n    integration,\n  });\n\nexport const getPlatformIcons = async (\n  hass: HomeAssistant,\n  integration: string,\n  force = false\n): Promise<PlatformIcons | undefined> => {\n  if (!force && integration in resources.entity) {\n    return resources.entity[integration];\n  }\n  if (!isComponentLoaded(hass, integration)) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"entity\", integration).then(\n    (res) => res?.resources[integration]\n  );\n  resources.entity[integration] = result;\n  return resources.entity[integration];\n};\n\nexport const getComponentIcons = async (\n  hass: HomeAssistant,\n  domain: string,\n  force = false\n): Promise<ComponentIcons | undefined> => {\n  if (\n    !force &&\n    resources.entity_component.resources &&\n    resources.entity_component.domains?.includes(domain)\n  ) {\n    return resources.entity_component.resources.then((res) => res[domain]);\n  }\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  resources.entity_component.domains = [...hass.config.components];\n  resources.entity_component.resources = getHassIcons(\n    hass,\n    \"entity_component\"\n  ).then((result) => result.resources);\n  return resources.entity_component.resources.then((res) => res[domain]);\n};\n\nexport const getServiceIcons = async (\n  hass: HomeAssistant,\n  domain?: string,\n  force = false\n): Promise<ServiceIcons | Record<string, ServiceIcons> | undefined> => {\n  if (!domain) {\n    if (!force && resources.services.all) {\n      return resources.services.all;\n    }\n    resources.services.all = getHassIcons(hass, \"services\", domain).then(\n      (res) => {\n        resources.services.domains = res.resources;\n        return res?.resources;\n      }\n    );\n    return resources.services.all;\n  }\n  if (!force && domain in resources.services.domains) {\n    return resources.services.domains[domain];\n  }\n  if (resources.services.all && !force) {\n    await resources.services.all;\n    if (domain in resources.services.domains) {\n      return resources.services.domains[domain];\n    }\n  }\n  if (!isComponentLoaded(hass, domain)) {\n    return undefined;\n  }\n  const result = getHassIcons(hass, \"services\", domain);\n  resources.services.domains[domain] = result.then(\n    (res) => res?.resources[domain]\n  );\n  return resources.services.domains[domain];\n};\n\nexport const entityIcon = async (\n  hass: HomeAssistant,\n  stateObj: HassEntity,\n  state?: string\n) => {\n  const entry = hass.entities?.[stateObj.entity_id] as\n    | EntityRegistryDisplayEntry\n    | undefined;\n  if (entry?.icon) {\n    return entry.icon;\n  }\n  const domain = computeStateDomain(stateObj);\n\n  return getEntityIcon(hass, domain, stateObj, state, entry);\n};\n\nexport const entryIcon = async (\n  hass: HomeAssistant,\n  entry: EntityRegistryEntry | EntityRegistryDisplayEntry\n) => {\n  if (entry.icon) {\n    return entry.icon;\n  }\n  const domain = computeDomain(entry.entity_id);\n  return getEntityIcon(hass, domain, undefined, undefined, entry);\n};\n\nconst getEntityIcon = async (\n  hass: HomeAssistant,\n  domain: string,\n  stateObj?: HassEntity,\n  stateValue?: string,\n  entry?: EntityRegistryEntry | EntityRegistryDisplayEntry\n) => {\n  const platform = entry?.platform;\n  const translation_key = entry?.translation_key;\n  const device_class = stateObj?.attributes.device_class;\n  const state = stateValue ?? stateObj?.state;\n\n  let icon: string | undefined;\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      const translations = platformIcons[domain]?.[translation_key];\n      icon = (state && translations?.state?.[state]) || translations?.default;\n    }\n  }\n\n  if (!icon && stateObj) {\n    icon = stateIcon(stateObj, state);\n  }\n\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      const translations =\n        (device_class && entityComponentIcons[device_class]) ||\n        entityComponentIcons._;\n      icon = (state && translations?.state?.[state]) || translations?.default;\n    }\n  }\n  return icon;\n};\n\nexport const attributeIcon = async (\n  hass: HomeAssistant,\n  state: HassEntity,\n  attribute: string,\n  attributeValue?: string\n) => {\n  let icon: string | undefined;\n  const domain = computeStateDomain(state);\n  const deviceClass = state.attributes.device_class;\n  const entity = hass.entities?.[state.entity_id] as\n    | EntityRegistryDisplayEntry\n    | undefined;\n  const platform = entity?.platform;\n  const translation_key = entity?.translation_key;\n  const value =\n    attributeValue ??\n    (state.attributes[attribute] as string | number | undefined);\n\n  if (translation_key && platform) {\n    const platformIcons = await getPlatformIcons(hass, platform);\n    if (platformIcons) {\n      const translations =\n        platformIcons[domain]?.[translation_key]?.state_attributes?.[attribute];\n      icon = (value && translations?.state?.[value]) || translations?.default;\n    }\n  }\n  if (!icon) {\n    const entityComponentIcons = await getComponentIcons(hass, domain);\n    if (entityComponentIcons) {\n      const translations =\n        (deviceClass &&\n          entityComponentIcons[deviceClass]?.state_attributes?.[attribute]) ||\n        entityComponentIcons._?.state_attributes?.[attribute];\n      icon = (value && translations?.state?.[value]) || translations?.default;\n    }\n  }\n  return icon;\n};\n\nexport const serviceIcon = async (\n  hass: HomeAssistant,\n  service: string\n): Promise<string | undefined> => {\n  let icon: string | undefined;\n  const domain = computeDomain(service);\n  const serviceName = computeObjectId(service);\n  const serviceIcons = await getServiceIcons(hass, domain);\n  if (serviceIcons) {\n    icon = serviceIcons[serviceName] as string;\n  }\n  if (!icon) {\n    icon = await domainIcon(hass, domain);\n  }\n  return icon;\n};\n\nexport const domainIcon = async (\n  hass: HomeAssistant,\n  domain: string,\n  deviceClass?: string\n): Promise<string | undefined> => {\n  const entityComponentIcons = await getComponentIcons(hass, domain);\n  if (entityComponentIcons) {\n    const translations =\n      (deviceClass && entityComponentIcons[deviceClass]) ||\n      entityComponentIcons._;\n    return translations?.default;\n  }\n  return undefined;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}