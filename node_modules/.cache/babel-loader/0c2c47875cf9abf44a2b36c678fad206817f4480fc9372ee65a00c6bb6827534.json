{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"unfetch/polyfill\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.json.parse.js\";\nimport { fetchTranslationPreferences } from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nvar BASE_URL = \"\".concat(__STATIC_PATH__, \"translations\");\nvar STORAGE = window.localStorage || {};\n\n// Store loaded translations in memory so translations are available immediately\n// when DOM is created in Polymer. Even a cache lookup creates noticeable latency.\nvar translations = {};\nfunction fetchTranslation(_x) {\n  return _fetchTranslation.apply(this, arguments);\n} // Chinese locales need map to Simplified or Traditional Chinese\nfunction _fetchTranslation() {\n  _fetchTranslation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(fingerprint) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(\"\".concat(BASE_URL, \"/\").concat(fingerprint), {\n            credentials: \"same-origin\"\n          });\n        case 2:\n          response = _context.sent;\n          if (response.ok) {\n            _context.next = 5;\n            break;\n          }\n          throw new Error(\"Fail to fetch translation \".concat(fingerprint, \": HTTP response status is \").concat(response.status));\n        case 5:\n          return _context.abrupt(\"return\", response.json());\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _fetchTranslation.apply(this, arguments);\n}\nvar LOCALE_LOOKUP = {\n  \"zh-cn\": \"zh-Hans\",\n  \"zh-sg\": \"zh-Hans\",\n  \"zh-my\": \"zh-Hans\",\n  \"zh-tw\": \"zh-Hant\",\n  \"zh-hk\": \"zh-Hant\",\n  \"zh-mo\": \"zh-Hant\",\n  zh: \"zh-Hant\" // all other Chinese locales map to Traditional Chinese\n};\n\n/**\n * Search for a matching translation from most specific to general\n */\nexport function findAvailableLanguage(language) {\n  // In most case, the language has the same format with our translation meta data\n  if (language in translationMetadata.translations) {\n    return language;\n  }\n\n  // Perform case-insenstive comparison since browser isn't required to\n  // report languages with specific cases.\n  var langLower = language.toLowerCase();\n  if (langLower in LOCALE_LOOKUP) {\n    return LOCALE_LOOKUP[langLower];\n  }\n  var translation = Object.keys(translationMetadata.translations).find(function (lang) {\n    return lang.toLowerCase() === langLower;\n  });\n  if (translation) {\n    return translation;\n  }\n  if (language.includes(\"-\")) {\n    return findAvailableLanguage(language.split(\"-\")[0]);\n  }\n  return undefined;\n}\n\n/**\n * Get user selected locale data from backend\n */\nexport function getUserLocale(_x2) {\n  return _getUserLocale.apply(this, arguments);\n}\n\n/**\n * Get browser specific language\n */\nfunction _getUserLocale() {\n  _getUserLocale = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hass) {\n    var result, language, number_format, time_format, date_format, time_zone, first_weekday, availableLanguage;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return fetchTranslationPreferences(hass);\n        case 2:\n          result = _context2.sent;\n          language = result === null || result === void 0 ? void 0 : result.language;\n          number_format = result === null || result === void 0 ? void 0 : result.number_format;\n          time_format = result === null || result === void 0 ? void 0 : result.time_format;\n          date_format = result === null || result === void 0 ? void 0 : result.date_format;\n          time_zone = result === null || result === void 0 ? void 0 : result.time_zone;\n          first_weekday = result === null || result === void 0 ? void 0 : result.first_weekday;\n          if (!language) {\n            _context2.next = 13;\n            break;\n          }\n          availableLanguage = findAvailableLanguage(language);\n          if (!availableLanguage) {\n            _context2.next = 13;\n            break;\n          }\n          return _context2.abrupt(\"return\", {\n            language: availableLanguage,\n            number_format: number_format,\n            time_format: time_format,\n            date_format: date_format,\n            time_zone: time_zone,\n            first_weekday: first_weekday\n          });\n        case 13:\n          return _context2.abrupt(\"return\", {\n            number_format: number_format,\n            time_format: time_format,\n            date_format: date_format,\n            time_zone: time_zone,\n            first_weekday: first_weekday\n          });\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return _getUserLocale.apply(this, arguments);\n}\nexport function getLocalLanguage() {\n  var language = null;\n  if (STORAGE.selectedLanguage) {\n    try {\n      var stored = JSON.parse(STORAGE.selectedLanguage);\n      if (stored) {\n        language = findAvailableLanguage(stored);\n        if (language) {\n          return language;\n        }\n      }\n    } catch (err) {\n      // Ignore parsing error.\n    }\n  }\n  if (navigator.languages) {\n    var _iterator = _createForOfIteratorHelper(navigator.languages),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var locale = _step.value;\n        language = findAvailableLanguage(locale);\n        if (language) {\n          return language;\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  language = findAvailableLanguage(navigator.language);\n  if (language) {\n    return language;\n  }\n  // Final fallback\n  return \"en\";\n}\nexport function getTranslation(_x3, _x4) {\n  return _getTranslation.apply(this, arguments);\n}\nfunction _getTranslation() {\n  _getTranslation = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(fragment, language) {\n    var metadata, fingerprint;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          metadata = translationMetadata.translations[language];\n          if (metadata !== null && metadata !== void 0 && metadata.hash) {\n            _context3.next = 5;\n            break;\n          }\n          if (!(language !== \"en\")) {\n            _context3.next = 4;\n            break;\n          }\n          return _context3.abrupt(\"return\", getTranslation(fragment, \"en\"));\n        case 4:\n          throw new Error(\"Language en is not found in metadata\");\n        case 5:\n          // nl-abcd.jon or logbook/nl-abcd.json\n          fingerprint = \"\".concat(fragment ? fragment + \"/\" : \"\").concat(language, \"-\").concat(metadata.hash, \".json\"); // Fetch translation from the server\n          if (!translations[fingerprint]) {\n            translations[fingerprint] = fetchTranslation(fingerprint).then(function (data) {\n              return {\n                language: language,\n                data: data\n              };\n            }).catch(function (error) {\n              delete translations[fingerprint];\n              if (language !== \"en\") {\n                // Couldn't load selected translation. Try a fall back to en before failing.\n                return getTranslation(fragment, \"en\");\n              }\n              return Promise.reject(error);\n            });\n          }\n          return _context3.abrupt(\"return\", translations[fingerprint]);\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _getTranslation.apply(this, arguments);\n}","map":{"version":3,"names":["fetchTranslationPreferences","translationMetadata","BASE_URL","concat","__STATIC_PATH__","STORAGE","window","localStorage","translations","fetchTranslation","_x","_fetchTranslation","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee","fingerprint","response","wrap","_callee$","_context","prev","next","fetch","credentials","sent","ok","Error","status","abrupt","json","stop","LOCALE_LOOKUP","zh","findAvailableLanguage","language","langLower","toLowerCase","translation","Object","keys","find","lang","includes","split","undefined","getUserLocale","_x2","_getUserLocale","_callee2","hass","result","number_format","time_format","date_format","time_zone","first_weekday","availableLanguage","_callee2$","_context2","getLocalLanguage","selectedLanguage","stored","JSON","parse","err","navigator","languages","_iterator","_createForOfIteratorHelper","_step","s","n","done","locale","value","e","f","getTranslation","_x3","_x4","_getTranslation","_callee3","fragment","metadata","_callee3$","_context3","hash","then","data","catch","error","Promise","reject"],"sources":["/Users/sercanardil/Desktop/frontend/src/util/common-translation.ts"],"sourcesContent":["import {\n  fetchTranslationPreferences,\n  FrontendLocaleData,\n} from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { HomeAssistant } from \"../types\";\n\nconst BASE_URL = `${__STATIC_PATH__}translations`;\nconst STORAGE = window.localStorage || {};\n\n// Store loaded translations in memory so translations are available immediately\n// when DOM is created in Polymer. Even a cache lookup creates noticeable latency.\nconst translations = {};\n\nasync function fetchTranslation(fingerprint: string) {\n  const response = await fetch(`${BASE_URL}/${fingerprint}`, {\n    credentials: \"same-origin\",\n  });\n  if (!response.ok) {\n    throw new Error(\n      `Fail to fetch translation ${fingerprint}: HTTP response status is ${response.status}`\n    );\n  }\n  return response.json();\n}\n\n// Chinese locales need map to Simplified or Traditional Chinese\nconst LOCALE_LOOKUP = {\n  \"zh-cn\": \"zh-Hans\",\n  \"zh-sg\": \"zh-Hans\",\n  \"zh-my\": \"zh-Hans\",\n  \"zh-tw\": \"zh-Hant\",\n  \"zh-hk\": \"zh-Hant\",\n  \"zh-mo\": \"zh-Hant\",\n  zh: \"zh-Hant\", // all other Chinese locales map to Traditional Chinese\n};\n\n/**\n * Search for a matching translation from most specific to general\n */\nexport function findAvailableLanguage(language: string) {\n  // In most case, the language has the same format with our translation meta data\n  if (language in translationMetadata.translations) {\n    return language;\n  }\n\n  // Perform case-insenstive comparison since browser isn't required to\n  // report languages with specific cases.\n  const langLower = language.toLowerCase();\n\n  if (langLower in LOCALE_LOOKUP) {\n    return LOCALE_LOOKUP[langLower];\n  }\n\n  const translation = Object.keys(translationMetadata.translations).find(\n    (lang) => lang.toLowerCase() === langLower\n  );\n  if (translation) {\n    return translation;\n  }\n\n  if (language.includes(\"-\")) {\n    return findAvailableLanguage(language.split(\"-\")[0]);\n  }\n\n  return undefined;\n}\n\n/**\n * Get user selected locale data from backend\n */\nexport async function getUserLocale(\n  hass: HomeAssistant\n): Promise<Partial<FrontendLocaleData>> {\n  const result = await fetchTranslationPreferences(hass);\n  const language = result?.language;\n  const number_format = result?.number_format;\n  const time_format = result?.time_format;\n  const date_format = result?.date_format;\n  const time_zone = result?.time_zone;\n  const first_weekday = result?.first_weekday;\n  if (language) {\n    const availableLanguage = findAvailableLanguage(language);\n    if (availableLanguage) {\n      return {\n        language: availableLanguage,\n        number_format,\n        time_format,\n        date_format,\n        time_zone,\n        first_weekday,\n      };\n    }\n  }\n  return {\n    number_format,\n    time_format,\n    date_format,\n    time_zone,\n    first_weekday,\n  };\n}\n\n/**\n * Get browser specific language\n */\nexport function getLocalLanguage() {\n  let language = null;\n  if (STORAGE.selectedLanguage) {\n    try {\n      const stored = JSON.parse(STORAGE.selectedLanguage);\n      if (stored) {\n        language = findAvailableLanguage(stored);\n        if (language) {\n          return language;\n        }\n      }\n    } catch (err: any) {\n      // Ignore parsing error.\n    }\n  }\n  if (navigator.languages) {\n    for (const locale of navigator.languages) {\n      language = findAvailableLanguage(locale);\n      if (language) {\n        return language;\n      }\n    }\n  }\n  language = findAvailableLanguage(navigator.language);\n  if (language) {\n    return language;\n  }\n  // Final fallback\n  return \"en\";\n}\n\nexport async function getTranslation(\n  fragment: string | null,\n  language: string\n) {\n  const metadata = translationMetadata.translations[language];\n  if (!metadata?.hash) {\n    if (language !== \"en\") {\n      return getTranslation(fragment, \"en\");\n    }\n    throw new Error(\"Language en is not found in metadata\");\n  }\n\n  // nl-abcd.jon or logbook/nl-abcd.json\n  const fingerprint = `${fragment ? fragment + \"/\" : \"\"}${language}-${\n    metadata.hash\n  }.json`;\n\n  // Fetch translation from the server\n  if (!translations[fingerprint]) {\n    translations[fingerprint] = fetchTranslation(fingerprint)\n      .then((data) => ({ language, data }))\n      .catch((error) => {\n        delete translations[fingerprint];\n        if (language !== \"en\") {\n          // Couldn't load selected translation. Try a fall back to en before failing.\n          return getTranslation(fragment, \"en\");\n        }\n        return Promise.reject(error);\n      });\n  }\n  return translations[fingerprint];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}