{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from './base.js';\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector) {\n  return decorateProperty({\n    descriptor: function descriptor(_name) {\n      return {\n        get: function get() {\n          var _this = this;\n          return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var _a;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this.updateComplete;\n                case 2:\n                  return _context.abrupt(\"return\", (_a = _this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(selector));\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }))();\n        },\n        enumerable: true,\n        configurable: true\n      };\n    }\n  });\n}","map":{"version":3,"names":["decorateProperty","queryAsync","selector","descriptor","_name","get","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_a","wrap","_callee$","_context","prev","next","updateComplete","abrupt","renderRoot","querySelector","stop","enumerable","configurable"],"sources":["../../src/decorators/query-async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\nimport {decorateProperty} from './base.js';\n\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first: Promise<HTMLDivElement>;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector: string) {\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      async get(this: ReactiveElement) {\n        await this.updateComplete;\n        return this.renderRoot?.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"mappings":";;AAAA;;;;;AAcA,SAAQA,gBAAgB,QAAO,WAAW;AAE1C;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUC,UAAUA,CAACC,QAAgB;EACzC,OAAOF,gBAAgB,CAAC;IACtBG,UAAU,EAAE,SAAAA,WAACC,KAAkB;MAAA,OAAM;QAC7BC,GAAG,WAAAA,IAAA;UAAA,IAAAC,KAAA;UAAA,OAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;YAAA,IAAAC,EAAA;YAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;cAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;gBAAA;kBAAAF,QAAA,CAAAE,IAAA;kBAAA,OACDV,KAAI,CAACW,cAAc;gBAAA;kBAAA,OAAAH,QAAA,CAAAI,MAAA,WAClB,CAAAP,EAAA,GAAAL,KAAI,CAACa,UAAU,cAAAR,EAAA,uBAAAA,EAAA,CAAES,aAAa,CAAClB,QAAQ,CAAC;gBAAA;gBAAA;kBAAA,OAAAY,QAAA,CAAAO,IAAA;cAAA;YAAA,GAAAX,OAAA;UAAA;QACjD,CAAC;QACDY,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE;OACf;IAAA;GACF,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}