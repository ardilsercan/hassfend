{"ast":null,"code":"export const formatAsPaddedHex = value => {\n  let hex = value;\n  if (typeof value === \"string\") {\n    hex = parseInt(value, 16);\n  }\n  return \"0x\" + hex.toString(16).padStart(4, \"0\");\n};\nexport const getIeeeTail = ieee => ieee.split(\":\").slice(-4).reverse().join(\"\");\nexport const sortZHADevices = (a, b) => {\n  const nameA = a.user_given_name ? a.user_given_name : a.name;\n  const nameb = b.user_given_name ? b.user_given_name : b.name;\n  return nameA.localeCompare(nameb);\n};\nexport const sortZHAGroups = (a, b) => {\n  const nameA = a.name;\n  const nameb = b.name;\n  return nameA.localeCompare(nameb);\n};\nexport const computeClusterKey = cluster => `${cluster.name} (Endpoint id: ${cluster.endpoint_id}, Id: ${formatAsPaddedHex(cluster.id)}, Type: ${cluster.type})`;","map":{"version":3,"names":["formatAsPaddedHex","value","hex","parseInt","toString","padStart","getIeeeTail","ieee","split","slice","reverse","join","sortZHADevices","a","b","nameA","user_given_name","name","nameb","localeCompare","sortZHAGroups","computeClusterKey","cluster","endpoint_id","id","type"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/integrations/integration-panels/zha/functions.ts"],"sourcesContent":["import { Cluster, ZHADevice, ZHAGroup } from \"../../../../../data/zha\";\n\nexport const formatAsPaddedHex = (value: string | number): string => {\n  let hex = value;\n  if (typeof value === \"string\") {\n    hex = parseInt(value, 16);\n  }\n  return \"0x\" + hex.toString(16).padStart(4, \"0\");\n};\n\nexport const getIeeeTail = (ieee: string) =>\n  ieee.split(\":\").slice(-4).reverse().join(\"\");\n\nexport const sortZHADevices = (a: ZHADevice, b: ZHADevice): number => {\n  const nameA = a.user_given_name ? a.user_given_name : a.name;\n  const nameb = b.user_given_name ? b.user_given_name : b.name;\n  return nameA.localeCompare(nameb);\n};\n\nexport const sortZHAGroups = (a: ZHAGroup, b: ZHAGroup): number => {\n  const nameA = a.name;\n  const nameb = b.name;\n  return nameA.localeCompare(nameb);\n};\n\nexport const computeClusterKey = (cluster: Cluster): string =>\n  `${cluster.name} (Endpoint id: ${\n    cluster.endpoint_id\n  }, Id: ${formatAsPaddedHex(cluster.id)}, Type: ${cluster.type})`;\n"],"mappings":"AAEA,OAAO,MAAMA,iBAAiB,GAAIC,KAAsB,IAAa;EACnE,IAAIC,GAAG,GAAGD,KAAK;EACf,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7BC,GAAG,GAAGC,QAAQ,CAACF,KAAK,EAAE,EAAE,CAAC;EAC3B;EACA,OAAO,IAAI,GAAGC,GAAG,CAACE,QAAQ,CAAC,EAAE,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;AACjD,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIC,IAAY,IACtCA,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC,CAACC,OAAO,CAAC,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AAE9C,OAAO,MAAMC,cAAc,GAAGA,CAACC,CAAY,EAAEC,CAAY,KAAa;EACpE,MAAMC,KAAK,GAAGF,CAAC,CAACG,eAAe,GAAGH,CAAC,CAACG,eAAe,GAAGH,CAAC,CAACI,IAAI;EAC5D,MAAMC,KAAK,GAAGJ,CAAC,CAACE,eAAe,GAAGF,CAAC,CAACE,eAAe,GAAGF,CAAC,CAACG,IAAI;EAC5D,OAAOF,KAAK,CAACI,aAAa,CAACD,KAAK,CAAC;AACnC,CAAC;AAED,OAAO,MAAME,aAAa,GAAGA,CAACP,CAAW,EAAEC,CAAW,KAAa;EACjE,MAAMC,KAAK,GAAGF,CAAC,CAACI,IAAI;EACpB,MAAMC,KAAK,GAAGJ,CAAC,CAACG,IAAI;EACpB,OAAOF,KAAK,CAACI,aAAa,CAACD,KAAK,CAAC;AACnC,CAAC;AAED,OAAO,MAAMG,iBAAiB,GAAIC,OAAgB,IAC/C,GAAEA,OAAO,CAACL,IAAK,kBACdK,OAAO,CAACC,WACT,SAAQvB,iBAAiB,CAACsB,OAAO,CAACE,EAAE,CAAE,WAAUF,OAAO,CAACG,IAAK,GAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}