{"ast":null,"code":"import { differenceInDays, differenceInWeeks, startOfWeek } from \"date-fns/esm\";\nimport { firstWeekdayIndex } from \"../datetime/first_weekday\";\nconst MS_PER_SECOND = 1e3;\nconst SECS_PER_MIN = 60;\nconst SECS_PER_HOUR = SECS_PER_MIN * 60;\n\n// Adapted from https://github.com/formatjs/formatjs/blob/186cef62f980ec66252ee232f438a42d0b51b9f9/packages/intl-utils/src/diff.ts\nexport function selectUnit(from,\n// eslint-disable-next-line @typescript-eslint/default-param-last\nto = Date.now(), locale, thresholds = {}) {\n  const resolvedThresholds = {\n    ...DEFAULT_THRESHOLDS,\n    ...(thresholds || {})\n  };\n  const secs = (+from - +to) / MS_PER_SECOND;\n  if (Math.abs(secs) < resolvedThresholds.second) {\n    return {\n      value: Math.round(secs),\n      unit: \"second\"\n    };\n  }\n  const mins = secs / SECS_PER_MIN;\n  if (Math.abs(mins) < resolvedThresholds.minute) {\n    return {\n      value: Math.round(mins),\n      unit: \"minute\"\n    };\n  }\n  const hours = secs / SECS_PER_HOUR;\n  if (Math.abs(hours) < resolvedThresholds.hour) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\"\n    };\n  }\n  const fromDate = new Date(from);\n  const toDate = new Date(to);\n\n  // Set time component to zero, which allows us to compare only the days\n  fromDate.setHours(0, 0, 0, 0);\n  toDate.setHours(0, 0, 0, 0);\n  const days = differenceInDays(fromDate, toDate);\n  if (days === 0) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\"\n    };\n  }\n  if (Math.abs(days) < resolvedThresholds.day) {\n    return {\n      value: days,\n      unit: \"day\"\n    };\n  }\n  const firstWeekday = firstWeekdayIndex(locale);\n  const fromWeek = startOfWeek(fromDate, {\n    weekStartsOn: firstWeekday\n  });\n  const toWeek = startOfWeek(toDate, {\n    weekStartsOn: firstWeekday\n  });\n  const weeks = differenceInWeeks(fromWeek, toWeek);\n  if (weeks === 0) {\n    return {\n      value: days,\n      unit: \"day\"\n    };\n  }\n  if (Math.abs(weeks) < resolvedThresholds.week) {\n    return {\n      value: weeks,\n      unit: \"week\"\n    };\n  }\n  const years = fromDate.getFullYear() - toDate.getFullYear();\n  const months = years * 12 + fromDate.getMonth() - toDate.getMonth();\n  if (months === 0) {\n    return {\n      value: weeks,\n      unit: \"week\"\n    };\n  }\n  if (Math.abs(months) < resolvedThresholds.month || years === 0) {\n    return {\n      value: months,\n      unit: \"month\"\n    };\n  }\n  return {\n    value: Math.round(years),\n    unit: \"year\"\n  };\n}\nexport const DEFAULT_THRESHOLDS = {\n  second: 45,\n  // seconds to minute\n  minute: 45,\n  // minutes to hour\n  hour: 22,\n  // hour to day\n  day: 5,\n  // day to week\n  week: 4,\n  // week to months\n  month: 11 // month to years\n};","map":{"version":3,"names":["differenceInDays","differenceInWeeks","startOfWeek","firstWeekdayIndex","MS_PER_SECOND","SECS_PER_MIN","SECS_PER_HOUR","selectUnit","from","to","Date","now","locale","thresholds","resolvedThresholds","DEFAULT_THRESHOLDS","secs","Math","abs","second","value","round","unit","mins","minute","hours","hour","fromDate","toDate","setHours","days","day","firstWeekday","fromWeek","weekStartsOn","toWeek","weeks","week","years","getFullYear","months","getMonth","month"],"sources":["/workspaces/frontend/src/common/util/select-unit.ts"],"sourcesContent":["import { differenceInDays, differenceInWeeks, startOfWeek } from \"date-fns/esm\";\nimport { FrontendLocaleData } from \"../../data/translation\";\nimport { firstWeekdayIndex } from \"../datetime/first_weekday\";\n\nexport type Unit =\n  | \"second\"\n  | \"minute\"\n  | \"hour\"\n  | \"day\"\n  | \"week\"\n  | \"month\"\n  | \"quarter\"\n  | \"year\";\n\nconst MS_PER_SECOND = 1e3;\nconst SECS_PER_MIN = 60;\nconst SECS_PER_HOUR = SECS_PER_MIN * 60;\n\n// Adapted from https://github.com/formatjs/formatjs/blob/186cef62f980ec66252ee232f438a42d0b51b9f9/packages/intl-utils/src/diff.ts\nexport function selectUnit(\n  from: Date | number,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  to: Date | number = Date.now(),\n  locale: FrontendLocaleData,\n  thresholds: Partial<Thresholds> = {}\n): { value: number; unit: Unit } {\n  const resolvedThresholds: Thresholds = {\n    ...DEFAULT_THRESHOLDS,\n    ...(thresholds || {}),\n  };\n\n  const secs = (+from - +to) / MS_PER_SECOND;\n  if (Math.abs(secs) < resolvedThresholds.second) {\n    return {\n      value: Math.round(secs),\n      unit: \"second\",\n    };\n  }\n\n  const mins = secs / SECS_PER_MIN;\n  if (Math.abs(mins) < resolvedThresholds.minute) {\n    return {\n      value: Math.round(mins),\n      unit: \"minute\",\n    };\n  }\n\n  const hours = secs / SECS_PER_HOUR;\n  if (Math.abs(hours) < resolvedThresholds.hour) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\",\n    };\n  }\n\n  const fromDate = new Date(from);\n  const toDate = new Date(to);\n\n  // Set time component to zero, which allows us to compare only the days\n  fromDate.setHours(0, 0, 0, 0);\n  toDate.setHours(0, 0, 0, 0);\n\n  const days = differenceInDays(fromDate, toDate);\n  if (days === 0) {\n    return {\n      value: Math.round(hours),\n      unit: \"hour\",\n    };\n  }\n  if (Math.abs(days) < resolvedThresholds.day) {\n    return {\n      value: days,\n      unit: \"day\",\n    };\n  }\n\n  const firstWeekday = firstWeekdayIndex(locale);\n  const fromWeek = startOfWeek(fromDate, { weekStartsOn: firstWeekday });\n  const toWeek = startOfWeek(toDate, { weekStartsOn: firstWeekday });\n\n  const weeks = differenceInWeeks(fromWeek, toWeek);\n  if (weeks === 0) {\n    return {\n      value: days,\n      unit: \"day\",\n    };\n  }\n  if (Math.abs(weeks) < resolvedThresholds.week) {\n    return {\n      value: weeks,\n      unit: \"week\",\n    };\n  }\n\n  const years = fromDate.getFullYear() - toDate.getFullYear();\n  const months = years * 12 + fromDate.getMonth() - toDate.getMonth();\n  if (months === 0) {\n    return {\n      value: weeks,\n      unit: \"week\",\n    };\n  }\n  if (Math.abs(months) < resolvedThresholds.month || years === 0) {\n    return {\n      value: months,\n      unit: \"month\",\n    };\n  }\n\n  return {\n    value: Math.round(years),\n    unit: \"year\",\n  };\n}\n\ntype Thresholds = Record<\n  \"second\" | \"minute\" | \"hour\" | \"day\" | \"week\" | \"month\",\n  number\n>;\n\nexport const DEFAULT_THRESHOLDS: Thresholds = {\n  second: 45, // seconds to minute\n  minute: 45, // minutes to hour\n  hour: 22, // hour to day\n  day: 5, // day to week\n  week: 4, // week to months\n  month: 11, // month to years\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}