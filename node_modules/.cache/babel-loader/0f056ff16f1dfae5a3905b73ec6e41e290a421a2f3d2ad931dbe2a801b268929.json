{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\nimport { internals } from '../../labs/behaviors/element-internals.js';\n/**\n * Sets up an element's constructor to enable form submission. The element\n * instance should be form associated and have a `type` property.\n *\n * A click listener is added to each element instance. If the click is not\n * default prevented, it will submit the element's form, if any.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   static {\n *     setupFormSubmitter(MyElement);\n *   }\n *\n *   static formAssociated = true;\n *\n *   type: FormSubmitterType = 'submit';\n * }\n * ```\n *\n * @param ctor The form submitter element's constructor.\n */\nexport function setupFormSubmitter(ctor) {\n  if (isServer) {\n    return;\n  }\n  ctor.addInitializer(instance => {\n    const submitter = instance;\n    submitter.addEventListener('click', async event => {\n      const {\n        type,\n        [internals]: elementInternals\n      } = submitter;\n      const {\n        form\n      } = elementInternals;\n      if (!form || type === 'button') {\n        return;\n      }\n      // Wait a full task for event bubbling to complete.\n      await new Promise(resolve => {\n        setTimeout(resolve);\n      });\n      if (event.defaultPrevented) {\n        return;\n      }\n      if (type === 'reset') {\n        form.reset();\n        return;\n      }\n      // form.requestSubmit(submitter) does not work with form associated custom\n      // elements. This patches the dispatched submit event to add the correct\n      // `submitter`.\n      // See https://github.com/WICG/webcomponents/issues/814\n      form.addEventListener('submit', submitEvent => {\n        Object.defineProperty(submitEvent, 'submitter', {\n          configurable: true,\n          enumerable: true,\n          get: () => submitter\n        });\n      }, {\n        capture: true,\n        once: true\n      });\n      elementInternals.setFormValue(submitter.value);\n      form.requestSubmit();\n    });\n  });\n}","map":{"version":3,"names":["isServer","internals","setupFormSubmitter","ctor","addInitializer","instance","submitter","addEventListener","event","type","elementInternals","form","Promise","resolve","setTimeout","defaultPrevented","reset","submitEvent","Object","defineProperty","configurable","enumerable","get","capture","once","setFormValue","value","requestSubmit"],"sources":["form-submitter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveElement} from 'lit';\n\nimport {\n  internals,\n  WithElementInternals,\n} from '../../labs/behaviors/element-internals.js';\n\n/**\n * A string indicating the form submission behavior of the element.\n *\n * - submit: The element submits the form. This is the default value if the\n * attribute is not specified, or if it is dynamically changed to an empty or\n * invalid value.\n * - reset: The element resets the form.\n * - button: The element does nothing.\n */\nexport type FormSubmitterType = 'button' | 'submit' | 'reset';\n\n/**\n * An element that can submit or reset a `<form>`, similar to\n * `<button type=\"submit\">`.\n */\nexport interface FormSubmitter extends ReactiveElement, WithElementInternals {\n  /**\n   * A string indicating the form submission behavior of the element.\n   *\n   * - submit: The element submits the form. This is the default value if the\n   * attribute is not specified, or if it is dynamically changed to an empty or\n   * invalid value.\n   * - reset: The element resets the form.\n   * - button: The element does nothing.\n   */\n  type: FormSubmitterType;\n\n  /**\n   * The HTML name to use in form submission. When combined with a `value`, the\n   * submitting button's name/value will be added to the form.\n   *\n   * Names must reflect to a `name` attribute for form integration.\n   */\n  name: string;\n\n  /**\n   * The value of the button. When combined with a `name`, the submitting\n   * button's name/value will be added to the form.\n   */\n  value: string;\n}\n\ntype FormSubmitterConstructor =\n  | (new () => FormSubmitter)\n  | (abstract new () => FormSubmitter);\n\n/**\n * Sets up an element's constructor to enable form submission. The element\n * instance should be form associated and have a `type` property.\n *\n * A click listener is added to each element instance. If the click is not\n * default prevented, it will submit the element's form, if any.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   static {\n *     setupFormSubmitter(MyElement);\n *   }\n *\n *   static formAssociated = true;\n *\n *   type: FormSubmitterType = 'submit';\n * }\n * ```\n *\n * @param ctor The form submitter element's constructor.\n */\nexport function setupFormSubmitter(ctor: FormSubmitterConstructor) {\n  if (isServer) {\n    return;\n  }\n\n  (ctor as unknown as typeof ReactiveElement).addInitializer((instance) => {\n    const submitter = instance as FormSubmitter;\n    submitter.addEventListener('click', async (event) => {\n      const {type, [internals]: elementInternals} = submitter;\n      const {form} = elementInternals;\n      if (!form || type === 'button') {\n        return;\n      }\n\n      // Wait a full task for event bubbling to complete.\n      await new Promise<void>((resolve) => {\n        setTimeout(resolve);\n      });\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (type === 'reset') {\n        form.reset();\n        return;\n      }\n\n      // form.requestSubmit(submitter) does not work with form associated custom\n      // elements. This patches the dispatched submit event to add the correct\n      // `submitter`.\n      // See https://github.com/WICG/webcomponents/issues/814\n      form.addEventListener(\n        'submit',\n        (submitEvent) => {\n          Object.defineProperty(submitEvent, 'submitter', {\n            configurable: true,\n            enumerable: true,\n            get: () => submitter,\n          });\n        },\n        {capture: true, once: true},\n      );\n\n      elementInternals.setFormValue(submitter.value);\n      form.requestSubmit();\n    });\n  });\n}\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,QAAQ,QAAwB,KAAK;AAE7C,SACEC,SAAS,QAEJ,2CAA2C;AAgDlD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAkBA,CAACC,IAA8B;EAC/D,IAAIH,QAAQ,EAAE;IACZ;;EAGDG,IAA0C,CAACC,cAAc,CAAEC,QAAQ,IAAI;IACtE,MAAMC,SAAS,GAAGD,QAAyB;IAC3CC,SAAS,CAACC,gBAAgB,CAAC,OAAO,EAAE,MAAOC,KAAK,IAAI;MAClD,MAAM;QAACC,IAAI;QAAE,CAACR,SAAS,GAAGS;MAAgB,CAAC,GAAGJ,SAAS;MACvD,MAAM;QAACK;MAAI,CAAC,GAAGD,gBAAgB;MAC/B,IAAI,CAACC,IAAI,IAAIF,IAAI,KAAK,QAAQ,EAAE;QAC9B;;MAGF;MACA,MAAM,IAAIG,OAAO,CAAQC,OAAO,IAAI;QAClCC,UAAU,CAACD,OAAO,CAAC;MACrB,CAAC,CAAC;MAEF,IAAIL,KAAK,CAACO,gBAAgB,EAAE;QAC1B;;MAGF,IAAIN,IAAI,KAAK,OAAO,EAAE;QACpBE,IAAI,CAACK,KAAK,EAAE;QACZ;;MAGF;MACA;MACA;MACA;MACAL,IAAI,CAACJ,gBAAgB,CACnB,QAAQ,EACPU,WAAW,IAAI;QACdC,MAAM,CAACC,cAAc,CAACF,WAAW,EAAE,WAAW,EAAE;UAC9CG,YAAY,EAAE,IAAI;UAClBC,UAAU,EAAE,IAAI;UAChBC,GAAG,EAAEA,CAAA,KAAMhB;SACZ,CAAC;MACJ,CAAC,EACD;QAACiB,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;MAAI,CAAC,CAC5B;MAEDd,gBAAgB,CAACe,YAAY,CAACnB,SAAS,CAACoB,KAAK,CAAC;MAC9Cf,IAAI,CAACgB,aAAa,EAAE;IACtB,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}