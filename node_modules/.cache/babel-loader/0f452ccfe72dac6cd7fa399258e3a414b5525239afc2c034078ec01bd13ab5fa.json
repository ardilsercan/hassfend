{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport \"../../../components/ha-control-button\";\nimport \"../../../components/ha-control-button-group\";\nimport \"../../../components/ha-control-select\";\nimport \"../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { compareWaterHeaterOperationMode, computeOperationModeIcon } from \"../../../data/water_heater\";\nexport const supportsWaterHeaterOperationModesCardFeature = stateObj => {\n  const domain = computeDomain(stateObj.entity_id);\n  return domain === \"water_heater\";\n};\nlet HuiWaterHeaterOperationModeCardFeature = _decorate([customElement(\"hui-water-heater-operation-modes-card-feature\")], function (_initialize, _LitElement) {\n  class HuiWaterHeaterOperationModeCardFeature extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiWaterHeaterOperationModeCardFeature,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_currentOperationMode\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig(_, stateObj) {\n        return {\n          type: \"water-heater-operation-modes\",\n          operation_modes: (stateObj === null || stateObj === void 0 ? void 0 : stateObj.attributes.operation_list) || []\n        };\n      }\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getConfigElement\",\n      value: async function getConfigElement() {\n        await import(\"../editor/config-elements/hui-water-heater-operation-modes-card-feature-editor\");\n        return document.createElement(\"hui-water-heater-operation-modes-card-feature-editor\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config) {\n          throw new Error(\"Invalid configuration\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProp) {\n        _get(_getPrototypeOf(HuiWaterHeaterOperationModeCardFeature.prototype), \"willUpdate\", this).call(this, changedProp);\n        if (changedProp.has(\"stateObj\") && this.stateObj) {\n          this._currentOperationMode = this.stateObj.state;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: async function _valueChanged(ev) {\n        const mode = ev.detail.value;\n        if (mode === this.stateObj.state) return;\n        const oldMode = this.stateObj.state;\n        this._currentOperationMode = mode;\n        try {\n          await this._setMode(mode);\n        } catch (err) {\n          this._currentOperationMode = oldMode;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setMode\",\n      value: async function _setMode(mode) {\n        await this.hass.callService(\"water_heater\", \"set_operation_mode\", {\n          entity_id: this.stateObj.entity_id,\n          operation_mode: mode\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._config || !this.hass || !this.stateObj || !supportsWaterHeaterOperationModesCardFeature(this.stateObj)) {\n          return null;\n        }\n        const color = stateColorCss(this.stateObj);\n        const modes = this._config.operation_modes || [];\n        const options = modes.filter(mode => {\n          var _this$stateObj;\n          return (_this$stateObj = this.stateObj) === null || _this$stateObj === void 0 ? void 0 : _this$stateObj.attributes.operation_list.includes(mode);\n        }).sort(compareWaterHeaterOperationMode).map(mode => ({\n          value: mode,\n          label: this.hass.formatEntityState(this.stateObj, mode),\n          path: computeOperationModeIcon(mode)\n        }));\n        return html`\n      <div class=\"container\">\n        <ha-control-select\n          .options=${options}\n          .value=${this._currentOperationMode}\n          @value-changed=${this._valueChanged}\n          hide-label\n          .ariaLabel=${this.hass.localize(\"ui.card.water_heater.mode\")}\n          style=${styleMap({\n          \"--control-select-color\": color\n        })}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n        >\n        </ha-control-select>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-select {\n        --control-select-color: var(--feature-color);\n        --control-select-padding: 0;\n        --control-select-thickness: 40px;\n        --control-select-border-radius: 10px;\n        --control-select-button-border-radius: 10px;\n      }\n      ha-control-button-group {\n        margin: 0 12px 12px 12px;\n        --control-button-group-spacing: 12px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","state","styleMap","computeDomain","stateColorCss","UNAVAILABLE","compareWaterHeaterOperationMode","computeOperationModeIcon","supportsWaterHeaterOperationModesCardFeature","stateObj","domain","entity_id","HuiWaterHeaterOperationModeCardFeature","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","static","getStubConfig","_","type","operation_modes","attributes","operation_list","getConfigElement","document","createElement","setConfig","config","Error","_config","willUpdate","changedProp","_get","_getPrototypeOf","prototype","call","has","_currentOperationMode","_valueChanged","ev","mode","detail","oldMode","_setMode","err","hass","callService","operation_mode","render","color","modes","options","filter","_this$stateObj","includes","sort","map","label","formatEntityState","path","localize","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/card-features/hui-water-heater-operation-modes-card-feature.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport \"../../../components/ha-control-button\";\nimport \"../../../components/ha-control-button-group\";\nimport \"../../../components/ha-control-select\";\nimport type { ControlSelectOption } from \"../../../components/ha-control-select\";\nimport \"../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport {\n  compareWaterHeaterOperationMode,\n  computeOperationModeIcon,\n  OperationMode,\n  WaterHeaterEntity,\n} from \"../../../data/water_heater\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCardFeature, LovelaceCardFeatureEditor } from \"../types\";\nimport { WaterHeaterOperationModesCardFeatureConfig } from \"./types\";\n\nexport const supportsWaterHeaterOperationModesCardFeature = (\n  stateObj: HassEntity\n) => {\n  const domain = computeDomain(stateObj.entity_id);\n  return domain === \"water_heater\";\n};\n\n@customElement(\"hui-water-heater-operation-modes-card-feature\")\nclass HuiWaterHeaterOperationModeCardFeature\n  extends LitElement\n  implements LovelaceCardFeature\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: WaterHeaterEntity;\n\n  @state() private _config?: WaterHeaterOperationModesCardFeatureConfig;\n\n  @state() _currentOperationMode?: OperationMode;\n\n  static getStubConfig(\n    _,\n    stateObj?: HassEntity\n  ): WaterHeaterOperationModesCardFeatureConfig {\n    return {\n      type: \"water-heater-operation-modes\",\n      operation_modes: stateObj?.attributes.operation_list || [],\n    };\n  }\n\n  public static async getConfigElement(): Promise<LovelaceCardFeatureEditor> {\n    await import(\n      \"../editor/config-elements/hui-water-heater-operation-modes-card-feature-editor\"\n    );\n    return document.createElement(\n      \"hui-water-heater-operation-modes-card-feature-editor\"\n    );\n  }\n\n  public setConfig(config: WaterHeaterOperationModesCardFeatureConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected willUpdate(changedProp: PropertyValues): void {\n    super.willUpdate(changedProp);\n    if (changedProp.has(\"stateObj\") && this.stateObj) {\n      this._currentOperationMode = this.stateObj.state as OperationMode;\n    }\n  }\n\n  private async _valueChanged(ev: CustomEvent) {\n    const mode = (ev.detail as any).value as OperationMode;\n\n    if (mode === this.stateObj!.state) return;\n\n    const oldMode = this.stateObj!.state as OperationMode;\n    this._currentOperationMode = mode;\n\n    try {\n      await this._setMode(mode);\n    } catch (err) {\n      this._currentOperationMode = oldMode;\n    }\n  }\n\n  private async _setMode(mode: OperationMode) {\n    await this.hass!.callService(\"water_heater\", \"set_operation_mode\", {\n      entity_id: this.stateObj!.entity_id,\n      operation_mode: mode,\n    });\n  }\n\n  protected render(): TemplateResult | null {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this.stateObj ||\n      !supportsWaterHeaterOperationModesCardFeature(this.stateObj)\n    ) {\n      return null;\n    }\n\n    const color = stateColorCss(this.stateObj);\n\n    const modes = this._config.operation_modes || [];\n\n    const options = modes\n      .filter((mode) => this.stateObj?.attributes.operation_list.includes(mode))\n      .sort(compareWaterHeaterOperationMode)\n      .map<ControlSelectOption>((mode) => ({\n        value: mode,\n        label: this.hass!.formatEntityState(this.stateObj!, mode),\n        path: computeOperationModeIcon(mode),\n      }));\n\n    return html`\n      <div class=\"container\">\n        <ha-control-select\n          .options=${options}\n          .value=${this._currentOperationMode}\n          @value-changed=${this._valueChanged}\n          hide-label\n          .ariaLabel=${this.hass.localize(\"ui.card.water_heater.mode\")}\n          style=${styleMap({\n            \"--control-select-color\": color,\n          })}\n          .disabled=${this.stateObj!.state === UNAVAILABLE}\n        >\n        </ha-control-select>\n      </div>\n    `;\n  }\n\n  static get styles() {\n    return css`\n      ha-control-select {\n        --control-select-color: var(--feature-color);\n        --control-select-padding: 0;\n        --control-select-thickness: 40px;\n        --control-select-border-radius: 10px;\n        --control-select-button-border-radius: 10px;\n      }\n      ha-control-button-group {\n        margin: 0 12px 12px 12px;\n        --control-button-group-spacing: 12px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-water-heater-operation-modes-card-feature\": HuiWaterHeaterOperationModeCardFeature;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}