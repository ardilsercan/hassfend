{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { atLeastVersion } from \"../../common/config/version\";\nimport { hassioApiResultExtractor } from \"./common\";\nexport var fetchNetworkInfo = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hass) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!atLeastVersion(hass.config.version, 2021, 2, 4)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", hass.callWS({\n            type: \"supervisor/api\",\n            endpoint: \"/network/info\",\n            method: \"get\"\n          }));\n        case 2:\n          _context.t0 = hassioApiResultExtractor;\n          _context.next = 5;\n          return hass.callApi(\"GET\", \"hassio/network/info\");\n        case 5:\n          _context.t1 = _context.sent;\n          return _context.abrupt(\"return\", (0, _context.t0)(_context.t1));\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function fetchNetworkInfo(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var updateNetworkInterface = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hass, network_interface, options) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!atLeastVersion(hass.config.version, 2021, 2, 4)) {\n            _context2.next = 4;\n            break;\n          }\n          _context2.next = 3;\n          return hass.callWS({\n            type: \"supervisor/api\",\n            endpoint: \"/network/interface/\".concat(network_interface, \"/update\"),\n            method: \"post\",\n            data: options,\n            timeout: null\n          });\n        case 3:\n          return _context2.abrupt(\"return\");\n        case 4:\n          _context2.next = 6;\n          return hass.callApi(\"POST\", \"hassio/network/interface/\".concat(network_interface, \"/update\"), options);\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function updateNetworkInterface(_x2, _x3, _x4) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var accesspointScan = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(hass, network_interface) {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!atLeastVersion(hass.config.version, 2021, 2, 4)) {\n            _context3.next = 2;\n            break;\n          }\n          return _context3.abrupt(\"return\", hass.callWS({\n            type: \"supervisor/api\",\n            endpoint: \"/network/interface/\".concat(network_interface, \"/accesspoints\"),\n            method: \"get\",\n            timeout: null\n          }));\n        case 2:\n          _context3.t0 = hassioApiResultExtractor;\n          _context3.next = 5;\n          return hass.callApi(\"GET\", \"hassio/network/interface/\".concat(network_interface, \"/accesspoints\"));\n        case 5:\n          _context3.t1 = _context3.sent;\n          return _context3.abrupt(\"return\", (0, _context3.t0)(_context3.t1));\n        case 7:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function accesspointScan(_x5, _x6) {\n    return _ref3.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["atLeastVersion","hassioApiResultExtractor","fetchNetworkInfo","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hass","wrap","_callee$","_context","prev","next","config","version","abrupt","callWS","type","endpoint","method","t0","callApi","t1","sent","stop","_x","apply","arguments","updateNetworkInterface","_ref2","_callee2","network_interface","options","_callee2$","_context2","concat","data","timeout","_x2","_x3","_x4","accesspointScan","_ref3","_callee3","_callee3$","_context3","_x5","_x6"],"sources":["/workspaces/frontend/src/data/hassio/network.ts"],"sourcesContent":["import { atLeastVersion } from \"../../common/config/version\";\nimport { HomeAssistant } from \"../../types\";\nimport { hassioApiResultExtractor, HassioResponse } from \"./common\";\n\ninterface IpConfiguration {\n  address: string[];\n  gateway: string;\n  method: \"disabled\" | \"static\" | \"auto\";\n  nameservers: string[];\n}\n\nexport interface NetworkInterface {\n  primary: boolean;\n  privacy: boolean;\n  interface: string;\n  enabled: boolean;\n  ipv4?: Partial<IpConfiguration>;\n  ipv6?: Partial<IpConfiguration>;\n  type: \"ethernet\" | \"wireless\" | \"vlan\";\n  wifi?: Partial<WifiConfiguration>;\n}\n\ninterface DockerNetwork {\n  address: string;\n  dns: string;\n  gateway: string;\n  interface: string;\n}\n\ninterface AccessPoint {\n  mode: \"infrastructure\" | \"mesh\" | \"adhoc\" | \"ap\";\n  ssid: string;\n  mac: string;\n  frequency: number;\n  signal: number;\n}\n\nexport interface AccessPoints {\n  accesspoints: AccessPoint[];\n}\n\nexport interface WifiConfiguration {\n  mode: \"infrastructure\" | \"mesh\" | \"adhoc\" | \"ap\";\n  auth: \"open\" | \"wep\" | \"wpa-psk\";\n  ssid: string;\n  signal: number;\n  psk?: string;\n}\n\nexport interface NetworkInfo {\n  interfaces: NetworkInterface[];\n  docker: DockerNetwork;\n}\n\nexport const fetchNetworkInfo = async (\n  hass: HomeAssistant\n): Promise<NetworkInfo> => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: \"/network/info\",\n      method: \"get\",\n    });\n  }\n\n  return hassioApiResultExtractor(\n    await hass.callApi<HassioResponse<NetworkInfo>>(\n      \"GET\",\n      \"hassio/network/info\"\n    )\n  );\n};\n\nexport const updateNetworkInterface = async (\n  hass: HomeAssistant,\n  network_interface: string,\n  options: Partial<NetworkInterface>\n) => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    await hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/update`,\n      method: \"post\",\n      data: options,\n      timeout: null,\n    });\n    return;\n  }\n\n  await hass.callApi<HassioResponse<NetworkInfo>>(\n    \"POST\",\n    `hassio/network/interface/${network_interface}/update`,\n    options\n  );\n};\n\nexport const accesspointScan = async (\n  hass: HomeAssistant,\n  network_interface: string\n): Promise<AccessPoints> => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/accesspoints`,\n      method: \"get\",\n      timeout: null,\n    });\n  }\n\n  return hassioApiResultExtractor(\n    await hass.callApi<HassioResponse<AccessPoints>>(\n      \"GET\",\n      `hassio/network/interface/${network_interface}/accesspoints`\n    )\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}