{"ast":null,"code":"import { expose } from \"comlink\";\nimport { marked } from \"marked\";\nimport { filterXSS, getDefaultWhiteList } from \"xss\";\nlet whiteListNormal;\nlet whiteListSvg;\n\n// Override the default `onTagAttr` behavior to only render\n// our markdown checkboxes.\n// Returning undefined causes the default measure to be taken\n// in the xss library.\nconst onTagAttr = (tag, name, value) => {\n  if (tag === \"input\") {\n    if (name === \"type\" && value === \"checkbox\" || name === \"checked\" || name === \"disabled\") {\n      return undefined;\n    }\n    return \"\";\n  }\n  return undefined;\n};\nconst renderMarkdown = async (content, markedOptions, hassOptions = {}) => {\n  if (!whiteListNormal) {\n    whiteListNormal = {\n      ...getDefaultWhiteList(),\n      input: [\"type\", \"disabled\", \"checked\"],\n      \"ha-icon\": [\"icon\"],\n      \"ha-svg-icon\": [\"path\"],\n      \"ha-alert\": [\"alert-type\", \"title\"],\n      \"ha-qr-code\": [\"data\", \"scale\", \"width\", \"margin\", \"error-correction-level\", \"center-image\"]\n    };\n  }\n  let whiteList;\n  if (hassOptions.allowSvg) {\n    if (!whiteListSvg) {\n      whiteListSvg = {\n        ...whiteListNormal,\n        svg: [\"xmlns\", \"height\", \"width\"],\n        path: [\"transform\", \"stroke\", \"d\"],\n        img: [\"src\"]\n      };\n    }\n    whiteList = whiteListSvg;\n  } else {\n    whiteList = whiteListNormal;\n  }\n  return filterXSS(await marked(content, markedOptions), {\n    whiteList,\n    onTagAttr\n  });\n};\nconst api = {\n  renderMarkdown\n};\nexpose(api);","map":{"version":3,"names":["expose","marked","filterXSS","getDefaultWhiteList","whiteListNormal","whiteListSvg","onTagAttr","tag","name","value","undefined","renderMarkdown","content","markedOptions","hassOptions","input","whiteList","allowSvg","svg","path","img","api"],"sources":["/workspaces/frontend/src/resources/markdown-worker.ts"],"sourcesContent":["import { expose } from \"comlink\";\nimport { marked, MarkedOptions } from \"marked\";\nimport { filterXSS, getDefaultWhiteList, IWhiteList } from \"xss\";\n\nlet whiteListNormal: IWhiteList | undefined;\nlet whiteListSvg: IWhiteList | undefined;\n\n// Override the default `onTagAttr` behavior to only render\n// our markdown checkboxes.\n// Returning undefined causes the default measure to be taken\n// in the xss library.\nconst onTagAttr = (\n  tag: string,\n  name: string,\n  value: string\n): string | undefined => {\n  if (tag === \"input\") {\n    if (\n      (name === \"type\" && value === \"checkbox\") ||\n      name === \"checked\" ||\n      name === \"disabled\"\n    ) {\n      return undefined;\n    }\n    return \"\";\n  }\n  return undefined;\n};\n\nconst renderMarkdown = async (\n  content: string,\n  markedOptions: MarkedOptions,\n  hassOptions: {\n    // Do not allow SVG on untrusted content, it allows XSS.\n    allowSvg?: boolean;\n  } = {}\n): Promise<string> => {\n  if (!whiteListNormal) {\n    whiteListNormal = {\n      ...getDefaultWhiteList(),\n      input: [\"type\", \"disabled\", \"checked\"],\n      \"ha-icon\": [\"icon\"],\n      \"ha-svg-icon\": [\"path\"],\n      \"ha-alert\": [\"alert-type\", \"title\"],\n      \"ha-qr-code\": [\n        \"data\",\n        \"scale\",\n        \"width\",\n        \"margin\",\n        \"error-correction-level\",\n        \"center-image\",\n      ],\n    };\n  }\n\n  let whiteList: IWhiteList | undefined;\n\n  if (hassOptions.allowSvg) {\n    if (!whiteListSvg) {\n      whiteListSvg = {\n        ...whiteListNormal,\n        svg: [\"xmlns\", \"height\", \"width\"],\n        path: [\"transform\", \"stroke\", \"d\"],\n        img: [\"src\"],\n      };\n    }\n    whiteList = whiteListSvg;\n  } else {\n    whiteList = whiteListNormal;\n  }\n\n  return filterXSS(await marked(content, markedOptions), {\n    whiteList,\n    onTagAttr,\n  });\n};\n\nconst api = {\n  renderMarkdown,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,MAAM,QAAuB,QAAQ;AAC9C,SAASC,SAAS,EAAEC,mBAAmB,QAAoB,KAAK;AAEhE,IAAIC,eAAuC;AAC3C,IAAIC,YAAoC;;AAExC;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAGA,CAChBC,GAAW,EACXC,IAAY,EACZC,KAAa,KACU;EACvB,IAAIF,GAAG,KAAK,OAAO,EAAE;IACnB,IACGC,IAAI,KAAK,MAAM,IAAIC,KAAK,KAAK,UAAU,IACxCD,IAAI,KAAK,SAAS,IAClBA,IAAI,KAAK,UAAU,EACnB;MACA,OAAOE,SAAS;IAClB;IACA,OAAO,EAAE;EACX;EACA,OAAOA,SAAS;AAClB,CAAC;AAED,MAAMC,cAAc,GAAG,MAAAA,CACrBC,OAAe,EACfC,aAA4B,EAC5BC,WAGC,GAAG,CAAC,CAAC,KACc;EACpB,IAAI,CAACV,eAAe,EAAE;IACpBA,eAAe,GAAG;MAChB,GAAGD,mBAAmB,CAAC,CAAC;MACxBY,KAAK,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,SAAS,CAAC;MACtC,SAAS,EAAE,CAAC,MAAM,CAAC;MACnB,aAAa,EAAE,CAAC,MAAM,CAAC;MACvB,UAAU,EAAE,CAAC,YAAY,EAAE,OAAO,CAAC;MACnC,YAAY,EAAE,CACZ,MAAM,EACN,OAAO,EACP,OAAO,EACP,QAAQ,EACR,wBAAwB,EACxB,cAAc;IAElB,CAAC;EACH;EAEA,IAAIC,SAAiC;EAErC,IAAIF,WAAW,CAACG,QAAQ,EAAE;IACxB,IAAI,CAACZ,YAAY,EAAE;MACjBA,YAAY,GAAG;QACb,GAAGD,eAAe;QAClBc,GAAG,EAAE,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC;QACjCC,IAAI,EAAE,CAAC,WAAW,EAAE,QAAQ,EAAE,GAAG,CAAC;QAClCC,GAAG,EAAE,CAAC,KAAK;MACb,CAAC;IACH;IACAJ,SAAS,GAAGX,YAAY;EAC1B,CAAC,MAAM;IACLW,SAAS,GAAGZ,eAAe;EAC7B;EAEA,OAAOF,SAAS,CAAC,MAAMD,MAAM,CAACW,OAAO,EAAEC,aAAa,CAAC,EAAE;IACrDG,SAAS;IACTV;EACF,CAAC,CAAC;AACJ,CAAC;AAED,MAAMe,GAAG,GAAG;EACVV;AACF,CAAC;AAIDX,MAAM,CAACqB,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}