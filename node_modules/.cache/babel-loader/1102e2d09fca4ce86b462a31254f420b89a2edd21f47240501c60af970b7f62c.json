{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button/mwc-button\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiHomeExportOutline = \"M24 13L20 17V14H11V12H20V9L24 13M4 20V12H1L11 3L18 9.3V10H15.79L11 5.69L6 10.19V18H16V16H18V20H4Z\";\nconst mdiHomeImportOutline = \"M15 13L11 17V14H2V12H11V9L15 13M5 20V16H7V18H17V10.19L12 5.69L7.21 10H4.22L12 3L22 12H19V20H5Z\";\nconst mdiPencil = \"M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z\";\nconst mdiTransmissionTower = \"M8.28,5.45L6.5,4.55L7.76,2H16.23L17.5,4.55L15.72,5.44L15,4H9L8.28,5.45M18.62,8H14.09L13.3,5H10.7L9.91,8H5.38L4.1,10.55L5.89,11.44L6.62,10H17.38L18.1,11.45L19.89,10.56L18.62,8M17.77,22H15.7L15.46,21.1L12,15.9L8.53,21.1L8.3,22H6.23L9.12,11H11.19L10.83,12.35L12,14.1L13.16,12.35L12.81,11H14.88L17.77,22M11.4,15L10.5,13.65L9.32,18.13L11.4,15M14.68,18.12L13.5,13.64L12.6,15L14.68,18.12Z\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport { deleteConfigEntry, getConfigEntries } from \"../../../../data/config_entries\";\nimport { emptyGridSourceEnergyPreference, energySourcesByType, saveEnergyPreferences } from \"../../../../data/energy\";\nimport { getStatisticLabel } from \"../../../../data/recorder\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsGridFlowFromDialog, showEnergySettingsGridFlowToDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\nexport let EnergyGridSettings = _decorate([customElement(\"ha-energy-grid-settings\")], function (_initialize, _LitElement) {\n  class EnergyGridSettings extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: EnergyGridSettings,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"preferences\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"statsMetadata\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"validationResult\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_co2ConfigEntry\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        this._fetchCO2SignalConfigEntries();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass$themes, _this$_co2ConfigEntry, _this$hass$themes2;\n        const gridIdx = this.preferences.energy_sources.findIndex(source => source.type === \"grid\");\n        let gridSource;\n        let gridValidation;\n        if (gridIdx === -1) {\n          gridSource = emptyGridSourceEnergyPreference();\n        } else {\n          gridSource = this.preferences.energy_sources[gridIdx];\n          if (this.validationResult) {\n            gridValidation = this.validationResult.energy_sources[gridIdx];\n          }\n        }\n        return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.grid.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(this.hass, \"/docs/energy/electricity-grid/\")}\n              >${this.hass.localize(\"ui.panel.config.energy.grid.learn_more\")}</a\n            >\n          </p>\n          ${gridValidation ? html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${gridValidation}\n                ></ha-energy-validation-result>\n              ` : \"\"}\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.grid_consumption\")}\n          </h3>\n          ${gridSource.flow_from.map(flow => {\n          var _this$statsMetadata;\n          const entityState = this.hass.states[flow.stat_energy_from];\n          return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState !== null && entityState !== void 0 && entityState.attributes.icon ? html`<ha-icon\n                      .icon=${entityState === null || entityState === void 0 ? void 0 : entityState.attributes.icon}\n                    ></ha-icon>` : html`<ha-svg-icon\n                      .path=${mdiHomeImportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(this.hass, flow.stat_energy_from, (_this$statsMetadata = this.statsMetadata) === null || _this$statsMetadata === void 0 ? void 0 : _this$statsMetadata[flow.stat_energy_from])}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.panel.config.energy.grid.edit_consumption\")}\n                  @click=${this._editFromSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.panel.config.energy.grid.delete_consumption\")}\n                  @click=${this._deleteFromSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n        })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeImportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addFromSource}\n              >${this.hass.localize(\"ui.panel.config.energy.grid.add_consumption\")}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.return_to_grid\")}\n          </h3>\n          ${gridSource.flow_to.map(flow => {\n          var _this$statsMetadata2;\n          const entityState = this.hass.states[flow.stat_energy_to];\n          return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState !== null && entityState !== void 0 && entityState.attributes.icon ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>` : html`<ha-svg-icon\n                      .path=${mdiHomeExportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(this.hass, flow.stat_energy_to, (_this$statsMetadata2 = this.statsMetadata) === null || _this$statsMetadata2 === void 0 ? void 0 : _this$statsMetadata2[flow.stat_energy_to])}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.panel.config.energy.grid.edit_return\")}\n                  @click=${this._editToSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.panel.config.energy.grid.delete_return\")}\n                  @click=${this._deleteToSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n        })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeExportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addToSource}\n              >${this.hass.localize(\"ui.panel.config.energy.grid.add_return\")}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.grid_carbon_footprint\")}\n          </h3>\n          ${this._co2ConfigEntry ? html`<div class=\"row\" .entry=${this._co2ConfigEntry}>\n                <img\n                  alt=\"\"\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  src=${brandsUrl({\n          domain: \"co2signal\",\n          type: \"icon\",\n          darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n        })}\n                />\n                <span class=\"content\">${this._co2ConfigEntry.title}</span>\n                <a\n                  href=${`/config/integrations/integration/${(_this$_co2ConfigEntry = this._co2ConfigEntry) === null || _this$_co2ConfigEntry === void 0 ? void 0 : _this$_co2ConfigEntry.domain}`}\n                >\n                  <ha-icon-button .path=${mdiPencil}></ha-icon-button>\n                </a>\n                <ha-icon-button\n                  .label=${this.hass.localize(\"ui.panel.config.energy.grid.remove_co2_signal\")}\n                  @click=${this._removeCO2Sensor}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>` : html`\n                <div class=\"row border-bottom\">\n                  <img\n                    alt=\"\"\n                    crossorigin=\"anonymous\"\n                    referrerpolicy=\"no-referrer\"\n                    src=${brandsUrl({\n          domain: \"co2signal\",\n          type: \"icon\",\n          darkOptimized: (_this$hass$themes2 = this.hass.themes) === null || _this$hass$themes2 === void 0 ? void 0 : _this$hass$themes2.darkMode\n        })}\n                  />\n                  <mwc-button @click=${this._addCO2Sensor}>\n                    ${this.hass.localize(\"ui.panel.config.energy.grid.add_co2_signal\")}\n                  </mwc-button>\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchCO2SignalConfigEntries\",\n      value: async function _fetchCO2SignalConfigEntries() {\n        const entries = await getConfigEntries(this.hass, {\n          domain: \"co2signal\"\n        });\n        this._co2ConfigEntry = entries.length ? entries[0] : undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addCO2Sensor\",\n      value: function _addCO2Sensor() {\n        showConfigFlowDialog(this, {\n          startFlowHandler: \"co2signal\",\n          dialogClosedCallback: () => {\n            this._fetchCO2SignalConfigEntries();\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_removeCO2Sensor\",\n      value: async function _removeCO2Sensor(ev) {\n        const entryId = ev.currentTarget.closest(\".row\").entry.entry_id;\n        if (!(await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.energy.delete_integration\")\n        }))) {\n          return;\n        }\n        await deleteConfigEntry(this.hass, entryId);\n        this._fetchCO2SignalConfigEntries();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addFromSource\",\n      value: function _addFromSource() {\n        const gridSource = this.preferences.energy_sources.find(src => src.type === \"grid\");\n        showEnergySettingsGridFlowFromDialog(this, {\n          grid_source: gridSource,\n          saveCallback: async flow => {\n            let preferences;\n            if (!gridSource) {\n              preferences = {\n                ...this.preferences,\n                energy_sources: [...this.preferences.energy_sources, {\n                  ...emptyGridSourceEnergyPreference(),\n                  flow_from: [flow]\n                }]\n              };\n            } else {\n              preferences = {\n                ...this.preferences,\n                energy_sources: this.preferences.energy_sources.map(src => src.type === \"grid\" ? {\n                  ...src,\n                  flow_from: [...gridSource.flow_from, flow]\n                } : src)\n              };\n            }\n            await this._savePreferences(preferences);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addToSource\",\n      value: function _addToSource() {\n        const gridSource = this.preferences.energy_sources.find(src => src.type === \"grid\");\n        showEnergySettingsGridFlowToDialog(this, {\n          grid_source: gridSource,\n          saveCallback: async flow => {\n            let preferences;\n            if (!gridSource) {\n              preferences = {\n                ...this.preferences,\n                energy_sources: [...this.preferences.energy_sources, {\n                  ...emptyGridSourceEnergyPreference(),\n                  flow_to: [flow]\n                }]\n              };\n            } else {\n              preferences = {\n                ...this.preferences,\n                energy_sources: this.preferences.energy_sources.map(src => src.type === \"grid\" ? {\n                  ...src,\n                  flow_to: [...gridSource.flow_to, flow]\n                } : src)\n              };\n            }\n            await this._savePreferences(preferences);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_editFromSource\",\n      value: function _editFromSource(ev) {\n        var _this$statsMetadata3;\n        const origSource = ev.currentTarget.closest(\".row\").source;\n        const gridSource = this.preferences.energy_sources.find(src => src.type === \"grid\");\n        showEnergySettingsGridFlowFromDialog(this, {\n          source: {\n            ...origSource\n          },\n          grid_source: gridSource,\n          metadata: (_this$statsMetadata3 = this.statsMetadata) === null || _this$statsMetadata3 === void 0 ? void 0 : _this$statsMetadata3[origSource.stat_energy_from],\n          saveCallback: async source => {\n            const flowFrom = energySourcesByType(this.preferences).grid[0].flow_from;\n            const preferences = {\n              ...this.preferences,\n              energy_sources: this.preferences.energy_sources.map(src => src.type === \"grid\" ? {\n                ...src,\n                flow_from: flowFrom.map(flow => flow === origSource ? source : flow)\n              } : src)\n            };\n            await this._savePreferences(preferences);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_editToSource\",\n      value: function _editToSource(ev) {\n        var _this$statsMetadata4;\n        const origSource = ev.currentTarget.closest(\".row\").source;\n        const gridSource = this.preferences.energy_sources.find(src => src.type === \"grid\");\n        showEnergySettingsGridFlowToDialog(this, {\n          source: {\n            ...origSource\n          },\n          grid_source: gridSource,\n          metadata: (_this$statsMetadata4 = this.statsMetadata) === null || _this$statsMetadata4 === void 0 ? void 0 : _this$statsMetadata4[origSource.stat_energy_to],\n          saveCallback: async source => {\n            const flowTo = energySourcesByType(this.preferences).grid[0].flow_to;\n            const preferences = {\n              ...this.preferences,\n              energy_sources: this.preferences.energy_sources.map(src => src.type === \"grid\" ? {\n                ...src,\n                flow_to: flowTo.map(flow => flow === origSource ? source : flow)\n              } : src)\n            };\n            await this._savePreferences(preferences);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteFromSource\",\n      value: async function _deleteFromSource(ev) {\n        const sourceToDelete = ev.currentTarget.closest(\".row\").source;\n        if (!(await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.energy.delete_source\")\n        }))) {\n          return;\n        }\n        const flowFrom = energySourcesByType(this.preferences).grid[0].flow_from.filter(flow => flow !== sourceToDelete);\n        const preferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map(source => source.type === \"grid\" ? {\n            ...source,\n            flow_from: flowFrom\n          } : source)\n        };\n        try {\n          await this._savePreferences(preferences);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: `Failed to save config: ${err.message}`\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteToSource\",\n      value: async function _deleteToSource(ev) {\n        const sourceToDelete = ev.currentTarget.closest(\".row\").source;\n        if (!(await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.energy.delete_source\")\n        }))) {\n          return;\n        }\n        const flowTo = energySourcesByType(this.preferences).grid[0].flow_to.filter(flow => flow !== sourceToDelete);\n        const preferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map(source => source.type === \"grid\" ? {\n            ...source,\n            flow_to: flowTo\n          } : source)\n        };\n        try {\n          await this._savePreferences(preferences);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: `Failed to save config: ${err.message}`\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_savePreferences\",\n      value: async function _savePreferences(preferences) {\n        const result = await saveEnergyPreferences(this.hass, preferences);\n        fireEvent(this, \"value-changed\", {\n          value: result\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, energyCardStyles];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiDelete","mdiHomeExportOutline","mdiHomeImportOutline","mdiPencil","mdiTransmissionTower","html","LitElement","customElement","property","state","fireEvent","deleteConfigEntry","getConfigEntries","emptyGridSourceEnergyPreference","energySourcesByType","saveEnergyPreferences","getStatisticLabel","showConfigFlowDialog","showAlertDialog","showConfirmationDialog","haStyle","brandsUrl","documentationUrl","showEnergySettingsGridFlowFromDialog","showEnergySettingsGridFlowToDialog","energyCardStyles","EnergyGridSettings","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","firstUpdated","_fetchCO2SignalConfigEntries","render","_this$hass$themes","_this$_co2ConfigEntry","_this$hass$themes2","gridIdx","preferences","energy_sources","findIndex","source","type","gridSource","gridValidation","validationResult","hass","localize","flow_from","map","flow","_this$statsMetadata","entityState","states","stat_energy_from","attributes","icon","statsMetadata","_editFromSource","_deleteFromSource","_addFromSource","flow_to","_this$statsMetadata2","stat_energy_to","_editToSource","_deleteToSource","_addToSource","_co2ConfigEntry","domain","darkOptimized","themes","darkMode","title","_removeCO2Sensor","_addCO2Sensor","entries","length","undefined","startFlowHandler","dialogClosedCallback","ev","entryId","currentTarget","closest","entry","entry_id","find","src","grid_source","saveCallback","_savePreferences","_this$statsMetadata3","origSource","metadata","flowFrom","grid","_this$statsMetadata4","flowTo","sourceToDelete","filter","err","message","result","static","styles"],"sources":["/workspaces/frontend/src/panels/config/energy/components/ha-energy-grid-settings.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiDelete,\n  mdiHomeExportOutline,\n  mdiHomeImportOutline,\n  mdiPencil,\n  mdiTransmissionTower,\n} from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  getConfigEntries,\n} from \"../../../../data/config_entries\";\nimport {\n  emptyGridSourceEnergyPreference,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  energySourcesByType,\n  EnergyValidationIssue,\n  FlowFromGridSourceEnergyPreference,\n  FlowToGridSourceEnergyPreference,\n  GridSourceTypeEnergyPreference,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport {\n  showEnergySettingsGridFlowFromDialog,\n  showEnergySettingsGridFlowToDialog,\n} from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-grid-settings\")\nexport class EnergyGridSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  @state() private _co2ConfigEntry?: ConfigEntry;\n\n  protected firstUpdated() {\n    this._fetchCO2SignalConfigEntries();\n  }\n\n  protected render(): TemplateResult {\n    const gridIdx = this.preferences.energy_sources.findIndex(\n      (source) => source.type === \"grid\"\n    );\n\n    let gridSource: GridSourceTypeEnergyPreference;\n    let gridValidation: EnergyValidationIssue[] | undefined;\n\n    if (gridIdx === -1) {\n      gridSource = emptyGridSourceEnergyPreference();\n    } else {\n      gridSource = this.preferences.energy_sources[\n        gridIdx\n      ] as GridSourceTypeEnergyPreference;\n      if (this.validationResult) {\n        gridValidation = this.validationResult.energy_sources[gridIdx];\n      }\n    }\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.grid.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/energy/electricity-grid/\"\n              )}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.learn_more\"\n              )}</a\n            >\n          </p>\n          ${gridValidation\n            ? html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${gridValidation}\n                ></ha-energy-validation-result>\n              `\n            : \"\"}\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.grid.grid_consumption\"\n            )}\n          </h3>\n          ${gridSource.flow_from.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_from];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState?.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeImportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_from,\n                    this.statsMetadata?.[flow.stat_energy_from]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_consumption\"\n                  )}\n                  @click=${this._editFromSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_consumption\"\n                  )}\n                  @click=${this._deleteFromSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeImportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addFromSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_consumption\"\n              )}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.return_to_grid\")}\n          </h3>\n          ${gridSource.flow_to.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_to];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeExportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_to,\n                    this.statsMetadata?.[flow.stat_energy_to]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_return\"\n                  )}\n                  @click=${this._editToSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_return\"\n                  )}\n                  @click=${this._deleteToSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeExportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addToSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_return\"\n              )}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.grid.grid_carbon_footprint\"\n            )}\n          </h3>\n          ${this._co2ConfigEntry\n            ? html`<div class=\"row\" .entry=${this._co2ConfigEntry}>\n                <img\n                  alt=\"\"\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  src=${brandsUrl({\n                    domain: \"co2signal\",\n                    type: \"icon\",\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                />\n                <span class=\"content\">${this._co2ConfigEntry.title}</span>\n                <a\n                  href=${`/config/integrations/integration/${this._co2ConfigEntry?.domain}`}\n                >\n                  <ha-icon-button .path=${mdiPencil}></ha-icon-button>\n                </a>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.remove_co2_signal\"\n                  )}\n                  @click=${this._removeCO2Sensor}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>`\n            : html`\n                <div class=\"row border-bottom\">\n                  <img\n                    alt=\"\"\n                    crossorigin=\"anonymous\"\n                    referrerpolicy=\"no-referrer\"\n                    src=${brandsUrl({\n                      domain: \"co2signal\",\n                      type: \"icon\",\n                      darkOptimized: this.hass.themes?.darkMode,\n                    })}\n                  />\n                  <mwc-button @click=${this._addCO2Sensor}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.energy.grid.add_co2_signal\"\n                    )}\n                  </mwc-button>\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _fetchCO2SignalConfigEntries() {\n    const entries = await getConfigEntries(this.hass, { domain: \"co2signal\" });\n    this._co2ConfigEntry = entries.length ? entries[0] : undefined;\n  }\n\n  private _addCO2Sensor() {\n    showConfigFlowDialog(this, {\n      startFlowHandler: \"co2signal\",\n      dialogClosedCallback: () => {\n        this._fetchCO2SignalConfigEntries();\n      },\n    });\n  }\n\n  private async _removeCO2Sensor(ev) {\n    const entryId = ev.currentTarget.closest(\".row\").entry.entry_id;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_integration\"),\n      }))\n    ) {\n      return;\n    }\n\n    await deleteConfigEntry(this.hass, entryId);\n    this._fetchCO2SignalConfigEntries();\n  }\n\n  private _addFromSource() {\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowFromDialog(this, {\n      grid_source: gridSource,\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_from: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_from: [...gridSource.flow_from, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _addToSource() {\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowToDialog(this, {\n      grid_source: gridSource,\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_to: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_to: [...gridSource.flow_to, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editFromSource(ev) {\n    const origSource: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowFromDialog(this, {\n      source: { ...origSource },\n      grid_source: gridSource,\n      metadata: this.statsMetadata?.[origSource.stat_energy_from],\n      saveCallback: async (source) => {\n        const flowFrom = energySourcesByType(this.preferences).grid![0]\n          .flow_from;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_from: flowFrom.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editToSource(ev) {\n    const origSource: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowToDialog(this, {\n      source: { ...origSource },\n      grid_source: gridSource,\n      metadata: this.statsMetadata?.[origSource.stat_energy_to],\n      saveCallback: async (source) => {\n        const flowTo = energySourcesByType(this.preferences).grid![0].flow_to;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_to: flowTo.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private async _deleteFromSource(ev) {\n    const sourceToDelete: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowFrom = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_from.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_from: flowFrom } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _deleteToSource(ev) {\n    const sourceToDelete: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowTo = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_to.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_to: flowTo } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-grid-settings\": EnergyGridSettings;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}