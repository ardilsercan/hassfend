{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport { BINARY_STATE_OFF, BINARY_STATE_ON, DOMAINS_WITH_DYNAMIC_PICTURE } from \"../common/const\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { autoCaseNoun } from \"../common/translations/auto_case_noun\";\nimport { UNAVAILABLE, UNKNOWN } from \"./entity\";\nvar LOGBOOK_LOCALIZE_PATH = \"ui.components.logbook.messages\";\nexport var CONTINUOUS_DOMAINS = [\"counter\", \"proximity\", \"sensor\", \"zone\"];\n//\n// Localization mapping for all the triggers in core\n// in homeassistant.components.homeassistant.triggers\n//\nvar triggerPhrases = {\n  \"numeric state of\": \"triggered_by_numeric_state_of\",\n  // number state trigger\n  \"state of\": \"triggered_by_state_of\",\n  // state trigger\n  event: \"triggered_by_event\",\n  // event trigger\n  time: \"triggered_by_time\",\n  // time trigger\n  \"time pattern\": \"triggered_by_time_pattern\",\n  // time trigger\n  \"Indexline Technology stopping\": \"triggered_by_homeassistant_stopping\",\n  // stop event\n  \"Indexline Technology starting\": \"triggered_by_homeassistant_starting\" // start event\n};\nexport var getLogbookDataForContext = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hass, startDate, contextId) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", getLogbookDataFromServer(hass, startDate, undefined, undefined, contextId));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getLogbookDataForContext(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getLogbookDataFromServer = function getLogbookDataFromServer(hass, startDate, endDate, entityIds, contextId, deviceIds) {\n  // If all specified filters are empty lists, we can return an empty list.\n  if ((entityIds || deviceIds) && (!entityIds || entityIds.length === 0) && (!deviceIds || deviceIds.length === 0)) {\n    return Promise.resolve([]);\n  }\n  var params = {\n    type: \"logbook/get_events\",\n    start_time: startDate\n  };\n  if (endDate) {\n    params.end_time = endDate;\n  }\n  if (entityIds !== null && entityIds !== void 0 && entityIds.length) {\n    params.entity_ids = entityIds;\n  }\n  if (deviceIds !== null && deviceIds !== void 0 && deviceIds.length) {\n    params.device_ids = deviceIds;\n  }\n  if (contextId) {\n    params.context_id = contextId;\n  }\n  return hass.callWS(params);\n};\nexport var subscribeLogbook = function subscribeLogbook(hass, callbackFunction, startDate, endDate, entityIds, deviceIds) {\n  // If all specified filters are empty lists, we can return an empty list.\n  if ((entityIds || deviceIds) && (!entityIds || entityIds.length === 0) && (!deviceIds || deviceIds.length === 0)) {\n    return Promise.reject(\"No entities or devices\");\n  }\n  var params = {\n    type: \"logbook/event_stream\",\n    start_time: startDate,\n    end_time: endDate\n  };\n  if (entityIds !== null && entityIds !== void 0 && entityIds.length) {\n    params.entity_ids = entityIds;\n  }\n  if (deviceIds !== null && deviceIds !== void 0 && deviceIds.length) {\n    params.device_ids = deviceIds;\n  }\n  return hass.connection.subscribeMessage(function (message) {\n    return callbackFunction(message);\n  }, params);\n};\nexport var createHistoricState = function createHistoricState(currentStateObj, state) {\n  return {\n    entity_id: currentStateObj.entity_id,\n    state: state,\n    attributes: {\n      // Rebuild the historical state by copying static attributes only\n      device_class: currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.device_class,\n      source_type: currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.source_type,\n      has_date: currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.has_date,\n      has_time: currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.has_time,\n      // We do not want to use dynamic entity pictures (e.g., from media player) for the log book rendering,\n      // as they would present a false state in the log (played media right now vs actual historic data).\n      entity_picture_local: DOMAINS_WITH_DYNAMIC_PICTURE.has(computeDomain(currentStateObj.entity_id)) ? undefined : currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.entity_picture_local,\n      entity_picture: DOMAINS_WITH_DYNAMIC_PICTURE.has(computeDomain(currentStateObj.entity_id)) ? undefined : currentStateObj === null || currentStateObj === void 0 ? void 0 : currentStateObj.attributes.entity_picture\n    }\n  };\n};\nexport var localizeTriggerSource = function localizeTriggerSource(localize, source) {\n  for (var triggerPhrase in triggerPhrases) {\n    if (source.startsWith(triggerPhrase)) {\n      return source.replace(triggerPhrase, \"\".concat(localize(\"ui.components.logbook.\".concat(triggerPhrases[triggerPhrase]))));\n    }\n  }\n  return source;\n};\nexport var localizeStateMessage = function localizeStateMessage(hass, localize, state, stateObj, domain) {\n  switch (domain) {\n    case \"device_tracker\":\n    case \"person\":\n      if (state === \"not_home\") {\n        return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_away\"));\n      }\n      if (state === \"home\") {\n        return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_at_home\"));\n      }\n      return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_at_state\"), {\n        state: state\n      });\n    case \"sun\":\n      return state === \"above_horizon\" ? localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".rose\")) : localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".set\"));\n    case \"binary_sensor\":\n      {\n        var isOn = state === BINARY_STATE_ON;\n        var isOff = state === BINARY_STATE_OFF;\n        var device_class = stateObj.attributes.device_class;\n        switch (device_class) {\n          case \"battery\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_low\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_normal\"));\n            }\n            break;\n          case \"connectivity\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_connected\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_disconnected\"));\n            }\n            break;\n          case \"door\":\n          case \"garage_door\":\n          case \"opening\":\n          case \"window\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_opened\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_closed\"));\n            }\n            break;\n          case \"lock\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_unlocked\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_locked\"));\n            }\n            break;\n          case \"plug\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_plugged_in\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_unplugged\"));\n            }\n            break;\n          case \"presence\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_at_home\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_away\"));\n            }\n            break;\n          case \"safety\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_unsafe\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_safe\"));\n            }\n            break;\n          case \"cold\":\n          case \"gas\":\n          case \"heat\":\n          case \"moisture\":\n          case \"motion\":\n          case \"occupancy\":\n          case \"power\":\n          case \"problem\":\n          case \"smoke\":\n          case \"sound\":\n          case \"vibration\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".detected_device_class\"), {\n                device_class: autoCaseNoun(localize(\"component.binary_sensor.entity_component.\".concat(device_class, \".name\")), hass.language)\n              });\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".cleared_device_class\"), {\n                device_class: autoCaseNoun(localize(\"component.binary_sensor.entity_component.\".concat(device_class, \".name\")), hass.language)\n              });\n            }\n            break;\n          case \"tamper\":\n            if (isOn) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".detected_tampering\"));\n            }\n            if (isOff) {\n              return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".cleared_tampering\"));\n            }\n            break;\n        }\n        break;\n      }\n    case \"cover\":\n      switch (state) {\n        case \"open\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_opened\"));\n        case \"opening\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".is_opening\"));\n        case \"closing\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".is_closing\"));\n        case \"closed\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_closed\"));\n      }\n      break;\n    case \"event\":\n      {\n        var _hass$formatEntityAtt;\n        return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".detected_event_no_type\"));\n\n        // TODO: This is not working yet, as we don't get historic attribute values\n\n        var event_type = (_hass$formatEntityAtt = hass.formatEntityAttributeValue(stateObj, \"event_type\")) === null || _hass$formatEntityAtt === void 0 ? void 0 : _hass$formatEntityAtt.toString();\n        if (!event_type) {\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".detected_unknown_event\"));\n        }\n        return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".detected_event\"), {\n          event_type: autoCaseNoun(event_type, hass.language)\n        });\n      }\n    case \"lock\":\n      switch (state) {\n        case \"unlocked\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_unlocked\"));\n        case \"locking\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".is_locking\"));\n        case \"unlocking\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".is_unlocking\"));\n        case \"locked\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".was_locked\"));\n        case \"jammed\":\n          return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".is_jammed\"));\n      }\n      break;\n  }\n  if (state === BINARY_STATE_ON) {\n    return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".turned_on\"));\n  }\n  if (state === BINARY_STATE_OFF) {\n    return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".turned_off\"));\n  }\n  if (state === UNKNOWN) {\n    return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".became_unknown\"));\n  }\n  if (state === UNAVAILABLE) {\n    return localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".became_unavailable\"));\n  }\n  return hass.localize(\"\".concat(LOGBOOK_LOCALIZE_PATH, \".changed_to_state\"), {\n    state: stateObj ? hass.formatEntityState(stateObj, state) : state\n  });\n};\nexport var filterLogbookCompatibleEntities = function filterLogbookCompatibleEntities(entity) {\n  return computeStateDomain(entity) !== \"sensor\" || entity.attributes.unit_of_measurement === undefined && entity.attributes.state_class === undefined;\n};","map":{"version":3,"names":["BINARY_STATE_OFF","BINARY_STATE_ON","DOMAINS_WITH_DYNAMIC_PICTURE","computeDomain","computeStateDomain","autoCaseNoun","UNAVAILABLE","UNKNOWN","LOGBOOK_LOCALIZE_PATH","CONTINUOUS_DOMAINS","triggerPhrases","event","time","getLogbookDataForContext","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hass","startDate","contextId","wrap","_callee$","_context","prev","next","abrupt","getLogbookDataFromServer","undefined","stop","_x","_x2","_x3","apply","arguments","endDate","entityIds","deviceIds","length","Promise","resolve","params","type","start_time","end_time","entity_ids","device_ids","context_id","callWS","subscribeLogbook","callbackFunction","reject","connection","subscribeMessage","message","createHistoricState","currentStateObj","state","entity_id","attributes","device_class","source_type","has_date","has_time","entity_picture_local","has","entity_picture","localizeTriggerSource","localize","source","triggerPhrase","startsWith","replace","concat","localizeStateMessage","stateObj","domain","isOn","isOff","language","_hass$formatEntityAtt","event_type","formatEntityAttributeValue","toString","formatEntityState","filterLogbookCompatibleEntities","entity","unit_of_measurement","state_class"],"sources":["/workspaces/frontend/src/data/logbook.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  BINARY_STATE_OFF,\n  BINARY_STATE_ON,\n  DOMAINS_WITH_DYNAMIC_PICTURE,\n} from \"../common/const\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { autoCaseNoun } from \"../common/translations/auto_case_noun\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { HaEntityPickerEntityFilterFunc } from \"../components/entity/ha-entity-picker\";\nimport { HomeAssistant } from \"../types\";\nimport { UNAVAILABLE, UNKNOWN } from \"./entity\";\n\nconst LOGBOOK_LOCALIZE_PATH = \"ui.components.logbook.messages\";\nexport const CONTINUOUS_DOMAINS = [\"counter\", \"proximity\", \"sensor\", \"zone\"];\n\nexport interface LogbookStreamMessage {\n  events: LogbookEntry[];\n  start_time?: number; // Start time of this historical chunk\n  end_time?: number; // End time of this historical chunk\n  partial?: boolean; // Indiciates more historical chunks are coming\n}\n\nexport interface LogbookEntry {\n  // Base data\n  when: number; // Python timestamp. Do *1000 to get JS timestamp.\n  name: string;\n  message?: string;\n  entity_id?: string;\n  icon?: string;\n  source?: string; // The trigger source\n  domain?: string;\n  state?: string; // The state of the entity\n  // Context data\n  context_id?: string;\n  context_user_id?: string;\n  context_event_type?: string;\n  context_domain?: string;\n  context_service?: string; // Service calls only\n  context_entity_id?: string;\n  context_entity_id_name?: string; // Legacy, not longer sent\n  context_name?: string;\n  context_state?: string; // The state of the entity\n  context_source?: string; // The trigger source\n  context_message?: string;\n}\n\n//\n// Localization mapping for all the triggers in core\n// in homeassistant.components.homeassistant.triggers\n//\nconst triggerPhrases = {\n  \"numeric state of\": \"triggered_by_numeric_state_of\", // number state trigger\n  \"state of\": \"triggered_by_state_of\", // state trigger\n  event: \"triggered_by_event\", // event trigger\n  time: \"triggered_by_time\", // time trigger\n  \"time pattern\": \"triggered_by_time_pattern\", // time trigger\n  \"Indexline Technology stopping\": \"triggered_by_homeassistant_stopping\", // stop event\n  \"Indexline Technology starting\": \"triggered_by_homeassistant_starting\", // start event\n};\n\nexport const getLogbookDataForContext = async (\n  hass: HomeAssistant,\n  startDate: string,\n  contextId?: string\n): Promise<LogbookEntry[]> =>\n  getLogbookDataFromServer(hass, startDate, undefined, undefined, contextId);\n\nconst getLogbookDataFromServer = (\n  hass: HomeAssistant,\n  startDate: string,\n  endDate?: string,\n  entityIds?: string[],\n  contextId?: string,\n  deviceIds?: string[]\n): Promise<LogbookEntry[]> => {\n  // If all specified filters are empty lists, we can return an empty list.\n  if (\n    (entityIds || deviceIds) &&\n    (!entityIds || entityIds.length === 0) &&\n    (!deviceIds || deviceIds.length === 0)\n  ) {\n    return Promise.resolve([]);\n  }\n\n  const params: any = {\n    type: \"logbook/get_events\",\n    start_time: startDate,\n  };\n  if (endDate) {\n    params.end_time = endDate;\n  }\n  if (entityIds?.length) {\n    params.entity_ids = entityIds;\n  }\n  if (deviceIds?.length) {\n    params.device_ids = deviceIds;\n  }\n  if (contextId) {\n    params.context_id = contextId;\n  }\n  return hass.callWS<LogbookEntry[]>(params);\n};\n\nexport const subscribeLogbook = (\n  hass: HomeAssistant,\n  callbackFunction: (message: LogbookStreamMessage) => void,\n  startDate: string,\n  endDate: string,\n  entityIds?: string[],\n  deviceIds?: string[]\n): Promise<() => Promise<void>> => {\n  // If all specified filters are empty lists, we can return an empty list.\n  if (\n    (entityIds || deviceIds) &&\n    (!entityIds || entityIds.length === 0) &&\n    (!deviceIds || deviceIds.length === 0)\n  ) {\n    return Promise.reject(\"No entities or devices\");\n  }\n  const params: any = {\n    type: \"logbook/event_stream\",\n    start_time: startDate,\n    end_time: endDate,\n  };\n  if (entityIds?.length) {\n    params.entity_ids = entityIds;\n  }\n  if (deviceIds?.length) {\n    params.device_ids = deviceIds;\n  }\n  return hass.connection.subscribeMessage<LogbookStreamMessage>(\n    (message) => callbackFunction(message),\n    params\n  );\n};\n\nexport const createHistoricState = (\n  currentStateObj: HassEntity,\n  state?: string\n): HassEntity => <HassEntity>(<unknown>{\n    entity_id: currentStateObj.entity_id,\n    state: state,\n    attributes: {\n      // Rebuild the historical state by copying static attributes only\n      device_class: currentStateObj?.attributes.device_class,\n      source_type: currentStateObj?.attributes.source_type,\n      has_date: currentStateObj?.attributes.has_date,\n      has_time: currentStateObj?.attributes.has_time,\n      // We do not want to use dynamic entity pictures (e.g., from media player) for the log book rendering,\n      // as they would present a false state in the log (played media right now vs actual historic data).\n      entity_picture_local: DOMAINS_WITH_DYNAMIC_PICTURE.has(\n        computeDomain(currentStateObj.entity_id)\n      )\n        ? undefined\n        : currentStateObj?.attributes.entity_picture_local,\n      entity_picture: DOMAINS_WITH_DYNAMIC_PICTURE.has(\n        computeDomain(currentStateObj.entity_id)\n      )\n        ? undefined\n        : currentStateObj?.attributes.entity_picture,\n    },\n  });\n\nexport const localizeTriggerSource = (\n  localize: LocalizeFunc,\n  source: string\n) => {\n  for (const triggerPhrase in triggerPhrases) {\n    if (source.startsWith(triggerPhrase)) {\n      return source.replace(\n        triggerPhrase,\n        `${localize(`ui.components.logbook.${triggerPhrases[triggerPhrase]}`)}`\n      );\n    }\n  }\n  return source;\n};\n\nexport const localizeStateMessage = (\n  hass: HomeAssistant,\n  localize: LocalizeFunc,\n  state: string,\n  stateObj: HassEntity,\n  domain: string\n): string => {\n  switch (domain) {\n    case \"device_tracker\":\n    case \"person\":\n      if (state === \"not_home\") {\n        return localize(`${LOGBOOK_LOCALIZE_PATH}.was_away`);\n      }\n      if (state === \"home\") {\n        return localize(`${LOGBOOK_LOCALIZE_PATH}.was_at_home`);\n      }\n      return localize(`${LOGBOOK_LOCALIZE_PATH}.was_at_state`, { state });\n\n    case \"sun\":\n      return state === \"above_horizon\"\n        ? localize(`${LOGBOOK_LOCALIZE_PATH}.rose`)\n        : localize(`${LOGBOOK_LOCALIZE_PATH}.set`);\n\n    case \"binary_sensor\": {\n      const isOn = state === BINARY_STATE_ON;\n      const isOff = state === BINARY_STATE_OFF;\n      const device_class = stateObj.attributes.device_class;\n\n      switch (device_class) {\n        case \"battery\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_low`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_normal`);\n          }\n          break;\n\n        case \"connectivity\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_connected`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_disconnected`);\n          }\n          break;\n\n        case \"door\":\n        case \"garage_door\":\n        case \"opening\":\n        case \"window\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_opened`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_closed`);\n          }\n          break;\n\n        case \"lock\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_unlocked`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_locked`);\n          }\n          break;\n\n        case \"plug\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_plugged_in`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_unplugged`);\n          }\n          break;\n\n        case \"presence\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_at_home`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_away`);\n          }\n          break;\n\n        case \"safety\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_unsafe`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.was_safe`);\n          }\n          break;\n\n        case \"cold\":\n        case \"gas\":\n        case \"heat\":\n        case \"moisture\":\n        case \"motion\":\n        case \"occupancy\":\n        case \"power\":\n        case \"problem\":\n        case \"smoke\":\n        case \"sound\":\n        case \"vibration\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.detected_device_class`, {\n              device_class: autoCaseNoun(\n                localize(\n                  `component.binary_sensor.entity_component.${device_class}.name`\n                ),\n                hass.language\n              ),\n            });\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.cleared_device_class`, {\n              device_class: autoCaseNoun(\n                localize(\n                  `component.binary_sensor.entity_component.${device_class}.name`\n                ),\n                hass.language\n              ),\n            });\n          }\n          break;\n\n        case \"tamper\":\n          if (isOn) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.detected_tampering`);\n          }\n          if (isOff) {\n            return localize(`${LOGBOOK_LOCALIZE_PATH}.cleared_tampering`);\n          }\n          break;\n      }\n\n      break;\n    }\n\n    case \"cover\":\n      switch (state) {\n        case \"open\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.was_opened`);\n        case \"opening\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.is_opening`);\n        case \"closing\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.is_closing`);\n        case \"closed\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.was_closed`);\n      }\n      break;\n\n    case \"event\": {\n      return localize(`${LOGBOOK_LOCALIZE_PATH}.detected_event_no_type`);\n\n      // TODO: This is not working yet, as we don't get historic attribute values\n\n      const event_type = hass\n        .formatEntityAttributeValue(stateObj, \"event_type\")\n        ?.toString();\n\n      if (!event_type) {\n        return localize(`${LOGBOOK_LOCALIZE_PATH}.detected_unknown_event`);\n      }\n\n      return localize(`${LOGBOOK_LOCALIZE_PATH}.detected_event`, {\n        event_type: autoCaseNoun(event_type, hass.language),\n      });\n    }\n\n    case \"lock\":\n      switch (state) {\n        case \"unlocked\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.was_unlocked`);\n        case \"locking\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.is_locking`);\n        case \"unlocking\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.is_unlocking`);\n        case \"locked\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.was_locked`);\n        case \"jammed\":\n          return localize(`${LOGBOOK_LOCALIZE_PATH}.is_jammed`);\n      }\n      break;\n  }\n\n  if (state === BINARY_STATE_ON) {\n    return localize(`${LOGBOOK_LOCALIZE_PATH}.turned_on`);\n  }\n\n  if (state === BINARY_STATE_OFF) {\n    return localize(`${LOGBOOK_LOCALIZE_PATH}.turned_off`);\n  }\n\n  if (state === UNKNOWN) {\n    return localize(`${LOGBOOK_LOCALIZE_PATH}.became_unknown`);\n  }\n\n  if (state === UNAVAILABLE) {\n    return localize(`${LOGBOOK_LOCALIZE_PATH}.became_unavailable`);\n  }\n\n  return hass.localize(`${LOGBOOK_LOCALIZE_PATH}.changed_to_state`, {\n    state: stateObj ? hass.formatEntityState(stateObj, state) : state,\n  });\n};\n\nexport const filterLogbookCompatibleEntities: HaEntityPickerEntityFilterFunc = (\n  entity\n) =>\n  computeStateDomain(entity) !== \"sensor\" ||\n  (entity.attributes.unit_of_measurement === undefined &&\n    entity.attributes.state_class === undefined);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}