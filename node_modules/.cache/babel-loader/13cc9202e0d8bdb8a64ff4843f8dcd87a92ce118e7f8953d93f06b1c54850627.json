{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { debounce } from \"../common/util/debounce\";\nimport { customIcons } from \"../data/custom_icons\";\nimport { MDI_PREFIXES, checkCacheVersion, findIconChunk, getIcon, writeCache } from \"../data/iconsets\";\nimport \"./ha-svg-icon\";\nconst mdiDeprecatedIcons = {};\nconst chunks = {};\n\n// Supervisor doesn't use icons, and should not update/downgrade the icon DB.\nif (!__SUPERVISOR__) {\n  checkCacheVersion();\n}\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\nconst cachedIcons = {};\nexport let HaIcon = _decorate([customElement(\"ha-icon\")], function (_initialize, _LitElement) {\n  class HaIcon extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaIcon,\n    d: [{\n      kind: \"field\",\n      decorators: [property()],\n      key: \"icon\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_path\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_secondaryPath\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_viewBox\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_legacy\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(HaIcon.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"icon\")) {\n          this._path = undefined;\n          this._secondaryPath = undefined;\n          this._viewBox = undefined;\n          this._loadIcon();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.icon) {\n          return nothing;\n        }\n        if (this._legacy) {\n          return html`<!-- @ts-ignore we don't provice the iron-icon element -->\n        <iron-icon .icon=${this.icon}></iron-icon>`;\n        }\n        return html`<ha-svg-icon\n      .path=${this._path}\n      .secondaryPath=${this._secondaryPath}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_loadIcon\",\n      value: async function _loadIcon() {\n        if (!this.icon) {\n          return;\n        }\n        const requestedIcon = this.icon;\n        const [iconPrefix, origIconName] = this.icon.split(\":\", 2);\n        let iconName = origIconName;\n        if (!iconPrefix || !iconName) {\n          return;\n        }\n        if (!MDI_PREFIXES.includes(iconPrefix)) {\n          const customIcon = customIcons[iconPrefix];\n          if (customIcon) {\n            if (customIcon && typeof customIcon.getIcon === \"function\") {\n              this._setCustomPath(customIcon.getIcon(iconName), requestedIcon);\n            }\n            return;\n          }\n          this._legacy = true;\n          return;\n        }\n        this._legacy = false;\n        if (iconName in mdiDeprecatedIcons) {\n          const deprecatedIcon = mdiDeprecatedIcons[iconName];\n          let message;\n          if (deprecatedIcon.newName) {\n            message = `Icon ${iconPrefix}:${iconName} was renamed to ${iconPrefix}:${deprecatedIcon.newName}, please change your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n            iconName = deprecatedIcon.newName;\n          } else {\n            message = `Icon ${iconPrefix}:${iconName} was removed from MDI, please replace this icon with an other icon in your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n          }\n          // eslint-disable-next-line no-console\n          console.warn(message);\n          fireEvent(this, \"write_log\", {\n            level: \"warning\",\n            message\n          });\n        }\n        if (iconName in cachedIcons) {\n          this._path = cachedIcons[iconName];\n          return;\n        }\n        if (iconName === \"home-assistant\") {\n          const icon = (await import(\"../resources/home-assistant-logo-svg\")).mdiHomeAssistant;\n          if (this.icon === requestedIcon) {\n            this._path = icon;\n          }\n          cachedIcons[iconName] = icon;\n          return;\n        }\n        let databaseIcon;\n        try {\n          databaseIcon = await getIcon(iconName);\n        } catch (_err) {\n          // Firefox in private mode doesn't support IDB\n          // iOS Safari sometimes doesn't open the DB\n          databaseIcon = undefined;\n        }\n        if (databaseIcon) {\n          if (this.icon === requestedIcon) {\n            this._path = databaseIcon;\n          }\n          cachedIcons[iconName] = databaseIcon;\n          return;\n        }\n        const chunk = findIconChunk(iconName);\n        if (chunk in chunks) {\n          this._setPath(chunks[chunk], iconName, requestedIcon);\n          return;\n        }\n        const iconPromise = fetch(`/static/mdi/${chunk}.json`).then(response => response.json());\n        chunks[chunk] = iconPromise;\n        this._setPath(iconPromise, iconName, requestedIcon);\n        debouncedWriteCache();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setCustomPath\",\n      value: async function _setCustomPath(promise, requestedIcon) {\n        const icon = await promise;\n        if (this.icon !== requestedIcon) {\n          return;\n        }\n        this._path = icon.path;\n        this._secondaryPath = icon.secondaryPath;\n        this._viewBox = icon.viewBox;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setPath\",\n      value: async function _setPath(promise, iconName, requestedIcon) {\n        const iconPack = await promise;\n        if (this.icon === requestedIcon) {\n          this._path = iconPack[iconName];\n        }\n        cachedIcons[iconName] = iconPack[iconName];\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        fill: currentcolor;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","state","fireEvent","debounce","customIcons","MDI_PREFIXES","checkCacheVersion","findIconChunk","getIcon","writeCache","mdiDeprecatedIcons","chunks","__SUPERVISOR__","debouncedWriteCache","cachedIcons","HaIcon","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","key","value","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","has","_path","undefined","_secondaryPath","_viewBox","_loadIcon","render","icon","_legacy","requestedIcon","iconPrefix","origIconName","split","iconName","includes","customIcon","_setCustomPath","deprecatedIcon","message","newName","removeIn","console","warn","level","mdiHomeAssistant","databaseIcon","_err","chunk","_setPath","iconPromise","fetch","then","response","json","promise","path","secondaryPath","viewBox","iconPack","static","styles"],"sources":["/workspaces/frontend/src/components/ha-icon.ts"],"sourcesContent":["import {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { debounce } from \"../common/util/debounce\";\nimport { CustomIcon, customIcons } from \"../data/custom_icons\";\nimport {\n  Chunks,\n  Icons,\n  MDI_PREFIXES,\n  checkCacheVersion,\n  findIconChunk,\n  getIcon,\n  writeCache,\n} from \"../data/iconsets\";\nimport \"./ha-svg-icon\";\n\ninterface DeprecatedIcon {\n  [key: string]: {\n    removeIn: string;\n    newName?: string;\n  };\n}\n\nconst mdiDeprecatedIcons: DeprecatedIcon = {};\n\nconst chunks: Chunks = {};\n\n// Supervisor doesn't use icons, and should not update/downgrade the icon DB.\nif (!__SUPERVISOR__) {\n  checkCacheVersion();\n}\n\nconst debouncedWriteCache = debounce(() => writeCache(chunks), 2000);\n\nconst cachedIcons: Record<string, string> = {};\n\n@customElement(\"ha-icon\")\nexport class HaIcon extends LitElement {\n  @property() public icon?: string;\n\n  @state() private _path?: string;\n\n  @state() private _secondaryPath?: string;\n\n  @state() private _viewBox?: string;\n\n  @state() private _legacy = false;\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"icon\")) {\n      this._path = undefined;\n      this._secondaryPath = undefined;\n      this._viewBox = undefined;\n      this._loadIcon();\n    }\n  }\n\n  protected render() {\n    if (!this.icon) {\n      return nothing;\n    }\n    if (this._legacy) {\n      return html`<!-- @ts-ignore we don't provice the iron-icon element -->\n        <iron-icon .icon=${this.icon}></iron-icon>`;\n    }\n    return html`<ha-svg-icon\n      .path=${this._path}\n      .secondaryPath=${this._secondaryPath}\n      .viewBox=${this._viewBox}\n    ></ha-svg-icon>`;\n  }\n\n  private async _loadIcon() {\n    if (!this.icon) {\n      return;\n    }\n    const requestedIcon = this.icon;\n    const [iconPrefix, origIconName] = this.icon.split(\":\", 2);\n\n    let iconName = origIconName;\n\n    if (!iconPrefix || !iconName) {\n      return;\n    }\n\n    if (!MDI_PREFIXES.includes(iconPrefix)) {\n      const customIcon = customIcons[iconPrefix];\n      if (customIcon) {\n        if (customIcon && typeof customIcon.getIcon === \"function\") {\n          this._setCustomPath(customIcon.getIcon(iconName), requestedIcon);\n        }\n        return;\n      }\n      this._legacy = true;\n      return;\n    }\n\n    this._legacy = false;\n\n    if (iconName in mdiDeprecatedIcons) {\n      const deprecatedIcon = mdiDeprecatedIcons[iconName];\n      let message: string;\n\n      if (deprecatedIcon.newName) {\n        message = `Icon ${iconPrefix}:${iconName} was renamed to ${iconPrefix}:${deprecatedIcon.newName}, please change your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n        iconName = deprecatedIcon.newName!;\n      } else {\n        message = `Icon ${iconPrefix}:${iconName} was removed from MDI, please replace this icon with an other icon in your config, it will be removed in version ${deprecatedIcon.removeIn}.`;\n      }\n      // eslint-disable-next-line no-console\n      console.warn(message);\n      fireEvent(this, \"write_log\", {\n        level: \"warning\",\n        message,\n      });\n    }\n\n    if (iconName in cachedIcons) {\n      this._path = cachedIcons[iconName];\n      return;\n    }\n\n    if (iconName === \"home-assistant\") {\n      const icon = (await import(\"../resources/home-assistant-logo-svg\"))\n        .mdiHomeAssistant;\n\n      if (this.icon === requestedIcon) {\n        this._path = icon;\n      }\n      cachedIcons[iconName] = icon;\n      return;\n    }\n\n    let databaseIcon: string | undefined;\n    try {\n      databaseIcon = await getIcon(iconName);\n    } catch (_err) {\n      // Firefox in private mode doesn't support IDB\n      // iOS Safari sometimes doesn't open the DB\n      databaseIcon = undefined;\n    }\n\n    if (databaseIcon) {\n      if (this.icon === requestedIcon) {\n        this._path = databaseIcon;\n      }\n      cachedIcons[iconName] = databaseIcon;\n      return;\n    }\n    const chunk = findIconChunk(iconName);\n\n    if (chunk in chunks) {\n      this._setPath(chunks[chunk], iconName, requestedIcon);\n      return;\n    }\n\n    const iconPromise = fetch(`/static/mdi/${chunk}.json`).then((response) =>\n      response.json()\n    );\n    chunks[chunk] = iconPromise;\n    this._setPath(iconPromise, iconName, requestedIcon);\n    debouncedWriteCache();\n  }\n\n  private async _setCustomPath(\n    promise: Promise<CustomIcon>,\n    requestedIcon: string\n  ) {\n    const icon = await promise;\n    if (this.icon !== requestedIcon) {\n      return;\n    }\n    this._path = icon.path;\n    this._secondaryPath = icon.secondaryPath;\n    this._viewBox = icon.viewBox;\n  }\n\n  private async _setPath(\n    promise: Promise<Icons>,\n    iconName: string,\n    requestedIcon: string\n  ) {\n    const iconPack = await promise;\n    if (this.icon === requestedIcon) {\n      this._path = iconPack[iconName];\n    }\n    cachedIcons[iconName] = iconPack[iconName];\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        fill: currentcolor;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon\": HaIcon;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}