{"ast":null,"code":"// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport const slugify = (value, delimiter = \"_\") => {\n  const a = \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·\";\n  const b = `aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz${delimiter}`;\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n  let slugified;\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value.toString().toLowerCase().replace(p, c => b.charAt(a.indexOf(c))) // Replace special characters\n    .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n    .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n    .replace(new RegExp(`(${delimiter})\\\\1+`, \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n    .replace(new RegExp(`^${delimiter}+`), \"\") // Trim delimiter from start of text\n    .replace(new RegExp(`${delimiter}+$`), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n  return slugified;\n};","map":{"version":3,"names":["slugify","value","delimiter","a","b","p","RegExp","split","join","slugified","toString","toLowerCase","replace","c","charAt","indexOf"],"sources":["/workspaces/frontend/src/common/string/slugify.ts"],"sourcesContent":["// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport const slugify = (value: string, delimiter = \"_\") => {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·\";\n  const b = `aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz${delimiter}`;\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  let slugified;\n\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value\n      .toString()\n      .toLowerCase()\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n      .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n      .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n      .replace(new RegExp(`(${delimiter})\\\\1+`, \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n      .replace(new RegExp(`^${delimiter}+`), \"\") // Trim delimiter from start of text\n      .replace(new RegExp(`${delimiter}+$`), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n\n  return slugified;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,OAAO,GAAGA,CAACC,KAAa,EAAEC,SAAS,GAAG,GAAG,KAAK;EACzD,MAAMC,CAAC,GACL,8EAA8E;EAChF,MAAMC,CAAC,GAAI,8EAA6EF,SAAU,EAAC;EACnG,MAAMG,CAAC,GAAG,IAAIC,MAAM,CAACH,CAAC,CAACI,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;EAEhD,IAAIC,SAAS;EAEb,IAAIR,KAAK,KAAK,EAAE,EAAE;IAChBQ,SAAS,GAAG,EAAE;EAChB,CAAC,MAAM;IACLA,SAAS,GAAGR,KAAK,CACdS,QAAQ,CAAC,CAAC,CACVC,WAAW,CAAC,CAAC,CACbC,OAAO,CAACP,CAAC,EAAGQ,CAAC,IAAKT,CAAC,CAACU,MAAM,CAACX,CAAC,CAACY,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC;IAAA,CAC1CD,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAAA,CAC9BA,OAAO,CAAC,aAAa,EAAEV,SAAS,CAAC,CAAC;IAAA,CAClCU,OAAO,CAAC,IAAIN,MAAM,CAAE,IAAGJ,SAAU,OAAM,EAAE,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IAAA,CACrDU,OAAO,CAAC,IAAIN,MAAM,CAAE,IAAGJ,SAAU,GAAE,CAAC,EAAE,EAAE,CAAC,CAAC;IAAA,CAC1CU,OAAO,CAAC,IAAIN,MAAM,CAAE,GAAEJ,SAAU,IAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAE9C,IAAIO,SAAS,KAAK,EAAE,EAAE;MACpBA,SAAS,GAAG,SAAS;IACvB;EACF;EAEA,OAAOA,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}