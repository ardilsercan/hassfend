{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nvar ATTACHABLE_CONTROLLER = Symbol('attachableController');\nvar FOR_ATTRIBUTE_OBSERVER;\nif (!isServer) {\n  /**\n   * A global `MutationObserver` that reacts to `for` attribute changes on\n   * `Attachable` elements. If the `for` attribute changes, the controller will\n   * re-attach to the new referenced element.\n   */\n  FOR_ATTRIBUTE_OBSERVER = new MutationObserver(function (records) {\n    var _iterator = _createForOfIteratorHelper(records),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _record$target$ATTACH;\n        var record = _step.value;\n        // When a control's `for` attribute changes, inform its\n        // `AttachableController` to update to a new control.\n        (_record$target$ATTACH = record.target[ATTACHABLE_CONTROLLER]) === null || _record$target$ATTACH === void 0 || _record$target$ATTACH.hostConnected();\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  });\n}\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport var AttachableController = /*#__PURE__*/function () {\n  /**\n   * Creates a new controller for an `Attachable` element.\n   *\n   * @param host The `Attachable` element.\n   * @param onControlChange A callback with two parameters for the previous and\n   *     next control. An `Attachable` element may perform setup or teardown\n   *     logic whenever the control changes.\n   */\n  function AttachableController(host, onControlChange) {\n    var _FOR_ATTRIBUTE_OBSERV;\n    _classCallCheck(this, AttachableController);\n    this.host = host;\n    this.onControlChange = onControlChange;\n    this.currentControl = null;\n    host.addController(this);\n    host[ATTACHABLE_CONTROLLER] = this;\n    (_FOR_ATTRIBUTE_OBSERV = FOR_ATTRIBUTE_OBSERVER) === null || _FOR_ATTRIBUTE_OBSERV === void 0 || _FOR_ATTRIBUTE_OBSERV.observe(host, {\n      attributeFilter: ['for']\n    });\n  }\n  _createClass(AttachableController, [{\n    key: \"htmlFor\",\n    get: function get() {\n      return this.host.getAttribute('for');\n    },\n    set: function set(htmlFor) {\n      if (htmlFor === null) {\n        this.host.removeAttribute('for');\n      } else {\n        this.host.setAttribute('for', htmlFor);\n      }\n    }\n  }, {\n    key: \"control\",\n    get: function get() {\n      if (this.host.hasAttribute('for')) {\n        if (!this.htmlFor || !this.host.isConnected) {\n          return null;\n        }\n        return this.host.getRootNode().querySelector(\"#\".concat(this.htmlFor));\n      }\n      return this.currentControl || this.host.parentElement;\n    },\n    set: function set(control) {\n      if (control) {\n        this.attach(control);\n      } else {\n        this.detach();\n      }\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(control) {\n      if (control === this.currentControl) {\n        return;\n      }\n      this.setCurrentControl(control);\n      // When imperatively attaching, remove the `for` attribute so\n      // that the attached control is used instead of a referenced one.\n      this.host.removeAttribute('for');\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.setCurrentControl(null);\n      // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n      // ensure the control is `null` rather than the `parentElement`.\n      this.host.setAttribute('for', '');\n    }\n    /** @private */\n  }, {\n    key: \"hostConnected\",\n    value: function hostConnected() {\n      this.setCurrentControl(this.control);\n    }\n    /** @private */\n  }, {\n    key: \"hostDisconnected\",\n    value: function hostDisconnected() {\n      this.setCurrentControl(null);\n    }\n  }, {\n    key: \"setCurrentControl\",\n    value: function setCurrentControl(control) {\n      this.onControlChange(this.currentControl, control);\n      this.currentControl = control;\n    }\n  }]);\n  return AttachableController;\n}();","map":{"version":3,"names":["isServer","ATTACHABLE_CONTROLLER","Symbol","FOR_ATTRIBUTE_OBSERVER","MutationObserver","records","_iterator","_createForOfIteratorHelper","_step","s","n","done","_record$target$ATTACH","record","value","target","hostConnected","err","e","f","AttachableController","host","onControlChange","_FOR_ATTRIBUTE_OBSERV","_classCallCheck","currentControl","addController","observe","attributeFilter","_createClass","key","get","getAttribute","set","htmlFor","removeAttribute","setAttribute","hasAttribute","isConnected","getRootNode","querySelector","concat","parentElement","control","attach","detach","setCurrentControl","hostDisconnected"],"sources":["attachable-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveController, ReactiveControllerHost} from 'lit';\n\n/**\n * An element that can be attached to an associated controlling element.\n */\nexport interface Attachable {\n  /**\n   * Reflects the value of the `for` attribute, which is the ID of the element's\n   * associated control.\n   *\n   * Use this when the elements's associated control is not its parent.\n   *\n   * To manually control an element, set its `for` attribute to `\"\"`.\n   *\n   * @example\n   * ```html\n   * <div class=\"container\">\n   *   <md-attachable for=\"interactive\"></md-attachable>\n   *   <button id=\"interactive\">Action</button>\n   * </div>\n   * ```\n   *\n   * @example\n   * ```html\n   * <button class=\"manually-controlled\">\n   *   <md-attachable for=\"\"></md-attachable>\n   * </button>\n   * ```\n   */\n  htmlFor: string | null;\n\n  /**\n   * Gets or sets the element that controls the visibility of the attachable\n   * element. It is one of:\n   *\n   * - The control referenced by the `for` attribute.\n   * - The control provided to `element.attach(control)`\n   * - The element's parent.\n   * - `null` if the element is not controlled.\n   */\n  control: HTMLElement | null;\n\n  /**\n   * Attaches the element to an interactive control.\n   *\n   * @param control The element that controls the attachable element.\n   */\n  attach(control: HTMLElement): void;\n\n  /**\n   * Detaches the element from its current control.\n   */\n  detach(): void;\n}\n\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nconst ATTACHABLE_CONTROLLER = Symbol('attachableController');\n\n/**\n * The host of an `AttachableController`. The controller will add itself to\n * the host so it can be retrieved in a global `MutationObserver`.\n */\ninterface AttachableControllerHost extends ReactiveControllerHost, HTMLElement {\n  [ATTACHABLE_CONTROLLER]?: AttachableController;\n}\n\nlet FOR_ATTRIBUTE_OBSERVER: MutationObserver | undefined;\n\nif (!isServer) {\n  /**\n   * A global `MutationObserver` that reacts to `for` attribute changes on\n   * `Attachable` elements. If the `for` attribute changes, the controller will\n   * re-attach to the new referenced element.\n   */\n  FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {\n    for (const record of records) {\n      // When a control's `for` attribute changes, inform its\n      // `AttachableController` to update to a new control.\n      (record.target as AttachableControllerHost)[\n        ATTACHABLE_CONTROLLER\n      ]?.hostConnected();\n    }\n  });\n}\n\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport class AttachableController implements ReactiveController, Attachable {\n  get htmlFor() {\n    return this.host.getAttribute('for');\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    if (htmlFor === null) {\n      this.host.removeAttribute('for');\n    } else {\n      this.host.setAttribute('for', htmlFor);\n    }\n  }\n\n  get control() {\n    if (this.host.hasAttribute('for')) {\n      if (!this.htmlFor || !this.host.isConnected) {\n        return null;\n      }\n\n      return (\n        this.host.getRootNode() as Document | ShadowRoot\n      ).querySelector<HTMLElement>(`#${this.htmlFor}`);\n    }\n\n    return this.currentControl || this.host.parentElement;\n  }\n  set control(control: HTMLElement | null) {\n    if (control) {\n      this.attach(control);\n    } else {\n      this.detach();\n    }\n  }\n\n  private currentControl: HTMLElement | null = null;\n\n  /**\n   * Creates a new controller for an `Attachable` element.\n   *\n   * @param host The `Attachable` element.\n   * @param onControlChange A callback with two parameters for the previous and\n   *     next control. An `Attachable` element may perform setup or teardown\n   *     logic whenever the control changes.\n   */\n  constructor(\n    private readonly host: AttachableControllerHost,\n    private readonly onControlChange: (\n      prev: HTMLElement | null,\n      next: HTMLElement | null,\n    ) => void,\n  ) {\n    host.addController(this);\n    host[ATTACHABLE_CONTROLLER] = this;\n    FOR_ATTRIBUTE_OBSERVER?.observe(host, {attributeFilter: ['for']});\n  }\n\n  attach(control: HTMLElement) {\n    if (control === this.currentControl) {\n      return;\n    }\n\n    this.setCurrentControl(control);\n    // When imperatively attaching, remove the `for` attribute so\n    // that the attached control is used instead of a referenced one.\n    this.host.removeAttribute('for');\n  }\n\n  detach() {\n    this.setCurrentControl(null);\n    // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n    // ensure the control is `null` rather than the `parentElement`.\n    this.host.setAttribute('for', '');\n  }\n\n  /** @private */\n  hostConnected() {\n    this.setCurrentControl(this.control);\n  }\n\n  /** @private */\n  hostDisconnected() {\n    this.setCurrentControl(null);\n  }\n\n  private setCurrentControl(control: HTMLElement | null) {\n    this.onControlChange(this.currentControl, control);\n    this.currentControl = control;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}