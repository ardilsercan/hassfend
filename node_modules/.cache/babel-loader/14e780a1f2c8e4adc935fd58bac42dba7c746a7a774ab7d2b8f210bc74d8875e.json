{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { addDays, addHours, addMilliseconds, addMonths, differenceInDays, differenceInMonths, endOfDay, startOfDay, isFirstDayOfMonth, isLastDayOfMonth } from \"date-fns/esm\";\nimport { getCollection } from \"home-assistant-js-websocket\";\nimport { calcDate, calcDateProperty } from \"../common/datetime/calc_date\";\nimport { formatTime24h } from \"../common/datetime/format_time\";\nimport { groupBy } from \"../common/util/group-by\";\nimport { getConfigEntries } from \"./config_entries\";\nimport { fetchStatistics, getStatisticMetadata } from \"./recorder\";\nvar energyCollectionKeys = [];\nexport var emptyFlowFromGridSourceEnergyPreference = function emptyFlowFromGridSourceEnergyPreference() {\n  return {\n    stat_energy_from: \"\",\n    stat_cost: null,\n    entity_energy_price: null,\n    number_energy_price: null\n  };\n};\nexport var emptyFlowToGridSourceEnergyPreference = function emptyFlowToGridSourceEnergyPreference() {\n  return {\n    stat_energy_to: \"\",\n    stat_compensation: null,\n    entity_energy_price: null,\n    number_energy_price: null\n  };\n};\nexport var emptyGridSourceEnergyPreference = function emptyGridSourceEnergyPreference() {\n  return {\n    type: \"grid\",\n    flow_from: [],\n    flow_to: [],\n    cost_adjustment_day: 0\n  };\n};\nexport var emptySolarEnergyPreference = function emptySolarEnergyPreference() {\n  return {\n    type: \"solar\",\n    stat_energy_from: \"\",\n    config_entry_solar_forecast: null\n  };\n};\nexport var emptyBatteryEnergyPreference = function emptyBatteryEnergyPreference() {\n  return {\n    type: \"battery\",\n    stat_energy_from: \"\",\n    stat_energy_to: \"\"\n  };\n};\nexport var emptyGasEnergyPreference = function emptyGasEnergyPreference() {\n  return {\n    type: \"gas\",\n    stat_energy_from: \"\",\n    stat_cost: null,\n    entity_energy_price: null,\n    number_energy_price: null\n  };\n};\nexport var emptyWaterEnergyPreference = function emptyWaterEnergyPreference() {\n  return {\n    type: \"water\",\n    stat_energy_from: \"\",\n    stat_cost: null,\n    entity_energy_price: null,\n    number_energy_price: null\n  };\n};\nexport var getEnergyInfo = function getEnergyInfo(hass) {\n  return hass.callWS({\n    type: \"energy/info\"\n  });\n};\nexport var getEnergyPreferenceValidation = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(hass) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return hass.loadBackendTranslation(\"issues\", \"energy\");\n        case 2:\n          return _context.abrupt(\"return\", hass.callWS({\n            type: \"energy/validate\"\n          }));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getEnergyPreferenceValidation(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getEnergyPreferences = function getEnergyPreferences(hass) {\n  return hass.callWS({\n    type: \"energy/get_prefs\"\n  });\n};\nexport var saveEnergyPreferences = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(hass, prefs) {\n    var newPrefs;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          newPrefs = hass.callWS(Object.assign({\n            type: \"energy/save_prefs\"\n          }, prefs));\n          clearEnergyCollectionPreferences(hass);\n          return _context2.abrupt(\"return\", newPrefs);\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function saveEnergyPreferences(_x2, _x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getFossilEnergyConsumption = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(hass, startTime, energy_statistic_ids, co2_statistic_id, endTime) {\n    var period,\n      _args3 = arguments;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          period = _args3.length > 5 && _args3[5] !== undefined ? _args3[5] : \"hour\";\n          return _context3.abrupt(\"return\", hass.callWS({\n            type: \"energy/fossil_energy_consumption\",\n            start_time: startTime.toISOString(),\n            end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n            energy_statistic_ids: energy_statistic_ids,\n            co2_statistic_id: co2_statistic_id,\n            period: period\n          }));\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return function getFossilEnergyConsumption(_x4, _x5, _x6, _x7, _x8) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var energySourcesByType = function energySourcesByType(prefs) {\n  return groupBy(prefs.energy_sources, function (item) {\n    return item.type;\n  });\n};\nexport var getReferencedStatisticIds = function getReferencedStatisticIds(prefs, info, includeTypes) {\n  var statIDs = [];\n  var _iterator = _createForOfIteratorHelper(prefs.energy_sources),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var source = _step.value;\n      if (includeTypes && !includeTypes.includes(source.type)) {\n        continue;\n      }\n      if (source.type === \"solar\") {\n        statIDs.push(source.stat_energy_from);\n        continue;\n      }\n      if (source.type === \"gas\" || source.type === \"water\") {\n        statIDs.push(source.stat_energy_from);\n        if (source.stat_cost) {\n          statIDs.push(source.stat_cost);\n        }\n        var costStatId = info.cost_sensors[source.stat_energy_from];\n        if (costStatId) {\n          statIDs.push(costStatId);\n        }\n        continue;\n      }\n      if (source.type === \"battery\") {\n        statIDs.push(source.stat_energy_from);\n        statIDs.push(source.stat_energy_to);\n        continue;\n      }\n\n      // grid source\n      var _iterator2 = _createForOfIteratorHelper(source.flow_from),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var flowFrom = _step2.value;\n          statIDs.push(flowFrom.stat_energy_from);\n          if (flowFrom.stat_cost) {\n            statIDs.push(flowFrom.stat_cost);\n          }\n          var _costStatId = info.cost_sensors[flowFrom.stat_energy_from];\n          if (_costStatId) {\n            statIDs.push(_costStatId);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(source.flow_to),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var flowTo = _step3.value;\n          statIDs.push(flowTo.stat_energy_to);\n          if (flowTo.stat_compensation) {\n            statIDs.push(flowTo.stat_compensation);\n          }\n          var _costStatId2 = info.cost_sensors[flowTo.stat_energy_to];\n          if (_costStatId2) {\n            statIDs.push(_costStatId2);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return statIDs;\n};\nvar getEnergyData = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(hass, prefs, start, end, compare) {\n    var _yield$Promise$all, _yield$Promise$all2, configEntries, info, co2SignalConfigEntry, co2SignalEntity, _i, _Object$values, entity, co2State, consumptionStatIDs, _iterator4, _step4, source, _iterator5, _step5, flowFrom, energyStatIds, waterStatIds, allStatIDs, dayDifference, period, lengthUnit, energyUnits, waterUnits, _energyStats, _waterStats, statsCompare, startCompare, endCompare, _energyStatsCompare, _waterStatsCompare, _fossilEnergyConsumption, _fossilEnergyConsumptionCompare, statsMetadata, _getStatisticMetadata, _yield$Promise$all3, _yield$Promise$all4, energyStats, waterStats, energyStatsCompare, waterStatsCompare, statsMetadataArray, fossilEnergyConsumption, fossilEnergyConsumptionCompare, stats, data;\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return Promise.all([getConfigEntries(hass, {\n            domain: \"co2signal\"\n          }), getEnergyInfo(hass)]);\n        case 2:\n          _yield$Promise$all = _context4.sent;\n          _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n          configEntries = _yield$Promise$all2[0];\n          info = _yield$Promise$all2[1];\n          co2SignalConfigEntry = configEntries.length ? configEntries[0] : undefined;\n          if (!co2SignalConfigEntry) {\n            _context4.next = 21;\n            break;\n          }\n          _i = 0, _Object$values = Object.values(hass.entities);\n        case 9:\n          if (!(_i < _Object$values.length)) {\n            _context4.next = 21;\n            break;\n          }\n          entity = _Object$values[_i];\n          if (!(entity.platform !== \"co2signal\")) {\n            _context4.next = 13;\n            break;\n          }\n          return _context4.abrupt(\"continue\", 18);\n        case 13:\n          // The integration offers 2 entities. We want the % one.\n          co2State = hass.states[entity.entity_id];\n          if (!(!co2State || co2State.attributes.unit_of_measurement !== \"%\")) {\n            _context4.next = 16;\n            break;\n          }\n          return _context4.abrupt(\"continue\", 18);\n        case 16:\n          co2SignalEntity = co2State.entity_id;\n          return _context4.abrupt(\"break\", 21);\n        case 18:\n          _i++;\n          _context4.next = 9;\n          break;\n        case 21:\n          consumptionStatIDs = [];\n          _iterator4 = _createForOfIteratorHelper(prefs.energy_sources);\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              source = _step4.value;\n              // grid source\n              if (source.type === \"grid\") {\n                _iterator5 = _createForOfIteratorHelper(source.flow_from);\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    flowFrom = _step5.value;\n                    consumptionStatIDs.push(flowFrom.stat_energy_from);\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n              }\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          energyStatIds = getReferencedStatisticIds(prefs, info, [\"grid\", \"solar\", \"battery\", \"gas\"]);\n          waterStatIds = getReferencedStatisticIds(prefs, info, [\"water\"]);\n          allStatIDs = [].concat(_toConsumableArray(energyStatIds), _toConsumableArray(waterStatIds));\n          dayDifference = differenceInDays(end || new Date(), start);\n          period = dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\";\n          lengthUnit = hass.config.unit_system.length || \"\";\n          energyUnits = {\n            energy: \"kWh\",\n            volume: lengthUnit === \"km\" ? \"m³\" : \"ft³\"\n          };\n          waterUnits = {\n            volume: lengthUnit === \"km\" ? \"L\" : \"gal\"\n          };\n          _energyStats = energyStatIds.length ? fetchStatistics(hass, start, end, energyStatIds, period, energyUnits, [\"change\"]) : {};\n          _waterStats = waterStatIds.length ? fetchStatistics(hass, start, end, waterStatIds, period, waterUnits, [\"change\"]) : {};\n          _energyStatsCompare = {};\n          _waterStatsCompare = {};\n          if (compare) {\n            if (calcDateProperty(start, isFirstDayOfMonth, hass.locale, hass.config) && calcDateProperty(end || new Date(), isLastDayOfMonth, hass.locale, hass.config)) {\n              // When comparing a month (or multiple), we want to start at the begining of the month\n              startCompare = calcDate(start, addMonths, hass.locale, hass.config, -calcDateProperty(end || new Date(), differenceInMonths, hass.locale, hass.config, start) - 1);\n            } else {\n              startCompare = calcDate(start, addDays, hass.locale, hass.config, (dayDifference + 1) * -1);\n            }\n            endCompare = addMilliseconds(start, -1);\n            if (energyStatIds.length) {\n              _energyStatsCompare = fetchStatistics(hass, startCompare, endCompare, energyStatIds, period, energyUnits, [\"change\"]);\n            }\n            if (waterStatIds.length) {\n              _waterStatsCompare = fetchStatistics(hass, startCompare, endCompare, waterStatIds, period, waterUnits, [\"change\"]);\n            }\n          }\n          if (co2SignalEntity !== undefined) {\n            _fossilEnergyConsumption = getFossilEnergyConsumption(hass, start, consumptionStatIDs, co2SignalEntity, end, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n            if (compare) {\n              _fossilEnergyConsumptionCompare = getFossilEnergyConsumption(hass, startCompare, consumptionStatIDs, co2SignalEntity, endCompare, dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\");\n            }\n          }\n          statsMetadata = {};\n          _getStatisticMetadata = allStatIDs.length ? getStatisticMetadata(hass, allStatIDs) : [];\n          _context4.next = 42;\n          return Promise.all([_energyStats, _waterStats, _energyStatsCompare, _waterStatsCompare, _getStatisticMetadata, _fossilEnergyConsumption, _fossilEnergyConsumptionCompare]);\n        case 42:\n          _yield$Promise$all3 = _context4.sent;\n          _yield$Promise$all4 = _slicedToArray(_yield$Promise$all3, 7);\n          energyStats = _yield$Promise$all4[0];\n          waterStats = _yield$Promise$all4[1];\n          energyStatsCompare = _yield$Promise$all4[2];\n          waterStatsCompare = _yield$Promise$all4[3];\n          statsMetadataArray = _yield$Promise$all4[4];\n          fossilEnergyConsumption = _yield$Promise$all4[5];\n          fossilEnergyConsumptionCompare = _yield$Promise$all4[6];\n          stats = Object.assign(Object.assign({}, energyStats), waterStats);\n          if (compare) {\n            statsCompare = Object.assign(Object.assign({}, energyStatsCompare), waterStatsCompare);\n          }\n          if (allStatIDs.length) {\n            statsMetadataArray.forEach(function (x) {\n              statsMetadata[x.statistic_id] = x;\n            });\n          }\n          data = {\n            start: start,\n            end: end,\n            startCompare: startCompare,\n            endCompare: endCompare,\n            info: info,\n            prefs: prefs,\n            stats: stats,\n            statsMetadata: statsMetadata,\n            statsCompare: statsCompare,\n            co2SignalConfigEntry: co2SignalConfigEntry,\n            co2SignalEntity: co2SignalEntity,\n            fossilEnergyConsumption: fossilEnergyConsumption,\n            fossilEnergyConsumptionCompare: fossilEnergyConsumptionCompare\n          };\n          return _context4.abrupt(\"return\", data);\n        case 56:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function getEnergyData(_x9, _x10, _x11, _x12, _x13) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nvar clearEnergyCollectionPreferences = function clearEnergyCollectionPreferences(hass) {\n  energyCollectionKeys.forEach(function (key) {\n    var energyCollection = getEnergyDataCollection(hass, {\n      key: key\n    });\n    energyCollection.clearPrefs();\n    if (energyCollection._active) {\n      energyCollection.refresh();\n    }\n  });\n};\nvar scheduleHourlyRefresh = function scheduleHourlyRefresh(collection) {\n  if (collection._refreshTimeout) {\n    clearTimeout(collection._refreshTimeout);\n  }\n  if (collection._active && (!collection.end || collection.end > new Date())) {\n    // The stats are created every hour\n    // Schedule a refresh for 20 minutes past the hour\n    // If the end is larger than the current time.\n    var nextFetch = new Date();\n    if (nextFetch.getMinutes() >= 20) {\n      nextFetch.setHours(nextFetch.getHours() + 1);\n    }\n    nextFetch.setMinutes(20, 0, 0);\n    collection._refreshTimeout = window.setTimeout(function () {\n      return collection.refresh();\n    }, nextFetch.getTime() - Date.now());\n  }\n};\nexport var getEnergyDataCollection = function getEnergyDataCollection(hass) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var key = \"_energy\";\n  if (options.key) {\n    if (!options.key.startsWith(\"energy_\")) {\n      throw new Error(\"Key need to start with energy_\");\n    }\n    key = \"_\".concat(options.key);\n  }\n  if (hass.connection[key]) {\n    return hass.connection[key];\n  }\n  energyCollectionKeys.push(options.key);\n  var collection = getCollection(hass.connection, key, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          if (collection.prefs) {\n            _context5.next = 4;\n            break;\n          }\n          _context5.next = 3;\n          return getEnergyPreferences(hass);\n        case 3:\n          collection.prefs = _context5.sent;\n        case 4:\n          scheduleHourlyRefresh(collection);\n          return _context5.abrupt(\"return\", getEnergyData(hass, collection.prefs, collection.start, collection.end, collection.compare));\n        case 6:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  })));\n  var origSubscribe = collection.subscribe;\n  collection.subscribe = function (subscriber) {\n    var unsub = origSubscribe(subscriber);\n    collection._active++;\n    if (collection._refreshTimeout === undefined) {\n      scheduleHourlyRefresh(collection);\n    }\n    return function () {\n      collection._active--;\n      if (collection._active < 1) {\n        clearTimeout(collection._refreshTimeout);\n        collection._refreshTimeout = undefined;\n      }\n      unsub();\n    };\n  };\n  collection._active = 0;\n  collection.prefs = options.prefs;\n  var now = new Date();\n  var hour = formatTime24h(now, hass.locale, hass.config).split(\":\")[0];\n  // Set start to start of today if we have data for today, otherwise yesterday\n  collection.start = calcDate(hour === \"0\" ? addDays(now, -1) : now, startOfDay, hass.locale, hass.config);\n  collection.end = calcDate(hour === \"0\" ? addDays(now, -1) : now, endOfDay, hass.locale, hass.config);\n  var scheduleUpdatePeriod = function scheduleUpdatePeriod() {\n    collection._updatePeriodTimeout = window.setTimeout(function () {\n      collection.start = calcDate(new Date(), startOfDay, hass.locale, hass.config);\n      collection.end = calcDate(new Date(), endOfDay, hass.locale, hass.config);\n      scheduleUpdatePeriod();\n    }, addHours(calcDate(now, endOfDay, hass.locale, hass.config), 1).getTime() - Date.now() // Switch to next day an hour after the day changed\n    );\n  };\n  scheduleUpdatePeriod();\n  collection.clearPrefs = function () {\n    collection.prefs = undefined;\n  };\n  collection.setPeriod = function (newStart, newEnd) {\n    var _collection$end;\n    collection.start = newStart;\n    collection.end = newEnd;\n    if (collection.start.getTime() === calcDate(new Date(), startOfDay, hass.locale, hass.config).getTime() && ((_collection$end = collection.end) === null || _collection$end === void 0 ? void 0 : _collection$end.getTime()) === calcDate(new Date(), endOfDay, hass.locale, hass.config).getTime() && !collection._updatePeriodTimeout) {\n      scheduleUpdatePeriod();\n    } else if (collection._updatePeriodTimeout) {\n      clearTimeout(collection._updatePeriodTimeout);\n      collection._updatePeriodTimeout = undefined;\n    }\n  };\n  collection.setCompare = function (compare) {\n    collection.compare = compare;\n  };\n  return collection;\n};\nexport var getEnergySolarForecasts = function getEnergySolarForecasts(hass) {\n  return hass.callWS({\n    type: \"energy/solar_forecast\"\n  });\n};\nvar energyGasUnitClass = [\"volume\", \"energy\"];\nexport var getEnergyGasUnitClass = function getEnergyGasUnitClass(prefs) {\n  var statisticsMetaData = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var excludeSource = arguments.length > 2 ? arguments[2] : undefined;\n  var _iterator6 = _createForOfIteratorHelper(prefs.energy_sources),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var source = _step6.value;\n      if (source.type !== \"gas\") {\n        continue;\n      }\n      if (excludeSource && excludeSource === source.stat_energy_from) {\n        continue;\n      }\n      var statisticIdWithMeta = statisticsMetaData[source.stat_energy_from];\n      if (energyGasUnitClass.includes(statisticIdWithMeta === null || statisticIdWithMeta === void 0 ? void 0 : statisticIdWithMeta.unit_class)) {\n        return statisticIdWithMeta.unit_class;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  return undefined;\n};\nexport var getEnergyGasUnit = function getEnergyGasUnit(hass, prefs) {\n  var statisticsMetaData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var unitClass = getEnergyGasUnitClass(prefs, statisticsMetaData);\n  if (unitClass === undefined) {\n    return undefined;\n  }\n  return unitClass === \"energy\" ? \"kWh\" : hass.config.unit_system.length === \"km\" ? \"m³\" : \"ft³\";\n};\nexport var getEnergyWaterUnit = function getEnergyWaterUnit(hass) {\n  return hass.config.unit_system.length === \"km\" ? \"L\" : \"gal\";\n};\nexport var energyStatisticHelpUrl = \"/docs/energy/faq/#troubleshooting-missing-entities\";","map":{"version":3,"names":["addDays","addHours","addMilliseconds","addMonths","differenceInDays","differenceInMonths","endOfDay","startOfDay","isFirstDayOfMonth","isLastDayOfMonth","getCollection","calcDate","calcDateProperty","formatTime24h","groupBy","getConfigEntries","fetchStatistics","getStatisticMetadata","energyCollectionKeys","emptyFlowFromGridSourceEnergyPreference","stat_energy_from","stat_cost","entity_energy_price","number_energy_price","emptyFlowToGridSourceEnergyPreference","stat_energy_to","stat_compensation","emptyGridSourceEnergyPreference","type","flow_from","flow_to","cost_adjustment_day","emptySolarEnergyPreference","config_entry_solar_forecast","emptyBatteryEnergyPreference","emptyGasEnergyPreference","emptyWaterEnergyPreference","getEnergyInfo","hass","callWS","getEnergyPreferenceValidation","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","loadBackendTranslation","abrupt","stop","_x","apply","arguments","getEnergyPreferences","saveEnergyPreferences","_ref2","_callee2","prefs","newPrefs","_callee2$","_context2","Object","assign","clearEnergyCollectionPreferences","_x2","_x3","getFossilEnergyConsumption","_ref3","_callee3","startTime","energy_statistic_ids","co2_statistic_id","endTime","period","_args3","_callee3$","_context3","length","undefined","start_time","toISOString","end_time","_x4","_x5","_x6","_x7","_x8","energySourcesByType","energy_sources","item","getReferencedStatisticIds","info","includeTypes","statIDs","_iterator","_createForOfIteratorHelper","_step","s","n","done","source","value","includes","push","costStatId","cost_sensors","_iterator2","_step2","flowFrom","err","e","f","_iterator3","_step3","flowTo","getEnergyData","_ref4","_callee4","start","end","compare","_yield$Promise$all","_yield$Promise$all2","configEntries","co2SignalConfigEntry","co2SignalEntity","_i","_Object$values","entity","co2State","consumptionStatIDs","_iterator4","_step4","_iterator5","_step5","energyStatIds","waterStatIds","allStatIDs","dayDifference","lengthUnit","energyUnits","waterUnits","_energyStats","_waterStats","statsCompare","startCompare","endCompare","_energyStatsCompare","_waterStatsCompare","_fossilEnergyConsumption","_fossilEnergyConsumptionCompare","statsMetadata","_getStatisticMetadata","_yield$Promise$all3","_yield$Promise$all4","energyStats","waterStats","energyStatsCompare","waterStatsCompare","statsMetadataArray","fossilEnergyConsumption","fossilEnergyConsumptionCompare","stats","data","_callee4$","_context4","Promise","all","domain","sent","_slicedToArray","values","entities","platform","states","entity_id","attributes","unit_of_measurement","concat","_toConsumableArray","Date","config","unit_system","energy","volume","locale","forEach","x","statistic_id","_x9","_x10","_x11","_x12","_x13","key","energyCollection","getEnergyDataCollection","clearPrefs","_active","refresh","scheduleHourlyRefresh","collection","_refreshTimeout","clearTimeout","nextFetch","getMinutes","setHours","getHours","setMinutes","window","setTimeout","getTime","now","options","startsWith","Error","connection","_callee5","_callee5$","_context5","origSubscribe","subscribe","subscriber","unsub","hour","split","scheduleUpdatePeriod","_updatePeriodTimeout","setPeriod","newStart","newEnd","_collection$end","setCompare","getEnergySolarForecasts","energyGasUnitClass","getEnergyGasUnitClass","statisticsMetaData","excludeSource","_iterator6","_step6","statisticIdWithMeta","unit_class","getEnergyGasUnit","unitClass","getEnergyWaterUnit","energyStatisticHelpUrl"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/energy.ts"],"sourcesContent":["import {\n  addDays,\n  addHours,\n  addMilliseconds,\n  addMonths,\n  differenceInDays,\n  differenceInMonths,\n  endOfDay,\n  startOfDay,\n  isFirstDayOfMonth,\n  isLastDayOfMonth,\n} from \"date-fns/esm\";\nimport { Collection, getCollection } from \"home-assistant-js-websocket\";\nimport { calcDate, calcDateProperty } from \"../common/datetime/calc_date\";\nimport { formatTime24h } from \"../common/datetime/format_time\";\nimport { groupBy } from \"../common/util/group-by\";\nimport { HomeAssistant } from \"../types\";\nimport { ConfigEntry, getConfigEntries } from \"./config_entries\";\nimport {\n  fetchStatistics,\n  getStatisticMetadata,\n  Statistics,\n  StatisticsMetaData,\n  StatisticsUnitConfiguration,\n} from \"./recorder\";\n\nconst energyCollectionKeys: (string | undefined)[] = [];\n\nexport const emptyFlowFromGridSourceEnergyPreference =\n  (): FlowFromGridSourceEnergyPreference => ({\n    stat_energy_from: \"\",\n    stat_cost: null,\n    entity_energy_price: null,\n    number_energy_price: null,\n  });\n\nexport const emptyFlowToGridSourceEnergyPreference =\n  (): FlowToGridSourceEnergyPreference => ({\n    stat_energy_to: \"\",\n    stat_compensation: null,\n    entity_energy_price: null,\n    number_energy_price: null,\n  });\n\nexport const emptyGridSourceEnergyPreference =\n  (): GridSourceTypeEnergyPreference => ({\n    type: \"grid\",\n    flow_from: [],\n    flow_to: [],\n    cost_adjustment_day: 0,\n  });\n\nexport const emptySolarEnergyPreference =\n  (): SolarSourceTypeEnergyPreference => ({\n    type: \"solar\",\n    stat_energy_from: \"\",\n    config_entry_solar_forecast: null,\n  });\n\nexport const emptyBatteryEnergyPreference =\n  (): BatterySourceTypeEnergyPreference => ({\n    type: \"battery\",\n    stat_energy_from: \"\",\n    stat_energy_to: \"\",\n  });\n\nexport const emptyGasEnergyPreference = (): GasSourceTypeEnergyPreference => ({\n  type: \"gas\",\n  stat_energy_from: \"\",\n  stat_cost: null,\n  entity_energy_price: null,\n  number_energy_price: null,\n});\n\nexport const emptyWaterEnergyPreference =\n  (): WaterSourceTypeEnergyPreference => ({\n    type: \"water\",\n    stat_energy_from: \"\",\n    stat_cost: null,\n    entity_energy_price: null,\n    number_energy_price: null,\n  });\n\ninterface EnergySolarForecast {\n  wh_hours: Record<string, number>;\n}\nexport type EnergySolarForecasts = {\n  [config_entry_id: string]: EnergySolarForecast;\n};\n\nexport interface DeviceConsumptionEnergyPreference {\n  // This is an ever increasing value\n  stat_consumption: string;\n}\n\nexport interface FlowFromGridSourceEnergyPreference {\n  // kWh meter\n  stat_energy_from: string;\n\n  // $ meter\n  stat_cost: string | null;\n\n  // Can be used to generate costs if stat_cost omitted\n  entity_energy_price: string | null;\n  number_energy_price: number | null;\n}\n\nexport interface FlowToGridSourceEnergyPreference {\n  // kWh meter\n  stat_energy_to: string;\n\n  // $ meter\n  stat_compensation: string | null;\n\n  // Can be used to generate costs if stat_compensation omitted\n  entity_energy_price: string | null;\n  number_energy_price: number | null;\n}\n\nexport interface GridSourceTypeEnergyPreference {\n  type: \"grid\";\n\n  flow_from: FlowFromGridSourceEnergyPreference[];\n  flow_to: FlowToGridSourceEnergyPreference[];\n\n  cost_adjustment_day: number;\n}\n\nexport interface SolarSourceTypeEnergyPreference {\n  type: \"solar\";\n\n  stat_energy_from: string;\n  config_entry_solar_forecast: string[] | null;\n}\n\nexport interface BatterySourceTypeEnergyPreference {\n  type: \"battery\";\n  stat_energy_from: string;\n  stat_energy_to: string;\n}\nexport interface GasSourceTypeEnergyPreference {\n  type: \"gas\";\n\n  // kWh/volume meter\n  stat_energy_from: string;\n\n  // $ meter\n  stat_cost: string | null;\n\n  // Can be used to generate costs if stat_cost omitted\n  entity_energy_price: string | null;\n  number_energy_price: number | null;\n  unit_of_measurement?: string | null;\n}\n\nexport interface WaterSourceTypeEnergyPreference {\n  type: \"water\";\n\n  // volume meter\n  stat_energy_from: string;\n\n  // $ meter\n  stat_cost: string | null;\n\n  // Can be used to generate costs if stat_cost omitted\n  entity_energy_price: string | null;\n  number_energy_price: number | null;\n  unit_of_measurement?: string | null;\n}\n\ntype EnergySource =\n  | SolarSourceTypeEnergyPreference\n  | GridSourceTypeEnergyPreference\n  | BatterySourceTypeEnergyPreference\n  | GasSourceTypeEnergyPreference\n  | WaterSourceTypeEnergyPreference;\n\nexport interface EnergyPreferences {\n  energy_sources: EnergySource[];\n  device_consumption: DeviceConsumptionEnergyPreference[];\n}\n\nexport interface EnergyInfo {\n  cost_sensors: Record<string, string>;\n  solar_forecast_domains: string[];\n}\n\nexport interface EnergyValidationIssue {\n  type: string;\n  affected_entities: [string, unknown][];\n  translation_placeholders: Record<string, string>;\n}\n\nexport interface EnergyPreferencesValidation {\n  energy_sources: EnergyValidationIssue[][];\n  device_consumption: EnergyValidationIssue[][];\n}\n\nexport const getEnergyInfo = (hass: HomeAssistant) =>\n  hass.callWS<EnergyInfo>({\n    type: \"energy/info\",\n  });\n\nexport const getEnergyPreferenceValidation = async (hass: HomeAssistant) => {\n  await hass.loadBackendTranslation(\"issues\", \"energy\");\n  return hass.callWS<EnergyPreferencesValidation>({\n    type: \"energy/validate\",\n  });\n};\n\nexport const getEnergyPreferences = (hass: HomeAssistant) =>\n  hass.callWS<EnergyPreferences>({\n    type: \"energy/get_prefs\",\n  });\n\nexport const saveEnergyPreferences = async (\n  hass: HomeAssistant,\n  prefs: Partial<EnergyPreferences>\n) => {\n  const newPrefs = hass.callWS<EnergyPreferences>({\n    type: \"energy/save_prefs\",\n    ...prefs,\n  });\n  clearEnergyCollectionPreferences(hass);\n  return newPrefs;\n};\n\nexport interface FossilEnergyConsumption {\n  [date: string]: number;\n}\n\nexport const getFossilEnergyConsumption = async (\n  hass: HomeAssistant,\n  startTime: Date,\n  energy_statistic_ids: string[],\n  co2_statistic_id: string,\n  endTime?: Date,\n  period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\"\n) =>\n  hass.callWS<FossilEnergyConsumption>({\n    type: \"energy/fossil_energy_consumption\",\n    start_time: startTime.toISOString(),\n    end_time: endTime?.toISOString(),\n    energy_statistic_ids,\n    co2_statistic_id,\n    period,\n  });\n\ninterface EnergySourceByType {\n  grid?: GridSourceTypeEnergyPreference[];\n  solar?: SolarSourceTypeEnergyPreference[];\n  battery?: BatterySourceTypeEnergyPreference[];\n  gas?: GasSourceTypeEnergyPreference[];\n  water?: WaterSourceTypeEnergyPreference[];\n}\n\nexport const energySourcesByType = (prefs: EnergyPreferences) =>\n  groupBy(prefs.energy_sources, (item) => item.type) as EnergySourceByType;\n\nexport interface EnergyData {\n  start: Date;\n  end?: Date;\n  startCompare?: Date;\n  endCompare?: Date;\n  prefs: EnergyPreferences;\n  info: EnergyInfo;\n  stats: Statistics;\n  statsMetadata: Record<string, StatisticsMetaData>;\n  statsCompare: Statistics;\n  co2SignalConfigEntry?: ConfigEntry;\n  co2SignalEntity?: string;\n  fossilEnergyConsumption?: FossilEnergyConsumption;\n  fossilEnergyConsumptionCompare?: FossilEnergyConsumption;\n}\n\nexport const getReferencedStatisticIds = (\n  prefs: EnergyPreferences,\n  info: EnergyInfo,\n  includeTypes?: string[]\n): string[] => {\n  const statIDs: string[] = [];\n\n  for (const source of prefs.energy_sources) {\n    if (includeTypes && !includeTypes.includes(source.type)) {\n      continue;\n    }\n\n    if (source.type === \"solar\") {\n      statIDs.push(source.stat_energy_from);\n      continue;\n    }\n\n    if (source.type === \"gas\" || source.type === \"water\") {\n      statIDs.push(source.stat_energy_from);\n\n      if (source.stat_cost) {\n        statIDs.push(source.stat_cost);\n      }\n      const costStatId = info.cost_sensors[source.stat_energy_from];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n      continue;\n    }\n\n    if (source.type === \"battery\") {\n      statIDs.push(source.stat_energy_from);\n      statIDs.push(source.stat_energy_to);\n      continue;\n    }\n\n    // grid source\n    for (const flowFrom of source.flow_from) {\n      statIDs.push(flowFrom.stat_energy_from);\n      if (flowFrom.stat_cost) {\n        statIDs.push(flowFrom.stat_cost);\n      }\n      const costStatId = info.cost_sensors[flowFrom.stat_energy_from];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n    for (const flowTo of source.flow_to) {\n      statIDs.push(flowTo.stat_energy_to);\n      if (flowTo.stat_compensation) {\n        statIDs.push(flowTo.stat_compensation);\n      }\n      const costStatId = info.cost_sensors[flowTo.stat_energy_to];\n      if (costStatId) {\n        statIDs.push(costStatId);\n      }\n    }\n  }\n\n  return statIDs;\n};\n\nconst getEnergyData = async (\n  hass: HomeAssistant,\n  prefs: EnergyPreferences,\n  start: Date,\n  end?: Date,\n  compare?: boolean\n): Promise<EnergyData> => {\n  const [configEntries, info] = await Promise.all([\n    getConfigEntries(hass, { domain: \"co2signal\" }),\n    getEnergyInfo(hass),\n  ]);\n\n  const co2SignalConfigEntry = configEntries.length\n    ? configEntries[0]\n    : undefined;\n\n  let co2SignalEntity: string | undefined;\n  if (co2SignalConfigEntry) {\n    for (const entity of Object.values(hass.entities)) {\n      if (entity.platform !== \"co2signal\") {\n        continue;\n      }\n\n      // The integration offers 2 entities. We want the % one.\n      const co2State = hass.states[entity.entity_id];\n      if (!co2State || co2State.attributes.unit_of_measurement !== \"%\") {\n        continue;\n      }\n\n      co2SignalEntity = co2State.entity_id;\n      break;\n    }\n  }\n\n  const consumptionStatIDs: string[] = [];\n  for (const source of prefs.energy_sources) {\n    // grid source\n    if (source.type === \"grid\") {\n      for (const flowFrom of source.flow_from) {\n        consumptionStatIDs.push(flowFrom.stat_energy_from);\n      }\n    }\n  }\n  const energyStatIds = getReferencedStatisticIds(prefs, info, [\n    \"grid\",\n    \"solar\",\n    \"battery\",\n    \"gas\",\n  ]);\n  const waterStatIds = getReferencedStatisticIds(prefs, info, [\"water\"]);\n\n  const allStatIDs = [...energyStatIds, ...waterStatIds];\n\n  const dayDifference = differenceInDays(end || new Date(), start);\n  const period =\n    dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\";\n\n  const lengthUnit = hass.config.unit_system.length || \"\";\n  const energyUnits: StatisticsUnitConfiguration = {\n    energy: \"kWh\",\n    volume: lengthUnit === \"km\" ? \"m³\" : \"ft³\",\n  };\n  const waterUnits: StatisticsUnitConfiguration = {\n    volume: lengthUnit === \"km\" ? \"L\" : \"gal\",\n  };\n\n  const _energyStats: Statistics | Promise<Statistics> = energyStatIds.length\n    ? fetchStatistics(hass!, start, end, energyStatIds, period, energyUnits, [\n        \"change\",\n      ])\n    : {};\n  const _waterStats: Statistics | Promise<Statistics> = waterStatIds.length\n    ? fetchStatistics(hass!, start, end, waterStatIds, period, waterUnits, [\n        \"change\",\n      ])\n    : {};\n\n  let statsCompare;\n  let startCompare;\n  let endCompare;\n  let _energyStatsCompare: Statistics | Promise<Statistics> = {};\n  let _waterStatsCompare: Statistics | Promise<Statistics> = {};\n\n  if (compare) {\n    if (\n      (calcDateProperty(\n        start,\n        isFirstDayOfMonth,\n        hass.locale,\n        hass.config\n      ) as boolean) &&\n      (calcDateProperty(\n        end || new Date(),\n        isLastDayOfMonth,\n        hass.locale,\n        hass.config\n      ) as boolean)\n    ) {\n      // When comparing a month (or multiple), we want to start at the begining of the month\n      startCompare = calcDate(\n        start,\n        addMonths,\n        hass.locale,\n        hass.config,\n        -(calcDateProperty(\n          end || new Date(),\n          differenceInMonths,\n          hass.locale,\n          hass.config,\n          start\n        ) as number) - 1\n      );\n    } else {\n      startCompare = calcDate(\n        start,\n        addDays,\n        hass.locale,\n        hass.config,\n        (dayDifference + 1) * -1\n      );\n    }\n    endCompare = addMilliseconds(start, -1);\n    if (energyStatIds.length) {\n      _energyStatsCompare = fetchStatistics(\n        hass!,\n        startCompare,\n        endCompare,\n        energyStatIds,\n        period,\n        energyUnits,\n        [\"change\"]\n      );\n    }\n    if (waterStatIds.length) {\n      _waterStatsCompare = fetchStatistics(\n        hass!,\n        startCompare,\n        endCompare,\n        waterStatIds,\n        period,\n        waterUnits,\n        [\"change\"]\n      );\n    }\n  }\n\n  let _fossilEnergyConsumption: undefined | Promise<FossilEnergyConsumption>;\n  let _fossilEnergyConsumptionCompare:\n    | undefined\n    | Promise<FossilEnergyConsumption>;\n  if (co2SignalEntity !== undefined) {\n    _fossilEnergyConsumption = getFossilEnergyConsumption(\n      hass!,\n      start,\n      consumptionStatIDs,\n      co2SignalEntity,\n      end,\n      dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\"\n    );\n    if (compare) {\n      _fossilEnergyConsumptionCompare = getFossilEnergyConsumption(\n        hass!,\n        startCompare,\n        consumptionStatIDs,\n        co2SignalEntity,\n        endCompare,\n        dayDifference > 35 ? \"month\" : dayDifference > 2 ? \"day\" : \"hour\"\n      );\n    }\n  }\n\n  const statsMetadata: Record<string, StatisticsMetaData> = {};\n  const _getStatisticMetadata:\n    | Promise<StatisticsMetaData[]>\n    | StatisticsMetaData[] = allStatIDs.length\n    ? getStatisticMetadata(hass, allStatIDs)\n    : [];\n  const [\n    energyStats,\n    waterStats,\n    energyStatsCompare,\n    waterStatsCompare,\n    statsMetadataArray,\n    fossilEnergyConsumption,\n    fossilEnergyConsumptionCompare,\n  ] = await Promise.all([\n    _energyStats,\n    _waterStats,\n    _energyStatsCompare,\n    _waterStatsCompare,\n    _getStatisticMetadata,\n    _fossilEnergyConsumption,\n    _fossilEnergyConsumptionCompare,\n  ]);\n  const stats = { ...energyStats, ...waterStats };\n  if (compare) {\n    statsCompare = { ...energyStatsCompare, ...waterStatsCompare };\n  }\n  if (allStatIDs.length) {\n    statsMetadataArray.forEach((x) => {\n      statsMetadata[x.statistic_id] = x;\n    });\n  }\n\n  const data: EnergyData = {\n    start,\n    end,\n    startCompare,\n    endCompare,\n    info,\n    prefs,\n    stats,\n    statsMetadata,\n    statsCompare,\n    co2SignalConfigEntry,\n    co2SignalEntity,\n    fossilEnergyConsumption,\n    fossilEnergyConsumptionCompare,\n  };\n\n  return data;\n};\n\nexport interface EnergyCollection extends Collection<EnergyData> {\n  start: Date;\n  end?: Date;\n  compare?: boolean;\n  prefs?: EnergyPreferences;\n  clearPrefs(): void;\n  setPeriod(newStart: Date, newEnd?: Date): void;\n  setCompare(compare: boolean): void;\n  _refreshTimeout?: number;\n  _updatePeriodTimeout?: number;\n  _active: number;\n}\n\nconst clearEnergyCollectionPreferences = (hass: HomeAssistant) => {\n  energyCollectionKeys.forEach((key) => {\n    const energyCollection = getEnergyDataCollection(hass, { key });\n    energyCollection.clearPrefs();\n    if (energyCollection._active) {\n      energyCollection.refresh();\n    }\n  });\n};\n\nconst scheduleHourlyRefresh = (collection: EnergyCollection) => {\n  if (collection._refreshTimeout) {\n    clearTimeout(collection._refreshTimeout);\n  }\n\n  if (collection._active && (!collection.end || collection.end > new Date())) {\n    // The stats are created every hour\n    // Schedule a refresh for 20 minutes past the hour\n    // If the end is larger than the current time.\n    const nextFetch = new Date();\n    if (nextFetch.getMinutes() >= 20) {\n      nextFetch.setHours(nextFetch.getHours() + 1);\n    }\n    nextFetch.setMinutes(20, 0, 0);\n\n    collection._refreshTimeout = window.setTimeout(\n      () => collection.refresh(),\n      nextFetch.getTime() - Date.now()\n    );\n  }\n};\n\nexport const getEnergyDataCollection = (\n  hass: HomeAssistant,\n  options: { prefs?: EnergyPreferences; key?: string } = {}\n): EnergyCollection => {\n  let key = \"_energy\";\n  if (options.key) {\n    if (!options.key.startsWith(\"energy_\")) {\n      throw new Error(\"Key need to start with energy_\");\n    }\n    key = `_${options.key}`;\n  }\n\n  if ((hass.connection as any)[key]) {\n    return (hass.connection as any)[key];\n  }\n\n  energyCollectionKeys.push(options.key);\n\n  const collection = getCollection<EnergyData>(\n    hass.connection,\n    key,\n    async () => {\n      if (!collection.prefs) {\n        // This will raise if not found.\n        // Detect by checking `e.code === \"not_found\"\n        collection.prefs = await getEnergyPreferences(hass);\n      }\n\n      scheduleHourlyRefresh(collection);\n\n      return getEnergyData(\n        hass,\n        collection.prefs,\n        collection.start,\n        collection.end,\n        collection.compare\n      );\n    }\n  ) as EnergyCollection;\n\n  const origSubscribe = collection.subscribe;\n\n  collection.subscribe = (subscriber: (data: EnergyData) => void) => {\n    const unsub = origSubscribe(subscriber);\n    collection._active++;\n\n    if (collection._refreshTimeout === undefined) {\n      scheduleHourlyRefresh(collection);\n    }\n\n    return () => {\n      collection._active--;\n      if (collection._active < 1) {\n        clearTimeout(collection._refreshTimeout);\n        collection._refreshTimeout = undefined;\n      }\n      unsub();\n    };\n  };\n\n  collection._active = 0;\n  collection.prefs = options.prefs;\n  const now = new Date();\n  const hour = formatTime24h(now, hass.locale, hass.config).split(\":\")[0];\n  // Set start to start of today if we have data for today, otherwise yesterday\n  collection.start = calcDate(\n    hour === \"0\" ? addDays(now, -1) : now,\n    startOfDay,\n    hass.locale,\n    hass.config\n  );\n  collection.end = calcDate(\n    hour === \"0\" ? addDays(now, -1) : now,\n    endOfDay,\n    hass.locale,\n    hass.config\n  );\n\n  const scheduleUpdatePeriod = () => {\n    collection._updatePeriodTimeout = window.setTimeout(\n      () => {\n        collection.start = calcDate(\n          new Date(),\n          startOfDay,\n          hass.locale,\n          hass.config\n        );\n        collection.end = calcDate(\n          new Date(),\n          endOfDay,\n          hass.locale,\n          hass.config\n        );\n        scheduleUpdatePeriod();\n      },\n      addHours(calcDate(now, endOfDay, hass.locale, hass.config), 1).getTime() -\n        Date.now() // Switch to next day an hour after the day changed\n    );\n  };\n  scheduleUpdatePeriod();\n\n  collection.clearPrefs = () => {\n    collection.prefs = undefined;\n  };\n  collection.setPeriod = (newStart: Date, newEnd?: Date) => {\n    collection.start = newStart;\n    collection.end = newEnd;\n    if (\n      collection.start.getTime() ===\n        calcDate(new Date(), startOfDay, hass.locale, hass.config).getTime() &&\n      collection.end?.getTime() ===\n        calcDate(new Date(), endOfDay, hass.locale, hass.config).getTime() &&\n      !collection._updatePeriodTimeout\n    ) {\n      scheduleUpdatePeriod();\n    } else if (collection._updatePeriodTimeout) {\n      clearTimeout(collection._updatePeriodTimeout);\n      collection._updatePeriodTimeout = undefined;\n    }\n  };\n  collection.setCompare = (compare: boolean) => {\n    collection.compare = compare;\n  };\n  return collection;\n};\n\nexport const getEnergySolarForecasts = (hass: HomeAssistant) =>\n  hass.callWS<EnergySolarForecasts>({\n    type: \"energy/solar_forecast\",\n  });\n\nconst energyGasUnitClass = [\"volume\", \"energy\"] as const;\nexport type EnergyGasUnitClass = (typeof energyGasUnitClass)[number];\n\nexport const getEnergyGasUnitClass = (\n  prefs: EnergyPreferences,\n  statisticsMetaData: Record<string, StatisticsMetaData> = {},\n  excludeSource?: string\n): EnergyGasUnitClass | undefined => {\n  for (const source of prefs.energy_sources) {\n    if (source.type !== \"gas\") {\n      continue;\n    }\n    if (excludeSource && excludeSource === source.stat_energy_from) {\n      continue;\n    }\n    const statisticIdWithMeta = statisticsMetaData[source.stat_energy_from];\n    if (\n      energyGasUnitClass.includes(\n        statisticIdWithMeta?.unit_class as EnergyGasUnitClass\n      )\n    ) {\n      return statisticIdWithMeta.unit_class as EnergyGasUnitClass;\n    }\n  }\n  return undefined;\n};\n\nexport const getEnergyGasUnit = (\n  hass: HomeAssistant,\n  prefs: EnergyPreferences,\n  statisticsMetaData: Record<string, StatisticsMetaData> = {}\n): string | undefined => {\n  const unitClass = getEnergyGasUnitClass(prefs, statisticsMetaData);\n  if (unitClass === undefined) {\n    return undefined;\n  }\n  return unitClass === \"energy\"\n    ? \"kWh\"\n    : hass.config.unit_system.length === \"km\"\n      ? \"m³\"\n      : \"ft³\";\n};\n\nexport const getEnergyWaterUnit = (hass: HomeAssistant): string | undefined =>\n  hass.config.unit_system.length === \"km\" ? \"L\" : \"gal\";\n\nexport const energyStatisticHelpUrl =\n  \"/docs/energy/faq/#troubleshooting-missing-entities\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}