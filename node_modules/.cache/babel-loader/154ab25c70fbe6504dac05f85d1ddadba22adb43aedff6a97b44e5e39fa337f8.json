{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.keys.js\";\nexport var isLegacyStrategy = function isLegacyStrategy(strategy) {\n  return !(\"generate\" in strategy);\n};\n// We assume that if a strategy config has only \"type\" and \"options\" parameters, it's a legacy strategy config\nexport var isLegacyStrategyConfig = function isLegacyStrategyConfig(config) {\n  return Object.keys(config).length === 2 && \"options\" in config && _typeof(config.options) === \"object\";\n};\nexport var cleanLegacyStrategyConfig = function cleanLegacyStrategyConfig(config) {\n  if (!isLegacyStrategyConfig(config)) {\n    return config;\n  }\n  var cleanedConfig = Object.assign(Object.assign({}, config), config.options);\n  delete cleanedConfig.options;\n  return cleanedConfig;\n};","map":{"version":3,"names":["isLegacyStrategy","strategy","isLegacyStrategyConfig","config","Object","keys","length","_typeof","options","cleanLegacyStrategyConfig","cleanedConfig","assign"],"sources":["/workspaces/frontend/src/panels/lovelace/strategies/legacy-strategy.ts"],"sourcesContent":["import { LovelaceStrategyConfig } from \"../../../data/lovelace/config/strategy\";\nimport {\n  LovelaceConfig,\n  LovelaceRawConfig,\n} from \"../../../data/lovelace/config/types\";\nimport {\n  LovelaceViewConfig,\n  LovelaceViewRawConfig,\n} from \"../../../data/lovelace/config/view\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const isLegacyStrategy = (\n  strategy: any\n): strategy is LovelaceDashboardStrategy | LovelaceViewStrategy =>\n  !(\"generate\" in strategy);\n\nexport interface LovelaceDashboardStrategy {\n  generateDashboard(info: {\n    config?: LovelaceRawConfig;\n    hass: HomeAssistant;\n  }): Promise<LovelaceConfig>;\n}\n\nexport interface LovelaceViewStrategy {\n  generateView(info: {\n    view: LovelaceViewRawConfig;\n    config: LovelaceConfig;\n    hass: HomeAssistant;\n  }): Promise<LovelaceViewConfig>;\n}\n\n// We assume that if a strategy config has only \"type\" and \"options\" parameters, it's a legacy strategy config\nexport const isLegacyStrategyConfig = (config: LovelaceStrategyConfig) =>\n  Object.keys(config).length === 2 &&\n  \"options\" in config &&\n  typeof config.options === \"object\";\n\nexport const cleanLegacyStrategyConfig = (config: LovelaceStrategyConfig) => {\n  if (!isLegacyStrategyConfig(config)) {\n    return config;\n  }\n  const cleanedConfig = {\n    ...config,\n    ...config.options,\n  };\n\n  delete cleanedConfig.options;\n  return cleanedConfig;\n};\n"],"mappings":";;;AAWA,OAAO,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAC3BC,QAAa;EAAA,OAEb,EAAE,UAAU,IAAIA,QAAQ,CAAC;AAAA;AAiB3B;AACA,OAAO,IAAMC,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAIC,MAA8B;EAAA,OACnEC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,KAAK,CAAC,IAChC,SAAS,IAAIH,MAAM,IACnBI,OAAA,CAAOJ,MAAM,CAACK,OAAO,MAAK,QAAQ;AAAA;AAEpC,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAIN,MAA8B,EAAK;EAC3E,IAAI,CAACD,sBAAsB,CAACC,MAAM,CAAC,EAAE;IACnC,OAAOA,MAAM;EACf;EACA,IAAMO,aAAa,GAAAN,MAAA,CAAAO,MAAA,CAAAP,MAAA,CAAAO,MAAA,KACdR,MAAM,GACNA,MAAM,CAACK,OAAO,CAClB;EAED,OAAOE,aAAa,CAACF,OAAO;EAC5B,OAAOE,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}