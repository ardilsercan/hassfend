{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2;\nimport \"core-js/modules/es.array.concat.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { domainToName } from \"../../../data/integration\";\nimport \"./ha-integration-header\";\nimport \"../../../components/ha-card\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { haStyle } from \"../../../resources/styles\";\nexport var HaIntegrationActionCard = _decorate([customElement(\"ha-integration-action-card\")], function (_initialize, _LitElement) {\n  var HaIntegrationActionCard = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaIntegrationActionCard, _LitElement2);\n    function HaIntegrationActionCard() {\n      var _this;\n      _classCallCheck(this, HaIntegrationActionCard);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaIntegrationActionCard, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaIntegrationActionCard);\n  }(_LitElement);\n  return {\n    F: HaIntegrationActionCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"banner\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"localizedDomainName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"domain\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"manifest\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass$themes;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-card outlined>\\n        <div class=\\\"card-content\\\">\\n          <img\\n            alt=\\\"\\\"\\n            src=\", \"\\n            crossorigin=\\\"anonymous\\\"\\n            referrerpolicy=\\\"no-referrer\\\"\\n            @error=\", \"\\n            @load=\", \"\\n          />\\n          <h2>\", \"</h2>\\n          <h3>\\n            \", \"\\n          </h3>\\n        </div>\\n        <div class=\\\"filler\\\"></div>\\n        <div class=\\\"card-actions\\\"><slot></slot></div>\\n        <div class=\\\"header-button\\\"><slot name=\\\"header-button\\\"></slot></div>\\n      </ha-card>\\n    \"])), brandsUrl({\n          domain: this.domain,\n          type: \"icon\",\n          darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n        }), this._onImageError, this._onImageLoad, this.label, this.localizedDomainName || domainToName(this.hass.localize, this.domain, this.manifest));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageLoad\",\n      value: function _onImageLoad(ev) {\n        ev.target.style.visibility = \"initial\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageError\",\n      value: function _onImageError(ev) {\n        ev.target.style.visibility = \"hidden\";\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value: function value() {\n        return [haStyle, css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n      ha-card {\\n        display: flex;\\n        flex-direction: column;\\n        height: 100%;\\n      }\\n      img {\\n        width: 40px;\\n        height: 40px;\\n      }\\n      h2 {\\n        font-size: 16px;\\n        font-weight: 400;\\n        margin-top: 8px;\\n        margin-bottom: 0;\\n        max-width: 100%;\\n      }\\n      h3 {\\n        font-size: 14px;\\n        margin: 0;\\n        max-width: 100%;\\n        text-align: center;\\n      }\\n      .header-button {\\n        position: absolute;\\n        top: 8px;\\n        right: 8px;\\n      }\\n      .filler {\\n        flex: 1;\\n      }\\n      .attention {\\n        --state-color: var(--error-color);\\n        --text-on-state-color: var(--text-primary-color);\\n      }\\n      .card-content {\\n        display: flex;\\n        justify-content: center;\\n        flex-direction: column;\\n        align-items: center;\\n      }\\n      .card-actions {\\n        border-top: none;\\n        padding-top: 0;\\n        padding-bottom: 16px;\\n        justify-content: center;\\n        display: flex;\\n      }\\n      :host ::slotted(*) {\\n        margin-right: 8px;\\n        margin-inline-end: 8px;\\n        margin-inline-start: initial;\\n      }\\n      :host ::slotted(:last-child) {\\n        margin-right: 0;\\n        margin-inline-end: 0;\\n        margin-inline-start: initial;\\n      }\\n    \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","domainToName","brandsUrl","haStyle","HaIntegrationActionCard","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","render","_this$hass$themes","_templateObject","_taggedTemplateLiteral","domain","type","darkOptimized","hass","themes","darkMode","_onImageError","_onImageLoad","label","localizedDomainName","localize","manifest","ev","target","style","visibility","static","_templateObject2"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/integrations/ha-integration-action-card.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  domainToName,\n  type IntegrationManifest,\n} from \"../../../data/integration\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"./ha-integration-header\";\nimport \"../../../components/ha-card\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { haStyle } from \"../../../resources/styles\";\n\n@customElement(\"ha-integration-action-card\")\nexport class HaIntegrationActionCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public banner!: string;\n\n  @property() public localizedDomainName?: string;\n\n  @property() public domain!: string;\n\n  @property() public label!: string;\n\n  @property({ attribute: false }) public manifest?: IntegrationManifest;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card outlined>\n        <div class=\"card-content\">\n          <img\n            alt=\"\"\n            src=${brandsUrl({\n              domain: this.domain,\n              type: \"icon\",\n              darkOptimized: this.hass.themes?.darkMode,\n            })}\n            crossorigin=\"anonymous\"\n            referrerpolicy=\"no-referrer\"\n            @error=${this._onImageError}\n            @load=${this._onImageLoad}\n          />\n          <h2>${this.label}</h2>\n          <h3>\n            ${this.localizedDomainName ||\n            domainToName(this.hass.localize, this.domain, this.manifest)}\n          </h3>\n        </div>\n        <div class=\"filler\"></div>\n        <div class=\"card-actions\"><slot></slot></div>\n        <div class=\"header-button\"><slot name=\"header-button\"></slot></div>\n      </ha-card>\n    `;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.visibility = \"initial\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.visibility = \"hidden\";\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      ha-card {\n        display: flex;\n        flex-direction: column;\n        height: 100%;\n      }\n      img {\n        width: 40px;\n        height: 40px;\n      }\n      h2 {\n        font-size: 16px;\n        font-weight: 400;\n        margin-top: 8px;\n        margin-bottom: 0;\n        max-width: 100%;\n      }\n      h3 {\n        font-size: 14px;\n        margin: 0;\n        max-width: 100%;\n        text-align: center;\n      }\n      .header-button {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n      }\n      .filler {\n        flex: 1;\n      }\n      .attention {\n        --state-color: var(--error-color);\n        --text-on-state-color: var(--text-primary-color);\n      }\n      .card-content {\n        display: flex;\n        justify-content: center;\n        flex-direction: column;\n        align-items: center;\n      }\n      .card-actions {\n        border-top: none;\n        padding-top: 0;\n        padding-bottom: 16px;\n        justify-content: center;\n        display: flex;\n      }\n      :host ::slotted(*) {\n        margin-right: 8px;\n        margin-inline-end: 8px;\n        margin-inline-start: initial;\n      }\n      :host ::slotted(:last-child) {\n        margin-right: 0;\n        margin-inline-end: 0;\n        margin-inline-start: initial;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-integration-action-card\": HaIntegrationActionCard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}