{"ast":null,"code":"import { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nexport const getCloudTTSInfo = hass => hass.callWS({\n  type: \"cloud/tts/info\"\n});\nexport const getCloudTtsLanguages = info => {\n  const languages = [];\n  if (!info) {\n    return languages;\n  }\n  const seen = new Set();\n  for (const [lang] of info.languages) {\n    if (seen.has(lang)) {\n      continue;\n    }\n    seen.add(lang);\n    languages.push(lang);\n  }\n  return languages;\n};\nexport const getCloudTtsSupportedGenders = (language, info, localize) => {\n  const genders = [];\n  if (!info) {\n    return genders;\n  }\n  for (const [curLang, gender] of info.languages) {\n    if (curLang === language) {\n      genders.push([gender, gender === \"male\" || gender === \"female\" ? localize(`ui.components.media-browser.tts.gender_${gender}`) : gender]);\n    }\n  }\n  return genders.sort((a, b) => caseInsensitiveStringCompare(a[1], b[1]));\n};","map":{"version":3,"names":["caseInsensitiveStringCompare","getCloudTTSInfo","hass","callWS","type","getCloudTtsLanguages","info","languages","seen","Set","lang","has","add","push","getCloudTtsSupportedGenders","language","localize","genders","curLang","gender","sort","a","b"],"sources":["/workspaces/frontend/src/data/cloud/tts.ts"],"sourcesContent":["import { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { LocalizeFunc } from \"../../common/translations/localize\";\nimport { HomeAssistant } from \"../../types\";\n\nexport interface CloudTTSInfo {\n  languages: Array<[string, string]>;\n}\n\nexport const getCloudTTSInfo = (hass: HomeAssistant) =>\n  hass.callWS<CloudTTSInfo>({ type: \"cloud/tts/info\" });\n\nexport const getCloudTtsLanguages = (info?: CloudTTSInfo) => {\n  const languages: string[] = [];\n\n  if (!info) {\n    return languages;\n  }\n\n  const seen = new Set<string>();\n  for (const [lang] of info.languages) {\n    if (seen.has(lang)) {\n      continue;\n    }\n    seen.add(lang);\n    languages.push(lang);\n  }\n  return languages;\n};\n\nexport const getCloudTtsSupportedGenders = (\n  language: string,\n  info: CloudTTSInfo | undefined,\n  localize: LocalizeFunc\n) => {\n  const genders: Array<[string, string]> = [];\n\n  if (!info) {\n    return genders;\n  }\n\n  for (const [curLang, gender] of info.languages) {\n    if (curLang === language) {\n      genders.push([\n        gender,\n        gender === \"male\" || gender === \"female\"\n          ? localize(`ui.components.media-browser.tts.gender_${gender}`)\n          : gender,\n      ]);\n    }\n  }\n\n  return genders.sort((a, b) => caseInsensitiveStringCompare(a[1], b[1]));\n};\n"],"mappings":"AAAA,SAASA,4BAA4B,QAAQ,6BAA6B;AAQ1E,OAAO,MAAMC,eAAe,GAAIC,IAAmB,IACjDA,IAAI,CAACC,MAAM,CAAe;EAAEC,IAAI,EAAE;AAAiB,CAAC,CAAC;AAEvD,OAAO,MAAMC,oBAAoB,GAAIC,IAAmB,IAAK;EAC3D,MAAMC,SAAmB,GAAG,EAAE;EAE9B,IAAI,CAACD,IAAI,EAAE;IACT,OAAOC,SAAS;EAClB;EAEA,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAS,CAAC;EAC9B,KAAK,MAAM,CAACC,IAAI,CAAC,IAAIJ,IAAI,CAACC,SAAS,EAAE;IACnC,IAAIC,IAAI,CAACG,GAAG,CAACD,IAAI,CAAC,EAAE;MAClB;IACF;IACAF,IAAI,CAACI,GAAG,CAACF,IAAI,CAAC;IACdH,SAAS,CAACM,IAAI,CAACH,IAAI,CAAC;EACtB;EACA,OAAOH,SAAS;AAClB,CAAC;AAED,OAAO,MAAMO,2BAA2B,GAAGA,CACzCC,QAAgB,EAChBT,IAA8B,EAC9BU,QAAsB,KACnB;EACH,MAAMC,OAAgC,GAAG,EAAE;EAE3C,IAAI,CAACX,IAAI,EAAE;IACT,OAAOW,OAAO;EAChB;EAEA,KAAK,MAAM,CAACC,OAAO,EAAEC,MAAM,CAAC,IAAIb,IAAI,CAACC,SAAS,EAAE;IAC9C,IAAIW,OAAO,KAAKH,QAAQ,EAAE;MACxBE,OAAO,CAACJ,IAAI,CAAC,CACXM,MAAM,EACNA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,QAAQ,GACpCH,QAAQ,CAAE,0CAAyCG,MAAO,EAAC,CAAC,GAC5DA,MAAM,CACX,CAAC;IACJ;EACF;EAEA,OAAOF,OAAO,CAACG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKtB,4BAA4B,CAACqB,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}