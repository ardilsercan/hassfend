{"ast":null,"code":"import { strStartsWith } from \"../common/string/starts-with\";\nexport const loadTrace = (hass, domain, item_id, run_id) => hass.callWS({\n  type: \"trace/get\",\n  domain,\n  item_id,\n  run_id\n});\nexport const loadTraces = (hass, domain, item_id) => hass.callWS({\n  type: \"trace/list\",\n  domain,\n  item_id\n});\nexport const loadTraceContexts = (hass, domain, item_id) => hass.callWS({\n  type: \"trace/contexts\",\n  domain,\n  item_id\n});\nexport const getDataFromPath = (config, path) => {\n  const parts = path.split(\"/\").reverse();\n  let result = config;\n  while (parts.length) {\n    const raw = parts.pop();\n    const asNumber = Number(raw);\n    if (isNaN(asNumber)) {\n      const tempResult = result[raw];\n      if (!tempResult && raw === \"sequence\") {\n        continue;\n      }\n      result = tempResult;\n      continue;\n    }\n    if (Array.isArray(result)) {\n      result = result[asNumber];\n      continue;\n    }\n    if (asNumber !== 0) {\n      throw new Error(\"If config is not an array, can only return index 0\");\n    }\n  }\n  return result;\n};\n\n// It is 'trigger' if manually triggered by the user via UI\nexport const isTriggerPath = path => path === \"trigger\" || strStartsWith(path, \"trigger/\");\nexport const getTriggerPathFromTrace = steps => Object.keys(steps).find(path => isTriggerPath(path));","map":{"version":3,"names":["strStartsWith","loadTrace","hass","domain","item_id","run_id","callWS","type","loadTraces","loadTraceContexts","getDataFromPath","config","path","parts","split","reverse","result","length","raw","pop","asNumber","Number","isNaN","tempResult","Array","isArray","Error","isTriggerPath","getTriggerPathFromTrace","steps","Object","keys","find"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/trace.ts"],"sourcesContent":["import { strStartsWith } from \"../common/string/starts-with\";\nimport { Context, HomeAssistant } from \"../types\";\nimport {\n  BlueprintAutomationConfig,\n  ManualAutomationConfig,\n} from \"./automation\";\nimport { BlueprintScriptConfig, ScriptConfig } from \"./script\";\n\ninterface BaseTraceStep {\n  path: string;\n  timestamp: string;\n  error?: string;\n  changed_variables?: Record<string, unknown>;\n}\n\nexport interface TriggerTraceStep extends BaseTraceStep {\n  changed_variables: {\n    trigger: {\n      alias?: string;\n      description: string;\n      [key: string]: unknown;\n    };\n    [key: string]: unknown;\n  };\n}\n\nexport interface ConditionTraceStep extends BaseTraceStep {\n  result?: { result: boolean };\n}\n\nexport interface CallServiceActionTraceStep extends BaseTraceStep {\n  result?: {\n    limit: number;\n    running_script: boolean;\n    params: Record<string, unknown>;\n  };\n  child_id?: {\n    domain: string;\n    item_id: string;\n    run_id: string;\n  };\n}\n\nexport interface ChooseActionTraceStep extends BaseTraceStep {\n  result?: { choice: number | \"default\" };\n}\n\nexport interface IfActionTraceStep extends BaseTraceStep {\n  result?: { choice: \"then\" | \"else\" };\n}\n\nexport interface StopActionTraceStep extends BaseTraceStep {\n  result?: { stop: string; error: boolean };\n}\n\nexport interface ChooseChoiceActionTraceStep extends BaseTraceStep {\n  result?: { result: boolean };\n}\n\nexport type ActionTraceStep =\n  | BaseTraceStep\n  | ConditionTraceStep\n  | CallServiceActionTraceStep\n  | ChooseActionTraceStep\n  | ChooseChoiceActionTraceStep;\n\ninterface BaseTrace {\n  domain: string;\n  item_id: string;\n  last_step: string | null;\n  run_id: string;\n  state: \"running\" | \"stopped\" | \"debugged\";\n  timestamp: {\n    start: string;\n    finish: string | null;\n  };\n  script_execution:\n    | // The script was not executed because the automation's condition failed\n    \"failed_conditions\"\n    // The script was not executed because the run mode is single\n    | \"failed_single\"\n    // The script was not executed because max parallel runs would be exceeded\n    | \"failed_max_runs\"\n    // All script steps finished:\n    | \"finished\"\n    // Script execution stopped by the script itself because a condition fails, wait_for_trigger timeouts etc:\n    | \"aborted\"\n    // Details about failing condition, timeout etc. is in the last element of the trace\n    // Script execution stops because of an unexpected exception:\n    | \"error\"\n    // The exception is in the trace itself or in the last element of the trace\n    // Script execution stopped by async_stop called on the script run because Indexline Technology is shutting down, script mode is SCRIPT_MODE_RESTART etc:\n    | \"cancelled\";\n}\n\ninterface BaseTraceExtended {\n  trace: Record<string, ActionTraceStep[]>;\n  context: Context;\n  error?: string;\n}\n\nexport interface AutomationTrace extends BaseTrace {\n  domain: \"automation\";\n  trigger: string;\n}\n\nexport interface AutomationTraceExtended\n  extends AutomationTrace,\n    BaseTraceExtended {\n  config: ManualAutomationConfig;\n  blueprint_inputs?: BlueprintAutomationConfig;\n}\n\nexport interface ScriptTrace extends BaseTrace {\n  domain: \"script\";\n}\n\nexport interface ScriptTraceExtended extends ScriptTrace, BaseTraceExtended {\n  config: ScriptConfig;\n  blueprint_inputs?: BlueprintScriptConfig;\n}\n\nexport type TraceExtended = AutomationTraceExtended | ScriptTraceExtended;\n\ninterface TraceTypes {\n  automation: {\n    short: AutomationTrace;\n    extended: AutomationTraceExtended;\n  };\n  script: {\n    short: ScriptTrace;\n    extended: ScriptTraceExtended;\n  };\n}\n\nexport const loadTrace = <T extends keyof TraceTypes>(\n  hass: HomeAssistant,\n  domain: T,\n  item_id: string,\n  run_id: string\n): Promise<TraceTypes[T][\"extended\"]> =>\n  hass.callWS({\n    type: \"trace/get\",\n    domain,\n    item_id,\n    run_id,\n  });\n\nexport const loadTraces = <T extends keyof TraceTypes>(\n  hass: HomeAssistant,\n  domain: T,\n  item_id: string\n): Promise<Array<TraceTypes[T][\"short\"]>> =>\n  hass.callWS({\n    type: \"trace/list\",\n    domain,\n    item_id,\n  });\n\nexport type TraceContexts = Record<\n  string,\n  { run_id: string; domain: string; item_id: string }\n>;\n\nexport const loadTraceContexts = (\n  hass: HomeAssistant,\n  domain?: string,\n  item_id?: string\n): Promise<TraceContexts> =>\n  hass.callWS({\n    type: \"trace/contexts\",\n    domain,\n    item_id,\n  });\n\nexport const getDataFromPath = (\n  config: TraceExtended[\"config\"],\n  path: string\n): any => {\n  const parts = path.split(\"/\").reverse();\n\n  let result: any = config;\n\n  while (parts.length) {\n    const raw = parts.pop()!;\n    const asNumber = Number(raw);\n\n    if (isNaN(asNumber)) {\n      const tempResult = result[raw];\n      if (!tempResult && raw === \"sequence\") {\n        continue;\n      }\n      result = tempResult;\n      continue;\n    }\n\n    if (Array.isArray(result)) {\n      result = result[asNumber];\n      continue;\n    }\n\n    if (asNumber !== 0) {\n      throw new Error(\"If config is not an array, can only return index 0\");\n    }\n  }\n\n  return result;\n};\n\n// It is 'trigger' if manually triggered by the user via UI\nexport const isTriggerPath = (path: string): boolean =>\n  path === \"trigger\" || strStartsWith(path, \"trigger/\");\n\nexport const getTriggerPathFromTrace = (\n  steps: Record<string, BaseTraceStep[]>\n): string | undefined => Object.keys(steps).find((path) => isTriggerPath(path));\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,8BAA8B;AAuI5D,OAAO,MAAMC,SAAS,GAAGA,CACvBC,IAAmB,EACnBC,MAAS,EACTC,OAAe,EACfC,MAAc,KAEdH,IAAI,CAACI,MAAM,CAAC;EACVC,IAAI,EAAE,WAAW;EACjBJ,MAAM;EACNC,OAAO;EACPC;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMG,UAAU,GAAGA,CACxBN,IAAmB,EACnBC,MAAS,EACTC,OAAe,KAEfF,IAAI,CAACI,MAAM,CAAC;EACVC,IAAI,EAAE,YAAY;EAClBJ,MAAM;EACNC;AACF,CAAC,CAAC;AAOJ,OAAO,MAAMK,iBAAiB,GAAGA,CAC/BP,IAAmB,EACnBC,MAAe,EACfC,OAAgB,KAEhBF,IAAI,CAACI,MAAM,CAAC;EACVC,IAAI,EAAE,gBAAgB;EACtBJ,MAAM;EACNC;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMM,eAAe,GAAGA,CAC7BC,MAA+B,EAC/BC,IAAY,KACJ;EACR,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAC,CAAC;EAEvC,IAAIC,MAAW,GAAGL,MAAM;EAExB,OAAOE,KAAK,CAACI,MAAM,EAAE;IACnB,MAAMC,GAAG,GAAGL,KAAK,CAACM,GAAG,CAAC,CAAE;IACxB,MAAMC,QAAQ,GAAGC,MAAM,CAACH,GAAG,CAAC;IAE5B,IAAII,KAAK,CAACF,QAAQ,CAAC,EAAE;MACnB,MAAMG,UAAU,GAAGP,MAAM,CAACE,GAAG,CAAC;MAC9B,IAAI,CAACK,UAAU,IAAIL,GAAG,KAAK,UAAU,EAAE;QACrC;MACF;MACAF,MAAM,GAAGO,UAAU;MACnB;IACF;IAEA,IAAIC,KAAK,CAACC,OAAO,CAACT,MAAM,CAAC,EAAE;MACzBA,MAAM,GAAGA,MAAM,CAACI,QAAQ,CAAC;MACzB;IACF;IAEA,IAAIA,QAAQ,KAAK,CAAC,EAAE;MAClB,MAAM,IAAIM,KAAK,CAAC,oDAAoD,CAAC;IACvE;EACF;EAEA,OAAOV,MAAM;AACf,CAAC;;AAED;AACA,OAAO,MAAMW,aAAa,GAAIf,IAAY,IACxCA,IAAI,KAAK,SAAS,IAAIZ,aAAa,CAACY,IAAI,EAAE,UAAU,CAAC;AAEvD,OAAO,MAAMgB,uBAAuB,GAClCC,KAAsC,IACfC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,IAAI,CAAEpB,IAAI,IAAKe,aAAa,CAACf,IAAI,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}