{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport \"../../components/ha-control-select\";\nimport \"../../components/ha-control-slider\";\nimport { ALARM_MODES } from \"../../data/alarm_control_panel\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { showEnterCodeDialogDialog } from \"../../dialogs/enter-code/show-enter-code-dialog\";\nexport let HaStateControlAlarmControlPanelModes = _decorate([customElement(\"ha-state-control-alarm_control_panel-modes\")], function (_initialize, _LitElement) {\n  class HaStateControlAlarmControlPanelModes extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStateControlAlarmControlPanelModes,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_currentMode\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_modes\",\n      value() {\n        return memoizeOne(stateObj => {\n          const modes = Object.keys(ALARM_MODES);\n          return modes.filter(mode => {\n            const feature = ALARM_MODES[mode].feature;\n            return !feature || supportsFeature(stateObj, feature);\n          });\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProp) {\n        _get(_getPrototypeOf(HaStateControlAlarmControlPanelModes.prototype), \"willUpdate\", this).call(this, changedProp);\n        if (changedProp.has(\"stateObj\")) {\n          this._currentMode = this._getCurrentMode(this.stateObj);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getCurrentMode\",\n      value: function _getCurrentMode(stateObj) {\n        return this._modes(stateObj).find(mode => mode === stateObj.state);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setMode\",\n      value: async function _setMode(mode) {\n        const {\n          service\n        } = ALARM_MODES[mode];\n        let code;\n        if (mode !== \"disarmed\" && this.stateObj.attributes.code_arm_required && this.stateObj.attributes.code_format || mode === \"disarmed\" && this.stateObj.attributes.code_format) {\n          const disarm = mode === \"disarmed\";\n          const response = await showEnterCodeDialogDialog(this, {\n            codeFormat: this.stateObj.attributes.code_format,\n            title: this.hass.localize(`ui.card.alarm_control_panel.${disarm ? \"disarm\" : \"arm\"}`),\n            submitText: this.hass.localize(`ui.card.alarm_control_panel.${disarm ? \"disarmn\" : \"arm\"}`)\n          });\n          if (response == null) {\n            throw new Error(\"cancel\");\n          }\n          code = response;\n        }\n        await this.hass.callService(\"alarm_control_panel\", service, {\n          entity_id: this.stateObj.entity_id,\n          code\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: async function _valueChanged(ev) {\n        const mode = ev.detail.value;\n        if (mode === this.stateObj.state) return;\n        const oldMode = this._getCurrentMode(this.stateObj);\n        this._currentMode = mode;\n        try {\n          await this._setMode(mode);\n        } catch (err) {\n          this._currentMode = oldMode;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const color = stateColorCss(this.stateObj);\n        const modes = this._modes(this.stateObj);\n        const options = modes.map(mode => ({\n          value: mode,\n          label: this.hass.localize(`ui.card.alarm_control_panel.modes.${mode}`),\n          path: ALARM_MODES[mode].path\n        }));\n        return html`\n      <ha-control-select\n        vertical\n        .options=${options}\n        .value=${this._currentMode}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${this.hass.localize(\"ui.card.alarm_control_panel.modes_label\")}\n        style=${styleMap({\n          \"--control-select-color\": color,\n          \"--modes-count\": modes.length.toString()\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      >\n      </ha-control-select>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-select {\n        height: 45vh;\n        max-height: max(320px, var(--modes-count, 1) * 80px);\n        min-height: max(200px, var(--modes-count, 1) * 80px);\n        --control-select-thickness: 100px;\n        --control-select-border-radius: 24px;\n        --control-select-color: var(--primary-color);\n        --control-select-background: var(--disabled-color);\n        --control-select-background-opacity: 0.2;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","state","styleMap","memoizeOne","stateColorCss","supportsFeature","ALARM_MODES","UNAVAILABLE","showEnterCodeDialogDialog","HaStateControlAlarmControlPanelModes","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","stateObj","modes","Object","keys","filter","mode","feature","willUpdate","changedProp","_get","_getPrototypeOf","prototype","call","has","_currentMode","_getCurrentMode","_modes","find","_setMode","service","code","attributes","code_arm_required","code_format","disarm","response","codeFormat","title","hass","localize","submitText","Error","callService","entity_id","_valueChanged","ev","detail","oldMode","err","render","color","options","map","label","path","length","toString","static","styles"],"sources":["/workspaces/frontend/src/state-control/alarm_control_panel/ha-state-control-alarm_control_panel-modes.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport \"../../components/ha-control-select\";\nimport type { ControlSelectOption } from \"../../components/ha-control-select\";\nimport \"../../components/ha-control-slider\";\nimport {\n  ALARM_MODES,\n  AlarmControlPanelEntity,\n  AlarmMode,\n} from \"../../data/alarm_control_panel\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { showEnterCodeDialogDialog } from \"../../dialogs/enter-code/show-enter-code-dialog\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-state-control-alarm_control_panel-modes\")\nexport class HaStateControlAlarmControlPanelModes extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: AlarmControlPanelEntity;\n\n  @state() _currentMode?: AlarmMode;\n\n  private _modes = memoizeOne((stateObj: AlarmControlPanelEntity) => {\n    const modes = Object.keys(ALARM_MODES) as AlarmMode[];\n    return modes.filter((mode) => {\n      const feature = ALARM_MODES[mode as AlarmMode].feature;\n      return !feature || supportsFeature(stateObj, feature);\n    });\n  });\n\n  protected willUpdate(changedProp: PropertyValues): void {\n    super.willUpdate(changedProp);\n    if (changedProp.has(\"stateObj\")) {\n      this._currentMode = this._getCurrentMode(this.stateObj);\n    }\n  }\n\n  private _getCurrentMode(stateObj: AlarmControlPanelEntity) {\n    return this._modes(stateObj).find((mode) => mode === stateObj.state);\n  }\n\n  private async _setMode(mode: AlarmMode) {\n    const { service } = ALARM_MODES[mode];\n\n    let code: string | undefined;\n\n    if (\n      (mode !== \"disarmed\" &&\n        this.stateObj!.attributes.code_arm_required &&\n        this.stateObj!.attributes.code_format) ||\n      (mode === \"disarmed\" && this.stateObj!.attributes.code_format)\n    ) {\n      const disarm = mode === \"disarmed\";\n\n      const response = await showEnterCodeDialogDialog(this, {\n        codeFormat: this.stateObj!.attributes.code_format,\n        title: this.hass!.localize(\n          `ui.card.alarm_control_panel.${disarm ? \"disarm\" : \"arm\"}`\n        ),\n        submitText: this.hass!.localize(\n          `ui.card.alarm_control_panel.${disarm ? \"disarmn\" : \"arm\"}`\n        ),\n      });\n      if (response == null) {\n        throw new Error(\"cancel\");\n      }\n      code = response;\n    }\n\n    await this.hass!.callService(\"alarm_control_panel\", service, {\n      entity_id: this.stateObj!.entity_id,\n      code,\n    });\n  }\n\n  private async _valueChanged(ev: CustomEvent) {\n    const mode = (ev.detail as any).value as AlarmMode;\n\n    if (mode === this.stateObj!.state) return;\n\n    const oldMode = this._getCurrentMode(this.stateObj!);\n    this._currentMode = mode;\n\n    try {\n      await this._setMode(mode);\n    } catch (err) {\n      this._currentMode = oldMode;\n    }\n  }\n\n  protected render() {\n    const color = stateColorCss(this.stateObj);\n\n    const modes = this._modes(this.stateObj);\n\n    const options = modes.map<ControlSelectOption>((mode) => ({\n      value: mode,\n      label: this.hass.localize(`ui.card.alarm_control_panel.modes.${mode}`),\n      path: ALARM_MODES[mode].path,\n    }));\n\n    return html`\n      <ha-control-select\n        vertical\n        .options=${options}\n        .value=${this._currentMode}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${this.hass.localize(\n          \"ui.card.alarm_control_panel.modes_label\"\n        )}\n        style=${styleMap({\n          \"--control-select-color\": color,\n          \"--modes-count\": modes.length.toString(),\n        })}\n        .disabled=${this.stateObj!.state === UNAVAILABLE}\n      >\n      </ha-control-select>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-select {\n        height: 45vh;\n        max-height: max(320px, var(--modes-count, 1) * 80px);\n        min-height: max(200px, var(--modes-count, 1) * 80px);\n        --control-select-thickness: 100px;\n        --control-select-border-radius: 24px;\n        --control-select-color: var(--primary-color);\n        --control-select-background: var(--disabled-color);\n        --control-select-background-opacity: 0.2;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-alarm_control_panel-modes\": HaStateControlAlarmControlPanelModes;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,QAAwB,KAAK;AAC3E,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,aAAa,QAAQ,iCAAiC;AAC/D,SAASC,eAAe,QAAQ,sCAAsC;AACtE,OAAO,oCAAoC;AAE3C,OAAO,oCAAoC;AAC3C,SACEC,WAAW,QAGN,gCAAgC;AACvC,SAASC,WAAW,QAAQ,mBAAmB;AAC/C,SAASC,yBAAyB,QAAQ,iDAAiD;AAG3F,WACaC,oCAAoC,GAAAC,SAAA,EADhDX,aAAa,CAAC,4CAA4C,CAAC,aAAAY,WAAA,EAAAC,WAAA;EAA5D,MACaH,oCAAoC,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAuHrE;EAAC;IAAAI,CAAA,EAvHYN,oCAAoC;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAC9ClB,QAAQ,CAAC;QAAEmB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BlB,QAAQ,CAAC;QAAEmB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjB,KAAK,CAAC,CAAC;MAAAmB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAESlB,UAAU,CAAEmB,QAAiC,IAAK;UACjE,MAAMC,KAAK,GAAGC,MAAM,CAACC,IAAI,CAACnB,WAAW,CAAgB;UACrD,OAAOiB,KAAK,CAACG,MAAM,CAAEC,IAAI,IAAK;YAC5B,MAAMC,OAAO,GAAGtB,WAAW,CAACqB,IAAI,CAAc,CAACC,OAAO;YACtD,OAAO,CAACA,OAAO,IAAIvB,eAAe,CAACiB,QAAQ,EAAEM,OAAO,CAAC;UACvD,CAAC,CAAC;QACJ,CAAC,CAAC;MAAA;IAAA;MAAAX,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAEF,SAAAQ,WAAqBC,WAA2B,EAAQ;QACtDC,IAAA,CAAAC,eAAA,CAhBSvB,oCAAoC,CAAAwB,SAAA,uBAAAC,IAAA,OAgB5BJ,WAAW;QAC5B,IAAIA,WAAW,CAACK,GAAG,CAAC,UAAU,CAAC,EAAE;UAC/B,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,eAAe,CAAC,IAAI,CAACf,QAAQ,CAAC;QACzD;MACF;IAAC;MAAAL,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAgB,gBAAwBf,QAAiC,EAAE;QACzD,OAAO,IAAI,CAACgB,MAAM,CAAChB,QAAQ,CAAC,CAACiB,IAAI,CAAEZ,IAAI,IAAKA,IAAI,KAAKL,QAAQ,CAACrB,KAAK,CAAC;MACtE;IAAC;MAAAgB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAmB,SAAuBb,IAAe,EAAE;QACtC,MAAM;UAAEc;QAAQ,CAAC,GAAGnC,WAAW,CAACqB,IAAI,CAAC;QAErC,IAAIe,IAAwB;QAE5B,IACGf,IAAI,KAAK,UAAU,IAClB,IAAI,CAACL,QAAQ,CAAEqB,UAAU,CAACC,iBAAiB,IAC3C,IAAI,CAACtB,QAAQ,CAAEqB,UAAU,CAACE,WAAW,IACtClB,IAAI,KAAK,UAAU,IAAI,IAAI,CAACL,QAAQ,CAAEqB,UAAU,CAACE,WAAY,EAC9D;UACA,MAAMC,MAAM,GAAGnB,IAAI,KAAK,UAAU;UAElC,MAAMoB,QAAQ,GAAG,MAAMvC,yBAAyB,CAAC,IAAI,EAAE;YACrDwC,UAAU,EAAE,IAAI,CAAC1B,QAAQ,CAAEqB,UAAU,CAACE,WAAW;YACjDI,KAAK,EAAE,IAAI,CAACC,IAAI,CAAEC,QAAQ,CACvB,+BAA8BL,MAAM,GAAG,QAAQ,GAAG,KAAM,EAC3D,CAAC;YACDM,UAAU,EAAE,IAAI,CAACF,IAAI,CAAEC,QAAQ,CAC5B,+BAA8BL,MAAM,GAAG,SAAS,GAAG,KAAM,EAC5D;UACF,CAAC,CAAC;UACF,IAAIC,QAAQ,IAAI,IAAI,EAAE;YACpB,MAAM,IAAIM,KAAK,CAAC,QAAQ,CAAC;UAC3B;UACAX,IAAI,GAAGK,QAAQ;QACjB;QAEA,MAAM,IAAI,CAACG,IAAI,CAAEI,WAAW,CAAC,qBAAqB,EAAEb,OAAO,EAAE;UAC3Dc,SAAS,EAAE,IAAI,CAACjC,QAAQ,CAAEiC,SAAS;UACnCb;QACF,CAAC,CAAC;MACJ;IAAC;MAAAzB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAmC,cAA4BC,EAAe,EAAE;QAC3C,MAAM9B,IAAI,GAAI8B,EAAE,CAACC,MAAM,CAASrC,KAAkB;QAElD,IAAIM,IAAI,KAAK,IAAI,CAACL,QAAQ,CAAErB,KAAK,EAAE;QAEnC,MAAM0D,OAAO,GAAG,IAAI,CAACtB,eAAe,CAAC,IAAI,CAACf,QAAS,CAAC;QACpD,IAAI,CAACc,YAAY,GAAGT,IAAI;QAExB,IAAI;UACF,MAAM,IAAI,CAACa,QAAQ,CAACb,IAAI,CAAC;QAC3B,CAAC,CAAC,OAAOiC,GAAG,EAAE;UACZ,IAAI,CAACxB,YAAY,GAAGuB,OAAO;QAC7B;MACF;IAAC;MAAA1C,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwC,OAAA,EAAmB;QACjB,MAAMC,KAAK,GAAG1D,aAAa,CAAC,IAAI,CAACkB,QAAQ,CAAC;QAE1C,MAAMC,KAAK,GAAG,IAAI,CAACe,MAAM,CAAC,IAAI,CAAChB,QAAQ,CAAC;QAExC,MAAMyC,OAAO,GAAGxC,KAAK,CAACyC,GAAG,CAAuBrC,IAAI,KAAM;UACxDN,KAAK,EAAEM,IAAI;UACXsC,KAAK,EAAE,IAAI,CAACf,IAAI,CAACC,QAAQ,CAAE,qCAAoCxB,IAAK,EAAC,CAAC;UACtEuC,IAAI,EAAE5D,WAAW,CAACqB,IAAI,CAAC,CAACuC;QAC1B,CAAC,CAAC,CAAC;QAEH,OAAOrE,IAAK;AAChB;AACA;AACA,mBAAmBkE,OAAQ;AAC3B,iBAAiB,IAAI,CAAC3B,YAAa;AACnC,yBAAyB,IAAI,CAACoB,aAAc;AAC5C,qBAAqB,IAAI,CAACN,IAAI,CAACC,QAAQ,CAC7B,yCACF,CAAE;AACV,gBAAgBjD,QAAQ,CAAC;UACf,wBAAwB,EAAE4D,KAAK;UAC/B,eAAe,EAAEvC,KAAK,CAAC4C,MAAM,CAACC,QAAQ,CAAC;QACzC,CAAC,CAAE;AACX,oBAAoB,IAAI,CAAC9C,QAAQ,CAAErB,KAAK,KAAKM,WAAY;AACzD;AACA;AACA,KAAK;MACH;IAAC;MAAAU,IAAA;MAAAoD,MAAA;MAAAjD,GAAA;MAAAC,KAAA,EAED,SAAAiD,OAAA,EAAoC;QAClC,OAAO1E,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAtHuDE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}