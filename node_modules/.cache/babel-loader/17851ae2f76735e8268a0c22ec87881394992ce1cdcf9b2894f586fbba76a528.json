{"ast":null,"code":"import { STATES_OFF } from \"../../../../common/const\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nexport const turnOnOffEntities = (hass, entityIds, turnOn = true) => {\n  const domainsToCall = {};\n  entityIds.forEach(entityId => {\n    if (STATES_OFF.includes(hass.states[entityId].state) === turnOn) {\n      const stateDomain = computeDomain(entityId);\n      const serviceDomain = [\"cover\", \"lock\"].includes(stateDomain) ? stateDomain : \"homeassistant\";\n      if (!(serviceDomain in domainsToCall)) {\n        domainsToCall[serviceDomain] = [];\n      }\n      domainsToCall[serviceDomain].push(entityId);\n    }\n  });\n  Object.keys(domainsToCall).forEach(domain => {\n    let service;\n    switch (domain) {\n      case \"lock\":\n        service = turnOn ? \"unlock\" : \"lock\";\n        break;\n      case \"cover\":\n        service = turnOn ? \"open_cover\" : \"close_cover\";\n        break;\n      default:\n        service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n    const entities = domainsToCall[domain];\n    hass.callService(domain, service, {\n      entity_id: entities\n    });\n  });\n};","map":{"version":3,"names":["STATES_OFF","computeDomain","turnOnOffEntities","hass","entityIds","turnOn","domainsToCall","forEach","entityId","includes","states","state","stateDomain","serviceDomain","push","Object","keys","domain","service","entities","callService","entity_id"],"sources":["/workspaces/frontend/src/panels/lovelace/common/entity/turn-on-off-entities.ts"],"sourcesContent":["import { STATES_OFF } from \"../../../../common/const\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { HomeAssistant } from \"../../../../types\";\n\nexport const turnOnOffEntities = (\n  hass: HomeAssistant,\n  entityIds: string[],\n  turnOn = true\n): void => {\n  const domainsToCall = {};\n  entityIds.forEach((entityId) => {\n    if (STATES_OFF.includes(hass.states[entityId].state) === turnOn) {\n      const stateDomain = computeDomain(entityId);\n      const serviceDomain = [\"cover\", \"lock\"].includes(stateDomain)\n        ? stateDomain\n        : \"homeassistant\";\n\n      if (!(serviceDomain in domainsToCall)) {\n        domainsToCall[serviceDomain] = [];\n      }\n      domainsToCall[serviceDomain].push(entityId);\n    }\n  });\n\n  Object.keys(domainsToCall).forEach((domain) => {\n    let service;\n    switch (domain) {\n      case \"lock\":\n        service = turnOn ? \"unlock\" : \"lock\";\n        break;\n      case \"cover\":\n        service = turnOn ? \"open_cover\" : \"close_cover\";\n        break;\n      default:\n        service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    const entities = domainsToCall[domain];\n    hass.callService(domain, service, { entity_id: entities });\n  });\n};\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,0BAA0B;AACrD,SAASC,aAAa,QAAQ,0CAA0C;AAGxE,OAAO,MAAMC,iBAAiB,GAAGA,CAC/BC,IAAmB,EACnBC,SAAmB,EACnBC,MAAM,GAAG,IAAI,KACJ;EACT,MAAMC,aAAa,GAAG,CAAC,CAAC;EACxBF,SAAS,CAACG,OAAO,CAAEC,QAAQ,IAAK;IAC9B,IAAIR,UAAU,CAACS,QAAQ,CAACN,IAAI,CAACO,MAAM,CAACF,QAAQ,CAAC,CAACG,KAAK,CAAC,KAAKN,MAAM,EAAE;MAC/D,MAAMO,WAAW,GAAGX,aAAa,CAACO,QAAQ,CAAC;MAC3C,MAAMK,aAAa,GAAG,CAAC,OAAO,EAAE,MAAM,CAAC,CAACJ,QAAQ,CAACG,WAAW,CAAC,GACzDA,WAAW,GACX,eAAe;MAEnB,IAAI,EAAEC,aAAa,IAAIP,aAAa,CAAC,EAAE;QACrCA,aAAa,CAACO,aAAa,CAAC,GAAG,EAAE;MACnC;MACAP,aAAa,CAACO,aAAa,CAAC,CAACC,IAAI,CAACN,QAAQ,CAAC;IAC7C;EACF,CAAC,CAAC;EAEFO,MAAM,CAACC,IAAI,CAACV,aAAa,CAAC,CAACC,OAAO,CAAEU,MAAM,IAAK;IAC7C,IAAIC,OAAO;IACX,QAAQD,MAAM;MACZ,KAAK,MAAM;QACTC,OAAO,GAAGb,MAAM,GAAG,QAAQ,GAAG,MAAM;QACpC;MACF,KAAK,OAAO;QACVa,OAAO,GAAGb,MAAM,GAAG,YAAY,GAAG,aAAa;QAC/C;MACF;QACEa,OAAO,GAAGb,MAAM,GAAG,SAAS,GAAG,UAAU;IAC7C;IAEA,MAAMc,QAAQ,GAAGb,aAAa,CAACW,MAAM,CAAC;IACtCd,IAAI,CAACiB,WAAW,CAACH,MAAM,EAAEC,OAAO,EAAE;MAAEG,SAAS,EAAEF;IAAS,CAAC,CAAC;EAC5D,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}