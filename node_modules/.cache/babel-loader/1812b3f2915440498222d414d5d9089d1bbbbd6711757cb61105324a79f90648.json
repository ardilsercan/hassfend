{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { isServer, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { AttachableController } from '../../internal/controller/attachable-controller.js';\n/**\n * Events that the focus ring listens to.\n */\nvar EVENTS = ['focusin', 'focusout', 'pointerdown'];\n/**\n * A focus ring component.\n *\n * @fires visibility-changed {Event} Fired whenever `visible` changes.\n */\nexport var FocusRing = /*#__PURE__*/function (_LitElement) {\n  _inherits(FocusRing, _LitElement);\n  function FocusRing() {\n    var _this;\n    _classCallCheck(this, FocusRing);\n    _this = _callSuper(this, FocusRing, arguments);\n    /**\n     * Makes the focus ring visible.\n     */\n    _this.visible = false;\n    /**\n     * Makes the focus ring animate inwards instead of outwards.\n     */\n    _this.inward = false;\n    _this.attachableController = new AttachableController(_assertThisInitialized(_this), _this.onControlChange.bind(_assertThisInitialized(_this)));\n    return _this;\n  }\n  _createClass(FocusRing, [{\n    key: \"htmlFor\",\n    get: function get() {\n      return this.attachableController.htmlFor;\n    },\n    set: function set(htmlFor) {\n      this.attachableController.htmlFor = htmlFor;\n    }\n  }, {\n    key: \"control\",\n    get: function get() {\n      return this.attachableController.control;\n    },\n    set: function set(control) {\n      this.attachableController.control = control;\n    }\n  }, {\n    key: \"attach\",\n    value: function attach(control) {\n      this.attachableController.attach(control);\n    }\n  }, {\n    key: \"detach\",\n    value: function detach() {\n      this.attachableController.detach();\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      _get(_getPrototypeOf(FocusRing.prototype), \"connectedCallback\", this).call(this);\n      // Needed for VoiceOver, which will create a \"group\" if the element is a\n      // sibling to other content.\n      this.setAttribute('aria-hidden', 'true');\n    }\n    /** @private */\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(event) {\n      var _this$control$matches, _this$control;\n      if (event[HANDLED_BY_FOCUS_RING]) {\n        // This ensures the focus ring does not activate when multiple focus rings\n        // are used within a single component.\n        return;\n      }\n      switch (event.type) {\n        default:\n          return;\n        case 'focusin':\n          this.visible = (_this$control$matches = (_this$control = this.control) === null || _this$control === void 0 ? void 0 : _this$control.matches(':focus-visible')) !== null && _this$control$matches !== void 0 ? _this$control$matches : false;\n          break;\n        case 'focusout':\n        case 'pointerdown':\n          this.visible = false;\n          break;\n      }\n      event[HANDLED_BY_FOCUS_RING] = true;\n    }\n  }, {\n    key: \"onControlChange\",\n    value: function onControlChange(prev, next) {\n      if (isServer) return;\n      for (var _i = 0, _EVENTS = EVENTS; _i < _EVENTS.length; _i++) {\n        var event = _EVENTS[_i];\n        prev === null || prev === void 0 || prev.removeEventListener(event, this);\n        next === null || next === void 0 || next.addEventListener(event, this);\n      }\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed) {\n      if (changed.has('visible')) {\n        // This logic can be removed once the `:has` selector has been introduced\n        // to Firefox. This is necessary to allow correct submenu styles.\n        this.dispatchEvent(new Event('visibility-changed'));\n      }\n      _get(_getPrototypeOf(FocusRing.prototype), \"update\", this).call(this, changed);\n    }\n  }]);\n  return FocusRing;\n}(LitElement);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], FocusRing.prototype, \"visible\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], FocusRing.prototype, \"inward\", void 0);\nvar HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');","map":{"version":3,"names":["isServer","LitElement","property","AttachableController","EVENTS","FocusRing","_LitElement","_inherits","_this","_classCallCheck","visible","inward","attachableController","_assertThisInitialized","onControlChange","bind","_createClass","key","get","htmlFor","set","control","value","attach","detach","connectedCallback","_get","_getPrototypeOf","prototype","call","setAttribute","handleEvent","event","_this$control$matches","_this$control","HANDLED_BY_FOCUS_RING","type","matches","prev","next","_i","_EVENTS","length","removeEventListener","addEventListener","update","changed","has","dispatchEvent","Event","__decorate","Boolean","reflect","Symbol"],"sources":["focus-ring.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, LitElement, PropertyValues} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {\n  Attachable,\n  AttachableController,\n} from '../../internal/controller/attachable-controller.js';\n\n/**\n * Events that the focus ring listens to.\n */\nconst EVENTS = ['focusin', 'focusout', 'pointerdown'];\n\n/**\n * A focus ring component.\n *\n * @fires visibility-changed {Event} Fired whenever `visible` changes.\n */\nexport class FocusRing extends LitElement implements Attachable {\n  /**\n   * Makes the focus ring visible.\n   */\n  @property({type: Boolean, reflect: true}) visible = false;\n\n  /**\n   * Makes the focus ring animate inwards instead of outwards.\n   */\n  @property({type: Boolean, reflect: true}) inward = false;\n\n  get htmlFor() {\n    return this.attachableController.htmlFor;\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    this.attachableController.htmlFor = htmlFor;\n  }\n\n  get control() {\n    return this.attachableController.control;\n  }\n  set control(control: HTMLElement | null) {\n    this.attachableController.control = control;\n  }\n\n  private readonly attachableController = new AttachableController(\n    this,\n    this.onControlChange.bind(this),\n  );\n\n  attach(control: HTMLElement) {\n    this.attachableController.attach(control);\n  }\n\n  detach() {\n    this.attachableController.detach();\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // Needed for VoiceOver, which will create a \"group\" if the element is a\n    // sibling to other content.\n    this.setAttribute('aria-hidden', 'true');\n  }\n\n  /** @private */\n  handleEvent(event: FocusRingEvent) {\n    if (event[HANDLED_BY_FOCUS_RING]) {\n      // This ensures the focus ring does not activate when multiple focus rings\n      // are used within a single component.\n      return;\n    }\n\n    switch (event.type) {\n      default:\n        return;\n      case 'focusin':\n        this.visible = this.control?.matches(':focus-visible') ?? false;\n        break;\n      case 'focusout':\n      case 'pointerdown':\n        this.visible = false;\n        break;\n    }\n\n    event[HANDLED_BY_FOCUS_RING] = true;\n  }\n\n  private onControlChange(prev: HTMLElement | null, next: HTMLElement | null) {\n    if (isServer) return;\n\n    for (const event of EVENTS) {\n      prev?.removeEventListener(event, this);\n      next?.addEventListener(event, this);\n    }\n  }\n\n  override update(changed: PropertyValues<FocusRing>) {\n    if (changed.has('visible')) {\n      // This logic can be removed once the `:has` selector has been introduced\n      // to Firefox. This is necessary to allow correct submenu styles.\n      this.dispatchEvent(new Event('visibility-changed'));\n    }\n    super.update(changed);\n  }\n}\n\nconst HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');\n\ninterface FocusRingEvent extends Event {\n  [HANDLED_BY_FOCUS_RING]: true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}