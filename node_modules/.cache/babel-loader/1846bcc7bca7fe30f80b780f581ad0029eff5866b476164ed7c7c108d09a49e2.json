{"ast":null,"code":"import { computeDomain } from \"./compute_domain\";\nexport const isEmptyFilter = filter => filter.include_domains.length + filter.include_entities.length + filter.exclude_domains.length + filter.exclude_entities.length === 0;\nexport const generateFilter = (includeDomains, includeEntities, excludeDomains, excludeEntities) => {\n  const includeDomainsSet = new Set(includeDomains);\n  const includeEntitiesSet = new Set(includeEntities);\n  const excludeDomainsSet = new Set(excludeDomains);\n  const excludeEntitiesSet = new Set(excludeEntities);\n  const haveInclude = includeDomainsSet.size > 0 || includeEntitiesSet.size > 0;\n  const haveExclude = excludeDomainsSet.size > 0 || excludeEntitiesSet.size > 0;\n\n  // Case 1 - no includes or excludes - pass all entities\n  if (!haveInclude && !haveExclude) {\n    return () => true;\n  }\n\n  // Case 2 - includes, no excludes - only include specified entities\n  if (haveInclude && !haveExclude) {\n    return entityId => includeEntitiesSet.has(entityId) || includeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 3 - excludes, no includes - only exclude specified entities\n  if (!haveInclude && haveExclude) {\n    return entityId => !excludeEntitiesSet.has(entityId) && !excludeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 4 - both includes and excludes specified\n  // Case 4a - include domain specified\n  //  - if domain is included, pass if entity not excluded\n  //  - if domain is not included, pass if entity is included\n  // note: if both include and exclude domains specified,\n  //   the exclude domains are ignored\n  if (includeDomainsSet.size) {\n    return entityId => includeDomainsSet.has(computeDomain(entityId)) ? !excludeEntitiesSet.has(entityId) : includeEntitiesSet.has(entityId);\n  }\n\n  // Case 4b - exclude domain specified\n  //  - if domain is excluded, pass if entity is included\n  //  - if domain is not excluded, pass if entity not excluded\n  if (excludeDomainsSet.size) {\n    return entityId => excludeDomainsSet.has(computeDomain(entityId)) ? includeEntitiesSet.has(entityId) : !excludeEntitiesSet.has(entityId);\n  }\n\n  // Case 4c - neither include or exclude domain specified\n  //  - Only pass if entity is included.  Ignore entity excludes.\n  return entityId => includeEntitiesSet.has(entityId);\n};","map":{"version":3,"names":["computeDomain","isEmptyFilter","filter","include_domains","length","include_entities","exclude_domains","exclude_entities","generateFilter","includeDomains","includeEntities","excludeDomains","excludeEntities","includeDomainsSet","Set","includeEntitiesSet","excludeDomainsSet","excludeEntitiesSet","haveInclude","size","haveExclude","entityId","has"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/entity/entity_filter.ts"],"sourcesContent":["import { computeDomain } from \"./compute_domain\";\n\nexport type FilterFunc = (entityId: string) => boolean;\n\nexport interface EntityFilter {\n  include_domains: string[];\n  include_entities: string[];\n  exclude_domains: string[];\n  exclude_entities: string[];\n}\n\nexport const isEmptyFilter = (filter: EntityFilter) =>\n  filter.include_domains.length +\n    filter.include_entities.length +\n    filter.exclude_domains.length +\n    filter.exclude_entities.length ===\n  0;\n\nexport const generateFilter = (\n  includeDomains?: string[],\n  includeEntities?: string[],\n  excludeDomains?: string[],\n  excludeEntities?: string[]\n): FilterFunc => {\n  const includeDomainsSet = new Set(includeDomains);\n  const includeEntitiesSet = new Set(includeEntities);\n  const excludeDomainsSet = new Set(excludeDomains);\n  const excludeEntitiesSet = new Set(excludeEntities);\n\n  const haveInclude = includeDomainsSet.size > 0 || includeEntitiesSet.size > 0;\n  const haveExclude = excludeDomainsSet.size > 0 || excludeEntitiesSet.size > 0;\n\n  // Case 1 - no includes or excludes - pass all entities\n  if (!haveInclude && !haveExclude) {\n    return () => true;\n  }\n\n  // Case 2 - includes, no excludes - only include specified entities\n  if (haveInclude && !haveExclude) {\n    return (entityId) =>\n      includeEntitiesSet.has(entityId) ||\n      includeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 3 - excludes, no includes - only exclude specified entities\n  if (!haveInclude && haveExclude) {\n    return (entityId) =>\n      !excludeEntitiesSet.has(entityId) &&\n      !excludeDomainsSet.has(computeDomain(entityId));\n  }\n\n  // Case 4 - both includes and excludes specified\n  // Case 4a - include domain specified\n  //  - if domain is included, pass if entity not excluded\n  //  - if domain is not included, pass if entity is included\n  // note: if both include and exclude domains specified,\n  //   the exclude domains are ignored\n  if (includeDomainsSet.size) {\n    return (entityId) =>\n      includeDomainsSet.has(computeDomain(entityId))\n        ? !excludeEntitiesSet.has(entityId)\n        : includeEntitiesSet.has(entityId);\n  }\n\n  // Case 4b - exclude domain specified\n  //  - if domain is excluded, pass if entity is included\n  //  - if domain is not excluded, pass if entity not excluded\n  if (excludeDomainsSet.size) {\n    return (entityId) =>\n      excludeDomainsSet.has(computeDomain(entityId))\n        ? includeEntitiesSet.has(entityId)\n        : !excludeEntitiesSet.has(entityId);\n  }\n\n  // Case 4c - neither include or exclude domain specified\n  //  - Only pass if entity is included.  Ignore entity excludes.\n  return (entityId) => includeEntitiesSet.has(entityId);\n};\n"],"mappings":"AAAA,SAASA,aAAa,QAAQ,kBAAkB;AAWhD,OAAO,MAAMC,aAAa,GAAIC,MAAoB,IAChDA,MAAM,CAACC,eAAe,CAACC,MAAM,GAC3BF,MAAM,CAACG,gBAAgB,CAACD,MAAM,GAC9BF,MAAM,CAACI,eAAe,CAACF,MAAM,GAC7BF,MAAM,CAACK,gBAAgB,CAACH,MAAM,KAChC,CAAC;AAEH,OAAO,MAAMI,cAAc,GAAGA,CAC5BC,cAAyB,EACzBC,eAA0B,EAC1BC,cAAyB,EACzBC,eAA0B,KACX;EACf,MAAMC,iBAAiB,GAAG,IAAIC,GAAG,CAACL,cAAc,CAAC;EACjD,MAAMM,kBAAkB,GAAG,IAAID,GAAG,CAACJ,eAAe,CAAC;EACnD,MAAMM,iBAAiB,GAAG,IAAIF,GAAG,CAACH,cAAc,CAAC;EACjD,MAAMM,kBAAkB,GAAG,IAAIH,GAAG,CAACF,eAAe,CAAC;EAEnD,MAAMM,WAAW,GAAGL,iBAAiB,CAACM,IAAI,GAAG,CAAC,IAAIJ,kBAAkB,CAACI,IAAI,GAAG,CAAC;EAC7E,MAAMC,WAAW,GAAGJ,iBAAiB,CAACG,IAAI,GAAG,CAAC,IAAIF,kBAAkB,CAACE,IAAI,GAAG,CAAC;;EAE7E;EACA,IAAI,CAACD,WAAW,IAAI,CAACE,WAAW,EAAE;IAChC,OAAO,MAAM,IAAI;EACnB;;EAEA;EACA,IAAIF,WAAW,IAAI,CAACE,WAAW,EAAE;IAC/B,OAAQC,QAAQ,IACdN,kBAAkB,CAACO,GAAG,CAACD,QAAQ,CAAC,IAChCR,iBAAiB,CAACS,GAAG,CAACtB,aAAa,CAACqB,QAAQ,CAAC,CAAC;EAClD;;EAEA;EACA,IAAI,CAACH,WAAW,IAAIE,WAAW,EAAE;IAC/B,OAAQC,QAAQ,IACd,CAACJ,kBAAkB,CAACK,GAAG,CAACD,QAAQ,CAAC,IACjC,CAACL,iBAAiB,CAACM,GAAG,CAACtB,aAAa,CAACqB,QAAQ,CAAC,CAAC;EACnD;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,IAAIR,iBAAiB,CAACM,IAAI,EAAE;IAC1B,OAAQE,QAAQ,IACdR,iBAAiB,CAACS,GAAG,CAACtB,aAAa,CAACqB,QAAQ,CAAC,CAAC,GAC1C,CAACJ,kBAAkB,CAACK,GAAG,CAACD,QAAQ,CAAC,GACjCN,kBAAkB,CAACO,GAAG,CAACD,QAAQ,CAAC;EACxC;;EAEA;EACA;EACA;EACA,IAAIL,iBAAiB,CAACG,IAAI,EAAE;IAC1B,OAAQE,QAAQ,IACdL,iBAAiB,CAACM,GAAG,CAACtB,aAAa,CAACqB,QAAQ,CAAC,CAAC,GAC1CN,kBAAkB,CAACO,GAAG,CAACD,QAAQ,CAAC,GAChC,CAACJ,kBAAkB,CAACK,GAAG,CAACD,QAAQ,CAAC;EACzC;;EAEA;EACA;EACA,OAAQA,QAAQ,IAAKN,kBAAkB,CAACO,GAAG,CAACD,QAAQ,CAAC;AACvD,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}