{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-list-item\";\nimport \"../../../../components/ha-svg-icon\";\nimport { ICON_CONDITION } from \"../../common/icon-condition\";\nimport \"./ha-card-condition-editor\";\nimport \"./types/ha-card-condition-numeric_state\";\nimport \"./types/ha-card-condition-screen\";\nimport \"./types/ha-card-condition-state\";\nimport \"./types/ha-card-condition-user\";\nimport \"./types/ha-card-condition-or\";\nimport \"./types/ha-card-condition-and\";\nconst UI_CONDITION = [\"numeric_state\", \"state\", \"screen\", \"user\", \"and\", \"or\"];\nexport let HaCardConditionsEditor = _decorate([customElement(\"ha-card-conditions-editor\")], function (_initialize, _LitElement) {\n  class HaCardConditionsEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaCardConditionsEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"conditions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"nested\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_focusLastConditionOnChange\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        // Expand the condition if there is only one\n        if (this.conditions.length === 1) {\n          const row = this.shadowRoot.querySelector(\"ha-card-condition-editor\");\n          row.updateComplete.then(() => {\n            row.expand();\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        if (!changedProperties.has(\"conditions\")) {\n          return;\n        }\n        if (this._focusLastConditionOnChange) {\n          this._focusLastConditionOnChange = false;\n          const row = this.shadowRoot.querySelector(\"ha-card-condition-editor:last-of-type\");\n          row.updateComplete.then(() => {\n            row.expand();\n            row.scrollIntoView();\n            row.focus();\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <div class=\"conditions\">\n        ${!this.nested ? html`\n              <ha-alert alert-type=\"info\">\n                ${this.hass.localize(\"ui.panel.lovelace.editor.condition-editor.explanation\")}\n              </ha-alert>\n            ` : nothing}\n        ${this.conditions.map((cond, idx) => html`\n            <ha-card-condition-editor\n              .index=${idx}\n              @value-changed=${this._conditionChanged}\n              .hass=${this.hass}\n              .condition=${cond}\n            ></ha-card-condition-editor>\n          `)}\n        <div>\n          <ha-button-menu\n            @action=${this._addCondition}\n            fixed\n            @closed=${stopPropagation}\n          >\n            <ha-button\n              slot=\"trigger\"\n              outlined\n              .label=${this.hass.localize(\"ui.panel.lovelace.editor.condition-editor.add\")}\n            >\n              <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n            </ha-button>\n            ${UI_CONDITION.map(condition => html`\n                <ha-list-item .value=${condition} graphic=\"icon\">\n                  ${this.hass.localize(`ui.panel.lovelace.editor.condition-editor.condition.${condition}.label`) || condition}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${ICON_CONDITION[condition]}\n                  ></ha-svg-icon>\n                </ha-list-item>\n              `)}\n          </ha-button-menu>\n        </div>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addCondition\",\n      value: function _addCondition(ev) {\n        const condition = ev.currentTarget.items[ev.detail.index].value;\n        const conditions = [...this.conditions];\n        const elClass = customElements.get(`ha-card-condition-${condition}`);\n        conditions.push(elClass !== null && elClass !== void 0 && elClass.defaultConfig ? {\n          ...elClass.defaultConfig\n        } : {\n          condition: condition\n        });\n        this._focusLastConditionOnChange = true;\n        fireEvent(this, \"value-changed\", {\n          value: conditions\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_conditionChanged\",\n      value: function _conditionChanged(ev) {\n        ev.stopPropagation();\n        const conditions = [...this.conditions];\n        const newValue = ev.detail.value;\n        const index = ev.target.index;\n        if (newValue === null) {\n          conditions.splice(index, 1);\n        } else {\n          conditions[index] = newValue;\n        }\n        fireEvent(this, \"value-changed\", {\n          value: conditions\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [css`\n        mwc-tab-bar {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        ha-alert {\n          display: block;\n          margin-top: 12px;\n        }\n        ha-card-condition-editor {\n          display: block;\n          margin-top: 12px;\n          scroll-margin-top: 48px;\n        }\n        ha-button-menu {\n          margin-top: 12px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","fireEvent","stopPropagation","ICON_CONDITION","UI_CONDITION","HaCardConditionsEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","firstUpdated","conditions","length","row","shadowRoot","querySelector","updateComplete","then","expand","updated","changedProperties","has","_focusLastConditionOnChange","scrollIntoView","focus","render","nested","hass","localize","map","cond","idx","_conditionChanged","_addCondition","mdiPlus","condition","ev","currentTarget","items","detail","index","elClass","customElements","get","push","defaultConfig","newValue","target","splice","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/conditions/ha-card-conditions-editor.ts"],"sourcesContent":["import { mdiPlus } from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-list-item\";\nimport type { HaSelect } from \"../../../../components/ha-select\";\nimport \"../../../../components/ha-svg-icon\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { ICON_CONDITION } from \"../../common/icon-condition\";\nimport { Condition, LegacyCondition } from \"../../common/validate-condition\";\nimport \"./ha-card-condition-editor\";\nimport type { HaCardConditionEditor } from \"./ha-card-condition-editor\";\nimport { LovelaceConditionEditorConstructor } from \"./types\";\nimport \"./types/ha-card-condition-numeric_state\";\nimport \"./types/ha-card-condition-screen\";\nimport \"./types/ha-card-condition-state\";\nimport \"./types/ha-card-condition-user\";\nimport \"./types/ha-card-condition-or\";\nimport \"./types/ha-card-condition-and\";\n\nconst UI_CONDITION = [\n  \"numeric_state\",\n  \"state\",\n  \"screen\",\n  \"user\",\n  \"and\",\n  \"or\",\n] as const satisfies readonly Condition[\"condition\"][];\n\n@customElement(\"ha-card-conditions-editor\")\nexport class HaCardConditionsEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public conditions!: (\n    | Condition\n    | LegacyCondition\n  )[];\n\n  @property({ type: Boolean }) public nested = false;\n\n  private _focusLastConditionOnChange = false;\n\n  protected firstUpdated() {\n    // Expand the condition if there is only one\n    if (this.conditions.length === 1) {\n      const row = this.shadowRoot!.querySelector<HaCardConditionEditor>(\n        \"ha-card-condition-editor\"\n      )!;\n      row.updateComplete.then(() => {\n        row.expand();\n      });\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (!changedProperties.has(\"conditions\")) {\n      return;\n    }\n\n    if (this._focusLastConditionOnChange) {\n      this._focusLastConditionOnChange = false;\n      const row = this.shadowRoot!.querySelector<HaCardConditionEditor>(\n        \"ha-card-condition-editor:last-of-type\"\n      )!;\n      row.updateComplete.then(() => {\n        row.expand();\n        row.scrollIntoView();\n        row.focus();\n      });\n    }\n  }\n\n  protected render() {\n    return html`\n      <div class=\"conditions\">\n        ${!this.nested\n          ? html`\n              <ha-alert alert-type=\"info\">\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.condition-editor.explanation\"\n                )}\n              </ha-alert>\n            `\n          : nothing}\n        ${this.conditions.map(\n          (cond, idx) => html`\n            <ha-card-condition-editor\n              .index=${idx}\n              @value-changed=${this._conditionChanged}\n              .hass=${this.hass}\n              .condition=${cond}\n            ></ha-card-condition-editor>\n          `\n        )}\n        <div>\n          <ha-button-menu\n            @action=${this._addCondition}\n            fixed\n            @closed=${stopPropagation}\n          >\n            <ha-button\n              slot=\"trigger\"\n              outlined\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.condition-editor.add\"\n              )}\n            >\n              <ha-svg-icon .path=${mdiPlus} slot=\"icon\"></ha-svg-icon>\n            </ha-button>\n            ${UI_CONDITION.map(\n              (condition) => html`\n                <ha-list-item .value=${condition} graphic=\"icon\">\n                  ${this.hass!.localize(\n                    `ui.panel.lovelace.editor.condition-editor.condition.${condition}.label`\n                  ) || condition}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${ICON_CONDITION[condition]}\n                  ></ha-svg-icon>\n                </ha-list-item>\n              `\n            )}\n          </ha-button-menu>\n        </div>\n      </div>\n    `;\n  }\n\n  private _addCondition(ev: CustomEvent): void {\n    const condition = (ev.currentTarget as HaSelect).items[ev.detail.index]\n      .value as Condition[\"condition\"];\n    const conditions = [...this.conditions];\n\n    const elClass = customElements.get(`ha-card-condition-${condition}`) as\n      | LovelaceConditionEditorConstructor\n      | undefined;\n\n    conditions.push(\n      elClass?.defaultConfig\n        ? { ...elClass.defaultConfig }\n        : { condition: condition }\n    );\n    this._focusLastConditionOnChange = true;\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const conditions = [...this.conditions];\n    const newValue = ev.detail.value;\n    const index = (ev.target as any).index;\n\n    if (newValue === null) {\n      conditions.splice(index, 1);\n    } else {\n      conditions[index] = newValue;\n    }\n\n    fireEvent(this, \"value-changed\", { value: conditions });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        mwc-tab-bar {\n          border-bottom: 1px solid var(--divider-color);\n        }\n        ha-alert {\n          display: block;\n          margin-top: 12px;\n        }\n        ha-card-condition-editor {\n          display: block;\n          margin-top: 12px;\n          scroll-margin-top: 48px;\n        }\n        ha-button-menu {\n          margin-top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card-conditions-editor\": HaCardConditionsEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}