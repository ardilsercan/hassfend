{"ast":null,"code":"import { createCollection } from \"home-assistant-js-websocket\";\nimport { debounce } from \"../common/util/debounce\";\nexport const integrationsWithPanel = {\n  matter: \"config/matter\",\n  mqtt: \"config/mqtt\",\n  thread: \"config/thread\",\n  zha: \"config/zha/dashboard\",\n  zwave_js: \"config/zwave_js/dashboard\"\n};\nexport let LogSeverity = /*#__PURE__*/function (LogSeverity) {\n  LogSeverity[LogSeverity[\"CRITICAL\"] = 50] = \"CRITICAL\";\n  LogSeverity[LogSeverity[\"ERROR\"] = 40] = \"ERROR\";\n  LogSeverity[LogSeverity[\"WARNING\"] = 30] = \"WARNING\";\n  LogSeverity[LogSeverity[\"INFO\"] = 20] = \"INFO\";\n  LogSeverity[LogSeverity[\"DEBUG\"] = 10] = \"DEBUG\";\n  LogSeverity[LogSeverity[\"NOTSET\"] = 0] = \"NOTSET\";\n  return LogSeverity;\n}({});\nexport const integrationIssuesUrl = (domain, manifest) => manifest.issue_tracker || `https://github.com/home-assistant/core/issues?q=is%3Aissue+is%3Aopen+label%3A%22integration%3A+${domain}%22`;\nexport const domainToName = (localize, domain, manifest) => localize(`component.${domain}.title`) || (manifest === null || manifest === void 0 ? void 0 : manifest.name) || domain;\nexport const fetchIntegrationManifests = (hass, integrations) => {\n  const params = {\n    type: \"manifest/list\"\n  };\n  if (integrations) {\n    params.integrations = integrations;\n  }\n  return hass.callWS(params);\n};\nexport const fetchIntegrationManifest = (hass, integration) => hass.callWS({\n  type: \"manifest/get\",\n  integration\n});\nexport const fetchIntegrationSetups = hass => hass.callWS({\n  type: \"integration/setup_info\"\n});\nexport const fetchIntegrationLogInfo = conn => conn.sendMessagePromise({\n  type: \"logger/log_info\"\n});\nexport const setIntegrationLogLevel = (hass, integration, level, persistence) => hass.callWS({\n  type: \"logger/integration_log_level\",\n  integration,\n  level,\n  persistence\n});\nconst subscribeLogInfoUpdates = (conn, store) => conn.subscribeEvents(debounce(() => fetchIntegrationLogInfo(conn).then(log_infos => store.setState(log_infos, true)), 200, true), \"logging_changed\");\nexport const subscribeLogInfo = (conn, onChange) => createCollection(\"_integration_log_info\", fetchIntegrationLogInfo, subscribeLogInfoUpdates, conn, onChange);","map":{"version":3,"names":["createCollection","debounce","integrationsWithPanel","matter","mqtt","thread","zha","zwave_js","LogSeverity","integrationIssuesUrl","domain","manifest","issue_tracker","domainToName","localize","name","fetchIntegrationManifests","hass","integrations","params","type","callWS","fetchIntegrationManifest","integration","fetchIntegrationSetups","fetchIntegrationLogInfo","conn","sendMessagePromise","setIntegrationLogLevel","level","persistence","subscribeLogInfoUpdates","store","subscribeEvents","then","log_infos","setState","subscribeLogInfo","onChange"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/integration.ts"],"sourcesContent":["import { Connection, createCollection } from \"home-assistant-js-websocket\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport { HomeAssistant } from \"../types\";\nimport { debounce } from \"../common/util/debounce\";\n\nexport const integrationsWithPanel = {\n  matter: \"config/matter\",\n  mqtt: \"config/mqtt\",\n  thread: \"config/thread\",\n  zha: \"config/zha/dashboard\",\n  zwave_js: \"config/zwave_js/dashboard\",\n};\n\nexport type IntegrationType =\n  | \"device\"\n  | \"helper\"\n  | \"hub\"\n  | \"service\"\n  | \"hardware\"\n  | \"entity\"\n  | \"system\";\n\nexport interface IntegrationManifest {\n  is_built_in: boolean;\n  domain: string;\n  name: string;\n  config_flow: boolean;\n  documentation: string;\n  issue_tracker?: string;\n  dependencies?: string[];\n  after_dependencies?: string[];\n  codeowners?: string[];\n  requirements?: string[];\n  ssdp?: Array<{ manufacturer?: string; modelName?: string; st?: string }>;\n  zeroconf?: string[];\n  homekit?: { models: string[] };\n  integration_type?: IntegrationType;\n  loggers?: string[];\n  quality_scale?: \"gold\" | \"internal\" | \"platinum\" | \"silver\";\n  iot_class:\n    | \"assumed_state\"\n    | \"cloud_polling\"\n    | \"cloud_push\"\n    | \"local_polling\"\n    | \"local_push\";\n}\nexport interface IntegrationSetup {\n  domain: string;\n  seconds?: number;\n}\n\nexport interface IntegrationLogInfo {\n  domain: string;\n  level?: number;\n}\n\nexport enum LogSeverity {\n  CRITICAL = 50,\n  ERROR = 40,\n  WARNING = 30,\n  INFO = 20,\n  DEBUG = 10,\n  NOTSET = 0,\n}\n\nexport type IntegrationLogPersistance = \"none\" | \"once\" | \"permanent\";\n\nexport const integrationIssuesUrl = (\n  domain: string,\n  manifest: IntegrationManifest\n) =>\n  manifest.issue_tracker ||\n  `https://github.com/home-assistant/core/issues?q=is%3Aissue+is%3Aopen+label%3A%22integration%3A+${domain}%22`;\n\nexport const domainToName = (\n  localize: LocalizeFunc,\n  domain: string,\n  manifest?: IntegrationManifest\n) => localize(`component.${domain}.title`) || manifest?.name || domain;\n\nexport const fetchIntegrationManifests = (\n  hass: HomeAssistant,\n  integrations?: string[]\n) => {\n  const params: any = {\n    type: \"manifest/list\",\n  };\n  if (integrations) {\n    params.integrations = integrations;\n  }\n  return hass.callWS<IntegrationManifest[]>(params);\n};\n\nexport const fetchIntegrationManifest = (\n  hass: HomeAssistant,\n  integration: string\n) => hass.callWS<IntegrationManifest>({ type: \"manifest/get\", integration });\n\nexport const fetchIntegrationSetups = (hass: HomeAssistant) =>\n  hass.callWS<IntegrationSetup[]>({ type: \"integration/setup_info\" });\n\nexport const fetchIntegrationLogInfo = (conn) =>\n  conn.sendMessagePromise({\n    type: \"logger/log_info\",\n  });\n\nexport const setIntegrationLogLevel = (\n  hass: HomeAssistant,\n  integration: string,\n  level: string,\n  persistence: IntegrationLogPersistance\n) =>\n  hass.callWS({\n    type: \"logger/integration_log_level\",\n    integration,\n    level,\n    persistence,\n  });\n\nconst subscribeLogInfoUpdates = (conn, store) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchIntegrationLogInfo(conn).then((log_infos) =>\n          store.setState(log_infos, true)\n        ),\n      200,\n      true\n    ),\n    \"logging_changed\"\n  );\n\nexport const subscribeLogInfo = (\n  conn: Connection,\n  onChange: (devices: IntegrationLogInfo[]) => void\n) =>\n  createCollection<IntegrationLogInfo[]>(\n    \"_integration_log_info\",\n    fetchIntegrationLogInfo,\n    subscribeLogInfoUpdates,\n    conn,\n    onChange\n  );\n"],"mappings":"AAAA,SAAqBA,gBAAgB,QAAQ,6BAA6B;AAG1E,SAASC,QAAQ,QAAQ,yBAAyB;AAElD,OAAO,MAAMC,qBAAqB,GAAG;EACnCC,MAAM,EAAE,eAAe;EACvBC,IAAI,EAAE,aAAa;EACnBC,MAAM,EAAE,eAAe;EACvBC,GAAG,EAAE,sBAAsB;EAC3BC,QAAQ,EAAE;AACZ,CAAC;AA6CD,WAAYC,WAAW,0BAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAXA,WAAW,CAAXA,WAAW;EAAA,OAAXA,WAAW;AAAA;AAWvB,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,MAAc,EACdC,QAA6B,KAE7BA,QAAQ,CAACC,aAAa,IACrB,kGAAiGF,MAAO,KAAI;AAE/G,OAAO,MAAMG,YAAY,GAAGA,CAC1BC,QAAsB,EACtBJ,MAAc,EACdC,QAA8B,KAC3BG,QAAQ,CAAE,aAAYJ,MAAO,QAAO,CAAC,KAAIC,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,IAAI,KAAIL,MAAM;AAEtE,OAAO,MAAMM,yBAAyB,GAAGA,CACvCC,IAAmB,EACnBC,YAAuB,KACpB;EACH,MAAMC,MAAW,GAAG;IAClBC,IAAI,EAAE;EACR,CAAC;EACD,IAAIF,YAAY,EAAE;IAChBC,MAAM,CAACD,YAAY,GAAGA,YAAY;EACpC;EACA,OAAOD,IAAI,CAACI,MAAM,CAAwBF,MAAM,CAAC;AACnD,CAAC;AAED,OAAO,MAAMG,wBAAwB,GAAGA,CACtCL,IAAmB,EACnBM,WAAmB,KAChBN,IAAI,CAACI,MAAM,CAAsB;EAAED,IAAI,EAAE,cAAc;EAAEG;AAAY,CAAC,CAAC;AAE5E,OAAO,MAAMC,sBAAsB,GAAIP,IAAmB,IACxDA,IAAI,CAACI,MAAM,CAAqB;EAAED,IAAI,EAAE;AAAyB,CAAC,CAAC;AAErE,OAAO,MAAMK,uBAAuB,GAAIC,IAAI,IAC1CA,IAAI,CAACC,kBAAkB,CAAC;EACtBP,IAAI,EAAE;AACR,CAAC,CAAC;AAEJ,OAAO,MAAMQ,sBAAsB,GAAGA,CACpCX,IAAmB,EACnBM,WAAmB,EACnBM,KAAa,EACbC,WAAsC,KAEtCb,IAAI,CAACI,MAAM,CAAC;EACVD,IAAI,EAAE,8BAA8B;EACpCG,WAAW;EACXM,KAAK;EACLC;AACF,CAAC,CAAC;AAEJ,MAAMC,uBAAuB,GAAGA,CAACL,IAAI,EAAEM,KAAK,KAC1CN,IAAI,CAACO,eAAe,CAClBhC,QAAQ,CACN,MACEwB,uBAAuB,CAACC,IAAI,CAAC,CAACQ,IAAI,CAAEC,SAAS,IAC3CH,KAAK,CAACI,QAAQ,CAACD,SAAS,EAAE,IAAI,CAChC,CAAC,EACH,GAAG,EACH,IACF,CAAC,EACD,iBACF,CAAC;AAEH,OAAO,MAAME,gBAAgB,GAAGA,CAC9BX,IAAgB,EAChBY,QAAiD,KAEjDtC,gBAAgB,CACd,uBAAuB,EACvByB,uBAAuB,EACvBM,uBAAuB,EACvBL,IAAI,EACJY,QACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}