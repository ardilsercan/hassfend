{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-notched-outline/mwc-notched-outline.js';\nimport { addHasRemoveClass, FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { floatingLabel } from '@material/mwc-floating-label/mwc-floating-label-directive.js';\nimport { lineRipple } from '@material/mwc-line-ripple/mwc-line-ripple-directive.js';\nimport MDCTextFieldFoundation from '@material/textfield/foundation.js';\nimport { html } from 'lit';\nimport { eventOptions, property, query, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { ifDefined } from 'lit/directives/if-defined.js';\nimport { live } from 'lit/directives/live.js';\nconst passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];\nconst createValidityObj = (customValidity = {}) => {\n  /*\n   * We need to make ValidityState an object because it is readonly and\n   * we cannot use the spread operator. Also, we don't export\n   * `CustomValidityState` because it is a leaky implementation and the user\n   * already has access to `ValidityState` in lib.dom.ts. Also an interface\n   * {a: Type} can be casted to {readonly a: Type} so passing any object\n   * should be fine.\n   */\n  const objectifiedCustomValidity = {};\n  // eslint-disable-next-line guard-for-in\n  for (const propName in customValidity) {\n    /*\n     * Casting is needed because ValidityState's props are all readonly and\n     * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n     * interface is the same as ValidityState (but not readonly), but the\n     * function signature casts the output to ValidityState (thus readonly).\n     */\n    objectifiedCustomValidity[propName] = customValidity[propName];\n  }\n  return Object.assign({\n    badInput: false,\n    customError: false,\n    patternMismatch: false,\n    rangeOverflow: false,\n    rangeUnderflow: false,\n    stepMismatch: false,\n    tooLong: false,\n    tooShort: false,\n    typeMismatch: false,\n    valid: true,\n    valueMissing: false\n  }, objectifiedCustomValidity);\n};\n/** @soyCompatible */\nexport class TextFieldBase extends FormElement {\n  constructor() {\n    super(...arguments);\n    this.mdcFoundationClass = MDCTextFieldFoundation;\n    this.value = '';\n    this.type = 'text';\n    this.placeholder = '';\n    this.label = '';\n    this.icon = '';\n    this.iconTrailing = '';\n    this.disabled = false;\n    this.required = false;\n    this.minLength = -1;\n    this.maxLength = -1;\n    this.outlined = false;\n    this.helper = '';\n    this.validateOnInitialRender = false;\n    this.validationMessage = '';\n    this.autoValidate = false;\n    this.pattern = '';\n    this.min = '';\n    this.max = '';\n    /**\n     * step can be a number or the keyword \"any\".\n     *\n     * Use `String` typing to pass down the value as a string and let the native\n     * input cast internally as needed.\n     */\n    this.step = null;\n    this.size = null;\n    this.helperPersistent = false;\n    this.charCounter = false;\n    this.endAligned = false;\n    this.prefix = '';\n    this.suffix = '';\n    this.name = '';\n    this.readOnly = false;\n    this.autocapitalize = '';\n    this.outlineOpen = false;\n    this.outlineWidth = 0;\n    this.isUiValid = true;\n    this.focused = false;\n    this._validity = createValidityObj();\n    this.validityTransform = null;\n  }\n  get validity() {\n    this._checkValidity(this.value);\n    return this._validity;\n  }\n  get willValidate() {\n    return this.formElement.willValidate;\n  }\n  get selectionStart() {\n    return this.formElement.selectionStart;\n  }\n  get selectionEnd() {\n    return this.formElement.selectionEnd;\n  }\n  focus() {\n    const focusEvt = new CustomEvent('focus');\n    this.formElement.dispatchEvent(focusEvt);\n    this.formElement.focus();\n  }\n  blur() {\n    const blurEvt = new CustomEvent('blur');\n    this.formElement.dispatchEvent(blurEvt);\n    this.formElement.blur();\n  }\n  select() {\n    this.formElement.select();\n  }\n  setSelectionRange(selectionStart, selectionEnd, selectionDirection) {\n    this.formElement.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n  update(changedProperties) {\n    if (changedProperties.has('autoValidate') && this.mdcFoundation) {\n      this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n    }\n    if (changedProperties.has('value') && typeof this.value !== 'string') {\n      this.value = `${this.value}`;\n    }\n    super.update(changedProperties);\n  }\n  setFormData(formData) {\n    if (this.name) {\n      formData.append(this.name, this.value);\n    }\n  }\n  /** @soyTemplate */\n  render() {\n    const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n    const shouldRenderHelperText = !!this.helper || !!this.validationMessage || shouldRenderCharCounter;\n    /** @classMap */\n    const classes = {\n      'mdc-text-field--disabled': this.disabled,\n      'mdc-text-field--no-label': !this.label,\n      'mdc-text-field--filled': !this.outlined,\n      'mdc-text-field--outlined': this.outlined,\n      'mdc-text-field--with-leading-icon': this.icon,\n      'mdc-text-field--with-trailing-icon': this.iconTrailing,\n      'mdc-text-field--end-aligned': this.endAligned\n    };\n    return html`\n      <label class=\"mdc-text-field ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderLeadingIcon()}\n        ${this.renderPrefix()}\n        ${this.renderInput(shouldRenderHelperText)}\n        ${this.renderSuffix()}\n        ${this.renderTrailingIcon()}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}\n    `;\n  }\n  updated(changedProperties) {\n    if (changedProperties.has('value') && changedProperties.get('value') !== undefined) {\n      this.mdcFoundation.setValue(this.value);\n      if (this.autoValidate) {\n        this.reportValidity();\n      }\n    }\n  }\n  /** @soyTemplate */\n  renderRipple() {\n    return this.outlined ? '' : html`\n      <span class=\"mdc-text-field__ripple\"></span>\n    `;\n  }\n  /** @soyTemplate */\n  renderOutline() {\n    return !this.outlined ? '' : html`\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n  }\n  /** @soyTemplate */\n  renderLabel() {\n    return !this.label ? '' : html`\n      <span\n          .floatingLabelFoundation=${floatingLabel(this.label)}\n          id=\"label\">${this.label}</span>\n    `;\n  }\n  /** @soyTemplate */\n  renderLeadingIcon() {\n    return this.icon ? this.renderIcon(this.icon) : '';\n  }\n  /** @soyTemplate */\n  renderTrailingIcon() {\n    return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';\n  }\n  /** @soyTemplate */\n  renderIcon(icon, isTrailingIcon = false) {\n    /** @classMap */\n    const classes = {\n      'mdc-text-field__icon--leading': !isTrailingIcon,\n      'mdc-text-field__icon--trailing': isTrailingIcon\n    };\n    return html`<i class=\"material-icons mdc-text-field__icon ${classMap(classes)}\">${icon}</i>`;\n  }\n  /** @soyTemplate */\n  renderPrefix() {\n    return this.prefix ? this.renderAffix(this.prefix) : '';\n  }\n  /** @soyTemplate */\n  renderSuffix() {\n    return this.suffix ? this.renderAffix(this.suffix, true) : '';\n  }\n  /** @soyTemplate */\n  renderAffix(content, isSuffix = false) {\n    /** @classMap */\n    const classes = {\n      'mdc-text-field__affix--prefix': !isSuffix,\n      'mdc-text-field__affix--suffix': isSuffix\n    };\n    return html`<span class=\"mdc-text-field__affix ${classMap(classes)}\">\n        ${content}</span>`;\n  }\n  /** @soyTemplate */\n  renderInput(shouldRenderHelperText) {\n    const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n    const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n    const autocapitalizeOrUndef = this.autocapitalize ? this.autocapitalize : undefined;\n    const showValidationMessage = this.validationMessage && !this.isUiValid;\n    const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n    const ariaControlsOrUndef = shouldRenderHelperText ? 'helper-text' : undefined;\n    const ariaDescribedbyOrUndef = this.focused || this.helperPersistent || showValidationMessage ? 'helper-text' : undefined;\n    // TODO: live() directive needs casting for lit-analyzer\n    // https://github.com/runem/lit-analyzer/pull/91/files\n    // TODO: lit-analyzer labels min/max as (number|string) instead of string\n    return html`\n      <input\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          aria-controls=\"${ifDefined(ariaControlsOrUndef)}\"\n          aria-describedby=\"${ifDefined(ariaDescribedbyOrUndef)}\"\n          class=\"mdc-text-field__input\"\n          type=\"${this.type}\"\n          .value=\"${live(this.value)}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          pattern=\"${ifDefined(this.pattern ? this.pattern : undefined)}\"\n          min=\"${ifDefined(this.min === '' ? undefined : this.min)}\"\n          max=\"${ifDefined(this.max === '' ? undefined : this.max)}\"\n          step=\"${ifDefined(this.step === null ? undefined : this.step)}\"\n          size=\"${ifDefined(this.size === null ? undefined : this.size)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @focus=\"${this.onInputFocus}\"\n          @blur=\"${this.onInputBlur}\">`;\n  }\n  /** @soyTemplate */\n  renderLineRipple() {\n    return this.outlined ? '' : html`\n      <span .lineRippleFoundation=${lineRipple()}></span>\n    `;\n  }\n  /** @soyTemplate */\n  renderHelperText(shouldRenderHelperText, shouldRenderCharCounter) {\n    const showValidationMessage = this.validationMessage && !this.isUiValid;\n    /** @classMap */\n    const classes = {\n      'mdc-text-field-helper-text--persistent': this.helperPersistent,\n      'mdc-text-field-helper-text--validation-msg': showValidationMessage\n    };\n    const ariaHiddenOrUndef = this.focused || this.helperPersistent || showValidationMessage ? undefined : 'true';\n    const helperText = showValidationMessage ? this.validationMessage : this.helper;\n    return !shouldRenderHelperText ? '' : html`\n      <div class=\"mdc-text-field-helper-line\">\n        <div id=\"helper-text\"\n             aria-hidden=\"${ifDefined(ariaHiddenOrUndef)}\"\n             class=\"mdc-text-field-helper-text ${classMap(classes)}\"\n             >${helperText}</div>\n        ${this.renderCharCounter(shouldRenderCharCounter)}\n      </div>`;\n  }\n  /** @soyTemplate */\n  renderCharCounter(shouldRenderCharCounter) {\n    const length = Math.min(this.value.length, this.maxLength);\n    return !shouldRenderCharCounter ? '' : html`\n      <span class=\"mdc-text-field-character-counter\"\n            >${length} / ${this.maxLength}</span>`;\n  }\n  onInputFocus() {\n    this.focused = true;\n  }\n  onInputBlur() {\n    this.focused = false;\n    this.reportValidity();\n  }\n  checkValidity() {\n    const isValid = this._checkValidity(this.value);\n    if (!isValid) {\n      const invalidEvent = new Event('invalid', {\n        bubbles: false,\n        cancelable: true\n      });\n      this.dispatchEvent(invalidEvent);\n    }\n    return isValid;\n  }\n  reportValidity() {\n    const isValid = this.checkValidity();\n    this.mdcFoundation.setValid(isValid);\n    this.isUiValid = isValid;\n    return isValid;\n  }\n  _checkValidity(value) {\n    const nativeValidity = this.formElement.validity;\n    let validity = createValidityObj(nativeValidity);\n    if (this.validityTransform) {\n      const customValidity = this.validityTransform(value, validity);\n      validity = Object.assign(Object.assign({}, validity), customValidity);\n      this.mdcFoundation.setUseNativeValidation(false);\n    } else {\n      this.mdcFoundation.setUseNativeValidation(true);\n    }\n    this._validity = validity;\n    return this._validity.valid;\n  }\n  setCustomValidity(message) {\n    this.validationMessage = message;\n    this.formElement.setCustomValidity(message);\n  }\n  handleInputChange() {\n    this.value = this.formElement.value;\n  }\n  createAdapter() {\n    return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.getRootAdapterMethods()), this.getInputAdapterMethods()), this.getLabelAdapterMethods()), this.getLineRippleAdapterMethods()), this.getOutlineAdapterMethods());\n  }\n  getRootAdapterMethods() {\n    return Object.assign({\n      registerTextFieldInteractionHandler: (evtType, handler) => this.addEventListener(evtType, handler),\n      deregisterTextFieldInteractionHandler: (evtType, handler) => this.removeEventListener(evtType, handler),\n      registerValidationAttributeChangeHandler: handler => {\n        const getAttributesList = mutationsList => {\n          return mutationsList.map(mutation => mutation.attributeName).filter(attributeName => attributeName);\n        };\n        const observer = new MutationObserver(mutationsList => {\n          handler(getAttributesList(mutationsList));\n        });\n        const config = {\n          attributes: true\n        };\n        observer.observe(this.formElement, config);\n        return observer;\n      },\n      deregisterValidationAttributeChangeHandler: observer => observer.disconnect()\n    }, addHasRemoveClass(this.mdcRoot));\n  }\n  getInputAdapterMethods() {\n    return {\n      getNativeInput: () => this.formElement,\n      // since HelperTextFoundation is not used, aria-describedby a11y logic\n      // is implemented in render method instead of these adapter methods\n      setInputAttr: () => undefined,\n      removeInputAttr: () => undefined,\n      isFocused: () => this.shadowRoot ? this.shadowRoot.activeElement === this.formElement : false,\n      registerInputInteractionHandler: (evtType, handler) => this.formElement.addEventListener(evtType, handler, {\n        passive: evtType in passiveEvents\n      }),\n      deregisterInputInteractionHandler: (evtType, handler) => this.formElement.removeEventListener(evtType, handler)\n    };\n  }\n  getLabelAdapterMethods() {\n    return {\n      floatLabel: shouldFloat => this.labelElement && this.labelElement.floatingLabelFoundation.float(shouldFloat),\n      getLabelWidth: () => {\n        return this.labelElement ? this.labelElement.floatingLabelFoundation.getWidth() : 0;\n      },\n      hasLabel: () => Boolean(this.labelElement),\n      shakeLabel: shouldShake => this.labelElement && this.labelElement.floatingLabelFoundation.shake(shouldShake),\n      setLabelRequired: isRequired => {\n        if (this.labelElement) {\n          this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n        }\n      }\n    };\n  }\n  getLineRippleAdapterMethods() {\n    return {\n      activateLineRipple: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.activate();\n        }\n      },\n      deactivateLineRipple: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.deactivate();\n        }\n      },\n      setLineRippleTransformOrigin: normalizedX => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.setRippleCenter(normalizedX);\n        }\n      }\n    };\n  }\n  // tslint:disable:ban-ts-ignore\n  async getUpdateComplete() {\n    var _a;\n    // @ts-ignore\n    const result = await super.getUpdateComplete();\n    await ((_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete);\n    return result;\n  }\n  // tslint:enable:ban-ts-ignore\n  firstUpdated() {\n    var _a;\n    super.firstUpdated();\n    this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n    if (this.validateOnInitialRender) {\n      this.reportValidity();\n    }\n    // wait for the outline element to render to update the notch width\n    (_a = this.outlineElement) === null || _a === void 0 ? void 0 : _a.updateComplete.then(() => {\n      var _a;\n      // `foundation.notchOutline()` assumes the label isn't floating and\n      // multiplies by a constant, but the label is already is floating at this\n      // stage, therefore directly set the outline width to the label width\n      this.outlineWidth = ((_a = this.labelElement) === null || _a === void 0 ? void 0 : _a.floatingLabelFoundation.getWidth()) || 0;\n    });\n  }\n  getOutlineAdapterMethods() {\n    return {\n      closeOutline: () => this.outlineElement && (this.outlineOpen = false),\n      hasOutline: () => Boolean(this.outlineElement),\n      notchOutline: labelWidth => {\n        const outlineElement = this.outlineElement;\n        if (outlineElement && !this.outlineOpen) {\n          this.outlineWidth = labelWidth;\n          this.outlineOpen = true;\n        }\n      }\n    };\n  }\n  async layout() {\n    await this.updateComplete;\n    const labelElement = this.labelElement;\n    if (!labelElement) {\n      this.outlineOpen = false;\n      return;\n    }\n    const shouldFloat = !!this.label && !!this.value;\n    labelElement.floatingLabelFoundation.float(shouldFloat);\n    if (!this.outlined) {\n      return;\n    }\n    this.outlineOpen = shouldFloat;\n    await this.updateComplete;\n    /* When the textfield automatically notches due to a value and label\n     * being defined, the textfield may be set to `display: none` by the user.\n     * this means that the notch is of size 0px. We provide this function so\n     * that the user may manually resize the notch to the floated label's\n     * width.\n     */\n    const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n    if (this.outlineOpen) {\n      this.outlineWidth = labelWidth;\n      await this.updateComplete;\n    }\n  }\n}\n__decorate([query('.mdc-text-field')], TextFieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([query('input')], TextFieldBase.prototype, \"formElement\", void 0);\n__decorate([query('.mdc-floating-label')], TextFieldBase.prototype, \"labelElement\", void 0);\n__decorate([query('.mdc-line-ripple')], TextFieldBase.prototype, \"lineRippleElement\", void 0);\n__decorate([query('mwc-notched-outline')], TextFieldBase.prototype, \"outlineElement\", void 0);\n__decorate([query('.mdc-notched-outline__notch')], TextFieldBase.prototype, \"notchElement\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"value\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"type\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"placeholder\", void 0);\n__decorate([property({\n  type: String\n}), observer(function (_newVal, oldVal) {\n  if (oldVal !== undefined && this.label !== oldVal) {\n    this.layout();\n  }\n})], TextFieldBase.prototype, \"label\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"icon\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"iconTrailing\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], TextFieldBase.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"required\", void 0);\n__decorate([property({\n  type: Number\n})], TextFieldBase.prototype, \"minLength\", void 0);\n__decorate([property({\n  type: Number\n})], TextFieldBase.prototype, \"maxLength\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), observer(function (_newVal, oldVal) {\n  if (oldVal !== undefined && this.outlined !== oldVal) {\n    this.layout();\n  }\n})], TextFieldBase.prototype, \"outlined\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"helper\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"validateOnInitialRender\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"validationMessage\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"autoValidate\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"pattern\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"min\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"max\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"step\", void 0);\n__decorate([property({\n  type: Number\n})], TextFieldBase.prototype, \"size\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"helperPersistent\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"charCounter\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"endAligned\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"prefix\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"suffix\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"name\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"inputMode\", void 0);\n__decorate([property({\n  type: Boolean\n})], TextFieldBase.prototype, \"readOnly\", void 0);\n__decorate([property({\n  type: String\n})], TextFieldBase.prototype, \"autocapitalize\", void 0);\n__decorate([state()], TextFieldBase.prototype, \"outlineOpen\", void 0);\n__decorate([state()], TextFieldBase.prototype, \"outlineWidth\", void 0);\n__decorate([state()], TextFieldBase.prototype, \"isUiValid\", void 0);\n__decorate([state()], TextFieldBase.prototype, \"focused\", void 0);\n__decorate([eventOptions({\n  passive: true\n})], TextFieldBase.prototype, \"handleInputChange\", null);","map":{"version":3,"names":["addHasRemoveClass","FormElement","observer","floatingLabel","lineRipple","MDCTextFieldFoundation","html","eventOptions","property","query","state","classMap","ifDefined","live","passiveEvents","createValidityObj","customValidity","objectifiedCustomValidity","propName","Object","assign","badInput","customError","patternMismatch","rangeOverflow","rangeUnderflow","stepMismatch","tooLong","tooShort","typeMismatch","valid","valueMissing","TextFieldBase","constructor","mdcFoundationClass","value","type","placeholder","label","icon","iconTrailing","disabled","required","minLength","maxLength","outlined","helper","validateOnInitialRender","validationMessage","autoValidate","pattern","min","max","step","size","helperPersistent","charCounter","endAligned","prefix","suffix","name","readOnly","autocapitalize","outlineOpen","outlineWidth","isUiValid","focused","_validity","validityTransform","validity","_checkValidity","willValidate","formElement","selectionStart","selectionEnd","focus","focusEvt","CustomEvent","dispatchEvent","blur","blurEvt","select","setSelectionRange","selectionDirection","update","changedProperties","has","mdcFoundation","setValidateOnValueChange","setFormData","formData","append","render","shouldRenderCharCounter","shouldRenderHelperText","classes","renderRipple","renderOutline","renderLabel","renderLeadingIcon","renderPrefix","renderInput","renderSuffix","renderTrailingIcon","renderLineRipple","renderHelperText","updated","get","undefined","setValue","reportValidity","renderIcon","isTrailingIcon","renderAffix","content","isSuffix","minOrUndef","maxOrUndef","autocapitalizeOrUndef","showValidationMessage","ariaLabelledbyOrUndef","ariaControlsOrUndef","ariaDescribedbyOrUndef","inputMode","handleInputChange","onInputFocus","onInputBlur","ariaHiddenOrUndef","helperText","renderCharCounter","length","Math","checkValidity","isValid","invalidEvent","Event","bubbles","cancelable","setValid","nativeValidity","setUseNativeValidation","setCustomValidity","message","createAdapter","getRootAdapterMethods","getInputAdapterMethods","getLabelAdapterMethods","getLineRippleAdapterMethods","getOutlineAdapterMethods","registerTextFieldInteractionHandler","evtType","handler","addEventListener","deregisterTextFieldInteractionHandler","removeEventListener","registerValidationAttributeChangeHandler","getAttributesList","mutationsList","map","mutation","attributeName","filter","MutationObserver","config","attributes","observe","deregisterValidationAttributeChangeHandler","disconnect","mdcRoot","getNativeInput","setInputAttr","removeInputAttr","isFocused","shadowRoot","activeElement","registerInputInteractionHandler","passive","deregisterInputInteractionHandler","floatLabel","shouldFloat","labelElement","floatingLabelFoundation","float","getLabelWidth","getWidth","hasLabel","Boolean","shakeLabel","shouldShake","shake","setLabelRequired","isRequired","setRequired","activateLineRipple","lineRippleElement","lineRippleFoundation","activate","deactivateLineRipple","deactivate","setLineRippleTransformOrigin","normalizedX","setRippleCenter","getUpdateComplete","result","_a","outlineElement","updateComplete","firstUpdated","then","closeOutline","hasOutline","notchOutline","labelWidth","layout","__decorate","String","_newVal","oldVal","reflect","Number"],"sources":["mwc-textfield-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-notched-outline/mwc-notched-outline.js';\n\nimport {MDCFloatingLabelFoundation} from '@material/floating-label/foundation.js';\nimport {MDCLineRippleFoundation} from '@material/line-ripple/foundation.js';\nimport {addHasRemoveClass, FormElement} from '@material/mwc-base/form-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {floatingLabel, FloatingLabel} from '@material/mwc-floating-label/mwc-floating-label-directive.js';\nimport {lineRipple, LineRipple} from '@material/mwc-line-ripple/mwc-line-ripple-directive.js';\nimport {NotchedOutline} from '@material/mwc-notched-outline/mwc-notched-outline.js';\nimport {MDCTextFieldAdapter, MDCTextFieldInputAdapter, MDCTextFieldLabelAdapter, MDCTextFieldLineRippleAdapter, MDCTextFieldOutlineAdapter, MDCTextFieldRootAdapter} from '@material/textfield/adapter.js';\nimport MDCTextFieldFoundation from '@material/textfield/foundation.js';\nimport {html, PropertyValues, TemplateResult} from 'lit';\nimport {eventOptions, property, query, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {ifDefined} from 'lit/directives/if-defined.js';\nimport {live} from 'lit/directives/live.js';\n\n// must be done to get past lit-analyzer checks\ndeclare global {\n  interface HTMLElement {\n    floatingLabelFoundation?: MDCFloatingLabelFoundation;\n    lineRippleFoundation?: MDCLineRippleFoundation;\n  }\n  interface Element {\n    floatingLabelFoundation?: MDCFloatingLabelFoundation;\n    lineRippleFoundation?: MDCLineRippleFoundation;\n  }\n}\n\ntype CustomValidityState = {\n  -readonly[P in keyof ValidityState]: ValidityState[P]\n};\n\n\nconst passiveEvents = ['touchstart', 'touchmove', 'scroll', 'mousewheel'];\n\nconst createValidityObj =\n    (customValidity: Partial<ValidityState> = {}): ValidityState => {\n      /*\n       * We need to make ValidityState an object because it is readonly and\n       * we cannot use the spread operator. Also, we don't export\n       * `CustomValidityState` because it is a leaky implementation and the user\n       * already has access to `ValidityState` in lib.dom.ts. Also an interface\n       * {a: Type} can be casted to {readonly a: Type} so passing any object\n       * should be fine.\n       */\n      const objectifiedCustomValidity: Partial<CustomValidityState> = {};\n\n      // eslint-disable-next-line guard-for-in\n      for (const propName in customValidity) {\n        /*\n         * Casting is needed because ValidityState's props are all readonly and\n         * thus cannot be set on `onjectifiedCustomValidity`. In the end, the\n         * interface is the same as ValidityState (but not readonly), but the\n         * function signature casts the output to ValidityState (thus readonly).\n         */\n        objectifiedCustomValidity[propName as keyof CustomValidityState] =\n            customValidity[propName as keyof ValidityState];\n      }\n\n      return {\n        badInput: false,\n        customError: false,\n        patternMismatch: false,\n        rangeOverflow: false,\n        rangeUnderflow: false,\n        stepMismatch: false,\n        tooLong: false,\n        tooShort: false,\n        typeMismatch: false,\n        valid: true,\n        valueMissing: false,\n        ...objectifiedCustomValidity\n      };\n    };\n\n/**\n * This is the enumerated typeof HTMLInputElement.type as declared by\n * lit-analyzer.\n */\nexport type TextFieldType = 'text'|'search'|'tel'|'url'|'email'|'password'|\n    'date'|'month'|'week'|'time'|'datetime-local'|'number'|'color';\n\n/**\n * This is the enumerated typeof HTMLInputElement.inputMode as declared by\n * lit-analyzer.\n */\nexport type TextFieldInputMode =\n    'verbatim'|'latin'|'latin-name'|'latin-prose'|'full-width-latin'|'kana'|\n    'kana-name'|'katakana'|'numeric'|'tel'|'email'|'url';\n\nexport type TextAreaCharCounter = 'external'|'internal';\n\n/** @soyCompatible */\nexport abstract class TextFieldBase extends FormElement {\n  protected mdcFoundation!: MDCTextFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCTextFieldFoundation;\n\n  @query('.mdc-text-field') protected mdcRoot!: HTMLElement;\n\n  @query('input') protected formElement!: HTMLInputElement;\n\n  @query('.mdc-floating-label') protected labelElement!: FloatingLabel|null;\n\n  @query('.mdc-line-ripple') protected lineRippleElement!: LineRipple|null;\n\n  @query('mwc-notched-outline') protected outlineElement!: NotchedOutline|null;\n\n  @query('.mdc-notched-outline__notch') protected notchElement!: HTMLElement;\n\n  @property({type: String}) value = '';\n\n  @property({type: String}) type: TextFieldType = 'text';\n\n  @property({type: String}) placeholder = '';\n\n  @property({type: String})\n  @observer(function(this: TextFieldBase, _newVal: string, oldVal: string) {\n    if (oldVal !== undefined && this.label !== oldVal) {\n      this.layout();\n    }\n  })\n  label = '';\n\n  @property({type: String}) icon = '';\n\n  @property({type: String}) iconTrailing = '';\n\n  @property({type: Boolean, reflect: true}) override disabled = false;\n\n  @property({type: Boolean}) required = false;\n\n  @property({type: Number}) minLength = -1;\n\n  @property({type: Number}) maxLength = -1;\n\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: TextFieldBase, _newVal: boolean, oldVal: boolean) {\n    if (oldVal !== undefined && this.outlined !== oldVal) {\n      this.layout();\n    }\n  })\n  outlined = false;\n\n  @property({type: String}) helper = '';\n\n  @property({type: Boolean}) validateOnInitialRender = false;\n\n  @property({type: String}) validationMessage = '';\n\n  @property({type: Boolean}) autoValidate = false;\n\n  @property({type: String}) pattern = '';\n\n  @property({type: String}) min: number|string = '';\n\n  @property({type: String}) max: number|string = '';\n\n  /**\n   * step can be a number or the keyword \"any\".\n   *\n   * Use `String` typing to pass down the value as a string and let the native\n   * input cast internally as needed.\n   */\n  @property({type: String}) step: number|'any'|null = null;\n\n  @property({type: Number}) size: number|null = null;\n\n  @property({type: Boolean}) helperPersistent = false;\n\n  @property({type: Boolean}) charCounter: boolean|TextAreaCharCounter = false;\n\n  @property({type: Boolean}) endAligned = false;\n\n  @property({type: String}) override prefix = '';\n\n  @property({type: String}) suffix = '';\n\n  @property({type: String}) name = '';\n\n  // lit-analyzer requires specific string types, but TS does not compile since\n  // base class is unspecific \"string\". It also needs non-null coercion (!)\n  // since we don't want to provide a default value, but the base class is not\n  // typed to allow undefined.\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  @property({type: String}) override inputMode!: TextFieldInputMode;\n\n  @property({type: Boolean}) readOnly = false;\n\n  @property({type: String}) override autocapitalize = '';\n\n  @state() protected outlineOpen = false;\n  @state() protected outlineWidth = 0;\n  @state() protected isUiValid = true;\n  @state() protected focused = false;\n\n  protected _validity: ValidityState = createValidityObj();\n\n  get validity(): ValidityState {\n    this._checkValidity(this.value);\n\n    return this._validity;\n  }\n\n  get willValidate(): boolean {\n    return this.formElement.willValidate;\n  }\n\n  get selectionStart(): number|null {\n    return this.formElement.selectionStart;\n  }\n\n  get selectionEnd(): number|null {\n    return this.formElement.selectionEnd;\n  }\n\n  validityTransform:\n      ((value: string,\n        nativeValidity: ValidityState) => Partial<ValidityState>)|null = null;\n\n  override focus() {\n    const focusEvt = new CustomEvent('focus');\n    this.formElement.dispatchEvent(focusEvt);\n    this.formElement.focus();\n  }\n\n  override blur() {\n    const blurEvt = new CustomEvent('blur');\n    this.formElement.dispatchEvent(blurEvt);\n    this.formElement.blur();\n  }\n\n  select() {\n    this.formElement.select();\n  }\n\n  setSelectionRange(\n      selectionStart: number, selectionEnd: number,\n      selectionDirection?: 'forward'|'backward'|'none') {\n    this.formElement.setSelectionRange(\n        selectionStart, selectionEnd, selectionDirection);\n  }\n\n  override update(changedProperties: PropertyValues) {\n    if (changedProperties.has('autoValidate') && this.mdcFoundation) {\n      this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n    }\n\n    if (changedProperties.has('value') && typeof this.value !== 'string') {\n      this.value = `${this.value}`;\n    }\n\n    super.update(changedProperties);\n  }\n\n  protected setFormData(formData: FormData) {\n    if (this.name) {\n      formData.append(this.name, this.value);\n    }\n  }\n\n  /** @soyTemplate */\n  override render(): TemplateResult {\n    const shouldRenderCharCounter = this.charCounter && this.maxLength !== -1;\n    const shouldRenderHelperText =\n        !!this.helper || !!this.validationMessage || shouldRenderCharCounter;\n\n    /** @classMap */\n    const classes = {\n      'mdc-text-field--disabled': this.disabled,\n      'mdc-text-field--no-label': !this.label,\n      'mdc-text-field--filled': !this.outlined,\n      'mdc-text-field--outlined': this.outlined,\n      'mdc-text-field--with-leading-icon': this.icon,\n      'mdc-text-field--with-trailing-icon': this.iconTrailing,\n      'mdc-text-field--end-aligned': this.endAligned,\n    };\n\n    return html`\n      <label class=\"mdc-text-field ${classMap(classes)}\">\n        ${this.renderRipple()}\n        ${this.outlined ? this.renderOutline() : this.renderLabel()}\n        ${this.renderLeadingIcon()}\n        ${this.renderPrefix()}\n        ${this.renderInput(shouldRenderHelperText)}\n        ${this.renderSuffix()}\n        ${this.renderTrailingIcon()}\n        ${this.renderLineRipple()}\n      </label>\n      ${this.renderHelperText(shouldRenderHelperText, shouldRenderCharCounter)}\n    `;\n  }\n\n  override updated(changedProperties: PropertyValues) {\n    if (changedProperties.has('value') &&\n        changedProperties.get('value') !== undefined) {\n      this.mdcFoundation.setValue(this.value);\n\n      if (this.autoValidate) {\n        this.reportValidity();\n      }\n    }\n  }\n\n  /** @soyTemplate */\n  protected renderRipple(): TemplateResult|string {\n    return this.outlined ? '' : html`\n      <span class=\"mdc-text-field__ripple\"></span>\n    `;\n  }\n\n  /** @soyTemplate */\n  protected renderOutline(): TemplateResult|string {\n    return !this.outlined ? '' : html`\n      <mwc-notched-outline\n          .width=${this.outlineWidth}\n          .open=${this.outlineOpen}\n          class=\"mdc-notched-outline\">\n        ${this.renderLabel()}\n      </mwc-notched-outline>`;\n  }\n\n  /** @soyTemplate */\n  protected renderLabel(): TemplateResult|string {\n    return !this.label ?\n        '' :\n        html`\n      <span\n          .floatingLabelFoundation=${\n            floatingLabel(this.label) as unknown as MDCFloatingLabelFoundation}\n          id=\"label\">${this.label}</span>\n    `;\n  }\n\n  /** @soyTemplate */\n  protected renderLeadingIcon(): TemplateResult|string {\n    return this.icon ? this.renderIcon(this.icon) : '';\n  }\n\n  /** @soyTemplate */\n  protected renderTrailingIcon(): TemplateResult|string {\n    return this.iconTrailing ? this.renderIcon(this.iconTrailing, true) : '';\n  }\n\n  /** @soyTemplate */\n  protected renderIcon(icon: string, isTrailingIcon: boolean = false):\n      TemplateResult {\n    /** @classMap */\n    const classes = {\n      'mdc-text-field__icon--leading': !isTrailingIcon,\n      'mdc-text-field__icon--trailing': isTrailingIcon\n    };\n\n    return html`<i class=\"material-icons mdc-text-field__icon ${\n        classMap(classes)}\">${icon}</i>`;\n  }\n\n  /** @soyTemplate */\n  protected renderPrefix(): TemplateResult|string {\n    return this.prefix ? this.renderAffix(this.prefix) : '';\n  }\n\n  /** @soyTemplate */\n  protected renderSuffix(): TemplateResult|string {\n    return this.suffix ? this.renderAffix(this.suffix, true) : '';\n  }\n\n  /** @soyTemplate */\n  protected renderAffix(content: string, isSuffix: boolean = false):\n      TemplateResult|string {\n    /** @classMap */\n    const classes = {\n      'mdc-text-field__affix--prefix': !isSuffix,\n      'mdc-text-field__affix--suffix': isSuffix\n    };\n\n    return html`<span class=\"mdc-text-field__affix ${classMap(classes)}\">\n        ${content}</span>`;\n  }\n\n  /** @soyTemplate */\n  protected renderInput(shouldRenderHelperText: boolean): TemplateResult {\n    const minOrUndef = this.minLength === -1 ? undefined : this.minLength;\n    const maxOrUndef = this.maxLength === -1 ? undefined : this.maxLength;\n    const autocapitalizeOrUndef = this.autocapitalize ?\n        this.autocapitalize as (\n            'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters') :\n        undefined;\n    const showValidationMessage = this.validationMessage && !this.isUiValid;\n    const ariaLabelledbyOrUndef = !!this.label ? 'label' : undefined;\n    const ariaControlsOrUndef =\n        shouldRenderHelperText ? 'helper-text' : undefined;\n    const ariaDescribedbyOrUndef =\n        this.focused || this.helperPersistent || showValidationMessage ?\n        'helper-text' :\n        undefined;\n    // TODO: live() directive needs casting for lit-analyzer\n    // https://github.com/runem/lit-analyzer/pull/91/files\n    // TODO: lit-analyzer labels min/max as (number|string) instead of string\n    return html`\n      <input\n          aria-labelledby=${ifDefined(ariaLabelledbyOrUndef)}\n          aria-controls=\"${ifDefined(ariaControlsOrUndef)}\"\n          aria-describedby=\"${ifDefined(ariaDescribedbyOrUndef)}\"\n          class=\"mdc-text-field__input\"\n          type=\"${this.type}\"\n          .value=\"${live(this.value) as unknown as string}\"\n          ?disabled=\"${this.disabled}\"\n          placeholder=\"${this.placeholder}\"\n          ?required=\"${this.required}\"\n          ?readonly=\"${this.readOnly}\"\n          minlength=\"${ifDefined(minOrUndef)}\"\n          maxlength=\"${ifDefined(maxOrUndef)}\"\n          pattern=\"${ifDefined(this.pattern ? this.pattern : undefined)}\"\n          min=\"${ifDefined(this.min === '' ? undefined : this.min as number)}\"\n          max=\"${ifDefined(this.max === '' ? undefined : this.max as number)}\"\n          step=\"${\n        ifDefined(this.step === null ? undefined : this.step as number)}\"\n          size=\"${ifDefined(this.size === null ? undefined : this.size)}\"\n          name=\"${ifDefined(this.name === '' ? undefined : this.name)}\"\n          inputmode=\"${ifDefined(this.inputMode)}\"\n          autocapitalize=\"${ifDefined(autocapitalizeOrUndef)}\"\n          @input=\"${this.handleInputChange}\"\n          @focus=\"${this.onInputFocus}\"\n          @blur=\"${this.onInputBlur}\">`;\n  }\n\n  /** @soyTemplate */\n  protected renderLineRipple(): TemplateResult|string {\n    return this.outlined ?\n        '' :\n        html`\n      <span .lineRippleFoundation=${\n            lineRipple() as unknown as MDCLineRippleFoundation}></span>\n    `;\n  }\n\n  /** @soyTemplate */\n  protected renderHelperText(\n      shouldRenderHelperText: boolean,\n      shouldRenderCharCounter: boolean): TemplateResult|string {\n    const showValidationMessage = this.validationMessage && !this.isUiValid;\n    /** @classMap */\n    const classes = {\n      'mdc-text-field-helper-text--persistent': this.helperPersistent,\n      'mdc-text-field-helper-text--validation-msg': showValidationMessage,\n    };\n\n    const ariaHiddenOrUndef =\n        this.focused || this.helperPersistent || showValidationMessage ?\n        undefined :\n        'true';\n    const helperText =\n        showValidationMessage ? this.validationMessage : this.helper;\n    return !shouldRenderHelperText ? '' : html`\n      <div class=\"mdc-text-field-helper-line\">\n        <div id=\"helper-text\"\n             aria-hidden=\"${ifDefined(ariaHiddenOrUndef)}\"\n             class=\"mdc-text-field-helper-text ${classMap(classes)}\"\n             >${helperText}</div>\n        ${this.renderCharCounter(shouldRenderCharCounter)}\n      </div>`;\n  }\n\n  /** @soyTemplate */\n  protected renderCharCounter(shouldRenderCharCounter: boolean): TemplateResult\n      |string {\n    const length = Math.min(this.value.length, this.maxLength);\n    return !shouldRenderCharCounter ? '' : html`\n      <span class=\"mdc-text-field-character-counter\"\n            >${length} / ${this.maxLength}</span>`;\n  }\n\n  protected onInputFocus() {\n    this.focused = true;\n  }\n\n  protected onInputBlur() {\n    this.focused = false;\n    this.reportValidity();\n  }\n\n  checkValidity(): boolean {\n    const isValid = this._checkValidity(this.value);\n\n    if (!isValid) {\n      const invalidEvent =\n          new Event('invalid', {bubbles: false, cancelable: true});\n      this.dispatchEvent(invalidEvent);\n    }\n\n    return isValid;\n  }\n\n  reportValidity(): boolean {\n    const isValid = this.checkValidity();\n\n    this.mdcFoundation.setValid(isValid);\n    this.isUiValid = isValid;\n\n    return isValid;\n  }\n\n  protected _checkValidity(value: string) {\n    const nativeValidity = this.formElement.validity;\n\n    let validity = createValidityObj(nativeValidity);\n\n    if (this.validityTransform) {\n      const customValidity = this.validityTransform(value, validity);\n      validity = {...validity, ...customValidity};\n      this.mdcFoundation.setUseNativeValidation(false);\n    } else {\n      this.mdcFoundation.setUseNativeValidation(true);\n    }\n\n    this._validity = validity;\n\n    return this._validity.valid;\n  }\n\n  setCustomValidity(message: string) {\n    this.validationMessage = message;\n    this.formElement.setCustomValidity(message);\n  }\n\n  @eventOptions({passive: true})\n  protected handleInputChange() {\n    this.value = this.formElement.value;\n  }\n\n\n  protected createAdapter(): MDCTextFieldAdapter {\n    return {\n      ...this.getRootAdapterMethods(),\n      ...this.getInputAdapterMethods(),\n      ...this.getLabelAdapterMethods(),\n      ...this.getLineRippleAdapterMethods(),\n      ...this.getOutlineAdapterMethods(),\n    };\n  }\n\n  protected getRootAdapterMethods(): MDCTextFieldRootAdapter {\n    return {\n      registerTextFieldInteractionHandler: (evtType, handler) =>\n          this.addEventListener(evtType, handler),\n      deregisterTextFieldInteractionHandler: (evtType, handler) =>\n          this.removeEventListener(evtType, handler),\n      registerValidationAttributeChangeHandler: (handler) => {\n        const getAttributesList =\n            (mutationsList: MutationRecord[]): string[] => {\n              return mutationsList.map((mutation) => mutation.attributeName)\n                         .filter((attributeName) => attributeName) as string[];\n            };\n        const observer = new MutationObserver((mutationsList) => {\n          handler(getAttributesList(mutationsList));\n        });\n        const config = {attributes: true};\n        observer.observe(this.formElement, config);\n        return observer;\n      },\n      deregisterValidationAttributeChangeHandler:\n          (observer: MutationObserver) => observer.disconnect(),\n      ...addHasRemoveClass(this.mdcRoot),\n    };\n  }\n\n  protected getInputAdapterMethods(): MDCTextFieldInputAdapter {\n    return {\n      getNativeInput: () => this.formElement,\n      // since HelperTextFoundation is not used, aria-describedby a11y logic\n      // is implemented in render method instead of these adapter methods\n      setInputAttr: () => undefined,\n      removeInputAttr: () => undefined,\n      isFocused: () => this.shadowRoot ?\n          this.shadowRoot.activeElement === this.formElement :\n          false,\n      registerInputInteractionHandler: (evtType, handler) =>\n          this.formElement.addEventListener(\n              evtType, handler, {passive: evtType in passiveEvents}),\n      deregisterInputInteractionHandler: (evtType, handler) =>\n          this.formElement.removeEventListener(evtType, handler),\n    };\n  }\n\n  protected getLabelAdapterMethods(): MDCTextFieldLabelAdapter {\n    return {\n      floatLabel: (shouldFloat: boolean) => this.labelElement &&\n          this.labelElement.floatingLabelFoundation.float(shouldFloat),\n      getLabelWidth: () => {\n        return this.labelElement ?\n            this.labelElement.floatingLabelFoundation.getWidth() :\n            0;\n      },\n      hasLabel: () => Boolean(this.labelElement),\n      shakeLabel: (shouldShake: boolean) => this.labelElement &&\n          this.labelElement.floatingLabelFoundation.shake(shouldShake),\n      setLabelRequired: (isRequired: boolean) => {\n        if (this.labelElement) {\n          this.labelElement.floatingLabelFoundation.setRequired(isRequired);\n        }\n      },\n    };\n  }\n\n  protected getLineRippleAdapterMethods(): MDCTextFieldLineRippleAdapter {\n    return {\n      activateLineRipple: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.activate();\n        }\n      },\n      deactivateLineRipple: () => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.deactivate();\n        }\n      },\n      setLineRippleTransformOrigin: (normalizedX: number) => {\n        if (this.lineRippleElement) {\n          this.lineRippleElement.lineRippleFoundation.setRippleCenter(\n              normalizedX);\n        }\n      },\n    };\n  }\n\n  // tslint:disable:ban-ts-ignore\n  protected override async getUpdateComplete() {\n    // @ts-ignore\n    const result = await super.getUpdateComplete();\n    await this.outlineElement?.updateComplete;\n    return result;\n  }\n  // tslint:enable:ban-ts-ignore\n\n  override firstUpdated() {\n    super.firstUpdated();\n\n    this.mdcFoundation.setValidateOnValueChange(this.autoValidate);\n\n    if (this.validateOnInitialRender) {\n      this.reportValidity();\n    }\n\n    // wait for the outline element to render to update the notch width\n    this.outlineElement?.updateComplete.then(() => {\n      // `foundation.notchOutline()` assumes the label isn't floating and\n      // multiplies by a constant, but the label is already is floating at this\n      // stage, therefore directly set the outline width to the label width\n      this.outlineWidth =\n          this.labelElement?.floatingLabelFoundation.getWidth() || 0;\n    });\n  }\n\n  protected getOutlineAdapterMethods(): MDCTextFieldOutlineAdapter {\n    return {\n      closeOutline: () => this.outlineElement && (this.outlineOpen = false),\n      hasOutline: () => Boolean(this.outlineElement),\n      notchOutline: (labelWidth) => {\n        const outlineElement = this.outlineElement;\n        if (outlineElement && !this.outlineOpen) {\n          this.outlineWidth = labelWidth;\n          this.outlineOpen = true;\n        }\n      }\n    };\n  }\n\n  async layout() {\n    await this.updateComplete;\n\n    const labelElement = this.labelElement;\n\n    if (!labelElement) {\n      this.outlineOpen = false;\n      return;\n    }\n\n    const shouldFloat = !!this.label && !!this.value;\n    labelElement.floatingLabelFoundation.float(shouldFloat);\n\n    if (!this.outlined) {\n      return;\n    }\n\n    this.outlineOpen = shouldFloat;\n    await this.updateComplete;\n\n    /* When the textfield automatically notches due to a value and label\n     * being defined, the textfield may be set to `display: none` by the user.\n     * this means that the notch is of size 0px. We provide this function so\n     * that the user may manually resize the notch to the floated label's\n     * width.\n     */\n    const labelWidth = labelElement.floatingLabelFoundation.getWidth();\n    if (this.outlineOpen) {\n      this.outlineWidth = labelWidth;\n      await this.updateComplete;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}