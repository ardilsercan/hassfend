{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-combo-box-item.js';\nimport './vaadin-combo-box-overlay.js';\nimport './vaadin-combo-box-scroller.js';\nimport { dashToCamelCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ComboBoxDataProviderMixin } from './vaadin-combo-box-data-provider-mixin.js';\nimport { ComboBoxMixin } from './vaadin-combo-box-mixin.js';\n\n/**\n * `<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing\n * only the dropdown functionality and leaving the input field definition to the user.\n *\n * The element has the same API as `<vaadin-combo-box>`.\n *\n * To create a custom input field, you need to add a child element which has a two-way\n * data-bindable property representing the input value. The property name is expected\n * to be `value` by default. For example, you can use `<vaadin-text-field>` element:\n *\n * ```html\n * <vaadin-combo-box-light>\n *   <vaadin-text-field></vaadin-text-field>\n * </vaadin-combo-box-light>\n * ```\n *\n * If you are using custom input field that has other property for value,\n * set `class=\"input\"` to enable corresponding logic, and use `attr-for-value`\n * attribute to specify which property to use:\n *\n * ```html\n * <vaadin-combo-box-light attr-for-value=\"input-value\">\n *   <custom-input class=\"input\"></custom-input>\n * </vaadin-combo-box-light>\n * ```\n *\n * You can also pass custom toggle and clear buttons with corresponding classes:\n *\n * ```html\n * <vaadin-combo-box-light>\n *   <custom-input class=\"input\" attr-for-value=\"input-value\">\n *     <button slot=\"suffix\" class=\"clear-button\">Clear</button>\n *     <button slot=\"suffix\" class=\"toggle-button\">Toggle</button>\n *   </custom-input>\n * </vaadin-combo-box-light>\n * ```\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} selected-item-changed - Fired when the `selectedItem` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ComboBoxDataProviderMixin\n * @mixes ComboBoxMixin\n * @mixes ThemableMixin\n * @mixes ValidateMixin\n */\nclass ComboBoxLight extends ComboBoxDataProviderMixin(ComboBoxMixin(ValidateMixin(ThemableMixin(PolymerElement)))) {\n  static get is() {\n    return 'vaadin-combo-box-light';\n  }\n  static get template() {\n    return html`\n      <style>\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n\n      <slot></slot>\n\n      <vaadin-combo-box-overlay\n        id=\"overlay\"\n        opened=\"[[_overlayOpened]]\"\n        loading$=\"[[loading]]\"\n        theme$=\"[[_theme]]\"\n        position-target=\"[[inputElement]]\"\n        no-vertical-overlap\n        restore-focus-node=\"[[inputElement]]\"\n      ></vaadin-combo-box-overlay>\n    `;\n  }\n  static get properties() {\n    return {\n      /**\n       * Name of the two-way data-bindable property representing the\n       * value of the custom input field.\n       * @attr {string} attr-for-value\n       * @type {string}\n       */\n      attrForValue: {\n        type: String,\n        value: 'value'\n      }\n    };\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.querySelector('.clear-button');\n  }\n\n  /**\n   * Override this getter from `InputMixin` to allow using\n   * an arbitrary property name instead of `value`\n   * for accessing the input element's value.\n   *\n   * @protected\n   * @override\n   * @return {string}\n   */\n  get _inputElementValueProperty() {\n    return dashToCamelCase(this.attrForValue);\n  }\n\n  /**\n   * @protected\n   * @override\n   * @return {HTMLInputElement | undefined}\n   */\n  get _nativeInput() {\n    const input = this.inputElement;\n    if (input) {\n      // Support `<input class=\"input\">`\n      if (input instanceof HTMLInputElement) {\n        return input;\n      }\n\n      // Support `<input>` in light DOM (e.g. `vaadin-text-field`)\n      const slottedInput = input.querySelector('input');\n      if (slottedInput) {\n        return slottedInput;\n      }\n      if (input.shadowRoot) {\n        // Support `<input>` in Shadow DOM (e.g. `mwc-textfield`)\n        const shadowInput = input.shadowRoot.querySelector('input');\n        if (shadowInput) {\n          return shadowInput;\n        }\n      }\n    }\n    return undefined;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this._toggleElement = this.querySelector('.toggle-button');\n\n    // Wait until the slotted input DOM is ready\n    afterNextRender(this, () => {\n      this._setInputElement(this.querySelector('vaadin-text-field,.input'));\n      this._revertInputValue();\n    });\n  }\n\n  /**\n   * Returns true if the current input value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    if (this.inputElement && this.inputElement.validate) {\n      return this.inputElement.validate();\n    }\n    return super.checkValidity();\n  }\n\n  /** @protected */\n  _isClearButton(event) {\n    return super._isClearButton(event) || event.type === 'input' && !event.isTrusted ||\n    // Fake input event dispatched by clear button\n    event.composedPath()[0].getAttribute('part') === 'clear-button';\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus(event) {\n    const isBlurringControlButtons = event.target === this._toggleElement || event.target === this.clearElement;\n    const isFocusingInputElement = event.relatedTarget && event.relatedTarget === this._nativeInput;\n\n    // prevent closing the overlay when moving focus from clear or toggle buttons to the internal input\n    if (isBlurringControlButtons && isFocusingInputElement) {\n      return false;\n    }\n    return super._shouldRemoveFocus(event);\n  }\n}\ndefineCustomElement(ComboBoxLight);\nexport { ComboBoxLight };","map":{"version":3,"names":["dashToCamelCase","afterNextRender","html","PolymerElement","defineCustomElement","ValidateMixin","ThemableMixin","ComboBoxDataProviderMixin","ComboBoxMixin","ComboBoxLight","is","template","properties","attrForValue","type","String","value","clearElement","querySelector","_inputElementValueProperty","_nativeInput","input","inputElement","HTMLInputElement","slottedInput","shadowRoot","shadowInput","undefined","ready","_toggleElement","_setInputElement","_revertInputValue","checkValidity","validate","_isClearButton","event","isTrusted","composedPath","getAttribute","_shouldRemoveFocus","isBlurringControlButtons","target","isFocusingInputElement","relatedTarget"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/combo-box/src/vaadin-combo-box-light.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport './vaadin-combo-box-item.js';\nimport './vaadin-combo-box-overlay.js';\nimport './vaadin-combo-box-scroller.js';\nimport { dashToCamelCase } from '@polymer/polymer/lib/utils/case-map.js';\nimport { afterNextRender } from '@polymer/polymer/lib/utils/render-status.js';\nimport { html, PolymerElement } from '@polymer/polymer/polymer-element.js';\nimport { defineCustomElement } from '@vaadin/component-base/src/define.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { ThemableMixin } from '@vaadin/vaadin-themable-mixin/vaadin-themable-mixin.js';\nimport { ComboBoxDataProviderMixin } from './vaadin-combo-box-data-provider-mixin.js';\nimport { ComboBoxMixin } from './vaadin-combo-box-mixin.js';\n\n/**\n * `<vaadin-combo-box-light>` is a customizable version of the `<vaadin-combo-box>` providing\n * only the dropdown functionality and leaving the input field definition to the user.\n *\n * The element has the same API as `<vaadin-combo-box>`.\n *\n * To create a custom input field, you need to add a child element which has a two-way\n * data-bindable property representing the input value. The property name is expected\n * to be `value` by default. For example, you can use `<vaadin-text-field>` element:\n *\n * ```html\n * <vaadin-combo-box-light>\n *   <vaadin-text-field></vaadin-text-field>\n * </vaadin-combo-box-light>\n * ```\n *\n * If you are using custom input field that has other property for value,\n * set `class=\"input\"` to enable corresponding logic, and use `attr-for-value`\n * attribute to specify which property to use:\n *\n * ```html\n * <vaadin-combo-box-light attr-for-value=\"input-value\">\n *   <custom-input class=\"input\"></custom-input>\n * </vaadin-combo-box-light>\n * ```\n *\n * You can also pass custom toggle and clear buttons with corresponding classes:\n *\n * ```html\n * <vaadin-combo-box-light>\n *   <custom-input class=\"input\" attr-for-value=\"input-value\">\n *     <button slot=\"suffix\" class=\"clear-button\">Clear</button>\n *     <button slot=\"suffix\" class=\"toggle-button\">Toggle</button>\n *   </custom-input>\n * </vaadin-combo-box-light>\n * ```\n *\n * @fires {Event} change - Fired when the user commits a value change.\n * @fires {CustomEvent} custom-value-set - Fired when the user sets a custom value.\n * @fires {CustomEvent} filter-changed - Fired when the `filter` property changes.\n * @fires {CustomEvent} invalid-changed - Fired when the `invalid` property changes.\n * @fires {CustomEvent} opened-changed - Fired when the `opened` property changes.\n * @fires {CustomEvent} selected-item-changed - Fired when the `selectedItem` property changes.\n * @fires {CustomEvent} value-changed - Fired when the `value` property changes.\n * @fires {CustomEvent} validated - Fired whenever the field is validated.\n *\n * @customElement\n * @extends HTMLElement\n * @mixes ComboBoxDataProviderMixin\n * @mixes ComboBoxMixin\n * @mixes ThemableMixin\n * @mixes ValidateMixin\n */\nclass ComboBoxLight extends ComboBoxDataProviderMixin(ComboBoxMixin(ValidateMixin(ThemableMixin(PolymerElement)))) {\n  static get is() {\n    return 'vaadin-combo-box-light';\n  }\n\n  static get template() {\n    return html`\n      <style>\n        :host([opened]) {\n          pointer-events: auto;\n        }\n      </style>\n\n      <slot></slot>\n\n      <vaadin-combo-box-overlay\n        id=\"overlay\"\n        opened=\"[[_overlayOpened]]\"\n        loading$=\"[[loading]]\"\n        theme$=\"[[_theme]]\"\n        position-target=\"[[inputElement]]\"\n        no-vertical-overlap\n        restore-focus-node=\"[[inputElement]]\"\n      ></vaadin-combo-box-overlay>\n    `;\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Name of the two-way data-bindable property representing the\n       * value of the custom input field.\n       * @attr {string} attr-for-value\n       * @type {string}\n       */\n      attrForValue: {\n        type: String,\n        value: 'value',\n      },\n    };\n  }\n\n  /**\n   * Used by `InputControlMixin` as a reference to the clear button element.\n   * @protected\n   * @return {!HTMLElement}\n   */\n  get clearElement() {\n    return this.querySelector('.clear-button');\n  }\n\n  /**\n   * Override this getter from `InputMixin` to allow using\n   * an arbitrary property name instead of `value`\n   * for accessing the input element's value.\n   *\n   * @protected\n   * @override\n   * @return {string}\n   */\n  get _inputElementValueProperty() {\n    return dashToCamelCase(this.attrForValue);\n  }\n\n  /**\n   * @protected\n   * @override\n   * @return {HTMLInputElement | undefined}\n   */\n  get _nativeInput() {\n    const input = this.inputElement;\n\n    if (input) {\n      // Support `<input class=\"input\">`\n      if (input instanceof HTMLInputElement) {\n        return input;\n      }\n\n      // Support `<input>` in light DOM (e.g. `vaadin-text-field`)\n      const slottedInput = input.querySelector('input');\n      if (slottedInput) {\n        return slottedInput;\n      }\n\n      if (input.shadowRoot) {\n        // Support `<input>` in Shadow DOM (e.g. `mwc-textfield`)\n        const shadowInput = input.shadowRoot.querySelector('input');\n        if (shadowInput) {\n          return shadowInput;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n\n    this._toggleElement = this.querySelector('.toggle-button');\n\n    // Wait until the slotted input DOM is ready\n    afterNextRender(this, () => {\n      this._setInputElement(this.querySelector('vaadin-text-field,.input'));\n      this._revertInputValue();\n    });\n  }\n\n  /**\n   * Returns true if the current input value satisfies all constraints (if any).\n   * @return {boolean}\n   */\n  checkValidity() {\n    if (this.inputElement && this.inputElement.validate) {\n      return this.inputElement.validate();\n    }\n    return super.checkValidity();\n  }\n\n  /** @protected */\n  _isClearButton(event) {\n    return (\n      super._isClearButton(event) ||\n      (event.type === 'input' && !event.isTrusted) || // Fake input event dispatched by clear button\n      event.composedPath()[0].getAttribute('part') === 'clear-button'\n    );\n  }\n\n  /**\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus(event) {\n    const isBlurringControlButtons = event.target === this._toggleElement || event.target === this.clearElement;\n    const isFocusingInputElement = event.relatedTarget && event.relatedTarget === this._nativeInput;\n\n    // prevent closing the overlay when moving focus from clear or toggle buttons to the internal input\n    if (isBlurringControlButtons && isFocusingInputElement) {\n      return false;\n    }\n\n    return super._shouldRemoveFocus(event);\n  }\n}\n\ndefineCustomElement(ComboBoxLight);\n\nexport { ComboBoxLight };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,OAAO,4BAA4B;AACnC,OAAO,+BAA+B;AACtC,OAAO,gCAAgC;AACvC,SAASA,eAAe,QAAQ,wCAAwC;AACxE,SAASC,eAAe,QAAQ,6CAA6C;AAC7E,SAASC,IAAI,EAAEC,cAAc,QAAQ,qCAAqC;AAC1E,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,SAASC,aAAa,QAAQ,0CAA0C;AACxE,SAASC,aAAa,QAAQ,wDAAwD;AACtF,SAASC,yBAAyB,QAAQ,2CAA2C;AACrF,SAASC,aAAa,QAAQ,6BAA6B;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,SAASF,yBAAyB,CAACC,aAAa,CAACH,aAAa,CAACC,aAAa,CAACH,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACjH,WAAWO,EAAEA,CAAA,EAAG;IACd,OAAO,wBAAwB;EACjC;EAEA,WAAWC,QAAQA,CAAA,EAAG;IACpB,OAAOT,IAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;EACH;EAEA,WAAWU,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACN;AACA;AACA;AACA;AACA;MACMC,YAAY,EAAE;QACZC,IAAI,EAAEC,MAAM;QACZC,KAAK,EAAE;MACT;IACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIC,YAAYA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACC,aAAa,CAAC,eAAe,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,IAAIC,0BAA0BA,CAAA,EAAG;IAC/B,OAAOnB,eAAe,CAAC,IAAI,CAACa,YAAY,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAIO,YAAYA,CAAA,EAAG;IACjB,MAAMC,KAAK,GAAG,IAAI,CAACC,YAAY;IAE/B,IAAID,KAAK,EAAE;MACT;MACA,IAAIA,KAAK,YAAYE,gBAAgB,EAAE;QACrC,OAAOF,KAAK;MACd;;MAEA;MACA,MAAMG,YAAY,GAAGH,KAAK,CAACH,aAAa,CAAC,OAAO,CAAC;MACjD,IAAIM,YAAY,EAAE;QAChB,OAAOA,YAAY;MACrB;MAEA,IAAIH,KAAK,CAACI,UAAU,EAAE;QACpB;QACA,MAAMC,WAAW,GAAGL,KAAK,CAACI,UAAU,CAACP,aAAa,CAAC,OAAO,CAAC;QAC3D,IAAIQ,WAAW,EAAE;UACf,OAAOA,WAAW;QACpB;MACF;IACF;IAEA,OAAOC,SAAS;EAClB;;EAEA;EACAC,KAAKA,CAAA,EAAG;IACN,KAAK,CAACA,KAAK,CAAC,CAAC;IAEb,IAAI,CAACC,cAAc,GAAG,IAAI,CAACX,aAAa,CAAC,gBAAgB,CAAC;;IAE1D;IACAjB,eAAe,CAAC,IAAI,EAAE,MAAM;MAC1B,IAAI,CAAC6B,gBAAgB,CAAC,IAAI,CAACZ,aAAa,CAAC,0BAA0B,CAAC,CAAC;MACrE,IAAI,CAACa,iBAAiB,CAAC,CAAC;IAC1B,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEC,aAAaA,CAAA,EAAG;IACd,IAAI,IAAI,CAACV,YAAY,IAAI,IAAI,CAACA,YAAY,CAACW,QAAQ,EAAE;MACnD,OAAO,IAAI,CAACX,YAAY,CAACW,QAAQ,CAAC,CAAC;IACrC;IACA,OAAO,KAAK,CAACD,aAAa,CAAC,CAAC;EAC9B;;EAEA;EACAE,cAAcA,CAACC,KAAK,EAAE;IACpB,OACE,KAAK,CAACD,cAAc,CAACC,KAAK,CAAC,IAC1BA,KAAK,CAACrB,IAAI,KAAK,OAAO,IAAI,CAACqB,KAAK,CAACC,SAAU;IAAI;IAChDD,KAAK,CAACE,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,YAAY,CAAC,MAAM,CAAC,KAAK,cAAc;EAEnE;;EAEA;AACF;AACA;AACA;EACEC,kBAAkBA,CAACJ,KAAK,EAAE;IACxB,MAAMK,wBAAwB,GAAGL,KAAK,CAACM,MAAM,KAAK,IAAI,CAACZ,cAAc,IAAIM,KAAK,CAACM,MAAM,KAAK,IAAI,CAACxB,YAAY;IAC3G,MAAMyB,sBAAsB,GAAGP,KAAK,CAACQ,aAAa,IAAIR,KAAK,CAACQ,aAAa,KAAK,IAAI,CAACvB,YAAY;;IAE/F;IACA,IAAIoB,wBAAwB,IAAIE,sBAAsB,EAAE;MACtD,OAAO,KAAK;IACd;IAEA,OAAO,KAAK,CAACH,kBAAkB,CAACJ,KAAK,CAAC;EACxC;AACF;AAEA/B,mBAAmB,CAACK,aAAa,CAAC;AAElC,SAASA,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}