{"ast":null,"code":"const CALLBACK_EXTERNAL_BUS = \"externalBus\";\nexport class ExternalMessaging {\n  constructor() {\n    this.config = void 0;\n    this.commands = {};\n    this.msgId = 0;\n    this._commandHandler = void 0;\n  }\n  async attach() {\n    window[CALLBACK_EXTERNAL_BUS] = msg => this.receiveMessage(msg);\n    window.addEventListener(\"connection-status\", ev => this.fireMessage({\n      type: \"connection-status\",\n      payload: {\n        event: ev.detail\n      }\n    }));\n    this.config = await this.sendMessage({\n      type: \"config/get\"\n    });\n  }\n  addCommandHandler(handler) {\n    this._commandHandler = handler;\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  sendMessage(msg) {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n    this._sendExternal(msg);\n    return new Promise((resolve, reject) => {\n      this.commands[msgId] = {\n        resolve,\n        reject\n      };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  fireMessage(msg) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n  receiveMessage(msg) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n    if (msg.type === \"command\") {\n      if (!this._commandHandler || !this._commandHandler(msg)) {\n        let code;\n        let message;\n        if (this._commandHandler) {\n          code = \"not_ready\";\n          message = \"Command handler not ready\";\n        } else {\n          code = \"unknown_command\";\n          message = `Unknown command ${msg.command}`;\n        }\n        // eslint-disable-next-line no-console\n        console.warn(message, msg);\n        this.fireMessage({\n          id: msg.id,\n          type: \"result\",\n          success: false,\n          error: {\n            code,\n            message\n          }\n        });\n      }\n      return;\n    }\n    const pendingCmd = this.commands[msg.id];\n    if (!pendingCmd) {\n      // eslint-disable-next-line no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n  _sendExternal(msg) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}","map":{"version":3,"names":["CALLBACK_EXTERNAL_BUS","ExternalMessaging","constructor","config","commands","msgId","_commandHandler","attach","window","msg","receiveMessage","addEventListener","ev","fireMessage","type","payload","event","detail","sendMessage","addCommandHandler","handler","id","_sendExternal","Promise","resolve","reject","__DEV__","console","log","code","message","command","warn","success","error","pendingCmd","result","externalApp","externalBus","JSON","stringify","webkit","messageHandlers","postMessage"],"sources":["/workspaces/frontend/src/external_app/external_messaging.ts"],"sourcesContent":["import { AutomationConfig } from \"../data/automation\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: EMError) => void;\n}\n\nexport interface EMMessage {\n  id?: number;\n  type: string;\n}\n\ninterface EMError {\n  code: string;\n  message: string;\n}\n\ninterface EMMessageResultSuccess {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface EMMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: EMError;\n}\n\ninterface EMOutgoingMessageConfigGet extends EMMessage {\n  type: \"config/get\";\n}\n\ninterface EMOutgoingMessageScanQRCode extends EMMessage {\n  type: \"qr_code/scan\";\n  title: string;\n  description: string;\n  alternative_option_label?: string;\n}\n\ninterface EMOutgoingMessageMatterCommission extends EMMessage {\n  type: \"matter/commission\";\n}\n\ninterface EMOutgoingMessageImportThreadCredentials extends EMMessage {\n  type: \"thread/import_credentials\";\n}\n\ntype EMOutgoingMessageWithAnswer = {\n  \"config/get\": {\n    request: EMOutgoingMessageConfigGet;\n    response: ExternalConfig;\n  };\n  \"qr_code/scan\": {\n    request: EMOutgoingMessageScanQRCode;\n    response:\n      | EMIncomingMessageQRCodeResponseCanceled\n      | EMIncomingMessageQRCodeResponseAlternativeOptions\n      | EMIncomingMessageQRCodeResponseScanResult;\n  };\n};\n\ninterface EMOutgoingMessageExoplayerPlayHLS extends EMMessage {\n  type: \"exoplayer/play_hls\";\n  payload: {\n    url: string;\n    muted: boolean;\n  };\n}\ninterface EMOutgoingMessageExoplayerResize extends EMMessage {\n  type: \"exoplayer/resize\";\n  payload: {\n    left: number;\n    top: number;\n    right: number;\n    bottom: number;\n  };\n}\n\ninterface EMOutgoingMessageExoplayerStop extends EMMessage {\n  type: \"exoplayer/stop\";\n}\n\ninterface EMOutgoingMessageThemeUpdate extends EMMessage {\n  type: \"theme-update\";\n}\n\ninterface EMOutgoingMessageHaptic extends EMMessage {\n  type: \"haptic\";\n  payload: { hapticType: string };\n}\n\ninterface EMOutgoingMessageConnectionStatus extends EMMessage {\n  type: \"connection-status\";\n  payload: { event: string };\n}\n\ninterface EMOutgoingMessageAppConfiguration extends EMMessage {\n  type: \"config_screen/show\";\n}\n\ninterface EMOutgoingMessageTagWrite extends EMMessage {\n  type: \"tag/write\";\n  payload: {\n    name: string | null;\n    tag: string;\n  };\n}\n\ninterface EMOutgoingMessageSidebarShow extends EMMessage {\n  type: \"sidebar/show\";\n}\n\ninterface EMOutgoingMessageAssistShow extends EMMessage {\n  type: \"assist/show\";\n  payload?: {\n    pipeline_id: \"preferred\" | \"last_used\" | string;\n    start_listening: boolean;\n  };\n}\n\ntype EMOutgoingMessageWithoutAnswer =\n  | EMOutgoingMessageHaptic\n  | EMOutgoingMessageConnectionStatus\n  | EMOutgoingMessageAppConfiguration\n  | EMOutgoingMessageTagWrite\n  | EMOutgoingMessageSidebarShow\n  | EMOutgoingMessageAssistShow\n  | EMOutgoingMessageExoplayerPlayHLS\n  | EMOutgoingMessageExoplayerResize\n  | EMOutgoingMessageExoplayerStop\n  | EMOutgoingMessageThemeUpdate\n  | EMMessageResultSuccess\n  | EMMessageResultError\n  | EMOutgoingMessageMatterCommission\n  | EMOutgoingMessageImportThreadCredentials;\n\ninterface EMIncomingMessageRestart {\n  id: number;\n  type: \"command\";\n  command: \"restart\";\n}\n\ninterface EMIncomingMessageShowNotifications {\n  id: number;\n  type: \"command\";\n  command: \"notifications/show\";\n}\n\ninterface EMIncomingMessageToggleSidebar {\n  id: number;\n  type: \"command\";\n  command: \"sidebar/toggle\";\n}\n\ninterface EMIncomingMessageShowSidebar {\n  id: number;\n  type: \"command\";\n  command: \"sidebar/show\";\n}\n\ninterface EMIncomingMessageShowAutomationEditor {\n  id: number;\n  type: \"command\";\n  command: \"automation/editor/show\";\n  payload?: {\n    config?: Partial<AutomationConfig>;\n  };\n}\n\nexport interface EMIncomingMessageQRCodeResponseCanceled {\n  action: \"canceled\";\n}\n\nexport interface EMIncomingMessageQRCodeResponseAlternativeOptions {\n  action: \"alternative_options\";\n}\n\nexport interface EMIncomingMessageQRCodeResponseScanResult {\n  action: \"scan_result\";\n  result: string;\n}\n\nexport type EMIncomingMessageCommands =\n  | EMIncomingMessageRestart\n  | EMIncomingMessageShowNotifications\n  | EMIncomingMessageToggleSidebar\n  | EMIncomingMessageShowSidebar\n  | EMIncomingMessageShowAutomationEditor;\n\ntype EMIncomingMessage =\n  | EMMessageResultSuccess\n  | EMMessageResultError\n  | EMIncomingMessageCommands;\n\ntype EMIncomingMessageHandler = (msg: EMIncomingMessageCommands) => boolean;\n\nexport interface ExternalConfig {\n  hasSettingsScreen: boolean;\n  hasSidebar: boolean;\n  canWriteTag: boolean;\n  hasExoPlayer: boolean;\n  canCommissionMatter: boolean;\n  canImportThreadCredentials: boolean;\n  hasAssist: boolean;\n  hasQRScanner: number;\n}\n\nexport class ExternalMessaging {\n  public config!: ExternalConfig;\n\n  public commands: { [msgId: number]: CommandInFlight } = {};\n\n  public msgId = 0;\n\n  private _commandHandler?: EMIncomingMessageHandler;\n\n  public async attach() {\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n    window.addEventListener(\"connection-status\", (ev) =>\n      this.fireMessage({\n        type: \"connection-status\",\n        payload: { event: ev.detail },\n      })\n    );\n    this.config = await this.sendMessage<\"config/get\">({\n      type: \"config/get\",\n    });\n  }\n\n  public addCommandHandler(handler: EMIncomingMessageHandler) {\n    this._commandHandler = handler;\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T extends keyof EMOutgoingMessageWithAnswer>(\n    msg: EMOutgoingMessageWithAnswer[T][\"request\"]\n  ): Promise<EMOutgoingMessageWithAnswer[T][\"response\"]> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this._sendExternal(msg);\n\n    return new Promise<EMOutgoingMessageWithAnswer[T][\"response\"]>(\n      (resolve, reject) => {\n        this.commands[msgId] = { resolve, reject };\n      }\n    );\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: EMOutgoingMessageWithoutAnswer) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: EMIncomingMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    if (msg.type === \"command\") {\n      if (!this._commandHandler || !this._commandHandler(msg)) {\n        let code: string;\n        let message: string;\n        if (this._commandHandler) {\n          code = \"not_ready\";\n          message = \"Command handler not ready\";\n        } else {\n          code = \"unknown_command\";\n          message = `Unknown command ${msg.command}`;\n        }\n        // eslint-disable-next-line no-console\n        console.warn(message, msg);\n        this.fireMessage({\n          id: msg.id,\n          type: \"result\",\n          success: false,\n          error: {\n            code,\n            message,\n          },\n        });\n      }\n      return;\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // eslint-disable-next-line no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: EMMessage) {\n    if (__DEV__) {\n      // eslint-disable-next-line no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}