{"ast":null,"code":"import { fuzzyScore } from \"./filter\";\n\n/**\n * Determine whether a sequence of letters exists in another string,\n *   in that order, allowing for skipping. Ex: \"chdr\" exists in \"chandelier\")\n *\n * @param {string} filter - Sequence of letters to check for\n * @param {ScorableTextItem} item - Item against whose strings will be checked\n *\n * @return {number} Score representing how well the word matches the filter. Return of 0 means no match.\n */\n\nexport const fuzzySequentialMatch = (filter, item) => {\n  let topScore = Number.NEGATIVE_INFINITY;\n  for (const word of item.strings) {\n    const scores = fuzzyScore(filter, filter.toLowerCase(), 0, word, word.toLowerCase(), 0, true);\n    if (!scores) {\n      continue;\n    }\n\n    // The VS Code implementation of filter returns a 0 for a weak match.\n    // But if .filter() sees a \"0\", it considers that a failed match and will remove it.\n    // So, we set score to 1 in these cases so the match will be included, and mostly respect correct ordering.\n    const score = scores[0] === 0 ? 1 : scores[0];\n    if (score > topScore) {\n      topScore = score;\n    }\n  }\n  if (topScore === Number.NEGATIVE_INFINITY) {\n    return undefined;\n  }\n  return topScore;\n};\n\n/**\n * An interface that objects must extend in order to use the fuzzy sequence matcher\n *\n * @param {number} score - A number representing the existence and strength of a match.\n *    - `< 0` means a good match that starts in the middle of the string\n *    - `> 0` means a good match that starts at the beginning of the string\n *    - `0` means just barely a match\n *    - `undefined` means not a match\n *\n * @param {string} strings - Array of strings (aliases) representing the item. The filter string will be compared against each of these for a match.\n *\n */\n\nexport const fuzzyFilterSort = (filter, items) => items.map(item => {\n  item.score = fuzzySequentialMatch(filter, item);\n  return item;\n}).filter(item => item.score !== undefined).sort(({\n  score: scoreA = 0\n}, {\n  score: scoreB = 0\n}) => scoreA > scoreB ? -1 : scoreA < scoreB ? 1 : 0);","map":{"version":3,"names":["fuzzyScore","fuzzySequentialMatch","filter","item","topScore","Number","NEGATIVE_INFINITY","word","strings","scores","toLowerCase","score","undefined","fuzzyFilterSort","items","map","sort","scoreA","scoreB"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/string/filter/sequence-matching.ts"],"sourcesContent":["import { fuzzyScore } from \"./filter\";\n\n/**\n * Determine whether a sequence of letters exists in another string,\n *   in that order, allowing for skipping. Ex: \"chdr\" exists in \"chandelier\")\n *\n * @param {string} filter - Sequence of letters to check for\n * @param {ScorableTextItem} item - Item against whose strings will be checked\n *\n * @return {number} Score representing how well the word matches the filter. Return of 0 means no match.\n */\n\nexport const fuzzySequentialMatch = (\n  filter: string,\n  item: ScorableTextItem\n) => {\n  let topScore = Number.NEGATIVE_INFINITY;\n\n  for (const word of item.strings) {\n    const scores = fuzzyScore(\n      filter,\n      filter.toLowerCase(),\n      0,\n      word,\n      word.toLowerCase(),\n      0,\n      true\n    );\n\n    if (!scores) {\n      continue;\n    }\n\n    // The VS Code implementation of filter returns a 0 for a weak match.\n    // But if .filter() sees a \"0\", it considers that a failed match and will remove it.\n    // So, we set score to 1 in these cases so the match will be included, and mostly respect correct ordering.\n    const score = scores[0] === 0 ? 1 : scores[0];\n\n    if (score > topScore) {\n      topScore = score;\n    }\n  }\n\n  if (topScore === Number.NEGATIVE_INFINITY) {\n    return undefined;\n  }\n\n  return topScore;\n};\n\n/**\n * An interface that objects must extend in order to use the fuzzy sequence matcher\n *\n * @param {number} score - A number representing the existence and strength of a match.\n *    - `< 0` means a good match that starts in the middle of the string\n *    - `> 0` means a good match that starts at the beginning of the string\n *    - `0` means just barely a match\n *    - `undefined` means not a match\n *\n * @param {string} strings - Array of strings (aliases) representing the item. The filter string will be compared against each of these for a match.\n *\n */\n\nexport interface ScorableTextItem {\n  score?: number;\n  strings: string[];\n}\n\ntype FuzzyFilterSort = <T extends ScorableTextItem>(\n  filter: string,\n  items: T[]\n) => T[];\n\nexport const fuzzyFilterSort: FuzzyFilterSort = (filter, items) =>\n  items\n    .map((item) => {\n      item.score = fuzzySequentialMatch(filter, item);\n      return item;\n    })\n    .filter((item) => item.score !== undefined)\n    .sort(({ score: scoreA = 0 }, { score: scoreB = 0 }) =>\n      scoreA > scoreB ? -1 : scoreA < scoreB ? 1 : 0\n    );\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,UAAU;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAGA,CAClCC,MAAc,EACdC,IAAsB,KACnB;EACH,IAAIC,QAAQ,GAAGC,MAAM,CAACC,iBAAiB;EAEvC,KAAK,MAAMC,IAAI,IAAIJ,IAAI,CAACK,OAAO,EAAE;IAC/B,MAAMC,MAAM,GAAGT,UAAU,CACvBE,MAAM,EACNA,MAAM,CAACQ,WAAW,CAAC,CAAC,EACpB,CAAC,EACDH,IAAI,EACJA,IAAI,CAACG,WAAW,CAAC,CAAC,EAClB,CAAC,EACD,IACF,CAAC;IAED,IAAI,CAACD,MAAM,EAAE;MACX;IACF;;IAEA;IACA;IACA;IACA,MAAME,KAAK,GAAGF,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,GAAGA,MAAM,CAAC,CAAC,CAAC;IAE7C,IAAIE,KAAK,GAAGP,QAAQ,EAAE;MACpBA,QAAQ,GAAGO,KAAK;IAClB;EACF;EAEA,IAAIP,QAAQ,KAAKC,MAAM,CAACC,iBAAiB,EAAE;IACzC,OAAOM,SAAS;EAClB;EAEA,OAAOR,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA,OAAO,MAAMS,eAAgC,GAAGA,CAACX,MAAM,EAAEY,KAAK,KAC5DA,KAAK,CACFC,GAAG,CAAEZ,IAAI,IAAK;EACbA,IAAI,CAACQ,KAAK,GAAGV,oBAAoB,CAACC,MAAM,EAAEC,IAAI,CAAC;EAC/C,OAAOA,IAAI;AACb,CAAC,CAAC,CACDD,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACQ,KAAK,KAAKC,SAAS,CAAC,CAC1CI,IAAI,CAAC,CAAC;EAAEL,KAAK,EAAEM,MAAM,GAAG;AAAE,CAAC,EAAE;EAAEN,KAAK,EAAEO,MAAM,GAAG;AAAE,CAAC,KACjDD,MAAM,GAAGC,MAAM,GAAG,CAAC,CAAC,GAAGD,MAAM,GAAGC,MAAM,GAAG,CAAC,GAAG,CAC/C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}