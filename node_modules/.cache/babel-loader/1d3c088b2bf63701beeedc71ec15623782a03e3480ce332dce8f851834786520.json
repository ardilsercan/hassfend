{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { property, state } from \"lit/decorators\";\nimport { computeLocalize } from \"../common/translations/localize\";\nimport { getLocalLanguage, getTranslation } from \"../util/common-translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { computeDirectionStyles } from \"../common/util/compute_rtl\";\nconst empty = () => \"\";\nexport const litLocalizeLiteMixin = superClass => {\n  let LitLocalizeLiteClass = _decorate(null, function (_initialize, _superClass) {\n    class LitLocalizeLiteClass extends _superClass {\n      constructor(...args) {\n        super(...args);\n        _initialize(this);\n      }\n    }\n    return {\n      F: LitLocalizeLiteClass,\n      d: [{\n        kind: \"field\",\n        decorators: [property({\n          attribute: false\n        })],\n        key: \"localize\",\n        value() {\n          return empty;\n        }\n      }, {\n        kind: \"field\",\n        decorators: [property()],\n        key: \"language\",\n        value() {\n          return getLocalLanguage();\n        }\n      }, {\n        kind: \"field\",\n        decorators: [property()],\n        key: \"translationFragment\",\n        value: void 0\n      }, {\n        kind: \"field\",\n        decorators: [state()],\n        key: \"_resources\",\n        value: void 0\n      }, {\n        kind: \"method\",\n        key: \"connectedCallback\",\n        value:\n        // Initialized to empty will prevent undefined errors if called before connected to DOM.\n\n        // Use browser language setup before login.\n\n        function connectedCallback() {\n          _get(_getPrototypeOf(LitLocalizeLiteClass.prototype), \"connectedCallback\", this).call(this);\n          this._initializeLocalizeLite();\n        }\n      }, {\n        kind: \"method\",\n        key: \"firstUpdated\",\n        value: function firstUpdated(changedProps) {\n          _get(_getPrototypeOf(LitLocalizeLiteClass.prototype), \"firstUpdated\", this).call(this, changedProps);\n          computeDirectionStyles(translationMetadata.translations[this.language].isRTL, this);\n        }\n      }, {\n        kind: \"method\",\n        key: \"willUpdate\",\n        value: function willUpdate(changedProperties) {\n          _get(_getPrototypeOf(LitLocalizeLiteClass.prototype), \"willUpdate\", this).call(this, changedProperties);\n          if (changedProperties.get(\"language\")) {\n            this._resources = undefined;\n            this._initializeLocalizeLite();\n          }\n          if (changedProperties.get(\"translationFragment\")) {\n            this._initializeLocalizeLite();\n          }\n          if (this.language && this._resources && (changedProperties.has(\"language\") || changedProperties.has(\"_resources\"))) {\n            computeLocalize(this.constructor.prototype, this.language, this._resources).then(localize => {\n              this.localize = localize;\n            });\n          }\n        }\n      }, {\n        kind: \"method\",\n        key: \"_initializeLocalizeLite\",\n        value: async function _initializeLocalizeLite() {\n          if (this._resources) {\n            return;\n          }\n          if (!this.translationFragment) {\n            // In dev mode, we will issue a warning if after a second we are still\n            // not configured correctly.\n            if (__DEV__) {\n              setTimeout(() => !this._resources &&\n              // eslint-disable-next-line\n              console.error(\"Forgot to pass in resources or set translationFragment for\", this.nodeName), 1000);\n            }\n            return;\n          }\n          const {\n            data\n          } = await getTranslation(this.translationFragment, this.language);\n          this._resources = {\n            [this.language]: data\n          };\n        }\n      }]\n    };\n  }, superClass);\n  return LitLocalizeLiteClass;\n};","map":{"version":3,"names":["property","state","computeLocalize","getLocalLanguage","getTranslation","translationMetadata","computeDirectionStyles","empty","litLocalizeLiteMixin","superClass","LitLocalizeLiteClass","_decorate","_initialize","_superClass","constructor","args","F","d","kind","decorators","attribute","key","value","connectedCallback","_get","_getPrototypeOf","prototype","call","_initializeLocalizeLite","firstUpdated","changedProps","translations","language","isRTL","willUpdate","changedProperties","get","_resources","undefined","has","then","localize","translationFragment","__DEV__","setTimeout","console","error","nodeName","data"],"sources":["/workspaces/frontend/src/mixins/lit-localize-lite-mixin.ts"],"sourcesContent":["import { LitElement, PropertyValues } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { computeLocalize, LocalizeFunc } from \"../common/translations/localize\";\nimport { Constructor, Resources } from \"../types\";\nimport { getLocalLanguage, getTranslation } from \"../util/common-translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { computeDirectionStyles } from \"../common/util/compute_rtl\";\n\nconst empty = () => \"\";\n\nexport const litLocalizeLiteMixin = <T extends Constructor<LitElement>>(\n  superClass: T\n) => {\n  class LitLocalizeLiteClass extends superClass {\n    // Initialized to empty will prevent undefined errors if called before connected to DOM.\n    @property({ attribute: false }) public localize: LocalizeFunc = empty;\n\n    // Use browser language setup before login.\n    @property() public language?: string = getLocalLanguage();\n\n    @property() public translationFragment?: string;\n\n    @state() private _resources?: Resources;\n\n    public connectedCallback(): void {\n      super.connectedCallback();\n      this._initializeLocalizeLite();\n    }\n\n    protected firstUpdated(changedProps: PropertyValues) {\n      super.firstUpdated(changedProps);\n      computeDirectionStyles(\n        translationMetadata.translations[this.language!].isRTL,\n        this\n      );\n    }\n\n    protected willUpdate(changedProperties: PropertyValues) {\n      super.willUpdate(changedProperties);\n      if (changedProperties.get(\"language\")) {\n        this._resources = undefined;\n        this._initializeLocalizeLite();\n      }\n\n      if (changedProperties.get(\"translationFragment\")) {\n        this._initializeLocalizeLite();\n      }\n\n      if (\n        this.language &&\n        this._resources &&\n        (changedProperties.has(\"language\") ||\n          changedProperties.has(\"_resources\"))\n      ) {\n        computeLocalize(\n          this.constructor.prototype,\n          this.language,\n          this._resources\n        ).then((localize) => {\n          this.localize = localize;\n        });\n      }\n    }\n\n    protected async _initializeLocalizeLite() {\n      if (this._resources) {\n        return;\n      }\n\n      if (!this.translationFragment) {\n        // In dev mode, we will issue a warning if after a second we are still\n        // not configured correctly.\n        if (__DEV__) {\n          setTimeout(\n            () =>\n              !this._resources &&\n              // eslint-disable-next-line\n              console.error(\n                \"Forgot to pass in resources or set translationFragment for\",\n                this.nodeName\n              ),\n            1000\n          );\n        }\n        return;\n      }\n\n      const { data } = await getTranslation(\n        this.translationFragment!,\n        this.language!\n      );\n      this._resources = {\n        [this.language!]: data,\n      };\n    }\n  }\n  return LitLocalizeLiteClass;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}