{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nvar mdiClose = \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-dialog-header\";\nimport \"../../../../components/ha-icon-button-toggle\";\nimport { formatTempColor, LightColorMode, lightSupportsColor, lightSupportsColorMode } from \"../../../../data/light\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport \"./light-color-rgb-picker\";\nimport \"./light-color-temp-picker\";\nvar DialogLightColorFavorite = _decorate([customElement(\"dialog-light-color-favorite\")], function (_initialize, _LitElement) {\n  var DialogLightColorFavorite = /*#__PURE__*/function (_LitElement2) {\n    _inherits(DialogLightColorFavorite, _LitElement2);\n    function DialogLightColorFavorite() {\n      var _this;\n      _classCallCheck(this, DialogLightColorFavorite);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, DialogLightColorFavorite, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(DialogLightColorFavorite);\n  }(_LitElement);\n  return {\n    F: DialogLightColorFavorite,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_dialogParams\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entry\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_color\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_mode\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_modes\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_currentValue\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"_colorHovered\",\n      value: function _colorHovered(ev) {\n        if (ev.detail && \"color_temp_kelvin\" in ev.detail) {\n          this._currentValue = formatTempColor(ev.detail.color_temp_kelvin);\n        } else {\n          this._currentValue = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function () {\n        var _showDialog = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(dialogParams) {\n          var _dialogParams$initial;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                this._entry = dialogParams.entry;\n                this._dialogParams = dialogParams;\n                this._color = (_dialogParams$initial = dialogParams.initialColor) !== null && _dialogParams$initial !== void 0 ? _dialogParams$initial : this._computeCurrentColor();\n                this._updateModes();\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function showDialog(_x) {\n          return _showDialog.apply(this, arguments);\n        }\n        return showDialog;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._dialogParams = undefined;\n        this._entry = undefined;\n        this._color = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateModes\",\n      value: function _updateModes() {\n        var supportsTemp = lightSupportsColorMode(this.stateObj, LightColorMode.COLOR_TEMP);\n        var supportsColor = lightSupportsColor(this.stateObj);\n        var modes = [];\n        if (supportsColor) {\n          modes.push(\"color\");\n        }\n        if (supportsTemp) {\n          modes.push(\"color_temp\");\n        }\n        this._modes = modes;\n        if (this._color) {\n          this._mode = \"color_temp_kelvin\" in this._color ? \"color_temp\" : \"color\";\n        } else {\n          this._mode = this._modes[0];\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeCurrentColor\",\n      value: function _computeCurrentColor() {\n        var attributes = this.stateObj.attributes;\n        var color_mode = attributes.color_mode;\n        var currentColor;\n        if (color_mode === LightColorMode.XY) {\n          // XY color not supported for favorites. Try to grab the hs or rgb instead.\n          if (attributes.hs_color) {\n            currentColor = {\n              hs_color: attributes.hs_color\n            };\n          } else if (attributes.rgb_color) {\n            currentColor = {\n              rgb_color: attributes.rgb_color\n            };\n          }\n        } else if (color_mode === LightColorMode.COLOR_TEMP && attributes.color_temp_kelvin) {\n          currentColor = {\n            color_temp_kelvin: attributes.color_temp_kelvin\n          };\n        } else if (attributes[color_mode + \"_color\"]) {\n          currentColor = _defineProperty({}, color_mode + \"_color\", attributes[color_mode + \"_color\"]);\n        }\n        return currentColor;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_colorChanged\",\n      value: function _colorChanged(ev) {\n        this._color = ev.detail;\n      }\n    }, {\n      kind: \"get\",\n      key: \"stateObj\",\n      value: function stateObj() {\n        return this._entry && this.hass.states[this._entry.entity_id];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_cancel\",\n      value: function () {\n        var _cancel2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this$_dialogParams, _this$_dialogParams$c;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                (_this$_dialogParams = this._dialogParams) === null || _this$_dialogParams === void 0 || (_this$_dialogParams$c = _this$_dialogParams.cancel) === null || _this$_dialogParams$c === void 0 || _this$_dialogParams$c.call(_this$_dialogParams);\n                this.closeDialog();\n              case 2:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _cancel() {\n          return _cancel2.apply(this, arguments);\n        }\n        return _cancel;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: function () {\n        var _save2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var _this$_dialogParams2, _this$_dialogParams2$;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                if (this._color) {\n                  _context3.next = 3;\n                  break;\n                }\n                this._cancel();\n                return _context3.abrupt(\"return\");\n              case 3:\n                (_this$_dialogParams2 = this._dialogParams) === null || _this$_dialogParams2 === void 0 || (_this$_dialogParams2$ = _this$_dialogParams2.submit) === null || _this$_dialogParams2$ === void 0 || _this$_dialogParams2$.call(_this$_dialogParams2, this._color);\n                this.closeDialog();\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this);\n        }));\n        function _save() {\n          return _save2.apply(this, arguments);\n        }\n        return _save;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_modeChanged\",\n      value: function _modeChanged(ev) {\n        var newMode = ev.currentTarget.mode;\n        if (newMode === this._mode) {\n          return;\n        }\n        this._mode = newMode;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_dialogParams$t,\n          _this$_dialogParams3,\n          _this$_dialogParams4,\n          _this2 = this;\n        if (!this._entry || !this.stateObj) {\n          return nothing;\n        }\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-dialog\\n        open\\n        @closed=\", \"\\n        .heading=\", \"\\n        flexContent\\n      >\\n        <ha-dialog-header slot=\\\"heading\\\">\\n          <ha-icon-button\\n            slot=\\\"navigationIcon\\\"\\n            dialogAction=\\\"cancel\\\"\\n            .label=\", \"\\n            .path=\", \"\\n          ></ha-icon-button>\\n          <span slot=\\\"title\\\">\", \"</span>\\n        </ha-dialog-header>\\n        <div class=\\\"header\\\">\\n          <span class=\\\"value\\\">\", \"</span>\\n          \", \"\\n        </div>\\n\\n        <div class=\\\"content\\\">\\n          \", \"\\n          \", \"\\n        </div>\\n        <ha-button slot=\\\"secondaryAction\\\" dialogAction=\\\"cancel\\\">\\n          \", \"\\n        </ha-button>\\n        <ha-button\\n          slot=\\\"primaryAction\\\"\\n          @click=\", \"\\n          .disabled=\", \"\\n          >\", \"</ha-button\\n        >\\n      </ha-dialog>\\n    \"])), this._cancel, (_this$_dialogParams$t = (_this$_dialogParams3 = this._dialogParams) === null || _this$_dialogParams3 === void 0 ? void 0 : _this$_dialogParams3.title) !== null && _this$_dialogParams$t !== void 0 ? _this$_dialogParams$t : \"\", this.hass.localize(\"ui.common.close\"), mdiClose, (_this$_dialogParams4 = this._dialogParams) === null || _this$_dialogParams4 === void 0 ? void 0 : _this$_dialogParams4.title, this._currentValue, this._modes.length > 1 ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n                <div class=\\\"modes\\\">\\n                  \", \"\\n                </div>\\n              \"])), this._modes.map(function (value) {\n          return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                      <ha-icon-button-toggle\\n                        border-only\\n                        .selected=\", \"\\n                        .label=\", \"\\n                        .mode=\", \"\\n                        @click=\", \"\\n                      >\\n                        <span\\n                          class=\\\"wheel \", \"\\\"\\n                        ></span>\\n                      </ha-icon-button-toggle>\\n                    \"])), value === _this2._mode, _this2.hass.localize(\"ui.dialogs.more_info_control.light.color_picker.mode.\".concat(value)), value, _this2._modeChanged, classMap(_defineProperty({}, value, true)));\n        })) : nothing, this._mode === \"color_temp\" ? html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n                <light-color-temp-picker\\n                  .hass=\", \"\\n                  .stateObj=\", \"\\n                  @color-changed=\", \"\\n                  @color-hovered=\", \"\\n                >\\n                </light-color-temp-picker>\\n              \"])), this.hass, this.stateObj, this._colorChanged, this._colorHovered) : nothing, this._mode === \"color\" ? html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n                <light-color-rgb-picker\\n                  .hass=\", \"\\n                  .stateObj=\", \"\\n                  @color-changed=\", \"\\n                  @color-hovered=\", \"\\n                >\\n                </light-color-rgb-picker>\\n              \"])), this.hass, this.stateObj, this._colorChanged, this._colorHovered) : nothing, this.hass.localize(\"ui.common.cancel\"), this._save, !this._color, this.hass.localize(\"ui.common.save\"));\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyleDialog, css(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n        ha-dialog {\\n          --dialog-content-padding: 0;\\n        }\\n\\n        @media all and (max-width: 450px), all and (max-height: 500px) {\\n          ha-dialog {\\n            --dialog-surface-margin-top: 100px;\\n            --mdc-dialog-min-height: auto;\\n            --mdc-dialog-max-height: calc(100% - 100px);\\n            --ha-dialog-border-radius: var(\\n              --ha-dialog-bottom-sheet-border-radius,\\n              28px 28px 0 0\\n            );\\n          }\\n        }\\n\\n        .content {\\n          display: flex;\\n          flex-direction: column;\\n          align-items: center;\\n          justify-content: center;\\n          padding: 24px;\\n          flex: 1;\\n        }\\n        .modes {\\n          display: flex;\\n          flex-direction: row;\\n          justify-content: flex-end;\\n          padding: 0 24px;\\n        }\\n        .wheel {\\n          width: 30px;\\n          height: 30px;\\n          flex: none;\\n          border-radius: 15px;\\n        }\\n        .wheel.color {\\n          background-image: url(\\\"/static/images/color_wheel.png\\\");\\n          background-size: cover;\\n        }\\n        .wheel.color_temp {\\n          background: linear-gradient(\\n            0,\\n            rgb(166, 209, 255) 0%,\\n            white 50%,\\n            rgb(255, 160, 0) 100%\\n          );\\n        }\\n        .value {\\n          pointer-events: none;\\n          position: absolute;\\n          top: 0;\\n          left: 0;\\n          right: 0;\\n          margin: auto;\\n          font-style: normal;\\n          font-weight: 500;\\n          font-size: 16px;\\n          height: 48px;\\n          line-height: 48px;\\n          letter-spacing: 0.1px;\\n          text-align: center;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","classMap","fireEvent","formatTempColor","LightColorMode","lightSupportsColor","lightSupportsColorMode","haStyleDialog","DialogLightColorFavorite","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","_colorHovered","ev","detail","_currentValue","color_temp_kelvin","undefined","_showDialog","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dialogParams","_dialogParams$initial","wrap","_callee$","_context","prev","next","_entry","entry","_dialogParams","_color","initialColor","_computeCurrentColor","_updateModes","stop","showDialog","_x","apply","closeDialog","dialog","localName","supportsTemp","stateObj","COLOR_TEMP","supportsColor","modes","push","_modes","_mode","attributes","color_mode","currentColor","XY","hs_color","rgb_color","_defineProperty","_colorChanged","hass","states","entity_id","_cancel2","_callee2","_this$_dialogParams","_this$_dialogParams$c","_callee2$","_context2","cancel","call","_cancel","_save2","_callee3","_this$_dialogParams2","_this$_dialogParams2$","_callee3$","_context3","abrupt","submit","_save","_modeChanged","newMode","currentTarget","mode","render","_this$_dialogParams$t","_this$_dialogParams3","_this$_dialogParams4","_this2","_templateObject","_taggedTemplateLiteral","title","localize","mdiClose","_templateObject2","map","_templateObject3","_templateObject4","_templateObject5","static","styles","_templateObject6"],"sources":["/workspaces/frontend/src/dialogs/more-info/components/lights/dialog-light-color-favorite.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-dialog-header\";\nimport \"../../../../components/ha-icon-button-toggle\";\nimport type { EntityRegistryEntry } from \"../../../../data/entity_registry\";\nimport {\n  formatTempColor,\n  LightColor,\n  LightColorMode,\n  LightEntity,\n  lightSupportsColor,\n  lightSupportsColorMode,\n} from \"../../../../data/light\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./light-color-rgb-picker\";\nimport \"./light-color-temp-picker\";\nimport type { LightColorFavoriteDialogParams } from \"./show-dialog-light-color-favorite\";\n\nexport type LightPickerMode = \"color_temp\" | \"color\";\n\n@customElement(\"dialog-light-color-favorite\")\nclass DialogLightColorFavorite extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() _dialogParams?: LightColorFavoriteDialogParams;\n\n  @state() _entry?: EntityRegistryEntry;\n\n  @state() _color?: LightColor;\n\n  @state() private _mode?: LightPickerMode;\n\n  @state() private _modes: LightPickerMode[] = [];\n\n  @state() private _currentValue?: string;\n\n  private _colorHovered(ev: CustomEvent<HASSDomEvents[\"color-hovered\"]>) {\n    if (ev.detail && \"color_temp_kelvin\" in ev.detail) {\n      this._currentValue = formatTempColor(ev.detail.color_temp_kelvin);\n    } else {\n      this._currentValue = undefined;\n    }\n  }\n\n  public async showDialog(\n    dialogParams: LightColorFavoriteDialogParams\n  ): Promise<void> {\n    this._entry = dialogParams.entry;\n    this._dialogParams = dialogParams;\n    this._color = dialogParams.initialColor ?? this._computeCurrentColor();\n    this._updateModes();\n  }\n\n  public closeDialog(): void {\n    this._dialogParams = undefined;\n    this._entry = undefined;\n    this._color = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private _updateModes() {\n    const supportsTemp = lightSupportsColorMode(\n      this.stateObj!,\n      LightColorMode.COLOR_TEMP\n    );\n\n    const supportsColor = lightSupportsColor(this.stateObj!);\n\n    const modes: LightPickerMode[] = [];\n    if (supportsColor) {\n      modes.push(\"color\");\n    }\n    if (supportsTemp) {\n      modes.push(\"color_temp\");\n    }\n\n    this._modes = modes;\n\n    if (this._color) {\n      this._mode = \"color_temp_kelvin\" in this._color ? \"color_temp\" : \"color\";\n    } else {\n      this._mode = this._modes[0];\n    }\n  }\n\n  private _computeCurrentColor() {\n    const attributes = this.stateObj!.attributes;\n    const color_mode = attributes.color_mode;\n\n    let currentColor: LightColor | undefined;\n    if (color_mode === LightColorMode.XY) {\n      // XY color not supported for favorites. Try to grab the hs or rgb instead.\n      if (attributes.hs_color) {\n        currentColor = { hs_color: attributes.hs_color };\n      } else if (attributes.rgb_color) {\n        currentColor = { rgb_color: attributes.rgb_color };\n      }\n    } else if (\n      color_mode === LightColorMode.COLOR_TEMP &&\n      attributes.color_temp_kelvin\n    ) {\n      currentColor = {\n        color_temp_kelvin: attributes.color_temp_kelvin,\n      };\n    } else if (attributes[color_mode + \"_color\"]) {\n      currentColor = {\n        [color_mode + \"_color\"]: attributes[color_mode + \"_color\"],\n      } as LightColor;\n    }\n\n    return currentColor;\n  }\n\n  private _colorChanged(ev: CustomEvent) {\n    this._color = ev.detail;\n  }\n\n  get stateObj() {\n    return (\n      this._entry &&\n      (this.hass.states[this._entry.entity_id] as LightEntity | undefined)\n    );\n  }\n\n  private async _cancel() {\n    this._dialogParams?.cancel?.();\n    this.closeDialog();\n  }\n\n  private async _save() {\n    if (!this._color) {\n      this._cancel();\n      return;\n    }\n    this._dialogParams?.submit?.(this._color);\n    this.closeDialog();\n  }\n\n  private _modeChanged(ev): void {\n    const newMode = ev.currentTarget.mode;\n    if (newMode === this._mode) {\n      return;\n    }\n    this._mode = newMode;\n  }\n\n  protected render() {\n    if (!this._entry || !this.stateObj) {\n      return nothing;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this._cancel}\n        .heading=${this._dialogParams?.title ?? \"\"}\n        flexContent\n      >\n        <ha-dialog-header slot=\"heading\">\n          <ha-icon-button\n            slot=\"navigationIcon\"\n            dialogAction=\"cancel\"\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n          <span slot=\"title\">${this._dialogParams?.title}</span>\n        </ha-dialog-header>\n        <div class=\"header\">\n          <span class=\"value\">${this._currentValue}</span>\n          ${this._modes.length > 1\n            ? html`\n                <div class=\"modes\">\n                  ${this._modes.map(\n                    (value) => html`\n                      <ha-icon-button-toggle\n                        border-only\n                        .selected=${value === this._mode}\n                        .label=${this.hass.localize(\n                          `ui.dialogs.more_info_control.light.color_picker.mode.${value}`\n                        )}\n                        .mode=${value}\n                        @click=${this._modeChanged}\n                      >\n                        <span\n                          class=\"wheel ${classMap({ [value]: true })}\"\n                        ></span>\n                      </ha-icon-button-toggle>\n                    `\n                  )}\n                </div>\n              `\n            : nothing}\n        </div>\n\n        <div class=\"content\">\n          ${this._mode === \"color_temp\"\n            ? html`\n                <light-color-temp-picker\n                  .hass=${this.hass}\n                  .stateObj=${this.stateObj}\n                  @color-changed=${this._colorChanged}\n                  @color-hovered=${this._colorHovered}\n                >\n                </light-color-temp-picker>\n              `\n            : nothing}\n          ${this._mode === \"color\"\n            ? html`\n                <light-color-rgb-picker\n                  .hass=${this.hass}\n                  .stateObj=${this.stateObj}\n                  @color-changed=${this._colorChanged}\n                  @color-hovered=${this._colorHovered}\n                >\n                </light-color-rgb-picker>\n              `\n            : nothing}\n        </div>\n        <ha-button slot=\"secondaryAction\" dialogAction=\"cancel\">\n          ${this.hass.localize(\"ui.common.cancel\")}\n        </ha-button>\n        <ha-button\n          slot=\"primaryAction\"\n          @click=${this._save}\n          .disabled=${!this._color}\n          >${this.hass.localize(\"ui.common.save\")}</ha-button\n        >\n      </ha-dialog>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          ha-dialog {\n            --dialog-surface-margin-top: 100px;\n            --mdc-dialog-min-height: auto;\n            --mdc-dialog-max-height: calc(100% - 100px);\n            --ha-dialog-border-radius: var(\n              --ha-dialog-bottom-sheet-border-radius,\n              28px 28px 0 0\n            );\n          }\n        }\n\n        .content {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: center;\n          padding: 24px;\n          flex: 1;\n        }\n        .modes {\n          display: flex;\n          flex-direction: row;\n          justify-content: flex-end;\n          padding: 0 24px;\n        }\n        .wheel {\n          width: 30px;\n          height: 30px;\n          flex: none;\n          border-radius: 15px;\n        }\n        .wheel.color {\n          background-image: url(\"/static/images/color_wheel.png\");\n          background-size: cover;\n        }\n        .wheel.color_temp {\n          background: linear-gradient(\n            0,\n            rgb(166, 209, 255) 0%,\n            white 50%,\n            rgb(255, 160, 0) 100%\n          );\n        }\n        .value {\n          pointer-events: none;\n          position: absolute;\n          top: 0;\n          left: 0;\n          right: 0;\n          margin: auto;\n          font-style: normal;\n          font-weight: 500;\n          font-size: 16px;\n          height: 48px;\n          line-height: 48px;\n          letter-spacing: 0.1px;\n          text-align: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-light-color-favorite\": DialogLightColorFavorite;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;AACA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,OAAO,kCAAkC;AACzC,OAAO,kCAAkC;AACzC,OAAO,yCAAyC;AAChD,OAAO,8CAA8C;AAErD,SACEC,eAAe,EAEfC,cAAc,EAEdC,kBAAkB,EAClBC,sBAAsB,QACjB,wBAAwB;AAC/B,SAASC,aAAa,QAAQ,8BAA8B;AAE5D,OAAO,0BAA0B;AACjC,OAAO,2BAA2B;AAAC,IAM7BC,wBAAwB,GAAAC,SAAA,EAD7BX,aAAa,CAAC,6BAA6B,CAAC,aAAAY,WAAA,EAAAC,WAAA;EAAA,IACvCH,wBAAwB,0BAAAI,YAAA;IAAAC,SAAA,CAAAL,wBAAA,EAAAI,YAAA;IAAA,SAAAJ,yBAAA;MAAA,IAAAM,KAAA;MAAAC,eAAA,OAAAP,wBAAA;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAQ,UAAA,OAAAd,wBAAA,KAAAe,MAAA,CAAAJ,IAAA;MAAAT,WAAA,CAAAc,sBAAA,CAAAV,KAAA;MAAA,OAAAA,KAAA;IAAA;IAAA,OAAAW,YAAA,CAAAjB,wBAAA;EAAA,EAAAG,WAAA;EAAA;IAAAe,CAAA,EAAxBlB,wBAAwB;IAAAmB,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAC3B9B,QAAQ,CAAC;QAAE+B,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9B7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEP7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEP7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEP7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEP7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAqC,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9C7B,KAAK,CAAC,CAAC;MAAA+B,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAER,SAAAC,cAAsBC,EAA+C,EAAE;QACrE,IAAIA,EAAE,CAACC,MAAM,IAAI,mBAAmB,IAAID,EAAE,CAACC,MAAM,EAAE;UACjD,IAAI,CAACC,aAAa,GAAGjC,eAAe,CAAC+B,EAAE,CAACC,MAAM,CAACE,iBAAiB,CAAC;QACnE,CAAC,MAAM;UACL,IAAI,CAACD,aAAa,GAAGE,SAAS;QAChC;MACF;IAAC;MAAAV,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAO,WAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QACEC,YAA4C;UAAA,IAAAC,qBAAA;UAAA,OAAAJ,mBAAA,GAAAK,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAE5C,IAAI,CAACC,MAAM,GAAGP,YAAY,CAACQ,KAAK;gBAChC,IAAI,CAACC,aAAa,GAAGT,YAAY;gBACjC,IAAI,CAACU,MAAM,IAAAT,qBAAA,GAAGD,YAAY,CAACW,YAAY,cAAAV,qBAAA,cAAAA,qBAAA,GAAI,IAAI,CAACW,oBAAoB,CAAC,CAAC;gBACtE,IAAI,CAACC,YAAY,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAAT,QAAA,CAAAU,IAAA;YAAA;UAAA,GAAAf,OAAA;QAAA,CACrB;QAAA,SAAAgB,WAAAC,EAAA;UAAA,OAAArB,WAAA,CAAAsB,KAAA,OAAA5C,SAAA;QAAA;QAAA,OAAA0C,UAAA;MAAA;IAAA;MAAA/B,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA8B,YAAA,EAA2B;QACzB,IAAI,CAACT,aAAa,GAAGf,SAAS;QAC9B,IAAI,CAACa,MAAM,GAAGb,SAAS;QACvB,IAAI,CAACgB,MAAM,GAAGhB,SAAS;QACvBpC,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE;UAAE6D,MAAM,EAAE,IAAI,CAACC;QAAU,CAAC,CAAC;MAC9D;IAAC;MAAApC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAyB,aAAA,EAAuB;QACrB,IAAMQ,YAAY,GAAG3D,sBAAsB,CACzC,IAAI,CAAC4D,QAAQ,EACb9D,cAAc,CAAC+D,UACjB,CAAC;QAED,IAAMC,aAAa,GAAG/D,kBAAkB,CAAC,IAAI,CAAC6D,QAAS,CAAC;QAExD,IAAMG,KAAwB,GAAG,EAAE;QACnC,IAAID,aAAa,EAAE;UACjBC,KAAK,CAACC,IAAI,CAAC,OAAO,CAAC;QACrB;QACA,IAAIL,YAAY,EAAE;UAChBI,KAAK,CAACC,IAAI,CAAC,YAAY,CAAC;QAC1B;QAEA,IAAI,CAACC,MAAM,GAAGF,KAAK;QAEnB,IAAI,IAAI,CAACf,MAAM,EAAE;UACf,IAAI,CAACkB,KAAK,GAAG,mBAAmB,IAAI,IAAI,CAAClB,MAAM,GAAG,YAAY,GAAG,OAAO;QAC1E,CAAC,MAAM;UACL,IAAI,CAACkB,KAAK,GAAG,IAAI,CAACD,MAAM,CAAC,CAAC,CAAC;QAC7B;MACF;IAAC;MAAA3C,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwB,qBAAA,EAA+B;QAC7B,IAAMiB,UAAU,GAAG,IAAI,CAACP,QAAQ,CAAEO,UAAU;QAC5C,IAAMC,UAAU,GAAGD,UAAU,CAACC,UAAU;QAExC,IAAIC,YAAoC;QACxC,IAAID,UAAU,KAAKtE,cAAc,CAACwE,EAAE,EAAE;UACpC;UACA,IAAIH,UAAU,CAACI,QAAQ,EAAE;YACvBF,YAAY,GAAG;cAAEE,QAAQ,EAAEJ,UAAU,CAACI;YAAS,CAAC;UAClD,CAAC,MAAM,IAAIJ,UAAU,CAACK,SAAS,EAAE;YAC/BH,YAAY,GAAG;cAAEG,SAAS,EAAEL,UAAU,CAACK;YAAU,CAAC;UACpD;QACF,CAAC,MAAM,IACLJ,UAAU,KAAKtE,cAAc,CAAC+D,UAAU,IACxCM,UAAU,CAACpC,iBAAiB,EAC5B;UACAsC,YAAY,GAAG;YACbtC,iBAAiB,EAAEoC,UAAU,CAACpC;UAChC,CAAC;QACH,CAAC,MAAM,IAAIoC,UAAU,CAACC,UAAU,GAAG,QAAQ,CAAC,EAAE;UAC5CC,YAAY,GAAAI,eAAA,KACTL,UAAU,GAAG,QAAQ,EAAGD,UAAU,CAACC,UAAU,GAAG,QAAQ,CAAC,CAC7C;QACjB;QAEA,OAAOC,YAAY;MACrB;IAAC;MAAA/C,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAgD,cAAsB9C,EAAe,EAAE;QACrC,IAAI,CAACoB,MAAM,GAAGpB,EAAE,CAACC,MAAM;MACzB;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAkC,SAAA,EAAe;QACb,OACE,IAAI,CAACf,MAAM,IACV,IAAI,CAAC8B,IAAI,CAACC,MAAM,CAAC,IAAI,CAAC/B,MAAM,CAACgC,SAAS,CAA6B;MAExE;IAAC;MAAAvD,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAoD,QAAA,GAAA5C,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA2C,SAAA;UAAA,IAAAC,mBAAA,EAAAC,qBAAA;UAAA,OAAA9C,mBAAA,GAAAK,IAAA,UAAA0C,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAxC,IAAA,GAAAwC,SAAA,CAAAvC,IAAA;cAAA;gBACE,CAAAoC,mBAAA,OAAI,CAACjC,aAAa,cAAAiC,mBAAA,gBAAAC,qBAAA,GAAlBD,mBAAA,CAAoBI,MAAM,cAAAH,qBAAA,eAA1BA,qBAAA,CAAAI,IAAA,CAAAL,mBAA6B,CAAC;gBAC9B,IAAI,CAACxB,WAAW,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAA2B,SAAA,CAAA/B,IAAA;YAAA;UAAA,GAAA2B,QAAA;QAAA,CACpB;QAAA,SAAAO,QAAA;UAAA,OAAAR,QAAA,CAAAvB,KAAA,OAAA5C,SAAA;QAAA;QAAA,OAAA2E,OAAA;MAAA;IAAA;MAAAhE,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAA6D,MAAA,GAAArD,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAoD,SAAA;UAAA,IAAAC,oBAAA,EAAAC,qBAAA;UAAA,OAAAvD,mBAAA,GAAAK,IAAA,UAAAmD,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAjD,IAAA,GAAAiD,SAAA,CAAAhD,IAAA;cAAA;gBAAA,IACO,IAAI,CAACI,MAAM;kBAAA4C,SAAA,CAAAhD,IAAA;kBAAA;gBAAA;gBACd,IAAI,CAAC0C,OAAO,CAAC,CAAC;gBAAC,OAAAM,SAAA,CAAAC,MAAA;cAAA;gBAGjB,CAAAJ,oBAAA,OAAI,CAAC1C,aAAa,cAAA0C,oBAAA,gBAAAC,qBAAA,GAAlBD,oBAAA,CAAoBK,MAAM,cAAAJ,qBAAA,eAA1BA,qBAAA,CAAAL,IAAA,CAAAI,oBAAA,EAA6B,IAAI,CAACzC,MAAM,CAAC;gBACzC,IAAI,CAACQ,WAAW,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAAoC,SAAA,CAAAxC,IAAA;YAAA;UAAA,GAAAoC,QAAA;QAAA,CACpB;QAAA,SAAAO,MAAA;UAAA,OAAAR,MAAA,CAAAhC,KAAA,OAAA5C,SAAA;QAAA;QAAA,OAAAoF,KAAA;MAAA;IAAA;MAAAzE,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAsE,aAAqBpE,EAAE,EAAQ;QAC7B,IAAMqE,OAAO,GAAGrE,EAAE,CAACsE,aAAa,CAACC,IAAI;QACrC,IAAIF,OAAO,KAAK,IAAI,CAAC/B,KAAK,EAAE;UAC1B;QACF;QACA,IAAI,CAACA,KAAK,GAAG+B,OAAO;MACtB;IAAC;MAAA3E,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0E,OAAA,EAAmB;QAAA,IAAAC,qBAAA;UAAAC,oBAAA;UAAAC,oBAAA;UAAAC,MAAA;QACjB,IAAI,CAAC,IAAI,CAAC3D,MAAM,IAAI,CAAC,IAAI,CAACe,QAAQ,EAAE;UAClC,OAAOrE,OAAO;QAChB;QAEA,OAAOF,IAAI,CAAAoH,eAAA,KAAAA,eAAA,GAAAC,sBAAA,k3BAGG,IAAI,CAACpB,OAAO,GAAAe,qBAAA,IAAAC,oBAAA,GACX,IAAI,CAACvD,aAAa,cAAAuD,oBAAA,uBAAlBA,oBAAA,CAAoBK,KAAK,cAAAN,qBAAA,cAAAA,qBAAA,GAAI,EAAE,EAO7B,IAAI,CAAC1B,IAAI,CAACiC,QAAQ,CAAC,iBAAiB,CAAC,EACtCC,QAAQ,GAAAN,oBAAA,GAEG,IAAI,CAACxD,aAAa,cAAAwD,oBAAA,uBAAlBA,oBAAA,CAAoBI,KAAK,EAGxB,IAAI,CAAC7E,aAAa,EACtC,IAAI,CAACmC,MAAM,CAACrD,MAAM,GAAG,CAAC,GACpBvB,IAAI,CAAAyH,gBAAA,KAAAA,gBAAA,GAAAJ,sBAAA,gHAEE,IAAI,CAACzC,MAAM,CAAC8C,GAAG,CACf,UAACrF,KAAK;UAAA,OAAKrC,IAAI,CAAA2H,gBAAA,KAAAA,gBAAA,GAAAN,sBAAA,kcAGChF,KAAK,KAAK8E,MAAI,CAACtC,KAAK,EACvBsC,MAAI,CAAC7B,IAAI,CAACiC,QAAQ,yDAAA3F,MAAA,CAC+BS,KAAK,CAC/D,CAAC,EACOA,KAAK,EACJ8E,MAAI,CAACR,YAAY,EAGTrG,QAAQ,CAAA8E,eAAA,KAAI/C,KAAK,EAAG,IAAI,CAAE,CAAC;QAAA,CAIlD,CAAC,IAGLnC,OAAO,EAIT,IAAI,CAAC2E,KAAK,KAAK,YAAY,GACzB7E,IAAI,CAAA4H,gBAAA,KAAAA,gBAAA,GAAAP,sBAAA,gRAEQ,IAAI,CAAC/B,IAAI,EACL,IAAI,CAACf,QAAQ,EACR,IAAI,CAACc,aAAa,EAClB,IAAI,CAAC/C,aAAa,IAIvCpC,OAAO,EACT,IAAI,CAAC2E,KAAK,KAAK,OAAO,GACpB7E,IAAI,CAAA6H,gBAAA,KAAAA,gBAAA,GAAAR,sBAAA,8QAEQ,IAAI,CAAC/B,IAAI,EACL,IAAI,CAACf,QAAQ,EACR,IAAI,CAACc,aAAa,EAClB,IAAI,CAAC/C,aAAa,IAIvCpC,OAAO,EAGT,IAAI,CAACoF,IAAI,CAACiC,QAAQ,CAAC,kBAAkB,CAAC,EAI/B,IAAI,CAACb,KAAK,EACP,CAAC,IAAI,CAAC/C,MAAM,EACrB,IAAI,CAAC2B,IAAI,CAACiC,QAAQ,CAAC,gBAAgB,CAAC;MAI/C;IAAC;MAAAtF,IAAA;MAAA6F,MAAA;MAAA1F,GAAA;MAAAC,KAAA,EAED,SAAA0F,OAAA,EAAoC;QAClC,OAAO,CACLnH,aAAa,EACbb,GAAG,CAAAiI,gBAAA,KAAAA,gBAAA,GAAAX,sBAAA,qsDAiEJ;MACH;IAAC;EAAA;AAAA,GAvRoCpH,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}