{"ast":null,"code":"import { fetchWithAuth } from \"./fetch-with-auth\";\nexport const handleFetchPromise = async fetchPromise => {\n  let response;\n  try {\n    response = await fetchPromise;\n  } catch (err) {\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw {\n      error: \"Request error\",\n      status_code: undefined,\n      body: undefined\n    };\n  }\n  let body = null;\n  const contentType = response.headers.get(\"content-type\");\n  if (contentType && contentType.includes(\"application/json\")) {\n    try {\n      body = await response.json();\n    } catch (err) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw {\n        error: \"Unable to parse JSON response\",\n        status_code: err.status,\n        body: null\n      };\n    }\n  } else {\n    body = await response.text();\n  }\n  if (!response.ok) {\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw {\n      error: `Response error: ${response.status}`,\n      status_code: response.status,\n      body\n    };\n  }\n  return body;\n};\nexport default async function hassCallApi(auth, method, path, parameters, headers) {\n  const url = `${auth.data.hassUrl}/api/${path}`;\n  const init = {\n    method,\n    headers: headers || {}\n  };\n  if (parameters) {\n    // @ts-ignore\n    init.headers[\"Content-Type\"] = \"application/json;charset=UTF-8\";\n    init.body = JSON.stringify(parameters);\n  }\n  return handleFetchPromise(fetchWithAuth(auth, url, init));\n}","map":{"version":3,"names":["fetchWithAuth","handleFetchPromise","fetchPromise","response","err","error","status_code","undefined","body","contentType","headers","get","includes","json","status","text","ok","hassCallApi","auth","method","path","parameters","url","data","hassUrl","init","JSON","stringify"],"sources":["/Users/sercanardil/Desktop/frontend/src/util/hass-call-api.ts"],"sourcesContent":["import { Auth } from \"home-assistant-js-websocket\";\nimport { fetchWithAuth } from \"./fetch-with-auth\";\n\nexport const handleFetchPromise = async <T>(\n  fetchPromise: Promise<Response>\n): Promise<T> => {\n  let response;\n\n  try {\n    response = await fetchPromise;\n  } catch (err: any) {\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw {\n      error: \"Request error\",\n      status_code: undefined,\n      body: undefined,\n    };\n  }\n\n  let body = null;\n\n  const contentType = response.headers.get(\"content-type\");\n\n  if (contentType && contentType.includes(\"application/json\")) {\n    try {\n      body = await response.json();\n    } catch (err: any) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw {\n        error: \"Unable to parse JSON response\",\n        status_code: err.status,\n        body: null,\n      };\n    }\n  } else {\n    body = await response.text();\n  }\n\n  if (!response.ok) {\n    // eslint-disable-next-line @typescript-eslint/no-throw-literal\n    throw {\n      error: `Response error: ${response.status}`,\n      status_code: response.status,\n      body,\n    };\n  }\n\n  return body as unknown as T;\n};\n\nexport default async function hassCallApi<T>(\n  auth: Auth,\n  method: string,\n  path: string,\n  parameters?: Record<string, unknown>,\n  headers?: Record<string, string>\n) {\n  const url = `${auth.data.hassUrl}/api/${path}`;\n\n  const init: RequestInit = {\n    method,\n    headers: headers || {},\n  };\n\n  if (parameters) {\n    // @ts-ignore\n    init.headers[\"Content-Type\"] = \"application/json;charset=UTF-8\";\n    init.body = JSON.stringify(parameters);\n  }\n\n  return handleFetchPromise<T>(fetchWithAuth(auth, url, init));\n}\n"],"mappings":"AACA,SAASA,aAAa,QAAQ,mBAAmB;AAEjD,OAAO,MAAMC,kBAAkB,GAAG,MAChCC,YAA+B,IAChB;EACf,IAAIC,QAAQ;EAEZ,IAAI;IACFA,QAAQ,GAAG,MAAMD,YAAY;EAC/B,CAAC,CAAC,OAAOE,GAAQ,EAAE;IACjB;IACA,MAAM;MACJC,KAAK,EAAE,eAAe;MACtBC,WAAW,EAAEC,SAAS;MACtBC,IAAI,EAAED;IACR,CAAC;EACH;EAEA,IAAIC,IAAI,GAAG,IAAI;EAEf,MAAMC,WAAW,GAAGN,QAAQ,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;EAExD,IAAIF,WAAW,IAAIA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3D,IAAI;MACFJ,IAAI,GAAG,MAAML,QAAQ,CAACU,IAAI,CAAC,CAAC;IAC9B,CAAC,CAAC,OAAOT,GAAQ,EAAE;MACjB;MACA,MAAM;QACJC,KAAK,EAAE,+BAA+B;QACtCC,WAAW,EAAEF,GAAG,CAACU,MAAM;QACvBN,IAAI,EAAE;MACR,CAAC;IACH;EACF,CAAC,MAAM;IACLA,IAAI,GAAG,MAAML,QAAQ,CAACY,IAAI,CAAC,CAAC;EAC9B;EAEA,IAAI,CAACZ,QAAQ,CAACa,EAAE,EAAE;IAChB;IACA,MAAM;MACJX,KAAK,EAAG,mBAAkBF,QAAQ,CAACW,MAAO,EAAC;MAC3CR,WAAW,EAAEH,QAAQ,CAACW,MAAM;MAC5BN;IACF,CAAC;EACH;EAEA,OAAOA,IAAI;AACb,CAAC;AAED,eAAe,eAAeS,WAAWA,CACvCC,IAAU,EACVC,MAAc,EACdC,IAAY,EACZC,UAAoC,EACpCX,OAAgC,EAChC;EACA,MAAMY,GAAG,GAAI,GAAEJ,IAAI,CAACK,IAAI,CAACC,OAAQ,QAAOJ,IAAK,EAAC;EAE9C,MAAMK,IAAiB,GAAG;IACxBN,MAAM;IACNT,OAAO,EAAEA,OAAO,IAAI,CAAC;EACvB,CAAC;EAED,IAAIW,UAAU,EAAE;IACd;IACAI,IAAI,CAACf,OAAO,CAAC,cAAc,CAAC,GAAG,gCAAgC;IAC/De,IAAI,CAACjB,IAAI,GAAGkB,IAAI,CAACC,SAAS,CAACN,UAAU,CAAC;EACxC;EAEA,OAAOpB,kBAAkB,CAAID,aAAa,CAACkB,IAAI,EAAEI,GAAG,EAAEG,IAAI,CAAC,CAAC;AAC9D"},"metadata":{},"sourceType":"module","externalDependencies":[]}