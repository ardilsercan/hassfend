{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { BRANCH_HEIGHT, SPACING } from \"./hat-graph-const\";\n/**\n * @attribute active\n * @attribute track\n */\nexport let HatGraphBranch = _decorate([customElement(\"hat-graph-branch\")], function (_initialize, _LitElement) {\n  class HatGraphBranch extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HatGraphBranch,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"selected\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"start\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"short\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_branches\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_totalWidth\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_maxHeight\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateBranches\",\n      value: function _updateBranches(ev) {\n        let total_width = 0;\n        const heights = [];\n        const branches = [];\n        ev.target.assignedElements().forEach(c => {\n          const width = c.clientWidth;\n          const height = c.clientHeight;\n          branches.push({\n            x: width / 2 + total_width,\n            height,\n            start: c.hasAttribute(\"graphStart\"),\n            end: c.hasAttribute(\"graphEnd\"),\n            track: c.hasAttribute(\"track\")\n          });\n          total_width += width;\n          heights.push(height);\n        });\n        this._totalWidth = total_width;\n        this._maxHeight = Math.max(...heights);\n        this._branches = branches.sort((a, b) => {\n          if (a.track && !b.track) {\n            return 1;\n          }\n          if (a.track && b.track) {\n            return 0;\n          }\n          return -1;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <slot name=\"head\"></slot>\n      ${!this.start ? svg`\n            <svg\n              id=\"top\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map(branch => branch.start ? \"\" : svg`\n                  <path\n                    class=${classMap({\n          track: branch.track\n        })}\n                    d=\"\n                      M ${this._totalWidth / 2} 0\n                      L ${branch.x} ${BRANCH_HEIGHT}\n                      \"/>\n                `)}\n            </svg>\n          ` : \"\"}\n      <div id=\"branches\">\n        <svg id=\"lines\" width=${this._totalWidth} height=${this._maxHeight}>\n          ${this._branches.map(branch => {\n          if (branch.end) return \"\";\n          return svg`\n                    <path\n                      class=${classMap({\n            track: branch.track\n          })}\n                      d=\"\n                        M ${branch.x} ${branch.height}\n                        v ${this._maxHeight - branch.height}\n                        \"/>\n                  `;\n        })}\n        </svg>\n        <slot @slotchange=${this._updateBranches}></slot>\n      </div>\n\n      ${!this.short ? svg`\n            <svg\n              id=\"bottom\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map(branch => {\n          if (branch.end) return \"\";\n          return svg`\n                  <path\n                    class=${classMap({\n            track: branch.track\n          })}\n                    d=\"\n                      M ${branch.x} 0\n                      V ${SPACING}\n                      L ${this._totalWidth / 2} ${BRANCH_HEIGHT + SPACING}\n                      \"/>\n                `;\n        })}\n            </svg>\n          ` : \"\"}\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      #branches {\n        position: relative;\n        display: flex;\n        flex-direction: row;\n        align-items: start;\n      }\n      ::slotted(*) {\n        z-index: 1;\n      }\n      ::slotted([slot=\"head\"]) {\n        margin-bottom: calc(var(--hat-graph-branch-height) / -2);\n      }\n      #lines {\n        position: absolute;\n      }\n      #top {\n        height: var(--hat-graph-branch-height);\n      }\n      #bottom {\n        height: calc(var(--hat-graph-branch-height) + var(--hat-graph-spacing));\n      }\n      path {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n      path.track {\n        stroke: var(--track-clr);\n      }\n      :host([disabled]) path {\n        stroke: var(--disabled-clr);\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","svg","customElement","property","state","classMap","BRANCH_HEIGHT","SPACING","HatGraphBranch","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Boolean","reflect","key","value","_updateBranches","ev","total_width","heights","branches","target","assignedElements","forEach","c","width","clientWidth","height","clientHeight","push","x","start","hasAttribute","end","track","_totalWidth","_maxHeight","Math","max","_branches","sort","a","b","render","map","branch","short","static","styles"],"sources":["/workspaces/frontend/src/components/trace/hat-graph-branch.ts"],"sourcesContent":["import { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { BRANCH_HEIGHT, SPACING } from \"./hat-graph-const\";\n\ninterface BranchConfig {\n  x: number;\n  height: number;\n  start: boolean;\n  end: boolean;\n  track: boolean;\n}\n\n/**\n * @attribute active\n * @attribute track\n */\n@customElement(\"hat-graph-branch\")\nexport class HatGraphBranch extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: Boolean }) selected = false;\n\n  @property({ type: Boolean }) start = false;\n\n  @property({ type: Boolean }) short = false;\n\n  @state() _branches: BranchConfig[] = [];\n\n  private _totalWidth = 0;\n\n  private _maxHeight = 0;\n\n  private _updateBranches(ev: Event) {\n    let total_width = 0;\n    const heights: number[] = [];\n    const branches: BranchConfig[] = [];\n    (ev.target as HTMLSlotElement).assignedElements().forEach((c) => {\n      const width = c.clientWidth;\n      const height = c.clientHeight;\n      branches.push({\n        x: width / 2 + total_width,\n        height,\n        start: c.hasAttribute(\"graphStart\"),\n        end: c.hasAttribute(\"graphEnd\"),\n        track: c.hasAttribute(\"track\"),\n      });\n      total_width += width;\n      heights.push(height);\n    });\n    this._totalWidth = total_width;\n    this._maxHeight = Math.max(...heights);\n    this._branches = branches.sort((a, b) => {\n      if (a.track && !b.track) {\n        return 1;\n      }\n      if (a.track && b.track) {\n        return 0;\n      }\n      return -1;\n    });\n  }\n\n  render() {\n    return html`\n      <slot name=\"head\"></slot>\n      ${!this.start\n        ? svg`\n            <svg\n              id=\"top\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) =>\n                branch.start\n                  ? \"\"\n                  : svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${this._totalWidth / 2} 0\n                      L ${branch.x} ${BRANCH_HEIGHT}\n                      \"/>\n                `\n              )}\n            </svg>\n          `\n        : \"\"}\n      <div id=\"branches\">\n        <svg id=\"lines\" width=${this._totalWidth} height=${this._maxHeight}>\n          ${this._branches.map((branch) => {\n            if (branch.end) return \"\";\n            return svg`\n                    <path\n                      class=${classMap({\n                        track: branch.track,\n                      })}\n                      d=\"\n                        M ${branch.x} ${branch.height}\n                        v ${this._maxHeight - branch.height}\n                        \"/>\n                  `;\n          })}\n        </svg>\n        <slot @slotchange=${this._updateBranches}></slot>\n      </div>\n\n      ${!this.short\n        ? svg`\n            <svg\n              id=\"bottom\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) => {\n                if (branch.end) return \"\";\n                return svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${branch.x} 0\n                      V ${SPACING}\n                      L ${this._totalWidth / 2} ${BRANCH_HEIGHT + SPACING}\n                      \"/>\n                `;\n              })}\n            </svg>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      #branches {\n        position: relative;\n        display: flex;\n        flex-direction: row;\n        align-items: start;\n      }\n      ::slotted(*) {\n        z-index: 1;\n      }\n      ::slotted([slot=\"head\"]) {\n        margin-bottom: calc(var(--hat-graph-branch-height) / -2);\n      }\n      #lines {\n        position: absolute;\n      }\n      #top {\n        height: var(--hat-graph-branch-height);\n      }\n      #bottom {\n        height: calc(var(--hat-graph-branch-height) + var(--hat-graph-spacing));\n      }\n      path {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n      path.track {\n        stroke: var(--track-clr);\n      }\n      :host([disabled]) path {\n        stroke: var(--disabled-clr);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-graph-branch\": HatGraphBranch;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}