{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { DEFAULT_VIEW_LAYOUT, PANEL_VIEW_LAYOUT, SIDEBAR_VIEW_LAYOUT } from \"../../views/const\";\nexport let HuiViewEditor = _decorate([customElement(\"hui-view-editor\")], function (_initialize, _LitElement) {\n  class HuiViewEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiViewEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isNew\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_suggestedPath\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne(localize => [{\n          name: \"title\",\n          selector: {\n            text: {}\n          }\n        }, {\n          name: \"icon\",\n          selector: {\n            icon: {}\n          }\n        }, {\n          name: \"path\",\n          selector: {\n            text: {}\n          }\n        }, {\n          name: \"theme\",\n          selector: {\n            theme: {}\n          }\n        }, {\n          name: \"type\",\n          selector: {\n            select: {\n              options: [DEFAULT_VIEW_LAYOUT, SIDEBAR_VIEW_LAYOUT, PANEL_VIEW_LAYOUT].map(type => ({\n                value: type,\n                label: localize(`ui.panel.lovelace.editor.edit_view.types.${type}`)\n              }))\n            }\n          }\n        }, {\n          name: \"subview\",\n          selector: {\n            boolean: {}\n          }\n        }]);\n      }\n    }, {\n      kind: \"set\",\n      key: \"config\",\n      value: function config(_config) {\n        this._config = _config;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_type\",\n      value: function _type() {\n        if (!this._config) {\n          return DEFAULT_VIEW_LAYOUT;\n        }\n        return this._config.panel ? PANEL_VIEW_LAYOUT : this._config.type || DEFAULT_VIEW_LAYOUT;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass) {\n          return nothing;\n        }\n        const schema = this._schema(this.hass.localize);\n        const data = {\n          ...this._config,\n          type: this._type\n        };\n        return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabel}\n        .computeHelper=${this._computeHelper}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const config = ev.detail.value;\n        if (config.type === \"masonry\") {\n          delete config.type;\n        }\n        if (this.isNew && !this._suggestedPath && config.title && (!this._config.path || config.path === slugify(this._config.title || \"\", \"-\"))) {\n          config.path = slugify(config.title, \"-\");\n        }\n        fireEvent(this, \"view-config-changed\", {\n          config\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabel\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"path\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.url\");\n            case \"type\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.type\");\n            case \"subview\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.subview\");\n            default:\n              return this.hass.localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeHelper\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"subview\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.subview_helper\");\n            default:\n              return undefined;\n          }\n        };\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","nothing","customElement","property","state","memoizeOne","fireEvent","slugify","DEFAULT_VIEW_LAYOUT","PANEL_VIEW_LAYOUT","SIDEBAR_VIEW_LAYOUT","HuiViewEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","localize","name","selector","text","icon","theme","select","options","map","label","boolean","config","_config","_type","panel","render","hass","schema","_schema","data","_computeLabel","_computeHelper","_valueChanged","ev","detail","isNew","_suggestedPath","title","path","undefined"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/view-editor/hui-view-editor.ts"],"sourcesContent":["import { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { slugify } from \"../../../../common/string/slugify\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport {\n  DEFAULT_VIEW_LAYOUT,\n  PANEL_VIEW_LAYOUT,\n  SIDEBAR_VIEW_LAYOUT,\n} from \"../../views/const\";\nimport { LovelaceViewConfig } from \"../../../../data/lovelace/config/view\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-config-changed\": {\n      config: LovelaceViewConfig;\n    };\n  }\n}\n\n@customElement(\"hui-view-editor\")\nexport class HuiViewEditor extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isNew = false;\n\n  @state() private _config!: LovelaceViewConfig;\n\n  private _suggestedPath = false;\n\n  private _schema = memoizeOne(\n    (localize: LocalizeFunc) =>\n      [\n        { name: \"title\", selector: { text: {} } },\n        {\n          name: \"icon\",\n          selector: {\n            icon: {},\n          },\n        },\n        { name: \"path\", selector: { text: {} } },\n        { name: \"theme\", selector: { theme: {} } },\n        {\n          name: \"type\",\n          selector: {\n            select: {\n              options: (\n                [\n                  DEFAULT_VIEW_LAYOUT,\n                  SIDEBAR_VIEW_LAYOUT,\n                  PANEL_VIEW_LAYOUT,\n                ] as const\n              ).map((type) => ({\n                value: type,\n                label: localize(\n                  `ui.panel.lovelace.editor.edit_view.types.${type}`\n                ),\n              })),\n            },\n          },\n        },\n        {\n          name: \"subview\",\n          selector: {\n            boolean: {},\n          },\n        },\n      ] as const\n  );\n\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n  }\n\n  get _type(): string {\n    if (!this._config) {\n      return DEFAULT_VIEW_LAYOUT;\n    }\n    return this._config.panel\n      ? PANEL_VIEW_LAYOUT\n      : this._config.type || DEFAULT_VIEW_LAYOUT;\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const schema = this._schema(this.hass.localize);\n\n    const data = {\n      ...this._config,\n      type: this._type,\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabel}\n        .computeHelper=${this._computeHelper}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value as LovelaceViewConfig;\n\n    if (config.type === \"masonry\") {\n      delete config.type;\n    }\n\n    if (\n      this.isNew &&\n      !this._suggestedPath &&\n      config.title &&\n      (!this._config.path ||\n        config.path === slugify(this._config.title || \"\", \"-\"))\n    ) {\n      config.path = slugify(config.title, \"-\");\n    }\n\n    fireEvent(this, \"view-config-changed\", { config });\n  }\n\n  private _computeLabel = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"path\":\n        return this.hass!.localize(\"ui.panel.lovelace.editor.card.generic.url\");\n      case \"type\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.type\");\n      case \"subview\":\n        return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.subview\");\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  private _computeHelper = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"subview\":\n        return this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_view.subview_helper\"\n        );\n      default:\n        return undefined;\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-editor\": HuiViewEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}