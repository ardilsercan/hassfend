{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.replace.js\";\n// Handle 16x9, 16:9, 1.78x1, 1.78:1, 1.78\n// Ignore everything else\nvar parseOrThrow = function parseOrThrow(num) {\n  var parsed = parseFloat(num);\n  if (isNaN(parsed)) {\n    throw new Error(\"\".concat(num, \" is not a number\"));\n  }\n  return parsed;\n};\nexport default function parseAspectRatio(input) {\n  if (!input) {\n    return null;\n  }\n  try {\n    if (input.endsWith(\"%\")) {\n      return {\n        w: 100,\n        h: parseOrThrow(input.substr(0, input.length - 1))\n      };\n    }\n    var arr = input.replace(\":\", \"x\").split(\"x\");\n    if (arr.length === 0) {\n      return null;\n    }\n    return arr.length === 1 ? {\n      w: parseOrThrow(arr[0]),\n      h: 1\n    } : {\n      w: parseOrThrow(arr[0]),\n      h: parseOrThrow(arr[1])\n    };\n  } catch (err) {\n    // Ignore the error\n  }\n  return null;\n}","map":{"version":3,"names":["parseOrThrow","num","parsed","parseFloat","isNaN","Error","concat","parseAspectRatio","input","endsWith","w","h","substr","length","arr","replace","split","err"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/util/parse-aspect-ratio.ts"],"sourcesContent":["// Handle 16x9, 16:9, 1.78x1, 1.78:1, 1.78\n// Ignore everything else\nconst parseOrThrow = (num) => {\n  const parsed = parseFloat(num);\n  if (isNaN(parsed)) {\n    throw new Error(`${num} is not a number`);\n  }\n  return parsed;\n};\n\nexport default function parseAspectRatio(input: string) {\n  if (!input) {\n    return null;\n  }\n  try {\n    if (input.endsWith(\"%\")) {\n      return { w: 100, h: parseOrThrow(input.substr(0, input.length - 1)) };\n    }\n\n    const arr = input.replace(\":\", \"x\").split(\"x\");\n    if (arr.length === 0) {\n      return null;\n    }\n\n    return arr.length === 1\n      ? { w: parseOrThrow(arr[0]), h: 1 }\n      : { w: parseOrThrow(arr[0]), h: parseOrThrow(arr[1]) };\n  } catch (err: any) {\n    // Ignore the error\n  }\n  return null;\n}\n"],"mappings":";;;;;AAAA;AACA;AACA,IAAMA,YAAY,GAAG,SAAfA,YAAYA,CAAIC,GAAG,EAAK;EAC5B,IAAMC,MAAM,GAAGC,UAAU,CAACF,GAAG,CAAC;EAC9B,IAAIG,KAAK,CAACF,MAAM,CAAC,EAAE;IACjB,MAAM,IAAIG,KAAK,IAAAC,MAAA,CAAIL,GAAG,qBAAkB,CAAC;EAC3C;EACA,OAAOC,MAAM;AACf,CAAC;AAED,eAAe,SAASK,gBAAgBA,CAACC,KAAa,EAAE;EACtD,IAAI,CAACA,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EACA,IAAI;IACF,IAAIA,KAAK,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;MACvB,OAAO;QAAEC,CAAC,EAAE,GAAG;QAAEC,CAAC,EAAEX,YAAY,CAACQ,KAAK,CAACI,MAAM,CAAC,CAAC,EAAEJ,KAAK,CAACK,MAAM,GAAG,CAAC,CAAC;MAAE,CAAC;IACvE;IAEA,IAAMC,GAAG,GAAGN,KAAK,CAACO,OAAO,CAAC,GAAG,EAAE,GAAG,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IAC9C,IAAIF,GAAG,CAACD,MAAM,KAAK,CAAC,EAAE;MACpB,OAAO,IAAI;IACb;IAEA,OAAOC,GAAG,CAACD,MAAM,KAAK,CAAC,GACnB;MAAEH,CAAC,EAAEV,YAAY,CAACc,GAAG,CAAC,CAAC,CAAC,CAAC;MAAEH,CAAC,EAAE;IAAE,CAAC,GACjC;MAAED,CAAC,EAAEV,YAAY,CAACc,GAAG,CAAC,CAAC,CAAC,CAAC;MAAEH,CAAC,EAAEX,YAAY,CAACc,GAAG,CAAC,CAAC,CAAC;IAAE,CAAC;EAC1D,CAAC,CAAC,OAAOG,GAAQ,EAAE;IACjB;EAAA;EAEF,OAAO,IAAI;AACb"},"metadata":{},"sourceType":"module","externalDependencies":[]}