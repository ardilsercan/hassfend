{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport \"../../../../../components/ha-select\";\nimport { CONDITION_ICONS } from \"../../../../../data/condition\";\nimport \"../../condition/ha-automation-condition-editor\";\nexport let HaConditionAction = _decorate([customElement(\"ha-automation-action-condition\")], function (_initialize, _LitElement) {\n  class HaConditionAction extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaConditionAction,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"action\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"defaultConfig\",\n      value: function defaultConfig() {\n        return {\n          condition: \"state\"\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-select\n        fixedMenuPosition\n        .label=${this.hass.localize(\"ui.panel.config.automation.editor.conditions.type_select\")}\n        .disabled=${this.disabled}\n        .value=${this.action.condition}\n        naturalMenuWidth\n        @selected=${this._typeChanged}\n      >\n        ${this._processedTypes(this.hass.localize).map(([opt, label, icon]) => html`\n            <mwc-list-item .value=${opt} graphic=\"icon\">\n              ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n            ></mwc-list-item>\n          `)}\n      </ha-select>\n      <ha-automation-condition-editor\n        .condition=${this.action}\n        .disabled=${this.disabled}\n        .hass=${this.hass}\n        @value-changed=${this._conditionChanged}\n      ></ha-automation-condition-editor>\n    `;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_processedTypes\",\n      value() {\n        return memoizeOne(localize => Object.entries(CONDITION_ICONS).map(([condition, icon]) => [condition, localize(`ui.panel.config.automation.editor.conditions.type.${condition}.label`), icon]).sort((a, b) => stringCompare(a[1], b[1], this.hass.locale.language)));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_conditionChanged\",\n      value: function _conditionChanged(ev) {\n        ev.stopPropagation();\n        fireEvent(this, \"value-changed\", {\n          value: ev.detail.value\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_typeChanged\",\n      value: function _typeChanged(ev) {\n        const type = ev.target.value;\n        if (!type) {\n          return;\n        }\n        const elClass = customElements.get(`ha-automation-condition-${type}`);\n        if (type !== this.action.condition) {\n          fireEvent(this, \"value-changed\", {\n            value: {\n              condition: type,\n              ...elClass.defaultConfig\n            }\n          });\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-select {\n        margin-bottom: 24px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","memoizeOne","fireEvent","stringCompare","CONDITION_ICONS","HaConditionAction","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","static","defaultConfig","condition","render","hass","localize","disabled","action","_typeChanged","_processedTypes","map","opt","label","icon","_conditionChanged","Object","entries","sort","a","b","locale","language","ev","stopPropagation","detail","target","elClass","customElements","get","styles"],"sources":["/workspaces/frontend/src/panels/config/automation/action/types/ha-automation-action-condition.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport type { LocalizeFunc } from \"../../../../../common/translations/localize\";\nimport \"../../../../../components/ha-select\";\nimport type { HaSelect } from \"../../../../../components/ha-select\";\nimport type { Condition } from \"../../../../../data/automation\";\nimport { CONDITION_ICONS } from \"../../../../../data/condition\";\nimport { Entries, HomeAssistant } from \"../../../../../types\";\nimport \"../../condition/ha-automation-condition-editor\";\nimport type { ActionElement } from \"../ha-automation-action-row\";\n\n@customElement(\"ha-automation-action-condition\")\nexport class HaConditionAction extends LitElement implements ActionElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ attribute: false }) public action!: Condition;\n\n  public static get defaultConfig() {\n    return { condition: \"state\" };\n  }\n\n  protected render() {\n    return html`\n      <ha-select\n        fixedMenuPosition\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type_select\"\n        )}\n        .disabled=${this.disabled}\n        .value=${this.action.condition}\n        naturalMenuWidth\n        @selected=${this._typeChanged}\n      >\n        ${this._processedTypes(this.hass.localize).map(\n          ([opt, label, icon]) => html`\n            <mwc-list-item .value=${opt} graphic=\"icon\">\n              ${label}<ha-svg-icon slot=\"graphic\" .path=${icon}></ha-svg-icon\n            ></mwc-list-item>\n          `\n        )}\n      </ha-select>\n      <ha-automation-condition-editor\n        .condition=${this.action}\n        .disabled=${this.disabled}\n        .hass=${this.hass}\n        @value-changed=${this._conditionChanged}\n      ></ha-automation-condition-editor>\n    `;\n  }\n\n  private _processedTypes = memoizeOne(\n    (localize: LocalizeFunc): [string, string, string][] =>\n      (Object.entries(CONDITION_ICONS) as Entries<typeof CONDITION_ICONS>)\n        .map(\n          ([condition, icon]) =>\n            [\n              condition,\n              localize(\n                `ui.panel.config.automation.editor.conditions.type.${condition}.label`\n              ),\n              icon,\n            ] as [string, string, string]\n        )\n        .sort((a, b) => stringCompare(a[1], b[1], this.hass.locale.language))\n  );\n\n  private _conditionChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n\n    fireEvent(this, \"value-changed\", {\n      value: ev.detail.value,\n    });\n  }\n\n  private _typeChanged(ev: CustomEvent) {\n    const type = (ev.target as HaSelect).value;\n\n    if (!type) {\n      return;\n    }\n\n    const elClass = customElements.get(\n      `ha-automation-condition-${type}`\n    ) as CustomElementConstructor & {\n      defaultConfig: Omit<Condition, \"condition\">;\n    };\n\n    if (type !== this.action.condition) {\n      fireEvent(this, \"value-changed\", {\n        value: {\n          condition: type,\n          ...elClass.defaultConfig,\n        },\n      });\n    }\n  }\n\n  static get styles() {\n    return css`\n      ha-select {\n        margin-bottom: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-action-condition\": HaConditionAction;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}