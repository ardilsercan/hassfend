{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { ReactiveElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport { getEnergyPreferences } from \"../../../data/energy\";\nconst setupWizard = async () => {\n  await import(\"../cards/energy-setup-wizard-card\");\n  return {\n    type: \"panel\",\n    cards: [{\n      type: \"custom:energy-setup-wizard-card\"\n    }]\n  };\n};\nexport let EnergyViewStrategy = _decorate([customElement(\"energy-view-strategy\")], function (_initialize, _ReactiveElement) {\n  class EnergyViewStrategy extends _ReactiveElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: EnergyViewStrategy,\n    d: [{\n      kind: \"method\",\n      static: true,\n      key: \"generate\",\n      value: async function generate(_config, hass) {\n        const view = {\n          cards: []\n        };\n        let prefs;\n        try {\n          prefs = await getEnergyPreferences(hass);\n        } catch (err) {\n          if (err.code === \"not_found\") {\n            return setupWizard();\n          }\n          view.cards.push({\n            type: \"markdown\",\n            content: `An error occurred while fetching your energy preferences: ${err.message}.`\n          });\n          return view;\n        }\n        view.type = \"sidebar\";\n        const hasGrid = prefs.energy_sources.find(source => source.type === \"grid\");\n        const hasReturn = hasGrid && hasGrid.flow_to.length;\n        const hasSolar = prefs.energy_sources.some(source => source.type === \"solar\");\n        const hasGas = prefs.energy_sources.some(source => source.type === \"gas\");\n        const hasWater = prefs.energy_sources.some(source => source.type === \"water\");\n        view.cards.push({\n          type: \"energy-compare\",\n          collection_key: \"energy_dashboard\"\n        });\n\n        // Only include if we have a grid source.\n        if (hasGrid) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_usage_graph_title\"),\n            type: \"energy-usage-graph\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a solar source.\n        if (hasSolar) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_solar_graph_title\"),\n            type: \"energy-solar-graph\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a gas source.\n        if (hasGas) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_gas_graph_title\"),\n            type: \"energy-gas-graph\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a water source.\n        if (hasWater) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_water_graph_title\"),\n            type: \"energy-water-graph\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a grid.\n        if (hasGrid) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_distribution_title\"),\n            type: \"energy-distribution\",\n            view_layout: {\n              position: \"sidebar\"\n            },\n            collection_key: \"energy_dashboard\"\n          });\n        }\n        if (hasGrid || hasSolar) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_sources_table_title\"),\n            type: \"energy-sources-table\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a grid source & return.\n        if (hasReturn) {\n          view.cards.push({\n            type: \"energy-grid-neutrality-gauge\",\n            view_layout: {\n              position: \"sidebar\"\n            },\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a solar source.\n        if (hasSolar && hasReturn) {\n          view.cards.push({\n            type: \"energy-solar-consumed-gauge\",\n            view_layout: {\n              position: \"sidebar\"\n            },\n            collection_key: \"energy_dashboard\"\n          });\n          view.cards.push({\n            type: \"energy-self-sufficiency-gauge\",\n            view_layout: {\n              position: \"sidebar\"\n            },\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have a grid\n        if (hasGrid) {\n          view.cards.push({\n            type: \"energy-carbon-consumed-gauge\",\n            view_layout: {\n              position: \"sidebar\"\n            },\n            collection_key: \"energy_dashboard\"\n          });\n        }\n\n        // Only include if we have at least 1 device in the config.\n        if (prefs.device_consumption.length) {\n          view.cards.push({\n            title: hass.localize(\"ui.panel.energy.cards.energy_devices_graph_title\"),\n            type: \"energy-devices-graph\",\n            collection_key: \"energy_dashboard\"\n          });\n        }\n        return view;\n      }\n    }]\n  };\n}, ReactiveElement);","map":{"version":3,"names":["ReactiveElement","customElement","getEnergyPreferences","setupWizard","type","cards","EnergyViewStrategy","_decorate","_initialize","_ReactiveElement","constructor","args","F","d","kind","static","key","value","generate","_config","hass","view","prefs","err","code","push","content","message","hasGrid","energy_sources","find","source","hasReturn","flow_to","length","hasSolar","some","hasGas","hasWater","collection_key","title","localize","view_layout","position","device_consumption"],"sources":["/workspaces/frontend/src/panels/energy/strategies/energy-view-strategy.ts"],"sourcesContent":["import { ReactiveElement } from \"lit\";\nimport { customElement } from \"lit/decorators\";\nimport {\n  EnergyPreferences,\n  getEnergyPreferences,\n  GridSourceTypeEnergyPreference,\n} from \"../../../data/energy\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceViewConfig } from \"../../../data/lovelace/config/view\";\nimport { LovelaceStrategyConfig } from \"../../../data/lovelace/config/strategy\";\n\nconst setupWizard = async (): Promise<LovelaceViewConfig> => {\n  await import(\"../cards/energy-setup-wizard-card\");\n  return {\n    type: \"panel\",\n    cards: [\n      {\n        type: \"custom:energy-setup-wizard-card\",\n      },\n    ],\n  };\n};\n\n@customElement(\"energy-view-strategy\")\nexport class EnergyViewStrategy extends ReactiveElement {\n  static async generate(\n    _config: LovelaceStrategyConfig,\n    hass: HomeAssistant\n  ): Promise<LovelaceViewConfig> {\n    const view: LovelaceViewConfig = { cards: [] };\n\n    let prefs: EnergyPreferences;\n\n    try {\n      prefs = await getEnergyPreferences(hass);\n    } catch (err: any) {\n      if (err.code === \"not_found\") {\n        return setupWizard();\n      }\n      view.cards!.push({\n        type: \"markdown\",\n        content: `An error occurred while fetching your energy preferences: ${err.message}.`,\n      });\n      return view;\n    }\n\n    view.type = \"sidebar\";\n\n    const hasGrid = prefs.energy_sources.find(\n      (source) => source.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference;\n    const hasReturn = hasGrid && hasGrid.flow_to.length;\n    const hasSolar = prefs.energy_sources.some(\n      (source) => source.type === \"solar\"\n    );\n    const hasGas = prefs.energy_sources.some((source) => source.type === \"gas\");\n\n    const hasWater = prefs.energy_sources.some(\n      (source) => source.type === \"water\"\n    );\n\n    view.cards!.push({\n      type: \"energy-compare\",\n      collection_key: \"energy_dashboard\",\n    });\n\n    // Only include if we have a grid source.\n    if (hasGrid) {\n      view.cards!.push({\n        title: hass.localize(\"ui.panel.energy.cards.energy_usage_graph_title\"),\n        type: \"energy-usage-graph\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a solar source.\n    if (hasSolar) {\n      view.cards!.push({\n        title: hass.localize(\"ui.panel.energy.cards.energy_solar_graph_title\"),\n        type: \"energy-solar-graph\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a gas source.\n    if (hasGas) {\n      view.cards!.push({\n        title: hass.localize(\"ui.panel.energy.cards.energy_gas_graph_title\"),\n        type: \"energy-gas-graph\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a water source.\n    if (hasWater) {\n      view.cards!.push({\n        title: hass.localize(\"ui.panel.energy.cards.energy_water_graph_title\"),\n        type: \"energy-water-graph\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a grid.\n    if (hasGrid) {\n      view.cards!.push({\n        title: hass.localize(\"ui.panel.energy.cards.energy_distribution_title\"),\n        type: \"energy-distribution\",\n        view_layout: { position: \"sidebar\" },\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    if (hasGrid || hasSolar) {\n      view.cards!.push({\n        title: hass.localize(\n          \"ui.panel.energy.cards.energy_sources_table_title\"\n        ),\n        type: \"energy-sources-table\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a grid source & return.\n    if (hasReturn) {\n      view.cards!.push({\n        type: \"energy-grid-neutrality-gauge\",\n        view_layout: { position: \"sidebar\" },\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a solar source.\n    if (hasSolar && hasReturn) {\n      view.cards!.push({\n        type: \"energy-solar-consumed-gauge\",\n        view_layout: { position: \"sidebar\" },\n        collection_key: \"energy_dashboard\",\n      });\n      view.cards!.push({\n        type: \"energy-self-sufficiency-gauge\",\n        view_layout: { position: \"sidebar\" },\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have a grid\n    if (hasGrid) {\n      view.cards!.push({\n        type: \"energy-carbon-consumed-gauge\",\n        view_layout: { position: \"sidebar\" },\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    // Only include if we have at least 1 device in the config.\n    if (prefs.device_consumption.length) {\n      view.cards!.push({\n        title: hass.localize(\n          \"ui.panel.energy.cards.energy_devices_graph_title\"\n        ),\n        type: \"energy-devices-graph\",\n        collection_key: \"energy_dashboard\",\n      });\n    }\n\n    return view;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"energy-view-strategy\": EnergyViewStrategy;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}