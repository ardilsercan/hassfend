{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport { MDCFoundation } from '@material/base/foundation.js';\nimport { normalizeKey } from '@material/dom/keyboard.js';\nimport { numbers, strings } from '@material/list/constants.js';\nvar integerSort = function integerSort(a, b) {\n  return a - b;\n};\nvar findIndexDiff = function findIndexDiff(oldSet, newSet) {\n  var oldArr = Array.from(oldSet);\n  var newArr = Array.from(newSet);\n  var diff = {\n    added: [],\n    removed: []\n  };\n  var oldSorted = oldArr.sort(integerSort);\n  var newSorted = newArr.sort(integerSort);\n  var i = 0;\n  var j = 0;\n  while (i < oldSorted.length || j < newSorted.length) {\n    var oldVal = oldSorted[i];\n    var newVal = newSorted[j];\n    if (oldVal === newVal) {\n      i++;\n      j++;\n      continue;\n    }\n    if (oldVal !== undefined && (newVal === undefined || oldVal < newVal)) {\n      diff.removed.push(oldVal);\n      i++;\n      continue;\n    }\n    if (newVal !== undefined && (oldVal === undefined || newVal < oldVal)) {\n      diff.added.push(newVal);\n      j++;\n      continue;\n    }\n  }\n  return diff;\n};\nvar ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\nexport function isIndexSet(selectedIndex) {\n  return selectedIndex instanceof Set;\n}\nexport function isEventMulti(evt) {\n  return isIndexSet(evt.detail.index);\n}\nexport var createSetFromIndex = function createSetFromIndex(index) {\n  var entry = index === numbers.UNSET_INDEX ? new Set() : index;\n  return isIndexSet(entry) ? new Set(entry) : new Set([entry]);\n};\nexport var MDCListFoundation = /*#__PURE__*/function (_MDCFoundation) {\n  _inherits(MDCListFoundation, _MDCFoundation);\n  function MDCListFoundation(adapter) {\n    var _this;\n    _classCallCheck(this, MDCListFoundation);\n    _this = _callSuper(this, MDCListFoundation, [Object.assign(Object.assign({}, MDCListFoundation.defaultAdapter), adapter)]);\n    _this.isMulti_ = false;\n    _this.wrapFocus_ = false;\n    _this.isVertical_ = true;\n    _this.selectedIndex_ = numbers.UNSET_INDEX;\n    _this.focusedItemIndex_ = numbers.UNSET_INDEX;\n    _this.useActivatedClass_ = false;\n    _this.ariaCurrentAttrValue_ = null;\n    return _this;\n  }\n  _createClass(MDCListFoundation, [{\n    key: \"setWrapFocus\",\n    value:\n    /**\n     * Sets the private wrapFocus_ variable.\n     */\n    function setWrapFocus(value) {\n      this.wrapFocus_ = value;\n    }\n    /**\n     * Sets the private wrapFocus_ variable.\n     */\n  }, {\n    key: \"setMulti\",\n    value: function setMulti(value) {\n      this.isMulti_ = value;\n      var currentIndex = this.selectedIndex_;\n      if (value) {\n        // number to set\n        if (!isIndexSet(currentIndex)) {\n          var isUnset = currentIndex === numbers.UNSET_INDEX;\n          this.selectedIndex_ = isUnset ? new Set() : new Set([currentIndex]);\n        }\n      } else {\n        // set to first sorted number in set\n        if (isIndexSet(currentIndex)) {\n          if (currentIndex.size) {\n            var vals = Array.from(currentIndex).sort(integerSort);\n            this.selectedIndex_ = vals[0];\n          } else {\n            this.selectedIndex_ = numbers.UNSET_INDEX;\n          }\n        }\n      }\n    }\n    /**\n     * Sets the isVertical_ private variable.\n     */\n  }, {\n    key: \"setVerticalOrientation\",\n    value: function setVerticalOrientation(value) {\n      this.isVertical_ = value;\n    }\n    /**\n     * Sets the useActivatedClass_ private variable.\n     */\n  }, {\n    key: \"setUseActivatedClass\",\n    value: function setUseActivatedClass(useActivated) {\n      this.useActivatedClass_ = useActivated;\n    }\n  }, {\n    key: \"getSelectedIndex\",\n    value: function getSelectedIndex() {\n      return this.selectedIndex_;\n    }\n  }, {\n    key: \"setSelectedIndex\",\n    value: function setSelectedIndex(index) {\n      if (!this.isIndexValid_(index)) {\n        return;\n      }\n      if (this.isMulti_) {\n        this.setMultiSelectionAtIndex_(createSetFromIndex(index));\n      } else {\n        this.setSingleSelectionAtIndex_(index);\n      }\n    }\n    /**\n     * Focus in handler for the list items.\n     */\n  }, {\n    key: \"handleFocusIn\",\n    value: function handleFocusIn(_, listItemIndex) {\n      if (listItemIndex >= 0) {\n        this.adapter.setTabIndexForElementIndex(listItemIndex, 0);\n      }\n    }\n    /**\n     * Focus out handler for the list items.\n     */\n  }, {\n    key: \"handleFocusOut\",\n    value: function handleFocusOut(_, listItemIndex) {\n      var _this2 = this;\n      if (listItemIndex >= 0) {\n        this.adapter.setTabIndexForElementIndex(listItemIndex, -1);\n      }\n      /**\n       * Between Focusout & Focusin some browsers do not have focus on any\n       * element. Setting a delay to wait till the focus is moved to next element.\n       */\n      setTimeout(function () {\n        if (!_this2.adapter.isFocusInsideList()) {\n          _this2.setTabindexToFirstSelectedItem_();\n        }\n      }, 0);\n    }\n    /**\n     * Key handler for the list.\n     */\n  }, {\n    key: \"handleKeydown\",\n    value: function handleKeydown(event, isRootListItem, listItemIndex) {\n      var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n      var isArrowUp = normalizeKey(event) === 'ArrowUp';\n      var isArrowRight = normalizeKey(event) === 'ArrowRight';\n      var isArrowDown = normalizeKey(event) === 'ArrowDown';\n      var isHome = normalizeKey(event) === 'Home';\n      var isEnd = normalizeKey(event) === 'End';\n      var isEnter = normalizeKey(event) === 'Enter';\n      var isSpace = normalizeKey(event) === 'Spacebar';\n      if (this.adapter.isRootFocused()) {\n        if (isArrowUp || isEnd) {\n          event.preventDefault();\n          this.focusLastElement();\n        } else if (isArrowDown || isHome) {\n          event.preventDefault();\n          this.focusFirstElement();\n        }\n        return;\n      }\n      var currentIndex = this.adapter.getFocusedElementIndex();\n      if (currentIndex === -1) {\n        currentIndex = listItemIndex;\n        if (currentIndex < 0) {\n          // If this event doesn't have a mdc-deprecated-list-item ancestor from\n          // the current list (not from a sublist), return early.\n          return;\n        }\n      }\n      var nextIndex;\n      if (this.isVertical_ && isArrowDown || !this.isVertical_ && isArrowRight) {\n        this.preventDefaultEvent(event);\n        nextIndex = this.focusNextElement(currentIndex);\n      } else if (this.isVertical_ && isArrowUp || !this.isVertical_ && isArrowLeft) {\n        this.preventDefaultEvent(event);\n        nextIndex = this.focusPrevElement(currentIndex);\n      } else if (isHome) {\n        this.preventDefaultEvent(event);\n        nextIndex = this.focusFirstElement();\n      } else if (isEnd) {\n        this.preventDefaultEvent(event);\n        nextIndex = this.focusLastElement();\n      } else if (isEnter || isSpace) {\n        if (isRootListItem) {\n          // Return early if enter key is pressed on anchor element which triggers\n          // synthetic MouseEvent event.\n          var target = event.target;\n          if (target && target.tagName === 'A' && isEnter) {\n            return;\n          }\n          this.preventDefaultEvent(event);\n          this.setSelectedIndexOnAction_(currentIndex, true);\n        }\n      }\n      this.focusedItemIndex_ = currentIndex;\n      if (nextIndex !== undefined) {\n        this.setTabindexAtIndex_(nextIndex);\n        this.focusedItemIndex_ = nextIndex;\n      }\n    }\n    /**\n     * Click handler for the list.\n     */\n  }, {\n    key: \"handleSingleSelection\",\n    value: function handleSingleSelection(index, isInteraction, force) {\n      if (index === numbers.UNSET_INDEX) {\n        return;\n      }\n      this.setSelectedIndexOnAction_(index, isInteraction, force);\n      this.setTabindexAtIndex_(index);\n      this.focusedItemIndex_ = index;\n    }\n    /**\n     * Focuses the next element on the list.\n     */\n  }, {\n    key: \"focusNextElement\",\n    value: function focusNextElement(index) {\n      var count = this.adapter.getListItemCount();\n      var nextIndex = index + 1;\n      if (nextIndex >= count) {\n        if (this.wrapFocus_) {\n          nextIndex = 0;\n        } else {\n          // Return early because last item is already focused.\n          return index;\n        }\n      }\n      this.adapter.focusItemAtIndex(nextIndex);\n      return nextIndex;\n    }\n    /**\n     * Focuses the previous element on the list.\n     */\n  }, {\n    key: \"focusPrevElement\",\n    value: function focusPrevElement(index) {\n      var prevIndex = index - 1;\n      if (prevIndex < 0) {\n        if (this.wrapFocus_) {\n          prevIndex = this.adapter.getListItemCount() - 1;\n        } else {\n          // Return early because first item is already focused.\n          return index;\n        }\n      }\n      this.adapter.focusItemAtIndex(prevIndex);\n      return prevIndex;\n    }\n  }, {\n    key: \"focusFirstElement\",\n    value: function focusFirstElement() {\n      this.adapter.focusItemAtIndex(0);\n      return 0;\n    }\n  }, {\n    key: \"focusLastElement\",\n    value: function focusLastElement() {\n      var lastIndex = this.adapter.getListItemCount() - 1;\n      this.adapter.focusItemAtIndex(lastIndex);\n      return lastIndex;\n    }\n    /**\n     * @param itemIndex Index of the list item\n     * @param isEnabled Sets the list item to enabled or disabled.\n     */\n  }, {\n    key: \"setEnabled\",\n    value: function setEnabled(itemIndex, isEnabled) {\n      if (!this.isIndexValid_(itemIndex)) {\n        return;\n      }\n      this.adapter.setDisabledStateForElementIndex(itemIndex, !isEnabled);\n    }\n    /**\n     * Ensures that preventDefault is only called if the containing element\n     * doesn't consume the event, and it will cause an unintended scroll.\n     */\n  }, {\n    key: \"preventDefaultEvent\",\n    value: function preventDefaultEvent(evt) {\n      var target = evt.target;\n      var tagName = \"\".concat(target.tagName).toLowerCase();\n      if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n        evt.preventDefault();\n      }\n    }\n  }, {\n    key: \"setSingleSelectionAtIndex_\",\n    value: function setSingleSelectionAtIndex_(index) {\n      var isInteraction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (this.selectedIndex_ === index) {\n        return;\n      }\n      // unset previous\n      if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n        this.adapter.setSelectedStateForElementIndex(this.selectedIndex_, false);\n        if (this.useActivatedClass_) {\n          this.adapter.setActivatedStateForElementIndex(this.selectedIndex_, false);\n        }\n      }\n      // set new\n      if (isInteraction) {\n        this.adapter.setSelectedStateForElementIndex(index, true);\n      }\n      if (this.useActivatedClass_) {\n        this.adapter.setActivatedStateForElementIndex(index, true);\n      }\n      this.setAriaForSingleSelectionAtIndex_(index);\n      this.selectedIndex_ = index;\n      this.adapter.notifySelected(index);\n    }\n  }, {\n    key: \"setMultiSelectionAtIndex_\",\n    value: function setMultiSelectionAtIndex_(newIndex) {\n      var isInteraction = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var oldIndex = createSetFromIndex(this.selectedIndex_);\n      var diff = findIndexDiff(oldIndex, newIndex);\n      if (!diff.removed.length && !diff.added.length) {\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(diff.removed),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var removed = _step.value;\n          if (isInteraction) {\n            this.adapter.setSelectedStateForElementIndex(removed, false);\n          }\n          if (this.useActivatedClass_) {\n            this.adapter.setActivatedStateForElementIndex(removed, false);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(diff.added),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var added = _step2.value;\n          if (isInteraction) {\n            this.adapter.setSelectedStateForElementIndex(added, true);\n          }\n          if (this.useActivatedClass_) {\n            this.adapter.setActivatedStateForElementIndex(added, true);\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      this.selectedIndex_ = newIndex;\n      this.adapter.notifySelected(newIndex, diff);\n    }\n    /**\n     * Sets aria attribute for single selection at given index.\n     */\n  }, {\n    key: \"setAriaForSingleSelectionAtIndex_\",\n    value: function setAriaForSingleSelectionAtIndex_(index) {\n      // Detect the presence of aria-current and get the value only during list\n      // initialization when it is in unset state.\n      if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n        this.ariaCurrentAttrValue_ = this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n      }\n      var isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n      var ariaAttribute = isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n      if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n        this.adapter.setAttributeForElementIndex(this.selectedIndex_, ariaAttribute, 'false');\n      }\n      var ariaAttributeValue = isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\n      this.adapter.setAttributeForElementIndex(index, ariaAttribute, ariaAttributeValue);\n    }\n  }, {\n    key: \"setTabindexAtIndex_\",\n    value: function setTabindexAtIndex_(index) {\n      if (this.focusedItemIndex_ === numbers.UNSET_INDEX && index !== 0) {\n        // If no list item was selected set first list item's tabindex to -1.\n        // Generally, tabindex is set to 0 on first list item of list that has no\n        // preselected items.\n        this.adapter.setTabIndexForElementIndex(0, -1);\n      } else if (this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n        this.adapter.setTabIndexForElementIndex(this.focusedItemIndex_, -1);\n      }\n      this.adapter.setTabIndexForElementIndex(index, 0);\n    }\n  }, {\n    key: \"setTabindexToFirstSelectedItem_\",\n    value: function setTabindexToFirstSelectedItem_() {\n      var targetIndex = 0;\n      if (typeof this.selectedIndex_ === 'number' && this.selectedIndex_ !== numbers.UNSET_INDEX) {\n        targetIndex = this.selectedIndex_;\n      } else if (isIndexSet(this.selectedIndex_) && this.selectedIndex_.size > 0) {\n        targetIndex = Math.min.apply(Math, _toConsumableArray(this.selectedIndex_));\n      }\n      this.setTabindexAtIndex_(targetIndex);\n    }\n  }, {\n    key: \"isIndexValid_\",\n    value: function isIndexValid_(index) {\n      if (index instanceof Set) {\n        if (!this.isMulti_) {\n          throw new Error('MDCListFoundation: Array of index is only supported for checkbox based list');\n        }\n        if (index.size === 0) {\n          return true;\n        } else {\n          var isOneInRange = false;\n          var _iterator3 = _createForOfIteratorHelper(index),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var entry = _step3.value;\n              isOneInRange = this.isIndexInRange_(entry);\n              if (isOneInRange) {\n                break;\n              }\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          return isOneInRange;\n        }\n      } else if (typeof index === 'number') {\n        if (this.isMulti_) {\n          throw new Error('MDCListFoundation: Expected array of index for checkbox based list but got number: ' + index);\n        }\n        return index === numbers.UNSET_INDEX || this.isIndexInRange_(index);\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"isIndexInRange_\",\n    value: function isIndexInRange_(index) {\n      var listSize = this.adapter.getListItemCount();\n      return index >= 0 && index < listSize;\n    }\n    /**\n     * Sets selected index on user action, toggles checkbox / radio based on\n     * toggleCheckbox value. User interaction should not toggle list item(s) when\n     * disabled.\n     */\n  }, {\n    key: \"setSelectedIndexOnAction_\",\n    value: function setSelectedIndexOnAction_(index, isInteraction, force) {\n      if (this.adapter.getDisabledStateForElementIndex(index)) {\n        return;\n      }\n      var checkedIndex = index;\n      if (this.isMulti_) {\n        checkedIndex = new Set([index]);\n      }\n      if (!this.isIndexValid_(checkedIndex)) {\n        return;\n      }\n      if (this.isMulti_) {\n        this.toggleMultiAtIndex(index, force, isInteraction);\n      } else {\n        if (isInteraction || force) {\n          this.setSingleSelectionAtIndex_(index, isInteraction);\n        } else {\n          var isDeselection = this.selectedIndex_ === index;\n          if (isDeselection) {\n            this.setSingleSelectionAtIndex_(numbers.UNSET_INDEX);\n          }\n        }\n      }\n      if (isInteraction) {\n        this.adapter.notifyAction(index);\n      }\n    }\n  }, {\n    key: \"toggleMultiAtIndex\",\n    value: function toggleMultiAtIndex(index, force) {\n      var isInteraction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var newSelectionValue = false;\n      if (force === undefined) {\n        newSelectionValue = !this.adapter.getSelectedStateForElementIndex(index);\n      } else {\n        newSelectionValue = force;\n      }\n      var newSet = createSetFromIndex(this.selectedIndex_);\n      if (newSelectionValue) {\n        newSet.add(index);\n      } else {\n        newSet.delete(index);\n      }\n      this.setMultiSelectionAtIndex_(newSet, isInteraction);\n    }\n  }], [{\n    key: \"strings\",\n    get: function get() {\n      return strings;\n    }\n  }, {\n    key: \"numbers\",\n    get: function get() {\n      return numbers;\n    }\n  }, {\n    key: \"defaultAdapter\",\n    get: function get() {\n      return {\n        focusItemAtIndex: function focusItemAtIndex() {\n          return undefined;\n        },\n        getFocusedElementIndex: function getFocusedElementIndex() {\n          return 0;\n        },\n        getListItemCount: function getListItemCount() {\n          return 0;\n        },\n        isFocusInsideList: function isFocusInsideList() {\n          return false;\n        },\n        isRootFocused: function isRootFocused() {\n          return false;\n        },\n        notifyAction: function notifyAction() {\n          return undefined;\n        },\n        notifySelected: function notifySelected() {\n          return undefined;\n        },\n        getSelectedStateForElementIndex: function getSelectedStateForElementIndex() {\n          return false;\n        },\n        setDisabledStateForElementIndex: function setDisabledStateForElementIndex() {\n          return undefined;\n        },\n        getDisabledStateForElementIndex: function getDisabledStateForElementIndex() {\n          return false;\n        },\n        setSelectedStateForElementIndex: function setSelectedStateForElementIndex() {\n          return undefined;\n        },\n        setActivatedStateForElementIndex: function setActivatedStateForElementIndex() {\n          return undefined;\n        },\n        setTabIndexForElementIndex: function setTabIndexForElementIndex() {\n          return undefined;\n        },\n        setAttributeForElementIndex: function setAttributeForElementIndex() {\n          return undefined;\n        },\n        getAttributeForElementIndex: function getAttributeForElementIndex() {\n          return null;\n        }\n      };\n    }\n  }]);\n  return MDCListFoundation;\n}(MDCFoundation);\n// tslint:disable-next-line:no-default-export Needed for backward compatibility\n// with MDC Web v0.44.0 and earlier.\nexport default MDCListFoundation;","map":{"version":3,"names":["MDCFoundation","normalizeKey","numbers","strings","integerSort","a","b","findIndexDiff","oldSet","newSet","oldArr","Array","from","newArr","diff","added","removed","oldSorted","sort","newSorted","i","j","length","oldVal","newVal","undefined","push","ELEMENTS_KEY_ALLOWED_IN","isIndexSet","selectedIndex","Set","isEventMulti","evt","detail","index","createSetFromIndex","entry","UNSET_INDEX","MDCListFoundation","_MDCFoundation","_inherits","adapter","_this","_classCallCheck","_callSuper","Object","assign","defaultAdapter","isMulti_","wrapFocus_","isVertical_","selectedIndex_","focusedItemIndex_","useActivatedClass_","ariaCurrentAttrValue_","_createClass","key","value","setWrapFocus","setMulti","currentIndex","isUnset","size","vals","setVerticalOrientation","setUseActivatedClass","useActivated","getSelectedIndex","setSelectedIndex","isIndexValid_","setMultiSelectionAtIndex_","setSingleSelectionAtIndex_","handleFocusIn","_","listItemIndex","setTabIndexForElementIndex","handleFocusOut","_this2","setTimeout","isFocusInsideList","setTabindexToFirstSelectedItem_","handleKeydown","event","isRootListItem","isArrowLeft","isArrowUp","isArrowRight","isArrowDown","isHome","isEnd","isEnter","isSpace","isRootFocused","preventDefault","focusLastElement","focusFirstElement","getFocusedElementIndex","nextIndex","preventDefaultEvent","focusNextElement","focusPrevElement","target","tagName","setSelectedIndexOnAction_","setTabindexAtIndex_","handleSingleSelection","isInteraction","force","count","getListItemCount","focusItemAtIndex","prevIndex","lastIndex","setEnabled","itemIndex","isEnabled","setDisabledStateForElementIndex","concat","toLowerCase","indexOf","arguments","setSelectedStateForElementIndex","setActivatedStateForElementIndex","setAriaForSingleSelectionAtIndex_","notifySelected","newIndex","oldIndex","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","_iterator2","_step2","getAttributeForElementIndex","ARIA_CURRENT","isAriaCurrent","ariaAttribute","ARIA_SELECTED","setAttributeForElementIndex","ariaAttributeValue","targetIndex","Math","min","apply","_toConsumableArray","Error","isOneInRange","_iterator3","_step3","isIndexInRange_","listSize","getDisabledStateForElementIndex","checkedIndex","toggleMultiAtIndex","isDeselection","notifyAction","newSelectionValue","getSelectedStateForElementIndex","add","delete","get"],"sources":["mwc-list-foundation.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n\nimport {MDCFoundation} from '@material/base/foundation.js';\nimport {normalizeKey} from '@material/dom/keyboard.js';\nimport {numbers, strings} from '@material/list/constants.js';\n\nimport {MDCListAdapter} from './mwc-list-adapter.js';\n\nexport type MWCListIndex = number|Set<number>;\n\nexport interface IndexDiff {\n  added: number[];\n  removed: number[];\n}\n\nexport interface SelectedDetail<T extends MWCListIndex = MWCListIndex> {\n  index: T;\n  diff: T extends Set<number>? IndexDiff: undefined;\n}\n\nexport interface ActionDetail {\n  index: number;\n}\n\nconst integerSort = (a: number, b: number) => {\n  return a - b;\n};\n\nexport type SingleSelectedEvent = CustomEvent<SelectedDetail<number>>;\nexport type MultiSelectedEvent = CustomEvent<SelectedDetail<Set<number>>>;\nexport type SelectedEvent = SingleSelectedEvent|MultiSelectedEvent;\n\nconst findIndexDiff = (oldSet: Set<number>, newSet: Set<number>): IndexDiff => {\n  const oldArr = Array.from(oldSet);\n  const newArr = Array.from(newSet);\n  const diff: IndexDiff = {added: [], removed: []};\n  const oldSorted = oldArr.sort(integerSort);\n  const newSorted = newArr.sort(integerSort);\n\n  let i = 0;\n  let j = 0;\n  while (i < oldSorted.length || j < newSorted.length) {\n    const oldVal = oldSorted[i];\n    const newVal = newSorted[j];\n\n    if (oldVal === newVal) {\n      i++;\n      j++;\n      continue;\n    }\n\n    if (oldVal !== undefined && (newVal === undefined || oldVal < newVal)) {\n      diff.removed.push(oldVal);\n      i++;\n      continue;\n    }\n\n    if (newVal !== undefined && (oldVal === undefined || newVal < oldVal)) {\n      diff.added.push(newVal);\n      j++;\n      continue;\n    }\n  }\n\n  return diff;\n};\n\nconst ELEMENTS_KEY_ALLOWED_IN = ['input', 'button', 'textarea', 'select'];\n\nexport function isIndexSet(selectedIndex: MWCListIndex):\n    selectedIndex is Set<number> {\n  return selectedIndex instanceof Set;\n}\n\nexport function isEventMulti(evt: SelectedEvent): evt is MultiSelectedEvent {\n  return isIndexSet(evt.detail.index);\n}\n\nexport const createSetFromIndex = (index: MWCListIndex) => {\n  const entry = index === numbers.UNSET_INDEX ? new Set<number>() : index;\n  return isIndexSet(entry) ? new Set(entry) : new Set([entry]);\n};\n\nexport class MDCListFoundation extends MDCFoundation<MDCListAdapter> {\n  static override get strings() {\n    return strings;\n  }\n\n  static override get numbers() {\n    return numbers;\n  }\n\n\n  static override get defaultAdapter(): MDCListAdapter {\n    return {\n      focusItemAtIndex: () => undefined,\n      getFocusedElementIndex: () => 0,\n      getListItemCount: () => 0,\n      isFocusInsideList: () => false,\n      isRootFocused: () => false,\n      notifyAction: () => undefined,\n      notifySelected: () => undefined,\n      getSelectedStateForElementIndex: () => false,\n      setDisabledStateForElementIndex: () => undefined,\n      getDisabledStateForElementIndex: () => false,\n      setSelectedStateForElementIndex: () => undefined,\n      setActivatedStateForElementIndex: () => undefined,\n      setTabIndexForElementIndex: () => undefined,\n      setAttributeForElementIndex: () => undefined,\n      getAttributeForElementIndex: () => null,\n    };\n  }\n\n  protected isMulti_ = false;\n  private wrapFocus_ = false;\n  private isVertical_ = true;\n  private selectedIndex_: MWCListIndex = numbers.UNSET_INDEX;\n  private focusedItemIndex_ = numbers.UNSET_INDEX;\n  private useActivatedClass_ = false;\n  private ariaCurrentAttrValue_: string|null = null;\n\n  constructor(adapter?: Partial<MDCListAdapter>) {\n    super({...MDCListFoundation.defaultAdapter, ...adapter});\n  }\n\n  /**\n   * Sets the private wrapFocus_ variable.\n   */\n  setWrapFocus(value: boolean) {\n    this.wrapFocus_ = value;\n  }\n\n  /**\n   * Sets the private wrapFocus_ variable.\n   */\n  setMulti(value: boolean) {\n    this.isMulti_ = value;\n\n    const currentIndex = this.selectedIndex_;\n\n    if (value) {\n      // number to set\n      if (!isIndexSet(currentIndex)) {\n        const isUnset = currentIndex === numbers.UNSET_INDEX;\n        this.selectedIndex_ = isUnset ? new Set() : new Set([currentIndex]);\n      }\n    } else {\n      // set to first sorted number in set\n      if (isIndexSet(currentIndex)) {\n        if (currentIndex.size) {\n          const vals = Array.from(currentIndex).sort(integerSort);\n          this.selectedIndex_ = vals[0];\n        } else {\n          this.selectedIndex_ = numbers.UNSET_INDEX;\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the isVertical_ private variable.\n   */\n  setVerticalOrientation(value: boolean) {\n    this.isVertical_ = value;\n  }\n\n  /**\n   * Sets the useActivatedClass_ private variable.\n   */\n  setUseActivatedClass(useActivated: boolean) {\n    this.useActivatedClass_ = useActivated;\n  }\n\n  getSelectedIndex(): MWCListIndex {\n    return this.selectedIndex_;\n  }\n\n  setSelectedIndex(index: MWCListIndex) {\n    if (!this.isIndexValid_(index)) {\n      return;\n    }\n\n    if (this.isMulti_) {\n      this.setMultiSelectionAtIndex_(createSetFromIndex(index));\n    } else {\n      this.setSingleSelectionAtIndex_(index as number);\n    }\n  }\n\n  /**\n   * Focus in handler for the list items.\n   */\n  handleFocusIn(_: FocusEvent, listItemIndex: number) {\n    if (listItemIndex >= 0) {\n      this.adapter.setTabIndexForElementIndex(listItemIndex, 0);\n    }\n  }\n\n  /**\n   * Focus out handler for the list items.\n   */\n  handleFocusOut(_: FocusEvent, listItemIndex: number) {\n    if (listItemIndex >= 0) {\n      this.adapter.setTabIndexForElementIndex(listItemIndex, -1);\n    }\n\n    /**\n     * Between Focusout & Focusin some browsers do not have focus on any\n     * element. Setting a delay to wait till the focus is moved to next element.\n     */\n    setTimeout(() => {\n      if (!this.adapter.isFocusInsideList()) {\n        this.setTabindexToFirstSelectedItem_();\n      }\n    }, 0);\n  }\n\n  /**\n   * Key handler for the list.\n   */\n  handleKeydown(\n      event: KeyboardEvent, isRootListItem: boolean, listItemIndex: number) {\n    const isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n    const isArrowUp = normalizeKey(event) === 'ArrowUp';\n    const isArrowRight = normalizeKey(event) === 'ArrowRight';\n    const isArrowDown = normalizeKey(event) === 'ArrowDown';\n    const isHome = normalizeKey(event) === 'Home';\n    const isEnd = normalizeKey(event) === 'End';\n    const isEnter = normalizeKey(event) === 'Enter';\n    const isSpace = normalizeKey(event) === 'Spacebar';\n\n    if (this.adapter.isRootFocused()) {\n      if (isArrowUp || isEnd) {\n        event.preventDefault();\n        this.focusLastElement();\n      } else if (isArrowDown || isHome) {\n        event.preventDefault();\n        this.focusFirstElement();\n      }\n\n      return;\n    }\n\n    let currentIndex = this.adapter.getFocusedElementIndex();\n    if (currentIndex === -1) {\n      currentIndex = listItemIndex;\n      if (currentIndex < 0) {\n        // If this event doesn't have a mdc-deprecated-list-item ancestor from\n        // the current list (not from a sublist), return early.\n        return;\n      }\n    }\n\n    let nextIndex;\n    if ((this.isVertical_ && isArrowDown) ||\n        (!this.isVertical_ && isArrowRight)) {\n      this.preventDefaultEvent(event);\n      nextIndex = this.focusNextElement(currentIndex);\n    } else if (\n        (this.isVertical_ && isArrowUp) || (!this.isVertical_ && isArrowLeft)) {\n      this.preventDefaultEvent(event);\n      nextIndex = this.focusPrevElement(currentIndex);\n    } else if (isHome) {\n      this.preventDefaultEvent(event);\n      nextIndex = this.focusFirstElement();\n    } else if (isEnd) {\n      this.preventDefaultEvent(event);\n      nextIndex = this.focusLastElement();\n    } else if (isEnter || isSpace) {\n      if (isRootListItem) {\n        // Return early if enter key is pressed on anchor element which triggers\n        // synthetic MouseEvent event.\n        const target = event.target as Element | null;\n        if (target && target.tagName === 'A' && isEnter) {\n          return;\n        }\n        this.preventDefaultEvent(event);\n        this.setSelectedIndexOnAction_(currentIndex, true);\n      }\n    }\n\n    this.focusedItemIndex_ = currentIndex;\n\n    if (nextIndex !== undefined) {\n      this.setTabindexAtIndex_(nextIndex);\n      this.focusedItemIndex_ = nextIndex;\n    }\n  }\n\n  /**\n   * Click handler for the list.\n   */\n  handleSingleSelection(\n      index: number, isInteraction: boolean, force?: boolean) {\n    if (index === numbers.UNSET_INDEX) {\n      return;\n    }\n\n    this.setSelectedIndexOnAction_(index, isInteraction, force);\n    this.setTabindexAtIndex_(index);\n    this.focusedItemIndex_ = index;\n  }\n\n  /**\n   * Focuses the next element on the list.\n   */\n  focusNextElement(index: number) {\n    const count = this.adapter.getListItemCount();\n    let nextIndex = index + 1;\n    if (nextIndex >= count) {\n      if (this.wrapFocus_) {\n        nextIndex = 0;\n      } else {\n        // Return early because last item is already focused.\n        return index;\n      }\n    }\n    this.adapter.focusItemAtIndex(nextIndex);\n\n    return nextIndex;\n  }\n\n  /**\n   * Focuses the previous element on the list.\n   */\n  focusPrevElement(index: number) {\n    let prevIndex = index - 1;\n    if (prevIndex < 0) {\n      if (this.wrapFocus_) {\n        prevIndex = this.adapter.getListItemCount() - 1;\n      } else {\n        // Return early because first item is already focused.\n        return index;\n      }\n    }\n    this.adapter.focusItemAtIndex(prevIndex);\n\n    return prevIndex;\n  }\n\n  focusFirstElement() {\n    this.adapter.focusItemAtIndex(0);\n    return 0;\n  }\n\n  focusLastElement() {\n    const lastIndex = this.adapter.getListItemCount() - 1;\n    this.adapter.focusItemAtIndex(lastIndex);\n    return lastIndex;\n  }\n\n  /**\n   * @param itemIndex Index of the list item\n   * @param isEnabled Sets the list item to enabled or disabled.\n   */\n  setEnabled(itemIndex: number, isEnabled: boolean): void {\n    if (!this.isIndexValid_(itemIndex)) {\n      return;\n    }\n\n    this.adapter.setDisabledStateForElementIndex(itemIndex, !isEnabled);\n  }\n\n  /**\n   * Ensures that preventDefault is only called if the containing element\n   * doesn't consume the event, and it will cause an unintended scroll.\n   */\n  private preventDefaultEvent(evt: KeyboardEvent) {\n    const target = evt.target as Element;\n    const tagName = `${target.tagName}`.toLowerCase();\n    if (ELEMENTS_KEY_ALLOWED_IN.indexOf(tagName) === -1) {\n      evt.preventDefault();\n    }\n  }\n\n  private setSingleSelectionAtIndex_(index: number, isInteraction = true) {\n    if (this.selectedIndex_ === index) {\n      return;\n    }\n\n    // unset previous\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter.setSelectedStateForElementIndex(\n          this.selectedIndex_ as number, false);\n      if (this.useActivatedClass_) {\n        this.adapter.setActivatedStateForElementIndex(\n            this.selectedIndex_ as number, false);\n      }\n    }\n\n    // set new\n    if (isInteraction) {\n      this.adapter.setSelectedStateForElementIndex(index, true);\n    }\n    if (this.useActivatedClass_) {\n      this.adapter.setActivatedStateForElementIndex(index, true);\n    }\n    this.setAriaForSingleSelectionAtIndex_(index);\n\n    this.selectedIndex_ = index;\n\n    this.adapter.notifySelected(index);\n  }\n\n  private setMultiSelectionAtIndex_(\n      newIndex: Set<number>, isInteraction = true) {\n    const oldIndex = createSetFromIndex(this.selectedIndex_);\n    const diff = findIndexDiff(oldIndex, newIndex);\n\n    if (!diff.removed.length && !diff.added.length) {\n      return;\n    }\n\n    for (const removed of diff.removed) {\n      if (isInteraction) {\n        this.adapter.setSelectedStateForElementIndex(removed, false);\n      }\n\n      if (this.useActivatedClass_) {\n        this.adapter.setActivatedStateForElementIndex(removed, false);\n      }\n    }\n\n    for (const added of diff.added) {\n      if (isInteraction) {\n        this.adapter.setSelectedStateForElementIndex(added, true);\n      }\n\n      if (this.useActivatedClass_) {\n        this.adapter.setActivatedStateForElementIndex(added, true);\n      }\n    }\n\n    this.selectedIndex_ = newIndex;\n\n    this.adapter.notifySelected(newIndex, diff);\n  }\n\n  /**\n   * Sets aria attribute for single selection at given index.\n   */\n  private setAriaForSingleSelectionAtIndex_(index: number) {\n    // Detect the presence of aria-current and get the value only during list\n    // initialization when it is in unset state.\n    if (this.selectedIndex_ === numbers.UNSET_INDEX) {\n      this.ariaCurrentAttrValue_ =\n          this.adapter.getAttributeForElementIndex(index, strings.ARIA_CURRENT);\n    }\n\n    const isAriaCurrent = this.ariaCurrentAttrValue_ !== null;\n    const ariaAttribute =\n        isAriaCurrent ? strings.ARIA_CURRENT : strings.ARIA_SELECTED;\n\n    if (this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      this.adapter.setAttributeForElementIndex(\n          this.selectedIndex_ as number, ariaAttribute, 'false');\n    }\n\n    const ariaAttributeValue =\n        isAriaCurrent ? this.ariaCurrentAttrValue_ : 'true';\n    this.adapter.setAttributeForElementIndex(\n        index, ariaAttribute, ariaAttributeValue as string);\n  }\n\n  private setTabindexAtIndex_(index: number) {\n    if (this.focusedItemIndex_ === numbers.UNSET_INDEX && index !== 0) {\n      // If no list item was selected set first list item's tabindex to -1.\n      // Generally, tabindex is set to 0 on first list item of list that has no\n      // preselected items.\n      this.adapter.setTabIndexForElementIndex(0, -1);\n    } else if (\n        this.focusedItemIndex_ >= 0 && this.focusedItemIndex_ !== index) {\n      this.adapter.setTabIndexForElementIndex(this.focusedItemIndex_, -1);\n    }\n\n    this.adapter.setTabIndexForElementIndex(index, 0);\n  }\n\n  private setTabindexToFirstSelectedItem_() {\n    let targetIndex = 0;\n\n    if (typeof this.selectedIndex_ === 'number' &&\n        this.selectedIndex_ !== numbers.UNSET_INDEX) {\n      targetIndex = this.selectedIndex_;\n    } else if (\n        isIndexSet(this.selectedIndex_) && this.selectedIndex_.size > 0) {\n      targetIndex = Math.min(...this.selectedIndex_);\n    }\n\n    this.setTabindexAtIndex_(targetIndex);\n  }\n\n  private isIndexValid_(index: MWCListIndex) {\n    if (index instanceof Set) {\n      if (!this.isMulti_) {\n        throw new Error(\n            'MDCListFoundation: Array of index is only supported for checkbox based list');\n      }\n\n      if (index.size === 0) {\n        return true;\n      } else {\n        let isOneInRange = false;\n\n        for (const entry of index) {\n          isOneInRange = this.isIndexInRange_(entry);\n\n          if (isOneInRange) {\n            break;\n          }\n        }\n\n        return isOneInRange;\n      }\n    } else if (typeof index === 'number') {\n      if (this.isMulti_) {\n        throw new Error(\n            'MDCListFoundation: Expected array of index for checkbox based list but got number: ' +\n            index);\n      }\n      return index === numbers.UNSET_INDEX || this.isIndexInRange_(index);\n    } else {\n      return false;\n    }\n  }\n\n  private isIndexInRange_(index: number) {\n    const listSize = this.adapter.getListItemCount();\n    return index >= 0 && index < listSize;\n  }\n\n  /**\n   * Sets selected index on user action, toggles checkbox / radio based on\n   * toggleCheckbox value. User interaction should not toggle list item(s) when\n   * disabled.\n   */\n  private setSelectedIndexOnAction_(\n      index: number, isInteraction: boolean, force?: boolean) {\n    if (this.adapter.getDisabledStateForElementIndex(index)) {\n      return;\n    }\n\n    let checkedIndex: MWCListIndex = index;\n\n    if (this.isMulti_) {\n      checkedIndex = new Set([index]);\n    }\n\n    if (!this.isIndexValid_(checkedIndex)) {\n      return;\n    }\n\n    if (this.isMulti_) {\n      this.toggleMultiAtIndex(index, force, isInteraction);\n    } else {\n      if (isInteraction || force) {\n        this.setSingleSelectionAtIndex_(index, isInteraction);\n      } else {\n        const isDeselection = this.selectedIndex_ === index;\n        if (isDeselection) {\n          this.setSingleSelectionAtIndex_(numbers.UNSET_INDEX);\n        }\n      }\n    }\n\n    if (isInteraction) {\n      this.adapter.notifyAction(index);\n    }\n  }\n\n  toggleMultiAtIndex(index: number, force?: boolean, isInteraction = true) {\n    let newSelectionValue = false;\n\n    if (force === undefined) {\n      newSelectionValue = !this.adapter.getSelectedStateForElementIndex(index);\n    } else {\n      newSelectionValue = force;\n    }\n\n    const newSet = createSetFromIndex(this.selectedIndex_);\n\n    if (newSelectionValue) {\n      newSet.add(index);\n    } else {\n      newSet.delete(index);\n    }\n\n    this.setMultiSelectionAtIndex_(newSet, isInteraction);\n  }\n}\n\n// tslint:disable-next-line:no-default-export Needed for backward compatibility\n// with MDC Web v0.44.0 and earlier.\nexport default MDCListFoundation;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}