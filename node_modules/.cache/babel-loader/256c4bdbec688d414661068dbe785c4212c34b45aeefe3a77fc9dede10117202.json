{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { shouldPolyfill as shouldPolyfillDateTimeFormat } from \"@formatjs/intl-datetimeformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillDisplayNames } from \"@formatjs/intl-displaynames/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillGetCanonicalLocales } from \"@formatjs/intl-getcanonicallocales/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillListFormat } from \"@formatjs/intl-listformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillLocale } from \"@formatjs/intl-locale/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillNumberFormat } from \"@formatjs/intl-numberformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillPluralRules } from \"@formatjs/intl-pluralrules/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillRelativeTimeFormat } from \"@formatjs/intl-relativetimeformat/should-polyfill\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport { polyfillLocaleData, polyfillTimeZoneData } from \"./locale-data-polyfill\";\nvar polyfillIntl = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var locale, polyfills;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          locale = getLocalLanguage();\n          polyfills = [];\n          if (!shouldPolyfillGetCanonicalLocales()) {\n            _context.next = 5;\n            break;\n          }\n          _context.next = 5;\n          return import(\"@formatjs/intl-getcanonicallocales/polyfill-force\");\n        case 5:\n          if (!shouldPolyfillLocale()) {\n            _context.next = 8;\n            break;\n          }\n          _context.next = 8;\n          return import(\"@formatjs/intl-locale/polyfill-force\");\n        case 8:\n          if (shouldPolyfillDateTimeFormat(locale)) {\n            polyfills.push(import(\"@formatjs/intl-datetimeformat/polyfill-force\").then(function () {\n              return polyfillTimeZoneData();\n            }));\n          }\n          if (shouldPolyfillDisplayNames(locale)) {\n            polyfills.push(import(\"@formatjs/intl-displaynames/polyfill-force\"));\n          }\n          if (shouldPolyfillListFormat(locale)) {\n            polyfills.push(import(\"@formatjs/intl-listformat/polyfill-force\"));\n          }\n          if (shouldPolyfillNumberFormat(locale)) {\n            polyfills.push(import(\"@formatjs/intl-numberformat/polyfill-force\"));\n          }\n          if (shouldPolyfillPluralRules(locale)) {\n            polyfills.push(import(\"@formatjs/intl-pluralrules/polyfill-force\").then(\n            // Locale data for plural rules breaks current JSON conversions as it includes functions,\n            // so only import English to avoid huge bundles\n            // TODo: Setup JS imports instead of JSON fetches\n            function () {\n              return import(\"@formatjs/intl-pluralrules/locale-data/en\");\n            }));\n          }\n          if (shouldPolyfillRelativeTimeFormat(locale)) {\n            polyfills.push(import(\"@formatjs/intl-relativetimeformat/polyfill-force\"));\n          }\n          if (!(polyfills.length === 0)) {\n            _context.next = 16;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 16:\n          _context.next = 18;\n          return Promise.all(polyfills).then(function () {\n            return (\n              // Load the default language\n              polyfillLocaleData(locale)\n            );\n          });\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function polyfillIntl() {\n    return _ref.apply(this, arguments);\n  };\n}();\nawait polyfillIntl();","map":{"version":3,"names":["shouldPolyfill","shouldPolyfillDateTimeFormat","shouldPolyfillDisplayNames","shouldPolyfillGetCanonicalLocales","shouldPolyfillListFormat","shouldPolyfillLocale","shouldPolyfillNumberFormat","shouldPolyfillPluralRules","shouldPolyfillRelativeTimeFormat","getLocalLanguage","polyfillLocaleData","polyfillTimeZoneData","polyfillIntl","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","locale","polyfills","wrap","_callee$","_context","prev","next","push","then","length","abrupt","Promise","all","stop","apply","arguments"],"sources":["/Users/sercanardil/Desktop/frontend/src/resources/intl-polyfill.ts"],"sourcesContent":["import { shouldPolyfill as shouldPolyfillDateTimeFormat } from \"@formatjs/intl-datetimeformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillDisplayNames } from \"@formatjs/intl-displaynames/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillGetCanonicalLocales } from \"@formatjs/intl-getcanonicallocales/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillListFormat } from \"@formatjs/intl-listformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillLocale } from \"@formatjs/intl-locale/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillNumberFormat } from \"@formatjs/intl-numberformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillPluralRules } from \"@formatjs/intl-pluralrules/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillRelativeTimeFormat } from \"@formatjs/intl-relativetimeformat/should-polyfill\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport {\n  polyfillLocaleData,\n  polyfillTimeZoneData,\n} from \"./locale-data-polyfill\";\n\nconst polyfillIntl = async () => {\n  const locale = getLocalLanguage();\n  const polyfills: Promise<unknown>[] = [];\n  if (shouldPolyfillGetCanonicalLocales()) {\n    await import(\"@formatjs/intl-getcanonicallocales/polyfill-force\");\n  }\n  if (shouldPolyfillLocale()) {\n    await import(\"@formatjs/intl-locale/polyfill-force\");\n  }\n  if (shouldPolyfillDateTimeFormat(locale)) {\n    polyfills.push(\n      import(\"@formatjs/intl-datetimeformat/polyfill-force\").then(() =>\n        polyfillTimeZoneData()\n      )\n    );\n  }\n  if (shouldPolyfillDisplayNames(locale)) {\n    polyfills.push(import(\"@formatjs/intl-displaynames/polyfill-force\"));\n  }\n  if (shouldPolyfillListFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-listformat/polyfill-force\"));\n  }\n  if (shouldPolyfillNumberFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-numberformat/polyfill-force\"));\n  }\n  if (shouldPolyfillPluralRules(locale)) {\n    polyfills.push(\n      import(\"@formatjs/intl-pluralrules/polyfill-force\").then(\n        // Locale data for plural rules breaks current JSON conversions as it includes functions,\n        // so only import English to avoid huge bundles\n        // TODo: Setup JS imports instead of JSON fetches\n        () => import(\"@formatjs/intl-pluralrules/locale-data/en\")\n      )\n    );\n  }\n  if (shouldPolyfillRelativeTimeFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-relativetimeformat/polyfill-force\"));\n  }\n  if (polyfills.length === 0) {\n    return;\n  }\n  await Promise.all(polyfills).then(() =>\n    // Load the default language\n    polyfillLocaleData(locale)\n  );\n};\n\nawait polyfillIntl();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}