{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiStop = \"M18,18H6V6H18V18Z\";\nconst mdiValveClosed = \"M22 2V22H20V13H14.82A3 3 0 0 1 9.18 13H4V22H2V2H4V11H9.18A3 3 0 0 1 14.82 11H20V2Z\";\nconst mdiValveOpen = \"M4 22H2V2H4M22 2H20V22H22M11 4V9.18A3 3 0 0 0 11 14.82V20H13V14.82A3 3 0 0 0 13 9.18V4Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport \"../../components/ha-control-button\";\nimport \"../../components/ha-control-button-group\";\nimport \"../../components/ha-control-slider\";\nimport \"../../components/ha-svg-icon\";\nimport { ValveEntityFeature, canClose, canOpen, canStop } from \"../../data/valve\";\nexport const getValveButtons = memoizeOne(stateObj => {\n  const supportsOpen = supportsFeature(stateObj, ValveEntityFeature.OPEN);\n  const supportsClose = supportsFeature(stateObj, ValveEntityFeature.CLOSE);\n  const supportsStop = supportsFeature(stateObj, ValveEntityFeature.STOP);\n  const buttons = [];\n  if (supportsOpen) buttons.push(\"open\");\n  if (supportsStop) buttons.push(\"stop\");\n  if (supportsClose) buttons.push(\"close\");\n  return buttons;\n});\nexport let HaStateControlValveButtons = _decorate([customElement(\"ha-state-control-valve-buttons\")], function (_initialize, _LitElement) {\n  class HaStateControlValveButtons extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStateControlValveButtons,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"_onOpenTap\",\n      value: function _onOpenTap(ev) {\n        ev.stopPropagation();\n        this.hass.callService(\"valve\", \"open_valve\", {\n          entity_id: this.stateObj.entity_id\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onCloseTap\",\n      value: function _onCloseTap(ev) {\n        ev.stopPropagation();\n        this.hass.callService(\"valve\", \"close_valve\", {\n          entity_id: this.stateObj.entity_id\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onStopTap\",\n      value: function _onStopTap(ev) {\n        ev.stopPropagation();\n        this.hass.callService(\"valve\", \"stop_valve\", {\n          entity_id: this.stateObj.entity_id\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"renderButton\",\n      value: function renderButton(button) {\n        if (button === \"open\") {\n          return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.open_valve\")}\n          @click=${this._onOpenTap}\n          .disabled=${!canOpen(this.stateObj)}\n          data-button=\"open\"\n        >\n          <ha-svg-icon .path=${mdiValveOpen}></ha-svg-icon>\n        </ha-control-button>\n      `;\n        }\n        if (button === \"close\") {\n          return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.close_valve\")}\n          @click=${this._onCloseTap}\n          .disabled=${!canClose(this.stateObj)}\n          data-button=\"close\"\n        >\n          <ha-svg-icon .path=${mdiValveClosed}></ha-svg-icon>\n        </ha-control-button>\n      `;\n        }\n        if (button === \"stop\") {\n          return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.stop_valve\")}\n          @click=${this._onStopTap}\n          .disabled=${!canStop(this.stateObj)}\n          data-button=\"stop\"\n        >\n          <ha-svg-icon .path=${mdiStop}></ha-svg-icon>\n        </ha-control-button>\n      `;\n        }\n        return nothing;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const buttons = getValveButtons(this.stateObj);\n        return html`\n      <ha-control-button-group vertical>\n        ${repeat(buttons, button => button, button => this.renderButton(button))}\n      </ha-control-button-group>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-button-group {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-button-group-spacing: 6px;\n        --control-button-group-thickness: 100px;\n      }\n      ha-control-button {\n        --control-button-border-radius: 18px;\n        --mdc-icon-size: 24px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","repeat","memoizeOne","supportsFeature","ValveEntityFeature","canClose","canOpen","canStop","getValveButtons","stateObj","supportsOpen","OPEN","supportsClose","CLOSE","supportsStop","STOP","buttons","push","HaStateControlValveButtons","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","_onOpenTap","ev","stopPropagation","hass","callService","entity_id","_onCloseTap","_onStopTap","renderButton","button","localize","mdiValveOpen","mdiValveClosed","mdiStop","render","static","styles"],"sources":["/workspaces/frontend/src/state-control/valve/ha-state-control-valve-buttons.ts"],"sourcesContent":["import { mdiStop, mdiValveClosed, mdiValveOpen } from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport memoizeOne from \"memoize-one\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nimport \"../../components/ha-control-button\";\nimport \"../../components/ha-control-button-group\";\nimport \"../../components/ha-control-slider\";\nimport \"../../components/ha-svg-icon\";\nimport {\n  ValveEntity,\n  ValveEntityFeature,\n  canClose,\n  canOpen,\n  canStop,\n} from \"../../data/valve\";\nimport { HomeAssistant } from \"../../types\";\n\ntype ValveButton = \"open\" | \"close\" | \"stop\" | \"none\";\n\nexport const getValveButtons = memoizeOne(\n  (stateObj: ValveEntity): ValveButton[] => {\n    const supportsOpen = supportsFeature(stateObj, ValveEntityFeature.OPEN);\n    const supportsClose = supportsFeature(stateObj, ValveEntityFeature.CLOSE);\n    const supportsStop = supportsFeature(stateObj, ValveEntityFeature.STOP);\n\n    const buttons: ValveButton[] = [];\n    if (supportsOpen) buttons.push(\"open\");\n    if (supportsStop) buttons.push(\"stop\");\n    if (supportsClose) buttons.push(\"close\");\n    return buttons;\n  }\n);\n\n@customElement(\"ha-state-control-valve-buttons\")\nexport class HaStateControlValveButtons extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: ValveEntity;\n\n  private _onOpenTap(ev): void {\n    ev.stopPropagation();\n    this.hass!.callService(\"valve\", \"open_valve\", {\n      entity_id: this.stateObj!.entity_id,\n    });\n  }\n\n  private _onCloseTap(ev): void {\n    ev.stopPropagation();\n    this.hass!.callService(\"valve\", \"close_valve\", {\n      entity_id: this.stateObj!.entity_id,\n    });\n  }\n\n  private _onStopTap(ev): void {\n    ev.stopPropagation();\n    this.hass!.callService(\"valve\", \"stop_valve\", {\n      entity_id: this.stateObj!.entity_id,\n    });\n  }\n\n  protected renderButton(button: ValveButton | undefined) {\n    if (button === \"open\") {\n      return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.open_valve\")}\n          @click=${this._onOpenTap}\n          .disabled=${!canOpen(this.stateObj)}\n          data-button=\"open\"\n        >\n          <ha-svg-icon .path=${mdiValveOpen}></ha-svg-icon>\n        </ha-control-button>\n      `;\n    }\n    if (button === \"close\") {\n      return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.close_valve\")}\n          @click=${this._onCloseTap}\n          .disabled=${!canClose(this.stateObj)}\n          data-button=\"close\"\n        >\n          <ha-svg-icon .path=${mdiValveClosed}></ha-svg-icon>\n        </ha-control-button>\n      `;\n    }\n    if (button === \"stop\") {\n      return html`\n        <ha-control-button\n          .label=${this.hass.localize(\"ui.card.valve.stop_valve\")}\n          @click=${this._onStopTap}\n          .disabled=${!canStop(this.stateObj)}\n          data-button=\"stop\"\n        >\n          <ha-svg-icon .path=${mdiStop}></ha-svg-icon>\n        </ha-control-button>\n      `;\n    }\n    return nothing;\n  }\n\n  protected render(): TemplateResult {\n    const buttons = getValveButtons(this.stateObj);\n\n    return html`\n      <ha-control-button-group vertical>\n        ${repeat(\n          buttons,\n          (button) => button,\n          (button) => this.renderButton(button)\n        )}\n      </ha-control-button-group>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-button-group {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-button-group-spacing: 6px;\n        --control-button-group-thickness: 100px;\n      }\n      ha-control-button {\n        --control-button-border-radius: 18px;\n        --mdc-icon-size: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-valve-buttons\": HaStateControlValveButtons;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}