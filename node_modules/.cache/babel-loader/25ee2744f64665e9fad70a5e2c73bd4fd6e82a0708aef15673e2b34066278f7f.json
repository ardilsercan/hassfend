{"ast":null,"code":"export const normalize = (value, min, max) => {\n  if (isNaN(value) || isNaN(min) || isNaN(max)) {\n    // Not a number, return 0\n    return 0;\n  }\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n};\nexport const getValueInPercentage = (value, min, max) => {\n  const newMax = max - min;\n  const newVal = value - min;\n  return 100 * newVal / newMax;\n};\nexport const roundWithOneDecimal = value => Math.round(value * 10) / 10;","map":{"version":3,"names":["normalize","value","min","max","isNaN","getValueInPercentage","newMax","newVal","roundWithOneDecimal","Math","round"],"sources":["/Users/sercanardil/Desktop/frontend/src/util/calculate.ts"],"sourcesContent":["export const normalize = (value: number, min: number, max: number): number => {\n  if (isNaN(value) || isNaN(min) || isNaN(max)) {\n    // Not a number, return 0\n    return 0;\n  }\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n};\n\nexport const getValueInPercentage = (\n  value: number,\n  min: number,\n  max: number\n): number => {\n  const newMax = max - min;\n  const newVal = value - min;\n  return (100 * newVal) / newMax;\n};\n\nexport const roundWithOneDecimal = (value: number): number =>\n  Math.round(value * 10) / 10;\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAGA,CAACC,KAAa,EAAEC,GAAW,EAAEC,GAAW,KAAa;EAC5E,IAAIC,KAAK,CAACH,KAAK,CAAC,IAAIG,KAAK,CAACF,GAAG,CAAC,IAAIE,KAAK,CAACD,GAAG,CAAC,EAAE;IAC5C;IACA,OAAO,CAAC;EACV;EACA,IAAIF,KAAK,GAAGE,GAAG,EAAE,OAAOA,GAAG;EAC3B,IAAIF,KAAK,GAAGC,GAAG,EAAE,OAAOA,GAAG;EAC3B,OAAOD,KAAK;AACd,CAAC;AAED,OAAO,MAAMI,oBAAoB,GAAGA,CAClCJ,KAAa,EACbC,GAAW,EACXC,GAAW,KACA;EACX,MAAMG,MAAM,GAAGH,GAAG,GAAGD,GAAG;EACxB,MAAMK,MAAM,GAAGN,KAAK,GAAGC,GAAG;EAC1B,OAAQ,GAAG,GAAGK,MAAM,GAAID,MAAM;AAChC,CAAC;AAED,OAAO,MAAME,mBAAmB,GAAIP,KAAa,IAC/CQ,IAAI,CAACC,KAAK,CAACT,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}