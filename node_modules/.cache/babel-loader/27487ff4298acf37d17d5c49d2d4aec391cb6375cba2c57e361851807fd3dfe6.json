{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\nimport { internals } from '../../labs/behaviors/element-internals.js';\n/**\n * Sets up an element's constructor to enable form submission. The element\n * instance should be form associated and have a `type` property.\n *\n * A click listener is added to each element instance. If the click is not\n * default prevented, it will submit the element's form, if any.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   static {\n *     setupFormSubmitter(MyElement);\n *   }\n *\n *   static formAssociated = true;\n *\n *   type: FormSubmitterType = 'submit';\n * }\n * ```\n *\n * @param ctor The form submitter element's constructor.\n */\nexport function setupFormSubmitter(ctor) {\n  if (isServer) {\n    return;\n  }\n  ctor.addInitializer(function (instance) {\n    var submitter = instance;\n    submitter.addEventListener('click', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n        var type, elementInternals, form;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              type = submitter.type, elementInternals = submitter[internals];\n              form = elementInternals.form;\n              if (!(!form || type === 'button')) {\n                _context.next = 4;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 4:\n              _context.next = 6;\n              return new Promise(function (resolve) {\n                setTimeout(resolve);\n              });\n            case 6:\n              if (!event.defaultPrevented) {\n                _context.next = 8;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 8:\n              if (!(type === 'reset')) {\n                _context.next = 11;\n                break;\n              }\n              form.reset();\n              return _context.abrupt(\"return\");\n            case 11:\n              // form.requestSubmit(submitter) does not work with form associated custom\n              // elements. This patches the dispatched submit event to add the correct\n              // `submitter`.\n              // See https://github.com/WICG/webcomponents/issues/814\n              form.addEventListener('submit', function (submitEvent) {\n                Object.defineProperty(submitEvent, 'submitter', {\n                  configurable: true,\n                  enumerable: true,\n                  get: function get() {\n                    return submitter;\n                  }\n                });\n              }, {\n                capture: true,\n                once: true\n              });\n              elementInternals.setFormValue(submitter.value);\n              form.requestSubmit();\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  });\n}","map":{"version":3,"names":["isServer","internals","setupFormSubmitter","ctor","addInitializer","instance","submitter","addEventListener","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","type","elementInternals","form","wrap","_callee$","_context","prev","next","abrupt","Promise","resolve","setTimeout","defaultPrevented","reset","submitEvent","Object","defineProperty","configurable","enumerable","get","capture","once","setFormValue","value","requestSubmit","stop","_x","apply","arguments"],"sources":["form-submitter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveElement} from 'lit';\n\nimport {\n  internals,\n  WithElementInternals,\n} from '../../labs/behaviors/element-internals.js';\n\n/**\n * A string indicating the form submission behavior of the element.\n *\n * - submit: The element submits the form. This is the default value if the\n * attribute is not specified, or if it is dynamically changed to an empty or\n * invalid value.\n * - reset: The element resets the form.\n * - button: The element does nothing.\n */\nexport type FormSubmitterType = 'button' | 'submit' | 'reset';\n\n/**\n * An element that can submit or reset a `<form>`, similar to\n * `<button type=\"submit\">`.\n */\nexport interface FormSubmitter extends ReactiveElement, WithElementInternals {\n  /**\n   * A string indicating the form submission behavior of the element.\n   *\n   * - submit: The element submits the form. This is the default value if the\n   * attribute is not specified, or if it is dynamically changed to an empty or\n   * invalid value.\n   * - reset: The element resets the form.\n   * - button: The element does nothing.\n   */\n  type: FormSubmitterType;\n\n  /**\n   * The HTML name to use in form submission. When combined with a `value`, the\n   * submitting button's name/value will be added to the form.\n   *\n   * Names must reflect to a `name` attribute for form integration.\n   */\n  name: string;\n\n  /**\n   * The value of the button. When combined with a `name`, the submitting\n   * button's name/value will be added to the form.\n   */\n  value: string;\n}\n\ntype FormSubmitterConstructor =\n  | (new () => FormSubmitter)\n  | (abstract new () => FormSubmitter);\n\n/**\n * Sets up an element's constructor to enable form submission. The element\n * instance should be form associated and have a `type` property.\n *\n * A click listener is added to each element instance. If the click is not\n * default prevented, it will submit the element's form, if any.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   static {\n *     setupFormSubmitter(MyElement);\n *   }\n *\n *   static formAssociated = true;\n *\n *   type: FormSubmitterType = 'submit';\n * }\n * ```\n *\n * @param ctor The form submitter element's constructor.\n */\nexport function setupFormSubmitter(ctor: FormSubmitterConstructor) {\n  if (isServer) {\n    return;\n  }\n\n  (ctor as unknown as typeof ReactiveElement).addInitializer((instance) => {\n    const submitter = instance as FormSubmitter;\n    submitter.addEventListener('click', async (event) => {\n      const {type, [internals]: elementInternals} = submitter;\n      const {form} = elementInternals;\n      if (!form || type === 'button') {\n        return;\n      }\n\n      // Wait a full task for event bubbling to complete.\n      await new Promise<void>((resolve) => {\n        setTimeout(resolve);\n      });\n\n      if (event.defaultPrevented) {\n        return;\n      }\n\n      if (type === 'reset') {\n        form.reset();\n        return;\n      }\n\n      // form.requestSubmit(submitter) does not work with form associated custom\n      // elements. This patches the dispatched submit event to add the correct\n      // `submitter`.\n      // See https://github.com/WICG/webcomponents/issues/814\n      form.addEventListener(\n        'submit',\n        (submitEvent) => {\n          Object.defineProperty(submitEvent, 'submitter', {\n            configurable: true,\n            enumerable: true,\n            get: () => submitter,\n          });\n        },\n        {capture: true, once: true},\n      );\n\n      elementInternals.setFormValue(submitter.value);\n      form.requestSubmit();\n    });\n  });\n}\n"],"mappings":";;;;AAAA;;;;;AAMA,SAAQA,QAAQ,QAAwB,KAAK;AAE7C,SACEC,SAAS,QAEJ,2CAA2C;AAgDlD;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,SAAUC,kBAAkBA,CAACC,IAA8B;EAC/D,IAAIH,QAAQ,EAAE;IACZ;;EAGDG,IAA0C,CAACC,cAAc,CAAC,UAACC,QAAQ,EAAI;IACtE,IAAMC,SAAS,GAAGD,QAAyB;IAC3CC,SAAS,CAACC,gBAAgB,CAAC,OAAO;MAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAE,SAAAC,QAAOC,KAAK;QAAA,IAAAC,IAAA,EAAAC,gBAAA,EAAAC,IAAA;QAAA,OAAAN,mBAAA,GAAAO,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACvCP,IAAI,GAAmCR,SAAS,CAAhDQ,IAAI,EAAeC,gBAAgB,GAAIT,SAAS,CAAzCL,SAAS;cAChBe,IAAI,GAAID,gBAAgB,CAAxBC,IAAI;cAAA,MACP,CAACA,IAAI,IAAIF,IAAI,KAAK,QAAQ;gBAAAK,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA;YAAA;cAAAH,QAAA,CAAAE,IAAA;cAAA,OAKxB,IAAIE,OAAO,CAAO,UAACC,OAAO,EAAI;gBAClCC,UAAU,CAACD,OAAO,CAAC;cACrB,CAAC,CAAC;YAAA;cAAA,KAEEX,KAAK,CAACa,gBAAgB;gBAAAP,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAAA,OAAAF,QAAA,CAAAG,MAAA;YAAA;cAAA,MAItBR,IAAI,KAAK,OAAO;gBAAAK,QAAA,CAAAE,IAAA;gBAAA;cAAA;cAClBL,IAAI,CAACW,KAAK,EAAE;cAAC,OAAAR,QAAA,CAAAG,MAAA;YAAA;cAIf;cACA;cACA;cACA;cACAN,IAAI,CAACT,gBAAgB,CACnB,QAAQ,EACR,UAACqB,WAAW,EAAI;gBACdC,MAAM,CAACC,cAAc,CAACF,WAAW,EAAE,WAAW,EAAE;kBAC9CG,YAAY,EAAE,IAAI;kBAClBC,UAAU,EAAE,IAAI;kBAChBC,GAAG,EAAE,SAAAA,IAAA;oBAAA,OAAM3B,SAAS;kBAAA;iBACrB,CAAC;cACJ,CAAC,EACD;gBAAC4B,OAAO,EAAE,IAAI;gBAAEC,IAAI,EAAE;cAAI,CAAC,CAC5B;cAEDpB,gBAAgB,CAACqB,YAAY,CAAC9B,SAAS,CAAC+B,KAAK,CAAC;cAC9CrB,IAAI,CAACsB,aAAa,EAAE;YAAC;YAAA;cAAA,OAAAnB,QAAA,CAAAoB,IAAA;UAAA;QAAA,GAAA3B,OAAA;MAAA,CACtB;MAAA,iBAAA4B,EAAA;QAAA,OAAAhC,IAAA,CAAAiC,KAAA,OAAAC,SAAA;MAAA;IAAA,IAAC;EACJ,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}