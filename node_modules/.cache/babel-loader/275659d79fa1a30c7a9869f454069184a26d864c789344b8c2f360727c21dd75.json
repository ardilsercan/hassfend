{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { wrap } from \"comlink\";\nvar worker;\nexport var renderMarkdown = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(content, markedOptions, hassOptions) {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!worker) {\n            worker = wrap(new Worker( /* webpackChunkName: \"markdown-worker\" */\n            new URL(\"./markdown-worker\", import.meta.url)));\n          }\n          return _context.abrupt(\"return\", worker.renderMarkdown(content, markedOptions, hassOptions));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function renderMarkdown(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["wrap","worker","renderMarkdown","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","content","markedOptions","hassOptions","_callee$","_context","prev","next","Worker","URL","import","meta","url","abrupt","stop","_x","_x2","_x3","apply","arguments"],"sources":["/Users/sercanardil/Desktop/frontend/src/resources/render-markdown.ts"],"sourcesContent":["import { Remote, wrap } from \"comlink\";\nimport type { Api } from \"./markdown-worker\";\n\ntype RenderMarkdownType = Api[\"renderMarkdown\"];\ntype RenderMarkdownParamTypes = Parameters<RenderMarkdownType>;\n\nlet worker: Remote<Api> | undefined;\n\nexport const renderMarkdown = async (\n  content: RenderMarkdownParamTypes[0],\n  markedOptions: RenderMarkdownParamTypes[1],\n  hassOptions?: RenderMarkdownParamTypes[2]\n): Promise<ReturnType<RenderMarkdownType>> => {\n  if (!worker) {\n    worker = wrap(\n      new Worker(\n        /* webpackChunkName: \"markdown-worker\" */\n        new URL(\"./markdown-worker\", import.meta.url)\n      )\n    );\n  }\n  return worker.renderMarkdown(content, markedOptions, hassOptions);\n};\n"],"mappings":";;;;;;;;;;;AAAA,SAAiBA,IAAI,QAAQ,SAAS;AAMtC,IAAIC,MAA+B;AAEnC,OAAO,IAAMC,cAAc;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QAC5BC,OAAoC,EACpCC,aAA0C,EAC1CC,WAAyC;IAAA,OAAAL,mBAAA,GAAAL,IAAA,UAAAW,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UAEzC,IAAI,CAACb,MAAM,EAAE;YACXA,MAAM,GAAGD,IAAI,CACX,IAAIe,MAAM,EACR;YACA,IAAIC,GAAG,CAAC,mBAAmB,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAC9C,CACF,CAAC;UACH;UAAC,OAAAP,QAAA,CAAAQ,MAAA,WACMnB,MAAM,CAACC,cAAc,CAACM,OAAO,EAAEC,aAAa,EAAEC,WAAW,CAAC;QAAA;QAAA;UAAA,OAAAE,QAAA,CAAAS,IAAA;MAAA;IAAA,GAAAd,OAAA;EAAA,CAClE;EAAA,gBAdYL,cAAcA,CAAAoB,EAAA,EAAAC,GAAA,EAAAC,GAAA;IAAA,OAAArB,IAAA,CAAAsB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAc1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}