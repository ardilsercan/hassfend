{"ast":null,"code":"import memoizeOne from \"memoize-one\";\nvar collator = memoizeOne(function (language) {\n  return new Intl.Collator(language);\n});\nvar caseInsensitiveCollator = memoizeOne(function (language) {\n  return new Intl.Collator(language, {\n    sensitivity: \"accent\"\n  });\n});\nvar fallbackStringCompare = function fallbackStringCompare(a, b) {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\nexport var stringCompare = function stringCompare(a, b) {\n  var _Intl;\n  var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  // @ts-ignore\n  if ((_Intl = Intl) !== null && _Intl !== void 0 && _Intl.Collator) {\n    return collator(language).compare(a, b);\n  }\n  return fallbackStringCompare(a, b);\n};\nexport var caseInsensitiveStringCompare = function caseInsensitiveStringCompare(a, b) {\n  var _Intl2;\n  var language = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;\n  // @ts-ignore\n  if ((_Intl2 = Intl) !== null && _Intl2 !== void 0 && _Intl2.Collator) {\n    return caseInsensitiveCollator(language).compare(a, b);\n  }\n  return fallbackStringCompare(a.toLowerCase(), b.toLowerCase());\n};","map":{"version":3,"names":["memoizeOne","collator","language","Intl","Collator","caseInsensitiveCollator","sensitivity","fallbackStringCompare","a","b","stringCompare","_Intl","arguments","length","undefined","compare","caseInsensitiveStringCompare","_Intl2","toLowerCase"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/string/compare.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\n\nconst collator = memoizeOne(\n  (language: string | undefined) => new Intl.Collator(language)\n);\n\nconst caseInsensitiveCollator = memoizeOne(\n  (language: string | undefined) =>\n    new Intl.Collator(language, { sensitivity: \"accent\" })\n);\n\nconst fallbackStringCompare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const stringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return collator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a, b);\n};\n\nexport const caseInsensitiveStringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return caseInsensitiveCollator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a.toLowerCase(), b.toLowerCase());\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AAEpC,IAAMC,QAAQ,GAAGD,UAAU,CACzB,UAACE,QAA4B;EAAA,OAAK,IAAIC,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAAC;AAAA,CAC/D,CAAC;AAED,IAAMG,uBAAuB,GAAGL,UAAU,CACxC,UAACE,QAA4B;EAAA,OAC3B,IAAIC,IAAI,CAACC,QAAQ,CAACF,QAAQ,EAAE;IAAEI,WAAW,EAAE;EAAS,CAAC,CAAC;AAAA,CAC1D,CAAC;AAED,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAIC,CAAS,EAAEC,CAAS,EAAK;EACtD,IAAID,CAAC,GAAGC,CAAC,EAAE;IACT,OAAO,CAAC,CAAC;EACX;EACA,IAAID,CAAC,GAAGC,CAAC,EAAE;IACT,OAAO,CAAC;EACV;EAEA,OAAO,CAAC;AACV,CAAC;AAED,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAaA,CACxBF,CAAS,EACTC,CAAS,EAEN;EAAA,IAAAE,KAAA;EAAA,IADHT,QAA4B,GAAAU,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;EAExC;EACA,KAAAH,KAAA,GAAIR,IAAI,cAAAQ,KAAA,eAAJA,KAAA,CAAMP,QAAQ,EAAE;IAClB,OAAOH,QAAQ,CAACC,QAAQ,CAAC,CAACa,OAAO,CAACP,CAAC,EAAEC,CAAC,CAAC;EACzC;EAEA,OAAOF,qBAAqB,CAACC,CAAC,EAAEC,CAAC,CAAC;AACpC,CAAC;AAED,OAAO,IAAMO,4BAA4B,GAAG,SAA/BA,4BAA4BA,CACvCR,CAAS,EACTC,CAAS,EAEN;EAAA,IAAAQ,MAAA;EAAA,IADHf,QAA4B,GAAAU,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGE,SAAS;EAExC;EACA,KAAAG,MAAA,GAAId,IAAI,cAAAc,MAAA,eAAJA,MAAA,CAAMb,QAAQ,EAAE;IAClB,OAAOC,uBAAuB,CAACH,QAAQ,CAAC,CAACa,OAAO,CAACP,CAAC,EAAEC,CAAC,CAAC;EACxD;EAEA,OAAOF,qBAAqB,CAACC,CAAC,CAACU,WAAW,CAAC,CAAC,EAAET,CAAC,CAACS,WAAW,CAAC,CAAC,CAAC;AAChE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}