{"ast":null,"code":"// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nexport const ERROR_STATES = [\"migration_error\", \"setup_error\", \"setup_retry\"];\n\n// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nexport const RECOVERABLE_STATES = [\"not_loaded\", \"loaded\", \"setup_error\", \"setup_retry\"];\nexport const subscribeConfigEntries = (hass, callbackFunction, filters) => {\n  const params = {\n    type: \"config_entries/subscribe\"\n  };\n  if (filters && filters.type) {\n    params.type_filter = filters.type;\n  }\n  return hass.connection.subscribeMessage(message => callbackFunction(message), params);\n};\nexport const getConfigEntries = (hass, filters) => {\n  const params = {};\n  if (filters) {\n    if (filters.type) {\n      params.type_filter = filters.type;\n    }\n    if (filters.domain) {\n      params.domain = filters.domain;\n    }\n  }\n  return hass.callWS({\n    type: \"config_entries/get\",\n    ...params\n  });\n};\nexport const getConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/get_single\",\n  entry_id: configEntryId\n});\nexport const updateConfigEntry = (hass, configEntryId, updatedValues) => hass.callWS({\n  type: \"config_entries/update\",\n  entry_id: configEntryId,\n  ...updatedValues\n});\nexport const deleteConfigEntry = (hass, configEntryId) => hass.callApi(\"DELETE\", `config/config_entries/entry/${configEntryId}`);\nexport const reloadConfigEntry = (hass, configEntryId) => hass.callApi(\"POST\", `config/config_entries/entry/${configEntryId}/reload`);\nexport const disableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: \"user\"\n});\nexport const enableConfigEntry = (hass, configEntryId) => hass.callWS({\n  type: \"config_entries/disable\",\n  entry_id: configEntryId,\n  disabled_by: null\n});\nexport const sortConfigEntries = (configEntries, manifestLookup) => {\n  const sortedConfigEntries = [...configEntries];\n  const getScore = entry => {\n    const manifest = manifestLookup[entry.domain];\n    const isHelper = (manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) === \"helper\";\n    return isHelper ? -1 : 1;\n  };\n  const configEntriesCompare = (a, b) => getScore(b) - getScore(a);\n  return sortedConfigEntries.sort(configEntriesCompare);\n};","map":{"version":3,"names":["ERROR_STATES","RECOVERABLE_STATES","subscribeConfigEntries","hass","callbackFunction","filters","params","type","type_filter","connection","subscribeMessage","message","getConfigEntries","domain","callWS","getConfigEntry","configEntryId","entry_id","updateConfigEntry","updatedValues","deleteConfigEntry","callApi","reloadConfigEntry","disableConfigEntry","disabled_by","enableConfigEntry","sortConfigEntries","configEntries","manifestLookup","sortedConfigEntries","getScore","entry","manifest","isHelper","integration_type","configEntriesCompare","a","b","sort"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/config_entries.ts"],"sourcesContent":["import type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport type { HomeAssistant } from \"../types\";\nimport type { IntegrationManifest, IntegrationType } from \"./integration\";\n\nexport interface ConfigEntry {\n  entry_id: string;\n  domain: string;\n  title: string;\n  source: string;\n  state:\n    | \"loaded\"\n    | \"setup_error\"\n    | \"migration_error\"\n    | \"setup_retry\"\n    | \"not_loaded\"\n    | \"failed_unload\"\n    | \"setup_in_progress\";\n  supports_options: boolean;\n  supports_remove_device: boolean;\n  supports_unload: boolean;\n  pref_disable_new_entities: boolean;\n  pref_disable_polling: boolean;\n  disabled_by: \"user\" | null;\n  reason: string | null;\n}\n\nexport type ConfigEntryMutableParams = Partial<\n  Pick<\n    ConfigEntry,\n    \"title\" | \"pref_disable_new_entities\" | \"pref_disable_polling\"\n  >\n>;\n\n// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nexport const ERROR_STATES: ConfigEntry[\"state\"][] = [\n  \"migration_error\",\n  \"setup_error\",\n  \"setup_retry\",\n];\n\n// https://github.com/home-assistant/core/blob/2286dea636fda001f03433ba14d7adbda43979e5/homeassistant/config_entries.py#L81\nexport const RECOVERABLE_STATES: ConfigEntry[\"state\"][] = [\n  \"not_loaded\",\n  \"loaded\",\n  \"setup_error\",\n  \"setup_retry\",\n];\n\nexport interface ConfigEntryUpdate {\n  // null means no update as is the current state\n  type: null | \"added\" | \"removed\" | \"updated\";\n  entry: ConfigEntry;\n}\n\nexport const subscribeConfigEntries = (\n  hass: HomeAssistant,\n  callbackFunction: (message: ConfigEntryUpdate[]) => void,\n  filters?: {\n    type?: IntegrationType[];\n    domain?: string;\n  }\n): Promise<UnsubscribeFunc> => {\n  const params: any = {\n    type: \"config_entries/subscribe\",\n  };\n  if (filters && filters.type) {\n    params.type_filter = filters.type;\n  }\n  return hass.connection.subscribeMessage<ConfigEntryUpdate[]>(\n    (message) => callbackFunction(message),\n    params\n  );\n};\n\nexport const getConfigEntries = (\n  hass: HomeAssistant,\n  filters?: {\n    type?: IntegrationType[];\n    domain?: string;\n  }\n): Promise<ConfigEntry[]> => {\n  const params: any = {};\n  if (filters) {\n    if (filters.type) {\n      params.type_filter = filters.type;\n    }\n    if (filters.domain) {\n      params.domain = filters.domain;\n    }\n  }\n  return hass.callWS<ConfigEntry[]>({\n    type: \"config_entries/get\",\n    ...params,\n  });\n};\n\nexport const getConfigEntry = (hass: HomeAssistant, configEntryId: string) =>\n  hass.callWS<{ config_entry: ConfigEntry }>({\n    type: \"config_entries/get_single\",\n    entry_id: configEntryId,\n  });\n\nexport const updateConfigEntry = (\n  hass: HomeAssistant,\n  configEntryId: string,\n  updatedValues: ConfigEntryMutableParams\n) =>\n  hass.callWS<{ require_restart: boolean; config_entry: ConfigEntry }>({\n    type: \"config_entries/update\",\n    entry_id: configEntryId,\n    ...updatedValues,\n  });\n\nexport const deleteConfigEntry = (hass: HomeAssistant, configEntryId: string) =>\n  hass.callApi<{\n    require_restart: boolean;\n  }>(\"DELETE\", `config/config_entries/entry/${configEntryId}`);\n\nexport const reloadConfigEntry = (hass: HomeAssistant, configEntryId: string) =>\n  hass.callApi<{\n    require_restart: boolean;\n  }>(\"POST\", `config/config_entries/entry/${configEntryId}/reload`);\n\nexport interface DisableConfigEntryResult {\n  require_restart: boolean;\n}\n\nexport const disableConfigEntry = (\n  hass: HomeAssistant,\n  configEntryId: string\n) =>\n  hass.callWS<DisableConfigEntryResult>({\n    type: \"config_entries/disable\",\n    entry_id: configEntryId,\n    disabled_by: \"user\",\n  });\n\nexport const enableConfigEntry = (hass: HomeAssistant, configEntryId: string) =>\n  hass.callWS<{\n    require_restart: boolean;\n  }>({\n    type: \"config_entries/disable\",\n    entry_id: configEntryId,\n    disabled_by: null,\n  });\n\nexport const sortConfigEntries = (\n  configEntries: ConfigEntry[],\n  manifestLookup: { [domain: string]: IntegrationManifest }\n): ConfigEntry[] => {\n  const sortedConfigEntries = [...configEntries];\n\n  const getScore = (entry: ConfigEntry) => {\n    const manifest = manifestLookup[entry.domain] as\n      | IntegrationManifest\n      | undefined;\n    const isHelper = manifest?.integration_type === \"helper\";\n    return isHelper ? -1 : 1;\n  };\n\n  const configEntriesCompare = (a: ConfigEntry, b: ConfigEntry) =>\n    getScore(b) - getScore(a);\n\n  return sortedConfigEntries.sort(configEntriesCompare);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}