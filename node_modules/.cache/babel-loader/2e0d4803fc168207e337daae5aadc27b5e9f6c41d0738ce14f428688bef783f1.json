{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { __assign, __extends } from \"tslib\";\nimport { MDCFoundation } from '@material/base/foundation';\nimport { cssClasses, numbers, strings } from './constants';\nvar MDCNotchedOutlineFoundation = /** @class */function (_super) {\n  __extends(MDCNotchedOutlineFoundation, _super);\n  function MDCNotchedOutlineFoundation(adapter) {\n    return _super.call(this, __assign(__assign({}, MDCNotchedOutlineFoundation.defaultAdapter), adapter)) || this;\n  }\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"strings\", {\n    get: function () {\n      return strings;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"cssClasses\", {\n    get: function () {\n      return cssClasses;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"numbers\", {\n    get: function () {\n      return numbers;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MDCNotchedOutlineFoundation, \"defaultAdapter\", {\n    /**\n     * See {@link MDCNotchedOutlineAdapter} for typing information on parameters and return types.\n     */\n    get: function () {\n      // tslint:disable:object-literal-sort-keys Methods should be in the same order as the adapter interface.\n      return {\n        addClass: function () {\n          return undefined;\n        },\n        removeClass: function () {\n          return undefined;\n        },\n        setNotchWidthProperty: function () {\n          return undefined;\n        },\n        removeNotchWidthProperty: function () {\n          return undefined;\n        }\n      };\n      // tslint:enable:object-literal-sort-keys\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Adds the outline notched selector and updates the notch width calculated based off of notchWidth.\n   */\n  MDCNotchedOutlineFoundation.prototype.notch = function (notchWidth) {\n    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;\n    if (notchWidth > 0) {\n      notchWidth += numbers.NOTCH_ELEMENT_PADDING; // Add padding from left/right.\n    }\n    this.adapter.setNotchWidthProperty(notchWidth);\n    this.adapter.addClass(OUTLINE_NOTCHED);\n  };\n  /**\n   * Removes notched outline selector to close the notch in the outline.\n   */\n  MDCNotchedOutlineFoundation.prototype.closeNotch = function () {\n    var OUTLINE_NOTCHED = MDCNotchedOutlineFoundation.cssClasses.OUTLINE_NOTCHED;\n    this.adapter.removeClass(OUTLINE_NOTCHED);\n    this.adapter.removeNotchWidthProperty();\n  };\n  return MDCNotchedOutlineFoundation;\n}(MDCFoundation);\nexport { MDCNotchedOutlineFoundation };\n// tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.\nexport default MDCNotchedOutlineFoundation;","map":{"version":3,"names":["MDCFoundation","cssClasses","numbers","strings","MDCNotchedOutlineFoundation","_super","__extends","adapter","call","__assign","defaultAdapter","Object","defineProperty","get","addClass","undefined","removeClass","setNotchWidthProperty","removeNotchWidthProperty","prototype","notch","notchWidth","OUTLINE_NOTCHED","NOTCH_ELEMENT_PADDING","closeNotch"],"sources":["foundation.ts"],"sourcesContent":[null],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAAQA,aAAa,QAAO,2BAA2B;AAEvD,SAAQC,UAAU,EAAEC,OAAO,EAAEC,OAAO,QAAO,aAAa;AAExD,IAAAC,2BAAA,0BAAAC,MAAA;EAAiDC,SAAA,CAAAF,2BAAA,EAAAC,MAAA;EA2B/C,SAAAD,4BAAYG,OAA2C;WACrDF,MAAA,CAAAG,IAAA,OAAAC,QAAA,CAAAA,QAAA,KAAUL,2BAA2B,CAACM,cAAc,GAAKH,OAAO,EAAE;EACpE;EA5BAI,MAAA,CAAAC,cAAA,CAAoBR,2BAAA,WAAO;SAA3B,SAAAS,CAAA;MACE,OAAOV,OAAO;IAChB,CAAC;;;;EAEDQ,MAAA,CAAAC,cAAA,CAAoBR,2BAAA,cAAU;SAA9B,SAAAS,CAAA;MACE,OAAOZ,UAAU;IACnB,CAAC;;;;EAEDU,MAAA,CAAAC,cAAA,CAAoBR,2BAAA,WAAO;SAA3B,SAAAS,CAAA;MACE,OAAOX,OAAO;IAChB,CAAC;;;;EAKDS,MAAA,CAAAC,cAAA,CAAoBR,2BAAA,kBAAc;IAHlC;;;SAGA,SAAAS,CAAA;MACE;MACA,OAAO;QACLC,QAAQ,EAAE,SAAAA,CAAA;UAAM,OAAAC,SAAS;QAAT,CAAS;QACzBC,WAAW,EAAE,SAAAA,CAAA;UAAM,OAAAD,SAAS;QAAT,CAAS;QAC5BE,qBAAqB,EAAE,SAAAA,CAAA;UAAM,OAAAF,SAAS;QAAT,CAAS;QACtCG,wBAAwB,EAAE,SAAAA,CAAA;UAAM,OAAAH,SAAS;QAAT;OACjC;MACD;IACF,CAAC;;;;EAMD;;;EAGAX,2BAAA,CAAAe,SAAA,CAAAC,KAAK,GAAL,UAAMC,UAAkB;IACf,IAAAC,eAAe,GAAIlB,2BAA2B,CAACH,UAAU,CAAAqB,eAA1C;IAEtB,IAAID,UAAU,GAAG,CAAC,EAAE;MAClBA,UAAU,IAAInB,OAAO,CAACqB,qBAAqB,CAAC,CAAC;;IAG/C,IAAI,CAAChB,OAAO,CAACU,qBAAqB,CAACI,UAAU,CAAC;IAC9C,IAAI,CAACd,OAAO,CAACO,QAAQ,CAACQ,eAAe,CAAC;EACxC,CAAC;EAED;;;EAGAlB,2BAAA,CAAAe,SAAA,CAAAK,UAAU,GAAV;IACS,IAAAF,eAAe,GAAIlB,2BAA2B,CAACH,UAAU,CAAAqB,eAA1C;IACtB,IAAI,CAACf,OAAO,CAACS,WAAW,CAACM,eAAe,CAAC;IACzC,IAAI,CAACf,OAAO,CAACW,wBAAwB,EAAE;EACzC,CAAC;EACH,OAAAd,2BAAC;AAAD,CAAC,CArDgDJ,aAAa;;AAuD9D;AACA,eAAeI,2BAA2B"},"metadata":{},"sourceType":"module","externalDependencies":[]}