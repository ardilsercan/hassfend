{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiStar = \"M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-checkbox\";\nimport \"./ha-settings-row\";\nimport \"./ha-svg-icon\";\nconst format_addresses = addresses => html`${addresses.map((address, i) => [html`<span>${address.address}/${address.network_prefix}</span>`, i < addresses.length - 1 ? \", \" : nothing])}`;\nconst format_auto_detected_interfaces = adapters => adapters.map(adapter => adapter.auto ? html`${adapter.name}\n        (${format_addresses([...adapter.ipv4, ...adapter.ipv6])})` : \"\");\nexport let HaNetwork = _decorate([customElement(\"ha-network\")], function (_initialize, _LitElement) {\n  class HaNetwork extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaNetwork,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"networkConfig\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_expanded\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.networkConfig === undefined) {\n          return nothing;\n        }\n        const configured_adapters = this.networkConfig.configured_adapters || [];\n        return html`\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            id=\"auto_configure\"\n            @change=${this._handleAutoConfigureCheckboxClick}\n            .checked=${!configured_adapters.length}\n            name=\"auto_configure\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"auto_configure\"> Auto Configure </span>\n        <span slot=\"description\" data-for=\"auto_configure\">\n          Detected:\n          ${format_auto_detected_interfaces(this.networkConfig.adapters)}\n        </span>\n      </ha-settings-row>\n      ${configured_adapters.length || this._expanded ? this.networkConfig.adapters.map(adapter => html`<ha-settings-row>\n                <span slot=\"prefix\">\n                  <ha-checkbox\n                    id=${adapter.name}\n                    @change=${this._handleAdapterCheckboxClick}\n                    .checked=${configured_adapters.includes(adapter.name)}\n                    .adapter=${adapter.name}\n                    name=${adapter.name}\n                  >\n                  </ha-checkbox>\n                </span>\n                <span slot=\"heading\">\n                  Adapter: ${adapter.name}\n                  ${adapter.default ? html`<ha-svg-icon .path=${mdiStar}></ha-svg-icon>\n                        (Default)` : \"\"}\n                </span>\n                <span slot=\"description\">\n                  ${format_addresses([...adapter.ipv4, ...adapter.ipv6])}\n                </span>\n              </ha-settings-row>`) : \"\"}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAutoConfigureCheckboxClick\",\n      value: function _handleAutoConfigureCheckboxClick(ev) {\n        const checkbox = ev.currentTarget;\n        if (this.networkConfig === undefined) {\n          return;\n        }\n        let configured_adapters = [...this.networkConfig.configured_adapters];\n        if (checkbox.checked) {\n          this._expanded = false;\n          configured_adapters = [];\n        } else {\n          this._expanded = true;\n          for (const adapter of this.networkConfig.adapters) {\n            if (adapter.default) {\n              configured_adapters = [adapter.name];\n              break;\n            }\n          }\n        }\n        fireEvent(this, \"network-config-changed\", {\n          configured_adapters: configured_adapters\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAdapterCheckboxClick\",\n      value: function _handleAdapterCheckboxClick(ev) {\n        const checkbox = ev.currentTarget;\n        const adapter_name = checkbox.name;\n        if (this.networkConfig === undefined) {\n          return;\n        }\n        const configured_adapters = [...this.networkConfig.configured_adapters];\n        if (checkbox.checked) {\n          configured_adapters.push(adapter_name);\n        } else {\n          const index = configured_adapters.indexOf(adapter_name, 0);\n          configured_adapters.splice(index, 1);\n        }\n        fireEvent(this, \"network-config-changed\", {\n          configured_adapters: configured_adapters\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-display: contents;\n          --settings-row-prefix-display: contents;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","fireEvent","haStyle","format_addresses","addresses","map","address","i","network_prefix","length","format_auto_detected_interfaces","adapters","adapter","auto","name","ipv4","ipv6","HaNetwork","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","render","networkConfig","undefined","configured_adapters","_handleAutoConfigureCheckboxClick","_expanded","_handleAdapterCheckboxClick","includes","default","mdiStar","ev","checkbox","currentTarget","checked","adapter_name","push","index","indexOf","splice","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-network.ts"],"sourcesContent":["import { mdiStar } from \"@mdi/js\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  Adapter,\n  IPv4ConfiguredAddress,\n  IPv6ConfiguredAddress,\n  NetworkConfig,\n} from \"../data/network\";\nimport { haStyle } from \"../resources/styles\";\nimport { HomeAssistant } from \"../types\";\nimport \"./ha-checkbox\";\nimport type { HaCheckbox } from \"./ha-checkbox\";\nimport \"./ha-settings-row\";\nimport \"./ha-svg-icon\";\n\nconst format_addresses = (\n  addresses: IPv6ConfiguredAddress[] | IPv4ConfiguredAddress[]\n): TemplateResult =>\n  html`${addresses.map((address, i) => [\n    html`<span>${address.address}/${address.network_prefix}</span>`,\n    i < addresses.length - 1 ? \", \" : nothing,\n  ])}`;\n\nconst format_auto_detected_interfaces = (\n  adapters: Adapter[]\n): Array<TemplateResult | string> =>\n  adapters.map((adapter) =>\n    adapter.auto\n      ? html`${adapter.name}\n        (${format_addresses([...adapter.ipv4, ...adapter.ipv6])})`\n      : \"\"\n  );\n\ndeclare global {\n  interface HASSDomEvents {\n    \"network-config-changed\": { configured_adapters: string[] };\n  }\n}\n@customElement(\"ha-network\")\nexport class HaNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public networkConfig?: NetworkConfig;\n\n  @state() private _expanded?: boolean;\n\n  protected render() {\n    if (this.networkConfig === undefined) {\n      return nothing;\n    }\n    const configured_adapters = this.networkConfig.configured_adapters || [];\n    return html`\n      <ha-settings-row>\n        <span slot=\"prefix\">\n          <ha-checkbox\n            id=\"auto_configure\"\n            @change=${this._handleAutoConfigureCheckboxClick}\n            .checked=${!configured_adapters.length}\n            name=\"auto_configure\"\n          >\n          </ha-checkbox>\n        </span>\n        <span slot=\"heading\" data-for=\"auto_configure\"> Auto Configure </span>\n        <span slot=\"description\" data-for=\"auto_configure\">\n          Detected:\n          ${format_auto_detected_interfaces(this.networkConfig.adapters)}\n        </span>\n      </ha-settings-row>\n      ${configured_adapters.length || this._expanded\n        ? this.networkConfig.adapters.map(\n            (adapter) =>\n              html`<ha-settings-row>\n                <span slot=\"prefix\">\n                  <ha-checkbox\n                    id=${adapter.name}\n                    @change=${this._handleAdapterCheckboxClick}\n                    .checked=${configured_adapters.includes(adapter.name)}\n                    .adapter=${adapter.name}\n                    name=${adapter.name}\n                  >\n                  </ha-checkbox>\n                </span>\n                <span slot=\"heading\">\n                  Adapter: ${adapter.name}\n                  ${adapter.default\n                    ? html`<ha-svg-icon .path=${mdiStar}></ha-svg-icon>\n                        (Default)`\n                    : \"\"}\n                </span>\n                <span slot=\"description\">\n                  ${format_addresses([...adapter.ipv4, ...adapter.ipv6])}\n                </span>\n              </ha-settings-row>`\n          )\n        : \"\"}\n    `;\n  }\n\n  private _handleAutoConfigureCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    let configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      this._expanded = false;\n      configured_adapters = [];\n    } else {\n      this._expanded = true;\n      for (const adapter of this.networkConfig.adapters) {\n        if (adapter.default) {\n          configured_adapters = [adapter.name];\n          break;\n        }\n      }\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  private _handleAdapterCheckboxClick(ev: Event) {\n    const checkbox = ev.currentTarget as HaCheckbox;\n    const adapter_name = (checkbox as any).name;\n    if (this.networkConfig === undefined) {\n      return;\n    }\n\n    const configured_adapters = [...this.networkConfig.configured_adapters];\n\n    if (checkbox.checked) {\n      configured_adapters.push(adapter_name);\n    } else {\n      const index = configured_adapters.indexOf(adapter_name, 0);\n      configured_adapters.splice(index, 1);\n    }\n\n    fireEvent(this, \"network-config-changed\", {\n      configured_adapters: configured_adapters,\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n          --paper-time-input-justify-content: flex-end;\n          --settings-row-content-display: contents;\n          --settings-row-prefix-display: contents;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-network\": HaNetwork;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}