{"ast":null,"code":"import { shallowEqual } from \"../util/shallow-equal\";\n\n/**\n * Transform function type.\n */\n\n/**\n * Specifies an tranformer callback that is run when the value of the decorated property, or any of the properties in the watching array, changes.\n * The result of the tranformer is assigned to the decorated property.\n * The tranformer receives the current as arguments.\n */\nexport const transform = config => clsElement => {\n  const key = String(clsElement.key);\n  return {\n    ...clsElement,\n    kind: \"method\",\n    descriptor: {\n      set(value) {\n        const oldValue = this[`__transform_${key}`];\n        const trnsformr = this._transformers.get(key);\n        if (trnsformr) {\n          this[`__transform_${key}`] = trnsformr.call(this, value);\n        } else {\n          this[`__transform_${key}`] = value;\n        }\n        this[`__original_${key}`] = value;\n        this.requestUpdate(key, oldValue);\n      },\n      get() {\n        return this[`__transform_${key}`];\n      },\n      enumerable: true,\n      configurable: true\n    },\n    finisher(cls) {\n      // if we haven't wrapped `willUpdate` in this class, do so\n      if (!cls.prototype._transformers) {\n        cls.prototype._transformers = new Map();\n        cls.prototype._watching = new Map();\n        // @ts-ignore\n        const userWillUpdate = cls.prototype.willUpdate;\n        // @ts-ignore\n        cls.prototype.willUpdate = function (changedProperties) {\n          userWillUpdate.call(this, changedProperties);\n          const keys = new Set();\n          changedProperties.forEach((_v, k) => {\n            const watchers = this._watching;\n            const ks = watchers.get(k);\n            if (ks !== undefined) {\n              ks.forEach(wk => keys.add(wk));\n            }\n          });\n          keys.forEach(k => {\n            // trigger setter\n            this[k] = this[`__original_${String(k)}`];\n          });\n        };\n        // clone any existing observers (superclasses)\n        // eslint-disable-next-line no-prototype-builtins\n      } else if (!cls.prototype.hasOwnProperty(\"_transformers\")) {\n        const tranformers = cls.prototype._transformers;\n        cls.prototype._transformers = new Map();\n        tranformers.forEach((v, k) => cls.prototype._transformers.set(k, v));\n      }\n      // set this method\n      cls.prototype._transformers.set(clsElement.key, config.transformer);\n      if (config.watch) {\n        // store watchers\n        config.watch.forEach(k => {\n          let curWatch = cls.prototype._watching.get(k);\n          if (!curWatch) {\n            curWatch = new Set();\n            cls.prototype._watching.set(k, curWatch);\n          }\n          curWatch.add(clsElement.key);\n        });\n      }\n      cls.createProperty(clsElement.key, {\n        noAccessor: true,\n        hasChanged: (v, o) => !shallowEqual(v, o),\n        ...config.propertyOptions\n      });\n    }\n  };\n};","map":{"version":3,"names":["shallowEqual","transform","config","clsElement","key","String","kind","descriptor","set","value","oldValue","trnsformr","_transformers","get","call","requestUpdate","enumerable","configurable","finisher","cls","prototype","Map","_watching","userWillUpdate","willUpdate","changedProperties","keys","Set","forEach","_v","k","watchers","ks","undefined","wk","add","hasOwnProperty","tranformers","v","transformer","watch","curWatch","createProperty","noAccessor","hasChanged","o","propertyOptions"],"sources":["/workspaces/frontend/src/common/decorators/transform.ts"],"sourcesContent":["import { PropertyDeclaration, PropertyValues, ReactiveElement } from \"lit\";\nimport { ClassElement } from \"../../types\";\nimport { shallowEqual } from \"../util/shallow-equal\";\n\n/**\n * Transform function type.\n */\nexport interface Transformer<T = any, V = any> {\n  (value: V): T;\n}\n\ntype ReactiveTransformElement = ReactiveElement & {\n  _transformers: Map<PropertyKey, Transformer>;\n  _watching: Map<PropertyKey, Set<PropertyKey>>;\n};\n\ntype ReactiveElementClassWithTransformers = typeof ReactiveElement & {\n  prototype: ReactiveTransformElement;\n};\n\n/**\n * Specifies an tranformer callback that is run when the value of the decorated property, or any of the properties in the watching array, changes.\n * The result of the tranformer is assigned to the decorated property.\n * The tranformer receives the current as arguments.\n */\nexport const transform =\n  <T, V>(config: {\n    transformer: Transformer<T, V>;\n    watch?: PropertyKey[];\n    propertyOptions?: PropertyDeclaration;\n  }): any =>\n  (clsElement: ClassElement) => {\n    const key = String(clsElement.key);\n    return {\n      ...clsElement,\n      kind: \"method\",\n      descriptor: {\n        set(this: ReactiveTransformElement, value: V) {\n          const oldValue = this[`__transform_${key}`];\n          const trnsformr: Transformer<T, V> | undefined =\n            this._transformers.get(key);\n          if (trnsformr) {\n            this[`__transform_${key}`] = trnsformr.call(this, value);\n          } else {\n            this[`__transform_${key}`] = value;\n          }\n          this[`__original_${key}`] = value;\n          this.requestUpdate(key, oldValue);\n        },\n        get(): T {\n          return this[`__transform_${key}`];\n        },\n        enumerable: true,\n        configurable: true,\n      },\n      finisher(cls: ReactiveElementClassWithTransformers) {\n        // if we haven't wrapped `willUpdate` in this class, do so\n        if (!cls.prototype._transformers) {\n          cls.prototype._transformers = new Map<PropertyKey, Transformer>();\n          cls.prototype._watching = new Map<PropertyKey, Set<PropertyKey>>();\n          // @ts-ignore\n          const userWillUpdate = cls.prototype.willUpdate;\n          // @ts-ignore\n          cls.prototype.willUpdate = function (\n            this: ReactiveTransformElement,\n            changedProperties: PropertyValues\n          ) {\n            userWillUpdate.call(this, changedProperties);\n            const keys = new Set<PropertyKey>();\n            changedProperties.forEach((_v, k) => {\n              const watchers = this._watching;\n              const ks: Set<PropertyKey> | undefined = watchers.get(k);\n              if (ks !== undefined) {\n                ks.forEach((wk) => keys.add(wk));\n              }\n            });\n            keys.forEach((k) => {\n              // trigger setter\n              this[k] = this[`__original_${String(k)}`];\n            });\n          };\n          // clone any existing observers (superclasses)\n          // eslint-disable-next-line no-prototype-builtins\n        } else if (!cls.prototype.hasOwnProperty(\"_transformers\")) {\n          const tranformers = cls.prototype._transformers;\n          cls.prototype._transformers = new Map();\n          tranformers.forEach((v: any, k: PropertyKey) =>\n            cls.prototype._transformers.set(k, v)\n          );\n        }\n        // set this method\n        cls.prototype._transformers.set(clsElement.key, config.transformer);\n        if (config.watch) {\n          // store watchers\n          config.watch.forEach((k) => {\n            let curWatch = cls.prototype._watching.get(k);\n            if (!curWatch) {\n              curWatch = new Set();\n              cls.prototype._watching.set(k, curWatch);\n            }\n            curWatch.add(clsElement.key);\n          });\n        }\n        cls.createProperty(clsElement.key, {\n          noAccessor: true,\n          hasChanged: (v: any, o: any) => !shallowEqual(v, o),\n          ...config.propertyOptions,\n        });\n      },\n    };\n  };\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,uBAAuB;;AAEpD;AACA;AACA;;AAcA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,SAAS,GACbC,MAIN,IACAC,UAAwB,IAAK;EAC5B,MAAMC,GAAG,GAAGC,MAAM,CAACF,UAAU,CAACC,GAAG,CAAC;EAClC,OAAO;IACL,GAAGD,UAAU;IACbG,IAAI,EAAE,QAAQ;IACdC,UAAU,EAAE;MACVC,GAAGA,CAAiCC,KAAQ,EAAE;QAC5C,MAAMC,QAAQ,GAAG,IAAI,CAAE,eAAcN,GAAI,EAAC,CAAC;QAC3C,MAAMO,SAAwC,GAC5C,IAAI,CAACC,aAAa,CAACC,GAAG,CAACT,GAAG,CAAC;QAC7B,IAAIO,SAAS,EAAE;UACb,IAAI,CAAE,eAAcP,GAAI,EAAC,CAAC,GAAGO,SAAS,CAACG,IAAI,CAAC,IAAI,EAAEL,KAAK,CAAC;QAC1D,CAAC,MAAM;UACL,IAAI,CAAE,eAAcL,GAAI,EAAC,CAAC,GAAGK,KAAK;QACpC;QACA,IAAI,CAAE,cAAaL,GAAI,EAAC,CAAC,GAAGK,KAAK;QACjC,IAAI,CAACM,aAAa,CAACX,GAAG,EAAEM,QAAQ,CAAC;MACnC,CAAC;MACDG,GAAGA,CAAA,EAAM;QACP,OAAO,IAAI,CAAE,eAAcT,GAAI,EAAC,CAAC;MACnC,CAAC;MACDY,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE;IAChB,CAAC;IACDC,QAAQA,CAACC,GAAyC,EAAE;MAClD;MACA,IAAI,CAACA,GAAG,CAACC,SAAS,CAACR,aAAa,EAAE;QAChCO,GAAG,CAACC,SAAS,CAACR,aAAa,GAAG,IAAIS,GAAG,CAA2B,CAAC;QACjEF,GAAG,CAACC,SAAS,CAACE,SAAS,GAAG,IAAID,GAAG,CAAgC,CAAC;QAClE;QACA,MAAME,cAAc,GAAGJ,GAAG,CAACC,SAAS,CAACI,UAAU;QAC/C;QACAL,GAAG,CAACC,SAAS,CAACI,UAAU,GAAG,UAEzBC,iBAAiC,EACjC;UACAF,cAAc,CAACT,IAAI,CAAC,IAAI,EAAEW,iBAAiB,CAAC;UAC5C,MAAMC,IAAI,GAAG,IAAIC,GAAG,CAAc,CAAC;UACnCF,iBAAiB,CAACG,OAAO,CAAC,CAACC,EAAE,EAAEC,CAAC,KAAK;YACnC,MAAMC,QAAQ,GAAG,IAAI,CAACT,SAAS;YAC/B,MAAMU,EAAgC,GAAGD,QAAQ,CAAClB,GAAG,CAACiB,CAAC,CAAC;YACxD,IAAIE,EAAE,KAAKC,SAAS,EAAE;cACpBD,EAAE,CAACJ,OAAO,CAAEM,EAAE,IAAKR,IAAI,CAACS,GAAG,CAACD,EAAE,CAAC,CAAC;YAClC;UACF,CAAC,CAAC;UACFR,IAAI,CAACE,OAAO,CAAEE,CAAC,IAAK;YAClB;YACA,IAAI,CAACA,CAAC,CAAC,GAAG,IAAI,CAAE,cAAazB,MAAM,CAACyB,CAAC,CAAE,EAAC,CAAC;UAC3C,CAAC,CAAC;QACJ,CAAC;QACD;QACA;MACF,CAAC,MAAM,IAAI,CAACX,GAAG,CAACC,SAAS,CAACgB,cAAc,CAAC,eAAe,CAAC,EAAE;QACzD,MAAMC,WAAW,GAAGlB,GAAG,CAACC,SAAS,CAACR,aAAa;QAC/CO,GAAG,CAACC,SAAS,CAACR,aAAa,GAAG,IAAIS,GAAG,CAAC,CAAC;QACvCgB,WAAW,CAACT,OAAO,CAAC,CAACU,CAAM,EAAER,CAAc,KACzCX,GAAG,CAACC,SAAS,CAACR,aAAa,CAACJ,GAAG,CAACsB,CAAC,EAAEQ,CAAC,CACtC,CAAC;MACH;MACA;MACAnB,GAAG,CAACC,SAAS,CAACR,aAAa,CAACJ,GAAG,CAACL,UAAU,CAACC,GAAG,EAAEF,MAAM,CAACqC,WAAW,CAAC;MACnE,IAAIrC,MAAM,CAACsC,KAAK,EAAE;QAChB;QACAtC,MAAM,CAACsC,KAAK,CAACZ,OAAO,CAAEE,CAAC,IAAK;UAC1B,IAAIW,QAAQ,GAAGtB,GAAG,CAACC,SAAS,CAACE,SAAS,CAACT,GAAG,CAACiB,CAAC,CAAC;UAC7C,IAAI,CAACW,QAAQ,EAAE;YACbA,QAAQ,GAAG,IAAId,GAAG,CAAC,CAAC;YACpBR,GAAG,CAACC,SAAS,CAACE,SAAS,CAACd,GAAG,CAACsB,CAAC,EAAEW,QAAQ,CAAC;UAC1C;UACAA,QAAQ,CAACN,GAAG,CAAChC,UAAU,CAACC,GAAG,CAAC;QAC9B,CAAC,CAAC;MACJ;MACAe,GAAG,CAACuB,cAAc,CAACvC,UAAU,CAACC,GAAG,EAAE;QACjCuC,UAAU,EAAE,IAAI;QAChBC,UAAU,EAAEA,CAACN,CAAM,EAAEO,CAAM,KAAK,CAAC7C,YAAY,CAACsC,CAAC,EAAEO,CAAC,CAAC;QACnD,GAAG3C,MAAM,CAAC4C;MACZ,CAAC,CAAC;IACJ;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}