{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _templateObject, _templateObject2, _templateObject3;\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\n/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport 'blocking-elements';\nimport 'wicg-inert';\nimport { cssClasses } from '@material/dialog/constants.js';\nimport MDCDialogFoundation from '@material/dialog/foundation.js';\nimport { applyPassive } from '@material/dom/events.js';\nimport { closest, matches } from '@material/dom/ponyfill.js';\nimport { addHasRemoveClass, BaseElement } from '@material/mwc-base/base-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nvar blockingElements = document.$blockingElements;\nexport var DialogBase = /*#__PURE__*/function (_BaseElement) {\n  _inherits(DialogBase, _BaseElement);\n  function DialogBase() {\n    var _this;\n    _classCallCheck(this, DialogBase);\n    _this = _callSuper(this, DialogBase, arguments);\n    _this.hideActions = false;\n    _this.stacked = false;\n    _this.heading = '';\n    _this.scrimClickAction = 'close';\n    _this.escapeKeyAction = 'close';\n    _this.open = false;\n    _this.defaultAction = 'close';\n    _this.actionAttribute = 'dialogAction';\n    _this.initialFocusAttribute = 'dialogInitialFocus';\n    _this.initialSupressDefaultPressSelector = '';\n    _this.mdcFoundationClass = MDCDialogFoundation;\n    _this.boundHandleClick = null;\n    _this.boundHandleKeydown = null;\n    _this.boundHandleDocumentKeydown = null;\n    return _this;\n  }\n  _createClass(DialogBase, [{\n    key: \"suppressDefaultPressSelector\",\n    get:\n    /**\n     * @export\n     */\n    function get() {\n      return this.mdcFoundation ? this.mdcFoundation.getSuppressDefaultPressSelector() : this.initialSupressDefaultPressSelector;\n    },\n    set: function set(selector) {\n      if (this.mdcFoundation) {\n        this.mdcFoundation.setSuppressDefaultPressSelector(selector);\n      } else {\n        this.initialSupressDefaultPressSelector = selector;\n      }\n    }\n  }, {\n    key: \"primaryButton\",\n    get: function get() {\n      var assignedNodes = this.primarySlot.assignedNodes();\n      assignedNodes = assignedNodes.filter(function (node) {\n        return node instanceof HTMLElement;\n      });\n      var button = assignedNodes[0];\n      return button ? button : null;\n    }\n  }, {\n    key: \"emitNotification\",\n    value: function emitNotification(name, action) {\n      var init = {\n        detail: action ? {\n          action: action\n        } : {}\n      };\n      var ev = new CustomEvent(name, init);\n      this.dispatchEvent(ev);\n    }\n  }, {\n    key: \"getInitialFocusEl\",\n    value: function getInitialFocusEl() {\n      var initFocusSelector = \"[\".concat(this.initialFocusAttribute, \"]\");\n      // only search light DOM. This typically handles all the cases\n      var lightDomQs = this.querySelector(initFocusSelector);\n      if (lightDomQs) {\n        return lightDomQs;\n      }\n      // if not in light dom, search each flattened distributed node.\n      var primarySlot = this.primarySlot;\n      var primaryNodes = primarySlot.assignedNodes({\n        flatten: true\n      });\n      var primaryFocusElement = this.searchNodeTreesForAttribute(primaryNodes, this.initialFocusAttribute);\n      if (primaryFocusElement) {\n        return primaryFocusElement;\n      }\n      var secondarySlot = this.secondarySlot;\n      var secondaryNodes = secondarySlot.assignedNodes({\n        flatten: true\n      });\n      var secondaryFocusElement = this.searchNodeTreesForAttribute(secondaryNodes, this.initialFocusAttribute);\n      if (secondaryFocusElement) {\n        return secondaryFocusElement;\n      }\n      var contentSlot = this.contentSlot;\n      var contentNodes = contentSlot.assignedNodes({\n        flatten: true\n      });\n      var initFocusElement = this.searchNodeTreesForAttribute(contentNodes, this.initialFocusAttribute);\n      return initFocusElement;\n    }\n  }, {\n    key: \"searchNodeTreesForAttribute\",\n    value: function searchNodeTreesForAttribute(nodes, attribute) {\n      var _iterator = _createForOfIteratorHelper(nodes),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var node = _step.value;\n          if (!(node instanceof HTMLElement)) {\n            continue;\n          }\n          if (node.hasAttribute(attribute)) {\n            return node;\n          } else {\n            var selection = node.querySelector(\"[\".concat(attribute, \"]\"));\n            if (selection) {\n              return selection;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    }\n  }, {\n    key: \"createAdapter\",\n    value: function createAdapter() {\n      var _this2 = this;\n      return Object.assign(Object.assign({}, addHasRemoveClass(this.mdcRoot)), {\n        addBodyClass: function addBodyClass() {\n          return document.body.style.overflow = 'hidden';\n        },\n        removeBodyClass: function removeBodyClass() {\n          return document.body.style.overflow = '';\n        },\n        areButtonsStacked: function areButtonsStacked() {\n          return _this2.stacked;\n        },\n        clickDefaultButton: function clickDefaultButton() {\n          var primary = _this2.primaryButton;\n          if (primary) {\n            primary.click();\n          }\n        },\n        eventTargetMatches: function eventTargetMatches(target, selector) {\n          return target ? matches(target, selector) : false;\n        },\n        getActionFromEvent: function getActionFromEvent(e) {\n          if (!e.target) {\n            return '';\n          }\n          var element = closest(e.target, \"[\".concat(_this2.actionAttribute, \"]\"));\n          var action = element && element.getAttribute(_this2.actionAttribute);\n          return action;\n        },\n        getInitialFocusEl: function getInitialFocusEl() {\n          return _this2.getInitialFocusEl();\n        },\n        isContentScrollable: function isContentScrollable() {\n          var el = _this2.contentElement;\n          return el ? el.scrollHeight > el.offsetHeight : false;\n        },\n        notifyClosed: function notifyClosed(action) {\n          return _this2.emitNotification('closed', action);\n        },\n        notifyClosing: function notifyClosing(action) {\n          if (!_this2.closingDueToDisconnect) {\n            // Don't set our open state to closed just because we were\n            // disconnected. That way if we get reconnected, we'll know to\n            // re-open.\n            _this2.open = false;\n          }\n          _this2.emitNotification('closing', action);\n        },\n        notifyOpened: function notifyOpened() {\n          return _this2.emitNotification('opened');\n        },\n        notifyOpening: function notifyOpening() {\n          _this2.open = true;\n          _this2.emitNotification('opening');\n        },\n        reverseButtons: function reverseButtons() {},\n        releaseFocus: function releaseFocus() {\n          blockingElements.remove(_this2);\n        },\n        trapFocus: function trapFocus(el) {\n          if (!_this2.isConnected) {\n            // this is the case where it is opened and closed and then removed\n            // from DOM before the animation has completed. Blocking Elements will\n            // throw if this is the case\n            return;\n          }\n          blockingElements.push(_this2);\n          if (el) {\n            el.focus();\n          }\n        },\n        registerContentEventHandler: function registerContentEventHandler(evtType, handler) {\n          var el = _this2.contentElement;\n          el.addEventListener(evtType, handler);\n        },\n        deregisterContentEventHandler: function deregisterContentEventHandler(evtType, handler) {\n          var el = _this2.contentElement;\n          el.removeEventListener(evtType, handler);\n        },\n        isScrollableContentAtTop: function isScrollableContentAtTop() {\n          var el = _this2.contentElement;\n          return el ? el.scrollTop === 0 : false;\n        },\n        isScrollableContentAtBottom: function isScrollableContentAtBottom() {\n          var el = _this2.contentElement;\n          return el ? Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight : false;\n        },\n        registerWindowEventHandler: function registerWindowEventHandler(evtType, handler) {\n          window.addEventListener(evtType, handler, applyPassive());\n        },\n        deregisterWindowEventHandler: function deregisterWindowEventHandler(evtType, handler) {\n          window.removeEventListener(evtType, handler, applyPassive());\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var classes = _defineProperty({}, cssClasses.STACKED, this.stacked);\n      var heading = html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\"])));\n      if (this.heading) {\n        heading = this.renderHeading();\n      }\n      var actionsClasses = {\n        'mdc-dialog__actions': !this.hideActions\n      };\n      return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    <div class=\\\"mdc-dialog \", \"\\\"\\n        role=\\\"alertdialog\\\"\\n        aria-modal=\\\"true\\\"\\n        aria-labelledby=\\\"title\\\"\\n        aria-describedby=\\\"content\\\">\\n      <div class=\\\"mdc-dialog__container\\\">\\n        <div class=\\\"mdc-dialog__surface\\\">\\n          \", \"\\n          <div id=\\\"content\\\" class=\\\"mdc-dialog__content\\\">\\n            <slot id=\\\"contentSlot\\\"></slot>\\n          </div>\\n          <footer\\n              id=\\\"actions\\\"\\n              class=\\\"\", \"\\\">\\n            <span>\\n              <slot name=\\\"secondaryAction\\\"></slot>\\n            </span>\\n            <span>\\n             <slot name=\\\"primaryAction\\\"></slot>\\n            </span>\\n          </footer>\\n        </div>\\n      </div>\\n      <div class=\\\"mdc-dialog__scrim\\\"></div>\\n    </div>\"])), classMap(classes), heading, classMap(actionsClasses));\n    }\n  }, {\n    key: \"renderHeading\",\n    value: function renderHeading() {\n      return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n      <h2 id=\\\"title\\\" class=\\\"mdc-dialog__title\\\">\", \"</h2>\"])), this.heading);\n    }\n  }, {\n    key: \"firstUpdated\",\n    value: function firstUpdated() {\n      _get(_getPrototypeOf(DialogBase.prototype), \"firstUpdated\", this).call(this);\n      this.mdcFoundation.setAutoStackButtons(true);\n      if (this.initialSupressDefaultPressSelector) {\n        this.suppressDefaultPressSelector = this.initialSupressDefaultPressSelector;\n      } else {\n        this.suppressDefaultPressSelector = [this.suppressDefaultPressSelector, 'mwc-textarea', 'mwc-menu mwc-list-item', 'mwc-select mwc-list-item'].join(', ');\n      }\n      this.boundHandleClick = this.mdcFoundation.handleClick.bind(this.mdcFoundation);\n      this.boundHandleKeydown = this.mdcFoundation.handleKeydown.bind(this.mdcFoundation);\n      this.boundHandleDocumentKeydown = this.mdcFoundation.handleDocumentKeydown.bind(this.mdcFoundation);\n    }\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      _get(_getPrototypeOf(DialogBase.prototype), \"connectedCallback\", this).call(this);\n      if (this.open && this.mdcFoundation && !this.mdcFoundation.isOpen()) {\n        // We probably got disconnected while we were still open. Re-open,\n        // matching the behavior of native <dialog>.\n        this.setEventListeners();\n        this.mdcFoundation.open();\n      }\n    }\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      _get(_getPrototypeOf(DialogBase.prototype), \"disconnectedCallback\", this).call(this);\n      if (this.open && this.mdcFoundation) {\n        // If this dialog is opened and then disconnected, we want to close\n        // the foundation, so that 1) any pending timers are cancelled\n        // (in particular for trapFocus), and 2) if we reconnect, we can open\n        // the foundation again to retrigger animations and focus.\n        this.removeEventListeners();\n        this.closingDueToDisconnect = true;\n        this.mdcFoundation.close(this.currentAction || this.defaultAction);\n        this.closingDueToDisconnect = false;\n        this.currentAction = undefined;\n        // When we close normally, the releaseFocus callback handles removing\n        // ourselves from the blocking elements stack. However, that callback\n        // happens on a delay, and when we are closing due to a disconnect we\n        // need to remove ourselves before the blocking element polyfill's\n        // mutation observer notices and logs a warning, since it's not valid to\n        // be in the blocking elements stack while disconnected.\n        blockingElements.remove(this);\n      }\n    }\n  }, {\n    key: \"forceLayout\",\n    value: function forceLayout() {\n      this.mdcFoundation.layout();\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var initialFocusEl = this.getInitialFocusEl();\n      initialFocusEl && initialFocusEl.focus();\n    }\n  }, {\n    key: \"blur\",\n    value: function blur() {\n      if (!this.shadowRoot) {\n        return;\n      }\n      var activeEl = this.shadowRoot.activeElement;\n      if (activeEl) {\n        if (activeEl instanceof HTMLElement) {\n          activeEl.blur();\n        }\n      } else {\n        var root = this.getRootNode();\n        var _activeEl = root instanceof Document ? root.activeElement : null;\n        if (_activeEl instanceof HTMLElement) {\n          _activeEl.blur();\n        }\n      }\n    }\n  }, {\n    key: \"setEventListeners\",\n    value: function setEventListeners() {\n      if (this.boundHandleClick) {\n        this.mdcRoot.addEventListener('click', this.boundHandleClick);\n      }\n      if (this.boundHandleKeydown) {\n        this.mdcRoot.addEventListener('keydown', this.boundHandleKeydown, applyPassive());\n      }\n      if (this.boundHandleDocumentKeydown) {\n        document.addEventListener('keydown', this.boundHandleDocumentKeydown, applyPassive());\n      }\n    }\n  }, {\n    key: \"removeEventListeners\",\n    value: function removeEventListeners() {\n      if (this.boundHandleClick) {\n        this.mdcRoot.removeEventListener('click', this.boundHandleClick);\n      }\n      if (this.boundHandleKeydown) {\n        this.mdcRoot.removeEventListener('keydown', this.boundHandleKeydown);\n      }\n      if (this.boundHandleDocumentKeydown) {\n        document.removeEventListener('keydown', this.boundHandleDocumentKeydown);\n      }\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.open = false;\n    }\n  }, {\n    key: \"show\",\n    value: function show() {\n      this.open = true;\n    }\n  }]);\n  return DialogBase;\n}(BaseElement);\n__decorate([query('.mdc-dialog')], DialogBase.prototype, \"mdcRoot\", void 0);\n__decorate([query('slot[name=\"primaryAction\"]')], DialogBase.prototype, \"primarySlot\", void 0);\n__decorate([query('slot[name=\"secondaryAction\"]')], DialogBase.prototype, \"secondarySlot\", void 0);\n__decorate([query('#contentSlot')], DialogBase.prototype, \"contentSlot\", void 0);\n__decorate([query('.mdc-dialog__content')], DialogBase.prototype, \"contentElement\", void 0);\n__decorate([query('.mdc-container')], DialogBase.prototype, \"conatinerElement\", void 0);\n__decorate([property({\n  type: Boolean\n})], DialogBase.prototype, \"hideActions\", void 0);\n__decorate([property({\n  type: Boolean\n}), observer(function () {\n  this.forceLayout();\n})], DialogBase.prototype, \"stacked\", void 0);\n__decorate([property({\n  type: String\n})], DialogBase.prototype, \"heading\", void 0);\n__decorate([property({\n  type: String\n}), observer(function (newAction) {\n  this.mdcFoundation.setScrimClickAction(newAction);\n})], DialogBase.prototype, \"scrimClickAction\", void 0);\n__decorate([property({\n  type: String\n}), observer(function (newAction) {\n  this.mdcFoundation.setEscapeKeyAction(newAction);\n})], DialogBase.prototype, \"escapeKeyAction\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n}), observer(function (isOpen) {\n  // Check isConnected because we could have been disconnected before first\n  // update. If we're now closed, then we shouldn't start the MDC foundation\n  // opening animation. If we're now closed, then we've already closed the\n  // foundation in disconnectedCallback.\n  if (this.mdcFoundation && this.isConnected) {\n    if (isOpen) {\n      this.setEventListeners();\n      this.mdcFoundation.open();\n    } else {\n      this.removeEventListeners();\n      this.mdcFoundation.close(this.currentAction || this.defaultAction);\n      this.currentAction = undefined;\n    }\n  }\n})], DialogBase.prototype, \"open\", void 0);\n__decorate([property()], DialogBase.prototype, \"defaultAction\", void 0);\n__decorate([property()], DialogBase.prototype, \"actionAttribute\", void 0);\n__decorate([property()], DialogBase.prototype, \"initialFocusAttribute\", void 0);","map":{"version":3,"names":["cssClasses","MDCDialogFoundation","applyPassive","closest","matches","addHasRemoveClass","BaseElement","observer","html","property","query","classMap","blockingElements","document","$blockingElements","DialogBase","_BaseElement","_inherits","_this","_classCallCheck","hideActions","stacked","heading","scrimClickAction","escapeKeyAction","open","defaultAction","actionAttribute","initialFocusAttribute","initialSupressDefaultPressSelector","mdcFoundationClass","boundHandleClick","boundHandleKeydown","boundHandleDocumentKeydown","_createClass","key","get","mdcFoundation","getSuppressDefaultPressSelector","set","selector","setSuppressDefaultPressSelector","assignedNodes","primarySlot","filter","node","HTMLElement","button","value","emitNotification","name","action","init","detail","ev","CustomEvent","dispatchEvent","getInitialFocusEl","initFocusSelector","concat","lightDomQs","querySelector","primaryNodes","flatten","primaryFocusElement","searchNodeTreesForAttribute","secondarySlot","secondaryNodes","secondaryFocusElement","contentSlot","contentNodes","initFocusElement","nodes","attribute","_iterator","_createForOfIteratorHelper","_step","s","n","done","hasAttribute","selection","err","e","f","createAdapter","_this2","Object","assign","mdcRoot","addBodyClass","body","style","overflow","removeBodyClass","areButtonsStacked","clickDefaultButton","primary","primaryButton","click","eventTargetMatches","target","getActionFromEvent","element","getAttribute","isContentScrollable","el","contentElement","scrollHeight","offsetHeight","notifyClosed","notifyClosing","closingDueToDisconnect","notifyOpened","notifyOpening","reverseButtons","releaseFocus","remove","trapFocus","isConnected","push","focus","registerContentEventHandler","evtType","handler","addEventListener","deregisterContentEventHandler","removeEventListener","isScrollableContentAtTop","scrollTop","isScrollableContentAtBottom","Math","ceil","clientHeight","registerWindowEventHandler","window","deregisterWindowEventHandler","render","classes","_defineProperty","STACKED","_templateObject","_taggedTemplateLiteral","renderHeading","actionsClasses","_templateObject2","_templateObject3","firstUpdated","_get","_getPrototypeOf","prototype","call","setAutoStackButtons","suppressDefaultPressSelector","join","handleClick","bind","handleKeydown","handleDocumentKeydown","connectedCallback","isOpen","setEventListeners","disconnectedCallback","removeEventListeners","close","currentAction","undefined","forceLayout","layout","initialFocusEl","blur","shadowRoot","activeEl","activeElement","root","getRootNode","Document","show","__decorate","type","Boolean","String","newAction","setScrimClickAction","setEscapeKeyAction","reflect"],"sources":["mwc-dialog-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport 'blocking-elements';\nimport 'wicg-inert';\n\nimport {MDCDialogAdapter} from '@material/dialog/adapter.js';\nimport {cssClasses} from '@material/dialog/constants.js';\nimport MDCDialogFoundation from '@material/dialog/foundation.js';\nimport {applyPassive} from '@material/dom/events.js';\nimport {closest, matches} from '@material/dom/ponyfill.js';\nimport {addHasRemoveClass, BaseElement} from '@material/mwc-base/base-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {DocumentWithBlockingElements} from 'blocking-elements';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nexport {MDCDialogCloseEventDetail} from '@material/dialog/types.js';\n\nconst blockingElements =\n    (document as DocumentWithBlockingElements).$blockingElements;\n\nexport class DialogBase extends BaseElement {\n  @query('.mdc-dialog') protected mdcRoot!: HTMLDivElement;\n\n  // _actionItemsSlot should have type HTMLSlotElement, but when TypeScript's\n  // emitDecoratorMetadata is enabled, the HTMLSlotElement constructor will\n  // be emitted into the runtime, which will cause an \"HTMLSlotElement is\n  // undefined\" error in browsers that don't define it (e.g. IE11).\n  @query('slot[name=\"primaryAction\"]') protected primarySlot!: HTMLElement;\n\n  // _actionItemsSlot should have type HTMLSlotElement, but when TypeScript's\n  // emitDecoratorMetadata is enabled, the HTMLSlotElement constructor will\n  // be emitted into the runtime, which will cause an \"HTMLSlotElement is\n  // undefined\" error in browsers that don't define it (e.g. IE11).\n  @query('slot[name=\"secondaryAction\"]') protected secondarySlot!: HTMLElement;\n\n  @query('#contentSlot') protected contentSlot!: HTMLElement;\n\n  @query('.mdc-dialog__content') protected contentElement!: HTMLDivElement;\n\n  @query('.mdc-container') protected conatinerElement!: HTMLDivElement;\n\n  @property({type: Boolean}) hideActions = false;\n\n  @property({type: Boolean})\n  @observer(function(this: DialogBase) {\n    this.forceLayout();\n  })\n  stacked = false;\n\n  @property({type: String}) heading = '';\n\n  @property({type: String})\n  @observer(function(this: DialogBase, newAction: string) {\n    this.mdcFoundation.setScrimClickAction(newAction);\n  })\n  scrimClickAction = 'close';\n\n  @property({type: String})\n  @observer(function(this: DialogBase, newAction: string) {\n    this.mdcFoundation.setEscapeKeyAction(newAction);\n  })\n  escapeKeyAction = 'close';\n\n  @property({type: Boolean, reflect: true})\n  @observer(function(this: DialogBase, isOpen: boolean) {\n    // Check isConnected because we could have been disconnected before first\n    // update. If we're now closed, then we shouldn't start the MDC foundation\n    // opening animation. If we're now closed, then we've already closed the\n    // foundation in disconnectedCallback.\n    if (this.mdcFoundation && this.isConnected) {\n      if (isOpen) {\n        this.setEventListeners();\n        this.mdcFoundation.open();\n      } else {\n        this.removeEventListeners();\n        this.mdcFoundation.close(this.currentAction || this.defaultAction);\n        this.currentAction = undefined;\n      }\n    }\n  })\n  open = false;\n\n  @property() defaultAction = 'close';\n  @property() actionAttribute = 'dialogAction';\n  @property() initialFocusAttribute = 'dialogInitialFocus';\n\n  set suppressDefaultPressSelector(selector: string) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.setSuppressDefaultPressSelector(selector);\n    } else {\n      this.initialSupressDefaultPressSelector = selector;\n    }\n  }\n\n  /**\n   * @export\n   */\n  get suppressDefaultPressSelector(): string {\n    return this.mdcFoundation ?\n        this.mdcFoundation.getSuppressDefaultPressSelector() :\n        this.initialSupressDefaultPressSelector;\n  }\n\n  protected closingDueToDisconnect?: boolean;\n  protected initialSupressDefaultPressSelector = '';\n\n  protected get primaryButton(): HTMLElement|null {\n    let assignedNodes = (this.primarySlot as HTMLSlotElement).assignedNodes();\n    assignedNodes = assignedNodes.filter((node) => node instanceof HTMLElement);\n    const button = assignedNodes[0] as HTMLElement | undefined;\n    return button ? button : null;\n  }\n\n  protected currentAction: string|undefined;\n  protected mdcFoundationClass = MDCDialogFoundation;\n  protected mdcFoundation!: MDCDialogFoundation;\n  protected boundHandleClick: ((ev: MouseEvent) => void)|null = null;\n  protected boundHandleKeydown: ((ev: KeyboardEvent) => void)|null = null;\n  protected boundHandleDocumentKeydown:\n      ((ev: KeyboardEvent) => void)|null = null;\n\n  protected emitNotification(name: string, action?: string) {\n    const init: CustomEventInit = {detail: action ? {action} : {}};\n    const ev = new CustomEvent(name, init);\n    this.dispatchEvent(ev);\n  }\n\n  protected getInitialFocusEl(): HTMLElement|null {\n    const initFocusSelector = `[${this.initialFocusAttribute}]`;\n\n    // only search light DOM. This typically handles all the cases\n    const lightDomQs = this.querySelector(initFocusSelector);\n\n    if (lightDomQs) {\n      return lightDomQs as HTMLElement;\n    }\n\n    // if not in light dom, search each flattened distributed node.\n    const primarySlot = this.primarySlot as HTMLSlotElement;\n    const primaryNodes = primarySlot.assignedNodes({flatten: true});\n    const primaryFocusElement = this.searchNodeTreesForAttribute(\n        primaryNodes, this.initialFocusAttribute);\n    if (primaryFocusElement) {\n      return primaryFocusElement;\n    }\n\n    const secondarySlot = this.secondarySlot as HTMLSlotElement;\n    const secondaryNodes = secondarySlot.assignedNodes({flatten: true});\n    const secondaryFocusElement = this.searchNodeTreesForAttribute(\n        secondaryNodes, this.initialFocusAttribute);\n    if (secondaryFocusElement) {\n      return secondaryFocusElement;\n    }\n\n\n    const contentSlot = this.contentSlot as HTMLSlotElement;\n    const contentNodes = contentSlot.assignedNodes({flatten: true});\n    const initFocusElement = this.searchNodeTreesForAttribute(\n        contentNodes, this.initialFocusAttribute);\n    return initFocusElement;\n  }\n\n  protected searchNodeTreesForAttribute(nodes: Node[], attribute: string):\n      HTMLElement|null {\n    for (const node of nodes) {\n      if (!(node instanceof HTMLElement)) {\n        continue;\n      }\n\n      if (node.hasAttribute(attribute)) {\n        return node;\n      } else {\n        const selection = node.querySelector(`[${attribute}]`);\n        if (selection) {\n          return selection as HTMLElement;\n        }\n      }\n    }\n\n    return null;\n  }\n\n  protected createAdapter(): MDCDialogAdapter {\n    return {\n      ...addHasRemoveClass(this.mdcRoot),\n      addBodyClass: () => document.body.style.overflow = 'hidden',\n      removeBodyClass: () => document.body.style.overflow = '',\n      areButtonsStacked: () => this.stacked,\n      clickDefaultButton: () => {\n        const primary = this.primaryButton;\n        if (primary) {\n          primary.click();\n        }\n      },\n      eventTargetMatches: (target, selector) =>\n          target ? matches(target as Element, selector) : false,\n      getActionFromEvent: (e: Event) => {\n        if (!e.target) {\n          return '';\n        }\n\n        const element =\n            closest(e.target as Element, `[${this.actionAttribute}]`);\n        const action = element && element.getAttribute(this.actionAttribute);\n        return action;\n      },\n      getInitialFocusEl: () => {\n        return this.getInitialFocusEl();\n      },\n      isContentScrollable: () => {\n        const el = this.contentElement;\n        return el ? el.scrollHeight > el.offsetHeight : false;\n      },\n      notifyClosed: (action) => this.emitNotification('closed', action),\n      notifyClosing: (action) => {\n        if (!this.closingDueToDisconnect) {\n          // Don't set our open state to closed just because we were\n          // disconnected. That way if we get reconnected, we'll know to\n          // re-open.\n          this.open = false;\n        }\n        this.emitNotification('closing', action);\n      },\n      notifyOpened: () => this.emitNotification('opened'),\n      notifyOpening: () => {\n        this.open = true;\n        this.emitNotification('opening');\n      },\n      reverseButtons: () => { /* handled by render fn */ },\n      releaseFocus: () => {\n        blockingElements.remove(this);\n      },\n      trapFocus: (el) => {\n        if (!this.isConnected) {\n          // this is the case where it is opened and closed and then removed\n          // from DOM before the animation has completed. Blocking Elements will\n          // throw if this is the case\n          return;\n        }\n        blockingElements.push(this);\n\n        if (el) {\n          el.focus();\n        }\n      },\n      registerContentEventHandler: (evtType, handler) => {\n        const el = this.contentElement;\n        el.addEventListener(evtType, handler);\n      },\n      deregisterContentEventHandler: (evtType, handler) => {\n        const el = this.contentElement;\n        el.removeEventListener(evtType, handler);\n      },\n      isScrollableContentAtTop: () => {\n        const el = this.contentElement;\n        return el ? el.scrollTop === 0 : false;\n      },\n      isScrollableContentAtBottom: () => {\n        const el = this.contentElement;\n        return el ?\n            Math.ceil(el.scrollHeight - el.scrollTop) === el.clientHeight :\n            false;\n      },\n      registerWindowEventHandler: (evtType, handler) => {\n        window.addEventListener(evtType, handler, applyPassive());\n      },\n      deregisterWindowEventHandler: (evtType, handler) => {\n        window.removeEventListener(evtType, handler, applyPassive());\n      },\n\n    };\n  }\n\n  protected override render() {\n    const classes = {\n      [cssClasses.STACKED]: this.stacked,\n    };\n\n    let heading = html``;\n\n    if (this.heading) {\n      heading = this.renderHeading();\n    }\n\n    const actionsClasses = {\n      'mdc-dialog__actions': !this.hideActions,\n    };\n\n    return html`\n    <div class=\"mdc-dialog ${classMap(classes)}\"\n        role=\"alertdialog\"\n        aria-modal=\"true\"\n        aria-labelledby=\"title\"\n        aria-describedby=\"content\">\n      <div class=\"mdc-dialog__container\">\n        <div class=\"mdc-dialog__surface\">\n          ${heading}\n          <div id=\"content\" class=\"mdc-dialog__content\">\n            <slot id=\"contentSlot\"></slot>\n          </div>\n          <footer\n              id=\"actions\"\n              class=\"${classMap(actionsClasses)}\">\n            <span>\n              <slot name=\"secondaryAction\"></slot>\n            </span>\n            <span>\n             <slot name=\"primaryAction\"></slot>\n            </span>\n          </footer>\n        </div>\n      </div>\n      <div class=\"mdc-dialog__scrim\"></div>\n    </div>`;\n  }\n\n  protected renderHeading() {\n    return html`\n      <h2 id=\"title\" class=\"mdc-dialog__title\">${this.heading}</h2>`;\n  }\n\n  protected override firstUpdated() {\n    super.firstUpdated();\n    this.mdcFoundation.setAutoStackButtons(true);\n    if (this.initialSupressDefaultPressSelector) {\n      this.suppressDefaultPressSelector =\n          this.initialSupressDefaultPressSelector;\n    } else {\n      this.suppressDefaultPressSelector = [\n        this.suppressDefaultPressSelector, 'mwc-textarea',\n        'mwc-menu mwc-list-item', 'mwc-select mwc-list-item'\n      ].join(', ');\n    }\n    this.boundHandleClick = this.mdcFoundation.handleClick.bind(\n                                this.mdcFoundation) as EventListener;\n    this.boundHandleKeydown = this.mdcFoundation.handleKeydown.bind(\n                                  this.mdcFoundation) as EventListener;\n    this.boundHandleDocumentKeydown =\n        this.mdcFoundation.handleDocumentKeydown.bind(this.mdcFoundation) as\n        EventListener;\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    if (this.open && this.mdcFoundation && !this.mdcFoundation.isOpen()) {\n      // We probably got disconnected while we were still open. Re-open,\n      // matching the behavior of native <dialog>.\n      this.setEventListeners();\n      this.mdcFoundation.open();\n    }\n  }\n\n  override disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this.open && this.mdcFoundation) {\n      // If this dialog is opened and then disconnected, we want to close\n      // the foundation, so that 1) any pending timers are cancelled\n      // (in particular for trapFocus), and 2) if we reconnect, we can open\n      // the foundation again to retrigger animations and focus.\n      this.removeEventListeners();\n      this.closingDueToDisconnect = true;\n      this.mdcFoundation.close(this.currentAction || this.defaultAction);\n      this.closingDueToDisconnect = false;\n      this.currentAction = undefined;\n\n      // When we close normally, the releaseFocus callback handles removing\n      // ourselves from the blocking elements stack. However, that callback\n      // happens on a delay, and when we are closing due to a disconnect we\n      // need to remove ourselves before the blocking element polyfill's\n      // mutation observer notices and logs a warning, since it's not valid to\n      // be in the blocking elements stack while disconnected.\n      blockingElements.remove(this);\n    }\n  }\n\n  forceLayout() {\n    this.mdcFoundation.layout();\n  }\n\n  override focus() {\n    const initialFocusEl = this.getInitialFocusEl();\n    initialFocusEl && initialFocusEl.focus();\n  }\n\n  override blur() {\n    if (!this.shadowRoot) {\n      return;\n    }\n\n    const activeEl = this.shadowRoot.activeElement;\n    if (activeEl) {\n      if (activeEl instanceof HTMLElement) {\n        activeEl.blur();\n      }\n    } else {\n      const root = this.getRootNode();\n      const activeEl = root instanceof Document ? root.activeElement : null;\n      if (activeEl instanceof HTMLElement) {\n        activeEl.blur();\n      }\n    }\n  }\n\n  protected setEventListeners() {\n    if (this.boundHandleClick) {\n      this.mdcRoot.addEventListener('click', this.boundHandleClick);\n    }\n    if (this.boundHandleKeydown) {\n      this.mdcRoot.addEventListener(\n          'keydown', this.boundHandleKeydown, applyPassive());\n    }\n    if (this.boundHandleDocumentKeydown) {\n      document.addEventListener(\n          'keydown', this.boundHandleDocumentKeydown, applyPassive());\n    }\n  }\n\n  protected removeEventListeners() {\n    if (this.boundHandleClick) {\n      this.mdcRoot.removeEventListener('click', this.boundHandleClick);\n    }\n\n    if (this.boundHandleKeydown) {\n      this.mdcRoot.removeEventListener('keydown', this.boundHandleKeydown);\n    }\n\n    if (this.boundHandleDocumentKeydown) {\n      document.removeEventListener('keydown', this.boundHandleDocumentKeydown);\n    }\n  }\n\n  close() {\n    this.open = false;\n  }\n\n  show() {\n    this.open = true;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}