{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { atLeastVersion } from \"../common/config/version\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeLocalize } from \"../common/translations/localize\";\nimport { computeRTLDirection, setDirectionStyles } from \"../common/util/compute_rtl\";\nimport { debounce } from \"../common/util/debounce\";\nimport { getHassTranslations, getHassTranslationsPre109, saveTranslationPreferences } from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { getLocalLanguage, getTranslation, getUserLocale } from \"../util/common-translation\";\nimport { storeState } from \"../util/ha-pref-storage\";\nvar updateResourcesIteration = 0;\n\n/*\n * superClass needs to contain `this.hass` and `this._updateHass`.\n */\n\nexport default (function (superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n    function _class() {\n      var _this;\n      _classCallCheck(this, _class);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, _class, [].concat(args));\n      // eslint-disable-next-line: variable-name\n      _this.__coreProgress = void 0;\n      _this.__loadedFragmetTranslations = new Set();\n      _this.__loadedTranslations = {};\n      return _this;\n    }\n    _createClass(_class, [{\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        var _this2 = this;\n        _get(_getPrototypeOf(_class.prototype), \"firstUpdated\", this).call(this, changedProps);\n        this.addEventListener(\"hass-language-select\", function (e) {\n          _this2._selectLanguage(e.detail, true);\n        });\n        this.addEventListener(\"hass-number-format-select\", function (e) {\n          _this2._selectNumberFormat(e.detail, true);\n        });\n        this.addEventListener(\"hass-time-format-select\", function (e) {\n          _this2._selectTimeFormat(e.detail, true);\n        });\n        this.addEventListener(\"hass-date-format-select\", function (e) {\n          _this2._selectDateFormat(e.detail, true);\n        });\n        this.addEventListener(\"hass-time-zone-select\", function (e) {\n          _this2._selectTimeZone(e.detail, true);\n        });\n        this.addEventListener(\"hass-first-weekday-select\", function (e) {\n          _this2._selectFirstWeekday(e.detail, true);\n        });\n        this._loadCoreTranslations(getLocalLanguage());\n      }\n    }, {\n      key: \"updated\",\n      value: function updated(changedProps) {\n        var _this$hass;\n        _get(_getPrototypeOf(_class.prototype), \"updated\", this).call(this, changedProps);\n        if (!changedProps.has(\"hass\")) {\n          return;\n        }\n        var oldHass = changedProps.get(\"hass\");\n        if ((_this$hass = this.hass) !== null && _this$hass !== void 0 && _this$hass.panels && (!oldHass || oldHass.panels !== this.hass.panels)) {\n          this._loadFragmentTranslations(this.hass.language, this.hass.panelUrl);\n        }\n      }\n    }, {\n      key: \"hassConnected\",\n      value: function hassConnected() {\n        var _this3 = this;\n        _get(_getPrototypeOf(_class.prototype), \"hassConnected\", this).call(this);\n        getUserLocale(this.hass).then(function (locale) {\n          if (locale !== null && locale !== void 0 && locale.language && _this3.hass.language !== locale.language) {\n            // We just got language from backend, no need to save back\n            _this3._selectLanguage(locale.language, false);\n          }\n          if (locale !== null && locale !== void 0 && locale.number_format && _this3.hass.locale.number_format !== locale.number_format) {\n            // We just got number_format from backend, no need to save back\n            _this3._selectNumberFormat(locale.number_format, false);\n          }\n          if (locale !== null && locale !== void 0 && locale.time_format && _this3.hass.locale.time_format !== locale.time_format) {\n            // We just got time_format from backend, no need to save back\n            _this3._selectTimeFormat(locale.time_format, false);\n          }\n          if (locale !== null && locale !== void 0 && locale.date_format && _this3.hass.locale.date_format !== locale.date_format) {\n            // We just got date_format from backend, no need to save back\n            _this3._selectDateFormat(locale.date_format, false);\n          }\n          if (locale !== null && locale !== void 0 && locale.time_zone && _this3.hass.locale.time_zone !== locale.time_zone) {\n            // We just got time_zone from backend, no need to save back\n            _this3._selectTimeZone(locale.time_zone, false);\n          }\n          if (locale !== null && locale !== void 0 && locale.first_weekday && _this3.hass.locale.first_weekday !== locale.first_weekday) {\n            // We just got first_weekday from backend, no need to save back\n            _this3._selectFirstWeekday(locale.first_weekday, false);\n          }\n        });\n        this.hass.connection.subscribeEvents(debounce(function () {\n          _this3._refetchCachedHassTranslations(false, false);\n        }, 500), \"component_loaded\");\n        this._applyTranslations(this.hass);\n      }\n    }, {\n      key: \"hassReconnected\",\n      value: function hassReconnected() {\n        _get(_getPrototypeOf(_class.prototype), \"hassReconnected\", this).call(this);\n        this._refetchCachedHassTranslations(true, false);\n        this._applyTranslations(this.hass);\n      }\n    }, {\n      key: \"panelUrlChanged\",\n      value: function panelUrlChanged(newPanelUrl) {\n        _get(_getPrototypeOf(_class.prototype), \"panelUrlChanged\", this).call(this, newPanelUrl);\n        // this may be triggered before hassConnected\n        this._loadFragmentTranslations(this.hass ? this.hass.language : getLocalLanguage(), newPanelUrl);\n      }\n    }, {\n      key: \"_selectNumberFormat\",\n      value: function _selectNumberFormat(number_format, saveToBackend) {\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            number_format: number_format\n          })\n        });\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n      }\n    }, {\n      key: \"_selectTimeFormat\",\n      value: function _selectTimeFormat(time_format, saveToBackend) {\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            time_format: time_format\n          })\n        });\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n      }\n    }, {\n      key: \"_selectDateFormat\",\n      value: function _selectDateFormat(date_format, saveToBackend) {\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            date_format: date_format\n          })\n        });\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n      }\n    }, {\n      key: \"_selectTimeZone\",\n      value: function _selectTimeZone(time_zone, saveToBackend) {\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            time_zone: time_zone\n          })\n        });\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n      }\n    }, {\n      key: \"_selectFirstWeekday\",\n      value: function _selectFirstWeekday(first_weekday, saveToBackend) {\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            first_weekday: first_weekday\n          })\n        });\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n      }\n    }, {\n      key: \"_selectLanguage\",\n      value: function _selectLanguage(language, saveToBackend) {\n        if (!this.hass) {\n          // should not happen, do it to avoid use this.hass!\n          return;\n        }\n\n        // update selectedLanguage so that it can be saved to local storage\n        this._updateHass({\n          locale: Object.assign(Object.assign({}, this.hass.locale), {}, {\n            language: language\n          }),\n          language: language,\n          selectedLanguage: language\n        });\n        storeState(this.hass);\n        if (saveToBackend) {\n          saveTranslationPreferences(this.hass, this.hass.locale);\n        }\n        this._applyTranslations(this.hass);\n        this._refetchCachedHassTranslations(true, true);\n      }\n    }, {\n      key: \"_applyTranslations\",\n      value: function _applyTranslations(hass) {\n        document.querySelector(\"html\").setAttribute(\"lang\", hass.language);\n        this._applyDirection(hass);\n        this._loadCoreTranslations(hass.language);\n        this.__loadedFragmetTranslations = new Set();\n        this._loadFragmentTranslations(hass.language, hass.panelUrl);\n      }\n    }, {\n      key: \"_applyDirection\",\n      value: function _applyDirection(hass) {\n        var direction = computeRTLDirection(hass);\n        setDirectionStyles(direction, this);\n      }\n\n      /**\n       * Load translations from the backend\n       * @param language language to fetch\n       * @param category category to fetch\n       * @param integration optional, if having to fetch for specific integration\n       * @param configFlow optional, if having to fetch for all integrations with a config flow\n       * @param force optional, load even if already cached\n       */\n    }, {\n      key: \"_loadHassTranslations\",\n      value: (function () {\n        var _loadHassTranslations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(language, category, integration, configFlow) {\n          var force,\n            _resources,\n            alreadyLoaded,\n            integrationsToLoad,\n            _alreadyLoaded$integr,\n            resources,\n            _args = arguments;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                force = _args.length > 4 && _args[4] !== undefined ? _args[4] : false;\n                if (!(__BACKWARDS_COMPAT__ && !atLeastVersion(this.hass.connection.haVersion, 0, 109))) {\n                  _context.next = 10;\n                  break;\n                }\n                if (!(category !== \"state\")) {\n                  _context.next = 4;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 4:\n                _context.next = 6;\n                return getHassTranslationsPre109(this.hass, language);\n              case 6:\n                _resources = _context.sent;\n                if (!(this.hass.language !== language)) {\n                  _context.next = 9;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 9:\n                return _context.abrupt(\"return\", this._updateResources(language, _resources));\n              case 10:\n                if (category in this.__loadedTranslations) {\n                  alreadyLoaded = this.__loadedTranslations[category];\n                } else {\n                  alreadyLoaded = this.__loadedTranslations[category] = {\n                    integrations: [],\n                    setup: false,\n                    configFlow: false\n                  };\n                }\n                integrationsToLoad = []; // Check if already loaded\n                if (force) {\n                  _context.next = 27;\n                  break;\n                }\n                if (!(integration && Array.isArray(integration))) {\n                  _context.next = 19;\n                  break;\n                }\n                integrationsToLoad = integration.filter(function (i) {\n                  return !alreadyLoaded.integrations.includes(i);\n                });\n                if (integrationsToLoad.length) {\n                  _context.next = 17;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 17:\n                _context.next = 27;\n                break;\n              case 19:\n                if (!integration) {\n                  _context.next = 25;\n                  break;\n                }\n                if (!alreadyLoaded.integrations.includes(integration)) {\n                  _context.next = 22;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 22:\n                integrationsToLoad = [integration];\n                _context.next = 27;\n                break;\n              case 25:\n                if (!(configFlow ? alreadyLoaded.configFlow : alreadyLoaded.setup)) {\n                  _context.next = 27;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 27:\n                // Add to cache\n                if (integrationsToLoad.length) {\n                  (_alreadyLoaded$integr = alreadyLoaded.integrations).push.apply(_alreadyLoaded$integr, _toConsumableArray(integrationsToLoad));\n                } else {\n                  alreadyLoaded.setup = true;\n                  if (configFlow) {\n                    alreadyLoaded.configFlow = true;\n                  }\n                }\n                _context.next = 30;\n                return getHassTranslations(this.hass, language, category, integrationsToLoad.length ? integrationsToLoad : undefined, configFlow);\n              case 30:\n                resources = _context.sent;\n                if (!(this.hass.language !== language)) {\n                  _context.next = 33;\n                  break;\n                }\n                return _context.abrupt(\"return\", this.hass.localize);\n              case 33:\n                return _context.abrupt(\"return\", this._updateResources(language, resources));\n              case 34:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _loadHassTranslations(_x, _x2, _x3, _x4) {\n          return _loadHassTranslations2.apply(this, arguments);\n        }\n        return _loadHassTranslations;\n      }())\n    }, {\n      key: \"_loadFragmentTranslations\",\n      value: function () {\n        var _loadFragmentTranslations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(language, panelUrl) {\n          var _this$hass2;\n          var panelComponent, fragment, result;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (panelUrl) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\", undefined);\n              case 2:\n                panelComponent = (_this$hass2 = this.hass) === null || _this$hass2 === void 0 || (_this$hass2 = _this$hass2.panels) === null || _this$hass2 === void 0 || (_this$hass2 = _this$hass2[panelUrl]) === null || _this$hass2 === void 0 ? void 0 : _this$hass2.component_name; // If it's the first call we don't have panel info yet to check the component.\n                fragment = translationMetadata.fragments.includes(panelComponent || panelUrl) ? panelComponent || panelUrl : undefined;\n                if (fragment) {\n                  _context2.next = 6;\n                  break;\n                }\n                return _context2.abrupt(\"return\", undefined);\n              case 6:\n                if (!this.__loadedFragmetTranslations.has(fragment)) {\n                  _context2.next = 8;\n                  break;\n                }\n                return _context2.abrupt(\"return\", this.hass.localize);\n              case 8:\n                this.__loadedFragmetTranslations.add(fragment);\n                _context2.next = 11;\n                return getTranslation(fragment, language);\n              case 11:\n                result = _context2.sent;\n                return _context2.abrupt(\"return\", this._updateResources(result.language, result.data));\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _loadFragmentTranslations(_x5, _x6) {\n          return _loadFragmentTranslations2.apply(this, arguments);\n        }\n        return _loadFragmentTranslations;\n      }()\n    }, {\n      key: \"_loadCoreTranslations\",\n      value: function () {\n        var _loadCoreTranslations2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(language) {\n          var result;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.__coreProgress === language)) {\n                  _context3.next = 2;\n                  break;\n                }\n                return _context3.abrupt(\"return\");\n              case 2:\n                this.__coreProgress = language;\n                _context3.prev = 3;\n                _context3.next = 6;\n                return getTranslation(null, language);\n              case 6:\n                result = _context3.sent;\n                _context3.next = 9;\n                return this._updateResources(result.language, result.data);\n              case 9:\n                _context3.prev = 9;\n                this.__coreProgress = undefined;\n                return _context3.finish(9);\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this, [[3,, 9, 12]]);\n        }));\n        function _loadCoreTranslations(_x7) {\n          return _loadCoreTranslations2.apply(this, arguments);\n        }\n        return _loadCoreTranslations;\n      }()\n    }, {\n      key: \"_updateResources\",\n      value: function () {\n        var _updateResources2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(language, data) {\n          var _this$hass3, _ref, _this$hass5, _this$hass6;\n          var i, _this$hass4, resources, localize;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                updateResourcesIteration++;\n                i = updateResourcesIteration; // Update the language in hass, and update the resources with the newly\n                // loaded resources. This merges the new data on top of the old data for\n                // this language, so that the full translation set can be loaded across\n                // multiple fragments.\n                //\n                // Beware of a subtle race condition: it is possible to get here twice\n                // before this.hass is even created. In this case our base state comes\n                // from this._pendingHass instead. Otherwise the first set of strings is\n                // overwritten when we call _updateHass the second time!\n                // Allow hass to be updated\n                _context4.next = 4;\n                return new Promise(function (resolve) {\n                  setTimeout(resolve, 0);\n                });\n              case 4:\n                if (!(language !== ((_this$hass3 = this.hass) !== null && _this$hass3 !== void 0 ? _this$hass3 : this._pendingHass).language)) {\n                  _context4.next = 6;\n                  break;\n                }\n                return _context4.abrupt(\"return\", ((_this$hass4 = this.hass) !== null && _this$hass4 !== void 0 ? _this$hass4 : this._pendingHass).localize);\n              case 6:\n                resources = _defineProperty({}, language, Object.assign(Object.assign({}, (_ref = (_this$hass5 = this.hass) !== null && _this$hass5 !== void 0 ? _this$hass5 : this._pendingHass) === null || _ref === void 0 || (_ref = _ref.resources) === null || _ref === void 0 ? void 0 : _ref[language]), data)); // Update resources immediately, so when a new update comes in we don't miss values\n                this._updateHass({\n                  resources: resources\n                });\n                _context4.next = 10;\n                return computeLocalize(this, language, resources);\n              case 10:\n                localize = _context4.sent;\n                if (!(updateResourcesIteration !== i || language !== ((_this$hass6 = this.hass) !== null && _this$hass6 !== void 0 ? _this$hass6 : this._pendingHass).language)) {\n                  _context4.next = 13;\n                  break;\n                }\n                return _context4.abrupt(\"return\", localize);\n              case 13:\n                this._updateHass({\n                  localize: localize\n                });\n                fireEvent(this, \"translations-updated\");\n                return _context4.abrupt(\"return\", localize);\n              case 16:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4, this);\n        }));\n        function _updateResources(_x8, _x9) {\n          return _updateResources2.apply(this, arguments);\n        }\n        return _updateResources;\n      }()\n    }, {\n      key: \"_refetchCachedHassTranslations\",\n      value: function _refetchCachedHassTranslations(includeConfigFlow, clearIntegrations) {\n        for (var _i = 0, _Object$entries = Object.entries(this.__loadedTranslations); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            _category = _Object$entries$_i[0],\n            cache = _Object$entries$_i[1];\n          if (clearIntegrations) {\n            cache.integrations = [];\n          }\n          if (cache.setup) {\n            this._loadHassTranslations(this.hass.language, _category, undefined, includeConfigFlow && cache.configFlow, true);\n          }\n        }\n      }\n    }]);\n    return _class;\n  }(superClass);\n});\n\n// Load selected translation into memory immediately so it is ready when Polymer\n// initializes.\ngetTranslation(null, getLocalLanguage());","map":{"version":3,"names":["atLeastVersion","fireEvent","computeLocalize","computeRTLDirection","setDirectionStyles","debounce","getHassTranslations","getHassTranslationsPre109","saveTranslationPreferences","translationMetadata","getLocalLanguage","getTranslation","getUserLocale","storeState","updateResourcesIteration","superClass","_superClass","_inherits","_class","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","__coreProgress","__loadedFragmetTranslations","Set","__loadedTranslations","_createClass","key","value","firstUpdated","changedProps","_this2","_get","_getPrototypeOf","prototype","call","addEventListener","e","_selectLanguage","detail","_selectNumberFormat","_selectTimeFormat","_selectDateFormat","_selectTimeZone","_selectFirstWeekday","_loadCoreTranslations","updated","_this$hass","has","oldHass","get","hass","panels","_loadFragmentTranslations","language","panelUrl","hassConnected","_this3","then","locale","number_format","time_format","date_format","time_zone","first_weekday","connection","subscribeEvents","_refetchCachedHassTranslations","_applyTranslations","hassReconnected","panelUrlChanged","newPanelUrl","saveToBackend","_updateHass","Object","assign","selectedLanguage","document","querySelector","setAttribute","_applyDirection","direction","_loadHassTranslations2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","category","integration","configFlow","force","_resources","alreadyLoaded","integrationsToLoad","_alreadyLoaded$integr","resources","_args","wrap","_callee$","_context","prev","next","undefined","__BACKWARDS_COMPAT__","haVersion","abrupt","localize","sent","_updateResources","integrations","setup","isArray","filter","i","includes","push","apply","_toConsumableArray","stop","_loadHassTranslations","_x","_x2","_x3","_x4","_loadFragmentTranslations2","_callee2","_this$hass2","panelComponent","fragment","result","_callee2$","_context2","component_name","fragments","add","data","_x5","_x6","_loadCoreTranslations2","_callee3","_callee3$","_context3","finish","_x7","_updateResources2","_callee4","_this$hass3","_ref","_this$hass5","_this$hass6","_this$hass4","_callee4$","_context4","Promise","resolve","setTimeout","_pendingHass","_defineProperty","_x8","_x9","includeConfigFlow","clearIntegrations","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","cache"],"sources":["/workspaces/frontend/src/state/translations-mixin.ts"],"sourcesContent":["import { atLeastVersion } from \"../common/config/version\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { computeLocalize, LocalizeFunc } from \"../common/translations/localize\";\nimport {\n  computeRTLDirection,\n  setDirectionStyles,\n} from \"../common/util/compute_rtl\";\nimport { debounce } from \"../common/util/debounce\";\nimport {\n  FirstWeekday,\n  getHassTranslations,\n  getHassTranslationsPre109,\n  NumberFormat,\n  saveTranslationPreferences,\n  TimeFormat,\n  DateFormat,\n  TranslationCategory,\n  TimeZone,\n} from \"../data/translation\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { Constructor, HomeAssistant } from \"../types\";\nimport {\n  getLocalLanguage,\n  getTranslation,\n  getUserLocale,\n} from \"../util/common-translation\";\nimport { storeState } from \"../util/ha-pref-storage\";\nimport { HassBaseEl } from \"./hass-base-mixin\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"hass-language-select\": {\n      language: string;\n    };\n    \"hass-number-format-select\": {\n      number_format: NumberFormat;\n    };\n    \"hass-time-format-select\": {\n      time_format: TimeFormat;\n    };\n    \"hass-date-format-select\": {\n      date_format: DateFormat;\n    };\n    \"hass-time-zone-select\": {\n      time_zone: TimeZone;\n    };\n    \"hass-first-weekday-select\": {\n      first_weekday: FirstWeekday;\n    };\n    \"translations-updated\": undefined;\n  }\n}\n\ninterface LoadedTranslationCategory {\n  // individual integrations loaded for this category\n  integrations: string[];\n  // if integrations that have been set up for this category are loaded\n  setup: boolean;\n  // if\n  configFlow: boolean;\n}\n\nlet updateResourcesIteration = 0;\n\n/*\n * superClass needs to contain `this.hass` and `this._updateHass`.\n */\n\nexport default <T extends Constructor<HassBaseEl>>(superClass: T) =>\n  class extends superClass {\n    // eslint-disable-next-line: variable-name\n    private __coreProgress?: string;\n\n    private __loadedFragmetTranslations: Set<string> = new Set();\n\n    private __loadedTranslations: {\n      // track what things have been loaded\n      [category: string]: LoadedTranslationCategory;\n    } = {};\n\n    protected firstUpdated(changedProps) {\n      super.firstUpdated(changedProps);\n      this.addEventListener(\"hass-language-select\", (e) => {\n        this._selectLanguage((e as CustomEvent).detail, true);\n      });\n      this.addEventListener(\"hass-number-format-select\", (e) => {\n        this._selectNumberFormat((e as CustomEvent).detail, true);\n      });\n      this.addEventListener(\"hass-time-format-select\", (e) => {\n        this._selectTimeFormat((e as CustomEvent).detail, true);\n      });\n      this.addEventListener(\"hass-date-format-select\", (e) => {\n        this._selectDateFormat((e as CustomEvent).detail, true);\n      });\n      this.addEventListener(\"hass-time-zone-select\", (e) => {\n        this._selectTimeZone((e as CustomEvent).detail, true);\n      });\n      this.addEventListener(\"hass-first-weekday-select\", (e) => {\n        this._selectFirstWeekday((e as CustomEvent).detail, true);\n      });\n      this._loadCoreTranslations(getLocalLanguage());\n    }\n\n    protected updated(changedProps) {\n      super.updated(changedProps);\n      if (!changedProps.has(\"hass\")) {\n        return;\n      }\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n      if (\n        this.hass?.panels &&\n        (!oldHass || oldHass.panels !== this.hass.panels)\n      ) {\n        this._loadFragmentTranslations(this.hass.language, this.hass.panelUrl);\n      }\n    }\n\n    protected hassConnected() {\n      super.hassConnected();\n      getUserLocale(this.hass!).then((locale) => {\n        if (locale?.language && this.hass!.language !== locale.language) {\n          // We just got language from backend, no need to save back\n          this._selectLanguage(locale.language, false);\n        }\n        if (\n          locale?.number_format &&\n          this.hass!.locale.number_format !== locale.number_format\n        ) {\n          // We just got number_format from backend, no need to save back\n          this._selectNumberFormat(locale.number_format, false);\n        }\n        if (\n          locale?.time_format &&\n          this.hass!.locale.time_format !== locale.time_format\n        ) {\n          // We just got time_format from backend, no need to save back\n          this._selectTimeFormat(locale.time_format, false);\n        }\n        if (\n          locale?.date_format &&\n          this.hass!.locale.date_format !== locale.date_format\n        ) {\n          // We just got date_format from backend, no need to save back\n          this._selectDateFormat(locale.date_format, false);\n        }\n        if (\n          locale?.time_zone &&\n          this.hass!.locale.time_zone !== locale.time_zone\n        ) {\n          // We just got time_zone from backend, no need to save back\n          this._selectTimeZone(locale.time_zone, false);\n        }\n        if (\n          locale?.first_weekday &&\n          this.hass!.locale.first_weekday !== locale.first_weekday\n        ) {\n          // We just got first_weekday from backend, no need to save back\n          this._selectFirstWeekday(locale.first_weekday, false);\n        }\n      });\n\n      this.hass!.connection.subscribeEvents(\n        debounce(() => {\n          this._refetchCachedHassTranslations(false, false);\n        }, 500),\n        \"component_loaded\"\n      );\n      this._applyTranslations(this.hass!);\n    }\n\n    protected hassReconnected() {\n      super.hassReconnected();\n      this._refetchCachedHassTranslations(true, false);\n      this._applyTranslations(this.hass!);\n    }\n\n    protected panelUrlChanged(newPanelUrl: string) {\n      super.panelUrlChanged(newPanelUrl);\n      // this may be triggered before hassConnected\n      this._loadFragmentTranslations(\n        this.hass ? this.hass.language : getLocalLanguage(),\n        newPanelUrl\n      );\n    }\n\n    private _selectNumberFormat(\n      number_format: NumberFormat,\n      saveToBackend: boolean\n    ) {\n      this._updateHass({\n        locale: { ...this.hass!.locale, number_format: number_format },\n      });\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass!, this.hass!.locale);\n      }\n    }\n\n    private _selectTimeFormat(time_format: TimeFormat, saveToBackend: boolean) {\n      this._updateHass({\n        locale: { ...this.hass!.locale, time_format: time_format },\n      });\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass!, this.hass!.locale);\n      }\n    }\n\n    private _selectDateFormat(date_format: DateFormat, saveToBackend: boolean) {\n      this._updateHass({\n        locale: {\n          ...this.hass!.locale,\n          date_format: date_format,\n        },\n      });\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass!, this.hass!.locale);\n      }\n    }\n\n    private _selectTimeZone(time_zone: TimeZone, saveToBackend: boolean) {\n      this._updateHass({\n        locale: { ...this.hass!.locale, time_zone },\n      });\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass!, this.hass!.locale);\n      }\n    }\n\n    private _selectFirstWeekday(\n      first_weekday: FirstWeekday,\n      saveToBackend: boolean\n    ) {\n      this._updateHass({\n        locale: { ...this.hass!.locale, first_weekday: first_weekday },\n      });\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass!, this.hass!.locale);\n      }\n    }\n\n    private _selectLanguage(language: string, saveToBackend: boolean) {\n      if (!this.hass) {\n        // should not happen, do it to avoid use this.hass!\n        return;\n      }\n\n      // update selectedLanguage so that it can be saved to local storage\n      this._updateHass({\n        locale: { ...this.hass!.locale, language: language },\n        language: language,\n        selectedLanguage: language,\n      });\n      storeState(this.hass);\n      if (saveToBackend) {\n        saveTranslationPreferences(this.hass, this.hass.locale);\n      }\n      this._applyTranslations(this.hass);\n      this._refetchCachedHassTranslations(true, true);\n    }\n\n    private _applyTranslations(hass: HomeAssistant) {\n      document.querySelector(\"html\")!.setAttribute(\"lang\", hass.language);\n      this._applyDirection(hass);\n      this._loadCoreTranslations(hass.language);\n      this.__loadedFragmetTranslations = new Set();\n      this._loadFragmentTranslations(hass.language, hass.panelUrl);\n    }\n\n    private _applyDirection(hass: HomeAssistant) {\n      const direction = computeRTLDirection(hass);\n      setDirectionStyles(direction, this);\n    }\n\n    /**\n     * Load translations from the backend\n     * @param language language to fetch\n     * @param category category to fetch\n     * @param integration optional, if having to fetch for specific integration\n     * @param configFlow optional, if having to fetch for all integrations with a config flow\n     * @param force optional, load even if already cached\n     */\n    private async _loadHassTranslations(\n      language: string,\n      category: Parameters<typeof getHassTranslations>[2],\n      integration?: Parameters<typeof getHassTranslations>[3],\n      configFlow?: Parameters<typeof getHassTranslations>[4],\n      force = false\n    ): Promise<LocalizeFunc> {\n      if (\n        __BACKWARDS_COMPAT__ &&\n        !atLeastVersion(this.hass!.connection.haVersion, 0, 109)\n      ) {\n        if (category !== \"state\") {\n          return this.hass!.localize;\n        }\n        const resources = await getHassTranslationsPre109(this.hass!, language);\n\n        // Ignore the repsonse if user switched languages before we got response\n        if (this.hass!.language !== language) {\n          return this.hass!.localize;\n        }\n\n        return this._updateResources(language, resources);\n      }\n\n      let alreadyLoaded: LoadedTranslationCategory;\n\n      if (category in this.__loadedTranslations) {\n        alreadyLoaded = this.__loadedTranslations[category];\n      } else {\n        alreadyLoaded = this.__loadedTranslations[category] = {\n          integrations: [],\n          setup: false,\n          configFlow: false,\n        };\n      }\n\n      let integrationsToLoad: string[] = [];\n\n      // Check if already loaded\n      if (!force) {\n        if (integration && Array.isArray(integration)) {\n          integrationsToLoad = integration.filter(\n            (i) => !alreadyLoaded.integrations.includes(i)\n          );\n          if (!integrationsToLoad.length) {\n            return this.hass!.localize;\n          }\n        } else if (integration) {\n          if (alreadyLoaded.integrations.includes(integration)) {\n            return this.hass!.localize;\n          }\n          integrationsToLoad = [integration];\n        } else if (\n          configFlow ? alreadyLoaded.configFlow : alreadyLoaded.setup\n        ) {\n          return this.hass!.localize;\n        }\n      }\n\n      // Add to cache\n      if (integrationsToLoad.length) {\n        alreadyLoaded.integrations.push(...integrationsToLoad);\n      } else {\n        alreadyLoaded.setup = true;\n        if (configFlow) {\n          alreadyLoaded.configFlow = true;\n        }\n      }\n\n      const resources = await getHassTranslations(\n        this.hass!,\n        language,\n        category,\n        integrationsToLoad.length ? integrationsToLoad : undefined,\n        configFlow\n      );\n\n      // Ignore the repsonse if user switched languages before we got response\n      if (this.hass!.language !== language) {\n        return this.hass!.localize;\n      }\n\n      return this._updateResources(language, resources);\n    }\n\n    private async _loadFragmentTranslations(\n      language: string,\n      panelUrl: string\n    ) {\n      if (!panelUrl) {\n        return undefined;\n      }\n\n      const panelComponent = this.hass?.panels?.[panelUrl]?.component_name;\n\n      // If it's the first call we don't have panel info yet to check the component.\n      const fragment = translationMetadata.fragments.includes(\n        panelComponent || panelUrl\n      )\n        ? panelComponent || panelUrl\n        : undefined;\n\n      if (!fragment) {\n        return undefined;\n      }\n\n      if (this.__loadedFragmetTranslations.has(fragment)) {\n        return this.hass!.localize;\n      }\n      this.__loadedFragmetTranslations.add(fragment);\n      const result = await getTranslation(fragment, language);\n      return this._updateResources(result.language, result.data);\n    }\n\n    private async _loadCoreTranslations(language: string) {\n      // Check if already in progress\n      // Necessary as we call this in firstUpdated and hassConnected\n      if (this.__coreProgress === language) {\n        return;\n      }\n      this.__coreProgress = language;\n      try {\n        const result = await getTranslation(null, language);\n        await this._updateResources(result.language, result.data);\n      } finally {\n        this.__coreProgress = undefined;\n      }\n    }\n\n    private async _updateResources(\n      language: string,\n      data: any\n    ): Promise<LocalizeFunc> {\n      updateResourcesIteration++;\n      const i = updateResourcesIteration;\n\n      // Update the language in hass, and update the resources with the newly\n      // loaded resources. This merges the new data on top of the old data for\n      // this language, so that the full translation set can be loaded across\n      // multiple fragments.\n      //\n      // Beware of a subtle race condition: it is possible to get here twice\n      // before this.hass is even created. In this case our base state comes\n      // from this._pendingHass instead. Otherwise the first set of strings is\n      // overwritten when we call _updateHass the second time!\n\n      // Allow hass to be updated\n      await new Promise((resolve) => {\n        setTimeout(resolve, 0);\n      });\n\n      if (language !== (this.hass ?? this._pendingHass).language) {\n        // the language was changed, abort\n        return (this.hass ?? this._pendingHass).localize!;\n      }\n\n      const resources = {\n        [language]: {\n          ...(this.hass ?? this._pendingHass)?.resources?.[language],\n          ...data,\n        },\n      };\n\n      // Update resources immediately, so when a new update comes in we don't miss values\n      this._updateHass({ resources });\n\n      const localize = await computeLocalize(this, language, resources);\n\n      if (\n        updateResourcesIteration !== i ||\n        language !== (this.hass ?? this._pendingHass).language\n      ) {\n        // if a new iteration has started or the language changed, abort\n        return localize;\n      }\n\n      this._updateHass({\n        localize,\n      });\n      fireEvent(this, \"translations-updated\");\n\n      return localize;\n    }\n\n    private _refetchCachedHassTranslations(\n      includeConfigFlow: boolean,\n      clearIntegrations: boolean\n    ) {\n      for (const [category, cache] of Object.entries(\n        this.__loadedTranslations\n      )) {\n        if (clearIntegrations) {\n          cache.integrations = [];\n        }\n        if (cache.setup) {\n          this._loadHassTranslations(\n            this.hass!.language,\n            category as TranslationCategory,\n            undefined,\n            includeConfigFlow && cache.configFlow,\n            true\n          );\n        }\n      }\n    }\n  };\n\n// Load selected translation into memory immediately so it is ready when Polymer\n// initializes.\ngetTranslation(null, getLocalLanguage());\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}