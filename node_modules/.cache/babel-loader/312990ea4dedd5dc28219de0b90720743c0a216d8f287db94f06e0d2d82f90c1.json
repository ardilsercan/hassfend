{"ast":null,"code":"import memoizeOne from \"memoize-one\";\nexport const formatLanguageCode = (languageCode, locale) => {\n  try {\n    var _formatLanguageCodeMe, _formatLanguageCodeMe2;\n    return (_formatLanguageCodeMe = (_formatLanguageCodeMe2 = formatLanguageCodeMem(locale)) === null || _formatLanguageCodeMe2 === void 0 ? void 0 : _formatLanguageCodeMe2.of(languageCode)) !== null && _formatLanguageCodeMe !== void 0 ? _formatLanguageCodeMe : languageCode;\n  } catch (_unused) {\n    return languageCode;\n  }\n};\nconst formatLanguageCodeMem = memoizeOne(locale => Intl && \"DisplayNames\" in Intl ? new Intl.DisplayNames(locale.language, {\n  type: \"language\",\n  fallback: \"code\"\n}) : undefined);","map":{"version":3,"names":["memoizeOne","formatLanguageCode","languageCode","locale","_formatLanguageCodeMe","_formatLanguageCodeMe2","formatLanguageCodeMem","of","_unused","Intl","DisplayNames","language","type","fallback","undefined"],"sources":["/workspaces/frontend/src/common/language/format_language.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\nimport { FrontendLocaleData } from \"../../data/translation\";\n\nexport const formatLanguageCode = (\n  languageCode: string,\n  locale: FrontendLocaleData\n) => {\n  try {\n    return formatLanguageCodeMem(locale)?.of(languageCode) ?? languageCode;\n  } catch {\n    return languageCode;\n  }\n};\n\nconst formatLanguageCodeMem = memoizeOne((locale: FrontendLocaleData) =>\n  Intl && \"DisplayNames\" in Intl\n    ? new Intl.DisplayNames(locale.language, {\n        type: \"language\",\n        fallback: \"code\",\n      })\n    : undefined\n);\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AAGpC,OAAO,MAAMC,kBAAkB,GAAGA,CAChCC,YAAoB,EACpBC,MAA0B,KACvB;EACH,IAAI;IAAA,IAAAC,qBAAA,EAAAC,sBAAA;IACF,QAAAD,qBAAA,IAAAC,sBAAA,GAAOC,qBAAqB,CAACH,MAAM,CAAC,cAAAE,sBAAA,uBAA7BA,sBAAA,CAA+BE,EAAE,CAACL,YAAY,CAAC,cAAAE,qBAAA,cAAAA,qBAAA,GAAIF,YAAY;EACxE,CAAC,CAAC,OAAAM,OAAA,EAAM;IACN,OAAON,YAAY;EACrB;AACF,CAAC;AAED,MAAMI,qBAAqB,GAAGN,UAAU,CAAEG,MAA0B,IAClEM,IAAI,IAAI,cAAc,IAAIA,IAAI,GAC1B,IAAIA,IAAI,CAACC,YAAY,CAACP,MAAM,CAACQ,QAAQ,EAAE;EACrCC,IAAI,EAAE,UAAU;EAChBC,QAAQ,EAAE;AACZ,CAAC,CAAC,GACFC,SACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}