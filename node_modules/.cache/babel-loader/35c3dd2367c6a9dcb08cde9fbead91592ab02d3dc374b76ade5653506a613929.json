{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nexport var IronMeta = /*#__PURE__*/function () {\n  /**\n   * @param {{\n   *   type: (string|null|undefined),\n   *   key: (string|null|undefined),\n   *   value: *,\n   * }=} options\n   */\n  function IronMeta(options) {\n    _classCallCheck(this, IronMeta);\n    IronMeta[' '](options);\n\n    /** @type {string} */\n    this.type = options && options.type || 'default';\n    /** @type {string|null|undefined} */\n    this.key = options && options.key;\n    if (options && 'value' in options) {\n      /** @type {*} */\n      this.value = options.value;\n    }\n  }\n\n  /** @return {*} */\n  _createClass(IronMeta, [{\n    key: \"value\",\n    get: function get() {\n      var type = this.type;\n      var key = this.key;\n      if (type && key) {\n        return IronMeta.types[type] && IronMeta.types[type][key];\n      }\n    }\n\n    /** @param {*} value */,\n    set: function set(value) {\n      var type = this.type;\n      var key = this.key;\n      if (type && key) {\n        type = IronMeta.types[type] = IronMeta.types[type] || {};\n        if (value == null) {\n          delete type[key];\n        } else {\n          type[key] = value;\n        }\n      }\n    }\n\n    /** @return {!Array<*>} */\n  }, {\n    key: \"list\",\n    get: function get() {\n      var type = this.type;\n      if (type) {\n        var items = IronMeta.types[this.type];\n        if (!items) {\n          return [];\n        }\n        return Object.keys(items).map(function (key) {\n          return metaDatas[this.type][key];\n        }, this);\n      }\n    }\n\n    /**\n     * @param {string} key\n     * @return {*}\n     */\n  }, {\n    key: \"byKey\",\n    value: function byKey(key) {\n      this.key = key;\n      return this.value;\n    }\n  }]);\n  return IronMeta;\n}();\n;\n\n// This function is used to convince Closure not to remove constructor calls\n// for instances that are not held anywhere. For example, when\n// `new IronMeta({...})` is used only for the side effect of adding a value.\nIronMeta[' '] = function () {};\nIronMeta.types = {};\nvar metaDatas = IronMeta.types;\n\n/**\n`iron-meta` is a generic element you can use for sharing information across the\nDOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)\nsuch that any instance of iron-meta has access to the shared information. You\ncan use `iron-meta` to share whatever you want (or create an extension [like\nx-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an\nimport, or constructed in any way you see fit. The only requirement is that you\ncreate them before you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');\n\n@group Iron Elements\n@demo demo/index.html\n@element iron-meta\n*/\nPolymer({\n  is: 'iron-meta',\n  properties: {\n    /**\n     * The type of meta-data.  All meta-data of the same type is stored\n     * together.\n     * @type {string}\n     */\n    type: {\n      type: String,\n      value: 'default'\n    },\n    /**\n     * The key used to store `value` under the `type` namespace.\n     * @type {?string}\n     */\n    key: {\n      type: String\n    },\n    /**\n     * The meta-data to store or retrieve.\n     * @type {*}\n     */\n    value: {\n      type: String,\n      notify: true\n    },\n    /**\n     * If true, `value` is set to the iron-meta instance itself.\n     */\n    self: {\n      type: Boolean,\n      observer: '_selfChanged'\n    },\n    __meta: {\n      type: Boolean,\n      computed: '__computeMeta(type, key, value)'\n    }\n  },\n  hostAttributes: {\n    hidden: true\n  },\n  __computeMeta: function __computeMeta(type, key, value) {\n    var meta = new IronMeta({\n      type: type,\n      key: key\n    });\n    if (value !== undefined && value !== meta.value) {\n      meta.value = value;\n    } else if (this.value !== meta.value) {\n      this.value = meta.value;\n    }\n    return meta;\n  },\n  get list() {\n    return this.__meta && this.__meta.list;\n  },\n  _selfChanged: function _selfChanged(self) {\n    if (self) {\n      this.value = this;\n    }\n  },\n  /**\n   * Retrieves meta data value by key.\n   *\n   * @method byKey\n   * @param {string} key The key of the meta-data to be returned.\n   * @return {*}\n   */\n  byKey: function byKey(key) {\n    return new IronMeta({\n      type: this.type,\n      key: key\n    }).value;\n  }\n});","map":{"version":3,"names":["Polymer","IronMeta","options","_classCallCheck","type","key","value","_createClass","get","types","set","items","Object","keys","map","metaDatas","byKey","is","properties","String","notify","self","Boolean","observer","__meta","computed","hostAttributes","hidden","__computeMeta","meta","undefined","list","_selfChanged"],"sources":["/workspaces/frontend/node_modules/@polymer/iron-meta/iron-meta.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\n\nexport class IronMeta {\n  /**\n   * @param {{\n   *   type: (string|null|undefined),\n   *   key: (string|null|undefined),\n   *   value: *,\n   * }=} options\n   */\n  constructor(options) {\n    IronMeta[' '](options);\n\n    /** @type {string} */\n    this.type = (options && options.type) || 'default';\n    /** @type {string|null|undefined} */\n    this.key = options && options.key;\n    if (options && 'value' in options) {\n      /** @type {*} */\n      this.value = options.value;\n    }\n  }\n\n  /** @return {*} */\n  get value() {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      return IronMeta.types[type] && IronMeta.types[type][key];\n    }\n  }\n\n  /** @param {*} value */\n  set value(value) {\n    var type = this.type;\n    var key = this.key;\n\n    if (type && key) {\n      type = IronMeta.types[type] = IronMeta.types[type] || {};\n      if (value == null) {\n        delete type[key];\n      } else {\n        type[key] = value;\n      }\n    }\n  }\n\n  /** @return {!Array<*>} */\n  get list() {\n    var type = this.type;\n\n    if (type) {\n      var items = IronMeta.types[this.type];\n      if (!items) {\n        return [];\n      }\n\n      return Object.keys(items).map(function(key) {\n        return metaDatas[this.type][key];\n      }, this);\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @return {*}\n   */\n  byKey(key) {\n    this.key = key;\n    return this.value;\n  }\n};\n\n// This function is used to convince Closure not to remove constructor calls\n// for instances that are not held anywhere. For example, when\n// `new IronMeta({...})` is used only for the side effect of adding a value.\nIronMeta[' '] = function() {};\n\nIronMeta.types = {};\n\nvar metaDatas = IronMeta.types;\n\n/**\n`iron-meta` is a generic element you can use for sharing information across the\nDOM tree. It uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern)\nsuch that any instance of iron-meta has access to the shared information. You\ncan use `iron-meta` to share whatever you want (or create an extension [like\nx-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an\nimport, or constructed in any way you see fit. The only requirement is that you\ncreate them before you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info');\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info');\n\n@group Iron Elements\n@demo demo/index.html\n@element iron-meta\n*/\nPolymer({\n\n  is: 'iron-meta',\n\n  properties: {\n\n    /**\n     * The type of meta-data.  All meta-data of the same type is stored\n     * together.\n     * @type {string}\n     */\n    type: {\n      type: String,\n      value: 'default',\n    },\n\n    /**\n     * The key used to store `value` under the `type` namespace.\n     * @type {?string}\n     */\n    key: {\n      type: String,\n    },\n\n    /**\n     * The meta-data to store or retrieve.\n     * @type {*}\n     */\n    value: {\n      type: String,\n      notify: true,\n    },\n\n    /**\n     * If true, `value` is set to the iron-meta instance itself.\n     */\n    self: {type: Boolean, observer: '_selfChanged'},\n\n    __meta: {type: Boolean, computed: '__computeMeta(type, key, value)'}\n  },\n\n  hostAttributes: {hidden: true},\n\n  __computeMeta: function(type, key, value) {\n    var meta = new IronMeta({type: type, key: key});\n\n    if (value !== undefined && value !== meta.value) {\n      meta.value = value;\n    } else if (this.value !== meta.value) {\n      this.value = meta.value;\n    }\n\n    return meta;\n  },\n\n  get list() {\n    return this.__meta && this.__meta.list;\n  },\n\n  _selfChanged: function(self) {\n    if (self) {\n      this.value = this;\n    }\n  },\n\n  /**\n   * Retrieves meta data value by key.\n   *\n   * @method byKey\n   * @param {string} key The key of the meta-data to be returned.\n   * @return {*}\n   */\n  byKey: function(key) {\n    return new IronMeta({type: this.type, key: key}).value;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}