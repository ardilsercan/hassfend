{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nvar SUFFIXES = [\" \", \": \"];\n\n/**\n * Strips a device name from an entity name.\n * @param entityName the entity name\n * @param lowerCasedPrefix the prefix to strip, lower cased\n * @returns\n */\nexport var stripPrefixFromEntityName = function stripPrefixFromEntityName(entityName, lowerCasedPrefix) {\n  var lowerCasedEntityName = entityName.toLowerCase();\n  for (var _i = 0, _SUFFIXES = SUFFIXES; _i < _SUFFIXES.length; _i++) {\n    var suffix = _SUFFIXES[_i];\n    var lowerCasedPrefixWithSuffix = \"\".concat(lowerCasedPrefix).concat(suffix);\n    if (lowerCasedEntityName.startsWith(lowerCasedPrefixWithSuffix)) {\n      var newName = entityName.substring(lowerCasedPrefixWithSuffix.length);\n      if (newName.length) {\n        // If first word already has an upper case letter (e.g. from brand name)\n        // leave as-is, otherwise capitalize the first word.\n        return hasUpperCase(newName.substr(0, newName.indexOf(\" \"))) ? newName : newName[0].toUpperCase() + newName.slice(1);\n      }\n    }\n  }\n  return undefined;\n};\nvar hasUpperCase = function hasUpperCase(str) {\n  return str.toLowerCase() !== str;\n};","map":{"version":3,"names":["SUFFIXES","stripPrefixFromEntityName","entityName","lowerCasedPrefix","lowerCasedEntityName","toLowerCase","_i","_SUFFIXES","length","suffix","lowerCasedPrefixWithSuffix","concat","startsWith","newName","substring","hasUpperCase","substr","indexOf","toUpperCase","slice","undefined","str"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/entity/strip_prefix_from_entity_name.ts"],"sourcesContent":["const SUFFIXES = [\" \", \": \"];\n\n/**\n * Strips a device name from an entity name.\n * @param entityName the entity name\n * @param lowerCasedPrefix the prefix to strip, lower cased\n * @returns\n */\nexport const stripPrefixFromEntityName = (\n  entityName: string,\n  lowerCasedPrefix: string\n) => {\n  const lowerCasedEntityName = entityName.toLowerCase();\n\n  for (const suffix of SUFFIXES) {\n    const lowerCasedPrefixWithSuffix = `${lowerCasedPrefix}${suffix}`;\n\n    if (lowerCasedEntityName.startsWith(lowerCasedPrefixWithSuffix)) {\n      const newName = entityName.substring(lowerCasedPrefixWithSuffix.length);\n      if (newName.length) {\n        // If first word already has an upper case letter (e.g. from brand name)\n        // leave as-is, otherwise capitalize the first word.\n        return hasUpperCase(newName.substr(0, newName.indexOf(\" \")))\n          ? newName\n          : newName[0].toUpperCase() + newName.slice(1);\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst hasUpperCase = (str: string): boolean => str.toLowerCase() !== str;\n"],"mappings":";;;;AAAA,IAAMA,QAAQ,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CACpCC,UAAkB,EAClBC,gBAAwB,EACrB;EACH,IAAMC,oBAAoB,GAAGF,UAAU,CAACG,WAAW,CAAC,CAAC;EAErD,SAAAC,EAAA,MAAAC,SAAA,GAAqBP,QAAQ,EAAAM,EAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAF,EAAA,IAAE;IAA1B,IAAMG,MAAM,GAAAF,SAAA,CAAAD,EAAA;IACf,IAAMI,0BAA0B,MAAAC,MAAA,CAAMR,gBAAgB,EAAAQ,MAAA,CAAGF,MAAM,CAAE;IAEjE,IAAIL,oBAAoB,CAACQ,UAAU,CAACF,0BAA0B,CAAC,EAAE;MAC/D,IAAMG,OAAO,GAAGX,UAAU,CAACY,SAAS,CAACJ,0BAA0B,CAACF,MAAM,CAAC;MACvE,IAAIK,OAAO,CAACL,MAAM,EAAE;QAClB;QACA;QACA,OAAOO,YAAY,CAACF,OAAO,CAACG,MAAM,CAAC,CAAC,EAAEH,OAAO,CAACI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GACxDJ,OAAO,GACPA,OAAO,CAAC,CAAC,CAAC,CAACK,WAAW,CAAC,CAAC,GAAGL,OAAO,CAACM,KAAK,CAAC,CAAC,CAAC;MACjD;IACF;EACF;EAEA,OAAOC,SAAS;AAClB,CAAC;AAED,IAAML,YAAY,GAAG,SAAfA,YAAYA,CAAIM,GAAW;EAAA,OAAcA,GAAG,CAAChB,WAAW,CAAC,CAAC,KAAKgB,GAAG;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}