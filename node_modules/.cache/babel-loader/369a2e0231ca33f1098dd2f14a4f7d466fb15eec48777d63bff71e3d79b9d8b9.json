{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { showToast } from \"./toast\";\nexport var supportsServiceWorker = function supportsServiceWorker() {\n  return \"serviceWorker\" in navigator && (location.protocol === \"https:\" || location.hostname === \"localhost\");\n};\nexport var registerServiceWorker = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(rootEl) {\n    var notifyUpdate,\n      reg,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          notifyUpdate = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n          if (supportsServiceWorker()) {\n            _context.next = 3;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 3:\n          // If the active service worker changes, refresh the page because the cache has changed\n          navigator.serviceWorker.addEventListener(\"controllerchange\", function () {\n            location.reload();\n          });\n          _context.next = 6;\n          return navigator.serviceWorker.register(\"/service_worker.js\");\n        case 6:\n          reg = _context.sent;\n          if (!(!notifyUpdate || __DEV__ || __DEMO__)) {\n            _context.next = 9;\n            break;\n          }\n          return _context.abrupt(\"return\");\n        case 9:\n          reg.addEventListener(\"updatefound\", function () {\n            var installingWorker = reg.installing;\n            if (!installingWorker) {\n              return;\n            }\n            installingWorker.addEventListener(\"statechange\", function () {\n              if (installingWorker.state !== \"installed\" || !navigator.serviceWorker.controller) {\n                return;\n              }\n\n              // Notify users a new frontend is available.\n              showToast(rootEl, {\n                message: \"A new version of the frontend is available.\",\n                action: {\n                  // We tell the service worker to call skipWaiting, which activates\n                  // the new service worker. Above we listen for `controllerchange`\n                  // so we reload the page once a new service worker activates.\n                  action: function action() {\n                    return installingWorker.postMessage({\n                      type: \"skipWaiting\"\n                    });\n                  },\n                  text: \"reload\"\n                },\n                duration: 0,\n                dismissable: false\n              });\n            });\n          });\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function registerServiceWorker(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["showToast","supportsServiceWorker","navigator","location","protocol","hostname","registerServiceWorker","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","rootEl","notifyUpdate","reg","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","abrupt","serviceWorker","addEventListener","reload","register","sent","__DEV__","__DEMO__","installingWorker","installing","state","controller","message","action","postMessage","type","text","duration","dismissable","stop","_x","apply"],"sources":["/workspaces/frontend/src/util/register-service-worker.ts"],"sourcesContent":["import { showToast } from \"./toast\";\n\nexport const supportsServiceWorker = () =>\n  \"serviceWorker\" in navigator &&\n  (location.protocol === \"https:\" || location.hostname === \"localhost\");\n\nexport const registerServiceWorker = async (\n  rootEl: HTMLElement,\n  notifyUpdate = true\n) => {\n  if (!supportsServiceWorker()) {\n    return;\n  }\n\n  // If the active service worker changes, refresh the page because the cache has changed\n  navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n    location.reload();\n  });\n\n  const reg = await navigator.serviceWorker.register(\"/service_worker.js\");\n\n  if (!notifyUpdate || __DEV__ || __DEMO__) {\n    return;\n  }\n\n  reg.addEventListener(\"updatefound\", () => {\n    const installingWorker = reg.installing;\n\n    if (!installingWorker) {\n      return;\n    }\n\n    installingWorker.addEventListener(\"statechange\", () => {\n      if (\n        installingWorker.state !== \"installed\" ||\n        !navigator.serviceWorker.controller\n      ) {\n        return;\n      }\n\n      // Notify users a new frontend is available.\n      showToast(rootEl, {\n        message: \"A new version of the frontend is available.\",\n        action: {\n          // We tell the service worker to call skipWaiting, which activates\n          // the new service worker. Above we listen for `controllerchange`\n          // so we reload the page once a new service worker activates.\n          action: () => installingWorker.postMessage({ type: \"skipWaiting\" }),\n          text: \"reload\",\n        },\n        duration: 0,\n        dismissable: false,\n      });\n    });\n  });\n};\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,SAAS;AAEnC,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA;EAAA,OAChC,eAAe,IAAIC,SAAS,KAC3BC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,IAAID,QAAQ,CAACE,QAAQ,KAAK,WAAW,CAAC;AAAA;AAEvE,OAAO,IAAMC,qBAAqB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAG,SAAAC,QACnCC,MAAmB;IAAA,IAAAC,YAAA;MAAAC,GAAA;MAAAC,KAAA,GAAAC,SAAA;IAAA,OAAAP,mBAAA,GAAAQ,IAAA,UAAAC,SAAAC,QAAA;MAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;QAAA;UACnBR,YAAY,GAAAE,KAAA,CAAAO,MAAA,QAAAP,KAAA,QAAAQ,SAAA,GAAAR,KAAA,MAAG,IAAI;UAAA,IAEdd,qBAAqB,CAAC,CAAC;YAAAkB,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAK,MAAA;QAAA;UAI5B;UACAtB,SAAS,CAACuB,aAAa,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAM;YACjEvB,QAAQ,CAACwB,MAAM,CAAC,CAAC;UACnB,CAAC,CAAC;UAACR,QAAA,CAAAE,IAAA;UAAA,OAEenB,SAAS,CAACuB,aAAa,CAACG,QAAQ,CAAC,oBAAoB,CAAC;QAAA;UAAlEd,GAAG,GAAAK,QAAA,CAAAU,IAAA;UAAA,MAEL,CAAChB,YAAY,IAAIiB,OAAO,IAAIC,QAAQ;YAAAZ,QAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,QAAA,CAAAK,MAAA;QAAA;UAIxCV,GAAG,CAACY,gBAAgB,CAAC,aAAa,EAAE,YAAM;YACxC,IAAMM,gBAAgB,GAAGlB,GAAG,CAACmB,UAAU;YAEvC,IAAI,CAACD,gBAAgB,EAAE;cACrB;YACF;YAEAA,gBAAgB,CAACN,gBAAgB,CAAC,aAAa,EAAE,YAAM;cACrD,IACEM,gBAAgB,CAACE,KAAK,KAAK,WAAW,IACtC,CAAChC,SAAS,CAACuB,aAAa,CAACU,UAAU,EACnC;gBACA;cACF;;cAEA;cACAnC,SAAS,CAACY,MAAM,EAAE;gBAChBwB,OAAO,EAAE,6CAA6C;gBACtDC,MAAM,EAAE;kBACN;kBACA;kBACA;kBACAA,MAAM,EAAE,SAAAA,OAAA;oBAAA,OAAML,gBAAgB,CAACM,WAAW,CAAC;sBAAEC,IAAI,EAAE;oBAAc,CAAC,CAAC;kBAAA;kBACnEC,IAAI,EAAE;gBACR,CAAC;gBACDC,QAAQ,EAAE,CAAC;gBACXC,WAAW,EAAE;cACf,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAvB,QAAA,CAAAwB,IAAA;MAAA;IAAA,GAAAhC,OAAA;EAAA,CACJ;EAAA,gBAjDYL,qBAAqBA,CAAAsC,EAAA;IAAA,OAAArC,IAAA,CAAAsC,KAAA,OAAA7B,SAAA;EAAA;AAAA,GAiDjC"},"metadata":{},"sourceType":"module","externalDependencies":[]}