{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiCodeBraces = \"M8,3A2,2 0 0,0 6,5V9A2,2 0 0,1 4,11H3V13H4A2,2 0 0,1 6,15V19A2,2 0 0,0 8,21H10V19H8V14A2,2 0 0,0 6,12A2,2 0 0,0 8,10V5H10V3M16,3A2,2 0 0,1 18,5V9A2,2 0 0,0 20,11H21V13H20A2,2 0 0,0 18,15V19A2,2 0 0,1 16,21H14V19H16V14A2,2 0 0,1 18,12A2,2 0 0,1 16,10V5H14V3H16Z\";\nconst mdiContentCopy = \"M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z\";\nconst mdiContentCut = \"M19,3L13,9L15,11L22,4V3M12,12.5A0.5,0.5 0 0,1 11.5,12A0.5,0.5 0 0,1 12,11.5A0.5,0.5 0 0,1 12.5,12A0.5,0.5 0 0,1 12,12.5M6,20A2,2 0 0,1 4,18C4,16.89 4.9,16 6,16A2,2 0 0,1 8,18C8,19.11 7.1,20 6,20M6,8A2,2 0 0,1 4,6C4,4.89 4.9,4 6,4A2,2 0 0,1 8,6C8,7.11 7.1,8 6,8M9.64,7.64C9.87,7.14 10,6.59 10,6A4,4 0 0,0 6,2A4,4 0 0,0 2,6A4,4 0 0,0 6,10C6.59,10 7.14,9.87 7.64,9.64L10,12L7.64,14.36C7.14,14.13 6.59,14 6,14A4,4 0 0,0 2,18A4,4 0 0,0 6,22A4,4 0 0,0 10,18C10,17.41 9.87,16.86 9.64,16.36L12,14L19,21H22V20L9.64,7.64Z\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiListBoxOutline = \"M11 15H17V17H11V15M9 7H7V9H9V7M11 13H17V11H11V13M11 9H17V7H11V9M9 11H7V13H9V11M21 5V19C21 20.1 20.1 21 19 21H5C3.9 21 3 20.1 3 19V5C3 3.9 3.9 3 5 3H19C20.1 3 21 3.9 21 5M19 5H5V19H19V5M9 15H7V17H9V15Z\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport deepClone from \"deep-clone-simple\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { any, array, assert, assign, object, optional, string } from \"superstruct\";\nimport { storage } from \"../../../../common/decorators/storage\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-icon-button-arrow-prev\";\nimport \"../../../../components/ha-icon-button-arrow-next\";\nimport \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\nconst cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  cards: array(any()),\n  title: optional(string())\n}));\nexport let HuiStackCardEditor = _decorate([customElement(\"hui-stack-card-editor\")], function (_initialize, _LitElement) {\n  class HuiStackCardEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiStackCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"lovelace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [storage({\n        key: \"lovelaceClipboard\",\n        state: false,\n        subscribe: false,\n        storage: \"sessionStorage\"\n      })],\n      key: \"_clipboard\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_selectedCard\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_GUImode\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_guiModeAvailable\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"hui-card-element-editor\")],\n      key: \"_cardEditorEl\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"focusYamlEditor\",\n      value: function focusYamlEditor() {\n        var _this$_cardEditorEl;\n        (_this$_cardEditorEl = this._cardEditorEl) === null || _this$_cardEditorEl === void 0 || _this$_cardEditorEl.focusYamlEditor();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        const selected = this._selectedCard;\n        const numcards = this._config.cards.length;\n        const isGuiMode = !this._cardEditorEl || this._GUImode;\n        return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map((_card, i) => html` <paper-tab> ${i + 1} </paper-tab> `)}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards ? html`\n                <div id=\"card-options\">\n                  <ha-icon-button\n                    class=\"gui-mode-button\"\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    .label=${this.hass.localize(isGuiMode ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\" : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\")}\n                    .path=${isGuiMode ? mdiCodeBraces : mdiListBoxOutline}\n                  ></ha-icon-button>\n\n                  <ha-icon-button-arrow-prev\n                    .disabled=${selected === 0}\n                    .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.move_before\")}\n                    @click=${this._handleMove}\n                    .move=${-1}\n                  ></ha-icon-button-arrow-prev>\n\n                  <ha-icon-button-arrow-next\n                    .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.move_after\")}\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                    .move=${1}\n                  ></ha-icon-button-arrow-next>\n\n                  <ha-icon-button\n                    .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.copy\")}\n                    .path=${mdiContentCopy}\n                    @click=${this._handleCopyCard}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.cut\")}\n                    .path=${mdiContentCut}\n                    @click=${this._handleCutCard}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.delete\")}\n                    .path=${mdiDelete}\n                    @click=${this._handleDeleteCard}\n                  ></ha-icon-button>\n                </div>\n\n                <hui-card-element-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-element-editor>\n              ` : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSelectedCard\",\n      value: function _handleSelectedCard(ev) {\n        if (ev.target.id === \"add-card\") {\n          this._selectedCard = this._config.cards.length;\n          return;\n        }\n        this._setMode(true);\n        this._guiModeAvailable = true;\n        this._selectedCard = parseInt(ev.detail.selected, 10);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleConfigChanged\",\n      value: function _handleConfigChanged(ev) {\n        ev.stopPropagation();\n        if (!this._config) {\n          return;\n        }\n        const cards = [...this._config.cards];\n        cards[this._selectedCard] = ev.detail.config;\n        this._config = {\n          ...this._config,\n          cards\n        };\n        this._guiModeAvailable = ev.detail.guiModeAvailable;\n        fireEvent(this, \"config-changed\", {\n          config: this._config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleCardPicked\",\n      value: function _handleCardPicked(ev) {\n        ev.stopPropagation();\n        if (!this._config) {\n          return;\n        }\n        const config = ev.detail.config;\n        const cards = [...this._config.cards, config];\n        this._config = {\n          ...this._config,\n          cards\n        };\n        fireEvent(this, \"config-changed\", {\n          config: this._config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleCopyCard\",\n      value: function _handleCopyCard() {\n        if (!this._config) {\n          return;\n        }\n        this._clipboard = deepClone(this._config.cards[this._selectedCard]);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleCutCard\",\n      value: function _handleCutCard() {\n        this._handleCopyCard();\n        this._handleDeleteCard();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleDeleteCard\",\n      value: function _handleDeleteCard() {\n        if (!this._config) {\n          return;\n        }\n        const cards = [...this._config.cards];\n        cards.splice(this._selectedCard, 1);\n        this._config = {\n          ...this._config,\n          cards\n        };\n        this._selectedCard = Math.max(0, this._selectedCard - 1);\n        fireEvent(this, \"config-changed\", {\n          config: this._config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleMove\",\n      value: function _handleMove(ev) {\n        if (!this._config) {\n          return;\n        }\n        const move = ev.currentTarget.move;\n        const source = this._selectedCard;\n        const target = source + move;\n        const cards = [...this._config.cards];\n        const card = cards.splice(this._selectedCard, 1)[0];\n        cards.splice(target, 0, card);\n        this._config = {\n          ...this._config,\n          cards\n        };\n        this._selectedCard = target;\n        fireEvent(this, \"config-changed\", {\n          config: this._config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleGUIModeChanged\",\n      value: function _handleGUIModeChanged(ev) {\n        ev.stopPropagation();\n        this._GUImode = ev.detail.guiMode;\n        this._guiModeAvailable = ev.detail.guiModeAvailable;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleMode\",\n      value: function _toggleMode() {\n        var _this$_cardEditorEl2;\n        (_this$_cardEditorEl2 = this._cardEditorEl) === null || _this$_cardEditorEl2 === void 0 || _this$_cardEditorEl2.toggleMode();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setMode\",\n      value: function _setMode(value) {\n        this._GUImode = value;\n        if (this._cardEditorEl) {\n          this._cardEditorEl.GUImode = value;\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [configElementStyle, css`\n        .toolbar {\n          display: flex;\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          --paper-tab-ink: var(--primary-color);\n        }\n        paper-tabs {\n          display: flex;\n          font-size: 14px;\n          flex-grow: 1;\n        }\n        #add-card {\n          max-width: 32px;\n          padding: 0;\n        }\n\n        #card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n\n        #editor {\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          #editor {\n            margin: 0 -12px;\n          }\n        }\n\n        .gui-mode-button {\n          margin-right: auto;\n          margin-inline-end: auto;\n          margin-inline-start: initial;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["deepClone","LitElement","css","html","nothing","customElement","property","query","state","any","array","assert","assign","object","optional","string","storage","fireEvent","baseLovelaceCardConfig","configElementStyle","cardConfigStruct","cards","title","HuiStackCardEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","subscribe","setConfig","config","_config","focusYamlEditor","_this$_cardEditorEl","_cardEditorEl","render","hass","selected","_selectedCard","numcards","length","isGuiMode","_GUImode","_handleSelectedCard","map","_card","i","undefined","mdiPlus","_toggleMode","_guiModeAvailable","localize","mdiCodeBraces","mdiListBoxOutline","_handleMove","mdiContentCopy","_handleCopyCard","mdiContentCut","_handleCutCard","mdiDelete","_handleDeleteCard","lovelace","_handleConfigChanged","_handleGUIModeChanged","_handleCardPicked","ev","target","id","_setMode","parseInt","detail","stopPropagation","guiModeAvailable","_clipboard","splice","Math","max","move","currentTarget","source","card","guiMode","_this$_cardEditorEl2","toggleMode","GUImode","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/config-elements/hui-stack-card-editor.ts"],"sourcesContent":["import {\n  mdiCodeBraces,\n  mdiContentCopy,\n  mdiContentCut,\n  mdiDelete,\n  mdiListBoxOutline,\n  mdiPlus,\n} from \"@mdi/js\";\nimport \"@polymer/paper-tabs\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport deepClone from \"deep-clone-simple\";\nimport { CSSResultGroup, LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  object,\n  optional,\n  string,\n} from \"superstruct\";\nimport { storage } from \"../../../../common/decorators/storage\";\nimport { HASSDomEvent, fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-icon-button\";\nimport \"../../../../components/ha-icon-button-arrow-prev\";\nimport \"../../../../components/ha-icon-button-arrow-next\";\nimport type { LovelaceCardConfig } from \"../../../../data/lovelace/config/card\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace/config/types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { StackCardConfig } from \"../../cards/types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport \"../card-editor/hui-card-element-editor\";\nimport type { HuiCardElementEditor } from \"../card-editor/hui-card-element-editor\";\nimport \"../card-editor/hui-card-picker\";\nimport type { ConfigChangedEvent } from \"../hui-element-editor\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { GUIModeChangedEvent } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    cards: array(any()),\n    title: optional(string()),\n  })\n);\n\n@customElement(\"hui-stack-card-editor\")\nexport class HuiStackCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace?: LovelaceConfig;\n\n  @storage({\n    key: \"lovelaceClipboard\",\n    state: false,\n    subscribe: false,\n    storage: \"sessionStorage\",\n  })\n  protected _clipboard?: LovelaceCardConfig;\n\n  @state() protected _config?: StackCardConfig;\n\n  @state() protected _selectedCard = 0;\n\n  @state() protected _GUImode = true;\n\n  @state() protected _guiModeAvailable? = true;\n\n  @query(\"hui-card-element-editor\")\n  protected _cardEditorEl?: HuiCardElementEditor;\n\n  public setConfig(config: Readonly<StackCardConfig>): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  public focusYamlEditor() {\n    this._cardEditorEl?.focusYamlEditor();\n  }\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n    const selected = this._selectedCard!;\n    const numcards = this._config.cards.length;\n\n    const isGuiMode = !this._cardEditorEl || this._GUImode;\n\n    return html`\n      <div class=\"card-config\">\n        <div class=\"toolbar\">\n          <paper-tabs\n            .selected=${selected}\n            scrollable\n            @iron-activate=${this._handleSelectedCard}\n          >\n            ${this._config.cards.map(\n              (_card, i) => html` <paper-tab> ${i + 1} </paper-tab> `\n            )}\n          </paper-tabs>\n          <paper-tabs\n            id=\"add-card\"\n            .selected=${selected === numcards ? \"0\" : undefined}\n            @iron-activate=${this._handleSelectedCard}\n          >\n            <paper-tab>\n              <ha-svg-icon .path=${mdiPlus}></ha-svg-icon>\n            </paper-tab>\n          </paper-tabs>\n        </div>\n\n        <div id=\"editor\">\n          ${selected < numcards\n            ? html`\n                <div id=\"card-options\">\n                  <ha-icon-button\n                    class=\"gui-mode-button\"\n                    @click=${this._toggleMode}\n                    .disabled=${!this._guiModeAvailable}\n                    .label=${this.hass!.localize(\n                      isGuiMode\n                        ? \"ui.panel.lovelace.editor.edit_card.show_code_editor\"\n                        : \"ui.panel.lovelace.editor.edit_card.show_visual_editor\"\n                    )}\n                    .path=${isGuiMode ? mdiCodeBraces : mdiListBoxOutline}\n                  ></ha-icon-button>\n\n                  <ha-icon-button-arrow-prev\n                    .disabled=${selected === 0}\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_before\"\n                    )}\n                    @click=${this._handleMove}\n                    .move=${-1}\n                  ></ha-icon-button-arrow-prev>\n\n                  <ha-icon-button-arrow-next\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.move_after\"\n                    )}\n                    .disabled=${selected === numcards - 1}\n                    @click=${this._handleMove}\n                    .move=${1}\n                  ></ha-icon-button-arrow-next>\n\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.copy\"\n                    )}\n                    .path=${mdiContentCopy}\n                    @click=${this._handleCopyCard}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.cut\"\n                    )}\n                    .path=${mdiContentCut}\n                    @click=${this._handleCutCard}\n                  ></ha-icon-button>\n\n                  <ha-icon-button\n                    .label=${this.hass!.localize(\n                      \"ui.panel.lovelace.editor.edit_card.delete\"\n                    )}\n                    .path=${mdiDelete}\n                    @click=${this._handleDeleteCard}\n                  ></ha-icon-button>\n                </div>\n\n                <hui-card-element-editor\n                  .hass=${this.hass}\n                  .value=${this._config.cards[selected]}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleConfigChanged}\n                  @GUImode-changed=${this._handleGUIModeChanged}\n                ></hui-card-element-editor>\n              `\n            : html`\n                <hui-card-picker\n                  .hass=${this.hass}\n                  .lovelace=${this.lovelace}\n                  @config-changed=${this._handleCardPicked}\n                ></hui-card-picker>\n              `}\n        </div>\n      </div>\n    `;\n  }\n\n  protected _handleSelectedCard(ev) {\n    if (ev.target.id === \"add-card\") {\n      this._selectedCard = this._config!.cards.length;\n      return;\n    }\n    this._setMode(true);\n    this._guiModeAvailable = true;\n    this._selectedCard = parseInt(ev.detail.selected, 10);\n  }\n\n  protected _handleConfigChanged(ev: HASSDomEvent<ConfigChangedEvent>) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards[this._selectedCard] = ev.detail.config as LovelaceCardConfig;\n    this._config = { ...this._config, cards };\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleCardPicked(ev) {\n    ev.stopPropagation();\n    if (!this._config) {\n      return;\n    }\n    const config = ev.detail.config;\n    const cards = [...this._config.cards, config];\n    this._config = { ...this._config, cards };\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleCopyCard() {\n    if (!this._config) {\n      return;\n    }\n    this._clipboard = deepClone(this._config.cards[this._selectedCard]);\n  }\n\n  protected _handleCutCard() {\n    this._handleCopyCard();\n    this._handleDeleteCard();\n  }\n\n  protected _handleDeleteCard() {\n    if (!this._config) {\n      return;\n    }\n    const cards = [...this._config.cards];\n    cards.splice(this._selectedCard, 1);\n    this._config = { ...this._config, cards };\n    this._selectedCard = Math.max(0, this._selectedCard - 1);\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleMove(ev: Event) {\n    if (!this._config) {\n      return;\n    }\n    const move = (ev.currentTarget as any).move;\n    const source = this._selectedCard;\n    const target = source + move;\n    const cards = [...this._config.cards];\n    const card = cards.splice(this._selectedCard, 1)[0];\n    cards.splice(target, 0, card);\n    this._config = {\n      ...this._config,\n      cards,\n    };\n    this._selectedCard = target;\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  protected _handleGUIModeChanged(ev: HASSDomEvent<GUIModeChangedEvent>): void {\n    ev.stopPropagation();\n    this._GUImode = ev.detail.guiMode;\n    this._guiModeAvailable = ev.detail.guiModeAvailable;\n  }\n\n  protected _toggleMode(): void {\n    this._cardEditorEl?.toggleMode();\n  }\n\n  protected _setMode(value: boolean): void {\n    this._GUImode = value;\n    if (this._cardEditorEl) {\n      this._cardEditorEl!.GUImode = value;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      configElementStyle,\n      css`\n        .toolbar {\n          display: flex;\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          --paper-tab-ink: var(--primary-color);\n        }\n        paper-tabs {\n          display: flex;\n          font-size: 14px;\n          flex-grow: 1;\n        }\n        #add-card {\n          max-width: 32px;\n          padding: 0;\n        }\n\n        #card-options {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n        }\n\n        #editor {\n          border: 1px solid var(--divider-color);\n          padding: 12px;\n        }\n        @media (max-width: 450px) {\n          #editor {\n            margin: 0 -12px;\n          }\n        }\n\n        .gui-mode-button {\n          margin-right: auto;\n          margin-inline-end: auto;\n          margin-inline-start: initial;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-stack-card-editor\": HuiStackCardEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}