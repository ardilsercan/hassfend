{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { isServer, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { AttachableController } from '../../internal/controller/attachable-controller.js';\n/**\n * Events that the focus ring listens to.\n */\nconst EVENTS = ['focusin', 'focusout', 'pointerdown'];\n/**\n * A focus ring component.\n *\n * @fires visibility-changed {Event} Fired whenever `visible` changes.\n */\nexport class FocusRing extends LitElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Makes the focus ring visible.\n     */\n    this.visible = false;\n    /**\n     * Makes the focus ring animate inwards instead of outwards.\n     */\n    this.inward = false;\n    this.attachableController = new AttachableController(this, this.onControlChange.bind(this));\n  }\n  get htmlFor() {\n    return this.attachableController.htmlFor;\n  }\n  set htmlFor(htmlFor) {\n    this.attachableController.htmlFor = htmlFor;\n  }\n  get control() {\n    return this.attachableController.control;\n  }\n  set control(control) {\n    this.attachableController.control = control;\n  }\n  attach(control) {\n    this.attachableController.attach(control);\n  }\n  detach() {\n    this.attachableController.detach();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    // Needed for VoiceOver, which will create a \"group\" if the element is a\n    // sibling to other content.\n    this.setAttribute('aria-hidden', 'true');\n  }\n  /** @private */\n  handleEvent(event) {\n    var _this$control$matches, _this$control;\n    if (event[HANDLED_BY_FOCUS_RING]) {\n      // This ensures the focus ring does not activate when multiple focus rings\n      // are used within a single component.\n      return;\n    }\n    switch (event.type) {\n      default:\n        return;\n      case 'focusin':\n        this.visible = (_this$control$matches = (_this$control = this.control) === null || _this$control === void 0 ? void 0 : _this$control.matches(':focus-visible')) !== null && _this$control$matches !== void 0 ? _this$control$matches : false;\n        break;\n      case 'focusout':\n      case 'pointerdown':\n        this.visible = false;\n        break;\n    }\n    event[HANDLED_BY_FOCUS_RING] = true;\n  }\n  onControlChange(prev, next) {\n    if (isServer) return;\n    for (const event of EVENTS) {\n      prev === null || prev === void 0 || prev.removeEventListener(event, this);\n      next === null || next === void 0 || next.addEventListener(event, this);\n    }\n  }\n  update(changed) {\n    if (changed.has('visible')) {\n      // This logic can be removed once the `:has` selector has been introduced\n      // to Firefox. This is necessary to allow correct submenu styles.\n      this.dispatchEvent(new Event('visibility-changed'));\n    }\n    super.update(changed);\n  }\n}\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], FocusRing.prototype, \"visible\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], FocusRing.prototype, \"inward\", void 0);\nconst HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');","map":{"version":3,"names":["isServer","LitElement","property","AttachableController","EVENTS","FocusRing","constructor","visible","inward","attachableController","onControlChange","bind","htmlFor","control","attach","detach","connectedCallback","setAttribute","handleEvent","event","_this$control$matches","_this$control","HANDLED_BY_FOCUS_RING","type","matches","prev","next","removeEventListener","addEventListener","update","changed","has","dispatchEvent","Event","__decorate","Boolean","reflect","Symbol"],"sources":["focus-ring.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, LitElement, PropertyValues} from 'lit';\nimport {property} from 'lit/decorators.js';\n\nimport {\n  Attachable,\n  AttachableController,\n} from '../../internal/controller/attachable-controller.js';\n\n/**\n * Events that the focus ring listens to.\n */\nconst EVENTS = ['focusin', 'focusout', 'pointerdown'];\n\n/**\n * A focus ring component.\n *\n * @fires visibility-changed {Event} Fired whenever `visible` changes.\n */\nexport class FocusRing extends LitElement implements Attachable {\n  /**\n   * Makes the focus ring visible.\n   */\n  @property({type: Boolean, reflect: true}) visible = false;\n\n  /**\n   * Makes the focus ring animate inwards instead of outwards.\n   */\n  @property({type: Boolean, reflect: true}) inward = false;\n\n  get htmlFor() {\n    return this.attachableController.htmlFor;\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    this.attachableController.htmlFor = htmlFor;\n  }\n\n  get control() {\n    return this.attachableController.control;\n  }\n  set control(control: HTMLElement | null) {\n    this.attachableController.control = control;\n  }\n\n  private readonly attachableController = new AttachableController(\n    this,\n    this.onControlChange.bind(this),\n  );\n\n  attach(control: HTMLElement) {\n    this.attachableController.attach(control);\n  }\n\n  detach() {\n    this.attachableController.detach();\n  }\n\n  override connectedCallback() {\n    super.connectedCallback();\n    // Needed for VoiceOver, which will create a \"group\" if the element is a\n    // sibling to other content.\n    this.setAttribute('aria-hidden', 'true');\n  }\n\n  /** @private */\n  handleEvent(event: FocusRingEvent) {\n    if (event[HANDLED_BY_FOCUS_RING]) {\n      // This ensures the focus ring does not activate when multiple focus rings\n      // are used within a single component.\n      return;\n    }\n\n    switch (event.type) {\n      default:\n        return;\n      case 'focusin':\n        this.visible = this.control?.matches(':focus-visible') ?? false;\n        break;\n      case 'focusout':\n      case 'pointerdown':\n        this.visible = false;\n        break;\n    }\n\n    event[HANDLED_BY_FOCUS_RING] = true;\n  }\n\n  private onControlChange(prev: HTMLElement | null, next: HTMLElement | null) {\n    if (isServer) return;\n\n    for (const event of EVENTS) {\n      prev?.removeEventListener(event, this);\n      next?.addEventListener(event, this);\n    }\n  }\n\n  override update(changed: PropertyValues<FocusRing>) {\n    if (changed.has('visible')) {\n      // This logic can be removed once the `:has` selector has been introduced\n      // to Firefox. This is necessary to allow correct submenu styles.\n      this.dispatchEvent(new Event('visibility-changed'));\n    }\n    super.update(changed);\n  }\n}\n\nconst HANDLED_BY_FOCUS_RING = Symbol('handledByFocusRing');\n\ninterface FocusRingEvent extends Event {\n  [HANDLED_BY_FOCUS_RING]: true;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}