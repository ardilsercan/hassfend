{"ast":null,"code":"export const EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\nconst addFromAction = (entities, actionConfig) => {\n  var _actionConfig$target, _actionConfig$service, _actionConfig$data, _ref, _actionConfig$service2, _actionConfig$service3, _actionConfig$data2, _actionConfig$target2;\n  if (actionConfig.action !== \"call-service\" || !((_actionConfig$target = actionConfig.target) !== null && _actionConfig$target !== void 0 && _actionConfig$target.entity_id) && !((_actionConfig$service = actionConfig.service_data) !== null && _actionConfig$service !== void 0 && _actionConfig$service.entity_id) && !((_actionConfig$data = actionConfig.data) !== null && _actionConfig$data !== void 0 && _actionConfig$data.entity_id)) {\n    return;\n  }\n  let entityIds = (_ref = (_actionConfig$service2 = (_actionConfig$service3 = actionConfig.service_data) === null || _actionConfig$service3 === void 0 ? void 0 : _actionConfig$service3.entity_id) !== null && _actionConfig$service2 !== void 0 ? _actionConfig$service2 : (_actionConfig$data2 = actionConfig.data) === null || _actionConfig$data2 === void 0 ? void 0 : _actionConfig$data2.entity_id) !== null && _ref !== void 0 ? _ref : (_actionConfig$target2 = actionConfig.target) === null || _actionConfig$target2 === void 0 ? void 0 : _actionConfig$target2.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\nconst addEntityId = (entities, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\nconst addEntities = (entities, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities && Array.isArray(obj.entities)) {\n    obj.entities.forEach(entity => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards && Array.isArray(obj.cards)) {\n    obj.cards.forEach(card => addEntities(entities, card));\n  }\n  if (obj.elements && Array.isArray(obj.elements)) {\n    obj.elements.forEach(card => addEntities(entities, card));\n  }\n  if (obj.badges && Array.isArray(obj.badges)) {\n    obj.badges.forEach(badge => addEntityId(entities, badge));\n  }\n};\nexport const computeUsedEntities = config => {\n  const entities = new Set();\n  config.views.forEach(view => addEntities(entities, view));\n  return entities;\n};\nexport const calcUnusedEntities = (hass, usedEntities) => {\n  const unusedEntities = new Set();\n  for (const entity of Object.keys(hass.states)) {\n    if (!usedEntities.has(entity) && !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])) {\n      unusedEntities.add(entity);\n    }\n  }\n  return unusedEntities;\n};\nexport const computeUnusedEntities = (hass, config) => {\n  const usedEntities = computeUsedEntities(config);\n  const unusedEntities = calcUnusedEntities(hass, usedEntities);\n  return unusedEntities;\n};","map":{"version":3,"names":["EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","_actionConfig$target","_actionConfig$service","_actionConfig$data","_ref","_actionConfig$service2","_actionConfig$service3","_actionConfig$data2","_actionConfig$target2","action","target","entity_id","service_data","data","entityIds","Array","isArray","entityId","add","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUsedEntities","config","Set","views","view","calcUnusedEntities","hass","usedEntities","unusedEntities","Object","keys","states","has","includes","split","computeUnusedEntities"],"sources":["/workspaces/frontend/src/panels/lovelace/common/compute-unused-entities.ts"],"sourcesContent":["import { ActionConfig } from \"../../../data/lovelace/config/action\";\nimport { LovelaceConfig } from \"../../../data/lovelace/config/types\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    (!actionConfig.target?.entity_id &&\n      !actionConfig.service_data?.entity_id &&\n      !actionConfig.data?.entity_id)\n  ) {\n    return;\n  }\n  let entityIds =\n    actionConfig.service_data?.entity_id ??\n    actionConfig.data?.entity_id ??\n    actionConfig.target?.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds as Array<string>) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities && Array.isArray(obj.entities)) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards && Array.isArray(obj.cards)) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements && Array.isArray(obj.elements)) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges && Array.isArray(obj.badges)) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nexport const computeUsedEntities = (config: LovelaceConfig): Set<string> => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const calcUnusedEntities = (\n  hass: HomeAssistant,\n  usedEntities: Set<string>\n): Set<string> => {\n  const unusedEntities: Set<string> = new Set();\n\n  for (const entity of Object.keys(hass.states)) {\n    if (\n      !usedEntities.has(entity) &&\n      !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    ) {\n      unusedEntities.add(entity);\n    }\n  }\n\n  return unusedEntities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): Set<string> => {\n  const usedEntities = computeUsedEntities(config);\n  const unusedEntities = calcUnusedEntities(hass, usedEntities);\n  return unusedEntities;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}