{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeUserInitials } from \"../../data/user\";\nlet PersonBadge = _decorate([customElement(\"ha-person-badge\")], function (_initialize, _LitElement) {\n  class PersonBadge extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: PersonBadge,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"person\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.person) {\n          return nothing;\n        }\n        const picture = this.person.picture;\n        if (picture) {\n          return html`<div\n        style=${styleMap({\n            backgroundImage: `url(${picture})`\n          })}\n        class=\"picture\"\n      ></div>`;\n        }\n        const initials = computeUserInitials(this.person.name);\n        return html`<div\n      class=\"initials ${classMap({\n          long: initials.length > 2\n        })}\"\n    >\n      ${initials}\n    </div>`;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        width: 40px;\n        height: 40px;\n        display: block;\n      }\n      .picture {\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        box-sizing: border-box;\n        width: 100%;\n        height: 100%;\n        border-radius: 50%;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n        font-size: var(--person-badge-font-size, 1em);\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","classMap","styleMap","computeUserInitials","PersonBadge","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","render","person","picture","backgroundImage","initials","name","long","length","static","styles"],"sources":["/workspaces/frontend/src/components/user/ha-person-badge.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { BasePerson } from \"../../data/person\";\nimport { computeUserInitials } from \"../../data/user\";\n\n@customElement(\"ha-person-badge\")\nclass PersonBadge extends LitElement {\n  @property({ attribute: false }) public person?: BasePerson;\n\n  protected render() {\n    if (!this.person) {\n      return nothing;\n    }\n\n    const picture = this.person.picture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.person.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 40px;\n        height: 40px;\n        display: block;\n      }\n      .picture {\n        width: 100%;\n        height: 100%;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-flex;\n        justify-content: center;\n        align-items: center;\n        box-sizing: border-box;\n        width: 100%;\n        height: 100%;\n        border-radius: 50%;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n        font-size: var(--person-badge-font-size, 1em);\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-person-badge\": PersonBadge;\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,QAAQ,QAAQ,0BAA0B;AAEnD,SAASC,mBAAmB,QAAQ,iBAAiB;AAAC,IAGhDC,WAAW,GAAAC,SAAA,EADhBN,aAAa,CAAC,iBAAiB,CAAC,aAAAO,WAAA,EAAAC,WAAA;EAAjC,MACMH,WAAW,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAwDrC;EAAC;IAAAI,CAAA,EAxDKN,WAAW;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACdb,QAAQ,CAAC;QAAEc,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAE/B,SAAAC,OAAA,EAAmB;QACjB,IAAI,CAAC,IAAI,CAACC,MAAM,EAAE;UAChB,OAAOpB,OAAO;QAChB;QAEA,MAAMqB,OAAO,GAAG,IAAI,CAACD,MAAM,CAACC,OAAO;QAEnC,IAAIA,OAAO,EAAE;UACX,OAAOvB,IAAK;AAClB,gBAAgBM,QAAQ,CAAC;YAAEkB,eAAe,EAAG,OAAMD,OAAQ;UAAG,CAAC,CAAE;AACjE;AACA,cAAc;QACV;QACA,MAAME,QAAQ,GAAGlB,mBAAmB,CAAC,IAAI,CAACe,MAAM,CAACI,IAAI,CAAC;QACtD,OAAO1B,IAAK;AAChB,wBAAwBK,QAAQ,CAAC;UAAEsB,IAAI,EAAEF,QAAQ,CAAEG,MAAM,GAAG;QAAE,CAAC,CAAE;AACjE;AACA,QAAQH,QAAS;AACjB,WAAW;MACT;IAAC;MAAAT,IAAA;MAAAa,MAAA;MAAAV,GAAA;MAAAC,KAAA,EAED,SAAAU,OAAA,EAAoC;QAClC,OAAO/B,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAvDuBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}