{"ast":null,"code":"export const subscribeNotifications = (conn, onChange) => {\n  const params = {\n    type: \"persistent_notification/subscribe\"\n  };\n  const stream = new NotificationStream();\n  const subscription = conn.subscribeMessage(message => onChange(stream.processMessage(message)), params);\n  return () => {\n    subscription.then(unsub => unsub === null || unsub === void 0 ? void 0 : unsub());\n  };\n};\nclass NotificationStream {\n  constructor() {\n    this.notifications = void 0;\n    this.notifications = {};\n  }\n  processMessage(streamMessage) {\n    if (streamMessage.type === \"removed\") {\n      for (const notificationId of Object.keys(streamMessage.notifications)) {\n        delete this.notifications[notificationId];\n      }\n    } else {\n      this.notifications = {\n        ...this.notifications,\n        ...streamMessage.notifications\n      };\n    }\n    return Object.values(this.notifications);\n  }\n}","map":{"version":3,"names":["subscribeNotifications","conn","onChange","params","type","stream","NotificationStream","subscription","subscribeMessage","message","processMessage","then","unsub","constructor","notifications","streamMessage","notificationId","Object","keys","values"],"sources":["/workspaces/frontend/src/data/persistent_notification.ts"],"sourcesContent":["import {\n  Connection,\n  HassEntity,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\n\nexport interface PersitentNotificationEntity extends HassEntity {\n  notification_id?: string;\n  created_at?: string;\n  title?: string;\n  message?: string;\n}\n\nexport interface PersistentNotification {\n  created_at: string;\n  message: string;\n  notification_id: string;\n  title: string;\n  status: \"read\" | \"unread\";\n}\n\nexport interface PersistentNotifications {\n  [notificationId: string]: PersistentNotification;\n}\n\nexport interface PersistentNotificationMessage {\n  type: \"added\" | \"removed\" | \"current\" | \"updated\";\n  notifications: PersistentNotifications;\n}\n\nexport const subscribeNotifications = (\n  conn: Connection,\n  onChange: (notifications: PersistentNotification[]) => void\n): UnsubscribeFunc => {\n  const params = {\n    type: \"persistent_notification/subscribe\",\n  };\n  const stream = new NotificationStream();\n  const subscription = conn.subscribeMessage<PersistentNotificationMessage>(\n    (message) => onChange(stream.processMessage(message)),\n    params\n  );\n  return () => {\n    subscription.then((unsub) => unsub?.());\n  };\n};\n\nclass NotificationStream {\n  notifications: PersistentNotifications;\n\n  constructor() {\n    this.notifications = {};\n  }\n\n  processMessage(\n    streamMessage: PersistentNotificationMessage\n  ): PersistentNotification[] {\n    if (streamMessage.type === \"removed\") {\n      for (const notificationId of Object.keys(streamMessage.notifications)) {\n        delete this.notifications[notificationId];\n      }\n    } else {\n      this.notifications = {\n        ...this.notifications,\n        ...streamMessage.notifications,\n      };\n    }\n    return Object.values(this.notifications);\n  }\n}\n"],"mappings":"AA8BA,OAAO,MAAMA,sBAAsB,GAAGA,CACpCC,IAAgB,EAChBC,QAA2D,KACvC;EACpB,MAAMC,MAAM,GAAG;IACbC,IAAI,EAAE;EACR,CAAC;EACD,MAAMC,MAAM,GAAG,IAAIC,kBAAkB,CAAC,CAAC;EACvC,MAAMC,YAAY,GAAGN,IAAI,CAACO,gBAAgB,CACvCC,OAAO,IAAKP,QAAQ,CAACG,MAAM,CAACK,cAAc,CAACD,OAAO,CAAC,CAAC,EACrDN,MACF,CAAC;EACD,OAAO,MAAM;IACXI,YAAY,CAACI,IAAI,CAAEC,KAAK,IAAKA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAG,CAAC,CAAC;EACzC,CAAC;AACH,CAAC;AAED,MAAMN,kBAAkB,CAAC;EAGvBO,WAAWA,CAAA,EAAG;IAAA,KAFdC,aAAa;IAGX,IAAI,CAACA,aAAa,GAAG,CAAC,CAAC;EACzB;EAEAJ,cAAcA,CACZK,aAA4C,EAClB;IAC1B,IAAIA,aAAa,CAACX,IAAI,KAAK,SAAS,EAAE;MACpC,KAAK,MAAMY,cAAc,IAAIC,MAAM,CAACC,IAAI,CAACH,aAAa,CAACD,aAAa,CAAC,EAAE;QACrE,OAAO,IAAI,CAACA,aAAa,CAACE,cAAc,CAAC;MAC3C;IACF,CAAC,MAAM;MACL,IAAI,CAACF,aAAa,GAAG;QACnB,GAAG,IAAI,CAACA,aAAa;QACrB,GAAGC,aAAa,CAACD;MACnB,CAAC;IACH;IACA,OAAOG,MAAM,CAACE,MAAM,CAAC,IAAI,CAACL,aAAa,CAAC;EAC1C;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}