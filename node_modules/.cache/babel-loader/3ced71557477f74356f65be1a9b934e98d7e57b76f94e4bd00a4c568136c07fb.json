{"ast":null,"code":"import { timeCachePromiseFunc } from \"../common/util/time-cache-function-promise\";\nconst fetchEntitySources = hass => hass.callWS({\n  type: \"entity/source\"\n});\nexport const fetchEntitySourcesWithCache = hass => timeCachePromiseFunc(\"_entitySources\",\n// cache for 30 seconds\n30000, fetchEntitySources,\n// We base the cache on number of states. If number of states\n// changes we force a refresh\nhass2 => Object.keys(hass2.states).length, hass);","map":{"version":3,"names":["timeCachePromiseFunc","fetchEntitySources","hass","callWS","type","fetchEntitySourcesWithCache","hass2","Object","keys","states","length"],"sources":["/workspaces/frontend/src/data/entity_sources.ts"],"sourcesContent":["import { timeCachePromiseFunc } from \"../common/util/time-cache-function-promise\";\nimport { HomeAssistant } from \"../types\";\n\ninterface EntitySource {\n  domain: string;\n}\n\nexport type EntitySources = Record<string, EntitySource>;\n\nconst fetchEntitySources = (hass: HomeAssistant): Promise<EntitySources> =>\n  hass.callWS({ type: \"entity/source\" });\n\nexport const fetchEntitySourcesWithCache = (\n  hass: HomeAssistant\n): Promise<EntitySources> =>\n  timeCachePromiseFunc(\n    \"_entitySources\",\n    // cache for 30 seconds\n    30000,\n    fetchEntitySources,\n    // We base the cache on number of states. If number of states\n    // changes we force a refresh\n    (hass2) => Object.keys(hass2.states).length,\n    hass\n  );\n"],"mappings":"AAAA,SAASA,oBAAoB,QAAQ,4CAA4C;AASjF,MAAMC,kBAAkB,GAAIC,IAAmB,IAC7CA,IAAI,CAACC,MAAM,CAAC;EAAEC,IAAI,EAAE;AAAgB,CAAC,CAAC;AAExC,OAAO,MAAMC,2BAA2B,GACtCH,IAAmB,IAEnBF,oBAAoB,CAClB,gBAAgB;AAChB;AACA,KAAK,EACLC,kBAAkB;AAClB;AACA;AACCK,KAAK,IAAKC,MAAM,CAACC,IAAI,CAACF,KAAK,CAACG,MAAM,CAAC,CAACC,MAAM,EAC3CR,IACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}