{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { consume } from \"@lit-labs/context\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-condition-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport { fullEntitiesContext } from \"../../../../../data/context\";\nimport { deviceAutomationsEqual, fetchDeviceConditionCapabilities } from \"../../../../../data/device_automation\";\nexport let HaDeviceCondition = _decorate([customElement(\"ha-automation-condition-device\")], function (_initialize, _LitElement) {\n  class HaDeviceCondition extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaDeviceCondition,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Object\n      })],\n      key: \"condition\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_capabilities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state(), consume({\n        context: fullEntitiesContext,\n        subscribe: true\n      })],\n      key: \"_entityReg\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_origCondition\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"defaultConfig\",\n      value: function defaultConfig() {\n        return {\n          device_id: \"\",\n          domain: \"\",\n          entity_id: \"\"\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_extraFieldsData\",\n      value() {\n        return memoizeOne((condition, capabilities) => {\n          const extraFieldsData = {};\n          capabilities.extra_fields.forEach(item => {\n            if (condition[item.name] !== undefined) {\n              extraFieldsData[item.name] = condition[item.name];\n            }\n          });\n          return extraFieldsData;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_capabilities;\n        const deviceId = this._deviceId || this.condition.device_id;\n        return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\"ui.panel.config.automation.editor.conditions.type.device.label\")}\n      ></ha-device-picker>\n      <ha-device-condition-picker\n        .value=${this.condition}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceConditionPicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\"ui.panel.config.automation.editor.conditions.type.device.condition\")}\n      ></ha-device-condition-picker>\n      ${(_this$_capabilities = this._capabilities) !== null && _this$_capabilities !== void 0 && _this$_capabilities.extra_fields ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.condition, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .disabled=${this.disabled}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(this.hass.localize)}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          ` : \"\"}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        if (!this._capabilities) {\n          this._getCapabilities();\n        }\n        if (this.condition) {\n          this._origCondition = this.condition;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedPros) {\n        const prevCondition = changedPros.get(\"condition\");\n        if (prevCondition && !deviceAutomationsEqual(this._entityReg, prevCondition, this.condition)) {\n          this._getCapabilities();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getCapabilities\",\n      value: async function _getCapabilities() {\n        const condition = this.condition;\n        this._capabilities = condition.domain ? await fetchDeviceConditionCapabilities(this.hass, condition) : undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_devicePicked\",\n      value: function _devicePicked(ev) {\n        ev.stopPropagation();\n        this._deviceId = ev.target.value;\n        if (this._deviceId === undefined) {\n          fireEvent(this, \"value-changed\", {\n            value: {\n              ...HaDeviceCondition.defaultConfig,\n              condition: \"device\"\n            }\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deviceConditionPicked\",\n      value: function _deviceConditionPicked(ev) {\n        ev.stopPropagation();\n        let condition = ev.detail.value;\n        if (this._origCondition && deviceAutomationsEqual(this._entityReg, this._origCondition, condition)) {\n          condition = this._origCondition;\n        }\n        fireEvent(this, \"value-changed\", {\n          value: condition\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_extraFieldsChanged\",\n      value: function _extraFieldsChanged(ev) {\n        ev.stopPropagation();\n        fireEvent(this, \"value-changed\", {\n          value: {\n            ...this.condition,\n            ...ev.detail.value\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_extraFieldsComputeLabelCallback\",\n      value: function _extraFieldsComputeLabelCallback(localize) {\n        // Returns a callback for ha-form to calculate labels per schema object\n        return schema => localize(`ui.panel.config.automation.editor.conditions.type.device.extra_fields.${schema.name}`) || schema.name;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n\n    ha-form {\n      display: block;\n      margin-top: 24px;\n    }\n  `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["consume","css","html","LitElement","customElement","property","state","memoizeOne","fireEvent","fullEntitiesContext","deviceAutomationsEqual","fetchDeviceConditionCapabilities","HaDeviceCondition","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Object","Boolean","context","subscribe","static","defaultConfig","device_id","domain","entity_id","condition","capabilities","extraFieldsData","extra_fields","forEach","item","name","undefined","render","_this$_capabilities","deviceId","_deviceId","_devicePicked","hass","disabled","localize","_deviceConditionPicked","_capabilities","_extraFieldsData","_extraFieldsComputeLabelCallback","_extraFieldsChanged","firstUpdated","_getCapabilities","_origCondition","updated","changedPros","prevCondition","get","_entityReg","ev","stopPropagation","target","detail","schema"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/automation/condition/types/ha-automation-condition-device.ts"],"sourcesContent":["import { consume } from \"@lit-labs/context\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/device/ha-device-condition-picker\";\nimport \"../../../../../components/device/ha-device-picker\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport { fullEntitiesContext } from \"../../../../../data/context\";\nimport {\n  deviceAutomationsEqual,\n  DeviceCapabilities,\n  DeviceCondition,\n  fetchDeviceConditionCapabilities,\n} from \"../../../../../data/device_automation\";\nimport { EntityRegistryEntry } from \"../../../../../data/entity_registry\";\nimport type { HomeAssistant } from \"../../../../../types\";\n\n@customElement(\"ha-automation-condition-device\")\nexport class HaDeviceCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Object }) public condition!: DeviceCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() private _deviceId?: string;\n\n  @state() private _capabilities?: DeviceCapabilities;\n\n  @state()\n  @consume({ context: fullEntitiesContext, subscribe: true })\n  _entityReg!: EntityRegistryEntry[];\n\n  private _origCondition?: DeviceCondition;\n\n  public static get defaultConfig() {\n    return {\n      device_id: \"\",\n      domain: \"\",\n      entity_id: \"\",\n    };\n  }\n\n  private _extraFieldsData = memoizeOne(\n    (condition: DeviceCondition, capabilities: DeviceCapabilities) => {\n      const extraFieldsData: Record<string, any> = {};\n      capabilities.extra_fields.forEach((item) => {\n        if (condition[item.name] !== undefined) {\n          extraFieldsData![item.name] = condition[item.name];\n        }\n      });\n      return extraFieldsData;\n    }\n  );\n\n  protected render() {\n    const deviceId = this._deviceId || this.condition.device_id;\n\n    return html`\n      <ha-device-picker\n        .value=${deviceId}\n        @value-changed=${this._devicePicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.label\"\n        )}\n      ></ha-device-picker>\n      <ha-device-condition-picker\n        .value=${this.condition}\n        .deviceId=${deviceId}\n        @value-changed=${this._deviceConditionPicked}\n        .hass=${this.hass}\n        .disabled=${this.disabled}\n        .label=${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.device.condition\"\n        )}\n      ></ha-device-condition-picker>\n      ${this._capabilities?.extra_fields\n        ? html`\n            <ha-form\n              .hass=${this.hass}\n              .data=${this._extraFieldsData(this.condition, this._capabilities)}\n              .schema=${this._capabilities.extra_fields}\n              .disabled=${this.disabled}\n              .computeLabel=${this._extraFieldsComputeLabelCallback(\n                this.hass.localize\n              )}\n              @value-changed=${this._extraFieldsChanged}\n            ></ha-form>\n          `\n        : \"\"}\n    `;\n  }\n\n  protected firstUpdated() {\n    if (!this._capabilities) {\n      this._getCapabilities();\n    }\n    if (this.condition) {\n      this._origCondition = this.condition;\n    }\n  }\n\n  protected updated(changedPros) {\n    const prevCondition = changedPros.get(\"condition\");\n    if (\n      prevCondition &&\n      !deviceAutomationsEqual(this._entityReg, prevCondition, this.condition)\n    ) {\n      this._getCapabilities();\n    }\n  }\n\n  private async _getCapabilities() {\n    const condition = this.condition;\n\n    this._capabilities = condition.domain\n      ? await fetchDeviceConditionCapabilities(this.hass, condition)\n      : undefined;\n  }\n\n  private _devicePicked(ev) {\n    ev.stopPropagation();\n    this._deviceId = ev.target.value;\n    if (this._deviceId === undefined) {\n      fireEvent(this, \"value-changed\", {\n        value: { ...HaDeviceCondition.defaultConfig, condition: \"device\" },\n      });\n    }\n  }\n\n  private _deviceConditionPicked(ev) {\n    ev.stopPropagation();\n    let condition = ev.detail.value;\n    if (\n      this._origCondition &&\n      deviceAutomationsEqual(this._entityReg, this._origCondition, condition)\n    ) {\n      condition = this._origCondition;\n    }\n    fireEvent(this, \"value-changed\", { value: condition });\n  }\n\n  private _extraFieldsChanged(ev) {\n    ev.stopPropagation();\n    fireEvent(this, \"value-changed\", {\n      value: {\n        ...this.condition,\n        ...ev.detail.value,\n      },\n    });\n  }\n\n  private _extraFieldsComputeLabelCallback(localize) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(\n        `ui.panel.config.automation.editor.conditions.type.device.extra_fields.${schema.name}`\n      ) || schema.name;\n  }\n\n  static styles = css`\n    ha-device-picker {\n      display: block;\n      margin-bottom: 24px;\n    }\n\n    ha-form {\n      display: block;\n      margin-top: 24px;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-device\": HaDeviceCondition;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}