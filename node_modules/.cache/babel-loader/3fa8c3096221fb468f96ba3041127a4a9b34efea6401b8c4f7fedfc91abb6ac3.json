{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nvar statisticTypes = [\"change\", \"last_reset\", \"max\", \"mean\", \"min\", \"state\", \"sum\"];\nexport var getRecorderInfo = function getRecorderInfo(conn) {\n  return conn.sendMessagePromise({\n    type: \"recorder/info\"\n  });\n};\nexport var getStatisticIds = function getStatisticIds(hass, statistic_type) {\n  return hass.callWS({\n    type: \"recorder/list_statistic_ids\",\n    statistic_type: statistic_type\n  });\n};\nexport var getStatisticMetadata = function getStatisticMetadata(hass, statistic_ids) {\n  return hass.callWS({\n    type: \"recorder/get_statistics_metadata\",\n    statistic_ids: statistic_ids\n  });\n};\nexport var fetchStatistics = function fetchStatistics(hass, startTime, endTime, statistic_ids) {\n  var period = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"hour\";\n  var units = arguments.length > 5 ? arguments[5] : undefined;\n  var types = arguments.length > 6 ? arguments[6] : undefined;\n  return hass.callWS({\n    type: \"recorder/statistics_during_period\",\n    start_time: startTime.toISOString(),\n    end_time: endTime === null || endTime === void 0 ? void 0 : endTime.toISOString(),\n    statistic_ids: statistic_ids,\n    period: period,\n    units: units,\n    types: types\n  });\n};\nexport var fetchStatistic = function fetchStatistic(hass, statistic_id, period, units) {\n  return hass.callWS({\n    type: \"recorder/statistic_during_period\",\n    statistic_id: statistic_id,\n    units: units,\n    fixed_period: period.fixed_period ? {\n      start_time: period.fixed_period.start instanceof Date ? period.fixed_period.start.toISOString() : period.fixed_period.start,\n      end_time: period.fixed_period.end instanceof Date ? period.fixed_period.end.toISOString() : period.fixed_period.end\n    } : undefined,\n    calendar: period.calendar,\n    rolling_window: period.rolling_window\n  });\n};\nexport var validateStatistics = function validateStatistics(hass) {\n  return hass.callWS({\n    type: \"recorder/validate_statistics\"\n  });\n};\nexport var updateStatisticsMetadata = function updateStatisticsMetadata(hass, statistic_id, unit_of_measurement) {\n  return hass.callWS({\n    type: \"recorder/update_statistics_metadata\",\n    statistic_id: statistic_id,\n    unit_of_measurement: unit_of_measurement\n  });\n};\nexport var clearStatistics = function clearStatistics(hass, statistic_ids) {\n  return hass.callWS({\n    type: \"recorder/clear_statistics\",\n    statistic_ids: statistic_ids\n  });\n};\nexport var calculateStatisticSumGrowth = function calculateStatisticSumGrowth(values) {\n  var growth = null;\n  if (!values) {\n    return null;\n  }\n  var _iterator = _createForOfIteratorHelper(values),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var value = _step.value;\n      if (value.change === null || value.change === undefined) {\n        continue;\n      }\n      if (growth === null) {\n        growth = value.change;\n      } else {\n        growth += value.change;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return growth;\n};\nexport var calculateStatisticsSumGrowth = function calculateStatisticsSumGrowth(data, stats) {\n  var totalGrowth = null;\n  var _iterator2 = _createForOfIteratorHelper(stats),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var stat = _step2.value;\n      if (!(stat in data)) {\n        continue;\n      }\n      var statGrowth = calculateStatisticSumGrowth(data[stat]);\n      if (statGrowth === null) {\n        continue;\n      }\n      if (totalGrowth === null) {\n        totalGrowth = statGrowth;\n      } else {\n        totalGrowth += statGrowth;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return totalGrowth;\n};\nexport var statisticsHaveType = function statisticsHaveType(stats, type) {\n  return stats.some(function (stat) {\n    return stat[type] !== undefined && stat[type] !== null;\n  });\n};\nvar mean_stat_types = [\"mean\", \"min\", \"max\"];\nvar sum_stat_types = [\"sum\", \"state\", \"change\"];\nexport var statisticsMetaHasType = function statisticsMetaHasType(metadata, type) {\n  if (mean_stat_types.includes(type) && metadata.has_mean) {\n    return true;\n  }\n  if (sum_stat_types.includes(type) && metadata.has_sum) {\n    return true;\n  }\n  return false;\n};\nexport var adjustStatisticsSum = function adjustStatisticsSum(hass, statistic_id, start_time, adjustment, adjustment_unit_of_measurement) {\n  var start_time_iso = new Date(start_time).toISOString();\n  return hass.callWS({\n    type: \"recorder/adjust_sum_statistics\",\n    statistic_id: statistic_id,\n    start_time: start_time_iso,\n    adjustment: adjustment,\n    adjustment_unit_of_measurement: adjustment_unit_of_measurement\n  });\n};\nexport var getStatisticLabel = function getStatisticLabel(hass, statisticsId, statisticsMetaData) {\n  var entity = hass.states[statisticsId];\n  if (entity) {\n    return computeStateName(entity);\n  }\n  return (statisticsMetaData === null || statisticsMetaData === void 0 ? void 0 : statisticsMetaData.name) || statisticsId;\n};\nexport var getDisplayUnit = function getDisplayUnit(hass, statisticsId, statisticsMetaData) {\n  var unit;\n  if (statisticsId) {\n    var _hass$states$statisti;\n    unit = (_hass$states$statisti = hass.states[statisticsId]) === null || _hass$states$statisti === void 0 ? void 0 : _hass$states$statisti.attributes.unit_of_measurement;\n  }\n  return unit === undefined ? statisticsMetaData === null || statisticsMetaData === void 0 ? void 0 : statisticsMetaData.statistics_unit_of_measurement : unit;\n};\nexport var isExternalStatistic = function isExternalStatistic(statisticsId) {\n  return statisticsId.includes(\":\");\n};","map":{"version":3,"names":["computeStateName","statisticTypes","getRecorderInfo","conn","sendMessagePromise","type","getStatisticIds","hass","statistic_type","callWS","getStatisticMetadata","statistic_ids","fetchStatistics","startTime","endTime","period","arguments","length","undefined","units","types","start_time","toISOString","end_time","fetchStatistic","statistic_id","fixed_period","start","Date","end","calendar","rolling_window","validateStatistics","updateStatisticsMetadata","unit_of_measurement","clearStatistics","calculateStatisticSumGrowth","values","growth","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","change","err","e","f","calculateStatisticsSumGrowth","data","stats","totalGrowth","_iterator2","_step2","stat","statGrowth","statisticsHaveType","some","mean_stat_types","sum_stat_types","statisticsMetaHasType","metadata","includes","has_mean","has_sum","adjustStatisticsSum","adjustment","adjustment_unit_of_measurement","start_time_iso","getStatisticLabel","statisticsId","statisticsMetaData","entity","states","name","getDisplayUnit","unit","_hass$states$statisti","attributes","statistics_unit_of_measurement","isExternalStatistic"],"sources":["/workspaces/frontend/src/data/recorder.ts"],"sourcesContent":["import { Connection } from \"home-assistant-js-websocket\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { HaDurationData } from \"../components/ha-duration-input\";\nimport { HomeAssistant } from \"../types\";\n\nexport interface RecorderInfo {\n  backlog: number | null;\n  max_backlog: number;\n  migration_in_progress: boolean;\n  migration_is_live: boolean;\n  recording: boolean;\n  thread_running: boolean;\n}\n\nexport type StatisticType = \"change\" | \"state\" | \"sum\" | \"min\" | \"max\" | \"mean\";\n\nexport interface Statistics {\n  [statisticId: string]: StatisticValue[];\n}\n\nexport interface StatisticValue {\n  start: number;\n  end: number;\n  change?: number | null;\n  last_reset?: number | null;\n  max?: number | null;\n  mean?: number | null;\n  min?: number | null;\n  sum?: number | null;\n  state?: number | null;\n}\n\nexport interface Statistic {\n  max: number | null;\n  mean: number | null;\n  min: number | null;\n  change: number | null;\n}\n\nexport interface StatisticsMetaData {\n  statistics_unit_of_measurement: string | null;\n  statistic_id: string;\n  source: string;\n  name?: string | null;\n  has_sum: boolean;\n  has_mean: boolean;\n  unit_class: string | null;\n}\n\nexport type StatisticsValidationResult =\n  | StatisticsValidationResultNoState\n  | StatisticsValidationResultEntityNotRecorded\n  | StatisticsValidationResultEntityNoLongerRecorded\n  | StatisticsValidationResultUnsupportedStateClass\n  | StatisticsValidationResultUnitsChanged;\n\nexport interface StatisticsValidationResultNoState {\n  type: \"no_state\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultEntityNoLongerRecorded {\n  type: \"entity_no_longer_recorded\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultEntityNotRecorded {\n  type: \"entity_not_recorded\";\n  data: { statistic_id: string };\n}\n\nexport interface StatisticsValidationResultUnsupportedStateClass {\n  type: \"unsupported_state_class\";\n  data: { statistic_id: string; state_class: string };\n}\n\nexport interface StatisticsValidationResultUnitsChanged {\n  type: \"units_changed\";\n  data: {\n    statistic_id: string;\n    state_unit: string;\n    metadata_unit: string;\n    supported_unit: string;\n  };\n}\n\nexport interface StatisticsUnitConfiguration {\n  energy?: \"Wh\" | \"kWh\" | \"MWh\" | \"GJ\";\n  power?: \"W\" | \"kW\";\n  pressure?:\n    | \"Pa\"\n    | \"hPa\"\n    | \"kPa\"\n    | \"bar\"\n    | \"cbar\"\n    | \"mbar\"\n    | \"inHg\"\n    | \"psi\"\n    | \"mmHg\";\n  temperature?: \"°C\" | \"°F\" | \"K\";\n  volume?: \"L\" | \"gal\" | \"ft³\" | \"m³\";\n}\n\nconst statisticTypes = [\n  \"change\",\n  \"last_reset\",\n  \"max\",\n  \"mean\",\n  \"min\",\n  \"state\",\n  \"sum\",\n] as const;\nexport type StatisticsTypes = (typeof statisticTypes)[number][];\n\nexport interface StatisticsValidationResults {\n  [statisticId: string]: StatisticsValidationResult[];\n}\n\nexport const getRecorderInfo = (conn: Connection) =>\n  conn.sendMessagePromise<RecorderInfo>({\n    type: \"recorder/info\",\n  });\n\nexport const getStatisticIds = (\n  hass: HomeAssistant,\n  statistic_type?: \"mean\" | \"sum\"\n) =>\n  hass.callWS<StatisticsMetaData[]>({\n    type: \"recorder/list_statistic_ids\",\n    statistic_type,\n  });\n\nexport const getStatisticMetadata = (\n  hass: HomeAssistant,\n  statistic_ids?: string[]\n) =>\n  hass.callWS<StatisticsMetaData[]>({\n    type: \"recorder/get_statistics_metadata\",\n    statistic_ids,\n  });\n\nexport const fetchStatistics = (\n  hass: HomeAssistant,\n  startTime: Date,\n  endTime?: Date,\n  statistic_ids?: string[],\n  period: \"5minute\" | \"hour\" | \"day\" | \"week\" | \"month\" = \"hour\",\n  units?: StatisticsUnitConfiguration,\n  types?: StatisticsTypes\n) =>\n  hass.callWS<Statistics>({\n    type: \"recorder/statistics_during_period\",\n    start_time: startTime.toISOString(),\n    end_time: endTime?.toISOString(),\n    statistic_ids,\n    period,\n    units,\n    types,\n  });\n\nexport const fetchStatistic = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  period: {\n    fixed_period?: { start: string | Date; end: string | Date };\n    calendar?: { period: string; offset: number };\n    rolling_window?: { duration: HaDurationData; offset: HaDurationData };\n  },\n  units?: StatisticsUnitConfiguration\n) =>\n  hass.callWS<Statistic>({\n    type: \"recorder/statistic_during_period\",\n    statistic_id,\n    units,\n    fixed_period: period.fixed_period\n      ? {\n          start_time:\n            period.fixed_period.start instanceof Date\n              ? period.fixed_period.start.toISOString()\n              : period.fixed_period.start,\n          end_time:\n            period.fixed_period.end instanceof Date\n              ? period.fixed_period.end.toISOString()\n              : period.fixed_period.end,\n        }\n      : undefined,\n    calendar: period.calendar,\n    rolling_window: period.rolling_window,\n  });\n\nexport const validateStatistics = (hass: HomeAssistant) =>\n  hass.callWS<StatisticsValidationResults>({\n    type: \"recorder/validate_statistics\",\n  });\n\nexport const updateStatisticsMetadata = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  unit_of_measurement: string | null\n) =>\n  hass.callWS<void>({\n    type: \"recorder/update_statistics_metadata\",\n    statistic_id,\n    unit_of_measurement,\n  });\n\nexport const clearStatistics = (hass: HomeAssistant, statistic_ids: string[]) =>\n  hass.callWS<void>({\n    type: \"recorder/clear_statistics\",\n    statistic_ids,\n  });\n\nexport const calculateStatisticSumGrowth = (\n  values: StatisticValue[]\n): number | null => {\n  let growth: number | null = null;\n\n  if (!values) {\n    return null;\n  }\n\n  for (const value of values) {\n    if (value.change === null || value.change === undefined) {\n      continue;\n    }\n    if (growth === null) {\n      growth = value.change;\n    } else {\n      growth += value.change;\n    }\n  }\n\n  return growth;\n};\n\nexport const calculateStatisticsSumGrowth = (\n  data: Statistics,\n  stats: string[]\n): number | null => {\n  let totalGrowth: number | null = null;\n\n  for (const stat of stats) {\n    if (!(stat in data)) {\n      continue;\n    }\n    const statGrowth = calculateStatisticSumGrowth(data[stat]);\n\n    if (statGrowth === null) {\n      continue;\n    }\n    if (totalGrowth === null) {\n      totalGrowth = statGrowth;\n    } else {\n      totalGrowth += statGrowth;\n    }\n  }\n\n  return totalGrowth;\n};\n\nexport const statisticsHaveType = (\n  stats: StatisticValue[],\n  type: StatisticType\n) => stats.some((stat) => stat[type] !== undefined && stat[type] !== null);\n\nconst mean_stat_types: readonly StatisticType[] = [\"mean\", \"min\", \"max\"];\nconst sum_stat_types: readonly StatisticType[] = [\"sum\", \"state\", \"change\"];\n\nexport const statisticsMetaHasType = (\n  metadata: StatisticsMetaData,\n  type: StatisticType\n) => {\n  if (mean_stat_types.includes(type) && metadata.has_mean) {\n    return true;\n  }\n  if (sum_stat_types.includes(type) && metadata.has_sum) {\n    return true;\n  }\n  return false;\n};\n\nexport const adjustStatisticsSum = (\n  hass: HomeAssistant,\n  statistic_id: string,\n  start_time: number,\n  adjustment: number,\n  adjustment_unit_of_measurement: string | null\n): Promise<void> => {\n  const start_time_iso = new Date(start_time).toISOString();\n  return hass.callWS({\n    type: \"recorder/adjust_sum_statistics\",\n    statistic_id,\n    start_time: start_time_iso,\n    adjustment,\n    adjustment_unit_of_measurement,\n  });\n};\n\nexport const getStatisticLabel = (\n  hass: HomeAssistant,\n  statisticsId: string,\n  statisticsMetaData: StatisticsMetaData | undefined\n): string => {\n  const entity = hass.states[statisticsId];\n  if (entity) {\n    return computeStateName(entity);\n  }\n  return statisticsMetaData?.name || statisticsId;\n};\n\nexport const getDisplayUnit = (\n  hass: HomeAssistant,\n  statisticsId: string | undefined,\n  statisticsMetaData: StatisticsMetaData | undefined\n): string | null | undefined => {\n  let unit: string | undefined;\n  if (statisticsId) {\n    unit = hass.states[statisticsId]?.attributes.unit_of_measurement;\n  }\n  return unit === undefined\n    ? statisticsMetaData?.statistics_unit_of_measurement\n    : unit;\n};\n\nexport const isExternalStatistic = (statisticsId: string): boolean =>\n  statisticsId.includes(\":\");\n"],"mappings":";;;;;;;AACA,SAASA,gBAAgB,QAAQ,qCAAqC;AAsGtE,IAAMC,cAAc,GAAG,CACrB,QAAQ,EACR,YAAY,EACZ,KAAK,EACL,MAAM,EACN,KAAK,EACL,OAAO,EACP,KAAK,CACG;AAOV,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,IAAgB;EAAA,OAC9CA,IAAI,CAACC,kBAAkB,CAAe;IACpCC,IAAI,EAAE;EACR,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAC1BC,IAAmB,EACnBC,cAA+B;EAAA,OAE/BD,IAAI,CAACE,MAAM,CAAuB;IAChCJ,IAAI,EAAE,6BAA6B;IACnCG,cAAc,EAAdA;EACF,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAME,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAC/BH,IAAmB,EACnBI,aAAwB;EAAA,OAExBJ,IAAI,CAACE,MAAM,CAAuB;IAChCJ,IAAI,EAAE,kCAAkC;IACxCM,aAAa,EAAbA;EACF,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAC1BL,IAAmB,EACnBM,SAAe,EACfC,OAAc,EACdH,aAAwB;EAAA,IACxBI,MAAqD,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,MAAM;EAAA,IAC9DG,KAAmC,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IACnCE,KAAuB,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,OAEvBX,IAAI,CAACE,MAAM,CAAa;IACtBJ,IAAI,EAAE,mCAAmC;IACzCgB,UAAU,EAAER,SAAS,CAACS,WAAW,CAAC,CAAC;IACnCC,QAAQ,EAAET,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEQ,WAAW,CAAC,CAAC;IAChCX,aAAa,EAAbA,aAAa;IACbI,MAAM,EAANA,MAAM;IACNI,KAAK,EAALA,KAAK;IACLC,KAAK,EAALA;EACF,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMI,cAAc,GAAG,SAAjBA,cAAcA,CACzBjB,IAAmB,EACnBkB,YAAoB,EACpBV,MAIC,EACDI,KAAmC;EAAA,OAEnCZ,IAAI,CAACE,MAAM,CAAY;IACrBJ,IAAI,EAAE,kCAAkC;IACxCoB,YAAY,EAAZA,YAAY;IACZN,KAAK,EAALA,KAAK;IACLO,YAAY,EAAEX,MAAM,CAACW,YAAY,GAC7B;MACEL,UAAU,EACRN,MAAM,CAACW,YAAY,CAACC,KAAK,YAAYC,IAAI,GACrCb,MAAM,CAACW,YAAY,CAACC,KAAK,CAACL,WAAW,CAAC,CAAC,GACvCP,MAAM,CAACW,YAAY,CAACC,KAAK;MAC/BJ,QAAQ,EACNR,MAAM,CAACW,YAAY,CAACG,GAAG,YAAYD,IAAI,GACnCb,MAAM,CAACW,YAAY,CAACG,GAAG,CAACP,WAAW,CAAC,CAAC,GACrCP,MAAM,CAACW,YAAY,CAACG;IAC5B,CAAC,GACDX,SAAS;IACbY,QAAQ,EAAEf,MAAM,CAACe,QAAQ;IACzBC,cAAc,EAAEhB,MAAM,CAACgB;EACzB,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAIzB,IAAmB;EAAA,OACpDA,IAAI,CAACE,MAAM,CAA8B;IACvCJ,IAAI,EAAE;EACR,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAM4B,wBAAwB,GAAG,SAA3BA,wBAAwBA,CACnC1B,IAAmB,EACnBkB,YAAoB,EACpBS,mBAAkC;EAAA,OAElC3B,IAAI,CAACE,MAAM,CAAO;IAChBJ,IAAI,EAAE,qCAAqC;IAC3CoB,YAAY,EAAZA,YAAY;IACZS,mBAAmB,EAAnBA;EACF,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAI5B,IAAmB,EAAEI,aAAuB;EAAA,OAC1EJ,IAAI,CAACE,MAAM,CAAO;IAChBJ,IAAI,EAAE,2BAA2B;IACjCM,aAAa,EAAbA;EACF,CAAC,CAAC;AAAA;AAEJ,OAAO,IAAMyB,2BAA2B,GAAG,SAA9BA,2BAA2BA,CACtCC,MAAwB,EACN;EAClB,IAAIC,MAAqB,GAAG,IAAI;EAEhC,IAAI,CAACD,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAAC,IAAAE,SAAA,GAAAC,0BAAA,CAEmBH,MAAM;IAAAI,KAAA;EAAA;IAA1B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAA4B;MAAA,IAAjBC,KAAK,GAAAJ,KAAA,CAAAI,KAAA;MACd,IAAIA,KAAK,CAACC,MAAM,KAAK,IAAI,IAAID,KAAK,CAACC,MAAM,KAAK5B,SAAS,EAAE;QACvD;MACF;MACA,IAAIoB,MAAM,KAAK,IAAI,EAAE;QACnBA,MAAM,GAAGO,KAAK,CAACC,MAAM;MACvB,CAAC,MAAM;QACLR,MAAM,IAAIO,KAAK,CAACC,MAAM;MACxB;IACF;EAAC,SAAAC,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;EAED,OAAOX,MAAM;AACf,CAAC;AAED,OAAO,IAAMY,4BAA4B,GAAG,SAA/BA,4BAA4BA,CACvCC,IAAgB,EAChBC,KAAe,EACG;EAClB,IAAIC,WAA0B,GAAG,IAAI;EAAC,IAAAC,UAAA,GAAAd,0BAAA,CAEnBY,KAAK;IAAAG,MAAA;EAAA;IAAxB,KAAAD,UAAA,CAAAZ,CAAA,MAAAa,MAAA,GAAAD,UAAA,CAAAX,CAAA,IAAAC,IAAA,GAA0B;MAAA,IAAfY,IAAI,GAAAD,MAAA,CAAAV,KAAA;MACb,IAAI,EAAEW,IAAI,IAAIL,IAAI,CAAC,EAAE;QACnB;MACF;MACA,IAAMM,UAAU,GAAGrB,2BAA2B,CAACe,IAAI,CAACK,IAAI,CAAC,CAAC;MAE1D,IAAIC,UAAU,KAAK,IAAI,EAAE;QACvB;MACF;MACA,IAAIJ,WAAW,KAAK,IAAI,EAAE;QACxBA,WAAW,GAAGI,UAAU;MAC1B,CAAC,MAAM;QACLJ,WAAW,IAAII,UAAU;MAC3B;IACF;EAAC,SAAAV,GAAA;IAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;EAAA;IAAAO,UAAA,CAAAL,CAAA;EAAA;EAED,OAAOI,WAAW;AACpB,CAAC;AAED,OAAO,IAAMK,kBAAkB,GAAG,SAArBA,kBAAkBA,CAC7BN,KAAuB,EACvB/C,IAAmB;EAAA,OAChB+C,KAAK,CAACO,IAAI,CAAC,UAACH,IAAI;IAAA,OAAKA,IAAI,CAACnD,IAAI,CAAC,KAAKa,SAAS,IAAIsC,IAAI,CAACnD,IAAI,CAAC,KAAK,IAAI;EAAA,EAAC;AAAA;AAE1E,IAAMuD,eAAyC,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;AACxE,IAAMC,cAAwC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC;AAE3E,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAChCC,QAA4B,EAC5B1D,IAAmB,EAChB;EACH,IAAIuD,eAAe,CAACI,QAAQ,CAAC3D,IAAI,CAAC,IAAI0D,QAAQ,CAACE,QAAQ,EAAE;IACvD,OAAO,IAAI;EACb;EACA,IAAIJ,cAAc,CAACG,QAAQ,CAAC3D,IAAI,CAAC,IAAI0D,QAAQ,CAACG,OAAO,EAAE;IACrD,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAC9B5D,IAAmB,EACnBkB,YAAoB,EACpBJ,UAAkB,EAClB+C,UAAkB,EAClBC,8BAA6C,EAC3B;EAClB,IAAMC,cAAc,GAAG,IAAI1C,IAAI,CAACP,UAAU,CAAC,CAACC,WAAW,CAAC,CAAC;EACzD,OAAOf,IAAI,CAACE,MAAM,CAAC;IACjBJ,IAAI,EAAE,gCAAgC;IACtCoB,YAAY,EAAZA,YAAY;IACZJ,UAAU,EAAEiD,cAAc;IAC1BF,UAAU,EAAVA,UAAU;IACVC,8BAA8B,EAA9BA;EACF,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,IAAME,iBAAiB,GAAG,SAApBA,iBAAiBA,CAC5BhE,IAAmB,EACnBiE,YAAoB,EACpBC,kBAAkD,EACvC;EACX,IAAMC,MAAM,GAAGnE,IAAI,CAACoE,MAAM,CAACH,YAAY,CAAC;EACxC,IAAIE,MAAM,EAAE;IACV,OAAO1E,gBAAgB,CAAC0E,MAAM,CAAC;EACjC;EACA,OAAO,CAAAD,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEG,IAAI,KAAIJ,YAAY;AACjD,CAAC;AAED,OAAO,IAAMK,cAAc,GAAG,SAAjBA,cAAcA,CACzBtE,IAAmB,EACnBiE,YAAgC,EAChCC,kBAAkD,EACpB;EAC9B,IAAIK,IAAwB;EAC5B,IAAIN,YAAY,EAAE;IAAA,IAAAO,qBAAA;IAChBD,IAAI,IAAAC,qBAAA,GAAGxE,IAAI,CAACoE,MAAM,CAACH,YAAY,CAAC,cAAAO,qBAAA,uBAAzBA,qBAAA,CAA2BC,UAAU,CAAC9C,mBAAmB;EAClE;EACA,OAAO4C,IAAI,KAAK5D,SAAS,GACrBuD,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAEQ,8BAA8B,GAClDH,IAAI;AACV,CAAC;AAED,OAAO,IAAMI,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAIV,YAAoB;EAAA,OACtDA,YAAY,CAACR,QAAQ,CAAC,GAAG,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}