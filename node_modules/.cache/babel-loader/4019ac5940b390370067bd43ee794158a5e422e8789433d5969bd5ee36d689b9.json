{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeAttributeNameDisplay } from \"../../common/entity/compute_attribute_display\";\nimport { stateActive } from \"../../common/entity/state_active\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-select\";\nimport \"../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../data/entity_attributes\";\nimport { computeFanSpeedCount, computeFanSpeedIcon, FAN_SPEED_COUNT_MAX_FOR_BUTTONS, FAN_SPEEDS, fanPercentageToSpeed, fanSpeedToPercentage } from \"../../data/fan\";\nexport let HaStateControlFanSpeed = _decorate([customElement(\"ha-state-control-fan-speed\")], function (_initialize, _LitElement) {\n  class HaStateControlFanSpeed extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStateControlFanSpeed,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"sliderValue\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"speedValue\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProp) {\n        if (changedProp.has(\"stateObj\")) {\n          var _this$stateObj$attrib;\n          const percentage = stateActive(this.stateObj) ? (_this$stateObj$attrib = this.stateObj.attributes.percentage) !== null && _this$stateObj$attrib !== void 0 ? _this$stateObj$attrib : 0 : 0;\n          this.sliderValue = Math.max(Math.round(percentage), 0);\n          this.speedValue = fanPercentageToSpeed(this.stateObj, percentage);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_speedValueChanged\",\n      value: function _speedValueChanged(ev) {\n        const speed = ev.detail.value;\n        this.speedValue = speed;\n        const percentage = fanSpeedToPercentage(this.stateObj, speed);\n        this.hass.callService(\"fan\", \"set_percentage\", {\n          entity_id: this.stateObj.entity_id,\n          percentage: percentage\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.sliderValue = value;\n        this.hass.callService(\"fan\", \"set_percentage\", {\n          entity_id: this.stateObj.entity_id,\n          percentage: value\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_localizeSpeed\",\n      value: function _localizeSpeed(speed) {\n        if (speed === \"on\" || speed === \"off\") {\n          return this.hass.formatEntityState(this.stateObj, speed);\n        }\n        return this.hass.localize(`ui.card.fan.speed.${speed}`) || speed;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$stateObj$attrib2;\n        const color = stateColorCss(this.stateObj);\n        const speedCount = computeFanSpeedCount(this.stateObj);\n        if (speedCount <= FAN_SPEED_COUNT_MAX_FOR_BUTTONS) {\n          const options = FAN_SPEEDS[speedCount].map(speed => ({\n            value: speed,\n            label: this._localizeSpeed(speed),\n            path: computeFanSpeedIcon(this.stateObj, speed)\n          })).reverse();\n          return html`\n        <ha-control-select\n          vertical\n          .options=${options}\n          .value=${this.speedValue}\n          @value-changed=${this._speedValueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"percentage\")}\n          style=${styleMap({\n            \"--control-select-color\": color,\n            \"--control-select-background\": color\n          })}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n        >\n        </ha-control-select>\n      `;\n        }\n        return html`\n      <ha-control-slider\n        vertical\n        min=\"0\"\n        max=\"100\"\n        .value=${this.sliderValue}\n        .step=${(_this$stateObj$attrib2 = this.stateObj.attributes.percentage_step) !== null && _this$stateObj$attrib2 !== void 0 ? _this$stateObj$attrib2 : 1}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"percentage\")}\n        style=${styleMap({\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .unit=${DOMAIN_ATTRIBUTES_UNITS.fan.percentage}\n        .locale=${this.hass.locale}\n      >\n      </ha-control-slider>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-slider {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-tooltip-font-size: 20px;\n      }\n      ha-control-select {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-select-thickness: 100px;\n        --control-select-border-radius: 24px;\n        --control-select-color: var(--primary-color);\n        --control-select-background: var(--disabled-color);\n        --control-select-background-opacity: 0.2;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","state","styleMap","computeAttributeNameDisplay","stateActive","stateColorCss","UNAVAILABLE","DOMAIN_ATTRIBUTES_UNITS","computeFanSpeedCount","computeFanSpeedIcon","FAN_SPEED_COUNT_MAX_FOR_BUTTONS","FAN_SPEEDS","fanPercentageToSpeed","fanSpeedToPercentage","HaStateControlFanSpeed","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","updated","changedProp","has","_this$stateObj$attrib","percentage","stateObj","attributes","sliderValue","Math","max","round","speedValue","_speedValueChanged","ev","speed","detail","hass","callService","entity_id","_valueChanged","isNaN","_localizeSpeed","formatEntityState","localize","render","_this$stateObj$attrib2","color","speedCount","options","map","label","path","reverse","entities","percentage_step","fan","locale","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/state-control/fan/ha-state-control-fan-speed.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeAttributeNameDisplay } from \"../../common/entity/compute_attribute_display\";\nimport { stateActive } from \"../../common/entity/state_active\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-select\";\nimport type { ControlSelectOption } from \"../../components/ha-control-select\";\nimport \"../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../data/entity_attributes\";\nimport {\n  computeFanSpeedCount,\n  computeFanSpeedIcon,\n  FAN_SPEED_COUNT_MAX_FOR_BUTTONS,\n  FAN_SPEEDS,\n  FanEntity,\n  fanPercentageToSpeed,\n  FanSpeed,\n  fanSpeedToPercentage,\n} from \"../../data/fan\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-state-control-fan-speed\")\nexport class HaStateControlFanSpeed extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: FanEntity;\n\n  @state() sliderValue?: number;\n\n  @state() speedValue?: FanSpeed;\n\n  protected updated(changedProp: Map<string | number | symbol, unknown>): void {\n    if (changedProp.has(\"stateObj\")) {\n      const percentage = stateActive(this.stateObj)\n        ? this.stateObj.attributes.percentage ?? 0\n        : 0;\n      this.sliderValue = Math.max(Math.round(percentage), 0);\n      this.speedValue = fanPercentageToSpeed(this.stateObj, percentage);\n    }\n  }\n\n  private _speedValueChanged(ev: CustomEvent) {\n    const speed = (ev.detail as any).value as FanSpeed;\n\n    this.speedValue = speed;\n\n    const percentage = fanSpeedToPercentage(this.stateObj, speed);\n\n    this.hass.callService(\"fan\", \"set_percentage\", {\n      entity_id: this.stateObj!.entity_id,\n      percentage: percentage,\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.sliderValue = value;\n\n    this.hass.callService(\"fan\", \"set_percentage\", {\n      entity_id: this.stateObj!.entity_id,\n      percentage: value,\n    });\n  }\n\n  private _localizeSpeed(speed: FanSpeed) {\n    if (speed === \"on\" || speed === \"off\") {\n      return this.hass.formatEntityState(this.stateObj, speed);\n    }\n    return this.hass.localize(`ui.card.fan.speed.${speed}`) || speed;\n  }\n\n  protected render() {\n    const color = stateColorCss(this.stateObj);\n\n    const speedCount = computeFanSpeedCount(this.stateObj);\n\n    if (speedCount <= FAN_SPEED_COUNT_MAX_FOR_BUTTONS) {\n      const options = FAN_SPEEDS[speedCount]!.map<ControlSelectOption>(\n        (speed) => ({\n          value: speed,\n          label: this._localizeSpeed(speed),\n          path: computeFanSpeedIcon(this.stateObj, speed),\n        })\n      ).reverse();\n\n      return html`\n        <ha-control-select\n          vertical\n          .options=${options}\n          .value=${this.speedValue}\n          @value-changed=${this._speedValueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(\n            this.hass.localize,\n            this.stateObj,\n            this.hass.entities,\n            \"percentage\"\n          )}\n          style=${styleMap({\n            \"--control-select-color\": color,\n            \"--control-select-background\": color,\n          })}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n        >\n        </ha-control-select>\n      `;\n    }\n\n    return html`\n      <ha-control-slider\n        vertical\n        min=\"0\"\n        max=\"100\"\n        .value=${this.sliderValue}\n        .step=${this.stateObj.attributes.percentage_step ?? 1}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${computeAttributeNameDisplay(\n          this.hass.localize,\n          this.stateObj,\n          this.hass.entities,\n          \"percentage\"\n        )}\n        style=${styleMap({\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .unit=${DOMAIN_ATTRIBUTES_UNITS.fan.percentage}\n        .locale=${this.hass.locale}\n      >\n      </ha-control-slider>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-slider {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-tooltip-font-size: 20px;\n      }\n      ha-control-select {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-select-thickness: 100px;\n        --control-select-border-radius: 24px;\n        --control-select-color: var(--primary-color);\n        --control-select-background: var(--disabled-color);\n        --control-select-background-opacity: 0.2;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-fan-speed\": HaStateControlFanSpeed;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}