{"ast":null,"code":"import { html } from \"lit\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport { domainToName } from \"../../data/integration\";\nimport { getIntegrationDescriptions } from \"../../data/integrations\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showMatterAddDeviceDialog } from \"../../panels/config/integrations/integration-panels/matter/show-dialog-add-matter-device\";\nimport { showZWaveJSAddNodeDialog } from \"../../panels/config/integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { isComponentLoaded } from \"../config/is_component_loaded\";\nimport { navigate } from \"../navigate\";\nexport const PROTOCOL_INTEGRATIONS = [\"zha\", \"zwave_js\", \"matter\"];\nexport const protocolIntegrationPicked = async (element, hass, domain, options) => {\n  if (options !== null && options !== void 0 && options.domain) {\n    const localize = await hass.loadBackendTranslation(\"title\", options.domain);\n    options.domain = domainToName(localize, options.domain);\n  }\n  if (options !== null && options !== void 0 && options.brand) {\n    var _integrationDescripti;\n    const integrationDescriptions = await getIntegrationDescriptions(hass);\n    options.brand = ((_integrationDescripti = integrationDescriptions.core.integration[options.brand]) === null || _integrationDescripti === void 0 ? void 0 : _integrationDescripti.name) || options.brand;\n  }\n  if (domain === \"zwave_js\") {\n    const entries = options !== null && options !== void 0 && options.config_entry ? undefined : await getConfigEntries(hass, {\n      domain\n    });\n    if (!isComponentLoaded(hass, \"zwave_js\") || !(options !== null && options !== void 0 && options.config_entry) && !(entries !== null && entries !== void 0 && entries.length)) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\", {\n          integration: \"Z-Wave\"\n        }),\n        text: hass.localize(\"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\", {\n          integration: \"Z-Wave\",\n          brand: (options === null || options === void 0 ? void 0 : options.brand) || (options === null || options === void 0 ? void 0 : options.domain) || \"Z-Wave\",\n          supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/docs/z-wave/controllers\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\"ui.panel.config.integrations.config_flow.supported_hardware\")}</a\n            >`\n        }),\n        confirmText: hass.localize(\"ui.panel.config.integrations.config_flow.proceed\"),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zwave_js\"\n          });\n        }\n      });\n      return;\n    }\n    showZWaveJSAddNodeDialog(element, {\n      entry_id: (options === null || options === void 0 ? void 0 : options.config_entry) || entries[0].entry_id\n    });\n  } else if (domain === \"zha\") {\n    const entries = options !== null && options !== void 0 && options.config_entry ? undefined : await getConfigEntries(hass, {\n      domain\n    });\n    if (!isComponentLoaded(hass, \"zha\") || !(options !== null && options !== void 0 && options.config_entry) && !(entries !== null && entries !== void 0 && entries.length)) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\", {\n          integration: \"Zigbee\"\n        }),\n        text: hass.localize(\"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\", {\n          integration: \"Zigbee\",\n          brand: (options === null || options === void 0 ? void 0 : options.brand) || (options === null || options === void 0 ? void 0 : options.domain) || \"Zigbee\",\n          supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/integrations/zha/#known-working-zigbee-radio-modules\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\"ui.panel.config.integrations.config_flow.supported_hardware\")}</a\n            >`\n        }),\n        confirmText: hass.localize(\"ui.panel.config.integrations.config_flow.proceed\"),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zha\"\n          });\n        }\n      });\n      return;\n    }\n    navigate(\"/config/zha/add\");\n  } else if (domain === \"matter\") {\n    const entries = options !== null && options !== void 0 && options.config_entry ? undefined : await getConfigEntries(hass, {\n      domain\n    });\n    if (!isComponentLoaded(hass, domain) || !(options !== null && options !== void 0 && options.config_entry) && !(entries !== null && entries !== void 0 && entries.length)) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\", {\n          integration: \"Matter\"\n        }),\n        text: hass.localize(\"ui.panel.config.integrations.config_flow.missing_matter\", {\n          integration: \"Matter\",\n          brand: (options === null || options === void 0 ? void 0 : options.brand) || (options === null || options === void 0 ? void 0 : options.domain) || \"Matter\",\n          supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/integrations/matter\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\"ui.panel.config.integrations.config_flow.supported_hardware\")}</a\n            >`\n        }),\n        confirmText: hass.localize(\"ui.panel.config.integrations.config_flow.proceed\"),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"matter\"\n          });\n        }\n      });\n      return;\n    }\n    showMatterAddDeviceDialog(element);\n  }\n};","map":{"version":3,"names":["html","getConfigEntries","domainToName","getIntegrationDescriptions","showConfigFlowDialog","showConfirmationDialog","showMatterAddDeviceDialog","showZWaveJSAddNodeDialog","documentationUrl","isComponentLoaded","navigate","PROTOCOL_INTEGRATIONS","protocolIntegrationPicked","element","hass","domain","options","localize","loadBackendTranslation","brand","_integrationDescripti","integrationDescriptions","core","integration","name","entries","config_entry","undefined","length","title","text","supported_hardware_link","confirmText","confirm","startFlowHandler","entry_id"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/integrations/protocolIntegrationPicked.ts"],"sourcesContent":["import { html } from \"lit\";\nimport { getConfigEntries } from \"../../data/config_entries\";\nimport { domainToName } from \"../../data/integration\";\nimport { getIntegrationDescriptions } from \"../../data/integrations\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showMatterAddDeviceDialog } from \"../../panels/config/integrations/integration-panels/matter/show-dialog-add-matter-device\";\nimport { showZWaveJSAddNodeDialog } from \"../../panels/config/integrations/integration-panels/zwave_js/show-dialog-zwave_js-add-node\";\nimport type { HomeAssistant } from \"../../types\";\nimport { documentationUrl } from \"../../util/documentation-url\";\nimport { isComponentLoaded } from \"../config/is_component_loaded\";\nimport { navigate } from \"../navigate\";\n\nexport const PROTOCOL_INTEGRATIONS = [\"zha\", \"zwave_js\", \"matter\"] as const;\n\nexport const protocolIntegrationPicked = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  domain: string,\n  options?: { brand?: string; domain?: string; config_entry?: string }\n) => {\n  if (options?.domain) {\n    const localize = await hass.loadBackendTranslation(\"title\", options.domain);\n    options.domain = domainToName(localize, options.domain);\n  }\n\n  if (options?.brand) {\n    const integrationDescriptions = await getIntegrationDescriptions(hass);\n    options.brand =\n      integrationDescriptions.core.integration[options.brand]?.name ||\n      options.brand;\n  }\n\n  if (domain === \"zwave_js\") {\n    const entries = options?.config_entry\n      ? undefined\n      : await getConfigEntries(hass, {\n          domain,\n        });\n\n    if (\n      !isComponentLoaded(hass, \"zwave_js\") ||\n      (!options?.config_entry && !entries?.length)\n    ) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Z-Wave\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Z-Wave\",\n            brand: options?.brand || options?.domain || \"Z-Wave\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/docs/z-wave/controllers\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zwave_js\",\n          });\n        },\n      });\n      return;\n    }\n\n    showZWaveJSAddNodeDialog(element, {\n      entry_id: options?.config_entry || entries![0].entry_id,\n    });\n  } else if (domain === \"zha\") {\n    const entries = options?.config_entry\n      ? undefined\n      : await getConfigEntries(hass, {\n          domain,\n        });\n\n    if (\n      !isComponentLoaded(hass, \"zha\") ||\n      (!options?.config_entry && !entries?.length)\n    ) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Zigbee\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee\",\n          {\n            integration: \"Zigbee\",\n            brand: options?.brand || options?.domain || \"Zigbee\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(\n                hass,\n                \"/integrations/zha/#known-working-zigbee-radio-modules\"\n              )}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"zha\",\n          });\n        },\n      });\n      return;\n    }\n\n    navigate(\"/config/zha/add\");\n  } else if (domain === \"matter\") {\n    const entries = options?.config_entry\n      ? undefined\n      : await getConfigEntries(hass, {\n          domain,\n        });\n    if (\n      !isComponentLoaded(hass, domain) ||\n      (!options?.config_entry && !entries?.length)\n    ) {\n      // If the component isn't loaded, ask them to load the integration first\n      showConfirmationDialog(element, {\n        title: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_zwave_zigbee_title\",\n          { integration: \"Matter\" }\n        ),\n        text: hass.localize(\n          \"ui.panel.config.integrations.config_flow.missing_matter\",\n          {\n            integration: \"Matter\",\n            brand: options?.brand || options?.domain || \"Matter\",\n            supported_hardware_link: html`<a\n              href=${documentationUrl(hass, \"/integrations/matter\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${hass.localize(\n                \"ui.panel.config.integrations.config_flow.supported_hardware\"\n              )}</a\n            >`,\n          }\n        ),\n        confirmText: hass.localize(\n          \"ui.panel.config.integrations.config_flow.proceed\"\n        ),\n        confirm: () => {\n          showConfigFlowDialog(element, {\n            startFlowHandler: \"matter\",\n          });\n        },\n      });\n      return;\n    }\n    showMatterAddDeviceDialog(element);\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}