{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nimport { insertPart, getCommittedValue, removePart, setCommittedValue, setChildPartValue } from '../directive-helpers.js';\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nvar generateMap = function generateMap(list, start, end) {\n  var map = new Map();\n  for (var i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\nvar RepeatDirective = /*#__PURE__*/function (_Directive) {\n  _inherits(RepeatDirective, _Directive);\n  function RepeatDirective(partInfo) {\n    var _this;\n    _classCallCheck(this, RepeatDirective);\n    _this = _callSuper(this, RepeatDirective, [partInfo]);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n    return _this;\n  }\n  _createClass(RepeatDirective, [{\n    key: \"_getValuesAndKeys\",\n    value: function _getValuesAndKeys(items, keyFnOrTemplate, template) {\n      var keyFn;\n      if (template === undefined) {\n        template = keyFnOrTemplate;\n      } else if (keyFnOrTemplate !== undefined) {\n        keyFn = keyFnOrTemplate;\n      }\n      var keys = [];\n      var values = [];\n      var index = 0;\n      var _iterator = _createForOfIteratorHelper(items),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          keys[index] = keyFn ? keyFn(item, index) : index;\n          values[index] = template(item, index);\n          index++;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return {\n        values: values,\n        keys: keys\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render(items, keyFnOrTemplate, template) {\n      return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n    }\n  }, {\n    key: \"update\",\n    value: function update(containerPart, _ref) {\n      var _ref2 = _slicedToArray(_ref, 3),\n        items = _ref2[0],\n        keyFnOrTemplate = _ref2[1],\n        template = _ref2[2];\n      var _a;\n      // Old part & key lists are retrieved from the last update (which may\n      // be primed by hydration)\n      var oldParts = getCommittedValue(containerPart);\n      var _this$_getValuesAndKe = this._getValuesAndKeys(items, keyFnOrTemplate, template),\n        newValues = _this$_getValuesAndKe.values,\n        newKeys = _this$_getValuesAndKe.keys;\n      // We check that oldParts, the committed value, is an Array as an\n      // indicator that the previous value came from a repeat() call. If\n      // oldParts is not an Array then this is the first render and we return\n      // an array for lit-html's array handling to render, and remember the\n      // keys.\n      if (!Array.isArray(oldParts)) {\n        this._itemKeys = newKeys;\n        return newValues;\n      }\n      // In SSR hydration it's possible for oldParts to be an array but for us\n      // to not have item keys because the update() hasn't run yet. We set the\n      // keys to an empty array. This will cause all oldKey/newKey comparisons\n      // to fail and execution to fall to the last nested brach below which\n      // reuses the oldPart.\n      var oldKeys = (_a = this._itemKeys) !== null && _a !== void 0 ? _a : this._itemKeys = [];\n      // New part list will be built up as we go (either reused from\n      // old parts or created for new keys in this update). This is\n      // saved in the above cache at the end of the update.\n      var newParts = [];\n      // Maps from key to index for current and previous update; these\n      // are generated lazily only when needed as a performance\n      // optimization, since they are only required for multiple\n      // non-contiguous changes in the list, which are less common.\n      var newKeyToIndexMap;\n      var oldKeyToIndexMap;\n      // Head and tail pointers to old parts and new values\n      var oldHead = 0;\n      var oldTail = oldParts.length - 1;\n      var newHead = 0;\n      var newTail = newValues.length - 1;\n      // Overview of O(n) reconciliation algorithm (general approach\n      // based on ideas found in ivi, vue, snabbdom, etc.):\n      //\n      // * We start with the list of old parts and new values (and\n      //   arrays of their respective keys), head/tail pointers into\n      //   each, and we build up the new list of parts by updating\n      //   (and when needed, moving) old parts or creating new ones.\n      //   The initial scenario might look like this (for brevity of\n      //   the diagrams, the numbers in the array reflect keys\n      //   associated with the old parts or new values, although keys\n      //   and parts/values are actually stored in parallel arrays\n      //   indexed using the same head/tail pointers):\n      //\n      //      oldHead v                 v oldTail\n      //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n      //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n      //                                      item order\n      //      newHead ^                 ^ newTail\n      //\n      // * Iterate old & new lists from both sides, updating,\n      //   swapping, or removing parts at the head/tail locations\n      //   until neither head nor tail can move.\n      //\n      // * Example below: keys at head pointers match, so update old\n      //   part 0 in-place (no need to move it) and record part 0 in\n      //   the `newParts` list. The last thing we do is advance the\n      //   `oldHead` and `newHead` pointers (will be reflected in the\n      //   next diagram).\n      //\n      //      oldHead v                 v oldTail\n      //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n      //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n      //                                      & newHead\n      //      newHead ^                 ^ newTail\n      //\n      // * Example below: head pointers don't match, but tail\n      //   pointers do, so update part 6 in place (no need to move\n      //   it), and record part 6 in the `newParts` list. Last,\n      //   advance the `oldTail` and `oldHead` pointers.\n      //\n      //         oldHead v              v oldTail\n      //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n      //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n      //                                      & newTail\n      //         newHead ^              ^ newTail\n      //\n      // * If neither head nor tail match; next check if one of the\n      //   old head/tail items was removed. We first need to generate\n      //   the reverse map of new keys to index (`newKeyToIndexMap`),\n      //   which is done once lazily as a performance optimization,\n      //   since we only hit this case if multiple non-contiguous\n      //   changes were made. Note that for contiguous removal\n      //   anywhere in the list, the head and tails would advance\n      //   from either end and pass each other before we get to this\n      //   case and removals would be handled in the final while loop\n      //   without needing to generate the map.\n      //\n      // * Example below: The key at `oldTail` was removed (no longer\n      //   in the `newKeyToIndexMap`), so remove that part from the\n      //   DOM and advance just the `oldTail` pointer.\n      //\n      //         oldHead v           v oldTail\n      //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n      //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n      //         newHead ^           ^ newTail\n      //\n      // * Once head and tail cannot move, any mismatches are due to\n      //   either new or moved items; if a new key is in the previous\n      //   \"old key to old index\" map, move the old part to the new\n      //   location, otherwise create and insert a new part. Note\n      //   that when moving an old part we null its position in the\n      //   oldParts array if it lies between the head and tail so we\n      //   know to skip it when the pointers get there.\n      //\n      // * Example below: neither head nor tail match, and neither\n      //   were removed; so find the `newHead` key in the\n      //   `oldKeyToIndexMap`, and move that old part's DOM into the\n      //   next head position (before `oldParts[oldHead]`). Last,\n      //   null the part in the `oldPart` array since it was\n      //   somewhere in the remaining oldParts still to be scanned\n      //   (between the head and tail pointers) so that we know to\n      //   skip that old part on future iterations.\n      //\n      //         oldHead v        v oldTail\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n      //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n      //                                      newHead\n      //         newHead ^           ^ newTail\n      //\n      // * Note that for moves/insertions like the one above, a part\n      //   inserted at the head pointer is inserted before the\n      //   current `oldParts[oldHead]`, and a part inserted at the\n      //   tail pointer is inserted before `newParts[newTail+1]`. The\n      //   seeming asymmetry lies in the fact that new parts are\n      //   moved into place outside in, so to the right of the head\n      //   pointer are old parts, and to the right of the tail\n      //   pointer are new parts.\n      //\n      // * We always restart back from the top of the algorithm,\n      //   allowing matching and simple updates in place to\n      //   continue...\n      //\n      // * Example below: the head pointers once again match, so\n      //   simply update part 1 and record it in the `newParts`\n      //   array.  Last, advance both head pointers.\n      //\n      //         oldHead v        v oldTail\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n      //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n      //                                      & newHead\n      //            newHead ^        ^ newTail\n      //\n      // * As mentioned above, items that were moved as a result of\n      //   being stuck (the final else clause in the code below) are\n      //   marked with null, so we always advance old pointers over\n      //   these so we're comparing the next actual old value on\n      //   either end.\n      //\n      // * Example below: `oldHead` is null (already placed in\n      //   newParts), so advance `oldHead`.\n      //\n      //            oldHead v     v oldTail\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n      //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n      //               newHead ^     ^ newTail\n      //\n      // * Note it's not critical to mark old parts as null when they\n      //   are moved from head to tail or tail to head, since they\n      //   will be outside the pointer range and never visited again.\n      //\n      // * Example below: Here the old tail key matches the new head\n      //   key, so the part at the `oldTail` position and move its\n      //   DOM to the new head position (before `oldParts[oldHead]`).\n      //   Last, advance `oldTail` and `newHead` pointers.\n      //\n      //               oldHead v  v oldTail\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n      //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n      //                                     advance oldTail & newHead\n      //               newHead ^     ^ newTail\n      //\n      // * Example below: Old and new head keys match, so update the\n      //   old head part in place, and advance the `oldHead` and\n      //   `newHead` pointers.\n      //\n      //               oldHead v oldTail\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n      //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n      //                                      newHead\n      //                  newHead ^  ^ newTail\n      //\n      // * Once the new or old pointers move past each other then all\n      //   we have left is additions (if old list exhausted) or\n      //   removals (if new list exhausted). Those are handled in the\n      //   final while loops at the end.\n      //\n      // * Example below: `oldHead` exceeded `oldTail`, so we're done\n      //   with the main loop.  Create the remaining part and insert\n      //   it at the new head position, and the update is complete.\n      //\n      //                   (oldHead > oldTail)\n      //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n      //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n      //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n      //                     newHead ^ newTail\n      //\n      // * Note that the order of the if/else clauses is not\n      //   important to the algorithm, as long as the null checks\n      //   come first (to ensure we're always working on valid old\n      //   parts) and that the final else clause comes last (since\n      //   that's where the expensive moves occur). The order of\n      //   remaining clauses is is just a simple guess at which cases\n      //   will be most common.\n      //\n      // * Note, we could calculate the longest\n      //   increasing subsequence (LIS) of old items in new position,\n      //   and only move those not in the LIS set. However that costs\n      //   O(nlogn) time and adds a bit more code, and only helps\n      //   make rare types of mutations require fewer moves. The\n      //   above handles removes, adds, reversal, swaps, and single\n      //   moves of contiguous items in linear time, in the minimum\n      //   number of moves. As the number of multiple moves where LIS\n      //   might help approaches a random shuffle, the LIS\n      //   optimization becomes less helpful, so it seems not worth\n      //   the code at this point. Could reconsider if a compelling\n      //   case arises.\n      while (oldHead <= oldTail && newHead <= newTail) {\n        if (oldParts[oldHead] === null) {\n          // `null` means old part at head has already been used\n          // below; skip\n          oldHead++;\n        } else if (oldParts[oldTail] === null) {\n          // `null` means old part at tail has already been used\n          // below; skip\n          oldTail--;\n        } else if (oldKeys[oldHead] === newKeys[newHead]) {\n          // Old head matches new head; update in place\n          newParts[newHead] = setChildPartValue(oldParts[oldHead], newValues[newHead]);\n          oldHead++;\n          newHead++;\n        } else if (oldKeys[oldTail] === newKeys[newTail]) {\n          // Old tail matches new tail; update in place\n          newParts[newTail] = setChildPartValue(oldParts[oldTail], newValues[newTail]);\n          oldTail--;\n          newTail--;\n        } else if (oldKeys[oldHead] === newKeys[newTail]) {\n          // Old head matches new tail; update and move to new tail\n          newParts[newTail] = setChildPartValue(oldParts[oldHead], newValues[newTail]);\n          insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]);\n          oldHead++;\n          newTail--;\n        } else if (oldKeys[oldTail] === newKeys[newHead]) {\n          // Old tail matches new head; update and move to new head\n          newParts[newHead] = setChildPartValue(oldParts[oldTail], newValues[newHead]);\n          insertPart(containerPart, oldParts[oldHead], oldParts[oldTail]);\n          oldTail--;\n          newHead++;\n        } else {\n          if (newKeyToIndexMap === undefined) {\n            // Lazily generate key-to-index maps, used for removals &\n            // moves below\n            newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n            oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n          }\n          if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n            // Old head is no longer in new list; remove\n            removePart(oldParts[oldHead]);\n            oldHead++;\n          } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n            // Old tail is no longer in new list; remove\n            removePart(oldParts[oldTail]);\n            oldTail--;\n          } else {\n            // Any mismatches at this point are due to additions or\n            // moves; see if we have an old part we can reuse and move\n            // into place\n            var oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n            var oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n            if (oldPart === null) {\n              // No old part for this value; create a new one and\n              // insert it\n              var newPart = insertPart(containerPart, oldParts[oldHead]);\n              setChildPartValue(newPart, newValues[newHead]);\n              newParts[newHead] = newPart;\n            } else {\n              // Reuse old part\n              newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n              insertPart(containerPart, oldParts[oldHead], oldPart);\n              // This marks the old part as having been used, so that\n              // it will be skipped in the first two checks above\n              oldParts[oldIndex] = null;\n            }\n            newHead++;\n          }\n        }\n      }\n      // Add parts for any remaining new values\n      while (newHead <= newTail) {\n        // For all remaining additions, we insert before last new\n        // tail, since old pointers are no longer valid\n        var _newPart = insertPart(containerPart, newParts[newTail + 1]);\n        setChildPartValue(_newPart, newValues[newHead]);\n        newParts[newHead++] = _newPart;\n      }\n      // Remove any remaining unused old parts\n      while (oldHead <= oldTail) {\n        var _oldPart = oldParts[oldHead++];\n        if (_oldPart !== null) {\n          removePart(_oldPart);\n        }\n      }\n      // Save order of new parts for next round\n      this._itemKeys = newKeys;\n      // Directly set part value, bypassing it's dirty-checking\n      setCommittedValue(containerPart, newParts);\n      return noChange;\n    }\n  }]);\n  return RepeatDirective;\n}(Directive);\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport var repeat = directive(RepeatDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","insertPart","getCommittedValue","removePart","setCommittedValue","setChildPartValue","generateMap","list","start","end","map","Map","i","set","RepeatDirective","_Directive","_inherits","partInfo","_this","_classCallCheck","_callSuper","type","CHILD","Error","_createClass","key","value","_getValuesAndKeys","items","keyFnOrTemplate","template","keyFn","undefined","keys","values","index","_iterator","_createForOfIteratorHelper","_step","s","n","done","item","err","e","f","render","update","containerPart","_ref","_ref2","_slicedToArray","oldParts","_this$_getValuesAndKe","newValues","newKeys","Array","isArray","_itemKeys","oldKeys","_a","newParts","newKeyToIndexMap","oldKeyToIndexMap","oldHead","oldTail","length","newHead","newTail","has","oldIndex","get","oldPart","newPart","repeat"],"sources":["../../src/directives/repeat.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ChildPart, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\nimport {\n  insertPart,\n  getCommittedValue,\n  removePart,\n  setCommittedValue,\n  setChildPartValue,\n} from '../directive-helpers.js';\n\nexport type KeyFn<T> = (item: T, index: number) => unknown;\nexport type ItemTemplate<T> = (item: T, index: number) => unknown;\n\n// Helper for generating a map of array item to its index over a subset\n// of an array (used to lazily generate `newKeyToIndexMap` and\n// `oldKeyToIndexMap`)\nconst generateMap = (list: unknown[], start: number, end: number) => {\n  const map = new Map<unknown, number>();\n  for (let i = start; i <= end; i++) {\n    map.set(list[i], i);\n  }\n  return map;\n};\n\nclass RepeatDirective extends Directive {\n  private _itemKeys?: unknown[];\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error('repeat() can only be used in text expressions');\n    }\n  }\n\n  private _getValuesAndKeys<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    let keyFn: KeyFn<T> | undefined;\n    if (template === undefined) {\n      template = keyFnOrTemplate;\n    } else if (keyFnOrTemplate !== undefined) {\n      keyFn = keyFnOrTemplate as KeyFn<T>;\n    }\n    const keys = [];\n    const values = [];\n    let index = 0;\n    for (const item of items) {\n      keys[index] = keyFn ? keyFn(item, index) : index;\n      values[index] = template!(item, index);\n      index++;\n    }\n    return {\n      values,\n      keys,\n    };\n  }\n\n  render<T>(items: Iterable<T>, template: ItemTemplate<T>): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): Array<unknown>;\n  render<T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ) {\n    return this._getValuesAndKeys(items, keyFnOrTemplate, template).values;\n  }\n\n  override update<T>(\n    containerPart: ChildPart,\n    [items, keyFnOrTemplate, template]: [\n      Iterable<T>,\n      KeyFn<T> | ItemTemplate<T>,\n      ItemTemplate<T>\n    ]\n  ) {\n    // Old part & key lists are retrieved from the last update (which may\n    // be primed by hydration)\n    const oldParts = getCommittedValue(\n      containerPart\n    ) as Array<ChildPart | null>;\n    const {values: newValues, keys: newKeys} = this._getValuesAndKeys(\n      items,\n      keyFnOrTemplate,\n      template\n    );\n\n    // We check that oldParts, the committed value, is an Array as an\n    // indicator that the previous value came from a repeat() call. If\n    // oldParts is not an Array then this is the first render and we return\n    // an array for lit-html's array handling to render, and remember the\n    // keys.\n    if (!Array.isArray(oldParts)) {\n      this._itemKeys = newKeys;\n      return newValues;\n    }\n\n    // In SSR hydration it's possible for oldParts to be an array but for us\n    // to not have item keys because the update() hasn't run yet. We set the\n    // keys to an empty array. This will cause all oldKey/newKey comparisons\n    // to fail and execution to fall to the last nested brach below which\n    // reuses the oldPart.\n    const oldKeys = (this._itemKeys ??= []);\n\n    // New part list will be built up as we go (either reused from\n    // old parts or created for new keys in this update). This is\n    // saved in the above cache at the end of the update.\n    const newParts: ChildPart[] = [];\n\n    // Maps from key to index for current and previous update; these\n    // are generated lazily only when needed as a performance\n    // optimization, since they are only required for multiple\n    // non-contiguous changes in the list, which are less common.\n    let newKeyToIndexMap!: Map<unknown, number>;\n    let oldKeyToIndexMap!: Map<unknown, number>;\n\n    // Head and tail pointers to old parts and new values\n    let oldHead = 0;\n    let oldTail = oldParts.length - 1;\n    let newHead = 0;\n    let newTail = newValues.length - 1;\n\n    // Overview of O(n) reconciliation algorithm (general approach\n    // based on ideas found in ivi, vue, snabbdom, etc.):\n    //\n    // * We start with the list of old parts and new values (and\n    //   arrays of their respective keys), head/tail pointers into\n    //   each, and we build up the new list of parts by updating\n    //   (and when needed, moving) old parts or creating new ones.\n    //   The initial scenario might look like this (for brevity of\n    //   the diagrams, the numbers in the array reflect keys\n    //   associated with the old parts or new values, although keys\n    //   and parts/values are actually stored in parallel arrays\n    //   indexed using the same head/tail pointers):\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [ ,  ,  ,  ,  ,  ,  ]\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6] <- reflects the user's new\n    //                                      item order\n    //      newHead ^                 ^ newTail\n    //\n    // * Iterate old & new lists from both sides, updating,\n    //   swapping, or removing parts at the head/tail locations\n    //   until neither head nor tail can move.\n    //\n    // * Example below: keys at head pointers match, so update old\n    //   part 0 in-place (no need to move it) and record part 0 in\n    //   the `newParts` list. The last thing we do is advance the\n    //   `oldHead` and `newHead` pointers (will be reflected in the\n    //   next diagram).\n    //\n    //      oldHead v                 v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  ,  ] <- heads matched: update 0\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //      newHead ^                 ^ newTail\n    //\n    // * Example below: head pointers don't match, but tail\n    //   pointers do, so update part 6 in place (no need to move\n    //   it), and record part 6 in the `newParts` list. Last,\n    //   advance the `oldTail` and `oldHead` pointers.\n    //\n    //         oldHead v              v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- tails matched: update 6\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldTail\n    //                                      & newTail\n    //         newHead ^              ^ newTail\n    //\n    // * If neither head nor tail match; next check if one of the\n    //   old head/tail items was removed. We first need to generate\n    //   the reverse map of new keys to index (`newKeyToIndexMap`),\n    //   which is done once lazily as a performance optimization,\n    //   since we only hit this case if multiple non-contiguous\n    //   changes were made. Note that for contiguous removal\n    //   anywhere in the list, the head and tails would advance\n    //   from either end and pass each other before we get to this\n    //   case and removals would be handled in the final while loop\n    //   without needing to generate the map.\n    //\n    // * Example below: The key at `oldTail` was removed (no longer\n    //   in the `newKeyToIndexMap`), so remove that part from the\n    //   DOM and advance just the `oldTail` pointer.\n    //\n    //         oldHead v           v oldTail\n    //   oldKeys:  [0, 1, 2, 3, 4, 5, 6]\n    //   newParts: [0,  ,  ,  ,  ,  , 6] <- 5 not in new map: remove\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    5 and advance oldTail\n    //         newHead ^           ^ newTail\n    //\n    // * Once head and tail cannot move, any mismatches are due to\n    //   either new or moved items; if a new key is in the previous\n    //   \"old key to old index\" map, move the old part to the new\n    //   location, otherwise create and insert a new part. Note\n    //   that when moving an old part we null its position in the\n    //   oldParts array if it lies between the head and tail so we\n    //   know to skip it when the pointers get there.\n    //\n    // * Example below: neither head nor tail match, and neither\n    //   were removed; so find the `newHead` key in the\n    //   `oldKeyToIndexMap`, and move that old part's DOM into the\n    //   next head position (before `oldParts[oldHead]`). Last,\n    //   null the part in the `oldPart` array since it was\n    //   somewhere in the remaining oldParts still to be scanned\n    //   (between the head and tail pointers) so that we know to\n    //   skip that old part on future iterations.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2,  ,  ,  ,  , 6] <- stuck: update & move 2\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    into place and advance\n    //                                      newHead\n    //         newHead ^           ^ newTail\n    //\n    // * Note that for moves/insertions like the one above, a part\n    //   inserted at the head pointer is inserted before the\n    //   current `oldParts[oldHead]`, and a part inserted at the\n    //   tail pointer is inserted before `newParts[newTail+1]`. The\n    //   seeming asymmetry lies in the fact that new parts are\n    //   moved into place outside in, so to the right of the head\n    //   pointer are old parts, and to the right of the tail\n    //   pointer are new parts.\n    //\n    // * We always restart back from the top of the algorithm,\n    //   allowing matching and simple updates in place to\n    //   continue...\n    //\n    // * Example below: the head pointers once again match, so\n    //   simply update part 1 and record it in the `newParts`\n    //   array.  Last, advance both head pointers.\n    //\n    //         oldHead v        v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1,  ,  ,  , 6] <- heads matched: update 1\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance both oldHead\n    //                                      & newHead\n    //            newHead ^        ^ newTail\n    //\n    // * As mentioned above, items that were moved as a result of\n    //   being stuck (the final else clause in the code below) are\n    //   marked with null, so we always advance old pointers over\n    //   these so we're comparing the next actual old value on\n    //   either end.\n    //\n    // * Example below: `oldHead` is null (already placed in\n    //   newParts), so advance `oldHead`.\n    //\n    //            oldHead v     v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6] <- old head already used:\n    //   newParts: [0, 2, 1,  ,  ,  , 6]    advance oldHead\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //               newHead ^     ^ newTail\n    //\n    // * Note it's not critical to mark old parts as null when they\n    //   are moved from head to tail or tail to head, since they\n    //   will be outside the pointer range and never visited again.\n    //\n    // * Example below: Here the old tail key matches the new head\n    //   key, so the part at the `oldTail` position and move its\n    //   DOM to the new head position (before `oldParts[oldHead]`).\n    //   Last, advance `oldTail` and `newHead` pointers.\n    //\n    //               oldHead v  v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4,  ,  , 6] <- old tail matches new\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]   head: update & move 4,\n    //                                     advance oldTail & newHead\n    //               newHead ^     ^ newTail\n    //\n    // * Example below: Old and new head keys match, so update the\n    //   old head part in place, and advance the `oldHead` and\n    //   `newHead` pointers.\n    //\n    //               oldHead v oldTail\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3,   ,6] <- heads match: update 3\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]    and advance oldHead &\n    //                                      newHead\n    //                  newHead ^  ^ newTail\n    //\n    // * Once the new or old pointers move past each other then all\n    //   we have left is additions (if old list exhausted) or\n    //   removals (if new list exhausted). Those are handled in the\n    //   final while loops at the end.\n    //\n    // * Example below: `oldHead` exceeded `oldTail`, so we're done\n    //   with the main loop.  Create the remaining part and insert\n    //   it at the new head position, and the update is complete.\n    //\n    //                   (oldHead > oldTail)\n    //   oldKeys:  [0, 1, -, 3, 4, 5, 6]\n    //   newParts: [0, 2, 1, 4, 3, 7 ,6] <- create and insert 7\n    //   newKeys:  [0, 2, 1, 4, 3, 7, 6]\n    //                     newHead ^ newTail\n    //\n    // * Note that the order of the if/else clauses is not\n    //   important to the algorithm, as long as the null checks\n    //   come first (to ensure we're always working on valid old\n    //   parts) and that the final else clause comes last (since\n    //   that's where the expensive moves occur). The order of\n    //   remaining clauses is is just a simple guess at which cases\n    //   will be most common.\n    //\n    // * Note, we could calculate the longest\n    //   increasing subsequence (LIS) of old items in new position,\n    //   and only move those not in the LIS set. However that costs\n    //   O(nlogn) time and adds a bit more code, and only helps\n    //   make rare types of mutations require fewer moves. The\n    //   above handles removes, adds, reversal, swaps, and single\n    //   moves of contiguous items in linear time, in the minimum\n    //   number of moves. As the number of multiple moves where LIS\n    //   might help approaches a random shuffle, the LIS\n    //   optimization becomes less helpful, so it seems not worth\n    //   the code at this point. Could reconsider if a compelling\n    //   case arises.\n\n    while (oldHead <= oldTail && newHead <= newTail) {\n      if (oldParts[oldHead] === null) {\n        // `null` means old part at head has already been used\n        // below; skip\n        oldHead++;\n      } else if (oldParts[oldTail] === null) {\n        // `null` means old part at tail has already been used\n        // below; skip\n        oldTail--;\n      } else if (oldKeys[oldHead] === newKeys[newHead]) {\n        // Old head matches new head; update in place\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newHead]\n        );\n        oldHead++;\n        newHead++;\n      } else if (oldKeys[oldTail] === newKeys[newTail]) {\n        // Old tail matches new tail; update in place\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newTail]\n        );\n        oldTail--;\n        newTail--;\n      } else if (oldKeys[oldHead] === newKeys[newTail]) {\n        // Old head matches new tail; update and move to new tail\n        newParts[newTail] = setChildPartValue(\n          oldParts[oldHead]!,\n          newValues[newTail]\n        );\n        insertPart(containerPart, newParts[newTail + 1], oldParts[oldHead]!);\n        oldHead++;\n        newTail--;\n      } else if (oldKeys[oldTail] === newKeys[newHead]) {\n        // Old tail matches new head; update and move to new head\n        newParts[newHead] = setChildPartValue(\n          oldParts[oldTail]!,\n          newValues[newHead]\n        );\n        insertPart(containerPart, oldParts[oldHead]!, oldParts[oldTail]!);\n        oldTail--;\n        newHead++;\n      } else {\n        if (newKeyToIndexMap === undefined) {\n          // Lazily generate key-to-index maps, used for removals &\n          // moves below\n          newKeyToIndexMap = generateMap(newKeys, newHead, newTail);\n          oldKeyToIndexMap = generateMap(oldKeys, oldHead, oldTail);\n        }\n        if (!newKeyToIndexMap.has(oldKeys[oldHead])) {\n          // Old head is no longer in new list; remove\n          removePart(oldParts[oldHead]!);\n          oldHead++;\n        } else if (!newKeyToIndexMap.has(oldKeys[oldTail])) {\n          // Old tail is no longer in new list; remove\n          removePart(oldParts[oldTail]!);\n          oldTail--;\n        } else {\n          // Any mismatches at this point are due to additions or\n          // moves; see if we have an old part we can reuse and move\n          // into place\n          const oldIndex = oldKeyToIndexMap.get(newKeys[newHead]);\n          const oldPart = oldIndex !== undefined ? oldParts[oldIndex] : null;\n          if (oldPart === null) {\n            // No old part for this value; create a new one and\n            // insert it\n            const newPart = insertPart(containerPart, oldParts[oldHead]!);\n            setChildPartValue(newPart, newValues[newHead]);\n            newParts[newHead] = newPart;\n          } else {\n            // Reuse old part\n            newParts[newHead] = setChildPartValue(oldPart, newValues[newHead]);\n            insertPart(containerPart, oldParts[oldHead]!, oldPart);\n            // This marks the old part as having been used, so that\n            // it will be skipped in the first two checks above\n            oldParts[oldIndex as number] = null;\n          }\n          newHead++;\n        }\n      }\n    }\n    // Add parts for any remaining new values\n    while (newHead <= newTail) {\n      // For all remaining additions, we insert before last new\n      // tail, since old pointers are no longer valid\n      const newPart = insertPart(containerPart, newParts[newTail + 1]);\n      setChildPartValue(newPart, newValues[newHead]);\n      newParts[newHead++] = newPart;\n    }\n    // Remove any remaining unused old parts\n    while (oldHead <= oldTail) {\n      const oldPart = oldParts[oldHead++];\n      if (oldPart !== null) {\n        removePart(oldPart);\n      }\n    }\n\n    // Save order of new parts for next round\n    this._itemKeys = newKeys;\n    // Directly set part value, bypassing it's dirty-checking\n    setCommittedValue(containerPart, newParts);\n    return noChange;\n  }\n}\n\nexport interface RepeatDirectiveFn {\n  <T>(\n    items: Iterable<T>,\n    keyFnOrTemplate: KeyFn<T> | ItemTemplate<T>,\n    template?: ItemTemplate<T>\n  ): unknown;\n  <T>(items: Iterable<T>, template: ItemTemplate<T>): unknown;\n  <T>(\n    items: Iterable<T>,\n    keyFn: KeyFn<T> | ItemTemplate<T>,\n    template: ItemTemplate<T>\n  ): unknown;\n}\n\n/**\n * A directive that repeats a series of values (usually `TemplateResults`)\n * generated from an iterable, and updates those items efficiently when the\n * iterable changes based on user-provided `keys` associated with each item.\n *\n * Note that if a `keyFn` is provided, strict key-to-DOM mapping is maintained,\n * meaning previous DOM for a given key is moved into the new position if\n * needed, and DOM will never be reused with values for different keys (new DOM\n * will always be created for new keys). This is generally the most efficient\n * way to use `repeat` since it performs minimum unnecessary work for insertions\n * and removals.\n *\n * The `keyFn` takes two parameters, the item and its index, and returns a unique key value.\n *\n * ```js\n * html`\n *   <ol>\n *     ${repeat(this.items, (item) => item.id, (item, index) => {\n *       return html`<li>${index}: ${item.name}</li>`;\n *     })}\n *   </ol>\n * `\n * ```\n *\n * **Important**: If providing a `keyFn`, keys *must* be unique for all items in a\n * given call to `repeat`. The behavior when two or more items have the same key\n * is undefined.\n *\n * If no `keyFn` is provided, this directive will perform similar to mapping\n * items to values, and DOM will be reused against potentially different items.\n */\nexport const repeat = directive(RepeatDirective) as RepeatDirectiveFn;\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RepeatDirective};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}