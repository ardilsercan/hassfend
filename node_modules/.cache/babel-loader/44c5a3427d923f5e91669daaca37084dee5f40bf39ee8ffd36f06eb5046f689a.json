{"ast":null,"code":"import { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nconst struct = assign(baseLovelaceCardConfig, object({\n  entity: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  attribute: optional(string()),\n  unit: optional(string()),\n  theme: optional(string()),\n  state_color: optional(boolean()),\n  footer: optional(headerFooterConfigStructs)\n}));\nconst SCHEMA = [{\n  name: \"entity\",\n  required: true,\n  selector: {\n    entity: {}\n  }\n}, {\n  type: \"grid\",\n  name: \"\",\n  schema: [{\n    name: \"name\",\n    selector: {\n      text: {}\n    }\n  }, {\n    name: \"icon\",\n    selector: {\n      icon: {}\n    },\n    context: {\n      icon_entity: \"entity\"\n    }\n  }, {\n    name: \"attribute\",\n    selector: {\n      attribute: {}\n    },\n    context: {\n      filter_entity: \"entity\"\n    }\n  }, {\n    name: \"unit\",\n    selector: {\n      text: {}\n    }\n  }, {\n    name: \"theme\",\n    selector: {\n      theme: {}\n    }\n  }, {\n    name: \"state_color\",\n    selector: {\n      boolean: {}\n    }\n  }]\n}];\nconst entityCardConfigForm = {\n  schema: SCHEMA,\n  assertConfig: config => assert(config, struct),\n  computeLabel: (schema, localize) => {\n    if (schema.name === \"theme\") {\n      return `${localize(\"ui.panel.lovelace.editor.card.generic.theme\")} (${localize(\"ui.panel.lovelace.editor.card.config.optional\")})`;\n    }\n    return localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\n  }\n};\nexport default entityCardConfigForm;","map":{"version":3,"names":["assert","assign","boolean","object","optional","string","headerFooterConfigStructs","baseLovelaceCardConfig","struct","entity","name","icon","attribute","unit","theme","state_color","footer","SCHEMA","required","selector","type","schema","text","context","icon_entity","filter_entity","entityCardConfigForm","assertConfig","config","computeLabel","localize"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/editor/config-elements/hui-entity-card-editor.ts"],"sourcesContent":["import { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { HaFormSchema } from \"../../../../components/ha-form/types\";\nimport { EntityCardConfig } from \"../../cards/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport { LovelaceConfigForm } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst struct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    attribute: optional(string()),\n    unit: optional(string()),\n    theme: optional(string()),\n    state_color: optional(boolean()),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\nconst SCHEMA = [\n  { name: \"entity\", required: true, selector: { entity: {} } },\n  {\n    type: \"grid\",\n    name: \"\",\n    schema: [\n      { name: \"name\", selector: { text: {} } },\n      {\n        name: \"icon\",\n        selector: {\n          icon: {},\n        },\n        context: {\n          icon_entity: \"entity\",\n        },\n      },\n      {\n        name: \"attribute\",\n        selector: {\n          attribute: {},\n        },\n        context: {\n          filter_entity: \"entity\",\n        },\n      },\n      { name: \"unit\", selector: { text: {} } },\n      { name: \"theme\", selector: { theme: {} } },\n      { name: \"state_color\", selector: { boolean: {} } },\n    ],\n  },\n] as HaFormSchema[];\n\nconst entityCardConfigForm: LovelaceConfigForm = {\n  schema: SCHEMA,\n  assertConfig: (config: EntityCardConfig) => assert(config, struct),\n  computeLabel: (schema: HaFormSchema, localize: LocalizeFunc) => {\n    if (schema.name === \"theme\") {\n      return `${localize(\n        \"ui.panel.lovelace.editor.card.generic.theme\"\n      )} (${localize(\"ui.panel.lovelace.editor.card.config.optional\")})`;\n    }\n    return localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\n  },\n};\n\nexport default entityCardConfigForm;\n"],"mappings":"AAAA,SAASA,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,aAAa;AAI/E,SAASC,yBAAyB,QAAQ,6BAA6B;AAEvE,SAASC,sBAAsB,QAAQ,6BAA6B;AAEpE,MAAMC,MAAM,GAAGP,MAAM,CACnBM,sBAAsB,EACtBJ,MAAM,CAAC;EACLM,MAAM,EAAEL,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BK,IAAI,EAAEN,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACxBM,IAAI,EAAEP,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACxBO,SAAS,EAAER,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EAC7BQ,IAAI,EAAET,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACxBS,KAAK,EAAEV,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACzBU,WAAW,EAAEX,QAAQ,CAACF,OAAO,CAAC,CAAC,CAAC;EAChCc,MAAM,EAAEZ,QAAQ,CAACE,yBAAyB;AAC5C,CAAC,CACH,CAAC;AAED,MAAMW,MAAM,GAAG,CACb;EAAEP,IAAI,EAAE,QAAQ;EAAEQ,QAAQ,EAAE,IAAI;EAAEC,QAAQ,EAAE;IAAEV,MAAM,EAAE,CAAC;EAAE;AAAE,CAAC,EAC5D;EACEW,IAAI,EAAE,MAAM;EACZV,IAAI,EAAE,EAAE;EACRW,MAAM,EAAE,CACN;IAAEX,IAAI,EAAE,MAAM;IAAES,QAAQ,EAAE;MAAEG,IAAI,EAAE,CAAC;IAAE;EAAE,CAAC,EACxC;IACEZ,IAAI,EAAE,MAAM;IACZS,QAAQ,EAAE;MACRR,IAAI,EAAE,CAAC;IACT,CAAC;IACDY,OAAO,EAAE;MACPC,WAAW,EAAE;IACf;EACF,CAAC,EACD;IACEd,IAAI,EAAE,WAAW;IACjBS,QAAQ,EAAE;MACRP,SAAS,EAAE,CAAC;IACd,CAAC;IACDW,OAAO,EAAE;MACPE,aAAa,EAAE;IACjB;EACF,CAAC,EACD;IAAEf,IAAI,EAAE,MAAM;IAAES,QAAQ,EAAE;MAAEG,IAAI,EAAE,CAAC;IAAE;EAAE,CAAC,EACxC;IAAEZ,IAAI,EAAE,OAAO;IAAES,QAAQ,EAAE;MAAEL,KAAK,EAAE,CAAC;IAAE;EAAE,CAAC,EAC1C;IAAEJ,IAAI,EAAE,aAAa;IAAES,QAAQ,EAAE;MAAEjB,OAAO,EAAE,CAAC;IAAE;EAAE,CAAC;AAEtD,CAAC,CACgB;AAEnB,MAAMwB,oBAAwC,GAAG;EAC/CL,MAAM,EAAEJ,MAAM;EACdU,YAAY,EAAGC,MAAwB,IAAK5B,MAAM,CAAC4B,MAAM,EAAEpB,MAAM,CAAC;EAClEqB,YAAY,EAAEA,CAACR,MAAoB,EAAES,QAAsB,KAAK;IAC9D,IAAIT,MAAM,CAACX,IAAI,KAAK,OAAO,EAAE;MAC3B,OAAQ,GAAEoB,QAAQ,CAChB,6CACF,CAAE,KAAIA,QAAQ,CAAC,+CAA+C,CAAE,GAAE;IACpE;IACA,OAAOA,QAAQ,CAAE,yCAAwCT,MAAM,CAACX,IAAK,EAAC,CAAC;EACzE;AACF,CAAC;AAED,eAAegB,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}