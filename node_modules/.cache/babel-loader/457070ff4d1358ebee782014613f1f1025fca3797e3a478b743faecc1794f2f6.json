{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { afterNextRender } from \"../common/util/render-status\";\nimport { getValueInPercentage, normalize } from \"../util/calculate\";\nconst getAngle = (value, min, max) => {\n  const percentage = getValueInPercentage(normalize(value, min, max), min, max);\n  return percentage * 180 / 100;\n};\nexport let HaGauge = _decorate([customElement(\"ha-gauge\")], function (_initialize, _LitElement) {\n  class HaGauge extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaGauge,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"min\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"max\",\n      value() {\n        return 100;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"value\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"formatOptions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"valueText\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"locale\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"needle\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"levels\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_angle\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_updated\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_segment_label\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProperties) {\n        _get(_getPrototypeOf(HaGauge.prototype), \"firstUpdated\", this).call(this, changedProperties);\n        // Wait for the first render for the initial animation to work\n        afterNextRender(() => {\n          this._updated = true;\n          this._angle = getAngle(this.value, this.min, this.max);\n          this._segment_label = this.getSegmentLabel();\n          this._rescale_svg();\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        _get(_getPrototypeOf(HaGauge.prototype), \"updated\", this).call(this, changedProperties);\n        if (!this._updated || !changedProperties.has(\"value\") && !changedProperties.has(\"label\") && !changedProperties.has(\"_segment_label\")) {\n          return;\n        }\n        this._angle = getAngle(this.value, this.min, this.max);\n        this._segment_label = this.getSegmentLabel();\n        this._rescale_svg();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return svg`\n      <svg viewBox=\"-50 -50 100 50\" class=\"gauge\">\n        ${!this.needle || !this.levels ? svg`<path\n          class=\"dial\"\n          d=\"M -40 0 A 40 40 0 0 1 40 0\"\n        ></path>` : \"\"}\n\n        ${this.levels ? this.levels.sort((a, b) => a.level - b.level).map((level, idx) => {\n          let firstPath;\n          if (idx === 0 && level.level !== this.min) {\n            const angle = getAngle(this.min, this.min, this.max);\n            firstPath = svg`<path\n                        stroke=\"var(--info-color)\"\n                        class=\"level\"\n                        d=\"M\n                          ${0 - 40 * Math.cos(angle * Math.PI / 180)}\n                          ${0 - 40 * Math.sin(angle * Math.PI / 180)}\n                         A 40 40 0 0 1 40 0\n                        \"\n                      ></path>`;\n          }\n          const angle = getAngle(level.level, this.min, this.max);\n          return svg`${firstPath}<path\n                      stroke=\"${level.stroke}\"\n                      class=\"level\"\n                      d=\"M\n                        ${0 - 40 * Math.cos(angle * Math.PI / 180)}\n                        ${0 - 40 * Math.sin(angle * Math.PI / 180)}\n                       A 40 40 0 0 1 40 0\n                      \"\n                    ></path>`;\n        }) : \"\"}\n        ${this.needle ? svg`<path\n                class=\"needle\"\n                d=\"M -25 -2.5 L -47.5 0 L -25 2.5 z\"\n                style=${styleMap({\n          transform: `rotate(${this._angle}deg)`\n        })}\n              >\n              ` : svg`<path\n                class=\"value\"\n                d=\"M -40 0 A 40 40 0 1 0 40 0\"\n                style=${styleMap({\n          transform: `rotate(${this._angle}deg)`\n        })}\n              >`}\n        </path>\n      </svg>\n      <svg class=\"text\">\n        <text class=\"value-text\">\n          ${this._segment_label ? this._segment_label : this.valueText || formatNumber(this.value, this.locale, this.formatOptions)}${this._segment_label ? \"\" : this.label === \"%\" ? blankBeforePercent(this.locale) + \"%\" : ` ${this.label}`}\n        </text>\n      </svg>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rescale_svg\",\n      value: function _rescale_svg() {\n        // Set the viewbox of the SVG containing the value to perfectly\n        // fit the text\n        // That way it will auto-scale correctly\n        const svgRoot = this.shadowRoot.querySelector(\".text\");\n        const box = svgRoot.querySelector(\"text\").getBBox();\n        svgRoot.setAttribute(\"viewBox\", `${box.x} ${box.y} ${box.width} ${box.height}`);\n      }\n    }, {\n      kind: \"method\",\n      key: \"getSegmentLabel\",\n      value: function getSegmentLabel() {\n        if (this.levels) {\n          this.levels.sort((a, b) => a.level - b.level);\n          for (let i = this.levels.length - 1; i >= 0; i--) {\n            if (this.value >= this.levels[i].level) {\n              return this.levels[i].label;\n            }\n          }\n        }\n        return \"\";\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        position: relative;\n      }\n      .dial {\n        fill: none;\n        stroke: var(--primary-background-color);\n        stroke-width: 15;\n      }\n      .value {\n        fill: none;\n        stroke-width: 15;\n        stroke: var(--gauge-color);\n        transition: all 1s ease 0s;\n      }\n      .needle {\n        fill: var(--primary-text-color);\n        transition: all 1s ease 0s;\n      }\n      .level {\n        fill: none;\n        stroke-width: 15;\n      }\n      .gauge {\n        display: block;\n      }\n      .text {\n        position: absolute;\n        max-height: 40%;\n        max-width: 55%;\n        left: 50%;\n        bottom: -6%;\n        transform: translate(-50%, 0%);\n      }\n      .value-text {\n        font-size: 50px;\n        fill: var(--primary-text-color);\n        text-anchor: middle;\n        direction: ltr;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","LitElement","svg","customElement","property","state","styleMap","formatNumber","blankBeforePercent","afterNextRender","getValueInPercentage","normalize","getAngle","value","min","max","percentage","HaGauge","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Number","key","attribute","String","Boolean","Array","firstUpdated","changedProperties","_get","_getPrototypeOf","prototype","call","_updated","_angle","_segment_label","getSegmentLabel","_rescale_svg","updated","has","render","needle","levels","sort","a","b","level","map","idx","firstPath","angle","Math","cos","PI","sin","stroke","transform","valueText","locale","formatOptions","label","svgRoot","shadowRoot","querySelector","box","getBBox","setAttribute","x","y","width","height","i","length","static","styles"],"sources":["/workspaces/frontend/src/components/ha-gauge.ts"],"sourcesContent":["import { css, LitElement, PropertyValues, svg, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { afterNextRender } from \"../common/util/render-status\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport { getValueInPercentage, normalize } from \"../util/calculate\";\n\nconst getAngle = (value: number, min: number, max: number) => {\n  const percentage = getValueInPercentage(normalize(value, min, max), min, max);\n  return (percentage * 180) / 100;\n};\n\nexport interface LevelDefinition {\n  level: number;\n  stroke: string;\n  label?: string;\n}\n\n@customElement(\"ha-gauge\")\nexport class HaGauge extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value = 0;\n\n  @property({ attribute: false })\n  public formatOptions?: Intl.NumberFormatOptions;\n\n  @property({ type: String }) public valueText?: string;\n\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property({ type: Boolean }) public needle = false;\n\n  @property({ type: Array }) public levels?: LevelDefinition[];\n\n  @property() public label = \"\";\n\n  @state() private _angle = 0;\n\n  @state() private _updated = false;\n\n  @state() private _segment_label? = \"\";\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    // Wait for the first render for the initial animation to work\n    afterNextRender(() => {\n      this._updated = true;\n      this._angle = getAngle(this.value, this.min, this.max);\n      this._segment_label = this.getSegmentLabel();\n      this._rescale_svg();\n    });\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      !this._updated ||\n      (!changedProperties.has(\"value\") &&\n        !changedProperties.has(\"label\") &&\n        !changedProperties.has(\"_segment_label\"))\n    ) {\n      return;\n    }\n    this._angle = getAngle(this.value, this.min, this.max);\n    this._segment_label = this.getSegmentLabel();\n    this._rescale_svg();\n  }\n\n  protected render() {\n    return svg`\n      <svg viewBox=\"-50 -50 100 50\" class=\"gauge\">\n        ${\n          !this.needle || !this.levels\n            ? svg`<path\n          class=\"dial\"\n          d=\"M -40 0 A 40 40 0 0 1 40 0\"\n        ></path>`\n            : \"\"\n        }\n\n        ${\n          this.levels\n            ? this.levels\n                .sort((a, b) => a.level - b.level)\n                .map((level, idx) => {\n                  let firstPath: TemplateResult | undefined;\n                  if (idx === 0 && level.level !== this.min) {\n                    const angle = getAngle(this.min, this.min, this.max);\n                    firstPath = svg`<path\n                        stroke=\"var(--info-color)\"\n                        class=\"level\"\n                        d=\"M\n                          ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                          ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                         A 40 40 0 0 1 40 0\n                        \"\n                      ></path>`;\n                  }\n                  const angle = getAngle(level.level, this.min, this.max);\n                  return svg`${firstPath}<path\n                      stroke=\"${level.stroke}\"\n                      class=\"level\"\n                      d=\"M\n                        ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                        ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                       A 40 40 0 0 1 40 0\n                      \"\n                    ></path>`;\n                })\n            : \"\"\n        }\n        ${\n          this.needle\n            ? svg`<path\n                class=\"needle\"\n                d=\"M -25 -2.5 L -47.5 0 L -25 2.5 z\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >\n              `\n            : svg`<path\n                class=\"value\"\n                d=\"M -40 0 A 40 40 0 1 0 40 0\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >`\n        }\n        </path>\n      </svg>\n      <svg class=\"text\">\n        <text class=\"value-text\">\n          ${\n            this._segment_label\n              ? this._segment_label\n              : this.valueText ||\n                formatNumber(this.value, this.locale, this.formatOptions)\n          }${\n            this._segment_label\n              ? \"\"\n              : this.label === \"%\"\n                ? blankBeforePercent(this.locale) + \"%\"\n                : ` ${this.label}`\n          }\n        </text>\n      </svg>`;\n  }\n\n  private _rescale_svg() {\n    // Set the viewbox of the SVG containing the value to perfectly\n    // fit the text\n    // That way it will auto-scale correctly\n    const svgRoot = this.shadowRoot!.querySelector(\".text\")!;\n    const box = svgRoot.querySelector(\"text\")!.getBBox()!;\n    svgRoot.setAttribute(\n      \"viewBox\",\n      `${box.x} ${box!.y} ${box.width} ${box.height}`\n    );\n  }\n\n  private getSegmentLabel() {\n    if (this.levels) {\n      this.levels.sort((a, b) => a.level - b.level);\n      for (let i = this.levels.length - 1; i >= 0; i--) {\n        if (this.value >= this.levels[i].level) {\n          return this.levels[i].label;\n        }\n      }\n    }\n    return \"\";\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n      }\n      .dial {\n        fill: none;\n        stroke: var(--primary-background-color);\n        stroke-width: 15;\n      }\n      .value {\n        fill: none;\n        stroke-width: 15;\n        stroke: var(--gauge-color);\n        transition: all 1s ease 0s;\n      }\n      .needle {\n        fill: var(--primary-text-color);\n        transition: all 1s ease 0s;\n      }\n      .level {\n        fill: none;\n        stroke-width: 15;\n      }\n      .gauge {\n        display: block;\n      }\n      .text {\n        position: absolute;\n        max-height: 40%;\n        max-width: 55%;\n        left: 50%;\n        bottom: -6%;\n        transform: translate(-50%, 0%);\n      }\n      .value-text {\n        font-size: 50px;\n        fill: var(--primary-text-color);\n        text-anchor: middle;\n        direction: ltr;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-gauge\": HaGauge;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}