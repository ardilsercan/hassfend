{"ast":null,"code":"'use strict';\n\nvar call = require('../internals/function-call');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar isNullOrUndefined = require('../internals/is-null-or-undefined');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar speciesConstructor = require('../internals/species-constructor');\nvar advanceStringIndex = require('../internals/advance-string-index');\nvar toLength = require('../internals/to-length');\nvar toString = require('../internals/to-string');\nvar getMethod = require('../internals/get-method');\nvar regExpExec = require('../internals/regexp-exec-abstract');\nvar stickyHelpers = require('../internals/regexp-sticky-helpers');\nvar fails = require('../internals/fails');\nvar UNSUPPORTED_Y = stickyHelpers.UNSUPPORTED_Y;\nvar MAX_UINT32 = 0xFFFFFFFF;\nvar min = Math.min;\nvar push = uncurryThis([].push);\nvar stringSlice = uncurryThis(''.slice);\n\n// Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n// Weex JS has frozen built-in prototypes, so use try / catch wrapper\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = !fails(function () {\n  // eslint-disable-next-line regexp/no-empty-group -- required for testing\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () {\n    return originalExec.apply(this, arguments);\n  };\n  var result = 'ab'.split(re);\n  return result.length !== 2 || result[0] !== 'a' || result[1] !== 'b';\n});\nvar BUGGY = 'abbc'.split(/(b)*/)[1] === 'c' ||\n// eslint-disable-next-line regexp/no-empty-group -- required for testing\n'test'.split(/(?:)/, -1).length !== 4 || 'ab'.split(/(?:ab)*/).length !== 2 || '.'.split(/(.?)(.?)/).length !== 4 ||\n// eslint-disable-next-line regexp/no-empty-capturing-group, regexp/no-empty-group -- required for testing\n'.'.split(/()()/).length > 1 || ''.split(/.?/).length;\n\n// @@split logic\nfixRegExpWellKnownSymbolLogic('split', function (SPLIT, nativeSplit, maybeCallNative) {\n  var internalSplit = '0'.split(undefined, 0).length ? function (separator, limit) {\n    return separator === undefined && limit === 0 ? [] : call(nativeSplit, this, separator, limit);\n  } : nativeSplit;\n  return [\n  // `String.prototype.split` method\n  // https://tc39.es/ecma262/#sec-string.prototype.split\n  function split(separator, limit) {\n    var O = requireObjectCoercible(this);\n    var splitter = isNullOrUndefined(separator) ? undefined : getMethod(separator, SPLIT);\n    return splitter ? call(splitter, separator, O, limit) : call(internalSplit, toString(O), separator, limit);\n  },\n  // `RegExp.prototype[@@split]` method\n  // https://tc39.es/ecma262/#sec-regexp.prototype-@@split\n  //\n  // NOTE: This cannot be properly polyfilled in engines that don't support\n  // the 'y' flag.\n  function (string, limit) {\n    var rx = anObject(this);\n    var S = toString(string);\n    if (!BUGGY) {\n      var res = maybeCallNative(internalSplit, rx, S, limit, internalSplit !== nativeSplit);\n      if (res.done) return res.value;\n    }\n    var C = speciesConstructor(rx, RegExp);\n    var unicodeMatching = rx.unicode;\n    var flags = (rx.ignoreCase ? 'i' : '') + (rx.multiline ? 'm' : '') + (rx.unicode ? 'u' : '') + (UNSUPPORTED_Y ? 'g' : 'y');\n    // ^(? + rx + ) is needed, in combination with some S slicing, to\n    // simulate the 'y' flag.\n    var splitter = new C(UNSUPPORTED_Y ? '^(?:' + rx.source + ')' : rx, flags);\n    var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n    if (lim === 0) return [];\n    if (S.length === 0) return regExpExec(splitter, S) === null ? [S] : [];\n    var p = 0;\n    var q = 0;\n    var A = [];\n    while (q < S.length) {\n      splitter.lastIndex = UNSUPPORTED_Y ? 0 : q;\n      var z = regExpExec(splitter, UNSUPPORTED_Y ? stringSlice(S, q) : S);\n      var e;\n      if (z === null || (e = min(toLength(splitter.lastIndex + (UNSUPPORTED_Y ? q : 0)), S.length)) === p) {\n        q = advanceStringIndex(S, q, unicodeMatching);\n      } else {\n        push(A, stringSlice(S, p, q));\n        if (A.length === lim) return A;\n        for (var i = 1; i <= z.length - 1; i++) {\n          push(A, z[i]);\n          if (A.length === lim) return A;\n        }\n        q = p = e;\n      }\n    }\n    push(A, stringSlice(S, p));\n    return A;\n  }];\n}, BUGGY || !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC, UNSUPPORTED_Y);","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}