{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport \"../../../../components/user/ha-user-badge\";\nimport { fetchUsers } from \"../../../../data/user\";\nexport let HuiViewVisibilityEditor = _decorate([customElement(\"hui-view-visibility-editor\")], function (_initialize, _LitElement) {\n  class HuiViewVisibilityEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiViewVisibilityEditor,\n    d: [{\n      kind: \"set\",\n      key: \"config\",\n      value: function config(_config) {\n        this._config = _config;\n        this._visible = this._config.visible === undefined ? true : this._config.visible;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_users\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_visible\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_sortedUsers\",\n      value() {\n        return memoizeOne(users => users.sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language)));\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HuiViewVisibilityEditor.prototype), \"firstUpdated\", this).call(this, changedProps);\n        fetchUsers(this.hass).then(users => {\n          this._users = users.filter(user => !user.system_generated);\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this._users) {\n          return nothing;\n        }\n        return html`\n      <p>\n        ${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.visibility.select_users\")}\n      </p>\n      ${this._sortedUsers(this._users).map(user => html`\n          <mwc-list-item graphic=\"avatar\" hasMeta>\n            <ha-user-badge\n              slot=\"graphic\"\n              .hass=${this.hass}\n              .user=${user}\n            ></ha-user-badge>\n            <span>${user.name}</span>\n            <ha-switch\n              slot=\"meta\"\n              .userId=${user.id}\n              @change=${this.valChange}\n              .checked=${this.checkUser(user.id)}\n            ></ha-switch>\n          </mwc-list-item>\n        `)}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"checkUser\",\n      value: function checkUser(userId) {\n        if (this._visible === undefined) {\n          return true;\n        }\n        if (typeof this._visible === \"boolean\") {\n          return this._visible;\n        }\n        return this._visible.some(u => u.user === userId);\n      }\n    }, {\n      kind: \"method\",\n      key: \"valChange\",\n      value: function valChange(ev) {\n        const userId = ev.currentTarget.userId;\n        const checked = ev.currentTarget.checked;\n        let newVisible = [];\n        if (typeof this._visible === \"boolean\") {\n          const lastValue = this._visible;\n          if (lastValue) {\n            newVisible = this._users.map(u => ({\n              user: u.id\n            }));\n          }\n        } else {\n          newVisible = [...this._visible];\n        }\n        if (checked === true) {\n          const newEntry = {\n            user: userId\n          };\n          newVisible.push(newEntry);\n        } else {\n          newVisible = newVisible.filter(c => c.user !== userId);\n        }\n\n        // this removes users that doesn't exists in system but had view permissions\n        this._visible = newVisible.filter(c => this._users.some(u => u.id === c.user));\n        fireEvent(this, \"view-visibility-changed\", {\n          visible: this._visible\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: block;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","state","memoizeOne","fireEvent","stringCompare","fetchUsers","HuiViewVisibilityEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","value","config","_config","_visible","visible","undefined","decorators","attribute","users","sort","a","b","name","hass","locale","language","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","then","_users","filter","user","system_generated","render","localize","_sortedUsers","map","id","valChange","checkUser","userId","some","u","ev","currentTarget","checked","newVisible","lastValue","newEntry","push","c","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/view-editor/hui-view-visibility-editor.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../common/string/compare\";\nimport { HaSwitch } from \"../../../../components/ha-switch\";\nimport \"../../../../components/user/ha-user-badge\";\nimport {\n  LovelaceViewConfig,\n  ShowViewConfig,\n} from \"../../../../data/lovelace/config/view\";\nimport { User, fetchUsers } from \"../../../../data/user\";\nimport { HomeAssistant } from \"../../../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"view-visibility-changed\": {\n      visible: ShowViewConfig[];\n    };\n  }\n}\n\n@customElement(\"hui-view-visibility-editor\")\nexport class HuiViewVisibilityEditor extends LitElement {\n  set config(config: LovelaceViewConfig) {\n    this._config = config;\n    this._visible =\n      this._config.visible === undefined ? true : this._config.visible;\n  }\n\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config!: LovelaceViewConfig;\n\n  @state() private _users!: User[];\n\n  @state() private _visible!: boolean | ShowViewConfig[];\n\n  private _sortedUsers = memoizeOne((users: User[]) =>\n    users.sort((a, b) =>\n      stringCompare(a.name, b.name, this.hass.locale.language)\n    )\n  );\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    fetchUsers(this.hass).then((users) => {\n      this._users = users.filter((user) => !user.system_generated);\n    });\n  }\n\n  protected render() {\n    if (!this.hass || !this._users) {\n      return nothing;\n    }\n\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_view.visibility.select_users\"\n        )}\n      </p>\n      ${this._sortedUsers(this._users).map(\n        (user) => html`\n          <mwc-list-item graphic=\"avatar\" hasMeta>\n            <ha-user-badge\n              slot=\"graphic\"\n              .hass=${this.hass}\n              .user=${user}\n            ></ha-user-badge>\n            <span>${user.name}</span>\n            <ha-switch\n              slot=\"meta\"\n              .userId=${user.id}\n              @change=${this.valChange}\n              .checked=${this.checkUser(user.id)}\n            ></ha-switch>\n          </mwc-list-item>\n        `\n      )}\n    `;\n  }\n\n  protected checkUser(userId: string): boolean {\n    if (this._visible === undefined) {\n      return true;\n    }\n    if (typeof this._visible === \"boolean\") {\n      return this._visible as boolean;\n    }\n    return (this._visible as ShowViewConfig[]).some((u) => u.user === userId);\n  }\n\n  private valChange(ev: Event): void {\n    const userId = (ev.currentTarget as any).userId;\n    const checked = (ev.currentTarget as HaSwitch).checked;\n\n    let newVisible: ShowViewConfig[] = [];\n\n    if (typeof this._visible === \"boolean\") {\n      const lastValue = this._visible as boolean;\n      if (lastValue) {\n        newVisible = this._users.map((u) => ({\n          user: u.id,\n        }));\n      }\n    } else {\n      newVisible = [...this._visible];\n    }\n\n    if (checked === true) {\n      const newEntry: ShowViewConfig = {\n        user: userId,\n      };\n      newVisible.push(newEntry);\n    } else {\n      newVisible = (newVisible as ShowViewConfig[]).filter(\n        (c) => c.user !== userId\n      );\n    }\n\n    // this removes users that doesn't exists in system but had view permissions\n    this._visible = newVisible.filter((c) =>\n      this._users.some((u) => u.id === c.user)\n    );\n\n    fireEvent(this, \"view-visibility-changed\", { visible: this._visible });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view-visibility-editor\": HuiViewVisibilityEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}