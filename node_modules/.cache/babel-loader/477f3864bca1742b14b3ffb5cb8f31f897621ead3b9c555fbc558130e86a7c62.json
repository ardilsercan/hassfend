{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiMenu = \"M3,6H21V8H3V6M3,11H21V13H3V11M3,16H21V18H3V16Z\";\nconst mdiSwapVertical = \"M9,3L5,7H8V14H10V7H13M16,17V10H14V17H11L15,21L19,17H16Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-attributes\";\nimport \"../../../components/ha-icon-button-group\";\nimport \"../../../components/ha-icon-button-toggle\";\nimport { ValveEntityFeature, computeValvePositionStateDisplay } from \"../../../data/valve\";\nimport \"../../../state-control/valve/ha-state-control-valve-buttons\";\nimport \"../../../state-control/valve/ha-state-control-valve-position\";\nimport \"../../../state-control/valve/ha-state-control-valve-toggle\";\nimport \"../components/ha-more-info-state-header\";\nimport { moreInfoControlStyle } from \"../components/more-info-control-style\";\nlet MoreInfoValve = _decorate([customElement(\"more-info-valve\")], function (_initialize, _LitElement) {\n  class MoreInfoValve extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: MoreInfoValve,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_mode\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"_setMode\",\n      value: function _setMode(ev) {\n        this._mode = ev.currentTarget.mode;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(MoreInfoValve.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"stateObj\") && this.stateObj) {\n          var _changedProps$get;\n          const entityId = this.stateObj.entity_id;\n          const oldEntityId = (_changedProps$get = changedProps.get(\"stateObj\")) === null || _changedProps$get === void 0 ? void 0 : _changedProps$get.entity_id;\n          if (!this._mode || entityId !== oldEntityId) {\n            this._mode = supportsFeature(this.stateObj, ValveEntityFeature.SET_POSITION) ? \"position\" : \"button\";\n          }\n        }\n      }\n    }, {\n      kind: \"get\",\n      key: \"_stateOverride\",\n      value: function _stateOverride() {\n        const stateDisplay = this.hass.formatEntityState(this.stateObj);\n        const positionStateDisplay = computeValvePositionStateDisplay(this.stateObj, this.hass);\n        if (positionStateDisplay) {\n          return `${stateDisplay} ⸱ ${positionStateDisplay}`;\n        }\n        return stateDisplay;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this.stateObj) {\n          return nothing;\n        }\n        const supportsPosition = supportsFeature(this.stateObj, ValveEntityFeature.SET_POSITION);\n        const supportsOpenClose = supportsFeature(this.stateObj, ValveEntityFeature.OPEN) || supportsFeature(this.stateObj, ValveEntityFeature.CLOSE) || supportsFeature(this.stateObj, ValveEntityFeature.STOP);\n        const supportsOpenCloseWithoutStop = supportsFeature(this.stateObj, ValveEntityFeature.OPEN) && supportsFeature(this.stateObj, ValveEntityFeature.CLOSE) && !supportsFeature(this.stateObj, ValveEntityFeature.STOP);\n        return html`\n      <ha-more-info-state-header\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        .stateOverride=${this._stateOverride}\n      ></ha-more-info-state-header>\n      <div class=\"controls\">\n        <div class=\"main-control\">\n          ${this._mode === \"position\" ? html`\n                  ${supportsPosition ? html`\n                        <ha-state-control-valve-position\n                          .stateObj=${this.stateObj}\n                          .hass=${this.hass}\n                        ></ha-state-control-valve-position>\n                      ` : nothing}\n                ` : nothing}\n          ${this._mode === \"button\" ? html`\n                  ${supportsOpenCloseWithoutStop ? html`\n                        <ha-state-control-valve-toggle\n                          .stateObj=${this.stateObj}\n                          .hass=${this.hass}\n                        ></ha-state-control-valve-toggle>\n                      ` : supportsOpenClose ? html`\n                          <ha-state-control-valve-buttons\n                            .stateObj=${this.stateObj}\n                            .hass=${this.hass}\n                          ></ha-state-control-valve-buttons>\n                        ` : nothing}\n                ` : nothing}\n            </div>\n          ${supportsPosition && supportsOpenClose ? html`\n                  <ha-icon-button-group>\n                    <ha-icon-button-toggle\n                      .label=${this.hass.localize(`ui.dialogs.more_info_control.valve.switch_mode.position`)}\n                      .selected=${this._mode === \"position\"}\n                      .path=${mdiMenu}\n                      .mode=${\"position\"}\n                      @click=${this._setMode}\n                    ></ha-icon-button-toggle>\n                    <ha-icon-button-toggle\n                      .label=${this.hass.localize(`ui.dialogs.more_info_control.valve.switch_mode.button`)}\n                      .selected=${this._mode === \"button\"}\n                      .path=${mdiSwapVertical}\n                      .mode=${\"button\"}\n                      @click=${this._setMode}\n                    ></ha-icon-button-toggle>\n                  </ha-icon-button-group>\n                ` : nothing}\n        </div>\n      </div>\n      <ha-attributes\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        extra-filters=\"current_position,current_tilt_position\"\n      ></ha-attributes>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [moreInfoControlStyle, css`\n        .main-control {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .main-control > * {\n          margin: 0 8px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","state","supportsFeature","ValveEntityFeature","computeValvePositionStateDisplay","moreInfoControlStyle","MoreInfoValve","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","_setMode","ev","_mode","currentTarget","mode","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","has","stateObj","_changedProps$get","entityId","entity_id","oldEntityId","get","SET_POSITION","_stateOverride","stateDisplay","hass","formatEntityState","positionStateDisplay","render","supportsPosition","supportsOpenClose","OPEN","CLOSE","STOP","supportsOpenCloseWithoutStop","localize","mdiMenu","mdiSwapVertical","static","styles"],"sources":["/workspaces/frontend/src/dialogs/more-info/controls/more-info-valve.ts"],"sourcesContent":["import { mdiMenu, mdiSwapVertical } from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-attributes\";\nimport \"../../../components/ha-icon-button-group\";\nimport \"../../../components/ha-icon-button-toggle\";\nimport {\n  ValveEntity,\n  ValveEntityFeature,\n  computeValvePositionStateDisplay,\n} from \"../../../data/valve\";\nimport \"../../../state-control/valve/ha-state-control-valve-buttons\";\nimport \"../../../state-control/valve/ha-state-control-valve-position\";\nimport \"../../../state-control/valve/ha-state-control-valve-toggle\";\nimport type { HomeAssistant } from \"../../../types\";\nimport \"../components/ha-more-info-state-header\";\nimport { moreInfoControlStyle } from \"../components/more-info-control-style\";\n\ntype Mode = \"position\" | \"button\";\n\n@customElement(\"more-info-valve\")\nclass MoreInfoValve extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: ValveEntity;\n\n  @state() private _mode?: Mode;\n\n  private _setMode(ev) {\n    this._mode = ev.currentTarget.mode;\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"stateObj\") && this.stateObj) {\n      const entityId = this.stateObj.entity_id;\n      const oldEntityId = changedProps.get(\"stateObj\")?.entity_id;\n      if (!this._mode || entityId !== oldEntityId) {\n        this._mode = supportsFeature(\n          this.stateObj,\n          ValveEntityFeature.SET_POSITION\n        )\n          ? \"position\"\n          : \"button\";\n      }\n    }\n  }\n\n  private get _stateOverride() {\n    const stateDisplay = this.hass.formatEntityState(this.stateObj!);\n\n    const positionStateDisplay = computeValvePositionStateDisplay(\n      this.stateObj!,\n      this.hass\n    );\n\n    if (positionStateDisplay) {\n      return `${stateDisplay} ⸱ ${positionStateDisplay}`;\n    }\n    return stateDisplay;\n  }\n\n  protected render() {\n    if (!this.hass || !this.stateObj) {\n      return nothing;\n    }\n\n    const supportsPosition = supportsFeature(\n      this.stateObj,\n      ValveEntityFeature.SET_POSITION\n    );\n\n    const supportsOpenClose =\n      supportsFeature(this.stateObj, ValveEntityFeature.OPEN) ||\n      supportsFeature(this.stateObj, ValveEntityFeature.CLOSE) ||\n      supportsFeature(this.stateObj, ValveEntityFeature.STOP);\n\n    const supportsOpenCloseWithoutStop =\n      supportsFeature(this.stateObj, ValveEntityFeature.OPEN) &&\n      supportsFeature(this.stateObj, ValveEntityFeature.CLOSE) &&\n      !supportsFeature(this.stateObj, ValveEntityFeature.STOP);\n\n    return html`\n      <ha-more-info-state-header\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        .stateOverride=${this._stateOverride}\n      ></ha-more-info-state-header>\n      <div class=\"controls\">\n        <div class=\"main-control\">\n          ${\n            this._mode === \"position\"\n              ? html`\n                  ${supportsPosition\n                    ? html`\n                        <ha-state-control-valve-position\n                          .stateObj=${this.stateObj}\n                          .hass=${this.hass}\n                        ></ha-state-control-valve-position>\n                      `\n                    : nothing}\n                `\n              : nothing\n          }\n          ${\n            this._mode === \"button\"\n              ? html`\n                  ${supportsOpenCloseWithoutStop\n                    ? html`\n                        <ha-state-control-valve-toggle\n                          .stateObj=${this.stateObj}\n                          .hass=${this.hass}\n                        ></ha-state-control-valve-toggle>\n                      `\n                    : supportsOpenClose\n                      ? html`\n                          <ha-state-control-valve-buttons\n                            .stateObj=${this.stateObj}\n                            .hass=${this.hass}\n                          ></ha-state-control-valve-buttons>\n                        `\n                      : nothing}\n                `\n              : nothing\n          }\n            </div>\n          ${\n            supportsPosition && supportsOpenClose\n              ? html`\n                  <ha-icon-button-group>\n                    <ha-icon-button-toggle\n                      .label=${this.hass.localize(\n                        `ui.dialogs.more_info_control.valve.switch_mode.position`\n                      )}\n                      .selected=${this._mode === \"position\"}\n                      .path=${mdiMenu}\n                      .mode=${\"position\"}\n                      @click=${this._setMode}\n                    ></ha-icon-button-toggle>\n                    <ha-icon-button-toggle\n                      .label=${this.hass.localize(\n                        `ui.dialogs.more_info_control.valve.switch_mode.button`\n                      )}\n                      .selected=${this._mode === \"button\"}\n                      .path=${mdiSwapVertical}\n                      .mode=${\"button\"}\n                      @click=${this._setMode}\n                    ></ha-icon-button-toggle>\n                  </ha-icon-button-group>\n                `\n              : nothing\n          }\n        </div>\n      </div>\n      <ha-attributes\n        .hass=${this.hass}\n        .stateObj=${this.stateObj}\n        extra-filters=\"current_position,current_tilt_position\"\n      ></ha-attributes>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      moreInfoControlStyle,\n      css`\n        .main-control {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .main-control > * {\n          margin: 0 8px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"more-info-valve\": MoreInfoValve;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}