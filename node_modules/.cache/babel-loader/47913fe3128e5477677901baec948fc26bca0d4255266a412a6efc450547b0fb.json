{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\nimport { _$LH } from './lit-html.js';\nconst {\n  _ChildPart: ChildPart\n} = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : node => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2\n};\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult = (value, type) => type === undefined ?\n// This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litType$']) !== undefined : (value === null || value === void 0 ? void 0 : value['_$litType$']) === type;\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = value => {\n  var _a;\n  return ((_a = value === null || value === void 0 ? void 0 : value['_$litType$']) === null || _a === void 0 ? void 0 : _a.h) != null;\n};\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = value =>\n// This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litDirective$']) !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = value =>\n// This property needs to remain unminified.\nvalue === null || value === void 0 ? void 0 : value['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = part => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (containerPart, refPart, part) => {\n  var _a;\n  const container = wrap(containerPart._$startNode).parentNode;\n  const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n  } else {\n    const endNode = wrap(part._$endNode).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start = part._$startNode;\n      while (start !== endNode) {\n        const n = wrap(start).nextSibling;\n        wrap(container).insertBefore(start, refNode);\n        start = n;\n      }\n    }\n  }\n  return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = (part, value, directiveParent = part) => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part, value = RESET_VALUE) => part._$committedValue = value;\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = part => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = part => {\n  var _a;\n  (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n  let start = part._$startNode;\n  const end = wrap(part._$endNode).nextSibling;\n  while (start !== end) {\n    const n = wrap(start).nextSibling;\n    wrap(start).remove();\n    start = n;\n  }\n};\nexport const clearPart = part => {\n  part._$clear();\n};","map":{"version":3,"names":["_$LH","_ChildPart","ChildPart","ENABLE_SHADYDOM_NOPATCH","wrap","_a","window","ShadyDOM","inUse","_b","noPatch","node","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isCompiledTemplateResult","h","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","call","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"sources":["../src/directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  _$LH,\n  Part,\n  DirectiveParent,\n  TemplateResult,\n  CompiledTemplateResult,\n} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  (typeof TemplateResultType)[keyof typeof TemplateResultType];\n\ntype IsTemplateResult = {\n  (val: unknown): val is TemplateResult | CompiledTemplateResult;\n  <T extends TemplateResultType>(\n    val: unknown,\n    type: T\n  ): val is TemplateResult<T>;\n};\n\n/**\n * Tests if a value is a TemplateResult or a CompiledTemplateResult.\n */\nexport const isTemplateResult: IsTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a CompiledTemplateResult.\n */\nexport const isCompiledTemplateResult = (\n  value: unknown\n): value is CompiledTemplateResult => {\n  return (value as CompiledTemplateResult)?.['_$litType$']?.h != null;\n};\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinel value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being committed.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}