{"ast":null,"code":"import \"core-js/modules/web.url.can-parse\";\nimport { fromError } from \"stacktrace-js\";\nimport { UAParser } from \"ua-parser-js\";\n\n// URL paths to remove from filenames and max stack trace lines for brevity\nconst REMOVAL_PATHS = /^\\/(?:home-assistant\\/frontend\\/[^/]+|unknown|\\/{2}\\.)\\//;\nconst MAX_STACK_FRAMES = 10;\nexport const createLogMessage = async (error, intro, messageFallback, stackFallback) => {\n  const lines = [];\n  // Append the originating browser/OS to any intro for easier identification\n  if (intro) {\n    const parser = new UAParser();\n    const {\n      name: browserName = \"unknown browser\",\n      version: browserVersion = \"\"\n    } = parser.getBrowser();\n    const {\n      name: osName = \"unknown OS\",\n      version: osVersion = \"\"\n    } = parser.getOS();\n    const browser = `${browserName} ${browserVersion}`.trim();\n    const os = `${osName} ${osVersion}`.trim();\n    lines.push(`${intro} from ${browser} on ${os}`);\n  }\n  // In most cases, an Error instance will be thrown, which can have many details to log:\n  // - a standard string coercion to \"ErrorType: Message\"\n  // - a stack added by browsers (which must be converted to original source)\n  // - an optional cause chain\n  // - a possible list of aggregated errors\n  if (error instanceof Error) {\n    lines.push(error.toString() || messageFallback);\n    const stackLines = (await fromError(error)).slice(0, MAX_STACK_FRAMES).map(frame => {\n      var _frame$fileName;\n      (_frame$fileName = frame.fileName) !== null && _frame$fileName !== void 0 ? _frame$fileName : frame.fileName = \"\";\n      if (URL.canParse(frame.fileName)) {\n        frame.fileName = new URL(frame.fileName).pathname;\n      }\n      frame.fileName = frame.fileName.replace(REMOVAL_PATHS, \"\");\n      return frame.toString();\n    });\n    lines.push(...(stackLines.length > 0 ? stackLines : [stackFallback]));\n    // @ts-expect-error Requires library bump to ES2022\n    if (error.cause) {\n      // @ts-expect-error Requires library bump to ES2022\n      lines.push(`Caused by: ${await createLogMessage(error.cause)}`);\n    }\n    if (error instanceof AggregateError) {\n      const subMessageEntries = error.errors.map(async (e, i) => [i, await createLogMessage(e)]);\n      for await (const [i, m] of subMessageEntries) {\n        lines.push(`Part ${i + 1} of ${error.errors.length}: ${m}`);\n      }\n    }\n  } else {\n    // The error could be anything, so just stringify it and log with fallbacks\n    const errorString = JSON.stringify(error, null, 2);\n    lines.push(messageFallback, errorString === messageFallback ? \"\" : errorString, stackFallback);\n  }\n  return lines.filter(Boolean).join(\"\\n\");\n};","map":{"version":3,"names":["fromError","UAParser","REMOVAL_PATHS","MAX_STACK_FRAMES","createLogMessage","error","intro","messageFallback","stackFallback","lines","parser","name","browserName","version","browserVersion","getBrowser","osName","osVersion","getOS","browser","trim","os","push","Error","toString","stackLines","slice","map","frame","_frame$fileName","fileName","URL","canParse","pathname","replace","length","cause","AggregateError","subMessageEntries","errors","e","i","m","errorString","JSON","stringify","filter","Boolean","join"],"sources":["/Users/sercanardil/Desktop/frontend/src/resources/log-message.ts"],"sourcesContent":["import \"core-js/modules/web.url.can-parse\";\nimport { fromError } from \"stacktrace-js\";\nimport { UAParser } from \"ua-parser-js\";\n\n// URL paths to remove from filenames and max stack trace lines for brevity\nconst REMOVAL_PATHS =\n  /^\\/(?:home-assistant\\/frontend\\/[^/]+|unknown|\\/{2}\\.)\\//;\nconst MAX_STACK_FRAMES = 10;\n\nexport const createLogMessage = async (\n  error: unknown,\n  intro?: string,\n  messageFallback?: string,\n  stackFallback?: string\n) => {\n  const lines: (string | undefined)[] = [];\n  // Append the originating browser/OS to any intro for easier identification\n  if (intro) {\n    const parser = new UAParser();\n    const {\n      name: browserName = \"unknown browser\",\n      version: browserVersion = \"\",\n    } = parser.getBrowser();\n    const { name: osName = \"unknown OS\", version: osVersion = \"\" } =\n      parser.getOS();\n    const browser = `${browserName} ${browserVersion}`.trim();\n    const os = `${osName} ${osVersion}`.trim();\n    lines.push(`${intro} from ${browser} on ${os}`);\n  }\n  // In most cases, an Error instance will be thrown, which can have many details to log:\n  // - a standard string coercion to \"ErrorType: Message\"\n  // - a stack added by browsers (which must be converted to original source)\n  // - an optional cause chain\n  // - a possible list of aggregated errors\n  if (error instanceof Error) {\n    lines.push(error.toString() || messageFallback);\n    const stackLines = (await fromError(error))\n      .slice(0, MAX_STACK_FRAMES)\n      .map((frame) => {\n        frame.fileName ??= \"\";\n        if (URL.canParse(frame.fileName)) {\n          frame.fileName = new URL(frame.fileName).pathname;\n        }\n        frame.fileName = frame.fileName.replace(REMOVAL_PATHS, \"\");\n        return frame.toString();\n      });\n    lines.push(...(stackLines.length > 0 ? stackLines : [stackFallback]));\n    // @ts-expect-error Requires library bump to ES2022\n    if (error.cause) {\n      // @ts-expect-error Requires library bump to ES2022\n      lines.push(`Caused by: ${await createLogMessage(error.cause)}`);\n    }\n    if (error instanceof AggregateError) {\n      const subMessageEntries = error.errors.map(\n        async (e, i) => [i, await createLogMessage(e)] as const\n      );\n      for await (const [i, m] of subMessageEntries) {\n        lines.push(`Part ${i + 1} of ${error.errors.length}: ${m}`);\n      }\n    }\n  } else {\n    // The error could be anything, so just stringify it and log with fallbacks\n    const errorString = JSON.stringify(error, null, 2);\n    lines.push(\n      messageFallback,\n      errorString === messageFallback ? \"\" : errorString,\n      stackFallback\n    );\n  }\n  return lines.filter(Boolean).join(\"\\n\");\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}