{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-button/mwc-button\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-network\";\nimport \"../../../components/ha-settings-row\";\nimport { fetchNetworkInfo } from \"../../../data/hassio/network\";\nimport { getNetworkConfig, setNetworkConfig } from \"../../../data/network\";\nimport { haStyle } from \"../../../resources/styles\";\nlet ConfigNetwork = _decorate([customElement(\"ha-config-network\")], function (_initialize, _LitElement) {\n  class ConfigNetwork extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: ConfigNetwork,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_networkConfig\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass$userData;\n        if (!((_this$hass$userData = this.hass.userData) !== null && _this$hass$userData !== void 0 && _this$hass$userData.showAdvanced) || !isComponentLoaded(this.hass, \"network\")) {\n          return nothing;\n        }\n        return html`\n      <ha-card\n        outlined\n        header=${this.hass.localize(\"ui.panel.config.network.network_adapter\")}\n      >\n        <div class=\"card-content\">\n          ${this._error ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              ` : \"\"}\n          <p>\n            ${this.hass.localize(\"ui.panel.config.network.network_adapter_info\")}\n          </p>\n          <ha-network\n            @network-config-changed=${this._configChanged}\n            .hass=${this.hass}\n            .networkConfig=${this._networkConfig}\n          ></ha-network>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\"ui.panel.config.core.section.core.core_config.save_button\")}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(ConfigNetwork.prototype), \"firstUpdated\", this).call(this, changedProps);\n        if (isComponentLoaded(this.hass, \"network\")) {\n          this._load();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_load\",\n      value: async function _load() {\n        this._error = undefined;\n        try {\n          const coreNetwork = await getNetworkConfig(this.hass);\n          if (isComponentLoaded(this.hass, \"hassio\")) {\n            const supervisorNetwork = await fetchNetworkInfo(this.hass);\n            const interfaces = new Set(supervisorNetwork.interfaces.map(int => int.interface));\n            if (interfaces.size) {\n              coreNetwork.adapters = coreNetwork.adapters.filter(adapter => interfaces.has(adapter.name));\n            }\n          }\n          this._networkConfig = coreNetwork;\n        } catch (err) {\n          this._error = err.message || err;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: async function _save() {\n        this._error = undefined;\n        try {\n          var _this$_networkConfig;\n          await setNetworkConfig(this.hass, ((_this$_networkConfig = this._networkConfig) === null || _this$_networkConfig === void 0 ? void 0 : _this$_networkConfig.configured_adapters) || []);\n        } catch (err) {\n          this._error = err.message || err;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_configChanged\",\n      value: function _configChanged(event) {\n        this._networkConfig = {\n          ...this._networkConfig,\n          configured_adapters: event.detail.configured_adapters\n        };\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      ` // row-reverse so we tab first to \"save\"\n        ];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","isComponentLoaded","fetchNetworkInfo","getNetworkConfig","setNetworkConfig","haStyle","ConfigNetwork","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","render","_this$hass$userData","hass","userData","showAdvanced","localize","_error","message","code","_configChanged","_networkConfig","_save","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","_load","undefined","coreNetwork","supervisorNetwork","interfaces","Set","map","int","interface","size","adapters","filter","adapter","has","name","err","_this$_networkConfig","configured_adapters","event","detail","static","styles"],"sources":["/workspaces/frontend/src/panels/config/network/ha-config-network.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-network\";\nimport \"../../../components/ha-settings-row\";\nimport { fetchNetworkInfo } from \"../../../data/hassio/network\";\nimport {\n  getNetworkConfig,\n  NetworkConfig,\n  setNetworkConfig,\n} from \"../../../data/network\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\n@customElement(\"ha-config-network\")\nclass ConfigNetwork extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _networkConfig?: NetworkConfig;\n\n  @state() private _error?: { code: string; message: string };\n\n  protected render() {\n    if (\n      !this.hass.userData?.showAdvanced ||\n      !isComponentLoaded(this.hass, \"network\")\n    ) {\n      return nothing;\n    }\n\n    return html`\n      <ha-card\n        outlined\n        header=${this.hass.localize(\"ui.panel.config.network.network_adapter\")}\n      >\n        <div class=\"card-content\">\n          ${this._error\n            ? html`\n                <ha-alert alert-type=\"error\"\n                  >${this._error.message || this._error.code}</ha-alert\n                >\n              `\n            : \"\"}\n          <p>\n            ${this.hass.localize(\n              \"ui.panel.config.network.network_adapter_info\"\n            )}\n          </p>\n          <ha-network\n            @network-config-changed=${this._configChanged}\n            .hass=${this.hass}\n            .networkConfig=${this._networkConfig}\n          ></ha-network>\n        </div>\n        <div class=\"card-actions\">\n          <mwc-button @click=${this._save}>\n            ${this.hass.localize(\n              \"ui.panel.config.core.section.core.core_config.save_button\"\n            )}\n          </mwc-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    if (isComponentLoaded(this.hass, \"network\")) {\n      this._load();\n    }\n  }\n\n  private async _load() {\n    this._error = undefined;\n    try {\n      const coreNetwork = await getNetworkConfig(this.hass);\n      if (isComponentLoaded(this.hass, \"hassio\")) {\n        const supervisorNetwork = await fetchNetworkInfo(this.hass);\n        const interfaces = new Set(\n          supervisorNetwork.interfaces.map((int) => int.interface)\n        );\n        if (interfaces.size) {\n          coreNetwork.adapters = coreNetwork.adapters.filter((adapter) =>\n            interfaces.has(adapter.name)\n          );\n        }\n      }\n      this._networkConfig = coreNetwork;\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _save() {\n    this._error = undefined;\n    try {\n      await setNetworkConfig(\n        this.hass,\n        this._networkConfig?.configured_adapters || []\n      );\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private _configChanged(event: CustomEvent): void {\n    this._networkConfig = {\n      ...this._networkConfig!,\n      configured_adapters: event.detail.configured_adapters,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        .card-actions {\n          display: flex;\n          flex-direction: row-reverse;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `, // row-reverse so we tab first to \"save\"\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-network\": ConfigNetwork;\n  }\n}\n"],"mappings":";;;AAAA,OAAO,iCAAiC;AACxC,SACEA,GAAG,EAEHC,IAAI,EACJC,UAAU,EAEVC,OAAO,QACF,KAAK;AACZ,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,iBAAiB,QAAQ,4CAA4C;AAC9E,OAAO,8BAA8B;AACrC,OAAO,6BAA6B;AACpC,OAAO,iCAAiC;AACxC,OAAO,gCAAgC;AACvC,OAAO,qCAAqC;AAC5C,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SACEC,gBAAgB,EAEhBC,gBAAgB,QACX,uBAAuB;AAC9B,SAASC,OAAO,QAAQ,2BAA2B;AAAC,IAI9CC,aAAa,GAAAC,SAAA,EADlBT,aAAa,CAAC,mBAAmB,CAAC,aAAAU,WAAA,EAAAC,WAAA;EAAnC,MACMH,aAAa,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAsHvC;EAAC;IAAAI,CAAA,EAtHKN,aAAa;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAChBhB,QAAQ,CAAC;QAAEiB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9Bf,KAAK,CAAC,CAAC;MAAAiB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEPf,KAAK,CAAC,CAAC;MAAAiB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAER,SAAAC,OAAA,EAAmB;QAAA,IAAAC,mBAAA;QACjB,IACE,GAAAA,mBAAA,GAAC,IAAI,CAACC,IAAI,CAACC,QAAQ,cAAAF,mBAAA,eAAlBA,mBAAA,CAAoBG,YAAY,KACjC,CAACtB,iBAAiB,CAAC,IAAI,CAACoB,IAAI,EAAE,SAAS,CAAC,EACxC;UACA,OAAOxB,OAAO;QAChB;QAEA,OAAOF,IAAK;AAChB;AACA;AACA,iBAAiB,IAAI,CAAC0B,IAAI,CAACG,QAAQ,CAAC,yCAAyC,CAAE;AAC/E;AACA;AACA,YAAY,IAAI,CAACC,MAAM,GACT9B,IAAK;AACnB;AACA,qBAAqB,IAAI,CAAC8B,MAAM,CAACC,OAAO,IAAI,IAAI,CAACD,MAAM,CAACE,IAAK;AAC7D;AACA,eAAe,GACD,EAAG;AACjB;AACA,cAAc,IAAI,CAACN,IAAI,CAACG,QAAQ,CAClB,8CACF,CAAE;AACd;AACA;AACA,sCAAsC,IAAI,CAACI,cAAe;AAC1D,oBAAoB,IAAI,CAACP,IAAK;AAC9B,6BAA6B,IAAI,CAACQ,cAAe;AACjD;AACA;AACA;AACA,+BAA+B,IAAI,CAACC,KAAM;AAC1C,cAAc,IAAI,CAACT,IAAI,CAACG,QAAQ,CAClB,2DACF,CAAE;AACd;AACA;AACA;AACA,KAAK;MACH;IAAC;MAAAV,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAa,aAAuBC,YAA4B,EAAE;QACnDC,IAAA,CAAAC,eAAA,CAnDE5B,aAAa,CAAA6B,SAAA,yBAAAC,IAAA,OAmDIJ,YAAY;QAC/B,IAAI/B,iBAAiB,CAAC,IAAI,CAACoB,IAAI,EAAE,SAAS,CAAC,EAAE;UAC3C,IAAI,CAACgB,KAAK,CAAC,CAAC;QACd;MACF;IAAC;MAAAvB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAmB,MAAA,EAAsB;QACpB,IAAI,CAACZ,MAAM,GAAGa,SAAS;QACvB,IAAI;UACF,MAAMC,WAAW,GAAG,MAAMpC,gBAAgB,CAAC,IAAI,CAACkB,IAAI,CAAC;UACrD,IAAIpB,iBAAiB,CAAC,IAAI,CAACoB,IAAI,EAAE,QAAQ,CAAC,EAAE;YAC1C,MAAMmB,iBAAiB,GAAG,MAAMtC,gBAAgB,CAAC,IAAI,CAACmB,IAAI,CAAC;YAC3D,MAAMoB,UAAU,GAAG,IAAIC,GAAG,CACxBF,iBAAiB,CAACC,UAAU,CAACE,GAAG,CAAEC,GAAG,IAAKA,GAAG,CAACC,SAAS,CACzD,CAAC;YACD,IAAIJ,UAAU,CAACK,IAAI,EAAE;cACnBP,WAAW,CAACQ,QAAQ,GAAGR,WAAW,CAACQ,QAAQ,CAACC,MAAM,CAAEC,OAAO,IACzDR,UAAU,CAACS,GAAG,CAACD,OAAO,CAACE,IAAI,CAC7B,CAAC;YACH;UACF;UACA,IAAI,CAACtB,cAAc,GAAGU,WAAW;QACnC,CAAC,CAAC,OAAOa,GAAQ,EAAE;UACjB,IAAI,CAAC3B,MAAM,GAAG2B,GAAG,CAAC1B,OAAO,IAAI0B,GAAG;QAClC;MACF;IAAC;MAAAtC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAY,MAAA,EAAsB;QACpB,IAAI,CAACL,MAAM,GAAGa,SAAS;QACvB,IAAI;UAAA,IAAAe,oBAAA;UACF,MAAMjD,gBAAgB,CACpB,IAAI,CAACiB,IAAI,EACT,EAAAgC,oBAAA,OAAI,CAACxB,cAAc,cAAAwB,oBAAA,uBAAnBA,oBAAA,CAAqBC,mBAAmB,KAAI,EAC9C,CAAC;QACH,CAAC,CAAC,OAAOF,GAAQ,EAAE;UACjB,IAAI,CAAC3B,MAAM,GAAG2B,GAAG,CAAC1B,OAAO,IAAI0B,GAAG;QAClC;MACF;IAAC;MAAAtC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAU,eAAuB2B,KAAkB,EAAQ;QAC/C,IAAI,CAAC1B,cAAc,GAAG;UACpB,GAAG,IAAI,CAACA,cAAe;UACvByB,mBAAmB,EAAEC,KAAK,CAACC,MAAM,CAACF;QACpC,CAAC;MACH;IAAC;MAAAxC,IAAA;MAAA2C,MAAA;MAAAxC,GAAA;MAAAC,KAAA,EAED,SAAAwC,OAAA,EAAoC;QAClC,OAAO,CACLrD,OAAO,EACPX,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CAAE;QAAA,CACJ;MACH;IAAC;EAAA;AAAA,GArHyBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}