{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button/mwc-button\";\nconst mdiCheckCircle = \"M12 2C6.5 2 2 6.5 2 12S6.5 22 12 22 22 17.5 22 12 17.5 2 12 2M10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z\";\nconst mdiCloseCircle = \"M12,2C17.53,2 22,6.47 22,12C22,17.53 17.53,22 12,22C6.47,22 2,17.53 2,12C2,6.47 6.47,2 12,2M15.59,7L12,10.59L8.41,7L7,8.41L10.59,12L7,15.59L8.41,17L12,13.41L15.59,17L17,15.59L13.41,12L17,8.41L15.59,7Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport { interviewMatterNode } from \"../../../../../data/matter\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nlet DialogMatterReinterviewNode = _decorate([customElement(\"dialog-matter-reinterview-node\")], function (_initialize, _LitElement) {\n  class DialogMatterReinterviewNode extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogMatterReinterviewNode,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"device_id\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_status\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: async function showDialog(params) {\n        this.device_id = params.device_id;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.device_id) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(this.hass, this.hass.localize(\"ui.panel.config.matter.reinterview_node.title\"))}\n      >\n        ${!this._status ? html`\n              <p>\n                ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.introduction\")}\n              </p>\n              <p>\n                <em>\n                  ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.battery_device_warning\")}\n                </em>\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startReinterview}>\n                ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.start_reinterview\")}\n              </mwc-button>\n            ` : this._status === \"started\" ? html`\n                <div class=\"flex-container\">\n                  <ha-circular-progress indeterminate></ha-circular-progress>\n                  <div class=\"status\">\n                    <p>\n                      <b>\n                        ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.in_progress\")}\n                      </b>\n                    </p>\n                    <p>\n                      ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.run_in_background\")}\n                    </p>\n                  </div>\n                </div>\n                <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                  ${this.hass.localize(\"ui.common.close\")}\n                </mwc-button>\n              ` : this._status === \"failed\" ? html`\n                  <div class=\"flex-container\">\n                    <ha-svg-icon\n                      .path=${mdiCloseCircle}\n                      class=\"failed\"\n                    ></ha-svg-icon>\n                    <div class=\"status\">\n                      <p>\n                        ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.interview_failed\")}\n                      </p>\n                    </div>\n                  </div>\n                  <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                    ${this.hass.localize(\"ui.common.close\")}\n                  </mwc-button>\n                ` : this._status === \"finished\" ? html`\n                    <div class=\"flex-container\">\n                      <ha-svg-icon\n                        .path=${mdiCheckCircle}\n                        class=\"success\"\n                      ></ha-svg-icon>\n                      <div class=\"status\">\n                        <p>\n                          ${this.hass.localize(\"ui.panel.config.matter.reinterview_node.interview_complete\")}\n                        </p>\n                      </div>\n                    </div>\n                    <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                      ${this.hass.localize(\"ui.common.close\")}\n                    </mwc-button>\n                  ` : nothing}\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_startReinterview\",\n      value: async function _startReinterview() {\n        if (!this.hass) {\n          return;\n        }\n        this._status = \"started\";\n        try {\n          await interviewMatterNode(this.hass, this.device_id);\n          this._status = \"finished\";\n        } catch (err) {\n          this._status = \"failed\";\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this.device_id = undefined;\n        this._status = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyleDialog, css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .stages {\n          margin-top: 16px;\n        }\n\n        .stage ha-svg-icon {\n          width: 16px;\n          height: 16px;\n        }\n        .stage {\n          padding: 8px;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        .flex-container ha-circular-progress,\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiCheckCircle","mdiCloseCircle","css","html","LitElement","nothing","customElement","property","state","fireEvent","createCloseHeading","interviewMatterNode","haStyleDialog","DialogMatterReinterviewNode","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","device_id","render","closeDialog","hass","localize","_status","_startReinterview","err","undefined","dialog","localName","static","styles"],"sources":["/workspaces/frontend/src/panels/config/integrations/integration-panels/matter/dialog-matter-reinterview-node.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { mdiCheckCircle, mdiCloseCircle } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport \"../../../../../components/ha-circular-progress\";\nimport { createCloseHeading } from \"../../../../../components/ha-dialog\";\nimport { interviewMatterNode } from \"../../../../../data/matter\";\nimport { haStyleDialog } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { MatterReinterviewNodeDialogParams } from \"./show-dialog-matter-reinterview-node\";\n\n@customElement(\"dialog-matter-reinterview-node\")\nclass DialogMatterReinterviewNode extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private device_id?: string;\n\n  @state() private _status?: string;\n\n  public async showDialog(\n    params: MatterReinterviewNodeDialogParams\n  ): Promise<void> {\n    this.device_id = params.device_id;\n  }\n\n  protected render() {\n    if (!this.device_id) {\n      return nothing;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.matter.reinterview_node.title\")\n        )}\n      >\n        ${!this._status\n          ? html`\n              <p>\n                ${this.hass.localize(\n                  \"ui.panel.config.matter.reinterview_node.introduction\"\n                )}\n              </p>\n              <p>\n                <em>\n                  ${this.hass.localize(\n                    \"ui.panel.config.matter.reinterview_node.battery_device_warning\"\n                  )}\n                </em>\n              </p>\n              <mwc-button slot=\"primaryAction\" @click=${this._startReinterview}>\n                ${this.hass.localize(\n                  \"ui.panel.config.matter.reinterview_node.start_reinterview\"\n                )}\n              </mwc-button>\n            `\n          : this._status === \"started\"\n            ? html`\n                <div class=\"flex-container\">\n                  <ha-circular-progress indeterminate></ha-circular-progress>\n                  <div class=\"status\">\n                    <p>\n                      <b>\n                        ${this.hass.localize(\n                          \"ui.panel.config.matter.reinterview_node.in_progress\"\n                        )}\n                      </b>\n                    </p>\n                    <p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.matter.reinterview_node.run_in_background\"\n                      )}\n                    </p>\n                  </div>\n                </div>\n                <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                  ${this.hass.localize(\"ui.common.close\")}\n                </mwc-button>\n              `\n            : this._status === \"failed\"\n              ? html`\n                  <div class=\"flex-container\">\n                    <ha-svg-icon\n                      .path=${mdiCloseCircle}\n                      class=\"failed\"\n                    ></ha-svg-icon>\n                    <div class=\"status\">\n                      <p>\n                        ${this.hass.localize(\n                          \"ui.panel.config.matter.reinterview_node.interview_failed\"\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                    ${this.hass.localize(\"ui.common.close\")}\n                  </mwc-button>\n                `\n              : this._status === \"finished\"\n                ? html`\n                    <div class=\"flex-container\">\n                      <ha-svg-icon\n                        .path=${mdiCheckCircle}\n                        class=\"success\"\n                      ></ha-svg-icon>\n                      <div class=\"status\">\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.panel.config.matter.reinterview_node.interview_complete\"\n                          )}\n                        </p>\n                      </div>\n                    </div>\n                    <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                      ${this.hass.localize(\"ui.common.close\")}\n                    </mwc-button>\n                  `\n                : nothing}\n      </ha-dialog>\n    `;\n  }\n\n  private async _startReinterview(): Promise<void> {\n    if (!this.hass) {\n      return;\n    }\n    this._status = \"started\";\n    try {\n      await interviewMatterNode(this.hass, this.device_id!);\n      this._status = \"finished\";\n    } catch (err) {\n      this._status = \"failed\";\n    }\n  }\n\n  public closeDialog(): void {\n    this.device_id = undefined;\n    this._status = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        .success {\n          color: var(--success-color);\n        }\n\n        .failed {\n          color: var(--error-color);\n        }\n\n        .flex-container {\n          display: flex;\n          align-items: center;\n        }\n\n        .stages {\n          margin-top: 16px;\n        }\n\n        .stage ha-svg-icon {\n          width: 16px;\n          height: 16px;\n        }\n        .stage {\n          padding: 8px;\n        }\n\n        ha-svg-icon {\n          width: 68px;\n          height: 48px;\n        }\n\n        .flex-container ha-circular-progress,\n        .flex-container ha-svg-icon {\n          margin-right: 20px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-matter-reinterview-node\": DialogMatterReinterviewNode;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}