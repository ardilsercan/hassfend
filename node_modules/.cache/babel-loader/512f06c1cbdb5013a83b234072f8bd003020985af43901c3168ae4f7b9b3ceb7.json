{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textarea\";\nimport \"../../../../components/ha-textfield\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nlet DialogAutomationRename = _decorate([customElement(\"ha-dialog-automation-rename\")], function (_initialize, _LitElement) {\n  class DialogAutomationRename extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogAutomationRename,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_opened\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_newName\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_newDescription\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._opened = true;\n        this._params = params;\n        this._newName = params.config.alias || this.hass.localize(\"ui.panel.config.automation.editor.default_name\");\n        this._newDescription = params.config.description || \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._params.onClose();\n        if (this._opened) {\n          fireEvent(this, \"dialog-closed\", {\n            dialog: this.localName\n          });\n        }\n        this._opened = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._opened) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(this.hass, this.hass.localize(this._params.config.alias ? \"ui.panel.config.automation.editor.rename\" : \"ui.panel.config.automation.editor.save\"))}\n      >\n        ${this._error ? html`<ha-alert alert-type=\"error\"\n              >${this.hass.localize(\"ui.panel.config.automation.editor.missing_name\")}</ha-alert\n            >` : \"\"}\n        <ha-textfield\n          dialogInitialFocus\n          .value=${this._newName}\n          .placeholder=${this.hass.localize(\"ui.panel.config.automation.editor.default_name\")}\n          .label=${this.hass.localize(\"ui.panel.config.automation.editor.alias\")}\n          required\n          type=\"string\"\n          @input=${this._valueChanged}\n        ></ha-textfield>\n\n        <ha-textarea\n          .label=${this.hass.localize(\"ui.panel.config.automation.editor.description.label\")}\n          .placeholder=${this.hass.localize(\"ui.panel.config.automation.editor.description.placeholder\")}\n          name=\"description\"\n          autogrow\n          .value=${this._newDescription}\n          @input=${this._valueChanged}\n        ></ha-textarea>\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(this._params.config.alias ? \"ui.panel.config.automation.editor.rename\" : \"ui.panel.config.automation.editor.save\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        ev.stopPropagation();\n        const target = ev.target;\n        if (target.name === \"description\") {\n          this._newDescription = target.value;\n        } else {\n          this._newName = target.value;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: function _save() {\n        if (!this._newName) {\n          this._error = \"Name is required\";\n          return;\n        }\n        this._params.updateAutomation({\n          ...this._params.config,\n          alias: this._newName,\n          description: this._newDescription\n        });\n        this.closeDialog();\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, haStyleDialog, css`\n        ha-textfield,\n        ha-textarea {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","fireEvent","createCloseHeading","haStyle","haStyleDialog","DialogAutomationRename","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","_opened","_params","_newName","config","alias","hass","localize","_newDescription","description","closeDialog","onClose","dialog","localName","render","_error","_valueChanged","_save","ev","stopPropagation","target","name","updateAutomation","static","styles"],"sources":["/workspaces/frontend/src/panels/config/automation/automation-rename-dialog/dialog-automation-rename.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-alert\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-textarea\";\nimport \"../../../../components/ha-textfield\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { AutomationRenameDialog } from \"./show-dialog-automation-rename\";\n\n@customElement(\"ha-dialog-automation-rename\")\nclass DialogAutomationRename extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  @state() private _error?: string;\n\n  private _params!: AutomationRenameDialog;\n\n  private _newName?: string;\n\n  private _newDescription?: string;\n\n  public showDialog(params: AutomationRenameDialog): void {\n    this._opened = true;\n    this._params = params;\n    this._newName =\n      params.config.alias ||\n      this.hass.localize(\"ui.panel.config.automation.editor.default_name\");\n    this._newDescription = params.config.description || \"\";\n  }\n\n  public closeDialog(): void {\n    this._params.onClose();\n\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  protected render() {\n    if (!this._opened) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )\n        )}\n      >\n        ${this._error\n          ? html`<ha-alert alert-type=\"error\"\n              >${this.hass.localize(\n                \"ui.panel.config.automation.editor.missing_name\"\n              )}</ha-alert\n            >`\n          : \"\"}\n        <ha-textfield\n          dialogInitialFocus\n          .value=${this._newName}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.default_name\"\n          )}\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.alias\"\n          )}\n          required\n          type=\"string\"\n          @input=${this._valueChanged}\n        ></ha-textfield>\n\n        <ha-textarea\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.label\"\n          )}\n          .placeholder=${this.hass.localize(\n            \"ui.panel.config.automation.editor.description.placeholder\"\n          )}\n          name=\"description\"\n          autogrow\n          .value=${this._newDescription}\n          @input=${this._valueChanged}\n        ></ha-textarea>\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\n            this._params.config.alias\n              ? \"ui.panel.config.automation.editor.rename\"\n              : \"ui.panel.config.automation.editor.save\"\n          )}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    if (target.name === \"description\") {\n      this._newDescription = target.value;\n    } else {\n      this._newName = target.value;\n    }\n  }\n\n  private _save(): void {\n    if (!this._newName) {\n      this._error = \"Name is required\";\n      return;\n    }\n    this._params.updateAutomation({\n      ...this._params.config,\n      alias: this._newName,\n      description: this._newDescription,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-textfield,\n        ha-textarea {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-automation-rename\": DialogAutomationRename;\n  }\n}\n"],"mappings":";AAAA,OAAO,sBAAsB;AAC7B,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,OAAO,iCAAiC;AACxC,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,OAAO,oCAAoC;AAC3C,OAAO,qCAAqC;AAE5C,SAASC,OAAO,EAAEC,aAAa,QAAQ,8BAA8B;AAAC,IAKhEC,sBAAsB,GAAAC,SAAA,EAD3BR,aAAa,CAAC,6BAA6B,CAAC,aAAAS,WAAA,EAAAC,WAAA;EAA7C,MACMH,sBAAsB,SAAAG,WAAA,CAA0C;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAwItE;EAAC;IAAAI,CAAA,EAxIKN,sBAAsB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACzBf,QAAQ,CAAC;QAAEgB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9Bd,KAAK,CAAC,CAAC;MAAAgB,GAAA;MAAAC,MAAA;QAAA,OAAmB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE/Bd,KAAK,CAAC,CAAC;MAAAgB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAQR,SAAAC,WAAkBC,MAA8B,EAAQ;QACtD,IAAI,CAACC,OAAO,GAAG,IAAI;QACnB,IAAI,CAACC,OAAO,GAAGF,MAAM;QACrB,IAAI,CAACG,QAAQ,GACXH,MAAM,CAACI,MAAM,CAACC,KAAK,IACnB,IAAI,CAACC,IAAI,CAACC,QAAQ,CAAC,gDAAgD,CAAC;QACtE,IAAI,CAACC,eAAe,GAAGR,MAAM,CAACI,MAAM,CAACK,WAAW,IAAI,EAAE;MACxD;IAAC;MAAAf,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAY,YAAA,EAA2B;QACzB,IAAI,CAACR,OAAO,CAACS,OAAO,CAAC,CAAC;QAEtB,IAAI,IAAI,CAACV,OAAO,EAAE;UAChBnB,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE;YAAE8B,MAAM,EAAE,IAAI,CAACC;UAAU,CAAC,CAAC;QAC9D;QACA,IAAI,CAACZ,OAAO,GAAG,KAAK;MACtB;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAgB,OAAA,EAAmB;QACjB,IAAI,CAAC,IAAI,CAACb,OAAO,EAAE;UACjB,OAAOvB,OAAO;QAChB;QACA,OAAOF,IAAK;AAChB;AACA;AACA;AACA,kBAAkB,IAAI,CAACkC,WAAY;AACnC,mBAAmB3B,kBAAkB,CAC3B,IAAI,CAACuB,IAAI,EACT,IAAI,CAACA,IAAI,CAACC,QAAQ,CAChB,IAAI,CAACL,OAAO,CAACE,MAAM,CAACC,KAAK,GACrB,0CAA0C,GAC1C,wCACN,CACF,CAAE;AACV;AACA,UAAU,IAAI,CAACU,MAAM,GACTvC,IAAK;AACjB,iBAAiB,IAAI,CAAC8B,IAAI,CAACC,QAAQ,CACnB,gDACF,CAAE;AAChB,cAAc,GACF,EAAG;AACf;AACA;AACA,mBAAmB,IAAI,CAACJ,QAAS;AACjC,yBAAyB,IAAI,CAACG,IAAI,CAACC,QAAQ,CAC/B,gDACF,CAAE;AACZ,mBAAmB,IAAI,CAACD,IAAI,CAACC,QAAQ,CACzB,yCACF,CAAE;AACZ;AACA;AACA,mBAAmB,IAAI,CAACS,aAAc;AACtC;AACA;AACA;AACA,mBAAmB,IAAI,CAACV,IAAI,CAACC,QAAQ,CACzB,qDACF,CAAE;AACZ,yBAAyB,IAAI,CAACD,IAAI,CAACC,QAAQ,CAC/B,2DACF,CAAE;AACZ;AACA;AACA,mBAAmB,IAAI,CAACC,eAAgB;AACxC,mBAAmB,IAAI,CAACQ,aAAc;AACtC;AACA;AACA,6BAA6B,IAAI,CAACN,WAAY;AAC9C,YAAY,IAAI,CAACJ,IAAI,CAACC,QAAQ,CAAC,2BAA2B,CAAE;AAC5D;AACA,6BAA6B,IAAI,CAACU,KAAM;AACxC,YAAY,IAAI,CAACX,IAAI,CAACC,QAAQ,CAClB,IAAI,CAACL,OAAO,CAACE,MAAM,CAACC,KAAK,GACrB,0CAA0C,GAC1C,wCACN,CAAE;AACZ;AACA;AACA,KAAK;MACH;IAAC;MAAAX,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAkB,cAAsBE,EAAe,EAAE;QACrCA,EAAE,CAACC,eAAe,CAAC,CAAC;QACpB,MAAMC,MAAM,GAAGF,EAAE,CAACE,MAAa;QAC/B,IAAIA,MAAM,CAACC,IAAI,KAAK,aAAa,EAAE;UACjC,IAAI,CAACb,eAAe,GAAGY,MAAM,CAACtB,KAAK;QACrC,CAAC,MAAM;UACL,IAAI,CAACK,QAAQ,GAAGiB,MAAM,CAACtB,KAAK;QAC9B;MACF;IAAC;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAmB,MAAA,EAAsB;QACpB,IAAI,CAAC,IAAI,CAACd,QAAQ,EAAE;UAClB,IAAI,CAACY,MAAM,GAAG,kBAAkB;UAChC;QACF;QACA,IAAI,CAACb,OAAO,CAACoB,gBAAgB,CAAC;UAC5B,GAAG,IAAI,CAACpB,OAAO,CAACE,MAAM;UACtBC,KAAK,EAAE,IAAI,CAACF,QAAQ;UACpBM,WAAW,EAAE,IAAI,CAACD;QACpB,CAAC,CAAC;QACF,IAAI,CAACE,WAAW,CAAC,CAAC;MACpB;IAAC;MAAAhB,IAAA;MAAA6B,MAAA;MAAA1B,GAAA;MAAAC,KAAA,EAED,SAAA0B,OAAA,EAAoC;QAClC,OAAO,CACLxC,OAAO,EACPC,aAAa,EACbV,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GAvIkCE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}