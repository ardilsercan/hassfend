{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { getMatterNodeDiagnostics } from \"../../../../../../data/matter\";\nimport \"@material/mwc-list\";\nimport \"../../../../../../components/ha-list-item\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nexport let HaDeviceInfoMatter = _decorate([customElement(\"ha-device-info-matter\")], function (_initialize, _SubscribeMixin) {\n  class HaDeviceInfoMatter extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaDeviceInfoMatter,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"device\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_nodeDiagnostics\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        _get(_getPrototypeOf(HaDeviceInfoMatter.prototype), \"willUpdate\", this).call(this, changedProperties);\n        if (changedProperties.has(\"device\")) {\n          this._fetchNodeDetails();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchNodeDetails\",\n      value: async function _fetchNodeDetails() {\n        if (!this.device) {\n          return;\n        }\n        if (this.device.via_device_id !== null) {\n          // only show device details for top level nodes (so not bridged)\n          return;\n        }\n        try {\n          this._nodeDiagnostics = await getMatterNodeDiagnostics(this.hass, this.device.id);\n        } catch (err) {\n          this._nodeDiagnostics = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._nodeDiagnostics) {\n          return nothing;\n        }\n        return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\"ui.panel.config.matter.device_info.device_info\")}\n      >\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\"ui.panel.config.matter.device_info.node_id\")}:</span\n          >\n          <span class=\"value\">${this._nodeDiagnostics.node_id}</span>\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\"ui.panel.config.matter.device_info.network_type\")}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(`ui.panel.config.matter.network_type.${this._nodeDiagnostics.network_type}`)}</span\n          >\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\"ui.panel.config.matter.device_info.node_type\")}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(`ui.panel.config.matter.node_type.${this._nodeDiagnostics.node_type}`)}</span\n          >\n        </div>\n        ${this._nodeDiagnostics.network_name ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\"ui.panel.config.matter.device_info.network_name\")}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.network_name}</span>\n              </div>\n            ` : nothing}\n        ${this._nodeDiagnostics.mac_address ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\"ui.panel.config.matter.device_info.mac_address\")}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.mac_address}</span>\n              </div>\n            ` : nothing}\n\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\"ui.panel.config.matter.device_info.ip_adresses\")}:</span\n          >\n          <span class=\"value\"\n            >${this._nodeDiagnostics.ip_adresses.map(ip => html`${ip}<br />`)}</span\n          >\n        </div>\n      </ha-expansion-panel>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        .row {\n          display: flex;\n          justify-content: space-between;\n          padding-bottom: 4px;\n        }\n        .value {\n          text-align: right;\n        }\n        ha-expansion-panel {\n          margin: 8px -16px 0;\n          --expansion-panel-summary-padding: 0 16px;\n          --expansion-panel-content-padding: 0 16px;\n          --ha-card-border-radius: 0px;\n        }\n      `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","getMatterNodeDiagnostics","SubscribeMixin","haStyle","HaDeviceInfoMatter","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","willUpdate","changedProperties","_get","_getPrototypeOf","prototype","call","has","_fetchNodeDetails","device","via_device_id","_nodeDiagnostics","hass","id","err","undefined","render","localize","node_id","network_type","node_type","network_name","mac_address","ip_adresses","map","ip","static","styles"],"sources":["/workspaces/frontend/src/panels/config/devices/device-detail/integration-elements/matter/ha-device-info-matter.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport {\n  getMatterNodeDiagnostics,\n  MatterNodeDiagnostics,\n} from \"../../../../../../data/matter\";\nimport \"@material/mwc-list\";\nimport \"../../../../../../components/ha-list-item\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\n\n@customElement(\"ha-device-info-matter\")\nexport class HaDeviceInfoMatter extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public device!: DeviceRegistryEntry;\n\n  @state() private _nodeDiagnostics?: MatterNodeDiagnostics;\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"device\")) {\n      this._fetchNodeDetails();\n    }\n  }\n\n  private async _fetchNodeDetails() {\n    if (!this.device) {\n      return;\n    }\n\n    if (this.device.via_device_id !== null) {\n      // only show device details for top level nodes (so not bridged)\n      return;\n    }\n\n    try {\n      this._nodeDiagnostics = await getMatterNodeDiagnostics(\n        this.hass,\n        this.device.id\n      );\n    } catch (err: any) {\n      this._nodeDiagnostics = undefined;\n    }\n  }\n\n  protected render() {\n    if (!this._nodeDiagnostics) {\n      return nothing;\n    }\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.panel.config.matter.device_info.device_info\"\n        )}\n      >\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.node_id\"\n            )}:</span\n          >\n          <span class=\"value\">${this._nodeDiagnostics.node_id}</span>\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.network_type\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(\n              `ui.panel.config.matter.network_type.${this._nodeDiagnostics.network_type}`\n            )}</span\n          >\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.node_type\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(\n              `ui.panel.config.matter.node_type.${this._nodeDiagnostics.node_type}`\n            )}</span\n          >\n        </div>\n        ${this._nodeDiagnostics.network_name\n          ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.matter.device_info.network_name\"\n                  )}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.network_name}</span>\n              </div>\n            `\n          : nothing}\n        ${this._nodeDiagnostics.mac_address\n          ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.matter.device_info.mac_address\"\n                  )}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.mac_address}</span>\n              </div>\n            `\n          : nothing}\n\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.ip_adresses\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this._nodeDiagnostics.ip_adresses.map(\n              (ip) => html`${ip}<br />`\n            )}</span\n          >\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        .row {\n          display: flex;\n          justify-content: space-between;\n          padding-bottom: 4px;\n        }\n        .value {\n          text-align: right;\n        }\n        ha-expansion-panel {\n          margin: 8px -16px 0;\n          --expansion-panel-summary-padding: 0 16px;\n          --expansion-panel-content-padding: 0 16px;\n          --ha-card-border-radius: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-matter\": HaDeviceInfoMatter;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}