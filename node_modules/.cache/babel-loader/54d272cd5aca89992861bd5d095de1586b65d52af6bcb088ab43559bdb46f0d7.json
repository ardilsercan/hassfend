{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { titleCase } from \"../../../../common/string/title-case\";\nimport \"../../../../components/ha-card\";\nimport { computeDeviceName } from \"../../../../data/device_registry\";\nimport { haStyle } from \"../../../../resources/styles\";\nexport let HaDeviceCard = _decorate([customElement(\"ha-device-info-card\")], function (_initialize, _LitElement) {\n  class HaDeviceCard extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaDeviceCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"device\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\"ui.panel.config.devices.device_info\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${this.device.entry_type || \"device\"}_heading`)\n        })}\n      >\n        <div class=\"card-content\">\n          ${this.device.model ? html`<div class=\"model\">${this.device.model}</div>` : \"\"}\n          ${this.device.manufacturer ? html`\n                <div class=\"manuf\">\n                  ${this.hass.localize(\"ui.panel.config.integrations.config_entry.manuf\", {\n          manufacturer: this.device.manufacturer\n        })}\n                </div>\n              ` : \"\"}\n          ${this.device.via_device_id ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\"ui.panel.config.integrations.config_entry.via\")}\n                  <span class=\"hub\"\n                    ><a\n                      href=\"/config/devices/device/${this.device.via_device_id}\"\n                      >${this._computeDeviceName(this.device.via_device_id)}</a\n                    ></span\n                  >\n                </div>\n              ` : \"\"}\n          ${this.device.sw_version ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(`ui.panel.config.integrations.config_entry.${this.device.entry_type === \"service\" && !this.device.hw_version ? \"version\" : \"firmware\"}`, {\n          version: this.device.sw_version\n        })}\n                </div>\n              ` : \"\"}\n          ${this.device.hw_version ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\"ui.panel.config.integrations.config_entry.hardware\", {\n          version: this.device.hw_version\n        })}\n                </div>\n              ` : \"\"}\n          ${this.device.serial_number ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\"ui.panel.config.integrations.config_entry.serial_number\", {\n          serial_number: this.device.serial_number\n        })}\n                </div>\n              ` : \"\"}\n          ${this._getAddresses().map(([type, value]) => html`\n              <div class=\"extra-info\">\n                ${type === \"mac\" ? \"MAC\" : titleCase(type)}:\n                ${value.toUpperCase()}\n              </div>\n            `)}\n          <slot></slot>\n        </div>\n        <slot name=\"actions\"></slot>\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getAddresses\",\n      value: function _getAddresses() {\n        return this.device.connections.filter(conn => conn[0] === \"mac\" || conn[0] === \"bluetooth\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeDeviceName\",\n      value: function _computeDeviceName(deviceId) {\n        const device = this.hass.devices[deviceId];\n        return device ? computeDeviceName(device, this.hass) : `<${this.hass.localize(\"ui.panel.config.integrations.config_entry.unknown_via_device\")}>`;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          flex: 1 0 100%;\n          min-width: 0;\n        }\n        .device {\n          width: 30%;\n        }\n        .extra-info {\n          margin-top: 8px;\n          word-wrap: break-word;\n        }\n        .manuf,\n        .model {\n          color: var(--secondary-text-color);\n          word-wrap: break-word;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","titleCase","computeDeviceName","haStyle","HaDeviceCard","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","render","hass","localize","device","entry_type","model","manufacturer","via_device_id","_computeDeviceName","sw_version","hw_version","version","serial_number","_getAddresses","map","toUpperCase","connections","filter","conn","deviceId","devices","static","styles"],"sources":["/workspaces/frontend/src/panels/config/devices/device-detail/ha-device-info-card.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { titleCase } from \"../../../../common/string/title-case\";\nimport \"../../../../components/ha-card\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n} from \"../../../../data/device_registry\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"ha-device-info-card\")\nexport class HaDeviceCard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public device!: DeviceRegistryEntry;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-card\n        outlined\n        .header=${this.hass.localize(\"ui.panel.config.devices.device_info\", {\n          type: this.hass.localize(\n            `ui.panel.config.devices.type.${\n              this.device.entry_type || \"device\"\n            }_heading`\n          ),\n        })}\n      >\n        <div class=\"card-content\">\n          ${this.device.model\n            ? html`<div class=\"model\">${this.device.model}</div>`\n            : \"\"}\n          ${this.device.manufacturer\n            ? html`\n                <div class=\"manuf\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.manuf\",\n                    { manufacturer: this.device.manufacturer }\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.via_device_id\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.via\"\n                  )}\n                  <span class=\"hub\"\n                    ><a\n                      href=\"/config/devices/device/${this.device.via_device_id}\"\n                      >${this._computeDeviceName(this.device.via_device_id)}</a\n                    ></span\n                  >\n                </div>\n              `\n            : \"\"}\n          ${this.device.sw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    `ui.panel.config.integrations.config_entry.${\n                      this.device.entry_type === \"service\" &&\n                      !this.device.hw_version\n                        ? \"version\"\n                        : \"firmware\"\n                    }`,\n                    { version: this.device.sw_version }\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.hw_version\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.hardware\",\n                    { version: this.device.hw_version }\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this.device.serial_number\n            ? html`\n                <div class=\"extra-info\">\n                  ${this.hass.localize(\n                    \"ui.panel.config.integrations.config_entry.serial_number\",\n                    { serial_number: this.device.serial_number }\n                  )}\n                </div>\n              `\n            : \"\"}\n          ${this._getAddresses().map(\n            ([type, value]) => html`\n              <div class=\"extra-info\">\n                ${type === \"mac\" ? \"MAC\" : titleCase(type)}:\n                ${value.toUpperCase()}\n              </div>\n            `\n          )}\n          <slot></slot>\n        </div>\n        <slot name=\"actions\"></slot>\n      </ha-card>\n    `;\n  }\n\n  protected _getAddresses() {\n    return this.device.connections.filter(\n      (conn) => conn[0] === \"mac\" || conn[0] === \"bluetooth\"\n    );\n  }\n\n  private _computeDeviceName(deviceId) {\n    const device = this.hass.devices[deviceId];\n    return device\n      ? computeDeviceName(device, this.hass)\n      : `<${this.hass.localize(\n          \"ui.panel.config.integrations.config_entry.unknown_via_device\"\n        )}>`;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        ha-card {\n          flex: 1 0 100%;\n          min-width: 0;\n        }\n        .device {\n          width: 30%;\n        }\n        .extra-info {\n          margin-top: 8px;\n          word-wrap: break-word;\n        }\n        .manuf,\n        .model {\n          color: var(--secondary-text-color);\n          word-wrap: break-word;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-card\": HaDeviceCard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}