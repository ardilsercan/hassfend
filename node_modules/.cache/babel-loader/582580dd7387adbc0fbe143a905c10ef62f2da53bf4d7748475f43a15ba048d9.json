{"ast":null,"code":"import _classPrivateFieldLooseBase from \"@babel/runtime/helpers/classPrivateFieldLooseBase\";\nimport _classPrivateFieldLooseKey from \"@babel/runtime/helpers/classPrivateFieldLooseKey\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.string.trim-end.js\";\nimport \"core-js/modules/es.string.trim-start.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * marked v11.2.0 - a markdown parser\n * Copyright (c) 2011-2024, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n/**\n * Gets the original marked default options.\n */\nfunction _getDefaults() {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar _defaults = _getDefaults();\nfunction changeDefaults(newDefaults) {\n  _defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, 'g');\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction escape$1(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\nfunction edit(regex, opt) {\n  var source = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  var obj = {\n    replace: function replace(name, val) {\n      var valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(source, opt);\n    }\n  };\n  return obj;\n}\nfunction cleanUrl(href) {\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar noopTest = {\n  exec: function exec() {\n    return null;\n  }\n};\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false;\n      var curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  var i = 0;\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var level = 0;\n  for (var i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction outputLink(cap, link, raw, lexer) {\n  var href = link.href;\n  var title = link.title ? escape$1(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: escape$1(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var _matchIndentInNode = _slicedToArray(matchIndentInNode, 1),\n      indentInNode = _matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n/**\n * Tokenizer\n */\nvar _Tokenizer = /*#__PURE__*/function () {\n  // set by the lexer\n  function _Tokenizer(options) {\n    _classCallCheck(this, _Tokenizer);\n    this.options = void 0;\n    this.rules = void 0;\n    // set by the lexer\n    this.lexer = void 0;\n    this.options = options || _defaults;\n  }\n  _createClass(_Tokenizer, [{\n    key: \"space\",\n    value: function space(src) {\n      var cap = this.rules.block.newline.exec(src);\n      if (cap && cap[0].length > 0) {\n        return {\n          type: 'space',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"code\",\n    value: function code(src) {\n      var cap = this.rules.block.code.exec(src);\n      if (cap) {\n        var text = cap[0].replace(/^ {1,4}/gm, '');\n        return {\n          type: 'code',\n          raw: cap[0],\n          codeBlockStyle: 'indented',\n          text: !this.options.pedantic ? rtrim(text, '\\n') : text\n        };\n      }\n    }\n  }, {\n    key: \"fences\",\n    value: function fences(src) {\n      var cap = this.rules.block.fences.exec(src);\n      if (cap) {\n        var raw = cap[0];\n        var text = indentCodeCompensation(raw, cap[3] || '');\n        return {\n          type: 'code',\n          raw: raw,\n          lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(src) {\n      var cap = this.rules.block.heading.exec(src);\n      if (cap) {\n        var text = cap[2].trim();\n        // remove trailing #s\n        if (/#$/.test(text)) {\n          var trimmed = rtrim(text, '#');\n          if (this.options.pedantic) {\n            text = trimmed.trim();\n          } else if (!trimmed || / $/.test(trimmed)) {\n            // CommonMark requires space before trailing #s\n            text = trimmed.trim();\n          }\n        }\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[1].length,\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"hr\",\n    value: function hr(src) {\n      var cap = this.rules.block.hr.exec(src);\n      if (cap) {\n        return {\n          type: 'hr',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(src) {\n      var cap = this.rules.block.blockquote.exec(src);\n      if (cap) {\n        var text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n        var top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        var tokens = this.lexer.blockTokens(text);\n        this.lexer.state.top = top;\n        return {\n          type: 'blockquote',\n          raw: cap[0],\n          tokens: tokens,\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"list\",\n    value: function list(src) {\n      var cap = this.rules.block.list.exec(src);\n      if (cap) {\n        var bull = cap[1].trim();\n        var isordered = bull.length > 1;\n        var _list = {\n          type: 'list',\n          raw: '',\n          ordered: isordered,\n          start: isordered ? +bull.slice(0, -1) : '',\n          loose: false,\n          items: []\n        };\n        bull = isordered ? \"\\\\d{1,9}\\\\\".concat(bull.slice(-1)) : \"\\\\\".concat(bull);\n        if (this.options.pedantic) {\n          bull = isordered ? bull : '[*+-]';\n        }\n        // Get next list item\n        var itemRegex = new RegExp(\"^( {0,3}\".concat(bull, \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\"));\n        var raw = '';\n        var itemContents = '';\n        var endsWithBlankLine = false;\n        // Check if current bullet point can start a new List Item\n        while (src) {\n          var endEarly = false;\n          if (!(cap = itemRegex.exec(src))) {\n            break;\n          }\n          if (this.rules.block.hr.test(src)) {\n            // End list if bullet was actually HR (possibly move into itemRegex?)\n            break;\n          }\n          raw = cap[0];\n          src = src.substring(raw.length);\n          var line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, function (t) {\n            return ' '.repeat(3 * t.length);\n          });\n          var nextLine = src.split('\\n', 1)[0];\n          var indent = 0;\n          if (this.options.pedantic) {\n            indent = 2;\n            itemContents = line.trimStart();\n          } else {\n            indent = cap[2].search(/[^ ]/); // Find first non-space char\n            indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n            itemContents = line.slice(indent);\n            indent += cap[1].length;\n          }\n          var blankLine = false;\n          if (!line && /^ *$/.test(nextLine)) {\n            // Items begin with at most one blank line\n            raw += nextLine + '\\n';\n            src = src.substring(nextLine.length + 1);\n            endEarly = true;\n          }\n          if (!endEarly) {\n            var nextBulletRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\"));\n            var hrRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\"));\n            var fencesBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}(?:```|~~~)\"));\n            var headingBeginRegex = new RegExp(\"^ {0,\".concat(Math.min(3, indent - 1), \"}#\"));\n            // Check if following lines should be included in List Item\n            while (src) {\n              var rawLine = src.split('\\n', 1)[0];\n              nextLine = rawLine;\n              // Re-align to follow commonmark nesting rules\n              if (this.options.pedantic) {\n                nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n              }\n              // End list item if found code fences\n              if (fencesBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new heading\n              if (headingBeginRegex.test(nextLine)) {\n                break;\n              }\n              // End list item if found start of new bullet\n              if (nextBulletRegex.test(nextLine)) {\n                break;\n              }\n              // Horizontal rule found\n              if (hrRegex.test(src)) {\n                break;\n              }\n              if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n                // Dedent if possible\n                itemContents += '\\n' + nextLine.slice(indent);\n              } else {\n                // not enough indentation\n                if (blankLine) {\n                  break;\n                }\n                // paragraph continuation unless last line was a different block level element\n                if (line.search(/[^ ]/) >= 4) {\n                  // indented code block\n                  break;\n                }\n                if (fencesBeginRegex.test(line)) {\n                  break;\n                }\n                if (headingBeginRegex.test(line)) {\n                  break;\n                }\n                if (hrRegex.test(line)) {\n                  break;\n                }\n                itemContents += '\\n' + nextLine;\n              }\n              if (!blankLine && !nextLine.trim()) {\n                // Check if current line is blank\n                blankLine = true;\n              }\n              raw += rawLine + '\\n';\n              src = src.substring(rawLine.length + 1);\n              line = nextLine.slice(indent);\n            }\n          }\n          if (!_list.loose) {\n            // If the previous item ended with a blank line, the list is loose\n            if (endsWithBlankLine) {\n              _list.loose = true;\n            } else if (/\\n *\\n *$/.test(raw)) {\n              endsWithBlankLine = true;\n            }\n          }\n          var istask = null;\n          var ischecked = void 0;\n          // Check for task list items\n          if (this.options.gfm) {\n            istask = /^\\[[ xX]\\] /.exec(itemContents);\n            if (istask) {\n              ischecked = istask[0] !== '[ ] ';\n              itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n            }\n          }\n          _list.items.push({\n            type: 'list_item',\n            raw: raw,\n            task: !!istask,\n            checked: ischecked,\n            loose: false,\n            text: itemContents,\n            tokens: []\n          });\n          _list.raw += raw;\n        }\n        // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n        _list.items[_list.items.length - 1].raw = raw.trimEnd();\n        _list.items[_list.items.length - 1].text = itemContents.trimEnd();\n        _list.raw = _list.raw.trimEnd();\n        // Item child tokens handled here at end because we needed to have the final item to trim it first\n        for (var i = 0; i < _list.items.length; i++) {\n          this.lexer.state.top = false;\n          _list.items[i].tokens = this.lexer.blockTokens(_list.items[i].text, []);\n          if (!_list.loose) {\n            // Check if list should be loose\n            var spacers = _list.items[i].tokens.filter(function (t) {\n              return t.type === 'space';\n            });\n            var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n              return /\\n.*\\n/.test(t.raw);\n            });\n            _list.loose = hasMultipleLineBreaks;\n          }\n        }\n        // Set all items to loose if list is loose\n        if (_list.loose) {\n          for (var _i = 0; _i < _list.items.length; _i++) {\n            _list.items[_i].loose = true;\n          }\n        }\n        return _list;\n      }\n    }\n  }, {\n    key: \"html\",\n    value: function html(src) {\n      var cap = this.rules.block.html.exec(src);\n      if (cap) {\n        var token = {\n          type: 'html',\n          block: true,\n          raw: cap[0],\n          pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n          text: cap[0]\n        };\n        return token;\n      }\n    }\n  }, {\n    key: \"def\",\n    value: function def(src) {\n      var cap = this.rules.block.def.exec(src);\n      if (cap) {\n        var _tag2 = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n        var href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n        var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n        return {\n          type: 'def',\n          tag: _tag2,\n          raw: cap[0],\n          href: href,\n          title: title\n        };\n      }\n    }\n  }, {\n    key: \"table\",\n    value: function table(src) {\n      var _this = this;\n      var cap = this.rules.block.table.exec(src);\n      if (!cap) {\n        return;\n      }\n      if (!/[:|]/.test(cap[2])) {\n        // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n        return;\n      }\n      var headers = splitCells(cap[1]);\n      var aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n      var rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n      var item = {\n        type: 'table',\n        raw: cap[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n      if (headers.length !== aligns.length) {\n        // header and align columns must be equal, rows can be different.\n        return;\n      }\n      var _iterator = _createForOfIteratorHelper(aligns),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var align = _step.value;\n          if (/^ *-+: *$/.test(align)) {\n            item.align.push('right');\n          } else if (/^ *:-+: *$/.test(align)) {\n            item.align.push('center');\n          } else if (/^ *:-+ *$/.test(align)) {\n            item.align.push('left');\n          } else {\n            item.align.push(null);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      var _iterator2 = _createForOfIteratorHelper(headers),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var header = _step2.value;\n          item.header.push({\n            text: header,\n            tokens: this.lexer.inline(header)\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      var _iterator3 = _createForOfIteratorHelper(rows),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var row = _step3.value;\n          item.rows.push(splitCells(row, item.header.length).map(function (cell) {\n            return {\n              text: cell,\n              tokens: _this.lexer.inline(cell)\n            };\n          }));\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return item;\n    }\n  }, {\n    key: \"lheading\",\n    value: function lheading(src) {\n      var cap = this.rules.block.lheading.exec(src);\n      if (cap) {\n        return {\n          type: 'heading',\n          raw: cap[0],\n          depth: cap[2].charAt(0) === '=' ? 1 : 2,\n          text: cap[1],\n          tokens: this.lexer.inline(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(src) {\n      var cap = this.rules.block.paragraph.exec(src);\n      if (cap) {\n        var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n        return {\n          type: 'paragraph',\n          raw: cap[0],\n          text: text,\n          tokens: this.lexer.inline(text)\n        };\n      }\n    }\n  }, {\n    key: \"text\",\n    value: function text(src) {\n      var cap = this.rules.block.text.exec(src);\n      if (cap) {\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: cap[0],\n          tokens: this.lexer.inline(cap[0])\n        };\n      }\n    }\n  }, {\n    key: \"escape\",\n    value: function escape(src) {\n      var cap = this.rules.inline.escape.exec(src);\n      if (cap) {\n        return {\n          type: 'escape',\n          raw: cap[0],\n          text: escape$1(cap[1])\n        };\n      }\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(src) {\n      var cap = this.rules.inline.tag.exec(src);\n      if (cap) {\n        if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n          this.lexer.state.inLink = true;\n        } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.lexer.state.inLink = false;\n        }\n        if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = true;\n        } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n          this.lexer.state.inRawBlock = false;\n        }\n        return {\n          type: 'html',\n          raw: cap[0],\n          inLink: this.lexer.state.inLink,\n          inRawBlock: this.lexer.state.inRawBlock,\n          block: false,\n          text: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"link\",\n    value: function link(src) {\n      var cap = this.rules.inline.link.exec(src);\n      if (cap) {\n        var trimmedUrl = cap[2].trim();\n        if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n          // commonmark requires matching angle brackets\n          if (!/>$/.test(trimmedUrl)) {\n            return;\n          }\n          // ending angle bracket cannot be escaped\n          var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n          if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n            return;\n          }\n        } else {\n          // find closing parenthesis\n          var lastParenIndex = findClosingBracket(cap[2], '()');\n          if (lastParenIndex > -1) {\n            var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n            var linkLen = start + cap[1].length + lastParenIndex;\n            cap[2] = cap[2].substring(0, lastParenIndex);\n            cap[0] = cap[0].substring(0, linkLen).trim();\n            cap[3] = '';\n          }\n        }\n        var href = cap[2];\n        var title = '';\n        if (this.options.pedantic) {\n          // split pedantic href and title\n          var _link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n          if (_link) {\n            href = _link[1];\n            title = _link[3];\n          }\n        } else {\n          title = cap[3] ? cap[3].slice(1, -1) : '';\n        }\n        href = href.trim();\n        if (/^</.test(href)) {\n          if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n            // pedantic allows starting angle bracket without ending angle bracket\n            href = href.slice(1);\n          } else {\n            href = href.slice(1, -1);\n          }\n        }\n        return outputLink(cap, {\n          href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n          title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n        }, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"reflink\",\n    value: function reflink(src, links) {\n      var cap;\n      if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n        var linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n        var _link2 = links[linkString.toLowerCase()];\n        if (!_link2) {\n          var text = cap[0].charAt(0);\n          return {\n            type: 'text',\n            raw: text,\n            text: text\n          };\n        }\n        return outputLink(cap, _link2, cap[0], this.lexer);\n      }\n    }\n  }, {\n    key: \"emStrong\",\n    value: function emStrong(src, maskedSrc) {\n      var prevChar = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var match = this.rules.inline.emStrongLDelim.exec(src);\n      if (!match) return;\n      // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n      if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE3F\\uDE40\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDF02\\uDF04-\\uDF10\\uDF12-\\uDF33\\uDF50-\\uDF59\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883\\uD885-\\uD887][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2F\\uDC41-\\uDC46]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD32\\uDD50-\\uDD52\\uDD55\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEC0-\\uDED3\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E\\uDF25-\\uDF2A]|\\uD838[\\uDC30-\\uDC6D\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDCD0-\\uDCEB\\uDCF0-\\uDCF9\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF39\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0\\uDFF0-\\uDFFF]|\\uD87B[\\uDC00-\\uDE5D]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A\\uDF50-\\uDFFF]|\\uD888[\\uDC00-\\uDFAF])/)) return;\n      var nextChar = match[1] || match[2] || '';\n      if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n        // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n        var lLength = _toConsumableArray(match[0]).length - 1;\n        var rDelim,\n          rLength,\n          delimTotal = lLength,\n          midDelimTotal = 0;\n        var endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n        endReg.lastIndex = 0;\n        // Clip maskedSrc to same section of string as src (move to lexer?)\n        maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n        while ((match = endReg.exec(maskedSrc)) != null) {\n          rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n          if (!rDelim) continue; // skip single * in __abc*abc__\n          rLength = _toConsumableArray(rDelim).length;\n          if (match[3] || match[4]) {\n            // found another Left Delim\n            delimTotal += rLength;\n            continue;\n          } else if (match[5] || match[6]) {\n            // either Left or Right Delim\n            if (lLength % 3 && !((lLength + rLength) % 3)) {\n              midDelimTotal += rLength;\n              continue; // CommonMark Emphasis Rules 9-10\n            }\n          }\n          delimTotal -= rLength;\n          if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n          // Remove extra characters. *a*** -> *a*\n          rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n          // char length can be >1 for unicode characters;\n          var lastCharLength = _toConsumableArray(match[0])[0].length;\n          var raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n          // Create `em` if smallest delimiter has odd char count. *a***\n          if (Math.min(lLength, rLength) % 2) {\n            var _text = raw.slice(1, -1);\n            return {\n              type: 'em',\n              raw: raw,\n              text: _text,\n              tokens: this.lexer.inlineTokens(_text)\n            };\n          }\n          // Create 'strong' if smallest delimiter has even char count. **a***\n          var text = raw.slice(2, -2);\n          return {\n            type: 'strong',\n            raw: raw,\n            text: text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n      }\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(src) {\n      var cap = this.rules.inline.code.exec(src);\n      if (cap) {\n        var text = cap[2].replace(/\\n/g, ' ');\n        var hasNonSpaceChars = /[^ ]/.test(text);\n        var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n        if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n          text = text.substring(1, text.length - 1);\n        }\n        text = escape$1(text, true);\n        return {\n          type: 'codespan',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }, {\n    key: \"br\",\n    value: function br(src) {\n      var cap = this.rules.inline.br.exec(src);\n      if (cap) {\n        return {\n          type: 'br',\n          raw: cap[0]\n        };\n      }\n    }\n  }, {\n    key: \"del\",\n    value: function del(src) {\n      var cap = this.rules.inline.del.exec(src);\n      if (cap) {\n        return {\n          type: 'del',\n          raw: cap[0],\n          text: cap[2],\n          tokens: this.lexer.inlineTokens(cap[2])\n        };\n      }\n    }\n  }, {\n    key: \"autolink\",\n    value: function autolink(src) {\n      var cap = this.rules.inline.autolink.exec(src);\n      if (cap) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = escape$1(cap[1]);\n          href = 'mailto:' + text;\n        } else {\n          text = escape$1(cap[1]);\n          href = text;\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"url\",\n    value: function url(src) {\n      var cap;\n      if (cap = this.rules.inline.url.exec(src)) {\n        var text, href;\n        if (cap[2] === '@') {\n          text = escape$1(cap[0]);\n          href = 'mailto:' + text;\n        } else {\n          // do extended autolink path validation\n          var prevCapZero;\n          do {\n            var _this$rules$inline$_b, _this$rules$inline$_b2;\n            prevCapZero = cap[0];\n            cap[0] = (_this$rules$inline$_b = (_this$rules$inline$_b2 = this.rules.inline._backpedal.exec(cap[0])) === null || _this$rules$inline$_b2 === void 0 ? void 0 : _this$rules$inline$_b2[0]) !== null && _this$rules$inline$_b !== void 0 ? _this$rules$inline$_b : '';\n          } while (prevCapZero !== cap[0]);\n          text = escape$1(cap[0]);\n          if (cap[1] === 'www.') {\n            href = 'http://' + cap[0];\n          } else {\n            href = cap[0];\n          }\n        }\n        return {\n          type: 'link',\n          raw: cap[0],\n          text: text,\n          href: href,\n          tokens: [{\n            type: 'text',\n            raw: text,\n            text: text\n          }]\n        };\n      }\n    }\n  }, {\n    key: \"inlineText\",\n    value: function inlineText(src) {\n      var cap = this.rules.inline.text.exec(src);\n      if (cap) {\n        var text;\n        if (this.lexer.state.inRawBlock) {\n          text = cap[0];\n        } else {\n          text = escape$1(cap[0]);\n        }\n        return {\n          type: 'text',\n          raw: cap[0],\n          text: text\n        };\n      }\n    }\n  }]);\n  return _Tokenizer;\n}();\n/**\n * Block-Level Grammar\n */\nvar newline = /^(?: *(?:\\n|$))+/;\nvar blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nvar fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nvar hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nvar heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nvar bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nvar lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/).replace(/bull/g, bullet) // lists can interrupt\n.getRegex();\nvar _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nvar blockText = /^[^\\n]+/;\nvar _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nvar def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/).replace('label', _blockLabel).replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex();\nvar list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, bullet).getRegex();\nvar _tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nvar _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nvar html = edit('^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n+ ')', 'i').replace('comment', _comment).replace('tag', _tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nvar paragraph = edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nvar blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace('paragraph', paragraph).getRegex();\n/**\n * Normal Block Grammar\n */\nvar blockNormal = {\n  blockquote: blockquote,\n  code: blockCode,\n  def: def,\n  fences: fences,\n  heading: heading,\n  hr: hr,\n  html: html,\n  lheading: lheading,\n  list: list,\n  newline: newline,\n  paragraph: paragraph,\n  table: noopTest,\n  text: blockText\n};\n/**\n * GFM Block Grammar\n */\nvar gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n.replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nvar blockGfm = Object.assign(Object.assign({}, blockNormal), {}, {\n  table: gfmTable,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', gfmTable) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex()\n});\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nvar blockPedantic = Object.assign(Object.assign({}, blockNormal), {}, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', _comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph).replace('hr', hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', lheading).replace('|table', '').replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').replace('|tag', '').getRegex()\n});\n/**\n * Inline-Level Grammar\n */\nvar escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nvar inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nvar br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nvar inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nvar _punctuation = '\\\\p{P}$+<=>`^|~';\nvar punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u').replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nvar blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nvar emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u').replace(/punct/g, _punctuation).getRegex();\nvar emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n+ '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n.replace(/punct/g, _punctuation).getRegex();\n// (6) Not allowed for _\nvar emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n+ '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n.replace(/punct/g, _punctuation).getRegex();\nvar anyPunctuation = edit(/\\\\([punct])/, 'gu').replace(/punct/g, _punctuation).getRegex();\nvar autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex();\nvar _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nvar tag = edit('^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n+ '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n+ '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n+ '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n+ '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n.replace('comment', _inlineComment).replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex();\nvar _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nvar link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/).replace('label', _inlineLabel).replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/).replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex();\nvar reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/).replace('label', _inlineLabel).replace('ref', _blockLabel).getRegex();\nvar nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/).replace('ref', _blockLabel).getRegex();\nvar reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g').replace('reflink', reflink).replace('nolink', nolink).getRegex();\n/**\n * Normal Inline Grammar\n */\nvar inlineNormal = {\n  _backpedal: noopTest,\n  // only used for GFM url\n  anyPunctuation: anyPunctuation,\n  autolink: autolink,\n  blockSkip: blockSkip,\n  br: br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim: emStrongLDelim,\n  emStrongRDelimAst: emStrongRDelimAst,\n  emStrongRDelimUnd: emStrongRDelimUnd,\n  escape: escape,\n  link: link,\n  nolink: nolink,\n  punctuation: punctuation,\n  reflink: reflink,\n  reflinkSearch: reflinkSearch,\n  tag: tag,\n  text: inlineText,\n  url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nvar inlinePedantic = Object.assign(Object.assign({}, inlineNormal), {}, {\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', _inlineLabel).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', _inlineLabel).getRegex()\n});\n/**\n * GFM Inline Grammar\n */\nvar inlineGfm = Object.assign(Object.assign({}, inlineNormal), {}, {\n  escape: edit(escape).replace('])', '~|])').getRegex(),\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i').replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\n/**\n * GFM + Line Breaks Inline Grammar\n */\nvar inlineBreaks = Object.assign(Object.assign({}, inlineGfm), {}, {\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n/**\n * exports\n */\nvar block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic\n};\nvar inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic\n};\n\n/**\n * Block Lexer\n */\nvar _Lexer = /*#__PURE__*/function () {\n  function _Lexer(options) {\n    _classCallCheck(this, _Lexer);\n    this.tokens = void 0;\n    this.options = void 0;\n    this.state = void 0;\n    this.tokenizer = void 0;\n    this.inlineQueue = void 0;\n    // TokenList cannot be created in one go\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n  /**\n   * Expose Rules\n   */\n  _createClass(_Lexer, [{\n    key: \"lex\",\n    value:\n    /**\n     * Preprocessing\n     */\n    function lex(src) {\n      src = src.replace(/\\r\\n|\\r/g, '\\n');\n      this.blockTokens(src, this.tokens);\n      for (var i = 0; i < this.inlineQueue.length; i++) {\n        var next = this.inlineQueue[i];\n        this.inlineTokens(next.src, next.tokens);\n      }\n      this.inlineQueue = [];\n      return this.tokens;\n    }\n  }, {\n    key: \"blockTokens\",\n    value: function blockTokens(src) {\n      var _this2 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      if (this.options.pedantic) {\n        src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n      } else {\n        src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n          return leading + '    '.repeat(tabs.length);\n        });\n      }\n      var token;\n      var lastToken;\n      var cutSrc;\n      var lastParagraphClipped;\n      var _loop = function _loop() {\n          if (_this2.options.extensions && _this2.options.extensions.block && _this2.options.extensions.block.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this2\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // newline\n          if (token = _this2.tokenizer.space(src)) {\n            src = src.substring(token.raw.length);\n            if (token.raw.length === 1 && tokens.length > 0) {\n              // if there's a single \\n as a spacer, it's terminating the last line,\n              // so move it there so that we don't get unnecessary paragraph tags\n              tokens[tokens.length - 1].raw += '\\n';\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // code\n          if (token = _this2.tokenizer.code(src)) {\n            src = src.substring(token.raw.length);\n            lastToken = tokens[tokens.length - 1];\n            // An indented code block cannot interrupt a paragraph.\n            if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n              lastToken.raw += '\\n' + token.raw;\n              lastToken.text += '\\n' + token.text;\n              _this2.inlineQueue[_this2.inlineQueue.length - 1].src = lastToken.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // fences\n          if (token = _this2.tokenizer.fences(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // heading\n          if (token = _this2.tokenizer.heading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // hr\n          if (token = _this2.tokenizer.hr(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // blockquote\n          if (token = _this2.tokenizer.blockquote(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // list\n          if (token = _this2.tokenizer.list(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // html\n          if (token = _this2.tokenizer.html(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // def\n          if (token = _this2.tokenizer.def(src)) {\n            src = src.substring(token.raw.length);\n            lastToken = tokens[tokens.length - 1];\n            if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n              lastToken.raw += '\\n' + token.raw;\n              lastToken.text += '\\n' + token.raw;\n              _this2.inlineQueue[_this2.inlineQueue.length - 1].src = lastToken.text;\n            } else if (!_this2.tokens.links[token.tag]) {\n              _this2.tokens.links[token.tag] = {\n                href: token.href,\n                title: token.title\n              };\n            }\n            return 0; // continue\n          }\n          // table (gfm)\n          if (token = _this2.tokenizer.table(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // lheading\n          if (token = _this2.tokenizer.lheading(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // top-level paragraph\n          // prevent paragraph consuming extensions by clipping 'src' to extension start\n          cutSrc = src;\n          if (_this2.options.extensions && _this2.options.extensions.startBlock) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this2.options.extensions.startBlock.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this2\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (_this2.state.top && (token = _this2.tokenizer.paragraph(cutSrc))) {\n            lastToken = tokens[tokens.length - 1];\n            if (lastParagraphClipped && lastToken.type === 'paragraph') {\n              lastToken.raw += '\\n' + token.raw;\n              lastToken.text += '\\n' + token.text;\n              _this2.inlineQueue.pop();\n              _this2.inlineQueue[_this2.inlineQueue.length - 1].src = lastToken.text;\n            } else {\n              tokens.push(token);\n            }\n            lastParagraphClipped = cutSrc.length !== src.length;\n            src = src.substring(token.raw.length);\n            return 0; // continue\n          }\n          // text\n          if (token = _this2.tokenizer.text(src)) {\n            src = src.substring(token.raw.length);\n            lastToken = tokens[tokens.length - 1];\n            if (lastToken && lastToken.type === 'text') {\n              lastToken.raw += '\\n' + token.raw;\n              lastToken.text += '\\n' + token.text;\n              _this2.inlineQueue.pop();\n              _this2.inlineQueue[_this2.inlineQueue.length - 1].src = lastToken.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this2.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret;\n      while (src) {\n        _ret = _loop();\n        if (_ret === 0) continue;\n        if (_ret === 1) break;\n      }\n      this.state.top = true;\n      return tokens;\n    }\n  }, {\n    key: \"inline\",\n    value: function inline(src) {\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      this.inlineQueue.push({\n        src: src,\n        tokens: tokens\n      });\n      return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n  }, {\n    key: \"inlineTokens\",\n    value: function inlineTokens(src) {\n      var _this3 = this;\n      var tokens = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n      var token, lastToken, cutSrc;\n      // String with links masked to avoid interference with em and strong\n      var maskedSrc = src;\n      var match;\n      var keepPrevChar, prevChar;\n      // Mask out reflinks\n      if (this.tokens.links) {\n        var links = Object.keys(this.tokens.links);\n        if (links.length > 0) {\n          while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n            if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n              maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n            }\n          }\n        }\n      }\n      // Mask out other blocks\n      while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n      }\n      // Mask out escaped characters\n      while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n        maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n      }\n      var _loop2 = function _loop2() {\n          if (!keepPrevChar) {\n            prevChar = '';\n          }\n          keepPrevChar = false;\n          // extensions\n          if (_this3.options.extensions && _this3.options.extensions.inline && _this3.options.extensions.inline.some(function (extTokenizer) {\n            if (token = extTokenizer.call({\n              lexer: _this3\n            }, src, tokens)) {\n              src = src.substring(token.raw.length);\n              tokens.push(token);\n              return true;\n            }\n            return false;\n          })) {\n            return 0; // continue\n          }\n          // escape\n          if (token = _this3.tokenizer.escape(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // tag\n          if (token = _this3.tokenizer.tag(src)) {\n            src = src.substring(token.raw.length);\n            lastToken = tokens[tokens.length - 1];\n            if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n              lastToken.raw += token.raw;\n              lastToken.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // link\n          if (token = _this3.tokenizer.link(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // reflink, nolink\n          if (token = _this3.tokenizer.reflink(src, _this3.tokens.links)) {\n            src = src.substring(token.raw.length);\n            lastToken = tokens[tokens.length - 1];\n            if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n              lastToken.raw += token.raw;\n              lastToken.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          // em & strong\n          if (token = _this3.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // code\n          if (token = _this3.tokenizer.codespan(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // br\n          if (token = _this3.tokenizer.br(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // del (gfm)\n          if (token = _this3.tokenizer.del(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // autolink\n          if (token = _this3.tokenizer.autolink(src)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // url (gfm)\n          if (!_this3.state.inLink && (token = _this3.tokenizer.url(src))) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return 0; // continue\n          }\n          // text\n          // prevent inlineText consuming extensions by clipping 'src' to extension start\n          cutSrc = src;\n          if (_this3.options.extensions && _this3.options.extensions.startInline) {\n            var startIndex = Infinity;\n            var tempSrc = src.slice(1);\n            var tempStart;\n            _this3.options.extensions.startInline.forEach(function (getStartIndex) {\n              tempStart = getStartIndex.call({\n                lexer: _this3\n              }, tempSrc);\n              if (typeof tempStart === 'number' && tempStart >= 0) {\n                startIndex = Math.min(startIndex, tempStart);\n              }\n            });\n            if (startIndex < Infinity && startIndex >= 0) {\n              cutSrc = src.substring(0, startIndex + 1);\n            }\n          }\n          if (token = _this3.tokenizer.inlineText(cutSrc)) {\n            src = src.substring(token.raw.length);\n            if (token.raw.slice(-1) !== '_') {\n              // Track prevChar before string of ____ started\n              prevChar = token.raw.slice(-1);\n            }\n            keepPrevChar = true;\n            lastToken = tokens[tokens.length - 1];\n            if (lastToken && lastToken.type === 'text') {\n              lastToken.raw += token.raw;\n              lastToken.text += token.text;\n            } else {\n              tokens.push(token);\n            }\n            return 0; // continue\n          }\n          if (src) {\n            var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n            if (_this3.options.silent) {\n              console.error(errMsg);\n              return 1; // break\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n        },\n        _ret2;\n      while (src) {\n        _ret2 = _loop2();\n        if (_ret2 === 0) continue;\n        if (_ret2 === 1) break;\n      }\n      return tokens;\n    }\n  }], [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n    /**\n     * Static Lex Method\n     */\n  }, {\n    key: \"lex\",\n    value: function lex(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n  }, {\n    key: \"lexInline\",\n    value: function lexInline(src, options) {\n      var lexer = new _Lexer(options);\n      return lexer.inlineTokens(src);\n    }\n  }]);\n  return _Lexer;\n}();\n/**\n * Renderer\n */\nvar _Renderer = /*#__PURE__*/function () {\n  function _Renderer(options) {\n    _classCallCheck(this, _Renderer);\n    this.options = void 0;\n    this.options = options || _defaults;\n  }\n  _createClass(_Renderer, [{\n    key: \"code\",\n    value: function code(_code, infostring, escaped) {\n      var _match;\n      var lang = (_match = (infostring || '').match(/^\\S*/)) === null || _match === void 0 ? void 0 : _match[0];\n      _code = _code.replace(/\\n$/, '') + '\\n';\n      if (!lang) {\n        return '<pre><code>' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n      }\n      return '<pre><code class=\"language-' + escape$1(lang) + '\">' + (escaped ? _code : escape$1(_code, true)) + '</code></pre>\\n';\n    }\n  }, {\n    key: \"blockquote\",\n    value: function blockquote(quote) {\n      return \"<blockquote>\\n\".concat(quote, \"</blockquote>\\n\");\n    }\n  }, {\n    key: \"html\",\n    value: function html(_html, block) {\n      return _html;\n    }\n  }, {\n    key: \"heading\",\n    value: function heading(text, level, raw) {\n      // ignore IDs\n      return \"<h\".concat(level, \">\").concat(text, \"</h\").concat(level, \">\\n\");\n    }\n  }, {\n    key: \"hr\",\n    value: function hr() {\n      return '<hr>\\n';\n    }\n  }, {\n    key: \"list\",\n    value: function list(body, ordered, start) {\n      var type = ordered ? 'ol' : 'ul';\n      var startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n      return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n  }, {\n    key: \"listitem\",\n    value: function listitem(text, task, checked) {\n      return \"<li>\".concat(text, \"</li>\\n\");\n    }\n  }, {\n    key: \"checkbox\",\n    value: function checkbox(checked) {\n      return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\">';\n    }\n  }, {\n    key: \"paragraph\",\n    value: function paragraph(text) {\n      return \"<p>\".concat(text, \"</p>\\n\");\n    }\n  }, {\n    key: \"table\",\n    value: function table(header, body) {\n      if (body) body = \"<tbody>\".concat(body, \"</tbody>\");\n      return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n    }\n  }, {\n    key: \"tablerow\",\n    value: function tablerow(content) {\n      return \"<tr>\\n\".concat(content, \"</tr>\\n\");\n    }\n  }, {\n    key: \"tablecell\",\n    value: function tablecell(content, flags) {\n      var type = flags.header ? 'th' : 'td';\n      var tag = flags.align ? \"<\".concat(type, \" align=\\\"\").concat(flags.align, \"\\\">\") : \"<\".concat(type, \">\");\n      return tag + content + \"</\".concat(type, \">\\n\");\n    }\n    /**\n     * span level renderer\n     */\n  }, {\n    key: \"strong\",\n    value: function strong(text) {\n      return \"<strong>\".concat(text, \"</strong>\");\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return \"<em>\".concat(text, \"</em>\");\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return \"<code>\".concat(text, \"</code>\");\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '<br>';\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return \"<del>\".concat(text, \"</del>\");\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      var out = '<a href=\"' + href + '\"';\n      if (title) {\n        out += ' title=\"' + title + '\"';\n      }\n      out += '>' + text + '</a>';\n      return out;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      var cleanHref = cleanUrl(href);\n      if (cleanHref === null) {\n        return text;\n      }\n      href = cleanHref;\n      var out = \"<img src=\\\"\".concat(href, \"\\\" alt=\\\"\").concat(text, \"\\\"\");\n      if (title) {\n        out += \" title=\\\"\".concat(title, \"\\\"\");\n      }\n      out += '>';\n      return out;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text2) {\n      return _text2;\n    }\n  }]);\n  return _Renderer;\n}();\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar _TextRenderer = /*#__PURE__*/function () {\n  function _TextRenderer() {\n    _classCallCheck(this, _TextRenderer);\n  }\n  _createClass(_TextRenderer, [{\n    key: \"strong\",\n    value:\n    // no need for block level renderers\n    function strong(text) {\n      return text;\n    }\n  }, {\n    key: \"em\",\n    value: function em(text) {\n      return text;\n    }\n  }, {\n    key: \"codespan\",\n    value: function codespan(text) {\n      return text;\n    }\n  }, {\n    key: \"del\",\n    value: function del(text) {\n      return text;\n    }\n  }, {\n    key: \"html\",\n    value: function html(text) {\n      return text;\n    }\n  }, {\n    key: \"text\",\n    value: function text(_text3) {\n      return _text3;\n    }\n  }, {\n    key: \"link\",\n    value: function link(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"image\",\n    value: function image(href, title, text) {\n      return '' + text;\n    }\n  }, {\n    key: \"br\",\n    value: function br() {\n      return '';\n    }\n  }]);\n  return _TextRenderer;\n}();\n/**\n * Parsing & Compiling\n */\nvar _Parser = /*#__PURE__*/function () {\n  function _Parser(options) {\n    _classCallCheck(this, _Parser);\n    this.options = void 0;\n    this.renderer = void 0;\n    this.textRenderer = void 0;\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new _TextRenderer();\n  }\n  /**\n   * Static Parse Method\n   */\n  _createClass(_Parser, [{\n    key: \"parse\",\n    value:\n    /**\n     * Parse Loop\n     */\n    function parse(tokens) {\n      var top = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          var genericToken = token;\n          var ret = this.options.extensions.renderers[genericToken.type].call({\n            parser: this\n          }, genericToken);\n          if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'space':\n            {\n              continue;\n            }\n          case 'hr':\n            {\n              out += this.renderer.hr();\n              continue;\n            }\n          case 'heading':\n            {\n              var headingToken = token;\n              out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n              continue;\n            }\n          case 'code':\n            {\n              var codeToken = token;\n              out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n              continue;\n            }\n          case 'table':\n            {\n              var tableToken = token;\n              var header = '';\n              // header\n              var cell = '';\n              for (var j = 0; j < tableToken.header.length; j++) {\n                cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), {\n                  header: true,\n                  align: tableToken.align[j]\n                });\n              }\n              header += this.renderer.tablerow(cell);\n              var body = '';\n              for (var _j = 0; _j < tableToken.rows.length; _j++) {\n                var row = tableToken.rows[_j];\n                cell = '';\n                for (var k = 0; k < row.length; k++) {\n                  cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                    header: false,\n                    align: tableToken.align[k]\n                  });\n                }\n                body += this.renderer.tablerow(cell);\n              }\n              out += this.renderer.table(header, body);\n              continue;\n            }\n          case 'blockquote':\n            {\n              var blockquoteToken = token;\n              var _body = this.parse(blockquoteToken.tokens);\n              out += this.renderer.blockquote(_body);\n              continue;\n            }\n          case 'list':\n            {\n              var listToken = token;\n              var ordered = listToken.ordered;\n              var start = listToken.start;\n              var loose = listToken.loose;\n              var _body2 = '';\n              for (var _j2 = 0; _j2 < listToken.items.length; _j2++) {\n                var item = listToken.items[_j2];\n                var checked = item.checked;\n                var task = item.task;\n                var itemBody = '';\n                if (item.task) {\n                  var checkbox = this.renderer.checkbox(!!checked);\n                  if (loose) {\n                    if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                      item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                      if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                      }\n                    } else {\n                      item.tokens.unshift({\n                        type: 'text',\n                        text: checkbox + ' '\n                      });\n                    }\n                  } else {\n                    itemBody += checkbox + ' ';\n                  }\n                }\n                itemBody += this.parse(item.tokens, loose);\n                _body2 += this.renderer.listitem(itemBody, task, !!checked);\n              }\n              out += this.renderer.list(_body2, ordered, start);\n              continue;\n            }\n          case 'html':\n            {\n              var htmlToken = token;\n              out += this.renderer.html(htmlToken.text, htmlToken.block);\n              continue;\n            }\n          case 'paragraph':\n            {\n              var paragraphToken = token;\n              out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n              continue;\n            }\n          case 'text':\n            {\n              var textToken = token;\n              var _body3 = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n              while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                textToken = tokens[++i];\n                _body3 += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n              }\n              out += top ? this.renderer.paragraph(_body3) : _body3;\n              continue;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, renderer) {\n      renderer = renderer || this.renderer;\n      var out = '';\n      for (var i = 0; i < tokens.length; i++) {\n        var token = tokens[i];\n        // Run any renderer extensions\n        if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n          var ret = this.options.extensions.renderers[token.type].call({\n            parser: this\n          }, token);\n          if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n            out += ret || '';\n            continue;\n          }\n        }\n        switch (token.type) {\n          case 'escape':\n            {\n              var escapeToken = token;\n              out += renderer.text(escapeToken.text);\n              break;\n            }\n          case 'html':\n            {\n              var tagToken = token;\n              out += renderer.html(tagToken.text);\n              break;\n            }\n          case 'link':\n            {\n              var linkToken = token;\n              out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n              break;\n            }\n          case 'image':\n            {\n              var imageToken = token;\n              out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n              break;\n            }\n          case 'strong':\n            {\n              var strongToken = token;\n              out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n              break;\n            }\n          case 'em':\n            {\n              var emToken = token;\n              out += renderer.em(this.parseInline(emToken.tokens, renderer));\n              break;\n            }\n          case 'codespan':\n            {\n              var codespanToken = token;\n              out += renderer.codespan(codespanToken.text);\n              break;\n            }\n          case 'br':\n            {\n              out += renderer.br();\n              break;\n            }\n          case 'del':\n            {\n              var delToken = token;\n              out += renderer.del(this.parseInline(delToken.tokens, renderer));\n              break;\n            }\n          case 'text':\n            {\n              var textToken = token;\n              out += renderer.text(textToken.text);\n              break;\n            }\n          default:\n            {\n              var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n              if (this.options.silent) {\n                console.error(errMsg);\n                return '';\n              } else {\n                throw new Error(errMsg);\n              }\n            }\n        }\n      }\n      return out;\n    }\n  }], [{\n    key: \"parse\",\n    value: function parse(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n  }, {\n    key: \"parseInline\",\n    value: function parseInline(tokens, options) {\n      var parser = new _Parser(options);\n      return parser.parseInline(tokens);\n    }\n  }]);\n  return _Parser;\n}();\nvar _Hooks = /*#__PURE__*/function () {\n  function _Hooks(options) {\n    _classCallCheck(this, _Hooks);\n    this.options = void 0;\n    this.options = options || _defaults;\n  }\n  _createClass(_Hooks, [{\n    key: \"preprocess\",\n    value:\n    /**\n     * Process markdown before marked\n     */\n    function preprocess(markdown) {\n      return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n  }, {\n    key: \"postprocess\",\n    value: function postprocess(html) {\n      return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n  }, {\n    key: \"processAllTokens\",\n    value: function processAllTokens(tokens) {\n      return tokens;\n    }\n  }]);\n  return _Hooks;\n}();\n_Hooks.passThroughHooks = new Set(['preprocess', 'postprocess', 'processAllTokens']);\nvar _parseMarkdown = /*#__PURE__*/_classPrivateFieldLooseKey(\"parseMarkdown\");\nvar _onError = /*#__PURE__*/_classPrivateFieldLooseKey(\"onError\");\nvar Marked = /*#__PURE__*/function () {\n  function Marked() {\n    _classCallCheck(this, Marked);\n    Object.defineProperty(this, _onError, {\n      value: _onError2\n    });\n    Object.defineProperty(this, _parseMarkdown, {\n      value: _parseMarkdown2\n    });\n    this.defaults = _getDefaults();\n    this.options = this.setOptions;\n    this.parse = _classPrivateFieldLooseBase(this, _parseMarkdown)[_parseMarkdown](_Lexer.lex, _Parser.parse);\n    this.parseInline = _classPrivateFieldLooseBase(this, _parseMarkdown)[_parseMarkdown](_Lexer.lexInline, _Parser.parseInline);\n    this.Parser = _Parser;\n    this.Renderer = _Renderer;\n    this.TextRenderer = _TextRenderer;\n    this.Lexer = _Lexer;\n    this.Tokenizer = _Tokenizer;\n    this.Hooks = _Hooks;\n    this.use.apply(this, arguments);\n  }\n  /**\n   * Run callback for every token\n   */\n  _createClass(Marked, [{\n    key: \"walkTokens\",\n    value: function walkTokens(tokens, callback) {\n      var _this4 = this;\n      var values = [];\n      var _iterator4 = _createForOfIteratorHelper(tokens),\n        _step4;\n      try {\n        var _loop3 = function _loop3() {\n          var token = _step4.value;\n          values = values.concat(callback.call(_this4, token));\n          switch (token.type) {\n            case 'table':\n              {\n                var tableToken = token;\n                var _iterator5 = _createForOfIteratorHelper(tableToken.header),\n                  _step5;\n                try {\n                  for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                    var cell = _step5.value;\n                    values = values.concat(_this4.walkTokens(cell.tokens, callback));\n                  }\n                } catch (err) {\n                  _iterator5.e(err);\n                } finally {\n                  _iterator5.f();\n                }\n                var _iterator6 = _createForOfIteratorHelper(tableToken.rows),\n                  _step6;\n                try {\n                  for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n                    var row = _step6.value;\n                    var _iterator7 = _createForOfIteratorHelper(row),\n                      _step7;\n                    try {\n                      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n                        var _cell = _step7.value;\n                        values = values.concat(_this4.walkTokens(_cell.tokens, callback));\n                      }\n                    } catch (err) {\n                      _iterator7.e(err);\n                    } finally {\n                      _iterator7.f();\n                    }\n                  }\n                } catch (err) {\n                  _iterator6.e(err);\n                } finally {\n                  _iterator6.f();\n                }\n                break;\n              }\n            case 'list':\n              {\n                var listToken = token;\n                values = values.concat(_this4.walkTokens(listToken.items, callback));\n                break;\n              }\n            default:\n              {\n                var _this4$defaults$exten;\n                var genericToken = token;\n                if ((_this4$defaults$exten = _this4.defaults.extensions) !== null && _this4$defaults$exten !== void 0 && (_this4$defaults$exten = _this4$defaults$exten.childTokens) !== null && _this4$defaults$exten !== void 0 && _this4$defaults$exten[genericToken.type]) {\n                  _this4.defaults.extensions.childTokens[genericToken.type].forEach(function (childTokens) {\n                    var tokens = genericToken[childTokens].flat(Infinity);\n                    values = values.concat(_this4.walkTokens(tokens, callback));\n                  });\n                } else if (genericToken.tokens) {\n                  values = values.concat(_this4.walkTokens(genericToken.tokens, callback));\n                }\n              }\n          }\n        };\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          _loop3();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      return values;\n    }\n  }, {\n    key: \"use\",\n    value: function use() {\n      var _this5 = this;\n      var extensions = this.defaults.extensions || {\n        renderers: {},\n        childTokens: {}\n      };\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.forEach(function (pack) {\n        // copy options to new object\n        var opts = Object.assign({}, pack);\n        // set async to true if it was set to true before\n        opts.async = _this5.defaults.async || opts.async || false;\n        // ==-- Parse \"addon\" extensions --== //\n        if (pack.extensions) {\n          pack.extensions.forEach(function (ext) {\n            if (!ext.name) {\n              throw new Error('extension name required');\n            }\n            if ('renderer' in ext) {\n              // Renderer extensions\n              var prevRenderer = extensions.renderers[ext.name];\n              if (prevRenderer) {\n                // Replace extension with func to run new extension but fall back if false\n                extensions.renderers[ext.name] = function () {\n                  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                    args[_key2] = arguments[_key2];\n                  }\n                  var ret = ext.renderer.apply(this, args);\n                  if (ret === false) {\n                    ret = prevRenderer.apply(this, args);\n                  }\n                  return ret;\n                };\n              } else {\n                extensions.renderers[ext.name] = ext.renderer;\n              }\n            }\n            if ('tokenizer' in ext) {\n              // Tokenizer Extensions\n              if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n                throw new Error(\"extension level must be 'block' or 'inline'\");\n              }\n              var extLevel = extensions[ext.level];\n              if (extLevel) {\n                extLevel.unshift(ext.tokenizer);\n              } else {\n                extensions[ext.level] = [ext.tokenizer];\n              }\n              if (ext.start) {\n                // Function to check for start of token\n                if (ext.level === 'block') {\n                  if (extensions.startBlock) {\n                    extensions.startBlock.push(ext.start);\n                  } else {\n                    extensions.startBlock = [ext.start];\n                  }\n                } else if (ext.level === 'inline') {\n                  if (extensions.startInline) {\n                    extensions.startInline.push(ext.start);\n                  } else {\n                    extensions.startInline = [ext.start];\n                  }\n                }\n              }\n            }\n            if ('childTokens' in ext && ext.childTokens) {\n              // Child tokens to be visited by walkTokens\n              extensions.childTokens[ext.name] = ext.childTokens;\n            }\n          });\n          opts.extensions = extensions;\n        }\n        // ==-- Parse \"overwrite\" extensions --== //\n        if (pack.renderer) {\n          var renderer = _this5.defaults.renderer || new _Renderer(_this5.defaults);\n          var _loop4 = function _loop4() {\n            if (!(prop in renderer)) {\n              throw new Error(\"renderer '\".concat(prop, \"' does not exist\"));\n            }\n            if (prop === 'options') {\n              // ignore options property\n              return 1; // continue\n            }\n            var rendererProp = prop;\n            var rendererFunc = pack.renderer[rendererProp];\n            var prevRenderer = renderer[rendererProp];\n            // Replace renderer with func to run extension, but fall back if false\n            renderer[rendererProp] = function () {\n              for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                args[_key3] = arguments[_key3];\n              }\n              var ret = rendererFunc.apply(renderer, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(renderer, args);\n              }\n              return ret || '';\n            };\n          };\n          for (var prop in pack.renderer) {\n            if (_loop4()) continue;\n          }\n          opts.renderer = renderer;\n        }\n        if (pack.tokenizer) {\n          var tokenizer = _this5.defaults.tokenizer || new _Tokenizer(_this5.defaults);\n          var _loop5 = function _loop5() {\n            if (!(_prop in tokenizer)) {\n              throw new Error(\"tokenizer '\".concat(_prop, \"' does not exist\"));\n            }\n            if (['options', 'rules', 'lexer'].includes(_prop)) {\n              // ignore options, rules, and lexer properties\n              return 1; // continue\n            }\n            var tokenizerProp = _prop;\n            var tokenizerFunc = pack.tokenizer[tokenizerProp];\n            var prevTokenizer = tokenizer[tokenizerProp];\n            // Replace tokenizer with func to run extension, but fall back if false\n            // @ts-expect-error cannot type tokenizer function dynamically\n            tokenizer[tokenizerProp] = function () {\n              for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n                args[_key4] = arguments[_key4];\n              }\n              var ret = tokenizerFunc.apply(tokenizer, args);\n              if (ret === false) {\n                ret = prevTokenizer.apply(tokenizer, args);\n              }\n              return ret;\n            };\n          };\n          for (var _prop in pack.tokenizer) {\n            if (_loop5()) continue;\n          }\n          opts.tokenizer = tokenizer;\n        }\n        // ==-- Parse Hooks extensions --== //\n        if (pack.hooks) {\n          var hooks = _this5.defaults.hooks || new _Hooks();\n          var _loop6 = function _loop6() {\n            if (!(_prop2 in hooks)) {\n              throw new Error(\"hook '\".concat(_prop2, \"' does not exist\"));\n            }\n            if (_prop2 === 'options') {\n              // ignore options property\n              return 1; // continue\n            }\n            var hooksProp = _prop2;\n            var hooksFunc = pack.hooks[hooksProp];\n            var prevHook = hooks[hooksProp];\n            if (_Hooks.passThroughHooks.has(_prop2)) {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function (arg) {\n                if (_this5.defaults.async) {\n                  return Promise.resolve(hooksFunc.call(hooks, arg)).then(function (ret) {\n                    return prevHook.call(hooks, ret);\n                  });\n                }\n                var ret = hooksFunc.call(hooks, arg);\n                return prevHook.call(hooks, ret);\n              };\n            } else {\n              // @ts-expect-error cannot type hook function dynamically\n              hooks[hooksProp] = function () {\n                for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n                  args[_key5] = arguments[_key5];\n                }\n                var ret = hooksFunc.apply(hooks, args);\n                if (ret === false) {\n                  ret = prevHook.apply(hooks, args);\n                }\n                return ret;\n              };\n            }\n          };\n          for (var _prop2 in pack.hooks) {\n            if (_loop6()) continue;\n          }\n          opts.hooks = hooks;\n        }\n        // ==-- Parse WalkTokens extensions --== //\n        if (pack.walkTokens) {\n          var _walkTokens = _this5.defaults.walkTokens;\n          var packWalktokens = pack.walkTokens;\n          opts.walkTokens = function (token) {\n            var values = [];\n            values.push(packWalktokens.call(this, token));\n            if (_walkTokens) {\n              values = values.concat(_walkTokens.call(this, token));\n            }\n            return values;\n          };\n        }\n        _this5.defaults = Object.assign(Object.assign({}, _this5.defaults), opts);\n      });\n      return this;\n    }\n  }, {\n    key: \"setOptions\",\n    value: function setOptions(opt) {\n      this.defaults = Object.assign(Object.assign({}, this.defaults), opt);\n      return this;\n    }\n  }, {\n    key: \"lexer\",\n    value: function lexer(src, options) {\n      return _Lexer.lex(src, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }, {\n    key: \"parser\",\n    value: function parser(tokens, options) {\n      return _Parser.parse(tokens, options !== null && options !== void 0 ? options : this.defaults);\n    }\n  }]);\n  return Marked;\n}();\nfunction _parseMarkdown2(lexer, parser) {\n  var _this6 = this;\n  return function (src, options) {\n    var origOpt = Object.assign({}, options);\n    var opt = Object.assign(Object.assign({}, _this6.defaults), origOpt);\n    // Show warning if an extension set async to true but the parse was called with async: false\n    if (_this6.defaults.async === true && origOpt.async === false) {\n      if (!opt.silent) {\n        console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n      }\n      opt.async = true;\n    }\n    var throwError = _classPrivateFieldLooseBase(_this6, _onError)[_onError](!!opt.silent, !!opt.async);\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected'));\n    }\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src).then(function (src) {\n        return lexer(src, opt);\n      }).then(function (tokens) {\n        return opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens;\n      }).then(function (tokens) {\n        return opt.walkTokens ? Promise.all(_this6.walkTokens(tokens, opt.walkTokens)).then(function () {\n          return tokens;\n        }) : tokens;\n      }).then(function (tokens) {\n        return parser(tokens, opt);\n      }).then(function (html) {\n        return opt.hooks ? opt.hooks.postprocess(html) : html;\n      }).catch(throwError);\n    }\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      var tokens = lexer(src, opt);\n      if (opt.hooks) {\n        tokens = opt.hooks.processAllTokens(tokens);\n      }\n      if (opt.walkTokens) {\n        _this6.walkTokens(tokens, opt.walkTokens);\n      }\n      var _html2 = parser(tokens, opt);\n      if (opt.hooks) {\n        _html2 = opt.hooks.postprocess(_html2);\n      }\n      return _html2;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\nfunction _onError2(silent, async) {\n  return function (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (silent) {\n      var msg = '<p>An error occurred:</p><pre>' + escape$1(e.message + '', true) + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      return msg;\n    }\n    if (async) {\n      return Promise.reject(e);\n    }\n    throw e;\n  };\n}\nvar markedInstance = new Marked();\nfunction marked(src, opt) {\n  return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options = marked.setOptions = function (options) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function () {\n  markedInstance.use.apply(markedInstance, arguments);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = _Parser.parse;\nvar lexer = _Lexer.lex;\nexport { _Hooks as Hooks, _Lexer as Lexer, Marked, _Parser as Parser, _Renderer as Renderer, _TextRenderer as TextRenderer, _Tokenizer as Tokenizer, _defaults as defaults, _getDefaults as getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };","map":{"version":3,"names":["_getDefaults","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","_defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","RegExp","source","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape$1","escape","html","encode","test","replace","unescapeTest","unescape","_","n","toLowerCase","charAt","String","fromCharCode","parseInt","substring","caret","edit","regex","opt","obj","name","val","valSource","getRegex","cleanUrl","href","encodeURI","e","noopTest","exec","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","split","i","trim","shift","length","pop","splice","push","rtrim","c","invert","l","suffLen","currChar","slice","findClosingBracket","b","indexOf","level","outputLink","cap","link","raw","lexer","title","text","state","inLink","token","type","tokens","inlineTokens","indentCodeCompensation","matchIndentToCode","indentToCode","map","node","matchIndentInNode","_matchIndentInNode","_slicedToArray","indentInNode","join","_Tokenizer","options","_classCallCheck","rules","_createClass","key","value","space","src","block","newline","code","codeBlockStyle","fences","lang","inline","anyPunctuation","heading","trimmed","depth","hr","blockquote","top","blockTokens","list","bull","isordered","ordered","start","loose","items","concat","itemRegex","itemContents","endsWithBlankLine","endEarly","line","t","repeat","nextLine","indent","trimStart","search","blankLine","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","rawLine","istask","ischecked","task","checked","trimEnd","spacers","filter","hasMultipleLineBreaks","some","pre","def","tag","table","_this","headers","aligns","rows","item","header","align","_iterator","_createForOfIteratorHelper","_step","s","done","err","f","_iterator2","_step2","_iterator3","_step3","cell","lheading","paragraph","inRawBlock","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","reflink","links","nolink","linkString","emStrong","maskedSrc","prevChar","arguments","undefined","emStrongLDelim","nextChar","punctuation","lLength","_toConsumableArray","rDelim","rLength","delimTotal","midDelimTotal","endReg","emStrongRDelimAst","emStrongRDelimUnd","lastIndex","lastCharLength","index","codespan","hasNonSpaceChars","hasSpaceCharsOnBothEnds","br","del","autolink","url","prevCapZero","_this$rules$inline$_b","_this$rules$inline$_b2","_backpedal","inlineText","blockCode","bullet","_paragraph","blockText","_blockLabel","_tag","_comment","blockNormal","gfmTable","blockGfm","Object","assign","blockPedantic","inlineCode","_punctuation","blockSkip","_inlineComment","_inlineLabel","reflinkSearch","inlineNormal","inlinePedantic","inlineGfm","inlineBreaks","normal","_Lexer","inlineQueue","create","lex","next","_this2","leading","tabs","lastToken","cutSrc","lastParagraphClipped","_loop","extTokenizer","call","startBlock","startIndex","Infinity","tempSrc","tempStart","forEach","getStartIndex","errMsg","charCodeAt","console","error","Error","_ret","_this3","keepPrevChar","keys","includes","lastIndexOf","_loop2","startInline","_ret2","get","lexInline","_Renderer","infostring","_match","quote","body","startatt","listitem","checkbox","tablerow","content","tablecell","flags","strong","em","cleanHref","out","image","_TextRenderer","_Parser","textRenderer","parse","renderers","genericToken","ret","parser","headingToken","parseInline","codeToken","tableToken","j","k","blockquoteToken","listToken","itemBody","unshift","htmlToken","paragraphToken","textToken","escapeToken","tagToken","linkToken","imageToken","strongToken","emToken","codespanToken","delToken","_Hooks","preprocess","markdown","postprocess","processAllTokens","passThroughHooks","Set","_parseMarkdown","_classPrivateFieldLooseKey","_onError","Marked","defineProperty","_onError2","_parseMarkdown2","defaults","setOptions","_classPrivateFieldLooseBase","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","apply","callback","_this4","values","_iterator4","_step4","_loop3","_iterator5","_step5","_iterator6","_step6","_iterator7","_step7","_this4$defaults$exten","childTokens","flat","_this5","_len","args","Array","_key","pack","opts","ext","prevRenderer","_len2","_key2","extLevel","_loop4","prop","rendererProp","rendererFunc","_len3","_key3","_loop5","tokenizerProp","tokenizerFunc","prevTokenizer","_len4","_key4","_loop6","hooksProp","hooksFunc","prevHook","has","arg","Promise","resolve","then","_len5","_key5","packWalktokens","_this6","origOpt","warn","throwError","prototype","toString","all","catch","message","msg","reject","markedInstance","marked","getDefaults"],"sources":["../src/defaults.ts","../src/helpers.ts","../src/Tokenizer.ts","../src/rules.ts","../src/Lexer.ts","../src/Renderer.ts","../src/TextRenderer.ts","../src/Parser.ts","../src/Hooks.ts","../src/Instance.ts","../src/marked.ts"],"sourcesContent":["/**\n * Gets the original marked default options.\n */\nexport function _getDefaults() {\n    return {\n        async: false,\n        breaks: false,\n        extensions: null,\n        gfm: true,\n        hooks: null,\n        pedantic: false,\n        renderer: null,\n        silent: false,\n        tokenizer: null,\n        walkTokens: null\n    };\n}\nexport let _defaults = _getDefaults();\nexport function changeDefaults(newDefaults) {\n    _defaults = newDefaults;\n}\n","/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nexport function escape(html, encode) {\n    if (encode) {\n        if (escapeTest.test(html)) {\n            return html.replace(escapeReplace, getEscapeReplacement);\n        }\n    }\n    else {\n        if (escapeTestNoEncode.test(html)) {\n            return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n        }\n    }\n    return html;\n}\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\nexport function unescape(html) {\n    // explicitly match decimal, hex, and named HTML entities\n    return html.replace(unescapeTest, (_, n) => {\n        n = n.toLowerCase();\n        if (n === 'colon')\n            return ':';\n        if (n.charAt(0) === '#') {\n            return n.charAt(1) === 'x'\n                ? String.fromCharCode(parseInt(n.substring(2), 16))\n                : String.fromCharCode(+n.substring(1));\n        }\n        return '';\n    });\n}\nconst caret = /(^|[^\\[])\\^/g;\nexport function edit(regex, opt) {\n    let source = typeof regex === 'string' ? regex : regex.source;\n    opt = opt || '';\n    const obj = {\n        replace: (name, val) => {\n            let valSource = typeof val === 'string' ? val : val.source;\n            valSource = valSource.replace(caret, '$1');\n            source = source.replace(name, valSource);\n            return obj;\n        },\n        getRegex: () => {\n            return new RegExp(source, opt);\n        }\n    };\n    return obj;\n}\nexport function cleanUrl(href) {\n    try {\n        href = encodeURI(href).replace(/%25/g, '%');\n    }\n    catch (e) {\n        return null;\n    }\n    return href;\n}\nexport const noopTest = { exec: () => null };\nexport function splitCells(tableRow, count) {\n    // ensure that every cell-delimiting pipe has a space\n    // before it to distinguish it from an escaped pipe\n    const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n        let escaped = false;\n        let curr = offset;\n        while (--curr >= 0 && str[curr] === '\\\\')\n            escaped = !escaped;\n        if (escaped) {\n            // odd number of slashes means | is escaped\n            // so we leave it alone\n            return '|';\n        }\n        else {\n            // add space before unescaped |\n            return ' |';\n        }\n    }), cells = row.split(/ \\|/);\n    let i = 0;\n    // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n    if (!cells[0].trim()) {\n        cells.shift();\n    }\n    if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n        cells.pop();\n    }\n    if (count) {\n        if (cells.length > count) {\n            cells.splice(count);\n        }\n        else {\n            while (cells.length < count)\n                cells.push('');\n        }\n    }\n    for (; i < cells.length; i++) {\n        // leading or trailing whitespace is ignored per the gfm spec\n        cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n    }\n    return cells;\n}\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str, c, invert) {\n    const l = str.length;\n    if (l === 0) {\n        return '';\n    }\n    // Length of suffix matching the invert condition.\n    let suffLen = 0;\n    // Step left until we fail to match the invert condition.\n    while (suffLen < l) {\n        const currChar = str.charAt(l - suffLen - 1);\n        if (currChar === c && !invert) {\n            suffLen++;\n        }\n        else if (currChar !== c && invert) {\n            suffLen++;\n        }\n        else {\n            break;\n        }\n    }\n    return str.slice(0, l - suffLen);\n}\nexport function findClosingBracket(str, b) {\n    if (str.indexOf(b[1]) === -1) {\n        return -1;\n    }\n    let level = 0;\n    for (let i = 0; i < str.length; i++) {\n        if (str[i] === '\\\\') {\n            i++;\n        }\n        else if (str[i] === b[0]) {\n            level++;\n        }\n        else if (str[i] === b[1]) {\n            level--;\n            if (level < 0) {\n                return i;\n            }\n        }\n    }\n    return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport { rtrim, splitCells, escape, findClosingBracket } from './helpers.ts';\nfunction outputLink(cap, link, raw, lexer) {\n    const href = link.href;\n    const title = link.title ? escape(link.title) : null;\n    const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n    if (cap[0].charAt(0) !== '!') {\n        lexer.state.inLink = true;\n        const token = {\n            type: 'link',\n            raw,\n            href,\n            title,\n            text,\n            tokens: lexer.inlineTokens(text)\n        };\n        lexer.state.inLink = false;\n        return token;\n    }\n    return {\n        type: 'image',\n        raw,\n        href,\n        title,\n        text: escape(text)\n    };\n}\nfunction indentCodeCompensation(raw, text) {\n    const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n    if (matchIndentToCode === null) {\n        return text;\n    }\n    const indentToCode = matchIndentToCode[1];\n    return text\n        .split('\\n')\n        .map(node => {\n        const matchIndentInNode = node.match(/^\\s+/);\n        if (matchIndentInNode === null) {\n            return node;\n        }\n        const [indentInNode] = matchIndentInNode;\n        if (indentInNode.length >= indentToCode.length) {\n            return node.slice(indentToCode.length);\n        }\n        return node;\n    })\n        .join('\\n');\n}\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n    options;\n    rules; // set by the lexer\n    lexer; // set by the lexer\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    space(src) {\n        const cap = this.rules.block.newline.exec(src);\n        if (cap && cap[0].length > 0) {\n            return {\n                type: 'space',\n                raw: cap[0]\n            };\n        }\n    }\n    code(src) {\n        const cap = this.rules.block.code.exec(src);\n        if (cap) {\n            const text = cap[0].replace(/^ {1,4}/gm, '');\n            return {\n                type: 'code',\n                raw: cap[0],\n                codeBlockStyle: 'indented',\n                text: !this.options.pedantic\n                    ? rtrim(text, '\\n')\n                    : text\n            };\n        }\n    }\n    fences(src) {\n        const cap = this.rules.block.fences.exec(src);\n        if (cap) {\n            const raw = cap[0];\n            const text = indentCodeCompensation(raw, cap[3] || '');\n            return {\n                type: 'code',\n                raw,\n                lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n                text\n            };\n        }\n    }\n    heading(src) {\n        const cap = this.rules.block.heading.exec(src);\n        if (cap) {\n            let text = cap[2].trim();\n            // remove trailing #s\n            if (/#$/.test(text)) {\n                const trimmed = rtrim(text, '#');\n                if (this.options.pedantic) {\n                    text = trimmed.trim();\n                }\n                else if (!trimmed || / $/.test(trimmed)) {\n                    // CommonMark requires space before trailing #s\n                    text = trimmed.trim();\n                }\n            }\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[1].length,\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    hr(src) {\n        const cap = this.rules.block.hr.exec(src);\n        if (cap) {\n            return {\n                type: 'hr',\n                raw: cap[0]\n            };\n        }\n    }\n    blockquote(src) {\n        const cap = this.rules.block.blockquote.exec(src);\n        if (cap) {\n            const text = rtrim(cap[0].replace(/^ *>[ \\t]?/gm, ''), '\\n');\n            const top = this.lexer.state.top;\n            this.lexer.state.top = true;\n            const tokens = this.lexer.blockTokens(text);\n            this.lexer.state.top = top;\n            return {\n                type: 'blockquote',\n                raw: cap[0],\n                tokens,\n                text\n            };\n        }\n    }\n    list(src) {\n        let cap = this.rules.block.list.exec(src);\n        if (cap) {\n            let bull = cap[1].trim();\n            const isordered = bull.length > 1;\n            const list = {\n                type: 'list',\n                raw: '',\n                ordered: isordered,\n                start: isordered ? +bull.slice(0, -1) : '',\n                loose: false,\n                items: []\n            };\n            bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n            if (this.options.pedantic) {\n                bull = isordered ? bull : '[*+-]';\n            }\n            // Get next list item\n            const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n            let raw = '';\n            let itemContents = '';\n            let endsWithBlankLine = false;\n            // Check if current bullet point can start a new List Item\n            while (src) {\n                let endEarly = false;\n                if (!(cap = itemRegex.exec(src))) {\n                    break;\n                }\n                if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n                    break;\n                }\n                raw = cap[0];\n                src = src.substring(raw.length);\n                let line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n                let nextLine = src.split('\\n', 1)[0];\n                let indent = 0;\n                if (this.options.pedantic) {\n                    indent = 2;\n                    itemContents = line.trimStart();\n                }\n                else {\n                    indent = cap[2].search(/[^ ]/); // Find first non-space char\n                    indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n                    itemContents = line.slice(indent);\n                    indent += cap[1].length;\n                }\n                let blankLine = false;\n                if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n                    raw += nextLine + '\\n';\n                    src = src.substring(nextLine.length + 1);\n                    endEarly = true;\n                }\n                if (!endEarly) {\n                    const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n                    const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n                    const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n                    const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n                    // Check if following lines should be included in List Item\n                    while (src) {\n                        const rawLine = src.split('\\n', 1)[0];\n                        nextLine = rawLine;\n                        // Re-align to follow commonmark nesting rules\n                        if (this.options.pedantic) {\n                            nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n                        }\n                        // End list item if found code fences\n                        if (fencesBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new heading\n                        if (headingBeginRegex.test(nextLine)) {\n                            break;\n                        }\n                        // End list item if found start of new bullet\n                        if (nextBulletRegex.test(nextLine)) {\n                            break;\n                        }\n                        // Horizontal rule found\n                        if (hrRegex.test(src)) {\n                            break;\n                        }\n                        if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n                            itemContents += '\\n' + nextLine.slice(indent);\n                        }\n                        else {\n                            // not enough indentation\n                            if (blankLine) {\n                                break;\n                            }\n                            // paragraph continuation unless last line was a different block level element\n                            if (line.search(/[^ ]/) >= 4) { // indented code block\n                                break;\n                            }\n                            if (fencesBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (headingBeginRegex.test(line)) {\n                                break;\n                            }\n                            if (hrRegex.test(line)) {\n                                break;\n                            }\n                            itemContents += '\\n' + nextLine;\n                        }\n                        if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n                            blankLine = true;\n                        }\n                        raw += rawLine + '\\n';\n                        src = src.substring(rawLine.length + 1);\n                        line = nextLine.slice(indent);\n                    }\n                }\n                if (!list.loose) {\n                    // If the previous item ended with a blank line, the list is loose\n                    if (endsWithBlankLine) {\n                        list.loose = true;\n                    }\n                    else if (/\\n *\\n *$/.test(raw)) {\n                        endsWithBlankLine = true;\n                    }\n                }\n                let istask = null;\n                let ischecked;\n                // Check for task list items\n                if (this.options.gfm) {\n                    istask = /^\\[[ xX]\\] /.exec(itemContents);\n                    if (istask) {\n                        ischecked = istask[0] !== '[ ] ';\n                        itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n                    }\n                }\n                list.items.push({\n                    type: 'list_item',\n                    raw,\n                    task: !!istask,\n                    checked: ischecked,\n                    loose: false,\n                    text: itemContents,\n                    tokens: []\n                });\n                list.raw += raw;\n            }\n            // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n            list.items[list.items.length - 1].raw = raw.trimEnd();\n            (list.items[list.items.length - 1]).text = itemContents.trimEnd();\n            list.raw = list.raw.trimEnd();\n            // Item child tokens handled here at end because we needed to have the final item to trim it first\n            for (let i = 0; i < list.items.length; i++) {\n                this.lexer.state.top = false;\n                list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n                if (!list.loose) {\n                    // Check if list should be loose\n                    const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n                    const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n                    list.loose = hasMultipleLineBreaks;\n                }\n            }\n            // Set all items to loose if list is loose\n            if (list.loose) {\n                for (let i = 0; i < list.items.length; i++) {\n                    list.items[i].loose = true;\n                }\n            }\n            return list;\n        }\n    }\n    html(src) {\n        const cap = this.rules.block.html.exec(src);\n        if (cap) {\n            const token = {\n                type: 'html',\n                block: true,\n                raw: cap[0],\n                pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n                text: cap[0]\n            };\n            return token;\n        }\n    }\n    def(src) {\n        const cap = this.rules.block.def.exec(src);\n        if (cap) {\n            const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n            const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n            const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n            return {\n                type: 'def',\n                tag,\n                raw: cap[0],\n                href,\n                title\n            };\n        }\n    }\n    table(src) {\n        const cap = this.rules.block.table.exec(src);\n        if (!cap) {\n            return;\n        }\n        if (!/[:|]/.test(cap[2])) {\n            // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n            return;\n        }\n        const headers = splitCells(cap[1]);\n        const aligns = cap[2].replace(/^\\||\\| *$/g, '').split('|');\n        const rows = cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : [];\n        const item = {\n            type: 'table',\n            raw: cap[0],\n            header: [],\n            align: [],\n            rows: []\n        };\n        if (headers.length !== aligns.length) {\n            // header and align columns must be equal, rows can be different.\n            return;\n        }\n        for (const align of aligns) {\n            if (/^ *-+: *$/.test(align)) {\n                item.align.push('right');\n            }\n            else if (/^ *:-+: *$/.test(align)) {\n                item.align.push('center');\n            }\n            else if (/^ *:-+ *$/.test(align)) {\n                item.align.push('left');\n            }\n            else {\n                item.align.push(null);\n            }\n        }\n        for (const header of headers) {\n            item.header.push({\n                text: header,\n                tokens: this.lexer.inline(header)\n            });\n        }\n        for (const row of rows) {\n            item.rows.push(splitCells(row, item.header.length).map(cell => {\n                return {\n                    text: cell,\n                    tokens: this.lexer.inline(cell)\n                };\n            }));\n        }\n        return item;\n    }\n    lheading(src) {\n        const cap = this.rules.block.lheading.exec(src);\n        if (cap) {\n            return {\n                type: 'heading',\n                raw: cap[0],\n                depth: cap[2].charAt(0) === '=' ? 1 : 2,\n                text: cap[1],\n                tokens: this.lexer.inline(cap[1])\n            };\n        }\n    }\n    paragraph(src) {\n        const cap = this.rules.block.paragraph.exec(src);\n        if (cap) {\n            const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n                ? cap[1].slice(0, -1)\n                : cap[1];\n            return {\n                type: 'paragraph',\n                raw: cap[0],\n                text,\n                tokens: this.lexer.inline(text)\n            };\n        }\n    }\n    text(src) {\n        const cap = this.rules.block.text.exec(src);\n        if (cap) {\n            return {\n                type: 'text',\n                raw: cap[0],\n                text: cap[0],\n                tokens: this.lexer.inline(cap[0])\n            };\n        }\n    }\n    escape(src) {\n        const cap = this.rules.inline.escape.exec(src);\n        if (cap) {\n            return {\n                type: 'escape',\n                raw: cap[0],\n                text: escape(cap[1])\n            };\n        }\n    }\n    tag(src) {\n        const cap = this.rules.inline.tag.exec(src);\n        if (cap) {\n            if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n                this.lexer.state.inLink = true;\n            }\n            else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n                this.lexer.state.inLink = false;\n            }\n            if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = true;\n            }\n            else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n                this.lexer.state.inRawBlock = false;\n            }\n            return {\n                type: 'html',\n                raw: cap[0],\n                inLink: this.lexer.state.inLink,\n                inRawBlock: this.lexer.state.inRawBlock,\n                block: false,\n                text: cap[0]\n            };\n        }\n    }\n    link(src) {\n        const cap = this.rules.inline.link.exec(src);\n        if (cap) {\n            const trimmedUrl = cap[2].trim();\n            if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n                // commonmark requires matching angle brackets\n                if (!(/>$/.test(trimmedUrl))) {\n                    return;\n                }\n                // ending angle bracket cannot be escaped\n                const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n                if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n                    return;\n                }\n            }\n            else {\n                // find closing parenthesis\n                const lastParenIndex = findClosingBracket(cap[2], '()');\n                if (lastParenIndex > -1) {\n                    const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n                    const linkLen = start + cap[1].length + lastParenIndex;\n                    cap[2] = cap[2].substring(0, lastParenIndex);\n                    cap[0] = cap[0].substring(0, linkLen).trim();\n                    cap[3] = '';\n                }\n            }\n            let href = cap[2];\n            let title = '';\n            if (this.options.pedantic) {\n                // split pedantic href and title\n                const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n                if (link) {\n                    href = link[1];\n                    title = link[3];\n                }\n            }\n            else {\n                title = cap[3] ? cap[3].slice(1, -1) : '';\n            }\n            href = href.trim();\n            if (/^</.test(href)) {\n                if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n                    // pedantic allows starting angle bracket without ending angle bracket\n                    href = href.slice(1);\n                }\n                else {\n                    href = href.slice(1, -1);\n                }\n            }\n            return outputLink(cap, {\n                href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n                title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title\n            }, cap[0], this.lexer);\n        }\n    }\n    reflink(src, links) {\n        let cap;\n        if ((cap = this.rules.inline.reflink.exec(src))\n            || (cap = this.rules.inline.nolink.exec(src))) {\n            const linkString = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n            const link = links[linkString.toLowerCase()];\n            if (!link) {\n                const text = cap[0].charAt(0);\n                return {\n                    type: 'text',\n                    raw: text,\n                    text\n                };\n            }\n            return outputLink(cap, link, cap[0], this.lexer);\n        }\n    }\n    emStrong(src, maskedSrc, prevChar = '') {\n        let match = this.rules.inline.emStrongLDelim.exec(src);\n        if (!match)\n            return;\n        // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n        if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u))\n            return;\n        const nextChar = match[1] || match[2] || '';\n        if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n            // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n            const lLength = [...match[0]].length - 1;\n            let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n            const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n            endReg.lastIndex = 0;\n            // Clip maskedSrc to same section of string as src (move to lexer?)\n            maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n            while ((match = endReg.exec(maskedSrc)) != null) {\n                rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n                if (!rDelim)\n                    continue; // skip single * in __abc*abc__\n                rLength = [...rDelim].length;\n                if (match[3] || match[4]) { // found another Left Delim\n                    delimTotal += rLength;\n                    continue;\n                }\n                else if (match[5] || match[6]) { // either Left or Right Delim\n                    if (lLength % 3 && !((lLength + rLength) % 3)) {\n                        midDelimTotal += rLength;\n                        continue; // CommonMark Emphasis Rules 9-10\n                    }\n                }\n                delimTotal -= rLength;\n                if (delimTotal > 0)\n                    continue; // Haven't found enough closing delimiters\n                // Remove extra characters. *a*** -> *a*\n                rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n                // char length can be >1 for unicode characters;\n                const lastCharLength = [...match[0]][0].length;\n                const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n                // Create `em` if smallest delimiter has odd char count. *a***\n                if (Math.min(lLength, rLength) % 2) {\n                    const text = raw.slice(1, -1);\n                    return {\n                        type: 'em',\n                        raw,\n                        text,\n                        tokens: this.lexer.inlineTokens(text)\n                    };\n                }\n                // Create 'strong' if smallest delimiter has even char count. **a***\n                const text = raw.slice(2, -2);\n                return {\n                    type: 'strong',\n                    raw,\n                    text,\n                    tokens: this.lexer.inlineTokens(text)\n                };\n            }\n        }\n    }\n    codespan(src) {\n        const cap = this.rules.inline.code.exec(src);\n        if (cap) {\n            let text = cap[2].replace(/\\n/g, ' ');\n            const hasNonSpaceChars = /[^ ]/.test(text);\n            const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n            if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n                text = text.substring(1, text.length - 1);\n            }\n            text = escape(text, true);\n            return {\n                type: 'codespan',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n    br(src) {\n        const cap = this.rules.inline.br.exec(src);\n        if (cap) {\n            return {\n                type: 'br',\n                raw: cap[0]\n            };\n        }\n    }\n    del(src) {\n        const cap = this.rules.inline.del.exec(src);\n        if (cap) {\n            return {\n                type: 'del',\n                raw: cap[0],\n                text: cap[2],\n                tokens: this.lexer.inlineTokens(cap[2])\n            };\n        }\n    }\n    autolink(src) {\n        const cap = this.rules.inline.autolink.exec(src);\n        if (cap) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[1]);\n                href = 'mailto:' + text;\n            }\n            else {\n                text = escape(cap[1]);\n                href = text;\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    url(src) {\n        let cap;\n        if (cap = this.rules.inline.url.exec(src)) {\n            let text, href;\n            if (cap[2] === '@') {\n                text = escape(cap[0]);\n                href = 'mailto:' + text;\n            }\n            else {\n                // do extended autolink path validation\n                let prevCapZero;\n                do {\n                    prevCapZero = cap[0];\n                    cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n                } while (prevCapZero !== cap[0]);\n                text = escape(cap[0]);\n                if (cap[1] === 'www.') {\n                    href = 'http://' + cap[0];\n                }\n                else {\n                    href = cap[0];\n                }\n            }\n            return {\n                type: 'link',\n                raw: cap[0],\n                text,\n                href,\n                tokens: [\n                    {\n                        type: 'text',\n                        raw: text,\n                        text\n                    }\n                ]\n            };\n        }\n    }\n    inlineText(src) {\n        const cap = this.rules.inline.text.exec(src);\n        if (cap) {\n            let text;\n            if (this.lexer.state.inRawBlock) {\n                text = cap[0];\n            }\n            else {\n                text = escape(cap[0]);\n            }\n            return {\n                type: 'text',\n                raw: cap[0],\n                text\n            };\n        }\n    }\n}\n","import { edit, noopTest } from './helpers.ts';\n/**\n * Block-Level Grammar\n */\nconst newline = /^(?: *(?:\\n|$))+/;\nconst blockCode = /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheading = edit(/^(?!bull )((?:.|\\n(?!\\s*?\\n|bull ))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/)\n    .replace(/bull/g, bullet) // lists can interrupt\n    .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/)\n    .replace('label', _blockLabel)\n    .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n    .getRegex();\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n    .replace(/bull/g, bullet)\n    .getRegex();\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n    + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n    + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n    + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n    + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n    + '|track|ul';\nconst _comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nconst html = edit('^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')', 'i')\n    .replace('comment', _comment)\n    .replace('tag', _tag)\n    .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst paragraph = edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n    .replace('paragraph', paragraph)\n    .getRegex();\n/**\n * Normal Block Grammar\n */\nconst blockNormal = {\n    blockquote,\n    code: blockCode,\n    def,\n    fences,\n    heading,\n    hr,\n    html,\n    lheading,\n    list,\n    newline,\n    paragraph,\n    table: noopTest,\n    text: blockText\n};\n/**\n * GFM Block Grammar\n */\nconst gfmTable = edit('^ *([^\\\\n ].*)\\\\n' // Header\n    + ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('blockquote', ' {0,3}>')\n    .replace('code', ' {4}[^\\\\n]')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n    .getRegex();\nconst blockGfm = {\n    ...blockNormal,\n    table: gfmTable,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n        .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n        .replace('table', gfmTable) // interrupt paragraphs with table\n        .replace('blockquote', ' {0,3}>')\n        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n        .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n        .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n        .getRegex()\n};\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\nconst blockPedantic = {\n    ...blockNormal,\n    html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)'\n        + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n        + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n        .replace('comment', _comment)\n        .replace(/tag/g, '(?!(?:'\n        + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n        + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n        + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n        .getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: noopTest, // fences not supported\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: edit(_paragraph)\n        .replace('hr', hr)\n        .replace('heading', ' *#{1,6} *[^\\n]')\n        .replace('lheading', lheading)\n        .replace('|table', '')\n        .replace('blockquote', ' {0,3}>')\n        .replace('|fences', '')\n        .replace('|list', '')\n        .replace('|html', '')\n        .replace('|tag', '')\n        .getRegex()\n};\n/**\n * Inline-Level Grammar\n */\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = '\\\\p{P}$+<=>`^|~';\nconst punctuation = edit(/^((?![*_])[\\spunctuation])/, 'u')\n    .replace(/punctuation/g, _punctuation).getRegex();\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\([^\\(\\)]*?\\)|`[^`]*?`|<[^<>]*?>/g;\nconst emStrongLDelim = edit(/^(?:\\*+(?:((?!\\*)[punct])|[^\\s*]))|^_+(?:((?!_)[punct])|([^\\s_]))/, 'u')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst emStrongRDelimAst = edit('^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n    + '|[^*]+(?=[^*])' // Consume to delim\n    + '|(?!\\\\*)[punct](\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?!\\\\*)(?=[punct\\\\s]|$)' // (2) a***#, a*** can only be a Right Delimiter\n    + '|(?!\\\\*)[punct\\\\s](\\\\*+)(?=[^punct\\\\s])' // (3) #***a, ***a can only be Left Delimiter\n    + '|[\\\\s](\\\\*+)(?!\\\\*)(?=[punct])' // (4) ***# can only be Left Delimiter\n    + '|(?!\\\\*)[punct](\\\\*+)(?!\\\\*)(?=[punct])' // (5) #***# can be either Left or Right Delimiter\n    + '|[^punct\\\\s](\\\\*+)(?=[^punct\\\\s])', 'gu') // (6) a***a can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit('^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n    + '|[^_]+(?=[^_])' // Consume to delim\n    + '|(?!_)[punct](_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n    + '|[^punct\\\\s](_+)(?!_)(?=[punct\\\\s]|$)' // (2) a___#, a___ can only be a Right Delimiter\n    + '|(?!_)[punct\\\\s](_+)(?=[^punct\\\\s])' // (3) #___a, ___a can only be Left Delimiter\n    + '|[\\\\s](_+)(?!_)(?=[punct])' // (4) ___# can only be Left Delimiter\n    + '|(?!_)[punct](_+)(?!_)(?=[punct])', 'gu') // (5) #___# can be either Left or Right Delimiter\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst anyPunctuation = edit(/\\\\([punct])/, 'gu')\n    .replace(/punct/g, _punctuation)\n    .getRegex();\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n    .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n    .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n    .getRegex();\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit('^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n    .replace('comment', _inlineComment)\n    .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n    .getRegex();\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/)\n    .replace('label', _inlineLabel)\n    .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/)\n    .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n    .getRegex();\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n    .replace('label', _inlineLabel)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n    .replace('ref', _blockLabel)\n    .getRegex();\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n    .replace('reflink', reflink)\n    .replace('nolink', nolink)\n    .getRegex();\n/**\n * Normal Inline Grammar\n */\nconst inlineNormal = {\n    _backpedal: noopTest, // only used for GFM url\n    anyPunctuation,\n    autolink,\n    blockSkip,\n    br,\n    code: inlineCode,\n    del: noopTest,\n    emStrongLDelim,\n    emStrongRDelimAst,\n    emStrongRDelimUnd,\n    escape,\n    link,\n    nolink,\n    punctuation,\n    reflink,\n    reflinkSearch,\n    tag,\n    text: inlineText,\n    url: noopTest\n};\n/**\n * Pedantic Inline Grammar\n */\nconst inlinePedantic = {\n    ...inlineNormal,\n    link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n        .replace('label', _inlineLabel)\n        .getRegex(),\n    reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n        .replace('label', _inlineLabel)\n        .getRegex()\n};\n/**\n * GFM Inline Grammar\n */\nconst inlineGfm = {\n    ...inlineNormal,\n    escape: edit(escape).replace('])', '~|])').getRegex(),\n    url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n        .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n        .getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n/**\n * GFM + Line Breaks Inline Grammar\n */\nconst inlineBreaks = {\n    ...inlineGfm,\n    br: edit(br).replace('{2,}', '*').getRegex(),\n    text: edit(inlineGfm.text)\n        .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n        .replace(/\\{2,\\}/g, '*')\n        .getRegex()\n};\n/**\n * exports\n */\nexport const block = {\n    normal: blockNormal,\n    gfm: blockGfm,\n    pedantic: blockPedantic\n};\nexport const inline = {\n    normal: inlineNormal,\n    gfm: inlineGfm,\n    breaks: inlineBreaks,\n    pedantic: inlinePedantic\n};\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { block, inline } from './rules.ts';\n/**\n * Block Lexer\n */\nexport class _Lexer {\n    tokens;\n    options;\n    state;\n    tokenizer;\n    inlineQueue;\n    constructor(options) {\n        // TokenList cannot be created in one go\n        this.tokens = [];\n        this.tokens.links = Object.create(null);\n        this.options = options || _defaults;\n        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n        this.tokenizer = this.options.tokenizer;\n        this.tokenizer.options = this.options;\n        this.tokenizer.lexer = this;\n        this.inlineQueue = [];\n        this.state = {\n            inLink: false,\n            inRawBlock: false,\n            top: true\n        };\n        const rules = {\n            block: block.normal,\n            inline: inline.normal\n        };\n        if (this.options.pedantic) {\n            rules.block = block.pedantic;\n            rules.inline = inline.pedantic;\n        }\n        else if (this.options.gfm) {\n            rules.block = block.gfm;\n            if (this.options.breaks) {\n                rules.inline = inline.breaks;\n            }\n            else {\n                rules.inline = inline.gfm;\n            }\n        }\n        this.tokenizer.rules = rules;\n    }\n    /**\n     * Expose Rules\n     */\n    static get rules() {\n        return {\n            block,\n            inline\n        };\n    }\n    /**\n     * Static Lex Method\n     */\n    static lex(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.lex(src);\n    }\n    /**\n     * Static Lex Inline Method\n     */\n    static lexInline(src, options) {\n        const lexer = new _Lexer(options);\n        return lexer.inlineTokens(src);\n    }\n    /**\n     * Preprocessing\n     */\n    lex(src) {\n        src = src\n            .replace(/\\r\\n|\\r/g, '\\n');\n        this.blockTokens(src, this.tokens);\n        for (let i = 0; i < this.inlineQueue.length; i++) {\n            const next = this.inlineQueue[i];\n            this.inlineTokens(next.src, next.tokens);\n        }\n        this.inlineQueue = [];\n        return this.tokens;\n    }\n    blockTokens(src, tokens = []) {\n        if (this.options.pedantic) {\n            src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n        }\n        else {\n            src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n                return leading + '    '.repeat(tabs.length);\n            });\n        }\n        let token;\n        let lastToken;\n        let cutSrc;\n        let lastParagraphClipped;\n        while (src) {\n            if (this.options.extensions\n                && this.options.extensions.block\n                && this.options.extensions.block.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // newline\n            if (token = this.tokenizer.space(src)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.length === 1 && tokens.length > 0) {\n                    // if there's a single \\n as a spacer, it's terminating the last line,\n                    // so move it there so that we don't get unnecessary paragraph tags\n                    tokens[tokens.length - 1].raw += '\\n';\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.code(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                // An indented code block cannot interrupt a paragraph.\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // fences\n            if (token = this.tokenizer.fences(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // heading\n            if (token = this.tokenizer.heading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // hr\n            if (token = this.tokenizer.hr(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // blockquote\n            if (token = this.tokenizer.blockquote(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // list\n            if (token = this.tokenizer.list(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // html\n            if (token = this.tokenizer.html(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // def\n            if (token = this.tokenizer.def(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.raw;\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else if (!this.tokens.links[token.tag]) {\n                    this.tokens.links[token.tag] = {\n                        href: token.href,\n                        title: token.title\n                    };\n                }\n                continue;\n            }\n            // table (gfm)\n            if (token = this.tokenizer.table(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // lheading\n            if (token = this.tokenizer.lheading(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // top-level paragraph\n            // prevent paragraph consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startBlock) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startBlock.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n                lastToken = tokens[tokens.length - 1];\n                if (lastParagraphClipped && lastToken.type === 'paragraph') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                lastParagraphClipped = (cutSrc.length !== src.length);\n                src = src.substring(token.raw.length);\n                continue;\n            }\n            // text\n            if (token = this.tokenizer.text(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += '\\n' + token.raw;\n                    lastToken.text += '\\n' + token.text;\n                    this.inlineQueue.pop();\n                    this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        this.state.top = true;\n        return tokens;\n    }\n    inline(src, tokens = []) {\n        this.inlineQueue.push({ src, tokens });\n        return tokens;\n    }\n    /**\n     * Lexing/Compiling\n     */\n    inlineTokens(src, tokens = []) {\n        let token, lastToken, cutSrc;\n        // String with links masked to avoid interference with em and strong\n        let maskedSrc = src;\n        let match;\n        let keepPrevChar, prevChar;\n        // Mask out reflinks\n        if (this.tokens.links) {\n            const links = Object.keys(this.tokens.links);\n            if (links.length > 0) {\n                while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n                    if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n                        maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n                    }\n                }\n            }\n        }\n        // Mask out other blocks\n        while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n        }\n        // Mask out escaped characters\n        while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n        }\n        while (src) {\n            if (!keepPrevChar) {\n                prevChar = '';\n            }\n            keepPrevChar = false;\n            // extensions\n            if (this.options.extensions\n                && this.options.extensions.inline\n                && this.options.extensions.inline.some((extTokenizer) => {\n                    if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n                        src = src.substring(token.raw.length);\n                        tokens.push(token);\n                        return true;\n                    }\n                    return false;\n                })) {\n                continue;\n            }\n            // escape\n            if (token = this.tokenizer.escape(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // tag\n            if (token = this.tokenizer.tag(src)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // link\n            if (token = this.tokenizer.link(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // reflink, nolink\n            if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n                src = src.substring(token.raw.length);\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            // em & strong\n            if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // code\n            if (token = this.tokenizer.codespan(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // br\n            if (token = this.tokenizer.br(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // del (gfm)\n            if (token = this.tokenizer.del(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // autolink\n            if (token = this.tokenizer.autolink(src)) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // url (gfm)\n            if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n                src = src.substring(token.raw.length);\n                tokens.push(token);\n                continue;\n            }\n            // text\n            // prevent inlineText consuming extensions by clipping 'src' to extension start\n            cutSrc = src;\n            if (this.options.extensions && this.options.extensions.startInline) {\n                let startIndex = Infinity;\n                const tempSrc = src.slice(1);\n                let tempStart;\n                this.options.extensions.startInline.forEach((getStartIndex) => {\n                    tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n                    if (typeof tempStart === 'number' && tempStart >= 0) {\n                        startIndex = Math.min(startIndex, tempStart);\n                    }\n                });\n                if (startIndex < Infinity && startIndex >= 0) {\n                    cutSrc = src.substring(0, startIndex + 1);\n                }\n            }\n            if (token = this.tokenizer.inlineText(cutSrc)) {\n                src = src.substring(token.raw.length);\n                if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n                    prevChar = token.raw.slice(-1);\n                }\n                keepPrevChar = true;\n                lastToken = tokens[tokens.length - 1];\n                if (lastToken && lastToken.type === 'text') {\n                    lastToken.raw += token.raw;\n                    lastToken.text += token.text;\n                }\n                else {\n                    tokens.push(token);\n                }\n                continue;\n            }\n            if (src) {\n                const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n                if (this.options.silent) {\n                    console.error(errMsg);\n                    break;\n                }\n                else {\n                    throw new Error(errMsg);\n                }\n            }\n        }\n        return tokens;\n    }\n}\n","import { _defaults } from './defaults.ts';\nimport { cleanUrl, escape } from './helpers.ts';\n/**\n * Renderer\n */\nexport class _Renderer {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    code(code, infostring, escaped) {\n        const lang = (infostring || '').match(/^\\S*/)?.[0];\n        code = code.replace(/\\n$/, '') + '\\n';\n        if (!lang) {\n            return '<pre><code>'\n                + (escaped ? code : escape(code, true))\n                + '</code></pre>\\n';\n        }\n        return '<pre><code class=\"language-'\n            + escape(lang)\n            + '\">'\n            + (escaped ? code : escape(code, true))\n            + '</code></pre>\\n';\n    }\n    blockquote(quote) {\n        return `<blockquote>\\n${quote}</blockquote>\\n`;\n    }\n    html(html, block) {\n        return html;\n    }\n    heading(text, level, raw) {\n        // ignore IDs\n        return `<h${level}>${text}</h${level}>\\n`;\n    }\n    hr() {\n        return '<hr>\\n';\n    }\n    list(body, ordered, start) {\n        const type = ordered ? 'ol' : 'ul';\n        const startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n        return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n    }\n    listitem(text, task, checked) {\n        return `<li>${text}</li>\\n`;\n    }\n    checkbox(checked) {\n        return '<input '\n            + (checked ? 'checked=\"\" ' : '')\n            + 'disabled=\"\" type=\"checkbox\">';\n    }\n    paragraph(text) {\n        return `<p>${text}</p>\\n`;\n    }\n    table(header, body) {\n        if (body)\n            body = `<tbody>${body}</tbody>`;\n        return '<table>\\n'\n            + '<thead>\\n'\n            + header\n            + '</thead>\\n'\n            + body\n            + '</table>\\n';\n    }\n    tablerow(content) {\n        return `<tr>\\n${content}</tr>\\n`;\n    }\n    tablecell(content, flags) {\n        const type = flags.header ? 'th' : 'td';\n        const tag = flags.align\n            ? `<${type} align=\"${flags.align}\">`\n            : `<${type}>`;\n        return tag + content + `</${type}>\\n`;\n    }\n    /**\n     * span level renderer\n     */\n    strong(text) {\n        return `<strong>${text}</strong>`;\n    }\n    em(text) {\n        return `<em>${text}</em>`;\n    }\n    codespan(text) {\n        return `<code>${text}</code>`;\n    }\n    br() {\n        return '<br>';\n    }\n    del(text) {\n        return `<del>${text}</del>`;\n    }\n    link(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = '<a href=\"' + href + '\"';\n        if (title) {\n            out += ' title=\"' + title + '\"';\n        }\n        out += '>' + text + '</a>';\n        return out;\n    }\n    image(href, title, text) {\n        const cleanHref = cleanUrl(href);\n        if (cleanHref === null) {\n            return text;\n        }\n        href = cleanHref;\n        let out = `<img src=\"${href}\" alt=\"${text}\"`;\n        if (title) {\n            out += ` title=\"${title}\"`;\n        }\n        out += '>';\n        return out;\n    }\n    text(text) {\n        return text;\n    }\n}\n","/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n    // no need for block level renderers\n    strong(text) {\n        return text;\n    }\n    em(text) {\n        return text;\n    }\n    codespan(text) {\n        return text;\n    }\n    del(text) {\n        return text;\n    }\n    html(text) {\n        return text;\n    }\n    text(text) {\n        return text;\n    }\n    link(href, title, text) {\n        return '' + text;\n    }\n    image(href, title, text) {\n        return '' + text;\n    }\n    br() {\n        return '';\n    }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport { unescape } from './helpers.ts';\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n    options;\n    renderer;\n    textRenderer;\n    constructor(options) {\n        this.options = options || _defaults;\n        this.options.renderer = this.options.renderer || new _Renderer();\n        this.renderer = this.options.renderer;\n        this.renderer.options = this.options;\n        this.textRenderer = new _TextRenderer();\n    }\n    /**\n     * Static Parse Method\n     */\n    static parse(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parse(tokens);\n    }\n    /**\n     * Static Parse Inline Method\n     */\n    static parseInline(tokens, options) {\n        const parser = new _Parser(options);\n        return parser.parseInline(tokens);\n    }\n    /**\n     * Parse Loop\n     */\n    parse(tokens, top = true) {\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const genericToken = token;\n                const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n                if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'space': {\n                    continue;\n                }\n                case 'hr': {\n                    out += this.renderer.hr();\n                    continue;\n                }\n                case 'heading': {\n                    const headingToken = token;\n                    out += this.renderer.heading(this.parseInline(headingToken.tokens), headingToken.depth, unescape(this.parseInline(headingToken.tokens, this.textRenderer)));\n                    continue;\n                }\n                case 'code': {\n                    const codeToken = token;\n                    out += this.renderer.code(codeToken.text, codeToken.lang, !!codeToken.escaped);\n                    continue;\n                }\n                case 'table': {\n                    const tableToken = token;\n                    let header = '';\n                    // header\n                    let cell = '';\n                    for (let j = 0; j < tableToken.header.length; j++) {\n                        cell += this.renderer.tablecell(this.parseInline(tableToken.header[j].tokens), { header: true, align: tableToken.align[j] });\n                    }\n                    header += this.renderer.tablerow(cell);\n                    let body = '';\n                    for (let j = 0; j < tableToken.rows.length; j++) {\n                        const row = tableToken.rows[j];\n                        cell = '';\n                        for (let k = 0; k < row.length; k++) {\n                            cell += this.renderer.tablecell(this.parseInline(row[k].tokens), { header: false, align: tableToken.align[k] });\n                        }\n                        body += this.renderer.tablerow(cell);\n                    }\n                    out += this.renderer.table(header, body);\n                    continue;\n                }\n                case 'blockquote': {\n                    const blockquoteToken = token;\n                    const body = this.parse(blockquoteToken.tokens);\n                    out += this.renderer.blockquote(body);\n                    continue;\n                }\n                case 'list': {\n                    const listToken = token;\n                    const ordered = listToken.ordered;\n                    const start = listToken.start;\n                    const loose = listToken.loose;\n                    let body = '';\n                    for (let j = 0; j < listToken.items.length; j++) {\n                        const item = listToken.items[j];\n                        const checked = item.checked;\n                        const task = item.task;\n                        let itemBody = '';\n                        if (item.task) {\n                            const checkbox = this.renderer.checkbox(!!checked);\n                            if (loose) {\n                                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                                        item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                                    }\n                                }\n                                else {\n                                    item.tokens.unshift({\n                                        type: 'text',\n                                        text: checkbox + ' '\n                                    });\n                                }\n                            }\n                            else {\n                                itemBody += checkbox + ' ';\n                            }\n                        }\n                        itemBody += this.parse(item.tokens, loose);\n                        body += this.renderer.listitem(itemBody, task, !!checked);\n                    }\n                    out += this.renderer.list(body, ordered, start);\n                    continue;\n                }\n                case 'html': {\n                    const htmlToken = token;\n                    out += this.renderer.html(htmlToken.text, htmlToken.block);\n                    continue;\n                }\n                case 'paragraph': {\n                    const paragraphToken = token;\n                    out += this.renderer.paragraph(this.parseInline(paragraphToken.tokens));\n                    continue;\n                }\n                case 'text': {\n                    let textToken = token;\n                    let body = textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text;\n                    while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n                        textToken = tokens[++i];\n                        body += '\\n' + (textToken.tokens ? this.parseInline(textToken.tokens) : textToken.text);\n                    }\n                    out += top ? this.renderer.paragraph(body) : body;\n                    continue;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n    /**\n     * Parse Inline Tokens\n     */\n    parseInline(tokens, renderer) {\n        renderer = renderer || this.renderer;\n        let out = '';\n        for (let i = 0; i < tokens.length; i++) {\n            const token = tokens[i];\n            // Run any renderer extensions\n            if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n                const ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n                if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n                    out += ret || '';\n                    continue;\n                }\n            }\n            switch (token.type) {\n                case 'escape': {\n                    const escapeToken = token;\n                    out += renderer.text(escapeToken.text);\n                    break;\n                }\n                case 'html': {\n                    const tagToken = token;\n                    out += renderer.html(tagToken.text);\n                    break;\n                }\n                case 'link': {\n                    const linkToken = token;\n                    out += renderer.link(linkToken.href, linkToken.title, this.parseInline(linkToken.tokens, renderer));\n                    break;\n                }\n                case 'image': {\n                    const imageToken = token;\n                    out += renderer.image(imageToken.href, imageToken.title, imageToken.text);\n                    break;\n                }\n                case 'strong': {\n                    const strongToken = token;\n                    out += renderer.strong(this.parseInline(strongToken.tokens, renderer));\n                    break;\n                }\n                case 'em': {\n                    const emToken = token;\n                    out += renderer.em(this.parseInline(emToken.tokens, renderer));\n                    break;\n                }\n                case 'codespan': {\n                    const codespanToken = token;\n                    out += renderer.codespan(codespanToken.text);\n                    break;\n                }\n                case 'br': {\n                    out += renderer.br();\n                    break;\n                }\n                case 'del': {\n                    const delToken = token;\n                    out += renderer.del(this.parseInline(delToken.tokens, renderer));\n                    break;\n                }\n                case 'text': {\n                    const textToken = token;\n                    out += renderer.text(textToken.text);\n                    break;\n                }\n                default: {\n                    const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n                    if (this.options.silent) {\n                        console.error(errMsg);\n                        return '';\n                    }\n                    else {\n                        throw new Error(errMsg);\n                    }\n                }\n            }\n        }\n        return out;\n    }\n}\n","import { _defaults } from './defaults.ts';\nexport class _Hooks {\n    options;\n    constructor(options) {\n        this.options = options || _defaults;\n    }\n    static passThroughHooks = new Set([\n        'preprocess',\n        'postprocess',\n        'processAllTokens'\n    ]);\n    /**\n     * Process markdown before marked\n     */\n    preprocess(markdown) {\n        return markdown;\n    }\n    /**\n     * Process HTML after marked is finished\n     */\n    postprocess(html) {\n        return html;\n    }\n    /**\n     * Process all tokens before walk tokens\n     */\n    processAllTokens(tokens) {\n        return tokens;\n    }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nexport class Marked {\n    defaults = _getDefaults();\n    options = this.setOptions;\n    parse = this.#parseMarkdown(_Lexer.lex, _Parser.parse);\n    parseInline = this.#parseMarkdown(_Lexer.lexInline, _Parser.parseInline);\n    Parser = _Parser;\n    Renderer = _Renderer;\n    TextRenderer = _TextRenderer;\n    Lexer = _Lexer;\n    Tokenizer = _Tokenizer;\n    Hooks = _Hooks;\n    constructor(...args) {\n        this.use(...args);\n    }\n    /**\n     * Run callback for every token\n     */\n    walkTokens(tokens, callback) {\n        let values = [];\n        for (const token of tokens) {\n            values = values.concat(callback.call(this, token));\n            switch (token.type) {\n                case 'table': {\n                    const tableToken = token;\n                    for (const cell of tableToken.header) {\n                        values = values.concat(this.walkTokens(cell.tokens, callback));\n                    }\n                    for (const row of tableToken.rows) {\n                        for (const cell of row) {\n                            values = values.concat(this.walkTokens(cell.tokens, callback));\n                        }\n                    }\n                    break;\n                }\n                case 'list': {\n                    const listToken = token;\n                    values = values.concat(this.walkTokens(listToken.items, callback));\n                    break;\n                }\n                default: {\n                    const genericToken = token;\n                    if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n                        this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n                            const tokens = genericToken[childTokens].flat(Infinity);\n                            values = values.concat(this.walkTokens(tokens, callback));\n                        });\n                    }\n                    else if (genericToken.tokens) {\n                        values = values.concat(this.walkTokens(genericToken.tokens, callback));\n                    }\n                }\n            }\n        }\n        return values;\n    }\n    use(...args) {\n        const extensions = this.defaults.extensions || { renderers: {}, childTokens: {} };\n        args.forEach((pack) => {\n            // copy options to new object\n            const opts = { ...pack };\n            // set async to true if it was set to true before\n            opts.async = this.defaults.async || opts.async || false;\n            // ==-- Parse \"addon\" extensions --== //\n            if (pack.extensions) {\n                pack.extensions.forEach((ext) => {\n                    if (!ext.name) {\n                        throw new Error('extension name required');\n                    }\n                    if ('renderer' in ext) { // Renderer extensions\n                        const prevRenderer = extensions.renderers[ext.name];\n                        if (prevRenderer) {\n                            // Replace extension with func to run new extension but fall back if false\n                            extensions.renderers[ext.name] = function (...args) {\n                                let ret = ext.renderer.apply(this, args);\n                                if (ret === false) {\n                                    ret = prevRenderer.apply(this, args);\n                                }\n                                return ret;\n                            };\n                        }\n                        else {\n                            extensions.renderers[ext.name] = ext.renderer;\n                        }\n                    }\n                    if ('tokenizer' in ext) { // Tokenizer Extensions\n                        if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n                            throw new Error(\"extension level must be 'block' or 'inline'\");\n                        }\n                        const extLevel = extensions[ext.level];\n                        if (extLevel) {\n                            extLevel.unshift(ext.tokenizer);\n                        }\n                        else {\n                            extensions[ext.level] = [ext.tokenizer];\n                        }\n                        if (ext.start) { // Function to check for start of token\n                            if (ext.level === 'block') {\n                                if (extensions.startBlock) {\n                                    extensions.startBlock.push(ext.start);\n                                }\n                                else {\n                                    extensions.startBlock = [ext.start];\n                                }\n                            }\n                            else if (ext.level === 'inline') {\n                                if (extensions.startInline) {\n                                    extensions.startInline.push(ext.start);\n                                }\n                                else {\n                                    extensions.startInline = [ext.start];\n                                }\n                            }\n                        }\n                    }\n                    if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n                        extensions.childTokens[ext.name] = ext.childTokens;\n                    }\n                });\n                opts.extensions = extensions;\n            }\n            // ==-- Parse \"overwrite\" extensions --== //\n            if (pack.renderer) {\n                const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n                for (const prop in pack.renderer) {\n                    if (!(prop in renderer)) {\n                        throw new Error(`renderer '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const rendererProp = prop;\n                    const rendererFunc = pack.renderer[rendererProp];\n                    const prevRenderer = renderer[rendererProp];\n                    // Replace renderer with func to run extension, but fall back if false\n                    renderer[rendererProp] = (...args) => {\n                        let ret = rendererFunc.apply(renderer, args);\n                        if (ret === false) {\n                            ret = prevRenderer.apply(renderer, args);\n                        }\n                        return ret || '';\n                    };\n                }\n                opts.renderer = renderer;\n            }\n            if (pack.tokenizer) {\n                const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n                for (const prop in pack.tokenizer) {\n                    if (!(prop in tokenizer)) {\n                        throw new Error(`tokenizer '${prop}' does not exist`);\n                    }\n                    if (['options', 'rules', 'lexer'].includes(prop)) {\n                        // ignore options, rules, and lexer properties\n                        continue;\n                    }\n                    const tokenizerProp = prop;\n                    const tokenizerFunc = pack.tokenizer[tokenizerProp];\n                    const prevTokenizer = tokenizer[tokenizerProp];\n                    // Replace tokenizer with func to run extension, but fall back if false\n                    // @ts-expect-error cannot type tokenizer function dynamically\n                    tokenizer[tokenizerProp] = (...args) => {\n                        let ret = tokenizerFunc.apply(tokenizer, args);\n                        if (ret === false) {\n                            ret = prevTokenizer.apply(tokenizer, args);\n                        }\n                        return ret;\n                    };\n                }\n                opts.tokenizer = tokenizer;\n            }\n            // ==-- Parse Hooks extensions --== //\n            if (pack.hooks) {\n                const hooks = this.defaults.hooks || new _Hooks();\n                for (const prop in pack.hooks) {\n                    if (!(prop in hooks)) {\n                        throw new Error(`hook '${prop}' does not exist`);\n                    }\n                    if (prop === 'options') {\n                        // ignore options property\n                        continue;\n                    }\n                    const hooksProp = prop;\n                    const hooksFunc = pack.hooks[hooksProp];\n                    const prevHook = hooks[hooksProp];\n                    if (_Hooks.passThroughHooks.has(prop)) {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (arg) => {\n                            if (this.defaults.async) {\n                                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                                    return prevHook.call(hooks, ret);\n                                });\n                            }\n                            const ret = hooksFunc.call(hooks, arg);\n                            return prevHook.call(hooks, ret);\n                        };\n                    }\n                    else {\n                        // @ts-expect-error cannot type hook function dynamically\n                        hooks[hooksProp] = (...args) => {\n                            let ret = hooksFunc.apply(hooks, args);\n                            if (ret === false) {\n                                ret = prevHook.apply(hooks, args);\n                            }\n                            return ret;\n                        };\n                    }\n                }\n                opts.hooks = hooks;\n            }\n            // ==-- Parse WalkTokens extensions --== //\n            if (pack.walkTokens) {\n                const walkTokens = this.defaults.walkTokens;\n                const packWalktokens = pack.walkTokens;\n                opts.walkTokens = function (token) {\n                    let values = [];\n                    values.push(packWalktokens.call(this, token));\n                    if (walkTokens) {\n                        values = values.concat(walkTokens.call(this, token));\n                    }\n                    return values;\n                };\n            }\n            this.defaults = { ...this.defaults, ...opts };\n        });\n        return this;\n    }\n    setOptions(opt) {\n        this.defaults = { ...this.defaults, ...opt };\n        return this;\n    }\n    lexer(src, options) {\n        return _Lexer.lex(src, options ?? this.defaults);\n    }\n    parser(tokens, options) {\n        return _Parser.parse(tokens, options ?? this.defaults);\n    }\n    #parseMarkdown(lexer, parser) {\n        return (src, options) => {\n            const origOpt = { ...options };\n            const opt = { ...this.defaults, ...origOpt };\n            // Show warning if an extension set async to true but the parse was called with async: false\n            if (this.defaults.async === true && origOpt.async === false) {\n                if (!opt.silent) {\n                    console.warn('marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.');\n                }\n                opt.async = true;\n            }\n            const throwError = this.#onError(!!opt.silent, !!opt.async);\n            // throw error in case of non string input\n            if (typeof src === 'undefined' || src === null) {\n                return throwError(new Error('marked(): input parameter is undefined or null'));\n            }\n            if (typeof src !== 'string') {\n                return throwError(new Error('marked(): input parameter is of type '\n                    + Object.prototype.toString.call(src) + ', string expected'));\n            }\n            if (opt.hooks) {\n                opt.hooks.options = opt;\n            }\n            if (opt.async) {\n                return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n                    .then(src => lexer(src, opt))\n                    .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n                    .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n                    .then(tokens => parser(tokens, opt))\n                    .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n                    .catch(throwError);\n            }\n            try {\n                if (opt.hooks) {\n                    src = opt.hooks.preprocess(src);\n                }\n                let tokens = lexer(src, opt);\n                if (opt.hooks) {\n                    tokens = opt.hooks.processAllTokens(tokens);\n                }\n                if (opt.walkTokens) {\n                    this.walkTokens(tokens, opt.walkTokens);\n                }\n                let html = parser(tokens, opt);\n                if (opt.hooks) {\n                    html = opt.hooks.postprocess(html);\n                }\n                return html;\n            }\n            catch (e) {\n                return throwError(e);\n            }\n        };\n    }\n    #onError(silent, async) {\n        return (e) => {\n            e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n            if (silent) {\n                const msg = '<p>An error occurred:</p><pre>'\n                    + escape(e.message + '', true)\n                    + '</pre>';\n                if (async) {\n                    return Promise.resolve(msg);\n                }\n                return msg;\n            }\n            if (async) {\n                return Promise.reject(e);\n            }\n            throw e;\n        };\n    }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport { _getDefaults, changeDefaults, _defaults } from './defaults.ts';\nconst markedInstance = new Marked();\nexport function marked(src, opt) {\n    return markedInstance.parse(src, opt);\n}\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\n    marked.setOptions = function (options) {\n        markedInstance.setOptions(options);\n        marked.defaults = markedInstance.defaults;\n        changeDefaults(marked.defaults);\n        return marked;\n    };\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\nmarked.defaults = _defaults;\n/**\n * Use Extension\n */\nmarked.use = function (...args) {\n    markedInstance.use(...args);\n    marked.defaults = markedInstance.defaults;\n    changeDefaults(marked.defaults);\n    return marked;\n};\n/**\n * Run callback for every token\n */\nmarked.walkTokens = function (tokens, callback) {\n    return markedInstance.walkTokens(tokens, callback);\n};\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}