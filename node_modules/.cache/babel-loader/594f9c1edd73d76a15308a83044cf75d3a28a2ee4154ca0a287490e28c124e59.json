{"ast":null,"code":"import { atLeastVersion } from \"../../common/config/version\";\nimport { hassioApiResultExtractor } from \"./common\";\nexport const fetchNetworkInfo = async hass => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: \"/network/info\",\n      method: \"get\"\n    });\n  }\n  return hassioApiResultExtractor(await hass.callApi(\"GET\", \"hassio/network/info\"));\n};\nexport const updateNetworkInterface = async (hass, network_interface, options) => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    await hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/update`,\n      method: \"post\",\n      data: options,\n      timeout: null\n    });\n    return;\n  }\n  await hass.callApi(\"POST\", `hassio/network/interface/${network_interface}/update`, options);\n};\nexport const accesspointScan = async (hass, network_interface) => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/accesspoints`,\n      method: \"get\",\n      timeout: null\n    });\n  }\n  return hassioApiResultExtractor(await hass.callApi(\"GET\", `hassio/network/interface/${network_interface}/accesspoints`));\n};","map":{"version":3,"names":["atLeastVersion","hassioApiResultExtractor","fetchNetworkInfo","hass","config","version","callWS","type","endpoint","method","callApi","updateNetworkInterface","network_interface","options","data","timeout","accesspointScan"],"sources":["/workspaces/frontend/src/data/hassio/network.ts"],"sourcesContent":["import { atLeastVersion } from \"../../common/config/version\";\nimport { HomeAssistant } from \"../../types\";\nimport { hassioApiResultExtractor, HassioResponse } from \"./common\";\n\ninterface IpConfiguration {\n  address: string[];\n  gateway: string;\n  method: \"disabled\" | \"static\" | \"auto\";\n  nameservers: string[];\n}\n\nexport interface NetworkInterface {\n  primary: boolean;\n  privacy: boolean;\n  interface: string;\n  enabled: boolean;\n  ipv4?: Partial<IpConfiguration>;\n  ipv6?: Partial<IpConfiguration>;\n  type: \"ethernet\" | \"wireless\" | \"vlan\";\n  wifi?: Partial<WifiConfiguration>;\n}\n\ninterface DockerNetwork {\n  address: string;\n  dns: string;\n  gateway: string;\n  interface: string;\n}\n\ninterface AccessPoint {\n  mode: \"infrastructure\" | \"mesh\" | \"adhoc\" | \"ap\";\n  ssid: string;\n  mac: string;\n  frequency: number;\n  signal: number;\n}\n\nexport interface AccessPoints {\n  accesspoints: AccessPoint[];\n}\n\nexport interface WifiConfiguration {\n  mode: \"infrastructure\" | \"mesh\" | \"adhoc\" | \"ap\";\n  auth: \"open\" | \"wep\" | \"wpa-psk\";\n  ssid: string;\n  signal: number;\n  psk?: string;\n}\n\nexport interface NetworkInfo {\n  interfaces: NetworkInterface[];\n  docker: DockerNetwork;\n}\n\nexport const fetchNetworkInfo = async (\n  hass: HomeAssistant\n): Promise<NetworkInfo> => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: \"/network/info\",\n      method: \"get\",\n    });\n  }\n\n  return hassioApiResultExtractor(\n    await hass.callApi<HassioResponse<NetworkInfo>>(\n      \"GET\",\n      \"hassio/network/info\"\n    )\n  );\n};\n\nexport const updateNetworkInterface = async (\n  hass: HomeAssistant,\n  network_interface: string,\n  options: Partial<NetworkInterface>\n) => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    await hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/update`,\n      method: \"post\",\n      data: options,\n      timeout: null,\n    });\n    return;\n  }\n\n  await hass.callApi<HassioResponse<NetworkInfo>>(\n    \"POST\",\n    `hassio/network/interface/${network_interface}/update`,\n    options\n  );\n};\n\nexport const accesspointScan = async (\n  hass: HomeAssistant,\n  network_interface: string\n): Promise<AccessPoints> => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/network/interface/${network_interface}/accesspoints`,\n      method: \"get\",\n      timeout: null,\n    });\n  }\n\n  return hassioApiResultExtractor(\n    await hass.callApi<HassioResponse<AccessPoints>>(\n      \"GET\",\n      `hassio/network/interface/${network_interface}/accesspoints`\n    )\n  );\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,6BAA6B;AAE5D,SAASC,wBAAwB,QAAwB,UAAU;AAoDnE,OAAO,MAAMC,gBAAgB,GAAG,MAC9BC,IAAmB,IACM;EACzB,IAAIH,cAAc,CAACG,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IACnD,OAAOF,IAAI,CAACG,MAAM,CAAC;MACjBC,IAAI,EAAE,gBAAgB;MACtBC,QAAQ,EAAE,eAAe;MACzBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,OAAOR,wBAAwB,CAC7B,MAAME,IAAI,CAACO,OAAO,CAChB,KAAK,EACL,qBACF,CACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,sBAAsB,GAAG,MAAAA,CACpCR,IAAmB,EACnBS,iBAAyB,EACzBC,OAAkC,KAC/B;EACH,IAAIb,cAAc,CAACG,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IACnD,MAAMF,IAAI,CAACG,MAAM,CAAC;MAChBC,IAAI,EAAE,gBAAgB;MACtBC,QAAQ,EAAG,sBAAqBI,iBAAkB,SAAQ;MAC1DH,MAAM,EAAE,MAAM;MACdK,IAAI,EAAED,OAAO;MACbE,OAAO,EAAE;IACX,CAAC,CAAC;IACF;EACF;EAEA,MAAMZ,IAAI,CAACO,OAAO,CAChB,MAAM,EACL,4BAA2BE,iBAAkB,SAAQ,EACtDC,OACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,eAAe,GAAG,MAAAA,CAC7Bb,IAAmB,EACnBS,iBAAyB,KACC;EAC1B,IAAIZ,cAAc,CAACG,IAAI,CAACC,MAAM,CAACC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IACnD,OAAOF,IAAI,CAACG,MAAM,CAAC;MACjBC,IAAI,EAAE,gBAAgB;MACtBC,QAAQ,EAAG,sBAAqBI,iBAAkB,eAAc;MAChEH,MAAM,EAAE,KAAK;MACbM,OAAO,EAAE;IACX,CAAC,CAAC;EACJ;EAEA,OAAOd,wBAAwB,CAC7B,MAAME,IAAI,CAACO,OAAO,CAChB,KAAK,EACJ,4BAA2BE,iBAAkB,eAChD,CACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}