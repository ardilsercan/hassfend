{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"element-internals-polyfill\";\nimport { MdAssistChip } from \"@material/web/chips/assist-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nexport var HaAssistChip = _decorate([customElement(\"ha-assist-chip\")], function (_initialize, _MdAssistChip) {\n  var HaAssistChip = /*#__PURE__*/function (_MdAssistChip2) {\n    _inherits(HaAssistChip, _MdAssistChip2);\n    function HaAssistChip() {\n      var _this;\n      _classCallCheck(this, HaAssistChip);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaAssistChip, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaAssistChip);\n  }(_MdAssistChip);\n  return {\n    F: HaAssistChip,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"filled\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value: function value() {\n        return [].concat(_toConsumableArray(_get(_getPrototypeOf(HaAssistChip), \"styles\", this)), [css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      :host {\\n        --md-sys-color-primary: var(--primary-text-color);\\n        --md-sys-color-on-surface: var(--primary-text-color);\\n        --md-assist-chip-container-shape: 16px;\\n        --md-assist-chip-outline-color: var(--outline-color);\\n        --md-assist-chip-label-text-weight: 400;\\n        --ha-assist-chip-filled-container-color: rgba(\\n          var(--rgb-primary-text-color),\\n          0.15\\n        );\\n      }\\n      /** Material 3 doesn't have a filled chip, so we have to make our own **/\\n      .filled {\\n        display: flex;\\n        pointer-events: none;\\n        border-radius: inherit;\\n        inset: 0;\\n        position: absolute;\\n        background-color: var(--ha-assist-chip-filled-container-color);\\n      }\\n      /** Set the size of mdc icons **/\\n      ::slotted([slot=\\\"icon\\\"]) {\\n        display: flex;\\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\\n      }\\n    \"])))]);\n      }\n    }, {\n      kind: \"method\",\n      key: \"renderOutline\",\n      value: function renderOutline() {\n        if (this.filled) {\n          return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<span class=\\\"filled\\\"></span>\"])));\n        }\n        return _get(_getPrototypeOf(HaAssistChip.prototype), \"renderOutline\", this).call(this);\n      }\n    }]\n  };\n}, MdAssistChip);","map":{"version":3,"names":["MdAssistChip","css","html","customElement","property","HaAssistChip","_decorate","_initialize","_MdAssistChip","_MdAssistChip2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","type","Boolean","reflect","key","value","static","_toConsumableArray","_get","_getPrototypeOf","_templateObject","_taggedTemplateLiteral","renderOutline","filled","_templateObject2","prototype","call"],"sources":["/workspaces/frontend/src/components/chips/ha-assist-chip.ts"],"sourcesContent":["import \"element-internals-polyfill\";\nimport { MdAssistChip } from \"@material/web/chips/assist-chip\";\nimport { css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-assist-chip\")\nexport class HaAssistChip extends MdAssistChip {\n  @property({ type: Boolean, reflect: true }) filled = false;\n\n  static override styles = [\n    ...super.styles,\n    css`\n      :host {\n        --md-sys-color-primary: var(--primary-text-color);\n        --md-sys-color-on-surface: var(--primary-text-color);\n        --md-assist-chip-container-shape: 16px;\n        --md-assist-chip-outline-color: var(--outline-color);\n        --md-assist-chip-label-text-weight: 400;\n        --ha-assist-chip-filled-container-color: rgba(\n          var(--rgb-primary-text-color),\n          0.15\n        );\n      }\n      /** Material 3 doesn't have a filled chip, so we have to make our own **/\n      .filled {\n        display: flex;\n        pointer-events: none;\n        border-radius: inherit;\n        inset: 0;\n        position: absolute;\n        background-color: var(--ha-assist-chip-filled-container-color);\n      }\n      /** Set the size of mdc icons **/\n      ::slotted([slot=\"icon\"]) {\n        display: flex;\n        --mdc-icon-size: var(--md-input-chip-icon-size, 18px);\n      }\n    `,\n  ];\n\n  protected override renderOutline() {\n    if (this.filled) {\n      return html`<span class=\"filled\"></span>`;\n    }\n\n    return super.renderOutline();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-assist-chip\": HaAssistChip;\n  }\n}\n"],"mappings":";;;;;;;;;;;;AAAA,OAAO,4BAA4B;AACnC,SAASA,YAAY,QAAQ,iCAAiC;AAC9D,SAASC,GAAG,EAAEC,IAAI,QAAQ,KAAK;AAC/B,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AAExD,WACaC,YAAY,GAAAC,SAAA,EADxBH,aAAa,CAAC,gBAAgB,CAAC,aAAAI,WAAA,EAAAC,aAAA;EAAA,IACnBH,YAAY,0BAAAI,cAAA;IAAAC,SAAA,CAAAL,YAAA,EAAAI,cAAA;IAAA,SAAAJ,aAAA;MAAA,IAAAM,KAAA;MAAAC,eAAA,OAAAP,YAAA;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAQ,UAAA,OAAAd,YAAA,KAAAe,MAAA,CAAAJ,IAAA;MAAAT,WAAA,CAAAc,sBAAA,CAAAV,KAAA;MAAA,OAAAA,KAAA;IAAA;IAAA,OAAAW,YAAA,CAAAjB,YAAA;EAAA,EAAAG,aAAA;EAAA;IAAAe,CAAA,EAAZlB,YAAY;IAAAmB,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACtBtB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAU,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAO,MAAA;MAAAF,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,UAAAX,MAAA,CAAAa,kBAAA,CAAAC,IAAA,CAAAC,eAAA,CAD/C9B,YAAY,sBAKrBJ,GAAG,CAAAmC,eAAA,KAAAA,eAAA,GAAAC,sBAAA;MAAA;IAAA;MAAAZ,IAAA;MAAAK,GAAA;MAAAC,KAAA,EA6BL,SAAAO,cAAA,EAAmC;QACjC,IAAI,IAAI,CAACC,MAAM,EAAE;UACf,OAAOrC,IAAI,CAAAsC,gBAAA,KAAAA,gBAAA,GAAAH,sBAAA;QACb;QAEA,OAAAH,IAAA,CAAAC,eAAA,CAvCS9B,YAAY,CAAAoC,SAAA,0BAAAC,IAAA;MAwCvB;IAAC;EAAA;AAAA,GAxC+B1C,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}