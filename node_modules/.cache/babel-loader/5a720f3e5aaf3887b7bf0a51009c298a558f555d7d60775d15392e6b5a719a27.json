{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, state, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../../../components/chips/ha-assist-chip\";\nimport \"../../../components/chips/ha-chip-set\";\nimport { haStyleScrollbar } from \"../../../resources/styles\";\nexport let HuiButtonsBase = _decorate([customElement(\"hui-buttons-base\")], function (_initialize, _LitElement) {\n  class HuiButtonsBase extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiButtonsBase,\n    d: [{\n      kind: \"field\",\n      decorators: [state()],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"configEntities\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-chip-set class=\"ha-scrollbar\">\n        ${(this.configEntities || []).map(entityConf => {\n          const stateObj = this.hass.states[entityConf.entity];\n          const name = entityConf.show_name && stateObj || entityConf.name && entityConf.show_name !== false ? entityConf.name || computeStateName(stateObj) : \"\";\n          return html`\n            <ha-assist-chip\n              filled\n              @action=${this._handleAction}\n              .actionHandler=${actionHandler({\n            hasHold: hasAction(entityConf.hold_action),\n            hasDoubleClick: hasAction(entityConf.double_tap_action)\n          })}\n              .config=${entityConf}\n              tabindex=\"0\"\n              .label=${name}\n            >\n              ${entityConf.show_icon !== false ? html`\n                    <state-badge\n                      title=${computeTooltip(this.hass, entityConf)}\n                      .hass=${this.hass}\n                      .stateObj=${stateObj}\n                      .overrideIcon=${entityConf.icon}\n                      .overrideImage=${entityConf.image}\n                      class=${name ? \"\" : \"no-text\"}\n                      stateColor\n                      slot=\"icon\"\n                    ></state-badge>\n                  ` : \"\"}\n            </ha-assist-chip>\n          `;\n        })}\n      </ha-chip-set>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAction\",\n      value: function _handleAction(ev) {\n        const config = ev.currentTarget.config;\n        handleAction(this, this.hass, config, ev.detail.action);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyleScrollbar, css`\n        .ha-scrollbar {\n          padding: 12px;\n          padding-top: var(--padding-top, 8px);\n          padding-bottom: var(--padding-bottom, 8px);\n          width: 100%;\n          overflow-x: auto;\n          overflow-y: hidden;\n          white-space: nowrap;\n          box-sizing: border-box;\n          display: flex;\n          flex-wrap: wrap;\n        }\n        state-badge {\n          display: inline-flex;\n          line-height: inherit;\n          color: var(--secondary-text-color);\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          margin-left: -4px;\n          margin-inline-start: -4px;\n          margin-inline-end: initial;\n          margin-top: -2px;\n        }\n        state-badge.no-text {\n          width: 26px;\n          height: 26px;\n          margin-left: -3px;\n          margin-inline-start: -3px;\n          margin-inline-end: initial;\n          margin-top: -3px;\n        }\n        ha-assist-chip state-badge {\n          margin-right: -4px;\n          margin-inline-end: -4px;\n          margin-inline-start: initial;\n          --mdc-icon-size: 18px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .ha-scrollbar {\n            flex-wrap: nowrap;\n          }\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","state","property","computeStateName","computeTooltip","actionHandler","handleAction","hasAction","haStyleScrollbar","HuiButtonsBase","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","key","value","attribute","render","configEntities","map","entityConf","stateObj","hass","states","entity","name","show_name","_handleAction","hasHold","hold_action","hasDoubleClick","double_tap_action","show_icon","icon","image","ev","config","currentTarget","detail","action","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/components/hui-buttons-base.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, state, property } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/entity/state-badge\";\nimport type { ActionHandlerEvent } from \"../../../data/lovelace/action_handler\";\nimport type { HomeAssistant } from \"../../../types\";\nimport type { EntitiesCardEntityConfig } from \"../cards/types\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../../../components/chips/ha-assist-chip\";\nimport \"../../../components/chips/ha-chip-set\";\nimport { haStyleScrollbar } from \"../../../resources/styles\";\n\n@customElement(\"hui-buttons-base\")\nexport class HuiButtonsBase extends LitElement {\n  @state() public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public configEntities?: EntitiesCardEntityConfig[];\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-chip-set class=\"ha-scrollbar\">\n        ${(this.configEntities || []).map((entityConf) => {\n          const stateObj = this.hass.states[entityConf.entity];\n\n          const name =\n            (entityConf.show_name && stateObj) ||\n            (entityConf.name && entityConf.show_name !== false)\n              ? entityConf.name || computeStateName(stateObj)\n              : \"\";\n\n          return html`\n            <ha-assist-chip\n              filled\n              @action=${this._handleAction}\n              .actionHandler=${actionHandler({\n                hasHold: hasAction(entityConf.hold_action),\n                hasDoubleClick: hasAction(entityConf.double_tap_action),\n              })}\n              .config=${entityConf}\n              tabindex=\"0\"\n              .label=${name}\n            >\n              ${entityConf.show_icon !== false\n                ? html`\n                    <state-badge\n                      title=${computeTooltip(this.hass, entityConf)}\n                      .hass=${this.hass}\n                      .stateObj=${stateObj}\n                      .overrideIcon=${entityConf.icon}\n                      .overrideImage=${entityConf.image}\n                      class=${name ? \"\" : \"no-text\"}\n                      stateColor\n                      slot=\"icon\"\n                    ></state-badge>\n                  `\n                : \"\"}\n            </ha-assist-chip>\n          `;\n        })}\n      </ha-chip-set>\n    `;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    const config = (ev.currentTarget as any).config as EntitiesCardEntityConfig;\n    handleAction(this, this.hass, config, ev.detail.action!);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleScrollbar,\n      css`\n        .ha-scrollbar {\n          padding: 12px;\n          padding-top: var(--padding-top, 8px);\n          padding-bottom: var(--padding-bottom, 8px);\n          width: 100%;\n          overflow-x: auto;\n          overflow-y: hidden;\n          white-space: nowrap;\n          box-sizing: border-box;\n          display: flex;\n          flex-wrap: wrap;\n        }\n        state-badge {\n          display: inline-flex;\n          line-height: inherit;\n          color: var(--secondary-text-color);\n          align-items: center;\n          justify-content: center;\n          width: 24px;\n          height: 24px;\n          margin-left: -4px;\n          margin-inline-start: -4px;\n          margin-inline-end: initial;\n          margin-top: -2px;\n        }\n        state-badge.no-text {\n          width: 26px;\n          height: 26px;\n          margin-left: -3px;\n          margin-inline-start: -3px;\n          margin-inline-end: initial;\n          margin-top: -3px;\n        }\n        ha-assist-chip state-badge {\n          margin-right: -4px;\n          margin-inline-end: -4px;\n          margin-inline-start: initial;\n          --mdc-icon-size: 18px;\n        }\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          .ha-scrollbar {\n            flex-wrap: nowrap;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-base\": HuiButtonsBase;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}