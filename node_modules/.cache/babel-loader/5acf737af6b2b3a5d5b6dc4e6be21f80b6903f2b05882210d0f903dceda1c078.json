{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * TypeScript version of the decorator\n * @see https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators\n */\nfunction tsDecorator(prototype, name, descriptor) {\n  const constructor = prototype.constructor;\n  if (!descriptor) {\n    /**\n     * lit uses internal properties with two leading underscores to\n     * provide storage for accessors\n     */\n    const litInternalPropertyKey = `__${name}`;\n    descriptor = constructor.getPropertyDescriptor(name, litInternalPropertyKey);\n    if (!descriptor) {\n      throw new Error('@ariaProperty must be used after a @property decorator');\n    }\n  }\n  // descriptor must exist at this point, reassign so typescript understands\n  const propDescriptor = descriptor;\n  let attribute = '';\n  if (!propDescriptor.set) {\n    throw new Error(`@ariaProperty requires a setter for ${name}`);\n  }\n  // TODO(b/202853219): Remove this check when internal tooling is\n  // compatible\n  // tslint:disable-next-line:no-any bail if applied to internal generated class\n  if (prototype.dispatchWizEvent) {\n    return descriptor;\n  }\n  const wrappedDescriptor = {\n    configurable: true,\n    enumerable: true,\n    set(value) {\n      if (attribute === '') {\n        const options = constructor.getPropertyOptions(name);\n        // if attribute is not a string, use `name` instead\n        attribute = typeof options.attribute === 'string' ? options.attribute : name;\n      }\n      if (this.hasAttribute(attribute)) {\n        this.removeAttribute(attribute);\n      }\n      propDescriptor.set.call(this, value);\n    }\n  };\n  if (propDescriptor.get) {\n    wrappedDescriptor.get = function () {\n      return propDescriptor.get.call(this);\n    };\n  }\n  return wrappedDescriptor;\n}\n/**\n * A property decorator proxies an aria attribute to an internal node\n *\n * This decorator is only intended for use with ARIA attributes, such as `role`\n * and `aria-label` due to screenreader needs.\n *\n * Upon first render, `@ariaProperty` will remove the attribute from the host\n * element to prevent screenreaders from reading the host instead of the\n * internal node.\n *\n * This decorator should only be used for non-Symbol public fields decorated\n * with `@property`, or on a setter with an optional getter.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @ariaProperty\n *   @property({ type: String, attribute: 'aria-label' })\n *   ariaLabel!: string;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function ariaProperty(protoOrDescriptor, name,\n// tslint:disable-next-line:no-any any is required as a return type from decorators\ndescriptor) {\n  if (name !== undefined) {\n    return tsDecorator(protoOrDescriptor, name, descriptor);\n  } else {\n    throw new Error('@ariaProperty only supports TypeScript Decorators');\n  }\n}","map":{"version":3,"names":["tsDecorator","prototype","name","descriptor","constructor","litInternalPropertyKey","getPropertyDescriptor","Error","propDescriptor","attribute","set","dispatchWizEvent","wrappedDescriptor","configurable","enumerable","value","options","getPropertyOptions","hasAttribute","removeAttribute","call","get","ariaProperty","protoOrDescriptor","undefined"],"sources":["aria-property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {PropertyDeclaration, ReactiveElement} from '@lit/reactive-element';\n\n/**\n * A value for the `aria-haspopup` ARIA attribute.\n */\nexport type AriaHasPopup =\n    'false'|'true'|'menu'|'listbox'|'tree'|'grid'|'dialog';\n\n/**\n * Expose protected statics on ReactiveElement\n */\ninterface ReactiveElementInternals {\n  getPropertyDescriptor(name: PropertyKey, key: string): PropertyDescriptor;\n  getPropertyOptions(name: PropertyKey): PropertyDeclaration;\n}\n\n/**\n * TypeScript version of the decorator\n * @see https://www.typescriptlang.org/docs/handbook/decorators.html#property-decorators\n */\nfunction tsDecorator(\n    prototype: {}, name: string, descriptor?: PropertyDescriptor) {\n  const constructor =\n      (prototype.constructor as unknown as ReactiveElementInternals);\n  if (!descriptor) {\n    /**\n     * lit uses internal properties with two leading underscores to\n     * provide storage for accessors\n     */\n    const litInternalPropertyKey = `__${name}`;\n    descriptor =\n        constructor.getPropertyDescriptor(name, litInternalPropertyKey);\n    if (!descriptor) {\n      throw new Error('@ariaProperty must be used after a @property decorator');\n    }\n  }\n\n  // descriptor must exist at this point, reassign so typescript understands\n  const propDescriptor = descriptor;\n  let attribute = '';\n\n  if (!propDescriptor.set) {\n    throw new Error(`@ariaProperty requires a setter for ${name}`);\n  }\n\n\n  // TODO(b/202853219): Remove this check when internal tooling is\n  // compatible\n  // tslint:disable-next-line:no-any bail if applied to internal generated class\n  if ((prototype as any).dispatchWizEvent) {\n    return descriptor;\n  }\n\n  const wrappedDescriptor: PropertyDescriptor = {\n    configurable: true,\n    enumerable: true,\n    set(this: ReactiveElement, value: unknown) {\n      if (attribute === '') {\n        const options = constructor.getPropertyOptions(name);\n        // if attribute is not a string, use `name` instead\n        attribute =\n            typeof options.attribute === 'string' ? options.attribute : name;\n      }\n      if (this.hasAttribute(attribute)) {\n        this.removeAttribute(attribute);\n      }\n      propDescriptor.set!.call(this, value);\n    }\n  };\n\n  if (propDescriptor.get) {\n    wrappedDescriptor.get = function(this: ReactiveElement) {\n      return propDescriptor.get!.call(this);\n    };\n  }\n\n  return wrappedDescriptor;\n}\n\n/**\n * A property decorator proxies an aria attribute to an internal node\n *\n * This decorator is only intended for use with ARIA attributes, such as `role`\n * and `aria-label` due to screenreader needs.\n *\n * Upon first render, `@ariaProperty` will remove the attribute from the host\n * element to prevent screenreaders from reading the host instead of the\n * internal node.\n *\n * This decorator should only be used for non-Symbol public fields decorated\n * with `@property`, or on a setter with an optional getter.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @ariaProperty\n *   @property({ type: String, attribute: 'aria-label' })\n *   ariaLabel!: string;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function ariaProperty(\n    protoOrDescriptor: {}, name?: string,\n    // tslint:disable-next-line:no-any any is required as a return type from decorators\n    descriptor?: PropertyDescriptor): any {\n  if (name !== undefined) {\n    return tsDecorator(protoOrDescriptor, name, descriptor);\n  } else {\n    throw new Error('@ariaProperty only supports TypeScript Decorators');\n  }\n}\n"],"mappings":"AAAA;;;;;AAsBA;;;;AAIA,SAASA,WAAWA,CAChBC,SAAa,EAAEC,IAAY,EAAEC,UAA+B;EAC9D,MAAMC,WAAW,GACZH,SAAS,CAACG,WAAmD;EAClE,IAAI,CAACD,UAAU,EAAE;IACf;;;;IAIA,MAAME,sBAAsB,GAAG,KAAKH,IAAI,EAAE;IAC1CC,UAAU,GACNC,WAAW,CAACE,qBAAqB,CAACJ,IAAI,EAAEG,sBAAsB,CAAC;IACnE,IAAI,CAACF,UAAU,EAAE;MACf,MAAM,IAAII,KAAK,CAAC,wDAAwD,CAAC;;;EAI7E;EACA,MAAMC,cAAc,GAAGL,UAAU;EACjC,IAAIM,SAAS,GAAG,EAAE;EAElB,IAAI,CAACD,cAAc,CAACE,GAAG,EAAE;IACvB,MAAM,IAAIH,KAAK,CAAC,uCAAuCL,IAAI,EAAE,CAAC;;EAIhE;EACA;EACA;EACA,IAAKD,SAAiB,CAACU,gBAAgB,EAAE;IACvC,OAAOR,UAAU;;EAGnB,MAAMS,iBAAiB,GAAuB;IAC5CC,YAAY,EAAE,IAAI;IAClBC,UAAU,EAAE,IAAI;IAChBJ,GAAGA,CAAwBK,KAAc;MACvC,IAAIN,SAAS,KAAK,EAAE,EAAE;QACpB,MAAMO,OAAO,GAAGZ,WAAW,CAACa,kBAAkB,CAACf,IAAI,CAAC;QACpD;QACAO,SAAS,GACL,OAAOO,OAAO,CAACP,SAAS,KAAK,QAAQ,GAAGO,OAAO,CAACP,SAAS,GAAGP,IAAI;;MAEtE,IAAI,IAAI,CAACgB,YAAY,CAACT,SAAS,CAAC,EAAE;QAChC,IAAI,CAACU,eAAe,CAACV,SAAS,CAAC;;MAEjCD,cAAc,CAACE,GAAI,CAACU,IAAI,CAAC,IAAI,EAAEL,KAAK,CAAC;IACvC;GACD;EAED,IAAIP,cAAc,CAACa,GAAG,EAAE;IACtBT,iBAAiB,CAACS,GAAG,GAAG;MACtB,OAAOb,cAAc,CAACa,GAAI,CAACD,IAAI,CAAC,IAAI,CAAC;IACvC,CAAC;;EAGH,OAAOR,iBAAiB;AAC1B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAUU,YAAYA,CACxBC,iBAAqB,EAAErB,IAAa;AACpC;AACAC,UAA+B;EACjC,IAAID,IAAI,KAAKsB,SAAS,EAAE;IACtB,OAAOxB,WAAW,CAACuB,iBAAiB,EAAErB,IAAI,EAAEC,UAAU,CAAC;GACxD,MAAM;IACL,MAAM,IAAII,KAAK,CAAC,mDAAmD,CAAC;;AAExE"},"metadata":{},"sourceType":"module","externalDependencies":[]}