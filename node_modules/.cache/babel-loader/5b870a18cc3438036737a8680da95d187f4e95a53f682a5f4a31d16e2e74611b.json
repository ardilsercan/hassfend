{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';\n/**\n * A chip component.\n *\n * @fires update-focus {Event} Dispatched when `disabled` is toggled. --bubbles\n */\nexport class Chip extends LitElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Whether or not the chip is disabled.\n     *\n     * Disabled chips are not focusable, unless `always-focusable` is set.\n     */\n    this.disabled = false;\n    /**\n     * When true, allow disabled chips to be focused with arrow keys.\n     *\n     * Add this when a chip needs increased visibility when disabled. See\n     * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\n     * for more guidance on when this is needed.\n     */\n    this.alwaysFocusable = false;\n    /**\n     * The label of the chip.\n     */\n    this.label = '';\n    /**\n     * Only needed for SSR.\n     *\n     * Add this attribute when a chip has a `slot=\"icon\"` to avoid a Flash Of\n     * Unstyled Content.\n     */\n    this.hasIcon = false;\n  }\n  /**\n   * Whether or not the primary ripple is disabled (defaults to `disabled`).\n   * Some chip actions such as links cannot be disabled.\n   */\n  get rippleDisabled() {\n    return this.disabled;\n  }\n  focus(options) {\n    if (this.disabled && !this.alwaysFocusable) {\n      return;\n    }\n    super.focus(options);\n  }\n  render() {\n    return html`\n      <div class=\"container ${classMap(this.getContainerClasses())}\">\n        ${this.renderContainerContent()}\n      </div>\n    `;\n  }\n  updated(changed) {\n    if (changed.has('disabled') && changed.get('disabled') !== undefined) {\n      this.dispatchEvent(new Event('update-focus', {\n        bubbles: true\n      }));\n    }\n  }\n  getContainerClasses() {\n    return {\n      'disabled': this.disabled,\n      'has-icon': this.hasIcon\n    };\n  }\n  renderContainerContent() {\n    return html`\n      ${this.renderOutline()}\n      <md-focus-ring part=\"focus-ring\" for=${this.primaryId}></md-focus-ring>\n      <md-ripple\n        for=${this.primaryId}\n        ?disabled=${this.rippleDisabled}></md-ripple>\n      ${this.renderPrimaryAction(this.renderPrimaryContent())}\n    `;\n  }\n  renderOutline() {\n    return html`<span class=\"outline\"></span>`;\n  }\n  renderLeadingIcon() {\n    return html`<slot name=\"icon\" @slotchange=${this.handleIconChange}></slot>`;\n  }\n  renderPrimaryContent() {\n    return html`\n      <span class=\"leading icon\" aria-hidden=\"true\">\n        ${this.renderLeadingIcon()}\n      </span>\n      <span class=\"label\">${this.label}</span>\n      <span class=\"touch\"></span>\n    `;\n  }\n  handleIconChange(event) {\n    const slot = event.target;\n    this.hasIcon = slot.assignedElements({\n      flatten: true\n    }).length > 0;\n  }\n}\n(() => {\n  requestUpdateOnAriaChange(Chip);\n})();\n/** @nocollapse */\nChip.shadowRootOptions = {\n  ...LitElement.shadowRootOptions,\n  delegatesFocus: true\n};\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], Chip.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'always-focusable'\n})], Chip.prototype, \"alwaysFocusable\", void 0);\n__decorate([property()], Chip.prototype, \"label\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true,\n  attribute: 'has-icon'\n})], Chip.prototype, \"hasIcon\", void 0);","map":{"version":3,"names":["html","LitElement","property","classMap","requestUpdateOnAriaChange","Chip","constructor","disabled","alwaysFocusable","label","hasIcon","rippleDisabled","focus","options","render","getContainerClasses","renderContainerContent","updated","changed","has","get","undefined","dispatchEvent","Event","bubbles","renderOutline","primaryId","renderPrimaryAction","renderPrimaryContent","renderLeadingIcon","handleIconChange","event","slot","target","assignedElements","flatten","length","shadowRootOptions","delegatesFocus","__decorate","type","Boolean","reflect","attribute"],"sources":["chip.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\n\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\n\n/**\n * A chip component.\n *\n * @fires update-focus {Event} Dispatched when `disabled` is toggled. --bubbles\n */\nexport abstract class Chip extends LitElement {\n  static {\n    requestUpdateOnAriaChange(Chip);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Whether or not the chip is disabled.\n   *\n   * Disabled chips are not focusable, unless `always-focusable` is set.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * When true, allow disabled chips to be focused with arrow keys.\n   *\n   * Add this when a chip needs increased visibility when disabled. See\n   * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\n   * for more guidance on when this is needed.\n   */\n  @property({type: Boolean, attribute: 'always-focusable'})\n  alwaysFocusable = false;\n\n  /**\n   * The label of the chip.\n   */\n  @property() label = '';\n\n  /**\n   * Only needed for SSR.\n   *\n   * Add this attribute when a chip has a `slot=\"icon\"` to avoid a Flash Of\n   * Unstyled Content.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'has-icon'}) hasIcon =\n    false;\n\n  /**\n   * The `id` of the action the primary focus ring and ripple are for.\n   * TODO(b/310046938): use the same id for both elements\n   */\n  protected abstract readonly primaryId: string;\n\n  /**\n   * Whether or not the primary ripple is disabled (defaults to `disabled`).\n   * Some chip actions such as links cannot be disabled.\n   */\n  protected get rippleDisabled() {\n    return this.disabled;\n  }\n\n  override focus(options?: FocusOptions) {\n    if (this.disabled && !this.alwaysFocusable) {\n      return;\n    }\n\n    super.focus(options);\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"container ${classMap(this.getContainerClasses())}\">\n        ${this.renderContainerContent()}\n      </div>\n    `;\n  }\n\n  protected override updated(changed: PropertyValues<Chip>) {\n    if (changed.has('disabled') && changed.get('disabled') !== undefined) {\n      this.dispatchEvent(new Event('update-focus', {bubbles: true}));\n    }\n  }\n\n  protected getContainerClasses(): ClassInfo {\n    return {\n      'disabled': this.disabled,\n      'has-icon': this.hasIcon,\n    };\n  }\n\n  protected renderContainerContent() {\n    return html`\n      ${this.renderOutline()}\n      <md-focus-ring part=\"focus-ring\" for=${this.primaryId}></md-focus-ring>\n      <md-ripple\n        for=${this.primaryId}\n        ?disabled=${this.rippleDisabled}></md-ripple>\n      ${this.renderPrimaryAction(this.renderPrimaryContent())}\n    `;\n  }\n\n  protected renderOutline() {\n    return html`<span class=\"outline\"></span>`;\n  }\n\n  protected renderLeadingIcon(): TemplateResult {\n    return html`<slot name=\"icon\" @slotchange=${this.handleIconChange}></slot>`;\n  }\n\n  protected abstract renderPrimaryAction(content: unknown): unknown;\n\n  private renderPrimaryContent() {\n    return html`\n      <span class=\"leading icon\" aria-hidden=\"true\">\n        ${this.renderLeadingIcon()}\n      </span>\n      <span class=\"label\">${this.label}</span>\n      <span class=\"touch\"></span>\n    `;\n  }\n\n  private handleIconChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    this.hasIcon = slot.assignedElements({flatten: true}).length > 0;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}