{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2;\nimport \"core-js/modules/es.array.concat.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { hsv2rgb, rgb2hex, rgb2hsv } from \"../../common/color/convert-color\";\nimport { stateActive } from \"../../common/entity/state_active\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nexport var HaStateControlLightBrightness = _decorate([customElement(\"ha-state-control-light-brightness\")], function (_initialize, _LitElement) {\n  var HaStateControlLightBrightness = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaStateControlLightBrightness, _LitElement2);\n    function HaStateControlLightBrightness() {\n      var _this;\n      _classCallCheck(this, HaStateControlLightBrightness);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaStateControlLightBrightness, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaStateControlLightBrightness);\n  }(_LitElement);\n  return {\n    F: HaStateControlLightBrightness,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProp) {\n        if (changedProp.has(\"stateObj\")) {\n          this.value = this.stateObj.attributes.brightness != null ? Math.max(Math.round(this.stateObj.attributes.brightness * 100 / 255), 1) : undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        var value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.hass.callService(\"light\", \"turn_on\", {\n          entity_id: this.stateObj.entity_id,\n          brightness_pct: value\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var color = stateColorCss(this.stateObj);\n        if (this.stateObj.attributes.rgb_color) {\n          var hsvColor = rgb2hsv(this.stateObj.attributes.rgb_color);\n\n          // Modify the real rgb color for better contrast\n          if (hsvColor[1] < 0.4) {\n            // Special case for very light color (e.g: white)\n            if (hsvColor[1] < 0.1) {\n              hsvColor[2] = 225;\n            } else {\n              hsvColor[1] = 0.4;\n            }\n          }\n          color = rgb2hex(hsv2rgb(hsvColor));\n        }\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-control-slider\\n        vertical\\n        .value=\", \"\\n        min=\\\"1\\\"\\n        max=\\\"100\\\"\\n        .showHandle=\", \"\\n        @value-changed=\", \"\\n        .ariaLabel=\", \"\\n        style=\", \"\\n        .disabled=\", \"\\n        unit=\\\"%\\\"\\n        .locale=\", \"\\n      >\\n      </ha-control-slider>\\n    \"])), this.value, stateActive(this.stateObj), this._valueChanged, this.hass.formatEntityAttributeName(this.stateObj, \"brightness\"), styleMap({\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color\n        }), this.stateObj.state === UNAVAILABLE, this.hass.locale);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n      ha-control-slider {\\n        height: 45vh;\\n        max-height: 320px;\\n        min-height: 200px;\\n        --control-slider-thickness: 100px;\\n        --control-slider-border-radius: 24px;\\n        --control-slider-color: var(--primary-color);\\n        --control-slider-background: var(--disabled-color);\\n        --control-slider-background-opacity: 0.2;\\n        --control-slider-tooltip-font-size: 20px;\\n      }\\n    \"])));\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","state","styleMap","hsv2rgb","rgb2hex","rgb2hsv","stateActive","stateColorCss","UNAVAILABLE","HaStateControlLightBrightness","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","updated","changedProp","has","stateObj","attributes","brightness","Math","max","round","undefined","_valueChanged","ev","detail","isNaN","hass","callService","entity_id","brightness_pct","render","color","rgb_color","hsvColor","_templateObject","_taggedTemplateLiteral","formatEntityAttributeName","locale","static","styles","_templateObject2"],"sources":["/workspaces/frontend/src/state-control/light/ha-state-control-light-brightness.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { hsv2rgb, rgb2hex, rgb2hsv } from \"../../common/color/convert-color\";\nimport { stateActive } from \"../../common/entity/state_active\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { LightEntity } from \"../../data/light\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-state-control-light-brightness\")\nexport class HaStateControlLightBrightness extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: LightEntity;\n\n  @state() value?: number;\n\n  protected updated(changedProp: Map<string | number | symbol, unknown>): void {\n    if (changedProp.has(\"stateObj\")) {\n      this.value =\n        this.stateObj.attributes.brightness != null\n          ? Math.max(\n              Math.round((this.stateObj.attributes.brightness * 100) / 255),\n              1\n            )\n          : undefined;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass.callService(\"light\", \"turn_on\", {\n      entity_id: this.stateObj!.entity_id,\n      brightness_pct: value,\n    });\n  }\n\n  protected render(): TemplateResult {\n    let color = stateColorCss(this.stateObj);\n\n    if (this.stateObj.attributes.rgb_color) {\n      const hsvColor = rgb2hsv(this.stateObj.attributes.rgb_color);\n\n      // Modify the real rgb color for better contrast\n      if (hsvColor[1] < 0.4) {\n        // Special case for very light color (e.g: white)\n        if (hsvColor[1] < 0.1) {\n          hsvColor[2] = 225;\n        } else {\n          hsvColor[1] = 0.4;\n        }\n      }\n      color = rgb2hex(hsv2rgb(hsvColor));\n    }\n\n    return html`\n      <ha-control-slider\n        vertical\n        .value=${this.value}\n        min=\"1\"\n        max=\"100\"\n        .showHandle=${stateActive(this.stateObj)}\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${this.hass.formatEntityAttributeName(\n          this.stateObj,\n          \"brightness\"\n        )}\n        style=${styleMap({\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        unit=\"%\"\n        .locale=${this.hass.locale}\n      >\n      </ha-control-slider>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-slider {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-tooltip-font-size: 20px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-light-brightness\": HaStateControlLightBrightness;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}