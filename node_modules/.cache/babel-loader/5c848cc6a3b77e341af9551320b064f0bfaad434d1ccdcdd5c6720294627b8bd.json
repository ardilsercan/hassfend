{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n/**\n * A unique symbol used for protected access to an instance's\n * `ElementInternals`.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   constructor() {\n *     super();\n *     this[internals].role = 'button';\n *   }\n * }\n * ```\n */\nexport var internals = Symbol('internals');\n// Private symbols\nvar privateInternals = Symbol('privateInternals');\n/**\n * Mixes in an attached `ElementInternals` instance.\n *\n * This mixin is only needed when other shared code needs access to a\n * component's `ElementInternals`, such as form-associated mixins.\n *\n * @param base The class to mix functionality into.\n * @return The provided class with `WithElementInternals` mixed in.\n */\nexport function mixinElementInternals(base) {\n  var WithElementInternalsElement = /*#__PURE__*/function (_base) {\n    _inherits(WithElementInternalsElement, _base);\n    function WithElementInternalsElement() {\n      _classCallCheck(this, WithElementInternalsElement);\n      return _callSuper(this, WithElementInternalsElement, arguments);\n    }\n    _createClass(WithElementInternalsElement, [{\n      key: internals,\n      get: function get() {\n        // Create internals in getter so that it can be used in methods called on\n        // construction in `ReactiveElement`, such as `requestUpdate()`.\n        if (!this[privateInternals]) {\n          // Cast needed for closure\n          this[privateInternals] = this.attachInternals();\n        }\n        return this[privateInternals];\n      }\n    }]);\n    return WithElementInternalsElement;\n  }(base);\n  return WithElementInternalsElement;\n}","map":{"version":3,"names":["internals","Symbol","privateInternals","mixinElementInternals","base","WithElementInternalsElement","_base","_inherits","_classCallCheck","_callSuper","arguments","_createClass","key","get","attachInternals"],"sources":["element-internals.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {LitElement} from 'lit';\n\nimport {MixinBase, MixinReturn} from './mixin.js';\n\n/**\n * A unique symbol used for protected access to an instance's\n * `ElementInternals`.\n *\n * @example\n * ```ts\n * class MyElement extends mixinElementInternals(LitElement) {\n *   constructor() {\n *     super();\n *     this[internals].role = 'button';\n *   }\n * }\n * ```\n */\nexport const internals = Symbol('internals');\n\n/**\n * An instance with an `internals` symbol property for the component's\n * `ElementInternals`.\n *\n * Use this when protected access is needed for an instance's `ElementInternals`\n * from other files. A unique symbol is used to access the internals.\n */\nexport interface WithElementInternals {\n  /**\n   * An instance's `ElementInternals`.\n   */\n  [internals]: ElementInternals;\n}\n\n// Private symbols\nconst privateInternals = Symbol('privateInternals');\n\n/**\n * Mixes in an attached `ElementInternals` instance.\n *\n * This mixin is only needed when other shared code needs access to a\n * component's `ElementInternals`, such as form-associated mixins.\n *\n * @param base The class to mix functionality into.\n * @return The provided class with `WithElementInternals` mixed in.\n */\nexport function mixinElementInternals<T extends MixinBase<LitElement>>(\n  base: T,\n): MixinReturn<T, WithElementInternals> {\n  abstract class WithElementInternalsElement\n    extends base\n    implements WithElementInternals\n  {\n    get [internals]() {\n      // Create internals in getter so that it can be used in methods called on\n      // construction in `ReactiveElement`, such as `requestUpdate()`.\n      if (!this[privateInternals]) {\n        // Cast needed for closure\n        this[privateInternals] = (this as HTMLElement).attachInternals();\n      }\n\n      return this[privateInternals];\n    }\n\n    [privateInternals]?: ElementInternals;\n  }\n\n  return WithElementInternalsElement;\n}\n"],"mappings":";;;;;;;AAAA;;;;;AAUA;;;;;;;;;;;;;;AAcA,OAAO,IAAMA,SAAS,GAAGC,MAAM,CAAC,WAAW,CAAC;AAgB5C;AACA,IAAMC,gBAAgB,GAAGD,MAAM,CAAC,kBAAkB,CAAC;AAEnD;;;;;;;;;AASA,OAAM,SAAUE,qBAAqBA,CACnCC,IAAO;EAAA,IAEQC,2BACb,0BAAAC,KAAA;IAAAC,SAAA,CAAAF,2BAAA,EAAAC,KAAA;IAAA,SAAAD,4BAAA;MAAAG,eAAA,OAAAH,2BAAA;MAAA,OAAAI,UAAA,OAAAJ,2BAAA,EAAAK,SAAA;IAAA;IAAAC,YAAA,CAAAN,2BAAA;MAAAO,GAAA,EAGKZ,SAAS;MAAAa,GAAA,EAAd,SAAAA,IAAA,EAAe;QACb;QACA;QACA,IAAI,CAAC,IAAI,CAACX,gBAAgB,CAAC,EAAE;UAC3B;UACA,IAAI,CAACA,gBAAgB,CAAC,GAAI,IAAoB,CAACY,eAAe,EAAE;;QAGlE,OAAO,IAAI,CAACZ,gBAAgB,CAAC;MAC/B;IAAC;IAAA,OAAAG,2BAAA;EAAA,EAZOD,IAAI;EAiBd,OAAOC,2BAA2B;AACpC"},"metadata":{},"sourceType":"module","externalDependencies":[]}