{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"../ha-list-item\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { fuzzyFilterSort } from \"../../common/string/filter/sequence-matching\";\nimport \"../ha-combo-box\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nexport let HaEntityPicker = _decorate([customElement(\"ha-entity-picker\")], function (_initialize, _LitElement) {\n  class HaEntityPicker extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaEntityPicker,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"autofocus\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"required\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"allow-custom-entity\"\n      })],\n      key: \"allowCustomEntity\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"helper\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"include-domains\"\n      })],\n      key: \"includeDomains\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"exclude-domains\"\n      })],\n      key: \"excludeDomains\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"include-device-classes\"\n      })],\n      key: \"includeDeviceClasses\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"include-unit-of-measurement\"\n      })],\n      key: \"includeUnitOfMeasurement\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"include-entities\"\n      })],\n      key: \"includeEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array,\n        attribute: \"exclude-entities\"\n      })],\n      key: \"excludeEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"entityFilter\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"hideClearIcon\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"item-label-path\"\n      })],\n      key: \"itemLabelPath\",\n      value() {\n        return \"friendly_name\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_opened\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-combo-box\", true)],\n      key: \"comboBox\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"open\",\n      value:\n      /**\n       * Show entities from specific domains.\n       * @type {Array}\n       * @attr include-domains\n       */\n\n      /**\n       * Show no entities of these domains.\n       * @type {Array}\n       * @attr exclude-domains\n       */\n\n      /**\n       * Show only entities of these device classes.\n       * @type {Array}\n       * @attr include-device-classes\n       */\n\n      /**\n       * Show only entities with these unit of measuments.\n       * @type {Array}\n       * @attr include-unit-of-measurement\n       */\n\n      /**\n       * List of allowed entities to show. Will ignore all other filters.\n       * @type {Array}\n       * @attr include-entities\n       */\n\n      /**\n       * List of entities to be excluded.\n       * @type {Array}\n       * @attr exclude-entities\n       */\n\n      async function open() {\n        var _this$comboBox;\n        await this.updateComplete;\n        await ((_this$comboBox = this.comboBox) === null || _this$comboBox === void 0 ? void 0 : _this$comboBox.open());\n      }\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value: async function focus() {\n        var _this$comboBox2;\n        await this.updateComplete;\n        await ((_this$comboBox2 = this.comboBox) === null || _this$comboBox2 === void 0 ? void 0 : _this$comboBox2.focus());\n      }\n    }, {\n      kind: \"field\",\n      key: \"_initedStates\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_states\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_rowRenderer\",\n      value() {\n        return item => html`<ha-list-item graphic=\"avatar\" .twoline=${!!item.entity_id}>\n      ${item.state ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item}\n            .hass=${this.hass}\n          ></state-badge>` : \"\"}\n      <span>${item.friendly_name}</span>\n      <span slot=\"secondary\">${item.entity_id}</span>\n    </ha-list-item>`;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getStates\",\n      value() {\n        return memoizeOne((_opened, hass, includeDomains, excludeDomains, entityFilter, includeDeviceClasses, includeUnitOfMeasurement, includeEntities, excludeEntities) => {\n          let states = [];\n          if (!hass) {\n            return [];\n          }\n          let entityIds = Object.keys(hass.states);\n          if (!entityIds.length) {\n            return [{\n              entity_id: \"\",\n              state: \"\",\n              last_changed: \"\",\n              last_updated: \"\",\n              context: {\n                id: \"\",\n                user_id: null,\n                parent_id: null\n              },\n              friendly_name: this.hass.localize(\"ui.components.entity.entity-picker.no_entities\"),\n              attributes: {\n                friendly_name: this.hass.localize(\"ui.components.entity.entity-picker.no_entities\"),\n                icon: \"mdi:magnify\"\n              },\n              strings: []\n            }];\n          }\n          if (includeEntities) {\n            entityIds = entityIds.filter(entityId => this.includeEntities.includes(entityId));\n            return entityIds.map(key => {\n              const friendly_name = computeStateName(hass.states[key]) || key;\n              return {\n                ...hass.states[key],\n                friendly_name,\n                strings: [key, friendly_name]\n              };\n            }).sort((entityA, entityB) => caseInsensitiveStringCompare(entityA.friendly_name, entityB.friendly_name, this.hass.locale.language));\n          }\n          if (excludeEntities) {\n            entityIds = entityIds.filter(entityId => !excludeEntities.includes(entityId));\n          }\n          if (includeDomains) {\n            entityIds = entityIds.filter(eid => includeDomains.includes(computeDomain(eid)));\n          }\n          if (excludeDomains) {\n            entityIds = entityIds.filter(eid => !excludeDomains.includes(computeDomain(eid)));\n          }\n          states = entityIds.map(key => {\n            const friendly_name = computeStateName(hass.states[key]) || key;\n            return {\n              ...hass.states[key],\n              friendly_name,\n              strings: [key, friendly_name]\n            };\n          }).sort((entityA, entityB) => caseInsensitiveStringCompare(entityA.friendly_name, entityB.friendly_name, this.hass.locale.language));\n          if (includeDeviceClasses) {\n            states = states.filter(stateObj =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || stateObj.attributes.device_class && includeDeviceClasses.includes(stateObj.attributes.device_class));\n          }\n          if (includeUnitOfMeasurement) {\n            states = states.filter(stateObj =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || stateObj.attributes.unit_of_measurement && includeUnitOfMeasurement.includes(stateObj.attributes.unit_of_measurement));\n          }\n          if (entityFilter) {\n            states = states.filter(stateObj =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter(stateObj));\n          }\n          if (!states.length) {\n            return [{\n              entity_id: \"\",\n              state: \"\",\n              last_changed: \"\",\n              last_updated: \"\",\n              context: {\n                id: \"\",\n                user_id: null,\n                parent_id: null\n              },\n              friendly_name: this.hass.localize(\"ui.components.entity.entity-picker.no_match\"),\n              attributes: {\n                friendly_name: this.hass.localize(\"ui.components.entity.entity-picker.no_match\"),\n                icon: \"mdi:magnify\"\n              },\n              strings: []\n            }];\n          }\n          return states;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        if (changedProps.has(\"value\") || changedProps.has(\"label\") || changedProps.has(\"disabled\")) {\n          return true;\n        }\n        return !(!changedProps.has(\"_opened\") && this._opened);\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        if (!this._initedStates || changedProps.has(\"_opened\") && this._opened) {\n          this._states = this._getStates(this._opened, this.hass, this.includeDomains, this.excludeDomains, this.entityFilter, this.includeDeviceClasses, this.includeUnitOfMeasurement, this.includeEntities, this.excludeEntities);\n          if (this._initedStates) {\n            this.comboBox.filteredItems = this._states;\n          }\n          this._initedStates = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-combo-box\n        item-value-path=\"entity_id\"\n        .itemLabelPath=${this.itemLabelPath}\n        .hass=${this.hass}\n        .value=${this._value}\n        .label=${this.label === undefined ? this.hass.localize(\"ui.components.entity.entity-picker.entity\") : this.label}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomEntity}\n        .filteredItems=${this._states}\n        .renderer=${this._rowRenderer}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_value\",\n      value: function _value() {\n        return this.value || \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_openedChanged\",\n      value: function _openedChanged(ev) {\n        this._opened = ev.detail.value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        ev.stopPropagation();\n        const newValue = ev.detail.value;\n        if (newValue !== this._value) {\n          this._setValue(newValue);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_filterChanged\",\n      value: function _filterChanged(ev) {\n        const target = ev.target;\n        const filterString = ev.detail.value.toLowerCase();\n        target.filteredItems = filterString.length ? fuzzyFilterSort(filterString, this._states) : this._states;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setValue\",\n      value: function _setValue(value) {\n        this.value = value;\n        setTimeout(() => {\n          fireEvent(this, \"value-changed\", {\n            value\n          });\n          fireEvent(this, \"change\");\n        }, 0);\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","customElement","property","query","state","memoizeOne","fireEvent","computeDomain","computeStateName","fuzzyFilterSort","caseInsensitiveStringCompare","HaEntityPicker","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","Array","open","_this$comboBox","updateComplete","comboBox","focus","_this$comboBox2","item","entity_id","hass","friendly_name","_opened","includeDomains","excludeDomains","entityFilter","includeDeviceClasses","includeUnitOfMeasurement","includeEntities","excludeEntities","states","entityIds","Object","keys","length","last_changed","last_updated","context","id","user_id","parent_id","localize","attributes","icon","strings","filter","entityId","includes","map","sort","entityA","entityB","locale","language","eid","stateObj","device_class","unit_of_measurement","shouldUpdate","changedProps","has","willUpdate","_initedStates","_states","_getStates","filteredItems","render","itemLabelPath","_value","label","undefined","helper","allowCustomEntity","_rowRenderer","required","disabled","_openedChanged","_valueChanged","_filterChanged","ev","detail","stopPropagation","newValue","_setValue","target","filterString","toLowerCase","setTimeout"],"sources":["/workspaces/frontend/src/components/entity/ha-entity-picker.ts"],"sourcesContent":["import \"../ha-list-item\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { ComboBoxLitRenderer } from \"@vaadin/combo-box/lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport {\n  fuzzyFilterSort,\n  ScorableTextItem,\n} from \"../../common/string/filter/sequence-matching\";\nimport { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"../ha-combo-box\";\nimport type { HaComboBox } from \"../ha-combo-box\";\nimport \"../ha-icon-button\";\nimport \"../ha-svg-icon\";\nimport \"./state-badge\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\n\ninterface HassEntityWithCachedName extends HassEntity, ScorableTextItem {\n  friendly_name: string;\n}\n\nexport type HaEntityPickerEntityFilterFunc = (entity: HassEntity) => boolean;\n\n@customElement(\"ha-entity-picker\")\nexport class HaEntityPicker extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public autofocus = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public required = false;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  @property() public label?: string;\n\n  @property() public value?: string;\n\n  @property() public helper?: string;\n\n  /**\n   * Show entities from specific domains.\n   * @type {Array}\n   * @attr include-domains\n   */\n  @property({ type: Array, attribute: \"include-domains\" })\n  public includeDomains?: string[];\n\n  /**\n   * Show no entities of these domains.\n   * @type {Array}\n   * @attr exclude-domains\n   */\n  @property({ type: Array, attribute: \"exclude-domains\" })\n  public excludeDomains?: string[];\n\n  /**\n   * Show only entities of these device classes.\n   * @type {Array}\n   * @attr include-device-classes\n   */\n  @property({ type: Array, attribute: \"include-device-classes\" })\n  public includeDeviceClasses?: string[];\n\n  /**\n   * Show only entities with these unit of measuments.\n   * @type {Array}\n   * @attr include-unit-of-measurement\n   */\n  @property({ type: Array, attribute: \"include-unit-of-measurement\" })\n  public includeUnitOfMeasurement?: string[];\n\n  /**\n   * List of allowed entities to show. Will ignore all other filters.\n   * @type {Array}\n   * @attr include-entities\n   */\n  @property({ type: Array, attribute: \"include-entities\" })\n  public includeEntities?: string[];\n\n  /**\n   * List of entities to be excluded.\n   * @type {Array}\n   * @attr exclude-entities\n   */\n  @property({ type: Array, attribute: \"exclude-entities\" })\n  public excludeEntities?: string[];\n\n  @property({ attribute: false })\n  public entityFilter?: HaEntityPickerEntityFilterFunc;\n\n  @property({ type: Boolean }) public hideClearIcon = false;\n\n  @property({ attribute: \"item-label-path\" }) public itemLabelPath =\n    \"friendly_name\";\n\n  @state() private _opened = false;\n\n  @query(\"ha-combo-box\", true) public comboBox!: HaComboBox;\n\n  public async open() {\n    await this.updateComplete;\n    await this.comboBox?.open();\n  }\n\n  public async focus() {\n    await this.updateComplete;\n    await this.comboBox?.focus();\n  }\n\n  private _initedStates = false;\n\n  private _states: HassEntityWithCachedName[] = [];\n\n  private _rowRenderer: ComboBoxLitRenderer<HassEntityWithCachedName> = (\n    item\n  ) =>\n    html`<ha-list-item graphic=\"avatar\" .twoline=${!!item.entity_id}>\n      ${item.state\n        ? html`<state-badge\n            slot=\"graphic\"\n            .stateObj=${item}\n            .hass=${this.hass}\n          ></state-badge>`\n        : \"\"}\n      <span>${item.friendly_name}</span>\n      <span slot=\"secondary\">${item.entity_id}</span>\n    </ha-list-item>`;\n\n  private _getStates = memoizeOne(\n    (\n      _opened: boolean,\n      hass: this[\"hass\"],\n      includeDomains: this[\"includeDomains\"],\n      excludeDomains: this[\"excludeDomains\"],\n      entityFilter: this[\"entityFilter\"],\n      includeDeviceClasses: this[\"includeDeviceClasses\"],\n      includeUnitOfMeasurement: this[\"includeUnitOfMeasurement\"],\n      includeEntities: this[\"includeEntities\"],\n      excludeEntities: this[\"excludeEntities\"]\n    ): HassEntityWithCachedName[] => {\n      let states: HassEntityWithCachedName[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (!entityIds.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_entities\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_entities\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n        ];\n      }\n\n      if (includeEntities) {\n        entityIds = entityIds.filter((entityId) =>\n          this.includeEntities!.includes(entityId)\n        );\n\n        return entityIds\n          .map((key) => {\n            const friendly_name = computeStateName(hass!.states[key]) || key;\n            return {\n              ...hass!.states[key],\n              friendly_name,\n              strings: [key, friendly_name],\n            };\n          })\n          .sort((entityA, entityB) =>\n            caseInsensitiveStringCompare(\n              entityA.friendly_name,\n              entityB.friendly_name,\n              this.hass.locale.language\n            )\n          );\n      }\n\n      if (excludeEntities) {\n        entityIds = entityIds.filter(\n          (entityId) => !excludeEntities!.includes(entityId)\n        );\n      }\n\n      if (includeDomains) {\n        entityIds = entityIds.filter((eid) =>\n          includeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      if (excludeDomains) {\n        entityIds = entityIds.filter(\n          (eid) => !excludeDomains.includes(computeDomain(eid))\n        );\n      }\n\n      states = entityIds\n        .map((key) => {\n          const friendly_name = computeStateName(hass!.states[key]) || key;\n          return {\n            ...hass!.states[key],\n            friendly_name,\n            strings: [key, friendly_name],\n          };\n        })\n        .sort((entityA, entityB) =>\n          caseInsensitiveStringCompare(\n            entityA.friendly_name,\n            entityB.friendly_name,\n            this.hass.locale.language\n          )\n        );\n\n      if (includeDeviceClasses) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.device_class &&\n              includeDeviceClasses.includes(stateObj.attributes.device_class))\n        );\n      }\n\n      if (includeUnitOfMeasurement) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value ||\n            (stateObj.attributes.unit_of_measurement &&\n              includeUnitOfMeasurement.includes(\n                stateObj.attributes.unit_of_measurement\n              ))\n        );\n      }\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n\n      if (!states.length) {\n        return [\n          {\n            entity_id: \"\",\n            state: \"\",\n            last_changed: \"\",\n            last_updated: \"\",\n            context: { id: \"\", user_id: null, parent_id: null },\n            friendly_name: this.hass!.localize(\n              \"ui.components.entity.entity-picker.no_match\"\n            ),\n            attributes: {\n              friendly_name: this.hass!.localize(\n                \"ui.components.entity.entity-picker.no_match\"\n              ),\n              icon: \"mdi:magnify\",\n            },\n            strings: [],\n          },\n        ];\n      }\n\n      return states;\n    }\n  );\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"value\") ||\n      changedProps.has(\"label\") ||\n      changedProps.has(\"disabled\")\n    ) {\n      return true;\n    }\n    return !(!changedProps.has(\"_opened\") && this._opened);\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this._initedStates || (changedProps.has(\"_opened\") && this._opened)) {\n      this._states = this._getStates(\n        this._opened,\n        this.hass,\n        this.includeDomains,\n        this.excludeDomains,\n        this.entityFilter,\n        this.includeDeviceClasses,\n        this.includeUnitOfMeasurement,\n        this.includeEntities,\n        this.excludeEntities\n      );\n      if (this._initedStates) {\n        this.comboBox.filteredItems = this._states;\n      }\n      this._initedStates = true;\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-combo-box\n        item-value-path=\"entity_id\"\n        .itemLabelPath=${this.itemLabelPath}\n        .hass=${this.hass}\n        .value=${this._value}\n        .label=${this.label === undefined\n          ? this.hass.localize(\"ui.components.entity.entity-picker.entity\")\n          : this.label}\n        .helper=${this.helper}\n        .allowCustomValue=${this.allowCustomEntity}\n        .filteredItems=${this._states}\n        .renderer=${this._rowRenderer}\n        .required=${this.required}\n        .disabled=${this.disabled}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n        @filter-changed=${this._filterChanged}\n      >\n      </ha-combo-box>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: ValueChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: ValueChangedEvent<string>) {\n    ev.stopPropagation();\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this._setValue(newValue);\n    }\n  }\n\n  private _filterChanged(ev: CustomEvent): void {\n    const target = ev.target as HaComboBox;\n    const filterString = ev.detail.value.toLowerCase();\n    target.filteredItems = filterString.length\n      ? fuzzyFilterSort<HassEntityWithCachedName>(filterString, this._states)\n      : this._states;\n  }\n\n  private _setValue(value: string) {\n    this.value = value;\n    setTimeout(() => {\n      fireEvent(this, \"value-changed\", { value });\n      fireEvent(this, \"change\");\n    }, 0);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}