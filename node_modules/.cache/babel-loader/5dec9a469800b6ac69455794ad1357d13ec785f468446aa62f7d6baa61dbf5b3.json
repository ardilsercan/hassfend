{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() {\n  return newInstance;\n}\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\nexport function showHideChildren(hide, children) {\n  for (let i = 0; i < children.length; i++) {\n    let n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n        // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          const replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */children;\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n = n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner && this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if (props && options.instanceProps || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, e => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    showHideChildren(hide, this.children);\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ && node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n  dispatchEvent(event) {\n    // eslint-disable-line no-unused-vars\n    return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n// This cast shouldn't be neccessary, but Closure doesn't understand that\n// TemplateInstanceBase is a constructor function.\n/** @type {function(new:TemplateInstanceBase)} */\nTemplateInstanceBase);\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ? MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase {};\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    const isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        let templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplate extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        const templatizedBase = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplateExtension extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop, klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE, {\n          fn: createForwardHostPropEffect(prop, userForwardHostProp)\n        });\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      const hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        prop = '_host_' + prop;\n        if (prop in target) {\n          const val = target[prop];\n          delete target[prop];\n          target.__data[prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner, prop.substring('_host_'.length), props[prop]);\n  };\n}\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)\n      });\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyHostPropEffect()\n      });\n    }\n  }\n}\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner, inst, prop, props[prop]);\n  };\n}\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */options || {};\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  const methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */template;\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */owner;\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */klass; //eslint-disable-line no-self-assign\n  return klass;\n}\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  const declaredProps = methodHost.constructor._properties;\n  const {\n    propertyEffects\n  } = templateInfo;\n  const {\n    instanceProps\n  } = options;\n  for (let prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      const effects = propertyEffects[prop];\n      for (let i = 0; i < effects.length; i++) {\n        const {\n          part\n        } = effects[i].info;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(`Property '${prop}' used in template but not ` + `declared in 'properties'; attribute will not be observed.`);\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if (model = node.__dataHost ? node : node.__templatizeInstance) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\nexport { TemplateInstanceBase };","map":{"version":3,"names":["PropertyEffects","MutableData","strictTemplatePolicy","legacyWarnings","wrap","newInstance","HTMLTemplateElementExtension","prototype","Object","create","HTMLTemplateElement","constructor","value","writable","DataTemplate","MutableDataTemplate","upgradeTemplate","template","setPrototypeOf","templateInstanceBase","showHideChildren","hide","children","i","length","n","Boolean","__hideTemplateChildren__","nodeType","Node","TEXT_NODE","__polymerTextContent__","textContent","localName","__polymerReplaced__","document","createComment","parentNode","replaceChild","replace","style","__polymerDisplay__","display","_showHideChildren","TemplateInstanceBase","props","_configureProperties","root","_stampTemplate","__dataHost","firstChild","nextSibling","push","__templatizeInstance","__templatizeOwner","options","__templatizeOptions","instanceProps","_enableProperties","forwardHostProp","hprop","__hostProps","_setPendingProperty","iprop","prop","_setPendingPropertyOrPath","_enqueueClient","_addEventListenerToNode","node","eventName","handler","_methodHost","parentModel","e","model","templateHost","_setUnmanagedPropertyToNode","__parentModel","dispatchEvent","event","MutableTemplateInstanceBase","findMethodHost","createTemplatizerClass","templateInfo","templatizerBase","mutableData","templatize","mixin","klass","_bindTemplate","addNotifyEffects","addPropagateEffects","target","methodHost","userForwardHostProp","hasHostProps","isTemplate","templatizeTemplateClass","templatizedBase","TemplatizedTemplate","TemplatizedTemplateExtension","hostProps","_addPropertyEffect","PROPERTY_EFFECT_TYPES","PROPAGATE","fn","createForwardHostPropEffect","_createNotifyingProperty","warnOnUndeclaredProperties","__dataProto","assign","__data","__dataTemp","__dataPending","__dataOld","val","hostProp","call","substring","userNotifyInstanceProp","notifyInstanceProp","NOTIFY","createNotifyInstancePropEffect","createNotifyHostPropEffect","instProp","inst","notifyHostProp","owner","Error","ctor","_parseTemplate","baseClass","templatizeInstanceClass","TemplateInstance","declaredProps","_properties","propertyEffects","effects","part","info","signature","static","console","warn","modelForElement"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/polymer/lib/utils/templatize.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\nexport function showHideChildren(hide, children) {\n  for (let i=0; i<children.length; i++) {\n    let n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n      // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          const replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */ (children);\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    showHideChildren(hide, this.children);\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n    // This cast shouldn't be neccessary, but Closure doesn't understand that\n    // TemplateInstanceBase is a constructor function.\n    /** @type {function(new:TemplateInstanceBase)} */ (TemplateInstanceBase));\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    const isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        let templatizedBase =\n            options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplate extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        const templatizedBase = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplateExtension extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass =\n            TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      const hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        prop = '_host_' + prop;\n        if (prop in target) {\n          const val = target[prop];\n          delete target[prop];\n          target.__data[prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  const methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  const declaredProps = methodHost.constructor._properties;\n  const {propertyEffects} = templateInfo;\n  const {instanceProps} = options;\n  for (let prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      const effects = propertyEffects[prop];\n      for (let i=0; i<effects.length; i++) {\n        const {part} = effects[i].info;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(`Property '${prop}' used in template but not ` +\n            `declared in 'properties'; attribute will not be observed.`);\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__dataHost ? node : node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n"],"mappings":"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BAA0BA,CAAA,EAAG;EACpC,OAAO,SAASG,cAAcA,CAACD,IAAI,EAAE7D,IAAI,EAAEnB,KAAK,EAAE;IAChDgF,IAAI,CAAC5E,UAAU,CAACgB,yBAAyB,CAAC,QAAQ,GAAGD,IAAI,EAAEnB,KAAK,CAACmB,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;EACrF,CAAC;AACH;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASsB,UAAUA,CAACrE,QAAQ,EAAE8G,KAAK,EAAExE,OAAO,EAAE;EACnD;EACA;EACA;EACA,IAAIrD,oBAAoB,IAAI,CAAC+E,cAAc,CAAChE,QAAQ,CAAC,EAAE;IACrD,MAAM,IAAI+G,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACAzE,OAAO,GAAG,iCAAkCA,OAAO,IAAI,CAAC,CAAE;EAC1D,IAAItC,QAAQ,CAACqC,iBAAiB,EAAE;IAC9B,MAAM,IAAI0E,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACA/G,QAAQ,CAACqC,iBAAiB,GAAGyE,KAAK;EAClC,MAAME,IAAI,GAAGF,KAAK,GAAGA,KAAK,CAACpH,WAAW,GAAGiC,oBAAoB;EAC7D,IAAIuC,YAAY,GAAG8C,IAAI,CAACC,cAAc,CAACjH,QAAQ,CAAC;EAChD;EACA;EACA;AACF;AACA;AACA;EACE,IAAIkH,SAAS,GAAGhD,YAAY,CAACiD,uBAAuB;EACpD,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAGjD,sBAAsB,CAACjE,QAAQ,EAAEkE,YAAY,EAAE5B,OAAO,CAAC;IACnE4B,YAAY,CAACiD,uBAAuB,GAAGD,SAAS;EAClD;EACA,MAAMtC,UAAU,GAAGZ,cAAc,CAAChE,QAAQ,CAAC;EAC3C;EACA0E,mBAAmB,CAAC1E,QAAQ,EAAEkE,YAAY,EAAE5B,OAAO,EAAEsC,UAAU,CAAC;EAChE;EACA;EACA,IAAIL,KAAK,GAAG,MAAM6C,gBAAgB,SAASF,SAAS,CAAC,EAAE;EACvD;EACA3C,KAAK,CAACjF,SAAS,CAACgE,WAAW,GAAGsB,UAAU;EACxC;EACAL,KAAK,CAACjF,SAAS,CAAC0C,UAAU,GAAG,4BAA8BhC,QAAS;EACpE;EACAuE,KAAK,CAACjF,SAAS,CAAC+C,iBAAiB,GAAG,sBAAwByE,KAAM;EAClE;EACAvC,KAAK,CAACjF,SAAS,CAACsD,WAAW,GAAGsB,YAAY,CAACkB,SAAS;EACpDb,KAAK,GAAG,iDAAkDA,KAAM,CAAC,CAAC;EAClE,OAAOA,KAAK;AACd;AAEA,SAASoB,0BAA0BA,CAACzB,YAAY,EAAE5B,OAAO,EAAEsC,UAAU,EAAE;EACrE,MAAMyC,aAAa,GAAGzC,UAAU,CAAClF,WAAW,CAAC4H,WAAW;EACxD,MAAM;IAACC;EAAe,CAAC,GAAGrD,YAAY;EACtC,MAAM;IAAC1B;EAAa,CAAC,GAAGF,OAAO;EAC/B,KAAK,IAAIS,IAAI,IAAIwE,eAAe,EAAE;IAChC;IACA;IACA,IAAI,CAACF,aAAa,CAACtE,IAAI,CAAC,IAAI,EAAEP,aAAa,IAAIA,aAAa,CAACO,IAAI,CAAC,CAAC,EAAE;MACnE,MAAMyE,OAAO,GAAGD,eAAe,CAACxE,IAAI,CAAC;MACrC,KAAK,IAAIzC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACkH,OAAO,CAACjH,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,MAAM;UAACmH;QAAI,CAAC,GAAGD,OAAO,CAAClH,CAAC,CAAC,CAACoH,IAAI;QAC9B,IAAI,EAAED,IAAI,CAACE,SAAS,IAAIF,IAAI,CAACE,SAAS,CAACC,MAAM,CAAC,EAAE;UAC9CC,OAAO,CAACC,IAAI,CAAE,aAAY/E,IAAK,6BAA4B,GACxD,2DAA0D,CAAC;UAC9D;QACF;MACF;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASgF,eAAeA,CAAC/H,QAAQ,EAAEmD,IAAI,EAAE;EAC9C,IAAIM,KAAK;EACT,OAAON,IAAI,EAAE;IACX;IACA;IACA;IACA,IAAKM,KAAK,GAAGN,IAAI,CAACnB,UAAU,GAAGmB,IAAI,GAAGA,IAAI,CAACf,oBAAoB,EAAG;MAChE;MACA;MACA,IAAIqB,KAAK,CAACzB,UAAU,IAAIhC,QAAQ,EAAE;QAChCmD,IAAI,GAAGM,KAAK,CAACzB,UAAU;MACzB,CAAC,MAAM;QACL,OAAOyB,KAAK;MACd;IACF,CAAC,MAAM;MACL;MACA;MACAN,IAAI,GAAGhE,IAAI,CAACgE,IAAI,CAAC,CAAC/B,UAAU;IAC9B;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAASO,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}