{"ast":null,"code":"import { getCollection } from \"home-assistant-js-websocket\";\n/**\n * Create an optimistic collection that includes a save function.\n * When the collection is saved, the collection is optimistically updated.\n * The update is reversed when the update failed.\n */\n\nexport const getOptimisticCollection = (saveCollection, conn, key, fetchCollection, subscribeUpdates) => {\n  const updateKey = `${key}-optimistic`;\n  const collection = getCollection(conn, key, fetchCollection, async (_conn, store) => {\n    // Subscribe to original updates\n    const subUpResult = subscribeUpdates ? subscribeUpdates(conn, store) : undefined;\n    // Store the store\n    conn[updateKey] = store;\n\n    // Unsub function to undo both\n    return () => {\n      if (subUpResult) {\n        subUpResult.then(unsub => unsub());\n      }\n      conn[updateKey] = undefined;\n    };\n  });\n  return {\n    ...collection,\n    async save(data) {\n      const store = conn[updateKey];\n      let current;\n\n      // Can be undefined if currently no subscribers\n      if (store) {\n        current = store.state;\n        store.setState(data, true);\n      }\n      try {\n        return await saveCollection(conn, data);\n      } catch (err) {\n        if (store) {\n          store.setState(current, true);\n        }\n        throw err;\n      }\n    }\n  };\n};","map":{"version":3,"names":["getCollection","getOptimisticCollection","saveCollection","conn","key","fetchCollection","subscribeUpdates","updateKey","collection","_conn","store","subUpResult","undefined","then","unsub","save","data","current","state","setState","err"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/collection.ts"],"sourcesContent":["import {\n  Collection,\n  Connection,\n  getCollection,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport { Store } from \"home-assistant-js-websocket/dist/store\";\n\ninterface OptimisticCollection<T> extends Collection<T> {\n  save(data: T): Promise<unknown>;\n}\n\n/**\n * Create an optimistic collection that includes a save function.\n * When the collection is saved, the collection is optimistically updated.\n * The update is reversed when the update failed.\n */\n\nexport const getOptimisticCollection = <StateType>(\n  saveCollection: (conn2: Connection, data: StateType) => Promise<unknown>,\n  conn: Connection,\n  key: string,\n  fetchCollection: (conn2: Connection) => Promise<StateType>,\n  subscribeUpdates?: (\n    conn2: Connection,\n    store: Store<StateType>\n  ) => Promise<UnsubscribeFunc>\n): OptimisticCollection<StateType> => {\n  const updateKey = `${key}-optimistic`;\n\n  const collection = getCollection<StateType>(\n    conn,\n    key,\n    fetchCollection,\n    async (_conn, store) => {\n      // Subscribe to original updates\n      const subUpResult = subscribeUpdates\n        ? subscribeUpdates(conn, store)\n        : undefined;\n      // Store the store\n      conn[updateKey] = store;\n\n      // Unsub function to undo both\n      return () => {\n        if (subUpResult) {\n          subUpResult.then((unsub) => unsub());\n        }\n        conn[updateKey] = undefined;\n      };\n    }\n  );\n  return {\n    ...collection,\n    async save(data: StateType) {\n      const store: Store<StateType> | undefined = conn[updateKey];\n      let current;\n\n      // Can be undefined if currently no subscribers\n      if (store) {\n        current = store.state;\n        store.setState(data, true);\n      }\n\n      try {\n        return await saveCollection(conn, data);\n      } catch (err: any) {\n        if (store) {\n          store.setState(current as any, true);\n        }\n        throw err;\n      }\n    },\n  };\n};\n"],"mappings":"AAAA,SAGEA,aAAa,QAER,6BAA6B;AAOpC;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,uBAAuB,GAAGA,CACrCC,cAAwE,EACxEC,IAAgB,EAChBC,GAAW,EACXC,eAA0D,EAC1DC,gBAG6B,KACO;EACpC,MAAMC,SAAS,GAAI,GAAEH,GAAI,aAAY;EAErC,MAAMI,UAAU,GAAGR,aAAa,CAC9BG,IAAI,EACJC,GAAG,EACHC,eAAe,EACf,OAAOI,KAAK,EAAEC,KAAK,KAAK;IACtB;IACA,MAAMC,WAAW,GAAGL,gBAAgB,GAChCA,gBAAgB,CAACH,IAAI,EAAEO,KAAK,CAAC,GAC7BE,SAAS;IACb;IACAT,IAAI,CAACI,SAAS,CAAC,GAAGG,KAAK;;IAEvB;IACA,OAAO,MAAM;MACX,IAAIC,WAAW,EAAE;QACfA,WAAW,CAACE,IAAI,CAAEC,KAAK,IAAKA,KAAK,CAAC,CAAC,CAAC;MACtC;MACAX,IAAI,CAACI,SAAS,CAAC,GAAGK,SAAS;IAC7B,CAAC;EACH,CACF,CAAC;EACD,OAAO;IACL,GAAGJ,UAAU;IACb,MAAMO,IAAIA,CAACC,IAAe,EAAE;MAC1B,MAAMN,KAAmC,GAAGP,IAAI,CAACI,SAAS,CAAC;MAC3D,IAAIU,OAAO;;MAEX;MACA,IAAIP,KAAK,EAAE;QACTO,OAAO,GAAGP,KAAK,CAACQ,KAAK;QACrBR,KAAK,CAACS,QAAQ,CAACH,IAAI,EAAE,IAAI,CAAC;MAC5B;MAEA,IAAI;QACF,OAAO,MAAMd,cAAc,CAACC,IAAI,EAAEa,IAAI,CAAC;MACzC,CAAC,CAAC,OAAOI,GAAQ,EAAE;QACjB,IAAIV,KAAK,EAAE;UACTA,KAAK,CAACS,QAAQ,CAACF,OAAO,EAAS,IAAI,CAAC;QACtC;QACA,MAAMG,GAAG;MACX;IACF;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}