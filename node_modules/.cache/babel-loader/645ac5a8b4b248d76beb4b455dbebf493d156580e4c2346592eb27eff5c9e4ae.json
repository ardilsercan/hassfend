{"ast":null,"code":"// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (tag, url, type) =>\n// This promise will be used by Promise.all to determine success or failure\nnew Promise((resolve, reject) => {\n  const element = document.createElement(tag);\n  let attr = \"src\";\n  let parent = \"body\";\n\n  // Important success and error for the promise\n  element.onload = () => resolve(url);\n  element.onerror = () => reject(url);\n\n  // Need to set different attributes depending on tag type\n  switch (tag) {\n    case \"script\":\n      element.async = true;\n      if (type) {\n        element.type = type;\n      }\n      break;\n    case \"link\":\n      element.type = \"text/css\";\n      element.rel = \"stylesheet\";\n      attr = \"href\";\n      parent = \"head\";\n  }\n\n  // Inject into document to kick off loading\n  element[attr] = url;\n  document[parent].appendChild(element);\n});\nexport const loadCSS = url => _load(\"link\", url);\nexport const loadJS = url => _load(\"script\", url);\nexport const loadImg = url => _load(\"img\", url);\nexport const loadModule = url => _load(\"script\", url, \"module\");","map":{"version":3,"names":["_load","tag","url","type","Promise","resolve","reject","element","document","createElement","attr","parent","onload","onerror","async","rel","appendChild","loadCSS","loadJS","loadImg","loadModule"],"sources":["/workspaces/frontend/src/common/dom/load_resource.ts"],"sourcesContent":["// Load a resource and get a promise when loading done.\n// From: https://davidwalsh.name/javascript-loader\n\nconst _load = (tag: \"link\" | \"script\" | \"img\", url: string, type?: \"module\") =>\n  // This promise will be used by Promise.all to determine success or failure\n  new Promise((resolve, reject) => {\n    const element = document.createElement(tag);\n    let attr = \"src\";\n    let parent = \"body\";\n\n    // Important success and error for the promise\n    element.onload = () => resolve(url);\n    element.onerror = () => reject(url);\n\n    // Need to set different attributes depending on tag type\n    switch (tag) {\n      case \"script\":\n        (element as HTMLScriptElement).async = true;\n        if (type) {\n          (element as HTMLScriptElement).type = type;\n        }\n        break;\n      case \"link\":\n        (element as HTMLLinkElement).type = \"text/css\";\n        (element as HTMLLinkElement).rel = \"stylesheet\";\n        attr = \"href\";\n        parent = \"head\";\n    }\n\n    // Inject into document to kick off loading\n    element[attr] = url;\n    document[parent].appendChild(element);\n  });\nexport const loadCSS = (url: string) => _load(\"link\", url);\nexport const loadJS = (url: string) => _load(\"script\", url);\nexport const loadImg = (url: string) => _load(\"img\", url);\nexport const loadModule = (url: string) => _load(\"script\", url, \"module\");\n"],"mappings":"AAAA;AACA;;AAEA,MAAMA,KAAK,GAAGA,CAACC,GAA8B,EAAEC,GAAW,EAAEC,IAAe;AACzE;AACA,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,MAAMC,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAACR,GAAG,CAAC;EAC3C,IAAIS,IAAI,GAAG,KAAK;EAChB,IAAIC,MAAM,GAAG,MAAM;;EAEnB;EACAJ,OAAO,CAACK,MAAM,GAAG,MAAMP,OAAO,CAACH,GAAG,CAAC;EACnCK,OAAO,CAACM,OAAO,GAAG,MAAMP,MAAM,CAACJ,GAAG,CAAC;;EAEnC;EACA,QAAQD,GAAG;IACT,KAAK,QAAQ;MACVM,OAAO,CAAuBO,KAAK,GAAG,IAAI;MAC3C,IAAIX,IAAI,EAAE;QACPI,OAAO,CAAuBJ,IAAI,GAAGA,IAAI;MAC5C;MACA;IACF,KAAK,MAAM;MACRI,OAAO,CAAqBJ,IAAI,GAAG,UAAU;MAC7CI,OAAO,CAAqBQ,GAAG,GAAG,YAAY;MAC/CL,IAAI,GAAG,MAAM;MACbC,MAAM,GAAG,MAAM;EACnB;;EAEA;EACAJ,OAAO,CAACG,IAAI,CAAC,GAAGR,GAAG;EACnBM,QAAQ,CAACG,MAAM,CAAC,CAACK,WAAW,CAACT,OAAO,CAAC;AACvC,CAAC,CAAC;AACJ,OAAO,MAAMU,OAAO,GAAIf,GAAW,IAAKF,KAAK,CAAC,MAAM,EAAEE,GAAG,CAAC;AAC1D,OAAO,MAAMgB,MAAM,GAAIhB,GAAW,IAAKF,KAAK,CAAC,QAAQ,EAAEE,GAAG,CAAC;AAC3D,OAAO,MAAMiB,OAAO,GAAIjB,GAAW,IAAKF,KAAK,CAAC,KAAK,EAAEE,GAAG,CAAC;AACzD,OAAO,MAAMkB,UAAU,GAAIlB,GAAW,IAAKF,KAAK,CAAC,QAAQ,EAAEE,GAAG,EAAE,QAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}