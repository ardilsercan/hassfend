{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nconst mdiInformation = \"M13,9H11V7H13M13,17H11V11H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-gauge\";\nimport \"../../../../components/ha-svg-icon\";\nimport { energySourcesByType, getEnergyDataCollection } from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { severityMap } from \"../hui-gauge-card\";\nimport { hasConfigChanged } from \"../../common/has-changed\";\nconst FORMAT_OPTIONS = {\n  maximumFractionDigits: 0\n};\nlet HuiEnergySelfSufficiencyGaugeCard = _decorate([customElement(\"hui-energy-self-sufficiency-gauge-card\")], function (_initialize, _SubscribeMixin) {\n  class HuiEnergySelfSufficiencyGaugeCard extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiEnergySelfSufficiencyGaugeCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_data\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"hassSubscribeRequiredHostProps\",\n      value() {\n        return [\"_config\"];\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        var _this$_config;\n        return [getEnergyDataCollection(this.hass, {\n          key: (_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.collection_key\n        }).subscribe(data => {\n          this._data = data;\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getCardSize\",\n      value: function getCardSize() {\n        return 4;\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        return hasConfigChanged(this, changedProps) || changedProps.size > 1 || !changedProps.has(\"hass\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _calculateStatisticsS;\n        if (!this._config || !this.hass) {\n          return nothing;\n        }\n        if (!this._data) {\n          return html`${this.hass.localize(\"ui.panel.lovelace.cards.energy.loading\")}`;\n        }\n        const prefs = this._data.prefs;\n        const types = energySourcesByType(prefs);\n\n        // The strategy only includes this card if we have a grid.\n        const hasConsumption = true;\n        const hasSolarProduction = types.solar !== undefined;\n        const hasBattery = types.battery !== undefined;\n        const hasReturnToGrid = hasConsumption && types.grid[0].flow_to.length > 0;\n        const totalFromGrid = (_calculateStatisticsS = calculateStatisticsSumGrowth(this._data.stats, types.grid[0].flow_from.map(flow => flow.stat_energy_from))) !== null && _calculateStatisticsS !== void 0 ? _calculateStatisticsS : 0;\n        let totalSolarProduction = null;\n        if (hasSolarProduction) {\n          totalSolarProduction = calculateStatisticsSumGrowth(this._data.stats, types.solar.map(source => source.stat_energy_from)) || 0;\n        }\n        let totalBatteryIn = null;\n        let totalBatteryOut = null;\n        if (hasBattery) {\n          totalBatteryIn = calculateStatisticsSumGrowth(this._data.stats, types.battery.map(source => source.stat_energy_to)) || 0;\n          totalBatteryOut = calculateStatisticsSumGrowth(this._data.stats, types.battery.map(source => source.stat_energy_from)) || 0;\n        }\n        let returnedToGrid = null;\n        if (hasReturnToGrid) {\n          returnedToGrid = calculateStatisticsSumGrowth(this._data.stats, types.grid[0].flow_to.map(flow => flow.stat_energy_to)) || 0;\n        }\n        let solarConsumption = null;\n        if (hasSolarProduction) {\n          solarConsumption = (totalSolarProduction || 0) - (returnedToGrid || 0) - (totalBatteryIn || 0);\n        }\n        let batteryFromGrid = null;\n        let batteryToGrid = null;\n        if (solarConsumption !== null && solarConsumption < 0) {\n          // What we returned to the grid and what went in to the battery is more than produced,\n          // so we have used grid energy to fill the battery\n          // or returned battery energy to the grid\n          if (hasBattery) {\n            batteryFromGrid = solarConsumption * -1;\n            if (batteryFromGrid > totalFromGrid) {\n              batteryToGrid = Math.min(0, batteryFromGrid - totalFromGrid);\n              batteryFromGrid = totalFromGrid;\n            }\n          }\n          solarConsumption = 0;\n        }\n        let batteryConsumption = null;\n        if (hasBattery) {\n          batteryConsumption = (totalBatteryOut || 0) - (batteryToGrid || 0);\n        }\n        const gridConsumption = Math.max(0, totalFromGrid - (batteryFromGrid || 0));\n        const totalHomeConsumption = Math.max(0, gridConsumption + (solarConsumption || 0) + (batteryConsumption || 0));\n        let value;\n        if (totalFromGrid !== null && totalHomeConsumption !== null && totalHomeConsumption > 0) {\n          value = (1 - totalFromGrid / totalHomeConsumption) * 100;\n        }\n        return html`\n      <ha-card>\n        ${value !== undefined ? html`\n              <ha-svg-icon id=\"info\" .path=${mdiInformation}></ha-svg-icon>\n              <simple-tooltip animation-delay=\"0\" for=\"info\" position=\"left\">\n                <span>\n                  ${this.hass.localize(\"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.card_indicates_self_sufficiency_quota\")}\n                </span>\n              </simple-tooltip>\n              <ha-gauge\n                min=\"0\"\n                max=\"100\"\n                .value=${value}\n                label=\"%\"\n                .formatOptions=${FORMAT_OPTIONS}\n                .locale=${this.hass.locale}\n                style=${styleMap({\n          \"--gauge-color\": this._computeSeverity(value)\n        })}\n              ></ha-gauge>\n              <div class=\"name\">\n                ${this.hass.localize(\"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.self_sufficiency_quota\")}\n              </div>\n            ` : this.hass.localize(\"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.self_sufficiency_could_not_calc\")}\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeSeverity\",\n      value: function _computeSeverity(numberValue) {\n        if (numberValue > 75) {\n          return severityMap.green;\n        }\n        if (numberValue < 50) {\n          return severityMap.yellow;\n        }\n        return severityMap.normal;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-card {\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n        direction: ltr;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n\n      ha-svg-icon {\n        position: absolute;\n        right: 4px;\n        inset-inline-end: 4px;\n        inset-inline-start: initial;\n        top: 4px;\n        color: var(--secondary-text-color);\n      }\n      simple-tooltip > span {\n        font-size: 12px;\n        line-height: 12px;\n      }\n      simple-tooltip {\n        width: 80%;\n        max-width: 250px;\n        top: 8px !important;\n      }\n    `;\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["mdiInformation","css","html","LitElement","nothing","customElement","property","state","styleMap","energySourcesByType","getEnergyDataCollection","calculateStatisticsSumGrowth","SubscribeMixin","severityMap","hasConfigChanged","FORMAT_OPTIONS","maximumFractionDigits","HuiEnergySelfSufficiencyGaugeCard","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","hassSubscribe","_this$_config","hass","_config","collection_key","subscribe","data","_data","getCardSize","setConfig","config","shouldUpdate","changedProps","size","has","render","_calculateStatisticsS","localize","prefs","types","hasConsumption","hasSolarProduction","solar","undefined","hasBattery","battery","hasReturnToGrid","grid","flow_to","length","totalFromGrid","stats","flow_from","map","flow","stat_energy_from","totalSolarProduction","source","totalBatteryIn","totalBatteryOut","stat_energy_to","returnedToGrid","solarConsumption","batteryFromGrid","batteryToGrid","Math","min","batteryConsumption","gridConsumption","max","totalHomeConsumption","locale","_computeSeverity","numberValue","green","yellow","normal","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/cards/energy/hui-energy-self-sufficiency-gauge-card.ts"],"sourcesContent":["import \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { mdiInformation } from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-gauge\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  EnergyData,\n  energySourcesByType,\n  getEnergyDataCollection,\n} from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { LovelaceCard } from \"../../types\";\nimport { severityMap } from \"../hui-gauge-card\";\nimport type { EnergySelfSufficiencyGaugeCardConfig } from \"../types\";\nimport { hasConfigChanged } from \"../../common/has-changed\";\n\nconst FORMAT_OPTIONS = {\n  maximumFractionDigits: 0,\n};\n\n@customElement(\"hui-energy-self-sufficiency-gauge-card\")\nclass HuiEnergySelfSufficiencyGaugeCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EnergySelfSufficiencyGaugeCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  protected hassSubscribeRequiredHostProps = [\"_config\"];\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass!, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  public getCardSize(): number {\n    return 4;\n  }\n\n  public setConfig(config: EnergySelfSufficiencyGaugeCardConfig): void {\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return (\n      hasConfigChanged(this, changedProps) ||\n      changedProps.size > 1 ||\n      !changedProps.has(\"hass\")\n    );\n  }\n\n  protected render() {\n    if (!this._config || !this.hass) {\n      return nothing;\n    }\n\n    if (!this._data) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.cards.energy.loading\"\n      )}`;\n    }\n\n    const prefs = this._data.prefs;\n    const types = energySourcesByType(prefs);\n\n    // The strategy only includes this card if we have a grid.\n    const hasConsumption = true;\n\n    const hasSolarProduction = types.solar !== undefined;\n    const hasBattery = types.battery !== undefined;\n    const hasReturnToGrid = hasConsumption && types.grid![0].flow_to.length > 0;\n\n    const totalFromGrid =\n      calculateStatisticsSumGrowth(\n        this._data.stats,\n        types.grid![0].flow_from.map((flow) => flow.stat_energy_from)\n      ) ?? 0;\n\n    let totalSolarProduction: number | null = null;\n\n    if (hasSolarProduction) {\n      totalSolarProduction =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.solar!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let totalBatteryIn: number | null = null;\n    let totalBatteryOut: number | null = null;\n\n    if (hasBattery) {\n      totalBatteryIn =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_to)\n        ) || 0;\n      totalBatteryOut =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let returnedToGrid: number | null = null;\n\n    if (hasReturnToGrid) {\n      returnedToGrid =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.grid![0].flow_to.map((flow) => flow.stat_energy_to)\n        ) || 0;\n    }\n\n    let solarConsumption: number | null = null;\n    if (hasSolarProduction) {\n      solarConsumption =\n        (totalSolarProduction || 0) -\n        (returnedToGrid || 0) -\n        (totalBatteryIn || 0);\n    }\n\n    let batteryFromGrid: null | number = null;\n    let batteryToGrid: null | number = null;\n    if (solarConsumption !== null && solarConsumption < 0) {\n      // What we returned to the grid and what went in to the battery is more than produced,\n      // so we have used grid energy to fill the battery\n      // or returned battery energy to the grid\n      if (hasBattery) {\n        batteryFromGrid = solarConsumption * -1;\n        if (batteryFromGrid > totalFromGrid) {\n          batteryToGrid = Math.min(0, batteryFromGrid - totalFromGrid);\n          batteryFromGrid = totalFromGrid;\n        }\n      }\n      solarConsumption = 0;\n    }\n\n    let batteryConsumption: number | null = null;\n    if (hasBattery) {\n      batteryConsumption = (totalBatteryOut || 0) - (batteryToGrid || 0);\n    }\n\n    const gridConsumption = Math.max(0, totalFromGrid - (batteryFromGrid || 0));\n\n    const totalHomeConsumption = Math.max(\n      0,\n      gridConsumption + (solarConsumption || 0) + (batteryConsumption || 0)\n    );\n\n    let value: number | undefined;\n    if (\n      totalFromGrid !== null &&\n      totalHomeConsumption !== null &&\n      totalHomeConsumption > 0\n    ) {\n      value = (1 - totalFromGrid / totalHomeConsumption) * 100;\n    }\n\n    return html`\n      <ha-card>\n        ${value !== undefined\n          ? html`\n              <ha-svg-icon id=\"info\" .path=${mdiInformation}></ha-svg-icon>\n              <simple-tooltip animation-delay=\"0\" for=\"info\" position=\"left\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.card_indicates_self_sufficiency_quota\"\n                  )}\n                </span>\n              </simple-tooltip>\n              <ha-gauge\n                min=\"0\"\n                max=\"100\"\n                .value=${value}\n                label=\"%\"\n                .formatOptions=${FORMAT_OPTIONS}\n                .locale=${this.hass.locale}\n                style=${styleMap({\n                  \"--gauge-color\": this._computeSeverity(value),\n                })}\n              ></ha-gauge>\n              <div class=\"name\">\n                ${this.hass.localize(\n                  \"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.self_sufficiency_quota\"\n                )}\n              </div>\n            `\n          : this.hass.localize(\n              \"ui.panel.lovelace.cards.energy.self_sufficiency_gauge.self_sufficiency_could_not_calc\"\n            )}\n      </ha-card>\n    `;\n  }\n\n  private _computeSeverity(numberValue: number): string {\n    if (numberValue > 75) {\n      return severityMap.green;\n    }\n    if (numberValue < 50) {\n      return severityMap.yellow;\n    }\n    return severityMap.normal;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        height: 100%;\n        overflow: hidden;\n        padding: 16px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        flex-direction: column;\n        box-sizing: border-box;\n      }\n\n      ha-gauge {\n        width: 100%;\n        max-width: 250px;\n        direction: ltr;\n      }\n\n      .name {\n        text-align: center;\n        line-height: initial;\n        color: var(--primary-text-color);\n        width: 100%;\n        font-size: 15px;\n        margin-top: 8px;\n      }\n\n      ha-svg-icon {\n        position: absolute;\n        right: 4px;\n        inset-inline-end: 4px;\n        inset-inline-start: initial;\n        top: 4px;\n        color: var(--secondary-text-color);\n      }\n      simple-tooltip > span {\n        font-size: 12px;\n        line-height: 12px;\n      }\n      simple-tooltip {\n        width: 80%;\n        max-width: 250px;\n        top: 8px !important;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-self-sufficiency-gauge-card\": HuiEnergySelfSufficiencyGaugeCard;\n  }\n}\n"],"mappings":"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FACF,CAAE;AACd;AACA,KAAK;MACH;IAAC;MAAAtB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAqD,iBAAyBC,WAAmB,EAAU;QACpD,IAAIA,WAAW,GAAG,EAAE,EAAE;UACpB,OAAOtE,WAAW,CAACuE,KAAK;QAC1B;QACA,IAAID,WAAW,GAAG,EAAE,EAAE;UACpB,OAAOtE,WAAW,CAACwE,MAAM;QAC3B;QACA,OAAOxE,WAAW,CAACyE,MAAM;MAC3B;IAAC;MAAA7D,IAAA;MAAA8D,MAAA;MAAA3D,GAAA;MAAAC,KAAA,EAED,SAAA2D,OAAA,EAAoC;QAClC,OAAOvF,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GA7OOW,cAAc,CAACT,UAAU,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}