{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-button\";\nimport \"../../components/ha-control-switch\";\nimport \"../../components/ha-state-icon\";\nimport { UNAVAILABLE, UNKNOWN } from \"../../data/entity\";\nimport { forwardHaptic } from \"../../data/haptics\";\nexport let HaStateControlValveToggle = _decorate([customElement(\"ha-state-control-valve-toggle\")], function (_initialize, _LitElement) {\n  class HaStateControlValveToggle extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStateControlValveToggle,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const checked = ev.target.checked;\n        if (checked) {\n          this._turnOn();\n        } else {\n          this._turnOff();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_turnOn\",\n      value: function _turnOn() {\n        this._callService(true);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_turnOff\",\n      value: function _turnOff() {\n        this._callService(false);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_callService\",\n      value: async function _callService(turnOn) {\n        if (!this.hass || !this.stateObj) {\n          return;\n        }\n        forwardHaptic(\"light\");\n        await this.hass.callService(\"valve\", turnOn ? \"open_valve\" : \"close_valve\", {\n          entity_id: this.stateObj.entity_id\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const onColor = stateColorCss(this.stateObj, \"open\");\n        const offColor = stateColorCss(this.stateObj, \"closed\");\n        const isOn = this.stateObj.state === \"open\" || this.stateObj.state === \"closing\" || this.stateObj.state === \"opening\";\n        const isOff = this.stateObj.state === \"closed\";\n        if (this.stateObj.attributes.assumed_state || this.stateObj.state === UNKNOWN) {\n          return html`\n        <div class=\"buttons\">\n          <ha-control-button\n            .label=${this.hass.localize(\"ui.card.valve.open_valve\")}\n            @click=${this._turnOn}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n            active: isOn\n          })}\n            style=${styleMap({\n            \"--color\": onColor\n          })}\n          >\n            <ha-state-icon\n              .hass=${this.hass}\n              .stateObj=${this.stateObj}\n              stateValue=\"open\"\n            ></ha-state-icon>\n          </ha-control-button>\n          <ha-control-button\n            .label=${this.hass.localize(\"ui.card.valve.close_valve\")}\n            @click=${this._turnOff}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n            active: isOff\n          })}\n            style=${styleMap({\n            \"--color\": offColor\n          })}\n          >\n            <ha-state-icon\n              .hass=${this.hass}\n              .stateObj=${this.stateObj}\n              stateValue=\"closed\"\n            ></ha-state-icon>\n          </ha-control-button>\n        </div>\n      `;\n        }\n        return html`\n      <ha-control-switch\n        vertical\n        reversed\n        .checked=${isOn}\n        @change=${this._valueChanged}\n        .ariaLabel=${isOn ? this.hass.localize(\"ui.card.valve.close_valve\") : this.hass.localize(\"ui.card.valve.open_valve\")}\n        style=${styleMap({\n          \"--control-switch-on-color\": onColor,\n          \"--control-switch-off-color\": offColor\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      >\n        <ha-state-icon\n          slot=\"icon-on\"\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          stateValue=\"open\"\n        ></ha-state-icon>\n        <ha-state-icon\n          slot=\"icon-off\"\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          stateValue=\"closed\"\n        ></ha-state-icon>\n      </ha-control-switch>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-switch {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-switch-thickness: 100px;\n        --control-switch-border-radius: 24px;\n        --control-switch-padding: 6px;\n        --mdc-icon-size: 24px;\n      }\n      .buttons {\n        display: flex;\n        flex-direction: column;\n        width: 100px;\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        padding: 6px;\n        box-sizing: border-box;\n      }\n      ha-control-button {\n        flex: 1;\n        width: 100%;\n        --control-button-border-radius: 18px;\n        --mdc-icon-size: 24px;\n      }\n      ha-control-button.active {\n        --control-button-icon-color: white;\n        --control-button-background-color: var(--color);\n        --control-button-background-opacity: 1;\n      }\n      ha-control-button:not(:last-child) {\n        margin-bottom: 6px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","classMap","styleMap","stateColorCss","UNAVAILABLE","UNKNOWN","forwardHaptic","HaStateControlValveToggle","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","_valueChanged","ev","checked","target","_turnOn","_turnOff","_callService","turnOn","hass","stateObj","callService","entity_id","render","onColor","offColor","isOn","state","isOff","attributes","assumed_state","localize","active","static","styles"],"sources":["/workspaces/frontend/src/state-control/valve/ha-state-control-valve-toggle.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-button\";\nimport \"../../components/ha-control-switch\";\nimport \"../../components/ha-state-icon\";\nimport { UNAVAILABLE, UNKNOWN } from \"../../data/entity\";\nimport { forwardHaptic } from \"../../data/haptics\";\nimport { HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-state-control-valve-toggle\")\nexport class HaStateControlValveToggle extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: HassEntity;\n\n  private _valueChanged(ev) {\n    const checked = ev.target.checked as boolean;\n\n    if (checked) {\n      this._turnOn();\n    } else {\n      this._turnOff();\n    }\n  }\n\n  private _turnOn() {\n    this._callService(true);\n  }\n\n  private _turnOff() {\n    this._callService(false);\n  }\n\n  private async _callService(turnOn): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    forwardHaptic(\"light\");\n\n    await this.hass.callService(\n      \"valve\",\n      turnOn ? \"open_valve\" : \"close_valve\",\n      {\n        entity_id: this.stateObj.entity_id,\n      }\n    );\n  }\n\n  protected render(): TemplateResult {\n    const onColor = stateColorCss(this.stateObj, \"open\");\n    const offColor = stateColorCss(this.stateObj, \"closed\");\n\n    const isOn =\n      this.stateObj.state === \"open\" ||\n      this.stateObj.state === \"closing\" ||\n      this.stateObj.state === \"opening\";\n    const isOff = this.stateObj.state === \"closed\";\n\n    if (\n      this.stateObj.attributes.assumed_state ||\n      this.stateObj.state === UNKNOWN\n    ) {\n      return html`\n        <div class=\"buttons\">\n          <ha-control-button\n            .label=${this.hass.localize(\"ui.card.valve.open_valve\")}\n            @click=${this._turnOn}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n              active: isOn,\n            })}\n            style=${styleMap({\n              \"--color\": onColor,\n            })}\n          >\n            <ha-state-icon\n              .hass=${this.hass}\n              .stateObj=${this.stateObj}\n              stateValue=\"open\"\n            ></ha-state-icon>\n          </ha-control-button>\n          <ha-control-button\n            .label=${this.hass.localize(\"ui.card.valve.close_valve\")}\n            @click=${this._turnOff}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n            class=${classMap({\n              active: isOff,\n            })}\n            style=${styleMap({\n              \"--color\": offColor,\n            })}\n          >\n            <ha-state-icon\n              .hass=${this.hass}\n              .stateObj=${this.stateObj}\n              stateValue=\"closed\"\n            ></ha-state-icon>\n          </ha-control-button>\n        </div>\n      `;\n    }\n\n    return html`\n      <ha-control-switch\n        vertical\n        reversed\n        .checked=${isOn}\n        @change=${this._valueChanged}\n        .ariaLabel=${isOn\n          ? this.hass.localize(\"ui.card.valve.close_valve\")\n          : this.hass.localize(\"ui.card.valve.open_valve\")}\n        style=${styleMap({\n          \"--control-switch-on-color\": onColor,\n          \"--control-switch-off-color\": offColor,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n      >\n        <ha-state-icon\n          slot=\"icon-on\"\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          stateValue=\"open\"\n        ></ha-state-icon>\n        <ha-state-icon\n          slot=\"icon-off\"\n          .hass=${this.hass}\n          .stateObj=${this.stateObj}\n          stateValue=\"closed\"\n        ></ha-state-icon>\n      </ha-control-switch>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-switch {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-switch-thickness: 100px;\n        --control-switch-border-radius: 24px;\n        --control-switch-padding: 6px;\n        --mdc-icon-size: 24px;\n      }\n      .buttons {\n        display: flex;\n        flex-direction: column;\n        width: 100px;\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        padding: 6px;\n        box-sizing: border-box;\n      }\n      ha-control-button {\n        flex: 1;\n        width: 100%;\n        --control-button-border-radius: 18px;\n        --mdc-icon-size: 24px;\n      }\n      ha-control-button.active {\n        --control-button-icon-color: white;\n        --control-button-background-color: var(--color);\n        --control-button-background-opacity: 1;\n      }\n      ha-control-button:not(:last-child) {\n        margin-bottom: 6px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-valve-toggle\": HaStateControlValveToggle;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}