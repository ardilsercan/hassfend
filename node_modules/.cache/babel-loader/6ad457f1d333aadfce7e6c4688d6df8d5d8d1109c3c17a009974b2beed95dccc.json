{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.is-frozen.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"@material/mwc-button\";\nimport deepFreeze from \"deep-freeze\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport { addSearchParam, removeSearchParam } from \"../../common/url/search-params\";\nimport { domainToName } from \"../../data/integration\";\nimport { subscribeLovelaceUpdates } from \"../../data/lovelace\";\nimport { deleteConfig as _deleteConfig, fetchConfig, isStrategyDashboard, saveConfig as _saveConfig } from \"../../data/lovelace/config/types\";\nimport { isStrategyView } from \"../../data/lovelace/config/view\";\nimport { fetchResources } from \"../../data/lovelace/resource\";\nimport \"../../layouts/hass-error-screen\";\nimport \"../../layouts/hass-loading-screen\";\nimport { showToast } from \"../../util/toast\";\nimport { loadLovelaceResources } from \"./common/load-resources\";\nimport { showSaveDialog } from \"./editor/show-save-config-dialog\";\nimport \"./hui-root\";\nimport { generateLovelaceDashboardStrategy } from \"./strategies/get-strategy\";\nwindow.loadCardHelpers = function () {\n  return import(\"./custom-card-helpers\");\n};\nvar DEFAULT_CONFIG = {\n  strategy: {\n    type: \"original-states\"\n  }\n};\nvar editorLoaded = false;\nvar resourcesLoaded = false;\nexport var LovelacePanel = _decorate([customElement(\"ha-panel-lovelace\")], function (_initialize, _LitElement) {\n  var LovelacePanel = /*#__PURE__*/function (_LitElement2) {\n    _inherits(LovelacePanel, _LitElement2);\n    function LovelacePanel() {\n      var _this;\n      _classCallCheck(this, LovelacePanel);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, LovelacePanel, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(LovelacePanel);\n  }(_LitElement);\n  return {\n    F: LovelacePanel,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"panel\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_panelState\",\n      value: function value() {\n        return \"loading\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_errorMsg\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"lovelace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_ignoreNextUpdateEvent\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_fetchConfigOnConnect\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_unsubUpdates\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_loading\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(LovelacePanel.prototype), \"connectedCallback\", this).call(this);\n        if (this.lovelace && this.hass && this.lovelace.locale !== this.hass.locale) {\n          // language has been changed, rebuild UI\n          this._setLovelaceConfig(this.lovelace.config, this.lovelace.rawConfig, this.lovelace.mode);\n        } else if (this.lovelace && this.lovelace.mode === \"generated\") {\n          // When lovelace is generated, we re-generate each time a user goes\n          // to the states panel to make sure new entities are shown.\n          this._panelState = \"loading\";\n          this._regenerateConfig();\n        } else if (this._fetchConfigOnConnect) {\n          // Config was changed when we were not at the lovelace panel\n          this._fetchConfig(false);\n        }\n        window.addEventListener(\"connection-status\", this._handleConnectionStatus);\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(LovelacePanel.prototype), \"disconnectedCallback\", this).call(this);\n        // On the main dashboard we want to stay subscribed as that one is cached.\n        if (this.urlPath !== null && this._unsubUpdates) {\n          this._unsubUpdates.then(function (unsub) {\n            return unsub();\n          });\n          this._unsubUpdates = undefined;\n        }\n        // reload lovelace on reconnect so we are sure we have the latest config\n        window.removeEventListener(\"connection-status\", this._handleConnectionStatus);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var panelState = this._panelState;\n        if (panelState === \"loaded\") {\n          return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n        <hui-root\\n          .hass=\", \"\\n          .lovelace=\", \"\\n          .route=\", \"\\n          .narrow=\", \"\\n          @config-refresh=\", \"\\n        ></hui-root>\\n      \"])), this.hass, this.lovelace, this.route, this.narrow, this._forceFetchConfig);\n        }\n        if (panelState === \"error\") {\n          return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n        <hass-error-screen\\n          .hass=\", \"\\n          title=\", \"\\n          .error=\", \"\\n        >\\n          <mwc-button raised @click=\", \">\\n            \", \"\\n          </mwc-button>\\n        </hass-error-screen>\\n      \"])), this.hass, domainToName(this.hass.localize, \"lovelace\"), this._errorMsg, this._forceFetchConfig, this.hass.localize(\"ui.panel.lovelace.reload_lovelace\"));\n        }\n        if (panelState === \"yaml-editor\") {\n          return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n        <hui-editor\\n          .hass=\", \"\\n          .lovelace=\", \"\\n          .closeEditor=\", \"\\n        ></hui-editor>\\n      \"])), this.hass, this.lovelace, this._closeEditor);\n        }\n        return html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n      <hass-loading-screen\\n        rootnav\\n        .hass=\", \"\\n        .narrow=\", \"\\n      ></hass-loading-screen>\\n    \"])), this.hass, this.narrow);\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(LovelacePanel.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (!this.lovelace && this._panelState !== \"error\" && !this._loading) {\n          this._fetchConfig(false);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(LovelacePanel.prototype), \"firstUpdated\", this).call(this, changedProps);\n        if (!this._unsubUpdates) {\n          this._subscribeUpdates();\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_handleConnectionStatus\",\n      value: function value() {\n        var _this2 = this;\n        return function (ev) {\n          // reload lovelace on reconnect so we are sure we have the latest config\n          if (ev.detail === \"connected\") {\n            _this2._fetchConfig(false);\n          }\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_regenerateConfig\",\n      value: function () {\n        var _regenerateConfig2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var conf;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return generateLovelaceDashboardStrategy(DEFAULT_CONFIG.strategy, this.hass);\n              case 2:\n                conf = _context.sent;\n                this._setLovelaceConfig(conf, DEFAULT_CONFIG, \"generated\");\n                this._panelState = \"loaded\";\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _regenerateConfig() {\n          return _regenerateConfig2.apply(this, arguments);\n        }\n        return _regenerateConfig;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_subscribeUpdates\",\n      value: function () {\n        var _subscribeUpdates2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this3 = this;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                this._unsubUpdates = subscribeLovelaceUpdates(this.hass.connection, this.urlPath, function () {\n                  return _this3._lovelaceChanged();\n                });\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _subscribeUpdates() {\n          return _subscribeUpdates2.apply(this, arguments);\n        }\n        return _subscribeUpdates;\n      }()\n    }, {\n      kind: \"field\",\n      key: \"_closeEditor\",\n      value: function value() {\n        var _this4 = this;\n        return function () {\n          _this4._panelState = \"loaded\";\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_lovelaceChanged\",\n      value: function _lovelaceChanged() {\n        var _this5 = this;\n        if (this._ignoreNextUpdateEvent) {\n          this._ignoreNextUpdateEvent = false;\n          return;\n        }\n        if (!this.isConnected) {\n          // We can't fire events from an element that is not connected\n          // Make sure we fetch the config as soon as the user goes back to Lovelace\n          this._fetchConfigOnConnect = true;\n          return;\n        }\n        showToast(this, {\n          message: this.hass.localize(\"ui.panel.lovelace.changed_toast.message\"),\n          action: {\n            action: function action() {\n              return _this5._fetchConfig(false);\n            },\n            text: this.hass.localize(\"ui.common.refresh\")\n          },\n          duration: 0,\n          dismissable: false\n        });\n      }\n    }, {\n      kind: \"get\",\n      key: \"urlPath\",\n      value: function urlPath() {\n        return this.panel.url_path === \"lovelace\" ? null : this.panel.url_path;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_forceFetchConfig\",\n      value: function _forceFetchConfig() {\n        this._fetchConfig(true);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchConfig\",\n      value: function () {\n        var _fetchConfig2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(forceDiskRefresh) {\n          var _this6 = this;\n          var conf, rawConf, confMode, confProm, preloadWindow, _this$hass, _this$hass2;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                this._loading = true;\n                confMode = this.panel.config.mode;\n                preloadWindow = window; // On first load, we speed up loading page by having LL promise ready\n                if (preloadWindow.llConfProm) {\n                  confProm = preloadWindow.llConfProm;\n                  preloadWindow.llConfProm = undefined;\n                }\n                if (!resourcesLoaded) {\n                  resourcesLoaded = true;\n                  (preloadWindow.llResProm || fetchResources(this.hass.connection)).then(function (resources) {\n                    return loadLovelaceResources(resources, _this6.hass);\n                  });\n                }\n                if (this.urlPath !== null || !confProm) {\n                  // Refreshing a YAML config can trigger an update event. We will ignore\n                  // all update events while fetching the config and for 2 seconds after the config is back.\n                  // We ignore because we already have the latest config.\n                  if (this.lovelace && this.lovelace.mode === \"yaml\") {\n                    this._ignoreNextUpdateEvent = true;\n                  }\n                  confProm = fetchConfig(this.hass.connection, this.urlPath, forceDiskRefresh);\n                }\n                _context3.prev = 6;\n                _context3.next = 9;\n                return confProm;\n              case 9:\n                rawConf = _context3.sent;\n                if (!isStrategyDashboard(rawConf)) {\n                  _context3.next = 18;\n                  break;\n                }\n                if (!(!((_this$hass = this.hass) !== null && _this$hass !== void 0 && _this$hass.entities) || !this.hass.devices || !this.hass.areas)) {\n                  _context3.next = 13;\n                  break;\n                }\n                return _context3.abrupt(\"return\");\n              case 13:\n                _context3.next = 15;\n                return generateLovelaceDashboardStrategy(rawConf.strategy, this.hass);\n              case 15:\n                conf = _context3.sent;\n                _context3.next = 19;\n                break;\n              case 18:\n                conf = rawConf;\n              case 19:\n                _context3.next = 35;\n                break;\n              case 21:\n                _context3.prev = 21;\n                _context3.t0 = _context3[\"catch\"](6);\n                if (!(_context3.t0.code !== \"config_not_found\")) {\n                  _context3.next = 28;\n                  break;\n                }\n                // eslint-disable-next-line\n                console.log(_context3.t0);\n                this._panelState = \"error\";\n                this._errorMsg = _context3.t0.message;\n                return _context3.abrupt(\"return\");\n              case 28:\n                if (!(!((_this$hass2 = this.hass) !== null && _this$hass2 !== void 0 && _this$hass2.entities) || !this.hass.devices || !this.hass.areas)) {\n                  _context3.next = 30;\n                  break;\n                }\n                return _context3.abrupt(\"return\");\n              case 30:\n                _context3.next = 32;\n                return generateLovelaceDashboardStrategy(DEFAULT_CONFIG.strategy, this.hass);\n              case 32:\n                conf = _context3.sent;\n                rawConf = DEFAULT_CONFIG;\n                confMode = \"generated\";\n              case 35:\n                _context3.prev = 35;\n                this._loading = false;\n                // Ignore updates for another 2 seconds.\n                if (this.lovelace && this.lovelace.mode === \"yaml\") {\n                  setTimeout(function () {\n                    _this6._ignoreNextUpdateEvent = false;\n                  }, 2000);\n                }\n                return _context3.finish(35);\n              case 39:\n                this._panelState = this._panelState === \"yaml-editor\" ? this._panelState : \"loaded\";\n                this._setLovelaceConfig(conf, rawConf, confMode);\n              case 41:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this, [[6, 21, 35, 39]]);\n        }));\n        function _fetchConfig(_x) {\n          return _fetchConfig2.apply(this, arguments);\n        }\n        return _fetchConfig;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_checkLovelaceConfig\",\n      value: function _checkLovelaceConfig(config) {\n        // Somehow there can be badges with value null, we remove those\n        if (isStrategyDashboard(config)) {\n          return config;\n        }\n        var checkedConfig = !Object.isFrozen(config) ? config : undefined;\n        config.views.forEach(function (view, index) {\n          if (isStrategyView(view)) {\n            return;\n          }\n          if (view.badges && !view.badges.every(Boolean)) {\n            checkedConfig = checkedConfig || Object.assign(Object.assign({}, config), {}, {\n              views: _toConsumableArray(config.views)\n            });\n            var updatedView = Object.assign({}, view);\n            updatedView.badges = view.badges.filter(Boolean);\n            checkedConfig.views[index] = updatedView;\n          }\n        });\n        return checkedConfig ? deepFreeze(checkedConfig) : config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setLovelaceConfig\",\n      value: function _setLovelaceConfig(config, rawConfig, mode) {\n        var _this7 = this;\n        config = this._checkLovelaceConfig(config);\n        var urlPath = this.urlPath;\n        this.lovelace = {\n          config: config,\n          rawConfig: rawConfig,\n          mode: mode,\n          urlPath: this.urlPath,\n          editMode: this.lovelace ? this.lovelace.editMode : false,\n          locale: this.hass.locale,\n          enableFullEditMode: function enableFullEditMode() {\n            if (!editorLoaded) {\n              editorLoaded = true;\n              import(\"./hui-editor\");\n            }\n            _this7._panelState = \"yaml-editor\";\n          },\n          setEditMode: function setEditMode(editMode) {\n            // If the dashboard is generated (default dashboard)\n            // Propose to take control of it\n            if (_this7.lovelace.mode === \"generated\" && editMode) {\n              showSaveDialog(_this7, {\n                lovelace: _this7.lovelace,\n                mode: _this7.panel.config.mode,\n                narrow: _this7.narrow\n              });\n              return;\n            }\n\n            // If we use a strategy for dashboard, we cannot show the edit UI\n            // So go straight to the YAML editor\n            if (isStrategyDashboard(_this7.lovelace.rawConfig) && editMode) {\n              _this7.lovelace.enableFullEditMode();\n              return;\n            }\n            _this7._updateLovelace({\n              editMode: editMode\n            });\n          },\n          saveConfig: function () {\n            var _saveConfig2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(newConfig) {\n              var _ref, previousConfig, previousRawConfig, previousMode, conf;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _ref = _this7.lovelace, previousConfig = _ref.config, previousRawConfig = _ref.rawConfig, previousMode = _ref.mode;\n                    newConfig = _this7._checkLovelaceConfig(newConfig);\n                    if (!isStrategyDashboard(newConfig)) {\n                      _context4.next = 8;\n                      break;\n                    }\n                    _context4.next = 5;\n                    return generateLovelaceDashboardStrategy(newConfig.strategy, _this7.hass);\n                  case 5:\n                    conf = _context4.sent;\n                    _context4.next = 9;\n                    break;\n                  case 8:\n                    conf = newConfig;\n                  case 9:\n                    _context4.prev = 9;\n                    // Optimistic update\n                    _this7._updateLovelace({\n                      config: conf,\n                      rawConfig: newConfig,\n                      mode: \"storage\"\n                    });\n                    _this7._ignoreNextUpdateEvent = true;\n                    _context4.next = 14;\n                    return _saveConfig(_this7.hass, urlPath, newConfig);\n                  case 14:\n                    _context4.next = 21;\n                    break;\n                  case 16:\n                    _context4.prev = 16;\n                    _context4.t0 = _context4[\"catch\"](9);\n                    // eslint-disable-next-line\n                    console.error(_context4.t0);\n                    // Rollback the optimistic update\n                    _this7._updateLovelace({\n                      config: previousConfig,\n                      rawConfig: previousRawConfig,\n                      mode: previousMode\n                    });\n                    throw _context4.t0;\n                  case 21:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4, null, [[9, 16]]);\n            }));\n            function saveConfig(_x2) {\n              return _saveConfig2.apply(this, arguments);\n            }\n            return saveConfig;\n          }(),\n          deleteConfig: function () {\n            var _deleteConfig2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n              var _ref2, previousConfig, previousRawConfig, previousMode, generatedConf;\n              return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                while (1) switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _ref2 = _this7.lovelace, previousConfig = _ref2.config, previousRawConfig = _ref2.rawConfig, previousMode = _ref2.mode;\n                    _context5.prev = 1;\n                    _context5.next = 4;\n                    return generateLovelaceDashboardStrategy(DEFAULT_CONFIG.strategy, _this7.hass);\n                  case 4:\n                    generatedConf = _context5.sent;\n                    _this7._updateLovelace({\n                      config: generatedConf,\n                      rawConfig: DEFAULT_CONFIG,\n                      mode: \"generated\",\n                      editMode: false\n                    });\n                    _this7._ignoreNextUpdateEvent = true;\n                    _context5.next = 9;\n                    return _deleteConfig(_this7.hass, urlPath);\n                  case 9:\n                    _context5.next = 16;\n                    break;\n                  case 11:\n                    _context5.prev = 11;\n                    _context5.t0 = _context5[\"catch\"](1);\n                    // eslint-disable-next-line\n                    console.error(_context5.t0);\n                    // Rollback the optimistic update\n                    _this7._updateLovelace({\n                      config: previousConfig,\n                      rawConfig: previousRawConfig,\n                      mode: previousMode\n                    });\n                    throw _context5.t0;\n                  case 16:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }, _callee5, null, [[1, 11]]);\n            }));\n            function deleteConfig() {\n              return _deleteConfig2.apply(this, arguments);\n            }\n            return deleteConfig;\n          }()\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateLovelace\",\n      value: function _updateLovelace(props) {\n        this.lovelace = Object.assign(Object.assign({}, this.lovelace), props);\n        if (\"editMode\" in props) {\n          window.history.replaceState(null, \"\", constructUrlCurrentPath(props.editMode ? addSearchParam({\n            edit: \"1\"\n          }) : removeSearchParam(\"edit\")));\n        }\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["deepFreeze","html","LitElement","customElement","property","state","constructUrlCurrentPath","addSearchParam","removeSearchParam","domainToName","subscribeLovelaceUpdates","deleteConfig","fetchConfig","isStrategyDashboard","saveConfig","isStrategyView","fetchResources","showToast","loadLovelaceResources","showSaveDialog","generateLovelaceDashboardStrategy","window","loadCardHelpers","DEFAULT_CONFIG","strategy","type","editorLoaded","resourcesLoaded","LovelacePanel","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","Boolean","connectedCallback","_get","_getPrototypeOf","prototype","call","lovelace","hass","locale","_setLovelaceConfig","config","rawConfig","mode","_panelState","_regenerateConfig","_fetchConfigOnConnect","_fetchConfig","addEventListener","_handleConnectionStatus","disconnectedCallback","urlPath","_unsubUpdates","then","unsub","undefined","removeEventListener","render","panelState","_templateObject","_taggedTemplateLiteral","route","narrow","_forceFetchConfig","_templateObject2","localize","_errorMsg","_templateObject3","_closeEditor","_templateObject4","willUpdate","changedProps","_loading","firstUpdated","_subscribeUpdates","_this2","ev","detail","_regenerateConfig2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","conf","wrap","_callee$","_context","prev","next","sent","stop","apply","_subscribeUpdates2","_callee2","_this3","_callee2$","_context2","connection","_lovelaceChanged","_this4","_this5","_ignoreNextUpdateEvent","isConnected","message","action","text","duration","dismissable","panel","url_path","_fetchConfig2","_callee3","forceDiskRefresh","_this6","rawConf","confMode","confProm","preloadWindow","_this$hass","_this$hass2","_callee3$","_context3","llConfProm","llResProm","resources","entities","devices","areas","abrupt","t0","code","console","log","setTimeout","finish","_x","_checkLovelaceConfig","checkedConfig","Object","isFrozen","views","forEach","view","index","badges","every","assign","_toConsumableArray","updatedView","filter","_this7","editMode","enableFullEditMode","setEditMode","_updateLovelace","_saveConfig2","_callee4","newConfig","_ref","previousConfig","previousRawConfig","previousMode","_callee4$","_context4","error","_x2","_deleteConfig2","_callee5","_ref2","generatedConf","_callee5$","_context5","props","history","replaceState","edit"],"sources":["/workspaces/frontend/src/panels/lovelace/ha-panel-lovelace.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport deepFreeze from \"deep-freeze\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport {\n  addSearchParam,\n  removeSearchParam,\n} from \"../../common/url/search-params\";\nimport { domainToName } from \"../../data/integration\";\nimport { subscribeLovelaceUpdates } from \"../../data/lovelace\";\nimport {\n  deleteConfig,\n  fetchConfig,\n  isStrategyDashboard,\n  LovelaceConfig,\n  LovelaceDashboardStrategyConfig,\n  LovelaceRawConfig,\n  saveConfig,\n} from \"../../data/lovelace/config/types\";\nimport {\n  isStrategyView,\n  LovelaceViewConfig,\n} from \"../../data/lovelace/config/view\";\nimport { fetchResources } from \"../../data/lovelace/resource\";\nimport { WindowWithPreloads } from \"../../data/preloads\";\nimport \"../../layouts/hass-error-screen\";\nimport \"../../layouts/hass-loading-screen\";\nimport { HomeAssistant, PanelInfo, Route } from \"../../types\";\nimport { showToast } from \"../../util/toast\";\nimport { loadLovelaceResources } from \"./common/load-resources\";\nimport { showSaveDialog } from \"./editor/show-save-config-dialog\";\nimport \"./hui-root\";\nimport { generateLovelaceDashboardStrategy } from \"./strategies/get-strategy\";\nimport { Lovelace } from \"./types\";\n\n(window as any).loadCardHelpers = () => import(\"./custom-card-helpers\");\n\nconst DEFAULT_CONFIG: LovelaceDashboardStrategyConfig = {\n  strategy: {\n    type: \"original-states\",\n  },\n};\n\ninterface LovelacePanelConfig {\n  mode: \"yaml\" | \"storage\";\n}\n\nlet editorLoaded = false;\nlet resourcesLoaded = false;\n\n@customElement(\"ha-panel-lovelace\")\nexport class LovelacePanel extends LitElement {\n  @property({ attribute: false }) public panel?: PanelInfo<LovelacePanelConfig>;\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public route?: Route;\n\n  @state() private _panelState: \"loading\" | \"loaded\" | \"error\" | \"yaml-editor\" =\n    \"loading\";\n\n  @state() private _errorMsg?: string;\n\n  @state() private lovelace?: Lovelace;\n\n  private _ignoreNextUpdateEvent = false;\n\n  private _fetchConfigOnConnect = false;\n\n  private _unsubUpdates?: Promise<UnsubscribeFunc>;\n\n  private _loading = false;\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (\n      this.lovelace &&\n      this.hass &&\n      this.lovelace.locale !== this.hass.locale\n    ) {\n      // language has been changed, rebuild UI\n      this._setLovelaceConfig(\n        this.lovelace.config,\n        this.lovelace.rawConfig,\n        this.lovelace.mode\n      );\n    } else if (this.lovelace && this.lovelace.mode === \"generated\") {\n      // When lovelace is generated, we re-generate each time a user goes\n      // to the states panel to make sure new entities are shown.\n      this._panelState = \"loading\";\n      this._regenerateConfig();\n    } else if (this._fetchConfigOnConnect) {\n      // Config was changed when we were not at the lovelace panel\n      this._fetchConfig(false);\n    }\n    window.addEventListener(\"connection-status\", this._handleConnectionStatus);\n  }\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    // On the main dashboard we want to stay subscribed as that one is cached.\n    if (this.urlPath !== null && this._unsubUpdates) {\n      this._unsubUpdates.then((unsub) => unsub());\n      this._unsubUpdates = undefined;\n    }\n    // reload lovelace on reconnect so we are sure we have the latest config\n    window.removeEventListener(\n      \"connection-status\",\n      this._handleConnectionStatus\n    );\n  }\n\n  protected render(): TemplateResult | void {\n    const panelState = this._panelState;\n\n    if (panelState === \"loaded\") {\n      return html`\n        <hui-root\n          .hass=${this.hass}\n          .lovelace=${this.lovelace}\n          .route=${this.route}\n          .narrow=${this.narrow}\n          @config-refresh=${this._forceFetchConfig}\n        ></hui-root>\n      `;\n    }\n\n    if (panelState === \"error\") {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          title=${domainToName(this.hass!.localize, \"lovelace\")}\n          .error=${this._errorMsg}\n        >\n          <mwc-button raised @click=${this._forceFetchConfig}>\n            ${this.hass!.localize(\"ui.panel.lovelace.reload_lovelace\")}\n          </mwc-button>\n        </hass-error-screen>\n      `;\n    }\n\n    if (panelState === \"yaml-editor\") {\n      return html`\n        <hui-editor\n          .hass=${this.hass}\n          .lovelace=${this.lovelace}\n          .closeEditor=${this._closeEditor}\n        ></hui-editor>\n      `;\n    }\n\n    return html`\n      <hass-loading-screen\n        rootnav\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      ></hass-loading-screen>\n    `;\n  }\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this.lovelace && this._panelState !== \"error\" && !this._loading) {\n      this._fetchConfig(false);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    if (!this._unsubUpdates) {\n      this._subscribeUpdates();\n    }\n  }\n\n  private _handleConnectionStatus = (ev) => {\n    // reload lovelace on reconnect so we are sure we have the latest config\n    if (ev.detail === \"connected\") {\n      this._fetchConfig(false);\n    }\n  };\n\n  private async _regenerateConfig() {\n    const conf = await generateLovelaceDashboardStrategy(\n      DEFAULT_CONFIG.strategy,\n      this.hass!\n    );\n    this._setLovelaceConfig(conf, DEFAULT_CONFIG, \"generated\");\n    this._panelState = \"loaded\";\n  }\n\n  private async _subscribeUpdates() {\n    this._unsubUpdates = subscribeLovelaceUpdates(\n      this.hass!.connection,\n      this.urlPath,\n      () => this._lovelaceChanged()\n    );\n  }\n\n  private _closeEditor = () => {\n    this._panelState = \"loaded\";\n  };\n\n  private _lovelaceChanged() {\n    if (this._ignoreNextUpdateEvent) {\n      this._ignoreNextUpdateEvent = false;\n      return;\n    }\n    if (!this.isConnected) {\n      // We can't fire events from an element that is not connected\n      // Make sure we fetch the config as soon as the user goes back to Lovelace\n      this._fetchConfigOnConnect = true;\n      return;\n    }\n    showToast(this, {\n      message: this.hass!.localize(\"ui.panel.lovelace.changed_toast.message\"),\n      action: {\n        action: () => this._fetchConfig(false),\n        text: this.hass!.localize(\"ui.common.refresh\"),\n      },\n      duration: 0,\n      dismissable: false,\n    });\n  }\n\n  public get urlPath() {\n    return this.panel!.url_path === \"lovelace\" ? null : this.panel!.url_path;\n  }\n\n  private _forceFetchConfig() {\n    this._fetchConfig(true);\n  }\n\n  private async _fetchConfig(forceDiskRefresh: boolean) {\n    this._loading = true;\n\n    let conf: LovelaceConfig;\n    let rawConf: LovelaceRawConfig | undefined;\n    let confMode: Lovelace[\"mode\"] = this.panel!.config.mode;\n    let confProm: Promise<LovelaceRawConfig> | undefined;\n    const preloadWindow = window as WindowWithPreloads;\n\n    // On first load, we speed up loading page by having LL promise ready\n    if (preloadWindow.llConfProm) {\n      confProm = preloadWindow.llConfProm;\n      preloadWindow.llConfProm = undefined;\n    }\n    if (!resourcesLoaded) {\n      resourcesLoaded = true;\n      (preloadWindow.llResProm || fetchResources(this.hass!.connection)).then(\n        (resources) => loadLovelaceResources(resources, this.hass!)\n      );\n    }\n\n    if (this.urlPath !== null || !confProm) {\n      // Refreshing a YAML config can trigger an update event. We will ignore\n      // all update events while fetching the config and for 2 seconds after the config is back.\n      // We ignore because we already have the latest config.\n      if (this.lovelace && this.lovelace.mode === \"yaml\") {\n        this._ignoreNextUpdateEvent = true;\n      }\n\n      confProm = fetchConfig(\n        this.hass!.connection,\n        this.urlPath,\n        forceDiskRefresh\n      );\n    }\n\n    try {\n      rawConf = await confProm!;\n\n      // If strategy defined, apply it here.\n      if (isStrategyDashboard(rawConf)) {\n        if (!this.hass?.entities || !this.hass.devices || !this.hass.areas) {\n          // We need these to generate a dashboard, wait for them\n          return;\n        }\n        conf = await generateLovelaceDashboardStrategy(\n          rawConf.strategy,\n          this.hass!\n        );\n      } else {\n        conf = rawConf;\n      }\n    } catch (err: any) {\n      if (err.code !== \"config_not_found\") {\n        // eslint-disable-next-line\n        console.log(err);\n        this._panelState = \"error\";\n        this._errorMsg = err.message;\n        return;\n      }\n      if (!this.hass?.entities || !this.hass.devices || !this.hass.areas) {\n        // We need these to generate a dashboard, wait for them\n        return;\n      }\n      conf = await generateLovelaceDashboardStrategy(\n        DEFAULT_CONFIG.strategy,\n        this.hass!\n      );\n      rawConf = DEFAULT_CONFIG;\n      confMode = \"generated\";\n    } finally {\n      this._loading = false;\n      // Ignore updates for another 2 seconds.\n      if (this.lovelace && this.lovelace.mode === \"yaml\") {\n        setTimeout(() => {\n          this._ignoreNextUpdateEvent = false;\n        }, 2000);\n      }\n    }\n\n    this._panelState =\n      this._panelState === \"yaml-editor\" ? this._panelState : \"loaded\";\n    this._setLovelaceConfig(conf, rawConf, confMode);\n  }\n\n  private _checkLovelaceConfig(config: LovelaceRawConfig) {\n    // Somehow there can be badges with value null, we remove those\n    if (isStrategyDashboard(config)) {\n      return config;\n    }\n    let checkedConfig = !Object.isFrozen(config) ? config : undefined;\n    config.views.forEach((view, index) => {\n      if (isStrategyView(view)) {\n        return;\n      }\n      if (view.badges && !view.badges.every(Boolean)) {\n        checkedConfig = checkedConfig || {\n          ...config,\n          views: [...config.views],\n        };\n        const updatedView = { ...view } as LovelaceViewConfig;\n        updatedView.badges = view.badges.filter(Boolean);\n        checkedConfig.views[index] = updatedView;\n      }\n    });\n    return checkedConfig ? deepFreeze(checkedConfig) : config;\n  }\n\n  private _setLovelaceConfig(\n    config: LovelaceConfig,\n    rawConfig: LovelaceRawConfig,\n    mode: Lovelace[\"mode\"]\n  ) {\n    config = this._checkLovelaceConfig(config);\n    const urlPath = this.urlPath;\n    this.lovelace = {\n      config,\n      rawConfig,\n      mode,\n      urlPath: this.urlPath,\n      editMode: this.lovelace ? this.lovelace.editMode : false,\n      locale: this.hass!.locale,\n      enableFullEditMode: () => {\n        if (!editorLoaded) {\n          editorLoaded = true;\n          import(\"./hui-editor\");\n        }\n        this._panelState = \"yaml-editor\";\n      },\n      setEditMode: (editMode: boolean) => {\n        // If the dashboard is generated (default dashboard)\n        // Propose to take control of it\n        if (this.lovelace!.mode === \"generated\" && editMode) {\n          showSaveDialog(this, {\n            lovelace: this.lovelace!,\n            mode: this.panel!.config.mode,\n            narrow: this.narrow!,\n          });\n          return;\n        }\n\n        // If we use a strategy for dashboard, we cannot show the edit UI\n        // So go straight to the YAML editor\n        if (isStrategyDashboard(this.lovelace!.rawConfig) && editMode) {\n          this.lovelace!.enableFullEditMode();\n          return;\n        }\n\n        this._updateLovelace({ editMode });\n      },\n      saveConfig: async (newConfig: LovelaceRawConfig): Promise<void> => {\n        const {\n          config: previousConfig,\n          rawConfig: previousRawConfig,\n          mode: previousMode,\n        } = this.lovelace!;\n        newConfig = this._checkLovelaceConfig(newConfig);\n        let conf: LovelaceConfig;\n        // If strategy defined, apply it here.\n        if (isStrategyDashboard(newConfig)) {\n          conf = await generateLovelaceDashboardStrategy(\n            newConfig.strategy,\n            this.hass!\n          );\n        } else {\n          conf = newConfig;\n        }\n        try {\n          // Optimistic update\n          this._updateLovelace({\n            config: conf,\n            rawConfig: newConfig,\n            mode: \"storage\",\n          });\n          this._ignoreNextUpdateEvent = true;\n          await saveConfig(this.hass!, urlPath, newConfig);\n        } catch (err: any) {\n          // eslint-disable-next-line\n          console.error(err);\n          // Rollback the optimistic update\n          this._updateLovelace({\n            config: previousConfig,\n            rawConfig: previousRawConfig,\n            mode: previousMode,\n          });\n          throw err;\n        }\n      },\n      deleteConfig: async (): Promise<void> => {\n        const {\n          config: previousConfig,\n          rawConfig: previousRawConfig,\n          mode: previousMode,\n        } = this.lovelace!;\n        try {\n          // Optimistic update\n          const generatedConf = await generateLovelaceDashboardStrategy(\n            DEFAULT_CONFIG.strategy,\n            this.hass!\n          );\n          this._updateLovelace({\n            config: generatedConf,\n            rawConfig: DEFAULT_CONFIG,\n            mode: \"generated\",\n            editMode: false,\n          });\n          this._ignoreNextUpdateEvent = true;\n          await deleteConfig(this.hass!, urlPath);\n        } catch (err: any) {\n          // eslint-disable-next-line\n          console.error(err);\n          // Rollback the optimistic update\n          this._updateLovelace({\n            config: previousConfig,\n            rawConfig: previousRawConfig,\n            mode: previousMode,\n          });\n          throw err;\n        }\n      },\n    };\n  }\n\n  private _updateLovelace(props: Partial<Lovelace>) {\n    this.lovelace = {\n      ...this.lovelace!,\n      ...props,\n    };\n\n    if (\"editMode\" in props) {\n      window.history.replaceState(\n        null,\n        \"\",\n        constructUrlCurrentPath(\n          props.editMode\n            ? addSearchParam({ edit: \"1\" })\n            : removeSearchParam(\"edit\")\n        )\n      );\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-lovelace\": LovelacePanel;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}