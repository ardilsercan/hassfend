{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiFilterVariant = \"M6,13H18V11H6M3,6V8H21V6M10,18H14V16H10V18Z\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport Fuse from \"fuse.js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { protocolIntegrationPicked, PROTOCOL_INTEGRATIONS } from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/search-input\";\nimport { getConfigFlowInProgressCollection } from \"../../../data/config_flow\";\nimport { fetchDiagnosticHandlers } from \"../../../data/diagnostics\";\nimport { subscribeEntityRegistry } from \"../../../data/entity_registry\";\nimport { domainToName, fetchIntegrationManifest, fetchIntegrationManifests, subscribeLogInfo } from \"../../../data/integration\";\nimport { findIntegration, getIntegrationDescriptions } from \"../../../data/integrations\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { configSections } from \"../ha-panel-config\";\nimport { isHelperDomain } from \"../helpers/const\";\nimport \"./ha-config-flow-card\";\nimport \"./ha-ignored-config-entry-card\";\nimport \"./ha-integration-card\";\nimport \"./ha-integration-overflow-menu\";\nimport { showAddIntegrationDialog } from \"./show-add-integration-dialog\";\nimport \"./ha-disabled-config-entry-card\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\nconst groupByIntegration = entries => {\n  const result = new Map();\n  entries.forEach(entry => {\n    if (result.has(entry.domain)) {\n      result.get(entry.domain).push(entry);\n    } else {\n      result.set(entry.domain, [entry]);\n    }\n  });\n  return result;\n};\nlet HaConfigIntegrationsDashboard = _decorate([customElement(\"ha-config-integrations-dashboard\")], function (_initialize, _SubscribeMixin) {\n  class HaConfigIntegrationsDashboard extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaConfigIntegrationsDashboard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"showAdvanced\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"configEntries\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"configEntriesInProgress\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entityRegistryEntries\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_manifests\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_extraFetchedManifests\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_showIgnored\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_showDisabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_searchParms\",\n      value() {\n        return new URLSearchParams(window.location.hash.substring(1));\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_filter\",\n      value() {\n        var _history$state;\n        return ((_history$state = history.state) === null || _history$state === void 0 ? void 0 : _history$state.filter) || \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_diagnosticHandlers\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_logInfos\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        return [subscribeEntityRegistry(this.hass.connection, entries => {\n          this._entityRegistryEntries = entries;\n        }), subscribeLogInfo(this.hass.connection, log_infos => {\n          const logInfoLookup = {};\n          for (const log_info of log_infos) {\n            logInfoLookup[log_info.domain] = log_info;\n          }\n          this._logInfos = logInfoLookup;\n        })];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_filterConfigEntries\",\n      value() {\n        return memoizeOne((configEntries, filter) => {\n          let filteredConfigEntries;\n          const ignored = [];\n          const disabled = [];\n          const integrations = [];\n          if (filter) {\n            const options = {\n              keys: [\"domain\", \"localized_domain_name\", \"title\"],\n              isCaseSensitive: false,\n              minMatchCharLength: Math.min(filter.length, 2),\n              threshold: 0.2\n            };\n            const fuse = new Fuse(configEntries, options);\n            filteredConfigEntries = fuse.search(filter).map(result => result.item);\n          } else {\n            filteredConfigEntries = configEntries;\n          }\n          for (const entry of filteredConfigEntries) {\n            if (entry.source === \"ignore\") {\n              ignored.push(entry);\n            } else if (entry.disabled_by !== null) {\n              disabled.push(entry);\n            } else {\n              integrations.push(entry);\n            }\n          }\n          return [Array.from(groupByIntegration(integrations)).sort((groupA, groupB) => caseInsensitiveStringCompare(groupA[1][0].localized_domain_name || groupA[0], groupB[1][0].localized_domain_name || groupB[0], this.hass.locale.language)), ignored, disabled];\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_filterConfigEntriesInProgress\",\n      value() {\n        return memoizeOne((configEntriesInProgress, filter) => {\n          let filteredEntries;\n          if (filter) {\n            const options = {\n              keys: [\"handler\", \"localized_title\"],\n              isCaseSensitive: false,\n              minMatchCharLength: Math.min(filter.length, 2),\n              threshold: 0.2\n            };\n            const fuse = new Fuse(configEntriesInProgress, options);\n            filteredEntries = fuse.search(filter).map(result => result.item);\n          } else {\n            filteredEntries = configEntriesInProgress;\n          }\n          return filteredEntries.sort((a, b) => caseInsensitiveStringCompare(a.localized_title || a.handler, b.localized_title || b.handler, this.hass.locale.language));\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changed) {\n        _get(_getPrototypeOf(HaConfigIntegrationsDashboard.prototype), \"firstUpdated\", this).call(this, changed);\n        this._fetchManifests();\n        if (this.route.path === \"/add\") {\n          this._handleAdd();\n        }\n        this._scanUSBDevices();\n        if (isComponentLoaded(this.hass, \"diagnostics\")) {\n          fetchDiagnosticHandlers(this.hass).then(infos => {\n            const handlers = {};\n            for (const info of infos) {\n              handlers[info.domain] = info.handlers.config_entry;\n            }\n            this._diagnosticHandlers = handlers;\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changed) {\n        _get(_getPrototypeOf(HaConfigIntegrationsDashboard.prototype), \"updated\", this).call(this, changed);\n        if ((this._searchParms.has(\"config_entry\") || this._searchParms.has(\"domain\")) && changed.has(\"configEntries\") && !changed.get(\"configEntries\") && this.configEntries) {\n          this._highlightEntry();\n        }\n        if (changed.has(\"configEntriesInProgress\") && this.configEntriesInProgress) {\n          this._fetchIntegrationManifests(this.configEntriesInProgress.map(flow => flow.handler));\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.configEntries || !this.configEntriesInProgress) {\n          return html`<hass-loading-screen\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      ></hass-loading-screen>`;\n        }\n        const [integrations, ignoredConfigEntries, disabledConfigEntries] = this._filterConfigEntries(this.configEntries, this._filter);\n        const configEntriesInProgress = this._filterConfigEntriesInProgress(this.configEntriesInProgress, this._filter);\n        const filterMenu = html`\n      <div slot=${ifDefined(this.narrow ? \"toolbar-icon\" : undefined)}>\n        <div class=\"menu-badge-container\">\n          ${!this._showDisabled && this.narrow && disabledConfigEntries.length ? html`<span class=\"badge\">${disabledConfigEntries.length}</span>` : \"\"}\n          <ha-button-menu\n            multi\n            @action=${this._handleMenuAction}\n            @click=${this._preventDefault}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiFilterVariant}\n            >\n            </ha-icon-button>\n            <ha-check-list-item left .selected=${this._showIgnored}>\n              ${this.hass.localize(\"ui.panel.config.integrations.ignore.show_ignored\")}\n            </ha-check-list-item>\n            <ha-check-list-item left .selected=${this._showDisabled}>\n              ${this.hass.localize(\"ui.panel.config.integrations.disable.show_disabled\")}\n            </ha-check-list-item>\n          </ha-button-menu>\n        </div>\n        ${this.narrow ? html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n            ` : \"\"}\n      </div>\n    `;\n        return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.devices}\n      >\n        ${this.narrow ? html`\n              <div slot=\"header\">\n                <search-input\n                  .hass=${this.hass}\n                  .filter=${this._filter}\n                  class=\"header\"\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\"ui.panel.config.integrations.search\")}\n                ></search-input>\n              </div>\n              ${filterMenu}\n            ` : html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n              <div class=\"search\">\n                <search-input\n                  .hass=${this.hass}\n                  suffix\n                  .filter=${this._filter}\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\"ui.panel.config.integrations.search\")}\n                >\n                  <div class=\"filters\" slot=\"suffix\">\n                    ${!this._showDisabled && disabledConfigEntries.length ? html`<div\n                          class=\"active-filters\"\n                          @click=${this._preventDefault}\n                        >\n                          ${this.hass.localize(\"ui.panel.config.integrations.disable.disabled_integrations\", {\n          number: disabledConfigEntries.length\n        })}\n                          <mwc-button\n                            @click=${this._toggleShowDisabled}\n                            .label=${this.hass.localize(\"ui.panel.config.integrations.disable.show\")}\n                          ></mwc-button>\n                        </div>` : \"\"}\n                    ${filterMenu}\n                  </div>\n                </search-input>\n              </div>\n            `}\n        ${this._showIgnored ? html`<h1>\n                ${this.hass.localize(\"ui.panel.config.integrations.ignore.ignored\")}\n              </h1>\n              <div class=\"container\">\n                ${ignoredConfigEntries.length > 0 ? ignoredConfigEntries.map(entry => html`\n                        <ha-ignored-config-entry-card\n                          .hass=${this.hass}\n                          .manifest=${this._manifests[entry.domain]}\n                          .entry=${entry}\n                          @change=${this._handleFlowUpdated}\n                        ></ha-ignored-config-entry-card>\n                      `) : html`${this.hass.localize(\"ui.panel.config.integrations.no_ignored_integrations\")}`}\n              </div>` : \"\"}\n        ${configEntriesInProgress.length ? html`<h1>\n                ${this.hass.localize(\"ui.panel.config.integrations.discovered\")}\n              </h1>\n              <div class=\"container\">\n                ${configEntriesInProgress.map(flow => html`\n                    <ha-config-flow-card\n                      .hass=${this.hass}\n                      .manifest=${this._manifests[flow.handler]}\n                      .flow=${flow}\n                      @change=${this._handleFlowUpdated}\n                    ></ha-config-flow-card>\n                  `)}\n              </div>` : \"\"}\n        ${this._showDisabled ? html`<h1>\n                ${this.hass.localize(\"ui.panel.config.integrations.disabled\")}\n              </h1>\n              <div class=\"container\">\n                ${disabledConfigEntries.length > 0 ? disabledConfigEntries.map(entry => html`\n                        <ha-disabled-config-entry-card\n                          .hass=${this.hass}\n                          .entry=${entry}\n                          .manifest=${this._manifests[entry.domain]}\n                          .entityRegistryEntries=${this._entityRegistryEntries}\n                        ></ha-disabled-config-entry-card>\n                      `) : html`${this.hass.localize(\"ui.panel.config.integrations.no_disabled_integrations\")}`}\n              </div>` : \"\"}\n        ${configEntriesInProgress.length || this._showDisabled || this._showIgnored ? html`<h1>\n              ${this.hass.localize(\"ui.panel.config.integrations.configured\")}\n            </h1>` : \"\"}\n        <div class=\"container\">\n          ${integrations.length ? integrations.map(([domain, items]) => html`<ha-integration-card\n                    data-domain=${domain}\n                    .hass=${this.hass}\n                    .domain=${domain}\n                    .items=${items}\n                    .manifest=${this._manifests[domain]}\n                    .entityRegistryEntries=${this._entityRegistryEntries}\n                    .supportsDiagnostics=${this._diagnosticHandlers ? this._diagnosticHandlers[domain] : false}\n                    .logInfo=${this._logInfos ? this._logInfos[domain] : nothing}\n                  ></ha-integration-card>`) : this._filter && !configEntriesInProgress.length && !integrations.length && this.configEntries.length ? html`\n                  <div class=\"empty-message\">\n                    <h1>\n                      ${this.hass.localize(\"ui.panel.config.integrations.none_found\")}\n                    </h1>\n                    <p>\n                      ${this.hass.localize(\"ui.panel.config.integrations.none_found_detail\")}\n                    </p>\n                    <mwc-button\n                      @click=${this._createFlow}\n                      unelevated\n                      .label=${this.hass.localize(\"ui.panel.config.integrations.add_integration\")}\n                    ></mwc-button>\n                  </div>\n                ` :\n        // If we have a filter, never show a card\n        this._filter ? \"\" :\n        // If we're showing 0 cards, show empty state text\n        (!this._showIgnored || ignoredConfigEntries.length === 0) && (!this._showDisabled || disabledConfigEntries.length === 0) && integrations.length === 0 ? html`\n                      <div class=\"empty-message\">\n                        <h1>\n                          ${this.hass.localize(\"ui.panel.config.integrations.none\")}\n                        </h1>\n                        <p>\n                          ${this.hass.localize(\"ui.panel.config.integrations.no_integrations\")}\n                        </p>\n                        <mwc-button\n                          @click=${this._createFlow}\n                          unelevated\n                          .label=${this.hass.localize(\"ui.panel.config.integrations.add_integration\")}\n                        ></mwc-button>\n                      </div>\n                    ` : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.integrations.add_integration\")}\n          extended\n          @click=${this._createFlow}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_preventDefault\",\n      value: function _preventDefault(ev) {\n        ev.preventDefault();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_scanUSBDevices\",\n      value: async function _scanUSBDevices() {\n        if (!isComponentLoaded(this.hass, \"usb\")) {\n          return;\n        }\n        await scanUSBDevices(this.hass);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchManifests\",\n      value: async function _fetchManifests(integrations) {\n        const fetched = await fetchIntegrationManifests(this.hass, integrations);\n        // Make a copy so we can keep track of previously loaded manifests\n        // for discovered flows (which are not part of these results)\n        const manifests = {\n          ...this._manifests\n        };\n        for (const manifest of fetched) {\n          manifests[manifest.domain] = manifest;\n        }\n        this._manifests = manifests;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchIntegrationManifests\",\n      value: async function _fetchIntegrationManifests(integrations) {\n        const manifestsToFetch = [];\n        for (const integration of integrations) {\n          if (integration in this._manifests) {\n            continue;\n          }\n          if (this._extraFetchedManifests) {\n            if (this._extraFetchedManifests.has(integration)) {\n              continue;\n            }\n          } else {\n            this._extraFetchedManifests = new Set();\n          }\n          this._extraFetchedManifests.add(integration);\n          manifestsToFetch.push(integration);\n        }\n        if (manifestsToFetch.length) {\n          await this._fetchManifests(manifestsToFetch);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleFlowUpdated\",\n      value: function _handleFlowUpdated() {\n        getConfigFlowInProgressCollection(this.hass.connection).refresh();\n        this._fetchManifests();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createFlow\",\n      value: function _createFlow() {\n        showAddIntegrationDialog(this, {\n          initialFilter: this._filter\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleMenuAction\",\n      value: function _handleMenuAction(ev) {\n        switch (ev.detail.index) {\n          case 0:\n            this._showIgnored = !this._showIgnored;\n            break;\n          case 1:\n            this._toggleShowDisabled();\n            break;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleShowDisabled\",\n      value: function _toggleShowDisabled() {\n        this._showDisabled = !this._showDisabled;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSearchChange\",\n      value: function _handleSearchChange(ev) {\n        this._filter = ev.detail.value;\n        history.replaceState({\n          filter: this._filter\n        }, \"\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_highlightEntry\",\n      value: async function _highlightEntry() {\n        await nextRender();\n        const entryId = this._searchParms.get(\"config_entry\");\n        let domain;\n        if (entryId) {\n          const configEntry = this.configEntries.find(entry => entry.entry_id === entryId);\n          if (!configEntry) {\n            return;\n          }\n          domain = configEntry.domain;\n        } else {\n          domain = this._searchParms.get(\"domain\");\n        }\n        const card = this.shadowRoot.querySelector(`[data-domain=${domain}]`);\n        if (card) {\n          card.scrollIntoView({\n            block: \"center\"\n          });\n          card.classList.add(\"highlight\");\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAdd\",\n      value: async function _handleAdd() {\n        const brand = extractSearchParam(\"brand\");\n        const domain = extractSearchParam(\"domain\");\n        navigate(\"/config/integrations\", {\n          replace: true\n        });\n        if (brand) {\n          showAddIntegrationDialog(this, {\n            brand\n          });\n          return;\n        }\n        if (!domain) {\n          return;\n        }\n        const descriptions = await getIntegrationDescriptions(this.hass);\n        const integrations = {\n          ...descriptions.core.integration,\n          ...descriptions.custom.integration\n        };\n        const integration = findIntegration(integrations, domain);\n        if (integration !== null && integration !== void 0 && integration.config_flow) {\n          // Integration exists, so we can just create a flow\n          const localize = await this.hass.loadBackendTranslation(\"title\", domain, false);\n          if (await showConfirmationDialog(this, {\n            title: localize(\"ui.panel.config.integrations.confirm_new\", {\n              integration: integration.name || domainToName(localize, domain)\n            })\n          })) {\n            showAddIntegrationDialog(this, {\n              domain\n            });\n          }\n          return;\n        }\n        if (integration !== null && integration !== void 0 && integration.supported_by) {\n          // Integration is a alias, so we can just create a flow\n          const localize = await this.hass.loadBackendTranslation(\"title\", domain, false);\n          const supportedIntegration = findIntegration(integrations, integration.supported_by);\n          if (!supportedIntegration) {\n            return;\n          }\n          showConfirmationDialog(this, {\n            text: this.hass.localize(\"ui.panel.config.integrations.config_flow.supported_brand_flow\", {\n              supported_brand: integration.name || domainToName(localize, domain),\n              flow_domain_name: supportedIntegration.name || domainToName(localize, integration.supported_by)\n            }),\n            confirm: async () => {\n              var _this$hass$userData;\n              if (PROTOCOL_INTEGRATIONS.includes(integration.supported_by)) {\n                protocolIntegrationPicked(this, this.hass, integration.supported_by);\n                return;\n              }\n              showConfigFlowDialog(this, {\n                dialogClosedCallback: () => {\n                  this._handleFlowUpdated();\n                },\n                startFlowHandler: integration.supported_by,\n                manifest: await fetchIntegrationManifest(this.hass, integration.supported_by),\n                showAdvanced: (_this$hass$userData = this.hass.userData) === null || _this$hass$userData === void 0 ? void 0 : _this$hass$userData.showAdvanced\n              });\n            }\n          });\n          return;\n        }\n\n        // If not an integration or supported brand, try helper else show alert\n        if (isHelperDomain(domain)) {\n          navigate(`/config/helpers/add?domain=${domain}`, {\n            replace: true\n          });\n          return;\n        }\n        const helpers = {\n          ...descriptions.core.helper,\n          ...descriptions.custom.helper\n        };\n        const helper = findIntegration(helpers, domain);\n        if (helper) {\n          navigate(`/config/helpers/add?domain=${domain}`, {\n            replace: true\n          });\n          return;\n        }\n        showAlertDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.integrations.config_flow.error\"),\n          text: this.hass.localize(\"ui.panel.config.integrations.config_flow.no_config_flow\")\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        :host([narrow]) hass-tabs-subpage {\n          --main-title-margin: 0;\n        }\n        ha-button-menu {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n          grid-gap: 8px 8px;\n          padding: 8px 16px 16px;\n        }\n        .container:last-of-type {\n          margin-bottom: 64px;\n        }\n        .empty-message {\n          margin: auto;\n          text-align: center;\n          grid-column-start: 1;\n          grid-column-end: -1;\n        }\n        .empty-message h1 {\n          margin: 0;\n        }\n        search-input {\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n          --text-field-overflow: visible;\n        }\n        search-input.header {\n          display: block;\n          color: var(--secondary-text-color);\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n          --mdc-ripple-color: transparant;\n        }\n        .search {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n          align-items: center;\n          height: 56px;\n          position: sticky;\n          top: 0;\n          z-index: 2;\n        }\n        .search search-input {\n          display: block;\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n        }\n        .filters {\n          --mdc-text-field-fill-color: var(--input-fill-color);\n          --mdc-text-field-idle-line-color: var(--input-idle-line-color);\n          --mdc-shape-small: 4px;\n          --text-field-overflow: initial;\n          display: flex;\n          justify-content: flex-end;\n          color: var(--primary-text-color);\n        }\n        .active-filters {\n          color: var(--primary-text-color);\n          position: relative;\n          display: flex;\n          align-items: center;\n          padding-top: 2px;\n          padding-bottom: 2px;\n          padding-right: 2px;\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          padding-inline-end: 2px;\n          font-size: 14px;\n          width: max-content;\n          cursor: initial;\n          direction: var(--direction);\n        }\n        .active-filters mwc-button {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .active-filters::before {\n          background-color: var(--primary-color);\n          opacity: 0.12;\n          border-radius: 4px;\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          content: \"\";\n        }\n        .badge {\n          min-width: 20px;\n          box-sizing: border-box;\n          border-radius: 50%;\n          font-weight: 400;\n          background-color: var(--primary-color);\n          line-height: 20px;\n          text-align: center;\n          padding: 0px 4px;\n          color: var(--text-primary-color);\n          position: absolute;\n          right: 0px;\n          top: 4px;\n          font-size: 0.65em;\n        }\n        .menu-badge-container {\n          position: relative;\n        }\n        h1 {\n          margin: 8px 0 0 16px;\n        }\n        ha-button-menu {\n          color: var(--primary-text-color);\n        }\n      `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["Fuse","css","html","LitElement","nothing","customElement","property","state","ifDefined","memoizeOne","isComponentLoaded","protocolIntegrationPicked","PROTOCOL_INTEGRATIONS","navigate","extractSearchParam","nextRender","getConfigFlowInProgressCollection","fetchDiagnosticHandlers","subscribeEntityRegistry","domainToName","fetchIntegrationManifest","fetchIntegrationManifests","subscribeLogInfo","findIntegration","getIntegrationDescriptions","scanUSBDevices","showConfigFlowDialog","showAlertDialog","showConfirmationDialog","SubscribeMixin","haStyle","configSections","isHelperDomain","showAddIntegrationDialog","caseInsensitiveStringCompare","groupByIntegration","entries","result","Map","forEach","entry","has","domain","get","push","set","HaConfigIntegrationsDashboard","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","reflect","URLSearchParams","window","location","hash","substring","_history$state","history","filter","hassSubscribe","hass","connection","_entityRegistryEntries","log_infos","logInfoLookup","log_info","_logInfos","configEntries","filteredConfigEntries","ignored","disabled","integrations","options","keys","isCaseSensitive","minMatchCharLength","Math","min","length","threshold","fuse","search","map","item","source","disabled_by","Array","from","sort","groupA","groupB","localized_domain_name","locale","language","configEntriesInProgress","filteredEntries","a","b","localized_title","handler","firstUpdated","changed","_get","_getPrototypeOf","prototype","call","_fetchManifests","route","path","_handleAdd","_scanUSBDevices","then","infos","handlers","info","config_entry","_diagnosticHandlers","updated","_searchParms","_highlightEntry","_fetchIntegrationManifests","flow","render","narrow","ignoredConfigEntries","disabledConfigEntries","_filterConfigEntries","_filter","_filterConfigEntriesInProgress","filterMenu","undefined","_showDisabled","_handleMenuAction","_preventDefault","localize","mdiFilterVariant","_showIgnored","devices","_handleSearchChange","number","_toggleShowDisabled","_manifests","_handleFlowUpdated","items","_createFlow","mdiPlus","ev","preventDefault","fetched","manifests","manifest","manifestsToFetch","integration","_extraFetchedManifests","Set","add","refresh","initialFilter","detail","index","replaceState","entryId","configEntry","find","entry_id","card","shadowRoot","querySelector","scrollIntoView","block","classList","brand","replace","descriptions","core","custom","config_flow","loadBackendTranslation","title","name","supported_by","supportedIntegration","text","supported_brand","flow_domain_name","confirm","_this$hass$userData","includes","dialogClosedCallback","startFlowHandler","showAdvanced","userData","helpers","helper","static","styles"],"sources":["/workspaces/frontend/src/panels/config/integrations/ha-config-integrations-dashboard.ts"],"sourcesContent":["import { ActionDetail } from \"@material/mwc-list\";\nimport { mdiFilterVariant, mdiPlus } from \"@mdi/js\";\nimport Fuse from \"fuse.js\";\nimport type { IFuseOptions } from \"fuse.js\";\nimport type { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport {\n  protocolIntegrationPicked,\n  PROTOCOL_INTEGRATIONS,\n} from \"../../../common/integrations/protocolIntegrationPicked\";\nimport { navigate } from \"../../../common/navigate\";\nimport { extractSearchParam } from \"../../../common/url/search-params\";\nimport { nextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-check-list-item\";\nimport \"../../../components/ha-checkbox\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/search-input\";\nimport { ConfigEntry } from \"../../../data/config_entries\";\nimport { getConfigFlowInProgressCollection } from \"../../../data/config_flow\";\nimport { fetchDiagnosticHandlers } from \"../../../data/diagnostics\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n} from \"../../../data/entity_registry\";\nimport {\n  domainToName,\n  fetchIntegrationManifest,\n  fetchIntegrationManifests,\n  IntegrationLogInfo,\n  IntegrationManifest,\n  subscribeLogInfo,\n} from \"../../../data/integration\";\nimport {\n  findIntegration,\n  getIntegrationDescriptions,\n} from \"../../../data/integrations\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showConfigFlowDialog } from \"../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../layouts/hass-tabs-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../types\";\nimport { configSections } from \"../ha-panel-config\";\nimport { isHelperDomain } from \"../helpers/const\";\nimport \"./ha-config-flow-card\";\nimport { DataEntryFlowProgressExtended } from \"./ha-config-integrations\";\nimport \"./ha-ignored-config-entry-card\";\nimport \"./ha-integration-card\";\nimport type { HaIntegrationCard } from \"./ha-integration-card\";\nimport \"./ha-integration-overflow-menu\";\nimport { showAddIntegrationDialog } from \"./show-add-integration-dialog\";\nimport \"./ha-disabled-config-entry-card\";\nimport { caseInsensitiveStringCompare } from \"../../../common/string/compare\";\n\nexport interface ConfigEntryExtended extends ConfigEntry {\n  localized_domain_name?: string;\n}\n\nconst groupByIntegration = (\n  entries: ConfigEntryExtended[]\n): Map<string, ConfigEntryExtended[]> => {\n  const result = new Map();\n  entries.forEach((entry) => {\n    if (result.has(entry.domain)) {\n      result.get(entry.domain).push(entry);\n    } else {\n      result.set(entry.domain, [entry]);\n    }\n  });\n  return result;\n};\n@customElement(\"ha-config-integrations-dashboard\")\nclass HaConfigIntegrationsDashboard extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public showAdvanced = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ attribute: false }) public configEntries?: ConfigEntryExtended[];\n\n  @property({ attribute: false })\n  public configEntriesInProgress?: DataEntryFlowProgressExtended[];\n\n  @state()\n  private _entityRegistryEntries: EntityRegistryEntry[] = [];\n\n  @state()\n  private _manifests: Record<string, IntegrationManifest> = {};\n\n  private _extraFetchedManifests?: Set<string>;\n\n  @state() private _showIgnored = false;\n\n  @state() private _showDisabled = false;\n\n  @state() private _searchParms = new URLSearchParams(\n    window.location.hash.substring(1)\n  );\n\n  @state() private _filter: string = history.state?.filter || \"\";\n\n  @state() private _diagnosticHandlers?: Record<string, boolean>;\n\n  @state() private _logInfos?: {\n    [integration: string]: IntegrationLogInfo;\n  };\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entityRegistryEntries = entries;\n      }),\n      subscribeLogInfo(this.hass.connection, (log_infos) => {\n        const logInfoLookup: { [integration: string]: IntegrationLogInfo } = {};\n        for (const log_info of log_infos) {\n          logInfoLookup[log_info.domain] = log_info;\n        }\n        this._logInfos = logInfoLookup;\n      }),\n    ];\n  }\n\n  private _filterConfigEntries = memoizeOne(\n    (\n      configEntries: ConfigEntryExtended[],\n      filter?: string\n    ): [\n      [string, ConfigEntryExtended[]][],\n      ConfigEntryExtended[],\n      ConfigEntryExtended[],\n    ] => {\n      let filteredConfigEntries: ConfigEntryExtended[];\n      const ignored: ConfigEntryExtended[] = [];\n      const disabled: ConfigEntryExtended[] = [];\n      const integrations: ConfigEntryExtended[] = [];\n      if (filter) {\n        const options: IFuseOptions<ConfigEntryExtended> = {\n          keys: [\"domain\", \"localized_domain_name\", \"title\"],\n          isCaseSensitive: false,\n          minMatchCharLength: Math.min(filter.length, 2),\n          threshold: 0.2,\n        };\n        const fuse = new Fuse(configEntries, options);\n        filteredConfigEntries = fuse\n          .search(filter)\n          .map((result) => result.item);\n      } else {\n        filteredConfigEntries = configEntries;\n      }\n\n      for (const entry of filteredConfigEntries) {\n        if (entry.source === \"ignore\") {\n          ignored.push(entry);\n        } else if (entry.disabled_by !== null) {\n          disabled.push(entry);\n        } else {\n          integrations.push(entry);\n        }\n      }\n      return [\n        Array.from(groupByIntegration(integrations)).sort((groupA, groupB) =>\n          caseInsensitiveStringCompare(\n            groupA[1][0].localized_domain_name || groupA[0],\n            groupB[1][0].localized_domain_name || groupB[0],\n            this.hass.locale.language\n          )\n        ),\n        ignored,\n        disabled,\n      ];\n    }\n  );\n\n  private _filterConfigEntriesInProgress = memoizeOne(\n    (\n      configEntriesInProgress: DataEntryFlowProgressExtended[],\n      filter?: string\n    ): DataEntryFlowProgressExtended[] => {\n      let filteredEntries: DataEntryFlowProgressExtended[];\n      if (filter) {\n        const options: IFuseOptions<DataEntryFlowProgressExtended> = {\n          keys: [\"handler\", \"localized_title\"],\n          isCaseSensitive: false,\n          minMatchCharLength: Math.min(filter.length, 2),\n          threshold: 0.2,\n        };\n        const fuse = new Fuse(configEntriesInProgress, options);\n        filteredEntries = fuse.search(filter).map((result) => result.item);\n      } else {\n        filteredEntries = configEntriesInProgress;\n      }\n      return filteredEntries.sort((a, b) =>\n        caseInsensitiveStringCompare(\n          a.localized_title || a.handler,\n          b.localized_title || b.handler,\n          this.hass.locale.language\n        )\n      );\n    }\n  );\n\n  protected firstUpdated(changed: PropertyValues) {\n    super.firstUpdated(changed);\n    this._fetchManifests();\n    if (this.route.path === \"/add\") {\n      this._handleAdd();\n    }\n    this._scanUSBDevices();\n    if (isComponentLoaded(this.hass, \"diagnostics\")) {\n      fetchDiagnosticHandlers(this.hass).then((infos) => {\n        const handlers = {};\n        for (const info of infos) {\n          handlers[info.domain] = info.handlers.config_entry;\n        }\n        this._diagnosticHandlers = handlers;\n      });\n    }\n  }\n\n  protected updated(changed: PropertyValues) {\n    super.updated(changed);\n    if (\n      (this._searchParms.has(\"config_entry\") ||\n        this._searchParms.has(\"domain\")) &&\n      changed.has(\"configEntries\") &&\n      !changed.get(\"configEntries\") &&\n      this.configEntries\n    ) {\n      this._highlightEntry();\n    }\n    if (\n      changed.has(\"configEntriesInProgress\") &&\n      this.configEntriesInProgress\n    ) {\n      this._fetchIntegrationManifests(\n        this.configEntriesInProgress.map((flow) => flow.handler)\n      );\n    }\n  }\n\n  protected render() {\n    if (!this.configEntries || !this.configEntriesInProgress) {\n      return html`<hass-loading-screen\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n      ></hass-loading-screen>`;\n    }\n    const [integrations, ignoredConfigEntries, disabledConfigEntries] =\n      this._filterConfigEntries(this.configEntries, this._filter);\n    const configEntriesInProgress = this._filterConfigEntriesInProgress(\n      this.configEntriesInProgress,\n      this._filter\n    );\n\n    const filterMenu = html`\n      <div slot=${ifDefined(this.narrow ? \"toolbar-icon\" : undefined)}>\n        <div class=\"menu-badge-container\">\n          ${!this._showDisabled && this.narrow && disabledConfigEntries.length\n            ? html`<span class=\"badge\">${disabledConfigEntries.length}</span>`\n            : \"\"}\n          <ha-button-menu\n            multi\n            @action=${this._handleMenuAction}\n            @click=${this._preventDefault}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiFilterVariant}\n            >\n            </ha-icon-button>\n            <ha-check-list-item left .selected=${this._showIgnored}>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.ignore.show_ignored\"\n              )}\n            </ha-check-list-item>\n            <ha-check-list-item left .selected=${this._showDisabled}>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.disable.show_disabled\"\n              )}\n            </ha-check-list-item>\n          </ha-button-menu>\n        </div>\n        ${this.narrow\n          ? html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n            `\n          : \"\"}\n      </div>\n    `;\n\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        back-path=\"/config\"\n        .route=${this.route}\n        .tabs=${configSections.devices}\n      >\n        ${this.narrow\n          ? html`\n              <div slot=\"header\">\n                <search-input\n                  .hass=${this.hass}\n                  .filter=${this._filter}\n                  class=\"header\"\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.integrations.search\"\n                  )}\n                ></search-input>\n              </div>\n              ${filterMenu}\n            `\n          : html`\n              <ha-integration-overflow-menu\n                .hass=${this.hass}\n                slot=\"toolbar-icon\"\n              ></ha-integration-overflow-menu>\n              <div class=\"search\">\n                <search-input\n                  .hass=${this.hass}\n                  suffix\n                  .filter=${this._filter}\n                  @value-changed=${this._handleSearchChange}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.integrations.search\"\n                  )}\n                >\n                  <div class=\"filters\" slot=\"suffix\">\n                    ${!this._showDisabled && disabledConfigEntries.length\n                      ? html`<div\n                          class=\"active-filters\"\n                          @click=${this._preventDefault}\n                        >\n                          ${this.hass.localize(\n                            \"ui.panel.config.integrations.disable.disabled_integrations\",\n                            { number: disabledConfigEntries.length }\n                          )}\n                          <mwc-button\n                            @click=${this._toggleShowDisabled}\n                            .label=${this.hass.localize(\n                              \"ui.panel.config.integrations.disable.show\"\n                            )}\n                          ></mwc-button>\n                        </div>`\n                      : \"\"}\n                    ${filterMenu}\n                  </div>\n                </search-input>\n              </div>\n            `}\n        ${this._showIgnored\n          ? html`<h1>\n                ${this.hass.localize(\n                  \"ui.panel.config.integrations.ignore.ignored\"\n                )}\n              </h1>\n              <div class=\"container\">\n                ${ignoredConfigEntries.length > 0\n                  ? ignoredConfigEntries.map(\n                      (entry: ConfigEntryExtended) => html`\n                        <ha-ignored-config-entry-card\n                          .hass=${this.hass}\n                          .manifest=${this._manifests[entry.domain]}\n                          .entry=${entry}\n                          @change=${this._handleFlowUpdated}\n                        ></ha-ignored-config-entry-card>\n                      `\n                    )\n                  : html`${this.hass.localize(\n                      \"ui.panel.config.integrations.no_ignored_integrations\"\n                    )}`}\n              </div>`\n          : \"\"}\n        ${configEntriesInProgress.length\n          ? html`<h1>\n                ${this.hass.localize(\"ui.panel.config.integrations.discovered\")}\n              </h1>\n              <div class=\"container\">\n                ${configEntriesInProgress.map(\n                  (flow: DataEntryFlowProgressExtended) => html`\n                    <ha-config-flow-card\n                      .hass=${this.hass}\n                      .manifest=${this._manifests[flow.handler]}\n                      .flow=${flow}\n                      @change=${this._handleFlowUpdated}\n                    ></ha-config-flow-card>\n                  `\n                )}\n              </div>`\n          : \"\"}\n        ${this._showDisabled\n          ? html`<h1>\n                ${this.hass.localize(\"ui.panel.config.integrations.disabled\")}\n              </h1>\n              <div class=\"container\">\n                ${disabledConfigEntries.length > 0\n                  ? disabledConfigEntries.map(\n                      (entry: ConfigEntryExtended) => html`\n                        <ha-disabled-config-entry-card\n                          .hass=${this.hass}\n                          .entry=${entry}\n                          .manifest=${this._manifests[entry.domain]}\n                          .entityRegistryEntries=${this._entityRegistryEntries}\n                        ></ha-disabled-config-entry-card>\n                      `\n                    )\n                  : html`${this.hass.localize(\n                      \"ui.panel.config.integrations.no_disabled_integrations\"\n                    )}`}\n              </div>`\n          : \"\"}\n        ${configEntriesInProgress.length ||\n        this._showDisabled ||\n        this._showIgnored\n          ? html`<h1>\n              ${this.hass.localize(\"ui.panel.config.integrations.configured\")}\n            </h1>`\n          : \"\"}\n        <div class=\"container\">\n          ${integrations.length\n            ? integrations.map(\n                ([domain, items]) =>\n                  html`<ha-integration-card\n                    data-domain=${domain}\n                    .hass=${this.hass}\n                    .domain=${domain}\n                    .items=${items}\n                    .manifest=${this._manifests[domain]}\n                    .entityRegistryEntries=${this._entityRegistryEntries}\n                    .supportsDiagnostics=${this._diagnosticHandlers\n                      ? this._diagnosticHandlers[domain]\n                      : false}\n                    .logInfo=${this._logInfos\n                      ? this._logInfos[domain]\n                      : nothing}\n                  ></ha-integration-card>`\n              )\n            : this._filter &&\n                !configEntriesInProgress.length &&\n                !integrations.length &&\n                this.configEntries.length\n              ? html`\n                  <div class=\"empty-message\">\n                    <h1>\n                      ${this.hass.localize(\n                        \"ui.panel.config.integrations.none_found\"\n                      )}\n                    </h1>\n                    <p>\n                      ${this.hass.localize(\n                        \"ui.panel.config.integrations.none_found_detail\"\n                      )}\n                    </p>\n                    <mwc-button\n                      @click=${this._createFlow}\n                      unelevated\n                      .label=${this.hass.localize(\n                        \"ui.panel.config.integrations.add_integration\"\n                      )}\n                    ></mwc-button>\n                  </div>\n                `\n              : // If we have a filter, never show a card\n                this._filter\n                ? \"\"\n                : // If we're showing 0 cards, show empty state text\n                  (!this._showIgnored || ignoredConfigEntries.length === 0) &&\n                    (!this._showDisabled ||\n                      disabledConfigEntries.length === 0) &&\n                    integrations.length === 0\n                  ? html`\n                      <div class=\"empty-message\">\n                        <h1>\n                          ${this.hass.localize(\n                            \"ui.panel.config.integrations.none\"\n                          )}\n                        </h1>\n                        <p>\n                          ${this.hass.localize(\n                            \"ui.panel.config.integrations.no_integrations\"\n                          )}\n                        </p>\n                        <mwc-button\n                          @click=${this._createFlow}\n                          unelevated\n                          .label=${this.hass.localize(\n                            \"ui.panel.config.integrations.add_integration\"\n                          )}\n                        ></mwc-button>\n                      </div>\n                    `\n                  : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.integrations.add_integration\"\n          )}\n          extended\n          @click=${this._createFlow}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n        </ha-fab>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private _preventDefault(ev) {\n    ev.preventDefault();\n  }\n\n  private async _scanUSBDevices() {\n    if (!isComponentLoaded(this.hass, \"usb\")) {\n      return;\n    }\n    await scanUSBDevices(this.hass);\n  }\n\n  private async _fetchManifests(integrations?: string[]) {\n    const fetched = await fetchIntegrationManifests(this.hass, integrations);\n    // Make a copy so we can keep track of previously loaded manifests\n    // for discovered flows (which are not part of these results)\n    const manifests = { ...this._manifests };\n    for (const manifest of fetched) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private async _fetchIntegrationManifests(integrations: string[]) {\n    const manifestsToFetch: string[] = [];\n    for (const integration of integrations) {\n      if (integration in this._manifests) {\n        continue;\n      }\n      if (this._extraFetchedManifests) {\n        if (this._extraFetchedManifests.has(integration)) {\n          continue;\n        }\n      } else {\n        this._extraFetchedManifests = new Set();\n      }\n      this._extraFetchedManifests.add(integration);\n      manifestsToFetch.push(integration);\n    }\n    if (manifestsToFetch.length) {\n      await this._fetchManifests(manifestsToFetch);\n    }\n  }\n\n  private _handleFlowUpdated() {\n    getConfigFlowInProgressCollection(this.hass.connection).refresh();\n    this._fetchManifests();\n  }\n\n  private _createFlow() {\n    showAddIntegrationDialog(this, {\n      initialFilter: this._filter,\n    });\n  }\n\n  private _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._showIgnored = !this._showIgnored;\n        break;\n      case 1:\n        this._toggleShowDisabled();\n        break;\n    }\n  }\n\n  private _toggleShowDisabled() {\n    this._showDisabled = !this._showDisabled;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n    history.replaceState({ filter: this._filter }, \"\");\n  }\n\n  private async _highlightEntry() {\n    await nextRender();\n    const entryId = this._searchParms.get(\"config_entry\");\n    let domain: string | null;\n    if (entryId) {\n      const configEntry = this.configEntries!.find(\n        (entry) => entry.entry_id === entryId\n      );\n      if (!configEntry) {\n        return;\n      }\n      domain = configEntry.domain;\n    } else {\n      domain = this._searchParms.get(\"domain\");\n    }\n    const card: HaIntegrationCard = this.shadowRoot!.querySelector(\n      `[data-domain=${domain}]`\n    ) as HaIntegrationCard;\n    if (card) {\n      card.scrollIntoView({\n        block: \"center\",\n      });\n      card.classList.add(\"highlight\");\n    }\n  }\n\n  private async _handleAdd() {\n    const brand = extractSearchParam(\"brand\");\n    const domain = extractSearchParam(\"domain\");\n    navigate(\"/config/integrations\", { replace: true });\n\n    if (brand) {\n      showAddIntegrationDialog(this, {\n        brand,\n      });\n      return;\n    }\n    if (!domain) {\n      return;\n    }\n\n    const descriptions = await getIntegrationDescriptions(this.hass);\n    const integrations = {\n      ...descriptions.core.integration,\n      ...descriptions.custom.integration,\n    };\n\n    const integration = findIntegration(integrations, domain);\n\n    if (integration?.config_flow) {\n      // Integration exists, so we can just create a flow\n      const localize = await this.hass.loadBackendTranslation(\n        \"title\",\n        domain,\n        false\n      );\n      if (\n        await showConfirmationDialog(this, {\n          title: localize(\"ui.panel.config.integrations.confirm_new\", {\n            integration: integration.name || domainToName(localize, domain),\n          }),\n        })\n      ) {\n        showAddIntegrationDialog(this, {\n          domain,\n        });\n      }\n      return;\n    }\n\n    if (integration?.supported_by) {\n      // Integration is a alias, so we can just create a flow\n      const localize = await this.hass.loadBackendTranslation(\n        \"title\",\n        domain,\n        false\n      );\n      const supportedIntegration = findIntegration(\n        integrations,\n        integration.supported_by\n      );\n\n      if (!supportedIntegration) {\n        return;\n      }\n\n      showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.config.integrations.config_flow.supported_brand_flow\",\n          {\n            supported_brand: integration.name || domainToName(localize, domain),\n            flow_domain_name:\n              supportedIntegration.name ||\n              domainToName(localize, integration.supported_by),\n          }\n        ),\n        confirm: async () => {\n          if (\n            (PROTOCOL_INTEGRATIONS as ReadonlyArray<string>).includes(\n              integration.supported_by!\n            )\n          ) {\n            protocolIntegrationPicked(\n              this,\n              this.hass,\n              integration.supported_by!\n            );\n            return;\n          }\n          showConfigFlowDialog(this, {\n            dialogClosedCallback: () => {\n              this._handleFlowUpdated();\n            },\n            startFlowHandler: integration.supported_by,\n            manifest: await fetchIntegrationManifest(\n              this.hass,\n              integration.supported_by!\n            ),\n            showAdvanced: this.hass.userData?.showAdvanced,\n          });\n        },\n      });\n      return;\n    }\n\n    // If not an integration or supported brand, try helper else show alert\n    if (isHelperDomain(domain)) {\n      navigate(`/config/helpers/add?domain=${domain}`, {\n        replace: true,\n      });\n      return;\n    }\n    const helpers = {\n      ...descriptions.core.helper,\n      ...descriptions.custom.helper,\n    };\n    const helper = findIntegration(helpers, domain);\n    if (helper) {\n      navigate(`/config/helpers/add?domain=${domain}`, {\n        replace: true,\n      });\n      return;\n    }\n    showAlertDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.error\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.integrations.config_flow.no_config_flow\"\n      ),\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host([narrow]) hass-tabs-subpage {\n          --main-title-margin: 0;\n        }\n        ha-button-menu {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .container {\n          display: grid;\n          grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n          grid-gap: 8px 8px;\n          padding: 8px 16px 16px;\n        }\n        .container:last-of-type {\n          margin-bottom: 64px;\n        }\n        .empty-message {\n          margin: auto;\n          text-align: center;\n          grid-column-start: 1;\n          grid-column-end: -1;\n        }\n        .empty-message h1 {\n          margin: 0;\n        }\n        search-input {\n          --mdc-text-field-fill-color: var(--sidebar-background-color);\n          --mdc-text-field-idle-line-color: var(--divider-color);\n          --text-field-overflow: visible;\n        }\n        search-input.header {\n          display: block;\n          color: var(--secondary-text-color);\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n          --mdc-ripple-color: transparant;\n        }\n        .search {\n          display: flex;\n          justify-content: flex-end;\n          width: 100%;\n          align-items: center;\n          height: 56px;\n          position: sticky;\n          top: 0;\n          z-index: 2;\n        }\n        .search search-input {\n          display: block;\n          position: absolute;\n          top: 0;\n          right: 0;\n          left: 0;\n        }\n        .filters {\n          --mdc-text-field-fill-color: var(--input-fill-color);\n          --mdc-text-field-idle-line-color: var(--input-idle-line-color);\n          --mdc-shape-small: 4px;\n          --text-field-overflow: initial;\n          display: flex;\n          justify-content: flex-end;\n          color: var(--primary-text-color);\n        }\n        .active-filters {\n          color: var(--primary-text-color);\n          position: relative;\n          display: flex;\n          align-items: center;\n          padding-top: 2px;\n          padding-bottom: 2px;\n          padding-right: 2px;\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          padding-inline-end: 2px;\n          font-size: 14px;\n          width: max-content;\n          cursor: initial;\n          direction: var(--direction);\n        }\n        .active-filters mwc-button {\n          margin-left: 8px;\n          margin-inline-start: 8px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n        .active-filters::before {\n          background-color: var(--primary-color);\n          opacity: 0.12;\n          border-radius: 4px;\n          position: absolute;\n          top: 0;\n          right: 0;\n          bottom: 0;\n          left: 0;\n          content: \"\";\n        }\n        .badge {\n          min-width: 20px;\n          box-sizing: border-box;\n          border-radius: 50%;\n          font-weight: 400;\n          background-color: var(--primary-color);\n          line-height: 20px;\n          text-align: center;\n          padding: 0px 4px;\n          color: var(--text-primary-color);\n          position: absolute;\n          right: 0px;\n          top: 4px;\n          font-size: 0.65em;\n        }\n        .menu-badge-container {\n          position: relative;\n        }\n        h1 {\n          margin: 8px 0 0 16px;\n        }\n        ha-button-menu {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-integrations-dashboard\": HaConfigIntegrationsDashboard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}