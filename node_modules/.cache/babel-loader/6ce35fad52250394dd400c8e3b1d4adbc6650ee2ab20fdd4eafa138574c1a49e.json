{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-menu\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nexport let HaButtonMenu = _decorate([customElement(\"ha-button-menu\")], function (_initialize, _LitElement) {\n  class HaButtonMenu extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaButtonMenu,\n    d: [{\n      kind: \"field\",\n      key: FOCUS_TARGET,\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"corner\",\n      value() {\n        return \"BOTTOM_START\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"menuCorner\",\n      value() {\n        return \"START\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"x\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"y\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"multi\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"activatable\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"fixed\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"no-anchor\"\n      })],\n      key: \"noAnchor\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"mwc-menu\", true)],\n      key: \"_menu\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      key: \"items\",\n      value: function items() {\n        var _this$_menu;\n        return (_this$_menu = this._menu) === null || _this$_menu === void 0 ? void 0 : _this$_menu.items;\n      }\n    }, {\n      kind: \"get\",\n      key: \"selected\",\n      value: function selected() {\n        var _this$_menu2;\n        return (_this$_menu2 = this._menu) === null || _this$_menu2 === void 0 ? void 0 : _this$_menu2.selected;\n      }\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value: function focus() {\n        var _this$_menu3;\n        if ((_this$_menu3 = this._menu) !== null && _this$_menu3 !== void 0 && _this$_menu3.open) {\n          this._menu.focusItemAtIndex(0);\n        } else {\n          var _this$_triggerButton;\n          (_this$_triggerButton = this._triggerButton) === null || _this$_triggerButton === void 0 || _this$_triggerButton.focus();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HaButtonMenu.prototype), \"firstUpdated\", this).call(this, changedProps);\n        if (mainWindow.document.dir === \"rtl\") {\n          this.updateComplete.then(() => {\n            this.querySelectorAll(\"mwc-list-item\").forEach(item => {\n              const style = document.createElement(\"style\");\n              style.innerHTML = \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n              item.shadowRoot.appendChild(style);\n            });\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleClick\",\n      value: function _handleClick() {\n        if (this.disabled) {\n          return;\n        }\n        this._menu.anchor = this.noAnchor ? null : this;\n        this._menu.show();\n      }\n    }, {\n      kind: \"get\",\n      key: \"_triggerButton\",\n      value: function _triggerButton() {\n        return this.querySelector('ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]');\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setTriggerAria\",\n      value: function _setTriggerAria() {\n        if (this._triggerButton) {\n          this._triggerButton.ariaHasPopup = \"menu\";\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","query","mainWindow","FOCUS_TARGET","HaButtonMenu","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","value","decorators","type","Number","Boolean","attribute","items","_this$_menu","_menu","selected","_this$_menu2","focus","_this$_menu3","open","focusItemAtIndex","_this$_triggerButton","_triggerButton","render","_handleClick","_setTriggerAria","corner","menuCorner","fixed","multi","activatable","y","x","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","document","dir","updateComplete","then","querySelectorAll","forEach","item","style","createElement","innerHTML","shadowRoot","appendChild","disabled","anchor","noAnchor","show","querySelector","ariaHasPopup","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-button-menu.ts"],"sourcesContent":["import type { Button } from \"@material/mwc-button\";\nimport \"@material/mwc-menu\";\nimport type { Corner, Menu, MenuCorner } from \"@material/mwc-menu\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { FOCUS_TARGET } from \"../dialogs/make-dialog-manager\";\nimport type { HaIconButton } from \"./ha-icon-button\";\n\n@customElement(\"ha-button-menu\")\nexport class HaButtonMenu extends LitElement {\n  protected readonly [FOCUS_TARGET];\n\n  @property() public corner: Corner = \"BOTTOM_START\";\n\n  @property() public menuCorner: MenuCorner = \"START\";\n\n  @property({ type: Number }) public x: number | null = null;\n\n  @property({ type: Number }) public y: number | null = null;\n\n  @property({ type: Boolean }) public multi = false;\n\n  @property({ type: Boolean }) public activatable = false;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @property({ type: Boolean }) public fixed = false;\n\n  @property({ type: Boolean, attribute: \"no-anchor\" }) public noAnchor = false;\n\n  @query(\"mwc-menu\", true) private _menu?: Menu;\n\n  public get items() {\n    return this._menu?.items;\n  }\n\n  public get selected() {\n    return this._menu?.selected;\n  }\n\n  public override focus() {\n    if (this._menu?.open) {\n      this._menu.focusItemAtIndex(0);\n    } else {\n      this._triggerButton?.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <div @click=${this._handleClick}>\n        <slot name=\"trigger\" @slotchange=${this._setTriggerAria}></slot>\n      </div>\n      <mwc-menu\n        .corner=${this.corner}\n        .menuCorner=${this.menuCorner}\n        .fixed=${this.fixed}\n        .multi=${this.multi}\n        .activatable=${this.activatable}\n        .y=${this.y}\n        .x=${this.x}\n      >\n        <slot></slot>\n      </mwc-menu>\n    `;\n  }\n\n  protected firstUpdated(changedProps): void {\n    super.firstUpdated(changedProps);\n\n    if (mainWindow.document.dir === \"rtl\") {\n      this.updateComplete.then(() => {\n        this.querySelectorAll(\"mwc-list-item\").forEach((item) => {\n          const style = document.createElement(\"style\");\n          style.innerHTML =\n            \"span.material-icons:first-of-type { margin-left: var(--mdc-list-item-graphic-margin, 32px) !important; margin-right: 0px !important;}\";\n          item!.shadowRoot!.appendChild(style);\n        });\n      });\n    }\n  }\n\n  private _handleClick(): void {\n    if (this.disabled) {\n      return;\n    }\n    this._menu!.anchor = this.noAnchor ? null : this;\n    this._menu!.show();\n  }\n\n  private get _triggerButton() {\n    return this.querySelector(\n      'ha-icon-button[slot=\"trigger\"], mwc-button[slot=\"trigger\"]'\n    ) as HaIconButton | Button | null;\n  }\n\n  private _setTriggerAria() {\n    if (this._triggerButton) {\n      this._triggerButton.ariaHasPopup = \"menu\";\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        position: relative;\n      }\n      ::slotted([disabled]) {\n        color: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-button-menu\": HaButtonMenu;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}