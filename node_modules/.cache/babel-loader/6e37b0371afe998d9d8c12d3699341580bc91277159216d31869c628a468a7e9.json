{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.ends-with.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nvar important = 'important';\n// The leading space is important\nvar importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nvar flagTrim = 0 - importantFlag.length;\nvar StyleMapDirective = /*#__PURE__*/function (_Directive) {\n  _inherits(StyleMapDirective, _Directive);\n  function StyleMapDirective(partInfo) {\n    var _this;\n    _classCallCheck(this, StyleMapDirective);\n    var _a;\n    _this = _callSuper(this, StyleMapDirective, [partInfo]);\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'style' || ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n      throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');\n    }\n    return _this;\n  }\n  _createClass(StyleMapDirective, [{\n    key: \"render\",\n    value: function render(styleInfo) {\n      return Object.keys(styleInfo).reduce(function (style, prop) {\n        var value = styleInfo[prop];\n        if (value == null) {\n          return style;\n        }\n        // Convert property names from camel-case to dash-case, i.e.:\n        //  `backgroundColor` -> `background-color`\n        // Vendor-prefixed names need an extra `-` appended to front:\n        //  `webkitAppearance` -> `-webkit-appearance`\n        // Exception is any property name containing a dash, including\n        // custom properties; we assume these are already dash-cased i.e.:\n        //  `--my-button-color` --> `--my-button-color`\n        prop = prop.includes('-') ? prop : prop.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&').toLowerCase();\n        return style + \"\".concat(prop, \":\").concat(value, \";\");\n      }, '');\n    }\n  }, {\n    key: \"update\",\n    value: function update(part, _ref) {\n      var _this2 = this;\n      var _ref2 = _slicedToArray(_ref, 1),\n        styleInfo = _ref2[0];\n      var style = part.element.style;\n      if (this._previousStyleProperties === undefined) {\n        this._previousStyleProperties = new Set();\n        for (var name in styleInfo) {\n          this._previousStyleProperties.add(name);\n        }\n        return this.render(styleInfo);\n      }\n      // Remove old properties that no longer exist in styleInfo\n      // We use forEach() instead of for-of so that re don't require down-level\n      // iteration.\n      this._previousStyleProperties.forEach(function (name) {\n        // If the name isn't in styleInfo or it's null/undefined\n        if (styleInfo[name] == null) {\n          _this2._previousStyleProperties.delete(name);\n          if (name.includes('-')) {\n            style.removeProperty(name);\n          } else {\n            // Note reset using empty string (vs null) as IE11 does not always\n            // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            style[name] = '';\n          }\n        }\n      });\n      // Add or update properties\n      for (var _name in styleInfo) {\n        var value = styleInfo[_name];\n        if (value != null) {\n          this._previousStyleProperties.add(_name);\n          var isImportant = typeof value === 'string' && value.endsWith(importantFlag);\n          if (_name.includes('-') || isImportant) {\n            style.setProperty(_name, isImportant ? value.slice(0, flagTrim) : value, isImportant ? important : '');\n          } else {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            style[_name] = value;\n          }\n        }\n      }\n      return noChange;\n    }\n  }]);\n  return StyleMapDirective;\n}(Directive);\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport var styleMap = directive(StyleMapDirective);","map":{"version":3,"names":["noChange","directive","Directive","PartType","important","importantFlag","flagTrim","length","StyleMapDirective","_Directive","_inherits","partInfo","_this","_classCallCheck","_callSuper","type","ATTRIBUTE","name","_a","strings","Error","_createClass","key","value","render","styleInfo","Object","keys","reduce","style","prop","includes","replace","toLowerCase","concat","update","part","_ref","_this2","_ref2","_slicedToArray","element","_previousStyleProperties","undefined","Set","add","forEach","delete","removeProperty","isImportant","endsWith","setProperty","slice","styleMap"],"sources":["../../src/directives/style-map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  [name: string]: string | number | undefined | null;\n}\n\nconst important = 'important';\n// The leading space is important\nconst importantFlag = ' !' + important;\n// How many characters to remove from a value, as a negative number\nconst flagTrim = 0 - importantFlag.length;\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: Readonly<StyleInfo>) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop.includes('-')\n        ? prop\n        : prop\n            .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n            .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  override update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        const isImportant =\n          typeof value === 'string' && value.endsWith(importantFlag);\n        if (name.includes('-') || isImportant) {\n          style.setProperty(\n            name,\n            isImportant\n              ? (value as string).slice(0, flagTrim)\n              : (value as string),\n            isImportant ? important : ''\n          );\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the\n * {@link StyleInfo styleInfo} object and adds the properties to the inline\n * style of the element.\n *\n * Property names with dashes (`-`) are assumed to be valid CSS\n * property names and set on the element's style object using `setProperty()`.\n * Names without dashes are assumed to be camelCased JavaScript property names\n * and set on the element's style object using property assignment, allowing the\n * style object to translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n * @see {@link https://lit.dev/docs/templates/directives/#stylemap styleMap code samples on Lit.dev}\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}