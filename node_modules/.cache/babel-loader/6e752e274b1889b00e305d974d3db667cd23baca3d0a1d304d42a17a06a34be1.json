{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"./ha-statistic-picker\";\nlet HaStatisticsPicker = _decorate([customElement(\"ha-statistics-picker\")], function (_initialize, _LitElement) {\n  class HaStatisticsPicker extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStatisticsPicker,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"statisticIds\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"statistic-types\"\n      })],\n      key: \"statisticTypes\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"picked-statistic-label\"\n      })],\n      key: \"pickedStatisticLabel\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"pick-statistic-label\"\n      })],\n      key: \"pickStatisticLabel\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"allow-custom-entity\"\n      })],\n      key: \"allowCustomEntity\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"include-statistics-unit-of-measurement\"\n      })],\n      key: \"includeStatisticsUnitOfMeasurement\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"include-unit-class\"\n      })],\n      key: \"includeUnitClass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"include-device-class\"\n      })],\n      key: \"includeDeviceClass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"ignore-restrictions-on-first-statistic\"\n      })],\n      key: \"ignoreRestrictionsOnFirstStatistic\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value:\n      /**\n       * Show only statistics natively stored with these units of measurements.\n       * @attr include-statistics-unit-of-measurement\n       */\n\n      /**\n       * Show only statistics with these unit classes.\n       * @attr include-unit-class\n       */\n\n      /**\n       * Show only statistics with these device classes.\n       * @attr include-device-class\n       */\n\n      /**\n       * Ignore filtering of statistics type and units when only a single statistic is selected.\n       * @type {boolean}\n       * @attr ignore-restrictions-on-first-statistic\n       */\n\n      function render() {\n        if (!this.hass) {\n          return nothing;\n        }\n        const ignoreRestriction = this.ignoreRestrictionsOnFirstStatistic && this._currentStatistics.length <= 1;\n        const includeStatisticsUnitCurrent = ignoreRestriction ? undefined : this.includeStatisticsUnitOfMeasurement;\n        const includeUnitClassCurrent = ignoreRestriction ? undefined : this.includeUnitClass;\n        const includeDeviceClassCurrent = ignoreRestriction ? undefined : this.includeDeviceClass;\n        const includeStatisticTypesCurrent = ignoreRestriction ? undefined : this.statisticTypes;\n        return html`\n      ${repeat(this._currentStatistics, statisticId => statisticId, statisticId => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .includeUnitClass=${includeUnitClassCurrent}\n              .includeDeviceClass=${includeDeviceClassCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              .excludeStatistics=${this.value}\n              .allowCustomEntity=${this.allowCustomEntity}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `)}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${this.includeStatisticsUnitOfMeasurement}\n          .includeUnitClass=${this.includeUnitClass}\n          .includeDeviceClass=${this.includeDeviceClass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          .excludeStatistics=${this.value}\n          .allowCustomEntity=${this.allowCustomEntity}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_currentStatistics\",\n      value: function _currentStatistics() {\n        return this.value || [];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateStatistics\",\n      value: async function _updateStatistics(entities) {\n        this.value = entities;\n        fireEvent(this, \"value-changed\", {\n          value: entities\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_statisticChanged\",\n      value: function _statisticChanged(event) {\n        event.stopPropagation();\n        const oldValue = event.currentTarget.curValue;\n        const newValue = event.detail.value;\n        if (newValue === oldValue) {\n          return;\n        }\n        const currentStatistics = this._currentStatistics;\n        if (!newValue || currentStatistics.includes(newValue)) {\n          this._updateStatistics(currentStatistics.filter(ent => ent !== oldValue));\n          return;\n        }\n        this._updateStatistics(currentStatistics.map(ent => ent === oldValue ? newValue : ent));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addStatistic\",\n      value: async function _addStatistic(event) {\n        event.stopPropagation();\n        const toAdd = event.detail.value;\n        if (!toAdd) {\n          return;\n        }\n        event.currentTarget.value = \"\";\n        if (!toAdd) {\n          return;\n        }\n        const currentEntities = this._currentStatistics;\n        if (currentEntities.includes(toAdd)) {\n          return;\n        }\n        this._updateStatistics([...currentEntities, toAdd]);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","repeat","fireEvent","HaStatisticsPicker","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Array","Boolean","render","hass","ignoreRestriction","ignoreRestrictionsOnFirstStatistic","_currentStatistics","length","includeStatisticsUnitCurrent","undefined","includeStatisticsUnitOfMeasurement","includeUnitClassCurrent","includeUnitClass","includeDeviceClassCurrent","includeDeviceClass","includeStatisticTypesCurrent","statisticTypes","statisticId","statisticIds","pickedStatisticLabel","allowCustomEntity","_statisticChanged","pickStatisticLabel","_addStatistic","_updateStatistics","entities","event","stopPropagation","oldValue","currentTarget","curValue","newValue","detail","currentStatistics","includes","filter","ent","map","toAdd","currentEntities","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/entity/ha-statistics-picker.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport type { ValueChangedEvent, HomeAssistant } from \"../../types\";\nimport \"./ha-statistic-picker\";\n\n@customElement(\"ha-statistics-picker\")\nclass HaStatisticsPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ type: Array }) public value?: string[];\n\n  @property({ type: Array }) public statisticIds?: string[];\n\n  @property({ attribute: \"statistic-types\" })\n  public statisticTypes?: \"mean\" | \"sum\";\n\n  @property({ attribute: \"picked-statistic-label\" })\n  public pickedStatisticLabel?: string;\n\n  @property({ attribute: \"pick-statistic-label\" })\n  public pickStatisticLabel?: string;\n\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n\n  /**\n   * Show only statistics natively stored with these units of measurements.\n   * @attr include-statistics-unit-of-measurement\n   */\n  @property({\n    attribute: \"include-statistics-unit-of-measurement\",\n  })\n  public includeStatisticsUnitOfMeasurement?: string[] | string;\n\n  /**\n   * Show only statistics with these unit classes.\n   * @attr include-unit-class\n   */\n  @property({ attribute: \"include-unit-class\" })\n  public includeUnitClass?: string | string[];\n\n  /**\n   * Show only statistics with these device classes.\n   * @attr include-device-class\n   */\n  @property({ attribute: \"include-device-class\" })\n  public includeDeviceClass?: string | string[];\n\n  /**\n   * Ignore filtering of statistics type and units when only a single statistic is selected.\n   * @type {boolean}\n   * @attr ignore-restrictions-on-first-statistic\n   */\n  @property({\n    type: Boolean,\n    attribute: \"ignore-restrictions-on-first-statistic\",\n  })\n  public ignoreRestrictionsOnFirstStatistic = false;\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n\n    const ignoreRestriction =\n      this.ignoreRestrictionsOnFirstStatistic &&\n      this._currentStatistics.length <= 1;\n\n    const includeStatisticsUnitCurrent = ignoreRestriction\n      ? undefined\n      : this.includeStatisticsUnitOfMeasurement;\n    const includeUnitClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeUnitClass;\n    const includeDeviceClassCurrent = ignoreRestriction\n      ? undefined\n      : this.includeDeviceClass;\n    const includeStatisticTypesCurrent = ignoreRestriction\n      ? undefined\n      : this.statisticTypes;\n\n    return html`\n      ${repeat(\n        this._currentStatistics,\n        (statisticId) => statisticId,\n        (statisticId) => html`\n          <div>\n            <ha-statistic-picker\n              .curValue=${statisticId}\n              .hass=${this.hass}\n              .includeStatisticsUnitOfMeasurement=${includeStatisticsUnitCurrent}\n              .includeUnitClass=${includeUnitClassCurrent}\n              .includeDeviceClass=${includeDeviceClassCurrent}\n              .value=${statisticId}\n              .statisticTypes=${includeStatisticTypesCurrent}\n              .statisticIds=${this.statisticIds}\n              .label=${this.pickedStatisticLabel}\n              .excludeStatistics=${this.value}\n              .allowCustomEntity=${this.allowCustomEntity}\n              @value-changed=${this._statisticChanged}\n            ></ha-statistic-picker>\n          </div>\n        `\n      )}\n      <div>\n        <ha-statistic-picker\n          .hass=${this.hass}\n          .includeStatisticsUnitOfMeasurement=${this\n            .includeStatisticsUnitOfMeasurement}\n          .includeUnitClass=${this.includeUnitClass}\n          .includeDeviceClass=${this.includeDeviceClass}\n          .statisticTypes=${this.statisticTypes}\n          .statisticIds=${this.statisticIds}\n          .label=${this.pickStatisticLabel}\n          .excludeStatistics=${this.value}\n          .allowCustomEntity=${this.allowCustomEntity}\n          @value-changed=${this._addStatistic}\n        ></ha-statistic-picker>\n      </div>\n    `;\n  }\n\n  private get _currentStatistics() {\n    return this.value || [];\n  }\n\n  private async _updateStatistics(entities) {\n    this.value = entities;\n\n    fireEvent(this, \"value-changed\", {\n      value: entities,\n    });\n  }\n\n  private _statisticChanged(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const oldValue = (event.currentTarget as any).curValue;\n    const newValue = event.detail.value;\n    if (newValue === oldValue) {\n      return;\n    }\n    const currentStatistics = this._currentStatistics;\n    if (!newValue || currentStatistics.includes(newValue)) {\n      this._updateStatistics(\n        currentStatistics.filter((ent) => ent !== oldValue)\n      );\n      return;\n    }\n    this._updateStatistics(\n      currentStatistics.map((ent) => (ent === oldValue ? newValue : ent))\n    );\n  }\n\n  private async _addStatistic(event: ValueChangedEvent<string>) {\n    event.stopPropagation();\n    const toAdd = event.detail.value;\n    if (!toAdd) {\n      return;\n    }\n    (event.currentTarget as any).value = \"\";\n    if (!toAdd) {\n      return;\n    }\n    const currentEntities = this._currentStatistics;\n    if (currentEntities.includes(toAdd)) {\n      return;\n    }\n\n    this._updateStatistics([...currentEntities, toAdd]);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        width: 200px;\n        display: block;\n      }\n      ha-statistic-picker {\n        display: block;\n        width: 100%;\n        margin-top: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-statistics-picker\": HaStatisticsPicker;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}