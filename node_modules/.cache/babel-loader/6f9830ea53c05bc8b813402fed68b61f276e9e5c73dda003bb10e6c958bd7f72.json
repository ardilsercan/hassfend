{"ast":null,"code":"// We import the minified bundle because the unminified bundle\n// has some quirks that break wds. See #7784 for unminified version.\n\nimport Vibrant from \"node-vibrant/dist/vibrant\";\nimport { getRGBContrastRatio } from \"../color/rgb\";\nconst CONTRAST_RATIO = 4.5;\n\n// How much the total diff between 2 RGB colors can be\n// to be considered similar.\nconst COLOR_SIMILARITY_THRESHOLD = 150;\n\n// For debug purposes, is being tree shaken.\nconst DEBUG_COLOR = __DEV__ && false;\nconst logColor = (color, label = `${color.hex} - ${color.population}`) =>\n// eslint-disable-next-line no-console\nconsole.log(`%c${label}`, `color: ${color.bodyTextColor}; background-color: ${color.hex}`);\nconst customGenerator = colors => {\n  colors.sort((colorA, colorB) => colorB.population - colorA.population);\n  const backgroundColor = colors[0];\n  let foregroundColor;\n  const contrastRatios = new Map();\n  const approvedContrastRatio = (hex, rgb) => {\n    if (!contrastRatios.has(hex)) {\n      contrastRatios.set(hex, getRGBContrastRatio(backgroundColor.rgb, rgb));\n    }\n    return contrastRatios.get(hex) > CONTRAST_RATIO;\n  };\n\n  // We take each next color and find one that has better contrast.\n  for (let i = 1; i < colors.length && foregroundColor === undefined; i++) {\n    // If this color matches, score, take it.\n    if (approvedContrastRatio(colors[i].hex, colors[i].rgb)) {\n      if (DEBUG_COLOR) {\n        logColor(colors[i], \"PICKED\");\n      }\n      foregroundColor = colors[i].rgb;\n      break;\n    }\n\n    // This color has the wrong contrast ratio, but it is the right color.\n    // Let's find similar colors that might have the right contrast ratio\n\n    const currentColor = colors[i];\n    if (DEBUG_COLOR) {\n      logColor(colors[i], \"Finding similar color with better contrast\");\n    }\n    for (let j = i + 1; j < colors.length; j++) {\n      const compareColor = colors[j];\n\n      // difference. 0 is same, 765 max difference\n      const diffScore = Math.abs(currentColor.rgb[0] - compareColor.rgb[0]) + Math.abs(currentColor.rgb[1] - compareColor.rgb[1]) + Math.abs(currentColor.rgb[2] - compareColor.rgb[2]);\n      if (DEBUG_COLOR) {\n        logColor(colors[j], `${colors[j].hex} - ${diffScore}`);\n      }\n      if (diffScore > COLOR_SIMILARITY_THRESHOLD) {\n        continue;\n      }\n      if (approvedContrastRatio(compareColor.hex, compareColor.rgb)) {\n        if (DEBUG_COLOR) {\n          logColor(compareColor, \"PICKED\");\n        }\n        foregroundColor = compareColor.rgb;\n        break;\n      }\n    }\n  }\n  if (foregroundColor === undefined) {\n    foregroundColor =\n    // @ts-expect-error\n    backgroundColor.getYiq() < 200 ? [255, 255, 255] : [0, 0, 0];\n  }\n  if (DEBUG_COLOR) {\n    // eslint-disable-next-line no-console\n    console.log();\n    // eslint-disable-next-line no-console\n    console.log(\"%cPicked colors\", `color: ${foregroundColor}; background-color: ${backgroundColor.hex}; font-weight: bold; padding: 16px;`);\n    colors.forEach(color => logColor(color));\n    // eslint-disable-next-line no-console\n    console.log();\n  }\n  return {\n    // We can't import Swatch constructor from the minified bundle, take it from background color.\n    // @ts-expect-error\n    foreground: new backgroundColor.constructor(foregroundColor, 0),\n    background: backgroundColor\n  };\n};\n\n// Set our custom generator as the default.\nVibrant._pipeline.generator.register(\"default\", customGenerator);\nexport const extractColors = (url, downsampleColors = 16) => new Vibrant(url, {\n  colorCount: downsampleColors\n}).getPalette().then(({\n  foreground,\n  background\n}) => ({\n  background: background,\n  foreground: foreground\n}));","map":{"version":3,"names":["Vibrant","getRGBContrastRatio","CONTRAST_RATIO","COLOR_SIMILARITY_THRESHOLD","DEBUG_COLOR","__DEV__","logColor","color","label","hex","population","console","log","bodyTextColor","customGenerator","colors","sort","colorA","colorB","backgroundColor","foregroundColor","contrastRatios","Map","approvedContrastRatio","rgb","has","set","get","i","length","undefined","currentColor","j","compareColor","diffScore","Math","abs","getYiq","forEach","foreground","constructor","background","_pipeline","generator","register","extractColors","url","downsampleColors","colorCount","getPalette","then"],"sources":["/workspaces/frontend/src/common/image/extract_color.ts"],"sourcesContent":["// We import the minified bundle because the unminified bundle\n// has some quirks that break wds. See #7784 for unminified version.\nimport type { Swatch, Vec3 } from \"@vibrant/color\";\nimport Vibrant from \"node-vibrant/dist/vibrant\";\nimport { getRGBContrastRatio } from \"../color/rgb\";\n\nconst CONTRAST_RATIO = 4.5;\n\n// How much the total diff between 2 RGB colors can be\n// to be considered similar.\nconst COLOR_SIMILARITY_THRESHOLD = 150;\n\n// For debug purposes, is being tree shaken.\nconst DEBUG_COLOR = __DEV__ && false;\n\nconst logColor = (\n  color: Swatch,\n  label = `${color.hex} - ${color.population}`\n) =>\n  // eslint-disable-next-line no-console\n  console.log(\n    `%c${label}`,\n    `color: ${color.bodyTextColor}; background-color: ${color.hex}`\n  );\n\nconst customGenerator = (colors: Swatch[]) => {\n  colors.sort((colorA, colorB) => colorB.population - colorA.population);\n\n  const backgroundColor = colors[0];\n  let foregroundColor: Vec3 | undefined;\n\n  const contrastRatios = new Map<string, number>();\n  const approvedContrastRatio = (hex: string, rgb: Swatch[\"rgb\"]) => {\n    if (!contrastRatios.has(hex)) {\n      contrastRatios.set(hex, getRGBContrastRatio(backgroundColor.rgb, rgb));\n    }\n\n    return contrastRatios.get(hex)! > CONTRAST_RATIO;\n  };\n\n  // We take each next color and find one that has better contrast.\n  for (let i = 1; i < colors.length && foregroundColor === undefined; i++) {\n    // If this color matches, score, take it.\n    if (approvedContrastRatio(colors[i].hex, colors[i].rgb)) {\n      if (DEBUG_COLOR) {\n        logColor(colors[i], \"PICKED\");\n      }\n      foregroundColor = colors[i].rgb;\n      break;\n    }\n\n    // This color has the wrong contrast ratio, but it is the right color.\n    // Let's find similar colors that might have the right contrast ratio\n\n    const currentColor = colors[i];\n    if (DEBUG_COLOR) {\n      logColor(colors[i], \"Finding similar color with better contrast\");\n    }\n\n    for (let j = i + 1; j < colors.length; j++) {\n      const compareColor = colors[j];\n\n      // difference. 0 is same, 765 max difference\n      const diffScore =\n        Math.abs(currentColor.rgb[0] - compareColor.rgb[0]) +\n        Math.abs(currentColor.rgb[1] - compareColor.rgb[1]) +\n        Math.abs(currentColor.rgb[2] - compareColor.rgb[2]);\n\n      if (DEBUG_COLOR) {\n        logColor(colors[j], `${colors[j].hex} - ${diffScore}`);\n      }\n\n      if (diffScore > COLOR_SIMILARITY_THRESHOLD) {\n        continue;\n      }\n\n      if (approvedContrastRatio(compareColor.hex, compareColor.rgb)) {\n        if (DEBUG_COLOR) {\n          logColor(compareColor, \"PICKED\");\n        }\n        foregroundColor = compareColor.rgb;\n        break;\n      }\n    }\n  }\n\n  if (foregroundColor === undefined) {\n    foregroundColor =\n      // @ts-expect-error\n      backgroundColor.getYiq() < 200 ? [255, 255, 255] : [0, 0, 0];\n  }\n\n  if (DEBUG_COLOR) {\n    // eslint-disable-next-line no-console\n    console.log();\n    // eslint-disable-next-line no-console\n    console.log(\n      \"%cPicked colors\",\n      `color: ${foregroundColor}; background-color: ${backgroundColor.hex}; font-weight: bold; padding: 16px;`\n    );\n    colors.forEach((color) => logColor(color));\n    // eslint-disable-next-line no-console\n    console.log();\n  }\n\n  return {\n    // We can't import Swatch constructor from the minified bundle, take it from background color.\n    // @ts-expect-error\n    foreground: new backgroundColor.constructor(foregroundColor, 0),\n    background: backgroundColor,\n  };\n};\n\n// Set our custom generator as the default.\nVibrant._pipeline.generator.register(\"default\", customGenerator);\n\nexport const extractColors = (url: string, downsampleColors = 16) =>\n  new Vibrant(url, {\n    colorCount: downsampleColors,\n  })\n    .getPalette()\n    .then(({ foreground, background }) => ({\n      background: background!,\n      foreground: foreground!,\n    }));\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}