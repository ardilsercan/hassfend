{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { relativeTime } from \"../../common/datetime/relative_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-icon-button\";\nimport { deleteAllRefreshTokens } from \"../../data/auth\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../resources/styles\";\nconst compareTokenLastUsedAt = (tokenA, tokenB) => {\n  const timeA = tokenA.last_used_at ? new Date(tokenA.last_used_at) : 0;\n  const timeB = tokenB.last_used_at ? new Date(tokenB.last_used_at) : 0;\n  if (timeA < timeB) {\n    return 1;\n  }\n  if (timeA > timeB) {\n    return -1;\n  }\n  return 0;\n};\nlet HaRefreshTokens = _decorate([customElement(\"ha-refresh-tokens-card\")], function (_initialize, _LitElement) {\n  class HaRefreshTokens extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaRefreshTokens,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"refreshTokens\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_refreshTokens\",\n      value() {\n        return memoizeOne(refreshTokens => refreshTokens === null || refreshTokens === void 0 ? void 0 : refreshTokens.filter(token => token.type === \"normal\").sort(compareTokenLastUsedAt));\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const refreshTokens = this._refreshTokens(this.refreshTokens);\n        return html`<ha-card\n      .header=${this.hass.localize(\"ui.panel.profile.refresh_tokens.header\")}\n    >\n      <div class=\"card-content\">\n        ${this.hass.localize(\"ui.panel.profile.refresh_tokens.description\")}\n        ${refreshTokens !== null && refreshTokens !== void 0 && refreshTokens.length ? refreshTokens.map(token => html`<ha-settings-row three-line>\n                  <span slot=\"heading\"\n                    >${this.hass.localize(\"ui.panel.profile.refresh_tokens.token_title\", {\n          clientId: token.client_id\n        })}\n                  </span>\n                  <div slot=\"description\">\n                    ${this.hass.localize(\"ui.panel.profile.refresh_tokens.created_at\", {\n          date: relativeTime(new Date(token.created_at), this.hass.locale)\n        })}\n                  </div>\n                  <div slot=\"description\">\n                    ${token.last_used_at ? this.hass.localize(\"ui.panel.profile.refresh_tokens.last_used\", {\n          date: relativeTime(new Date(token.last_used_at), this.hass.locale),\n          location: token.last_used_ip\n        }) : this.hass.localize(\"ui.panel.profile.refresh_tokens.not_used\")}\n                  </div>\n                  <div>\n                    ${token.is_current ? html`<simple-tooltip\n                          animation-delay=\"0\"\n                          position=\"left\"\n                        >\n                          ${this.hass.localize(\"ui.panel.profile.refresh_tokens.current_token_tooltip\")}\n                        </simple-tooltip>` : \"\"}\n                    <ha-icon-button\n                      .token=${token}\n                      .disabled=${token.is_current}\n                      .label=${this.hass.localize(\"ui.common.delete\")}\n                      .path=${mdiDelete}\n                      @click=${this._deleteToken}\n                    ></ha-icon-button>\n                  </div>\n                </ha-settings-row>`) : \"\"}\n      </div>\n      <div class=\"card-actions\">\n        <mwc-button class=\"warning\" @click=${this._deleteAllTokens}>\n          ${this.hass.localize(\"ui.panel.profile.refresh_tokens.delete_all_tokens\")}\n        </mwc-button>\n      </div>\n    </ha-card>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteToken\",\n      value: async function _deleteToken(ev) {\n        const token = ev.currentTarget.token;\n        if (!(await showConfirmationDialog(this, {\n          text: this.hass.localize(\"ui.panel.profile.refresh_tokens.confirm_delete\", {\n            name: token.client_name || token.client_id\n          })\n        }))) {\n          return;\n        }\n        try {\n          await this.hass.callWS({\n            type: \"auth/delete_refresh_token\",\n            refresh_token_id: token.id\n          });\n          fireEvent(this, \"hass-refresh-tokens\");\n        } catch (err) {\n          await showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.profile.refresh_tokens.delete_failed\"),\n            text: err.message\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteAllTokens\",\n      value: async function _deleteAllTokens() {\n        if (!(await showConfirmationDialog(this, {\n          text: this.hass.localize(\"ui.panel.profile.refresh_tokens.confirm_delete_all\"),\n          destructive: true\n        }))) {\n          return;\n        }\n        try {\n          await deleteAllRefreshTokens(this.hass, \"normal\", false);\n          fireEvent(this, \"hass-refresh-tokens\");\n        } catch (err) {\n          await showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.profile.refresh_tokens.delete_failed\"),\n            text: err.message\n          });\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        ha-settings-row {\n          padding: 0;\n          --settings-row-prefix-display: contents;\n          --settings-row-content-display: contents;\n        }\n        ha-icon-button {\n          color: var(--primary-text-color);\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","memoizeOne","relativeTime","fireEvent","deleteAllRefreshTokens","showAlertDialog","showConfirmationDialog","haStyle","compareTokenLastUsedAt","tokenA","tokenB","timeA","last_used_at","Date","timeB","HaRefreshTokens","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","refreshTokens","filter","token","type","sort","render","_refreshTokens","hass","localize","length","map","clientId","client_id","date","created_at","locale","location","last_used_ip","is_current","mdiDelete","_deleteToken","_deleteAllTokens","ev","currentTarget","text","name","client_name","callWS","refresh_token_id","id","err","title","message","destructive","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/profile/ha-refresh-tokens-card.ts"],"sourcesContent":["import { mdiDelete } from \"@mdi/js\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { relativeTime } from \"../../common/datetime/relative_time\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-card\";\nimport \"../../components/ha-settings-row\";\nimport \"../../components/ha-icon-button\";\nimport { RefreshToken } from \"../../data/refresh_token\";\nimport { deleteAllRefreshTokens } from \"../../data/auth\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\n\nconst compareTokenLastUsedAt = (tokenA: RefreshToken, tokenB: RefreshToken) => {\n  const timeA = tokenA.last_used_at ? new Date(tokenA.last_used_at) : 0;\n  const timeB = tokenB.last_used_at ? new Date(tokenB.last_used_at) : 0;\n  if (timeA < timeB) {\n    return 1;\n  }\n  if (timeA > timeB) {\n    return -1;\n  }\n  return 0;\n};\n\n@customElement(\"ha-refresh-tokens-card\")\nclass HaRefreshTokens extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public refreshTokens?: RefreshToken[];\n\n  private _refreshTokens = memoizeOne(\n    (refreshTokens: RefreshToken[]): RefreshToken[] =>\n      refreshTokens\n        ?.filter((token) => token.type === \"normal\")\n        .sort(compareTokenLastUsedAt)\n  );\n\n  protected render(): TemplateResult {\n    const refreshTokens = this._refreshTokens(this.refreshTokens!);\n    return html`<ha-card\n      .header=${this.hass.localize(\"ui.panel.profile.refresh_tokens.header\")}\n    >\n      <div class=\"card-content\">\n        ${this.hass.localize(\"ui.panel.profile.refresh_tokens.description\")}\n        ${refreshTokens?.length\n          ? refreshTokens!.map(\n              (token) =>\n                html`<ha-settings-row three-line>\n                  <span slot=\"heading\"\n                    >${this.hass.localize(\n                      \"ui.panel.profile.refresh_tokens.token_title\",\n                      { clientId: token.client_id }\n                    )}\n                  </span>\n                  <div slot=\"description\">\n                    ${this.hass.localize(\n                      \"ui.panel.profile.refresh_tokens.created_at\",\n                      {\n                        date: relativeTime(\n                          new Date(token.created_at),\n                          this.hass.locale\n                        ),\n                      }\n                    )}\n                  </div>\n                  <div slot=\"description\">\n                    ${token.last_used_at\n                      ? this.hass.localize(\n                          \"ui.panel.profile.refresh_tokens.last_used\",\n                          {\n                            date: relativeTime(\n                              new Date(token.last_used_at),\n                              this.hass.locale\n                            ),\n                            location: token.last_used_ip,\n                          }\n                        )\n                      : this.hass.localize(\n                          \"ui.panel.profile.refresh_tokens.not_used\"\n                        )}\n                  </div>\n                  <div>\n                    ${token.is_current\n                      ? html`<simple-tooltip\n                          animation-delay=\"0\"\n                          position=\"left\"\n                        >\n                          ${this.hass.localize(\n                            \"ui.panel.profile.refresh_tokens.current_token_tooltip\"\n                          )}\n                        </simple-tooltip>`\n                      : \"\"}\n                    <ha-icon-button\n                      .token=${token}\n                      .disabled=${token.is_current}\n                      .label=${this.hass.localize(\"ui.common.delete\")}\n                      .path=${mdiDelete}\n                      @click=${this._deleteToken}\n                    ></ha-icon-button>\n                  </div>\n                </ha-settings-row>`\n            )\n          : \"\"}\n      </div>\n      <div class=\"card-actions\">\n        <mwc-button class=\"warning\" @click=${this._deleteAllTokens}>\n          ${this.hass.localize(\n            \"ui.panel.profile.refresh_tokens.delete_all_tokens\"\n          )}\n        </mwc-button>\n      </div>\n    </ha-card>`;\n  }\n\n  private async _deleteToken(ev: Event): Promise<void> {\n    const token = (ev.currentTarget as any).token;\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.confirm_delete\",\n          { name: token.client_name || token.client_id }\n        ),\n      }))\n    ) {\n      return;\n    }\n    try {\n      await this.hass.callWS({\n        type: \"auth/delete_refresh_token\",\n        refresh_token_id: token.id,\n      });\n      fireEvent(this, \"hass-refresh-tokens\");\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.delete_failed\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  private async _deleteAllTokens(): Promise<void> {\n    if (\n      !(await showConfirmationDialog(this, {\n        text: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.confirm_delete_all\"\n        ),\n        destructive: true,\n      }))\n    ) {\n      return;\n    }\n    try {\n      await deleteAllRefreshTokens(this.hass, \"normal\", false);\n      fireEvent(this, \"hass-refresh-tokens\");\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.refresh_tokens.delete_failed\"\n        ),\n        text: err.message,\n      });\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-settings-row {\n          padding: 0;\n          --settings-row-prefix-display: contents;\n          --settings-row-content-display: contents;\n        }\n        ha-icon-button {\n          color: var(--primary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-refresh-tokens-card\": HaRefreshTokens;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}