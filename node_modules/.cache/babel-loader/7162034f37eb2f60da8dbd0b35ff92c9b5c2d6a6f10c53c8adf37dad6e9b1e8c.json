{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button/mwc-button\";\nconst mdiAlertOutline = \"M12,2L1,21H23M12,6L19.53,19H4.47M11,10V14H13V10M11,16V18H13V16\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nlet DialogBox = _decorate([customElement(\"dialog-box\")], function (_initialize, _LitElement) {\n  class DialogBox extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogBox,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-textfield\")],\n      key: \"_textField\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: async function showDialog(params) {\n        this._params = params;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        var _this$_params, _this$_params2;\n        if ((_this$_params = this._params) !== null && _this$_params !== void 0 && _this$_params.confirmation || (_this$_params2 = this._params) !== null && _this$_params2 !== void 0 && _this$_params2.prompt) {\n          return false;\n        }\n        if (this._params) {\n          this._dismiss();\n          return true;\n        }\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._params) {\n          return nothing;\n        }\n        const confirmPrompt = this._params.confirmation || this._params.prompt;\n        return html`\n      <ha-dialog\n        open\n        ?scrimClickAction=${confirmPrompt}\n        ?escapeKeyAction=${confirmPrompt}\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${html`${this._params.warning ? html`<ha-svg-icon\n              .path=${mdiAlertOutline}\n              style=\"color: var(--warning-color)\"\n            ></ha-svg-icon> ` : \"\"}${this._params.title ? this._params.title : this._params.confirmation && this.hass.localize(\"ui.dialogs.generic.default_confirmation_title\")}`}\n      >\n        <div>\n          ${this._params.text ? html`\n                <p class=${this._params.prompt ? \"no-bottom-padding\" : \"\"}>\n                  ${this._params.text}\n                </p>\n              ` : \"\"}\n          ${this._params.prompt ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .placeholder=${this._params.placeholder}\n                  .label=${this._params.inputLabel ? this._params.inputLabel : \"\"}\n                  .type=${this._params.inputType ? this._params.inputType : \"text\"}\n                  .min=${this._params.inputMin}\n                  .max=${this._params.inputMax}\n                ></ha-textfield>\n              ` : \"\"}\n        </div>\n        ${confirmPrompt && html`\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this._params.dismissText ? this._params.dismissText : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n        `}\n        <mwc-button\n          @click=${this._confirm}\n          ?dialogInitialFocus=${!this._params.prompt}\n          slot=\"primaryAction\"\n          class=${classMap({\n          destructive: this._params.destructive || false\n        })}\n        >\n          ${this._params.confirmText ? this._params.confirmText : this.hass.localize(\"ui.dialogs.generic.ok\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dismiss\",\n      value: function _dismiss() {\n        var _this$_params3;\n        if ((_this$_params3 = this._params) !== null && _this$_params3 !== void 0 && _this$_params3.cancel) {\n          this._params.cancel();\n        }\n        this._close();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_confirm\",\n      value: function _confirm() {\n        if (this._params.confirm) {\n          var _this$_textField;\n          this._params.confirm((_this$_textField = this._textField) === null || _this$_textField === void 0 ? void 0 : _this$_textField.value);\n        }\n        this._close();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dialogClosed\",\n      value: function _dialogClosed(ev) {\n        if (ev.detail.action === \"ignore\") {\n          return;\n        }\n        this._dismiss();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_close\",\n      value: function _close() {\n        if (!this._params) {\n          return;\n        }\n        this._params = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .destructive {\n        --mdc-theme-primary: var(--error-color);\n      }\n      ha-dialog {\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n      @media all and (min-width: 600px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 400px;\n        }\n      }\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiAlertOutline","css","html","LitElement","nothing","customElement","property","query","state","classMap","ifDefined","fireEvent","DialogBox","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","_params","closeDialog","_this$_params","_this$_params2","confirmation","prompt","_dismiss","render","confirmPrompt","_dialogClosed","warning","title","hass","localize","text","defaultValue","placeholder","inputLabel","inputType","inputMin","inputMax","dismissText","_confirm","destructive","confirmText","_this$_params3","cancel","_close","confirm","_this$_textField","_textField","ev","detail","action","undefined","dialog","localName","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/dialogs/generic/dialog-box.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { mdiAlertOutline } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nimport { HaTextField } from \"../../components/ha-textfield\";\nimport { HomeAssistant } from \"../../types\";\nimport { DialogBoxParams } from \"./show-dialog-box\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: DialogBoxParams;\n\n  @query(\"ha-textfield\") private _textField?: HaTextField;\n\n  public async showDialog(params: DialogBoxParams): Promise<void> {\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    if (this._params?.confirmation || this._params?.prompt) {\n      return false;\n    }\n    if (this._params) {\n      this._dismiss();\n      return true;\n    }\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-dialog\n        open\n        ?scrimClickAction=${confirmPrompt}\n        ?escapeKeyAction=${confirmPrompt}\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${html`${this._params.warning\n          ? html`<ha-svg-icon\n              .path=${mdiAlertOutline}\n              style=\"color: var(--warning-color)\"\n            ></ha-svg-icon> `\n          : \"\"}${this._params.title\n          ? this._params.title\n          : this._params.confirmation &&\n            this.hass.localize(\n              \"ui.dialogs.generic.default_confirmation_title\"\n            )}`}\n      >\n        <div>\n          ${this._params.text\n            ? html`\n                <p class=${this._params.prompt ? \"no-bottom-padding\" : \"\"}>\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <ha-textfield\n                  dialogInitialFocus\n                  value=${ifDefined(this._params.defaultValue)}\n                  .placeholder=${this._params.placeholder}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                  .min=${this._params.inputMin}\n                  .max=${this._params.inputMax}\n                ></ha-textfield>\n              `\n            : \"\"}\n        </div>\n        ${confirmPrompt &&\n        html`\n          <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n            ${this._params.dismissText\n              ? this._params.dismissText\n              : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n          </mwc-button>\n        `}\n        <mwc-button\n          @click=${this._confirm}\n          ?dialogInitialFocus=${!this._params.prompt}\n          slot=\"primaryAction\"\n          class=${classMap({\n            destructive: this._params.destructive || false,\n          })}\n        >\n          ${this._params.confirmText\n            ? this._params.confirmText\n            : this.hass.localize(\"ui.dialogs.generic.ok\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    if (this._params?.cancel) {\n      this._params.cancel();\n    }\n    this._close();\n  }\n\n  private _confirm(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._textField?.value);\n    }\n    this._close();\n  }\n\n  private _dialogClosed(ev) {\n    if (ev.detail.action === \"ignore\") {\n      return;\n    }\n    this._dismiss();\n  }\n\n  private _close(): void {\n    if (!this._params) {\n      return;\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .destructive {\n        --mdc-theme-primary: var(--error-color);\n      }\n      ha-dialog {\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n      @media all and (min-width: 600px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 400px;\n        }\n      }\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}