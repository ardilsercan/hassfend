{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { BaseLayout, dim1, dim2 } from './BaseLayout.js';\n// function numberToPixelSize(n: number): PixelSize {\n//     return n === 0 ? '0' : `${n}px`;\n// }\nfunction paddingValueToNumber(v) {\n  if (v === 'match-gap') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\nfunction gapValueToNumber(v) {\n  if (v === 'auto') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\nexport function gap1(direction) {\n  return direction === 'horizontal' ? 'column' : 'row';\n}\nexport function gap2(direction) {\n  return direction === 'horizontal' ? 'row' : 'column';\n}\nexport function padding1(direction) {\n  return direction === 'horizontal' ? ['left', 'right'] : ['top', 'bottom'];\n}\nexport function padding2(direction) {\n  return direction === 'horizontal' ? ['top', 'bottom'] : ['left', 'right'];\n}\nexport class SizeGapPaddingBaseLayout extends BaseLayout {\n  constructor() {\n    super(...arguments);\n    this._itemSize = {};\n    this._gaps = {};\n    this._padding = {};\n  }\n  _getDefaultConfig() {\n    return Object.assign({}, super._getDefaultConfig(), {\n      itemSize: {\n        width: '300px',\n        height: '300px'\n      },\n      gap: '8px',\n      padding: 'match-gap'\n    });\n  }\n  // Temp, to support current flexWrap implementation\n  get _gap() {\n    return this._gaps.row;\n  }\n  // Temp, to support current flexWrap implementation\n  get _idealSize() {\n    return this._itemSize[dim1(this.direction)];\n  }\n  get _idealSize1() {\n    return this._itemSize[dim1(this.direction)];\n  }\n  get _idealSize2() {\n    return this._itemSize[dim2(this.direction)];\n  }\n  get _gap1() {\n    return this._gaps[gap1(this.direction)];\n  }\n  get _gap2() {\n    return this._gaps[gap2(this.direction)];\n  }\n  get _padding1() {\n    const padding = this._padding;\n    const [start, end] = padding1(this.direction);\n    return [padding[start], padding[end]];\n  }\n  get _padding2() {\n    const padding = this._padding;\n    const [start, end] = padding2(this.direction);\n    return [padding[start], padding[end]];\n  }\n  set itemSize(dims) {\n    const size = this._itemSize;\n    if (typeof dims === 'string') {\n      dims = {\n        width: dims,\n        height: dims\n      };\n    }\n    const width = parseInt(dims.width);\n    const height = parseInt(dims.height);\n    if (width !== size.width) {\n      size.width = width;\n      this._triggerReflow();\n    }\n    if (height !== size.height) {\n      size.height = height;\n      this._triggerReflow();\n    }\n  }\n  set gap(spec) {\n    this._setGap(spec);\n  }\n  // This setter is overridden in specific layouts to narrow the accepted types\n  _setGap(spec) {\n    const values = spec.split(' ').map(v => gapValueToNumber(v));\n    const gaps = this._gaps;\n    if (values[0] !== gaps.row) {\n      gaps.row = values[0];\n      this._triggerReflow();\n    }\n    if (values[1] === undefined) {\n      if (values[0] !== gaps.column) {\n        gaps.column = values[0];\n        this._triggerReflow();\n      }\n    } else {\n      if (values[1] !== gaps.column) {\n        gaps.column = values[1];\n        this._triggerReflow();\n      }\n    }\n  }\n  set padding(spec) {\n    const padding = this._padding;\n    const values = spec.split(' ').map(v => paddingValueToNumber(v));\n    if (values.length === 1) {\n      padding.top = padding.right = padding.bottom = padding.left = values[0];\n      this._triggerReflow();\n    } else if (values.length === 2) {\n      padding.top = padding.bottom = values[0];\n      padding.right = padding.left = values[1];\n      this._triggerReflow();\n    } else if (values.length === 3) {\n      padding.top = values[0];\n      padding.right = padding.left = values[1];\n      padding.bottom = values[2];\n      this._triggerReflow();\n    } else if (values.length === 4) {\n      ['top', 'right', 'bottom', 'left'].forEach((side, idx) => padding[side] = values[idx]);\n      this._triggerReflow();\n    }\n  }\n}","map":{"version":3,"names":["BaseLayout","dim1","dim2","paddingValueToNumber","v","Infinity","parseInt","gapValueToNumber","gap1","direction","gap2","padding1","padding2","SizeGapPaddingBaseLayout","constructor","_itemSize","_gaps","_padding","_getDefaultConfig","Object","assign","itemSize","width","height","gap","padding","_gap","row","_idealSize","_idealSize1","_idealSize2","_gap1","_gap2","_padding1","start","end","_padding2","dims","size","_triggerReflow","spec","_setGap","values","split","map","gaps","undefined","column","length","top","right","bottom","left","forEach","side","idx"],"sources":["../../src/layouts/shared/SizeGapPaddingBaseLayout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// import { dimension } from './Layout.js';\nimport {BaseLayoutConfig} from './Layout.js';\nimport {BaseLayout, dim1, dim2} from './BaseLayout.js';\nimport {ScrollDirection, Size} from './Layout.js';\n\nexport type PixelSize = `${'0' | `${number}px`}`;\n\ntype GapValue = PixelSize;\ntype TwoGapValues = `${GapValue} ${GapValue}`;\n\nexport type GapSpec = GapValue | TwoGapValues;\n\nexport type AutoGapSpec =\n  | PixelSize\n  | `${PixelSize} ${PixelSize}`\n  | `auto ${PixelSize}`\n  | `${PixelSize} auto`;\n\ntype PaddingValue = PixelSize | 'match-gap';\ntype TwoPaddingValues = `${PaddingValue} ${PaddingValue}`;\ntype ThreePaddingValues = `${TwoPaddingValues} ${PaddingValue}`;\ntype FourPaddingValues = `${ThreePaddingValues} ${PaddingValue}`;\ntype PaddingSpec =\n  | PaddingValue\n  | TwoPaddingValues\n  | ThreePaddingValues\n  | FourPaddingValues;\n\ntype PixelDimensions = {width: PixelSize; height: PixelSize};\n\n// function numberToPixelSize(n: number): PixelSize {\n//     return n === 0 ? '0' : `${n}px`;\n// }\n\nfunction paddingValueToNumber(v: PaddingValue): number {\n  if (v === 'match-gap') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\n\nfunction gapValueToNumber(v: GapValue | 'auto'): number {\n  if (v === 'auto') {\n    return Infinity;\n  }\n  return parseInt(v);\n}\n\nexport function gap1(direction: ScrollDirection) {\n  return direction === 'horizontal' ? 'column' : 'row';\n}\n\nexport function gap2(direction: ScrollDirection) {\n  return direction === 'horizontal' ? 'row' : 'column';\n}\n\nexport function padding1(direction: ScrollDirection): [side, side] {\n  return direction === 'horizontal' ? ['left', 'right'] : ['top', 'bottom'];\n}\n\nexport function padding2(direction: ScrollDirection): [side, side] {\n  return direction === 'horizontal' ? ['top', 'bottom'] : ['left', 'right'];\n}\n\nexport interface SizeGapPaddingBaseLayoutConfig extends BaseLayoutConfig {\n  // gap?: GapSpec,\n  padding?: PaddingSpec;\n  itemSize?: PixelDimensions | PixelSize;\n}\n\ntype gap = 'row' | 'column';\ntype side = 'top' | 'right' | 'bottom' | 'left';\ntype Gaps = {[key in gap]: number};\ntype Padding = {[key in side]: number};\n\nexport abstract class SizeGapPaddingBaseLayout<\n  C extends SizeGapPaddingBaseLayoutConfig\n> extends BaseLayout<C> {\n  protected _itemSize: Size | {} = {};\n  protected _gaps: Gaps | {} = {};\n  protected _padding: Padding | {} = {};\n\n  protected _getDefaultConfig(): C {\n    return Object.assign({}, super._getDefaultConfig(), {\n      itemSize: {width: '300px', height: '300px'},\n      gap: '8px',\n      padding: 'match-gap',\n    }) as C;\n  }\n\n  // Temp, to support current flexWrap implementation\n  protected get _gap(): number {\n    return (this._gaps as Gaps).row;\n  }\n\n  // Temp, to support current flexWrap implementation\n  protected get _idealSize(): number {\n    return (this._itemSize as Size)[dim1(this.direction)];\n  }\n\n  protected get _idealSize1(): number {\n    return (this._itemSize as Size)[dim1(this.direction)];\n  }\n\n  protected get _idealSize2(): number {\n    return (this._itemSize as Size)[dim2(this.direction)];\n  }\n\n  protected get _gap1(): number {\n    return (this._gaps as Gaps)[gap1(this.direction)];\n  }\n\n  protected get _gap2(): number {\n    return (this._gaps as Gaps)[gap2(this.direction)];\n  }\n\n  protected get _padding1(): [number, number] {\n    const padding = this._padding as Padding;\n    const [start, end] = padding1(this.direction);\n    return [padding[start], padding[end]];\n  }\n\n  protected get _padding2(): [number, number] {\n    const padding = this._padding as Padding;\n    const [start, end] = padding2(this.direction);\n    return [padding[start], padding[end]];\n  }\n\n  set itemSize(dims: PixelDimensions | PixelSize) {\n    const size = this._itemSize as Size;\n    if (typeof dims === 'string') {\n      dims = {\n        width: dims,\n        height: dims,\n      };\n    }\n    const width = parseInt(dims.width);\n    const height = parseInt(dims.height);\n    if (width !== size.width) {\n      size.width = width;\n      this._triggerReflow();\n    }\n    if (height !== size.height) {\n      size.height = height;\n      this._triggerReflow();\n    }\n  }\n\n  set gap(spec: GapSpec | AutoGapSpec) {\n    this._setGap(spec);\n  }\n\n  // This setter is overridden in specific layouts to narrow the accepted types\n  protected _setGap(spec: GapSpec | AutoGapSpec) {\n    const values = spec.split(' ').map((v) => gapValueToNumber(v as GapValue));\n    const gaps = this._gaps as Gaps;\n    if (values[0] !== gaps.row) {\n      gaps.row = values[0];\n      this._triggerReflow();\n    }\n    if (values[1] === undefined) {\n      if (values[0] !== gaps.column) {\n        gaps.column = values[0];\n        this._triggerReflow();\n      }\n    } else {\n      if (values[1] !== gaps.column) {\n        gaps.column = values[1];\n        this._triggerReflow();\n      }\n    }\n  }\n\n  set padding(spec: PaddingSpec) {\n    const padding = this._padding as Padding;\n    const values = spec\n      .split(' ')\n      .map((v) => paddingValueToNumber(v as PaddingValue));\n    if (values.length === 1) {\n      padding.top = padding.right = padding.bottom = padding.left = values[0];\n      this._triggerReflow();\n    } else if (values.length === 2) {\n      padding.top = padding.bottom = values[0];\n      padding.right = padding.left = values[1];\n      this._triggerReflow();\n    } else if (values.length === 3) {\n      padding.top = values[0];\n      padding.right = padding.left = values[1];\n      padding.bottom = values[2];\n      this._triggerReflow();\n    } else if (values.length === 4) {\n      ['top', 'right', 'bottom', 'left'].forEach(\n        (side, idx) => (padding[side as side] = values[idx])\n      );\n      this._triggerReflow();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}