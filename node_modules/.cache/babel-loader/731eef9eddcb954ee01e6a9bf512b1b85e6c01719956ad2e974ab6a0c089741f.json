{"ast":null,"code":"import \"core-js/modules/es.object.assign.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nexport var legacyPrototypeMethod = function legacyPrototypeMethod(descriptor, proto, name) {\n  Object.defineProperty(proto, name, descriptor);\n};\nexport var standardPrototypeMethod = function standardPrototypeMethod(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n};\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport var decorateProperty = function decorateProperty(_ref) {\n  var finisher = _ref.finisher,\n    descriptor = _ref.descriptor;\n  return function (protoOrDescriptor, name\n  // Note TypeScript requires the return type to be `void|any`\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ) {\n    var _a;\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      var ctor = protoOrDescriptor.constructor;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher === null || finisher === void 0 ? void 0 : finisher(ctor, name);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      var key =\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (_a = protoOrDescriptor.originalKey) !== null && _a !== void 0 ? _a : protoOrDescriptor.key;\n      var info = descriptor != undefined ? {\n        kind: 'method',\n        placement: 'prototype',\n        key: key,\n        descriptor: descriptor(protoOrDescriptor.key)\n      } : Object.assign(Object.assign({}, protoOrDescriptor), {}, {\n        key: key\n      });\n      if (finisher != undefined) {\n        info.finisher = function (ctor) {\n          finisher(ctor, key);\n        };\n      }\n      return info;\n    }\n  };\n};","map":{"version":3,"names":["legacyPrototypeMethod","descriptor","proto","name","Object","defineProperty","standardPrototypeMethod","element","kind","placement","key","decorateProperty","_ref","finisher","protoOrDescriptor","undefined","ctor","constructor","_a","originalKey","info","assign"],"sources":["../../src/decorators/base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '../reactive-element.js';\n\n/**\n * Generates a public interface type that removes private and protected fields.\n * This allows accepting otherwise compatible versions of the type (e.g. from\n * multiple copies of the same package in `node_modules`).\n */\nexport type Interface<T> = {\n  [K in keyof T]: T[K];\n};\n\nexport type Constructor<T> = {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  new (...args: any[]): T;\n};\n\n// From the TC39 Decorators proposal\nexport interface ClassDescriptor {\n  kind: 'class';\n  elements: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n}\n\n// From the TC39 Decorators proposal\nexport interface ClassElement {\n  kind: 'field' | 'method';\n  key: PropertyKey;\n  placement: 'static' | 'prototype' | 'own';\n  initializer?: Function;\n  extras?: ClassElement[];\n  finisher?: <T>(clazz: Constructor<T>) => void | Constructor<T>;\n  descriptor?: PropertyDescriptor;\n}\n\nexport const legacyPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  proto: Object,\n  name: PropertyKey\n) => {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nexport const standardPrototypeMethod = (\n  descriptor: PropertyDescriptor,\n  element: ClassElement\n) => ({\n  kind: 'method',\n  placement: 'prototype',\n  key: element.key,\n  descriptor,\n});\n\n/**\n * Helper for decorating a property that is compatible with both TypeScript\n * and Babel decorators. The optional `finisher` can be used to perform work on\n * the class. The optional `descriptor` should return a PropertyDescriptor\n * to install for the given property.\n *\n * @param finisher {function} Optional finisher method; receives the element\n * constructor and property key as arguments and has no return value.\n * @param descriptor {function} Optional descriptor method; receives the\n * property key as an argument and returns a property descriptor to define for\n * the given property.\n * @returns {ClassElement|void}\n */\nexport const decorateProperty =\n  ({\n    finisher,\n    descriptor,\n  }: {\n    finisher?:\n      | ((ctor: typeof ReactiveElement, property: PropertyKey) => void)\n      | null;\n    descriptor?: (property: PropertyKey) => PropertyDescriptor;\n  }) =>\n  (\n    protoOrDescriptor: Interface<ReactiveElement> | ClassElement,\n    name?: PropertyKey\n    // Note TypeScript requires the return type to be `void|any`\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ): void | any => {\n    // TypeScript / Babel legacy mode\n    if (name !== undefined) {\n      const ctor = (protoOrDescriptor as ReactiveElement)\n        .constructor as typeof ReactiveElement;\n      if (descriptor !== undefined) {\n        Object.defineProperty(protoOrDescriptor, name, descriptor(name));\n      }\n      finisher?.(ctor, name!);\n      // Babel standard mode\n    } else {\n      // Note, the @property decorator saves `key` as `originalKey`\n      // so try to use it here.\n      const key =\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (protoOrDescriptor as any).originalKey ??\n        (protoOrDescriptor as ClassElement).key;\n      const info: ClassElement =\n        descriptor != undefined\n          ? {\n              kind: 'method',\n              placement: 'prototype',\n              key,\n              descriptor: descriptor((protoOrDescriptor as ClassElement).key),\n            }\n          : {...(protoOrDescriptor as ClassElement), key};\n      if (finisher != undefined) {\n        info.finisher = function <ReactiveElement>(\n          ctor: Constructor<ReactiveElement>\n        ) {\n          finisher(ctor as unknown as typeof ReactiveElement, key);\n        };\n      }\n      return info;\n    }\n  };\n"],"mappings":";AAAA;;;;;AAwCA,OAAO,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAChCC,UAA8B,EAC9BC,KAAa,EACbC,IAAiB,EACf;EACFC,MAAM,CAACC,cAAc,CAACH,KAAK,EAAEC,IAAI,EAAEF,UAAU,CAAC;AAChD,CAAC;AAED,OAAO,IAAMK,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAClCL,UAA8B,EAC9BM,OAAqB;EAAA,OACjB;IACJC,IAAI,EAAE,QAAQ;IACdC,SAAS,EAAE,WAAW;IACtBC,GAAG,EAAEH,OAAO,CAACG,GAAG;IAChBT,UAAU,EAAVA;GACD;AAAA,CAAC;AAEF;;;;;;;;;;;;;AAaA,OAAO,IAAMU,gBAAgB,GAC3B,SADWA,gBAAgBA,CAAAC,IAAA;EAAA,IAEzBC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;IACRZ,UAAU,GAAAW,IAAA,CAAVX,UAAU;EAAA,OAOZ,UACEa,iBAA4D,EAC5DX;EACA;EACA;EAAA,EACc;;IACd;IACA,IAAIA,IAAI,KAAKY,SAAS,EAAE;MACtB,IAAMC,IAAI,GAAIF,iBAAqC,CAChDG,WAAqC;MACxC,IAAIhB,UAAU,KAAKc,SAAS,EAAE;QAC5BX,MAAM,CAACC,cAAc,CAACS,iBAAiB,EAAEX,IAAI,EAAEF,UAAU,CAACE,IAAI,CAAC,CAAC;;MAElEU,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAGG,IAAI,EAAEb,IAAK,CAAC;MACvB;KACD,MAAM;MACL;MACA;MACA,IAAMO,GAAG;MACP;MACA,CAAAQ,EAAA,GAACJ,iBAAyB,CAACK,WAAW,cAAAD,EAAA,cAAAA,EAAA,GACrCJ,iBAAkC,CAACJ,GAAG;MACzC,IAAMU,IAAI,GACRnB,UAAU,IAAIc,SAAS,GACnB;QACEP,IAAI,EAAE,QAAQ;QACdC,SAAS,EAAE,WAAW;QACtBC,GAAG,EAAHA,GAAG;QACHT,UAAU,EAAEA,UAAU,CAAEa,iBAAkC,CAACJ,GAAG;OAC/D,GAAAN,MAAA,CAAAiB,MAAA,CAAAjB,MAAA,CAAAiB,MAAA,KACIP,iBAAkC;QAAEJ,GAAG,EAAHA;MAAG,EAAC;MACnD,IAAIG,QAAQ,IAAIE,SAAS,EAAE;QACzBK,IAAI,CAACP,QAAQ,GAAG,UACdG,IAAkC;UAElCH,QAAQ,CAACG,IAAyC,EAAEN,GAAG,CAAC;QAC1D,CAAC;;MAEH,OAAOU,IAAI;;EAEf,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}