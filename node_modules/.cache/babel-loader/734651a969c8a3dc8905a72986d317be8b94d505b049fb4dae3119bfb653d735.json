{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\nvar isPromise = function isPromise(x) {\n  return !isPrimitive(x) && typeof x.then === 'function';\n};\n// Effectively infinity, but a SMI.\nvar _infinity = 0x3fffffff;\nexport var UntilDirective = /*#__PURE__*/function (_AsyncDirective) {\n  _inherits(UntilDirective, _AsyncDirective);\n  function UntilDirective() {\n    var _this2;\n    _classCallCheck(this, UntilDirective);\n    _this2 = _callSuper(this, UntilDirective, arguments);\n    _this2.__lastRenderedIndex = _infinity;\n    _this2.__values = [];\n    _this2.__weakThis = new PseudoWeakRef(_assertThisInitialized(_this2));\n    _this2.__pauser = new Pauser();\n    return _this2;\n  }\n  _createClass(UntilDirective, [{\n    key: \"render\",\n    value: function render() {\n      var _a;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return (_a = args.find(function (x) {\n        return !isPromise(x);\n      })) !== null && _a !== void 0 ? _a : noChange;\n    }\n  }, {\n    key: \"update\",\n    value: function update(_part, args) {\n      var _this3 = this;\n      var previousValues = this.__values;\n      var previousLength = previousValues.length;\n      this.__values = args;\n      var weakThis = this.__weakThis;\n      var pauser = this.__pauser;\n      // If our initial render occurs while disconnected, ensure that the pauser\n      // and weakThis are in the disconnected state\n      if (!this.isConnected) {\n        this.disconnected();\n      }\n      var _loop = function _loop() {\n          // If we've rendered a higher-priority value already, stop.\n          if (i > _this3.__lastRenderedIndex) {\n            return 0; // break\n          }\n          var value = args[i];\n          // Render non-Promise values immediately\n          if (!isPromise(value)) {\n            _this3.__lastRenderedIndex = i;\n            // Since a lower-priority value will never overwrite a higher-priority\n            // synchronous value, we can stop processing now.\n            return {\n              v: value\n            };\n          }\n          // If this is a Promise we've already handled, skip it.\n          if (i < previousLength && value === previousValues[i]) {\n            return 1; // continue\n          }\n          // We have a Promise that we haven't seen before, so priorities may have\n          // changed. Forget what we rendered before.\n          _this3.__lastRenderedIndex = _infinity;\n          previousLength = 0;\n          // Note, the callback avoids closing over `this` so that the directive\n          // can be gc'ed before the promise resolves; instead `this` is retrieved\n          // from `weakThis`, which can break the hard reference in the closure when\n          // the directive disconnects\n          Promise.resolve(value).then( /*#__PURE__*/function () {\n            var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(result) {\n              var _this, index;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!pauser.get()) {\n                      _context.next = 5;\n                      break;\n                    }\n                    _context.next = 3;\n                    return pauser.get();\n                  case 3:\n                    _context.next = 0;\n                    break;\n                  case 5:\n                    // If the callback gets here and there is no `this`, it means that the\n                    // directive has been disconnected and garbage collected and we don't\n                    // need to do anything else\n                    _this = weakThis.deref();\n                    if (_this !== undefined) {\n                      index = _this.__values.indexOf(value); // If state.values doesn't contain the value, we've re-rendered without\n                      // the value, so don't render it. Then, only render if the value is\n                      // higher-priority than what's already been rendered.\n                      if (index > -1 && index < _this.__lastRenderedIndex) {\n                        _this.__lastRenderedIndex = index;\n                        _this.setValue(result);\n                      }\n                    }\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee);\n            }));\n            return function (_x) {\n              return _ref.apply(this, arguments);\n            };\n          }());\n        },\n        _ret;\n      for (var i = 0; i < args.length; i++) {\n        _ret = _loop();\n        if (_ret === 0) break;\n        if (_ret === 1) continue;\n        if (_ret) return _ret.v;\n      }\n      return noChange;\n    }\n  }, {\n    key: \"disconnected\",\n    value: function disconnected() {\n      this.__weakThis.disconnect();\n      this.__pauser.pause();\n    }\n  }, {\n    key: \"reconnected\",\n    value: function reconnected() {\n      this.__weakThis.reconnect(this);\n      this.__pauser.resume();\n    }\n  }]);\n  return UntilDirective;\n}(AsyncDirective);\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport var until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};","map":{"version":3,"names":["noChange","isPrimitive","directive","AsyncDirective","Pauser","PseudoWeakRef","isPromise","x","then","_infinity","UntilDirective","_AsyncDirective","_inherits","_this2","_classCallCheck","__lastRenderedIndex","__values","__weakThis","_assertThisInitialized","__pauser","_createClass","key","value","render","args","Array","_len","_key","arguments","_a","find","update","_part","_this3","previousValues","previousLength","length","weakThis","pauser","isConnected","disconnected","_loop","i","v","Promise","resolve","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","_this","index","wrap","_callee$","_context","prev","next","get","deref","undefined","indexOf","setValue","stop","_x","apply","_ret","disconnect","pause","reconnected","reconnect","resume","until"],"sources":["../../src/directives/until.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Part, noChange} from '../lit-html.js';\nimport {isPrimitive} from '../directive-helpers.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\nimport {Pauser, PseudoWeakRef} from './private-async-helpers.js';\n\nconst isPromise = (x: unknown) => {\n  return !isPrimitive(x) && typeof (x as {then?: unknown}).then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\n\nexport class UntilDirective extends AsyncDirective {\n  private __lastRenderedIndex: number = _infinity;\n  private __values: unknown[] = [];\n  private __weakThis = new PseudoWeakRef(this);\n  private __pauser = new Pauser();\n\n  render(...args: Array<unknown>) {\n    return args.find((x) => !isPromise(x)) ?? noChange;\n  }\n\n  override update(_part: Part, args: Array<unknown>) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i];\n\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then(async (result: unknown) => {\n        // If we're disconnected, wait until we're (maybe) reconnected\n        // The while loop here handles the case that the connection state\n        // thrashes, causing the pauser to resume and then get re-paused\n        while (pauser.get()) {\n          await pauser.get();\n        }\n        // If the callback gets here and there is no `this`, it means that the\n        // directive has been disconnected and garbage collected and we don't\n        // need to do anything else\n        const _this = weakThis.deref();\n        if (_this !== undefined) {\n          const index = _this.__values.indexOf(value);\n          // If state.values doesn't contain the value, we've re-rendered without\n          // the value, so don't render it. Then, only render if the value is\n          // higher-priority than what's already been rendered.\n          if (index > -1 && index < _this.__lastRenderedIndex) {\n            _this.__lastRenderedIndex = index;\n            _this.setValue(result);\n          }\n        }\n      });\n    }\n\n    return noChange;\n  }\n\n  override disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n\n  override reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"mappings":";;;;;;;;;;;;;AAAA;;;;;AAMA,SAAcA,QAAQ,QAAO,gBAAgB;AAC7C,SAAQC,WAAW,QAAO,yBAAyB;AACnD,SAAQC,SAAS,EAAEC,cAAc,QAAO,uBAAuB;AAC/D,SAAQC,MAAM,EAAEC,aAAa,QAAO,4BAA4B;AAEhE,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,CAAU,EAAI;EAC/B,OAAO,CAACN,WAAW,CAACM,CAAC,CAAC,IAAI,OAAQA,CAAsB,CAACC,IAAI,KAAK,UAAU;AAC9E,CAAC;AACD;AACA,IAAMC,SAAS,GAAG,UAAU;AAE5B,WAAaC,cAAe,0BAAAC,eAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,eAAA;EAA5B,SAAAD,eAAA;IAAA,IAAAG,MAAA;IAAAC,eAAA,OAAAJ,cAAA;;IACUG,MAAA,CAAAE,mBAAmB,GAAWN,SAAS;IACvCI,MAAA,CAAAG,QAAQ,GAAc,EAAE;IACxBH,MAAA,CAAAI,UAAU,GAAG,IAAIZ,aAAa,CAAAa,sBAAA,CAAAL,MAAA,CAAK,CAAC;IACpCA,MAAA,CAAAM,QAAQ,GAAG,IAAIf,MAAM,EAAE;IAAC,OAAAS,MAAA;EAsFlC;EAACO,YAAA,CAAAV,cAAA;IAAAW,GAAA;IAAAC,KAAA,EApFC,SAAAC,OAAA,EAA8B;;wCAApBC,IAAoB,OAAAC,KAAA,CAAAC,IAAA,GAAAC,IAAA,MAAAA,IAAA,GAAAD,IAAA,EAAAC,IAAA;QAApBH,IAAoB,CAAAG,IAAA,IAAAC,SAAA,CAAAD,IAAA;MAAA;MAC5B,OAAO,CAAAE,EAAA,GAAAL,IAAI,CAACM,IAAI,CAAC,UAACvB,CAAC;QAAA,OAAK,CAACD,SAAS,CAACC,CAAC,CAAC;MAAA,EAAC,cAAAsB,EAAA,cAAAA,EAAA,GAAI7B,QAAQ;IACpD;EAAC;IAAAqB,GAAA;IAAAC,KAAA,EAEQ,SAAAS,OAAOC,KAAW,EAAER,IAAoB;MAAA,IAAAS,MAAA;MAC/C,IAAMC,cAAc,GAAG,IAAI,CAAClB,QAAQ;MACpC,IAAImB,cAAc,GAAGD,cAAc,CAACE,MAAM;MAC1C,IAAI,CAACpB,QAAQ,GAAGQ,IAAI;MAEpB,IAAMa,QAAQ,GAAG,IAAI,CAACpB,UAAU;MAChC,IAAMqB,MAAM,GAAG,IAAI,CAACnB,QAAQ;MAE5B;MACA;MACA,IAAI,CAAC,IAAI,CAACoB,WAAW,EAAE;QACrB,IAAI,CAACC,YAAY,EAAE;;MACpB,IAAAC,KAAA,YAAAA,MAAA,EAEqC;UACpC;UACA,IAAIC,CAAC,GAAGT,MAAI,CAAClB,mBAAmB,EAAE;YAAA;;UAIlC,IAAMO,KAAK,GAAGE,IAAI,CAACkB,CAAC,CAAC;UAErB;UACA,IAAI,CAACpC,SAAS,CAACgB,KAAK,CAAC,EAAE;YACrBW,MAAI,CAAClB,mBAAmB,GAAG2B,CAAC;YAC5B;YACA;YAAA;cAAAC,CAAA,EACOrB;YAAK;;UAGd;UACA,IAAIoB,CAAC,GAAGP,cAAc,IAAIb,KAAK,KAAKY,cAAc,CAACQ,CAAC,CAAC,EAAE;YAAA;;UAIvD;UACA;UACAT,MAAI,CAAClB,mBAAmB,GAAGN,SAAS;UACpC0B,cAAc,GAAG,CAAC;UAElB;UACA;UACA;UACA;UACAS,OAAO,CAACC,OAAO,CAACvB,KAAK,CAAC,CAACd,IAAI;YAAA,IAAAsC,IAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAAC,SAAAC,QAAOC,MAAe;cAAA,IAAAC,KAAA,EAAAC,KAAA;cAAA,OAAAL,mBAAA,GAAAM,IAAA,UAAAC,SAAAC,QAAA;gBAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;kBAAA;oBAAA,KAIzCpB,MAAM,CAACqB,GAAG,EAAE;sBAAAH,QAAA,CAAAE,IAAA;sBAAA;oBAAA;oBAAAF,QAAA,CAAAE,IAAA;oBAAA,OACXpB,MAAM,CAACqB,GAAG,EAAE;kBAAA;oBAAAH,QAAA,CAAAE,IAAA;oBAAA;kBAAA;oBAEpB;oBACA;oBACA;oBACMN,KAAK,GAAGf,QAAQ,CAACuB,KAAK,EAAE;oBAC9B,IAAIR,KAAK,KAAKS,SAAS,EAAE;sBACjBR,KAAK,GAAGD,KAAK,CAACpC,QAAQ,CAAC8C,OAAO,CAACxC,KAAK,CAAC,EAC3C;sBACA;sBACA;sBACA,IAAI+B,KAAK,GAAG,CAAC,CAAC,IAAIA,KAAK,GAAGD,KAAK,CAACrC,mBAAmB,EAAE;wBACnDqC,KAAK,CAACrC,mBAAmB,GAAGsC,KAAK;wBACjCD,KAAK,CAACW,QAAQ,CAACZ,MAAM,CAAC;;;kBAEzB;kBAAA;oBAAA,OAAAK,QAAA,CAAAQ,IAAA;gBAAA;cAAA,GAAAd,OAAA;YAAA,CACF;YAAA,iBAAAe,EAAA;cAAA,OAAAnB,IAAA,CAAAoB,KAAA,OAAAtC,SAAA;YAAA;UAAA,IAAC;SACH;QAAAuC,IAAA;MApDD,KAAK,IAAIzB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,IAAI,CAACY,MAAM,EAAEM,CAAC,EAAE;QAAAyB,IAAA,GAAA1B,KAAA;QAAA,IAAA0B,IAAA,QAGhC;QAAM,IAAAA,IAAA,QAeN;QAAS,IAAAA,IAAA,SAAAA,IAAA,CAAAxB,CAAA;MAAA;MAoCb,OAAO3C,QAAQ;IACjB;EAAC;IAAAqB,GAAA;IAAAC,KAAA,EAEQ,SAAAkB,aAAA,EAAY;MACnB,IAAI,CAACvB,UAAU,CAACmD,UAAU,EAAE;MAC5B,IAAI,CAACjD,QAAQ,CAACkD,KAAK,EAAE;IACvB;EAAC;IAAAhD,GAAA;IAAAC,KAAA,EAEQ,SAAAgD,YAAA,EAAW;MAClB,IAAI,CAACrD,UAAU,CAACsD,SAAS,CAAC,IAAI,CAAC;MAC/B,IAAI,CAACpD,QAAQ,CAACqD,MAAM,EAAE;IACxB;EAAC;EAAA,OAAA9D,cAAA;AAAA,EAzFiCP,cAAc;AA4FlD;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,IAAMsE,KAAK,GAAGvE,SAAS,CAACQ,cAAc,CAAC;AAE9C;;;;AAIA"},"metadata":{},"sourceType":"module","externalDependencies":[]}