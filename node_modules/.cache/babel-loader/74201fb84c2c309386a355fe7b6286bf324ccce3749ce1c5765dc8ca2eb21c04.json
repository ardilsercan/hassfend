{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nvar _templateObject;\nimport \"core-js/modules/es.number.constructor.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { Polymer } from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport { html } from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@demo demo/index.html\n*/\nexport var IronA11yAnnouncer = Polymer({\n  /** @override */\n  _template: html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    <style>\\n      :host {\\n        display: inline-block;\\n        position: fixed;\\n        clip: rect(0px,0px,0px,0px);\\n      }\\n    </style>\\n    <div aria-live$=\\\"[[mode]]\\\">[[_text]]</div>\\n\"]))),\n  is: 'iron-a11y-announcer',\n  properties: {\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {\n      type: String,\n      value: 'polite'\n    },\n    /**\n     * The timeout on refreshing the announcement text. Larger timeouts are\n     * needed for certain screen readers to re-announce the same message.\n     */\n    timeout: {\n      type: Number,\n      value: 150\n    },\n    _text: {\n      type: String,\n      value: ''\n    }\n  },\n  /** @override */\n  created: function created() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n    document.addEventListener('iron-announce', this._onIronAnnounce.bind(this));\n  },\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function announce(text) {\n    this._text = '';\n    this.async(function () {\n      this._text = text;\n    }, this.timeout);\n  },\n  _onIronAnnounce: function _onIronAnnounce(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\nIronA11yAnnouncer.instance = null;\nIronA11yAnnouncer.requestAvailability = function () {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n  if (document.body) {\n    document.body.appendChild(IronA11yAnnouncer.instance);\n  } else {\n    document.addEventListener('load', function () {\n      document.body.appendChild(IronA11yAnnouncer.instance);\n    });\n  }\n};","map":{"version":3,"names":["Polymer","html","IronA11yAnnouncer","_template","_templateObject","_taggedTemplateLiteral","is","properties","mode","type","String","value","timeout","Number","_text","created","instance","document","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","body","appendChild"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  /** @override */\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    /**\n     * The timeout on refreshing the announcement text. Larger timeouts are\n     * needed for certain screen readers to re-announce the same message.\n     */\n    timeout: {type: Number, value: 150},\n\n    _text: {type: String, value: ''},\n  },\n\n  /** @override */\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.addEventListener('iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, this.timeout);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  if (document.body) {\n    document.body.appendChild(IronA11yAnnouncer.instance);\n  } else {\n    document.addEventListener('load', function() {\n      document.body.appendChild(IronA11yAnnouncer.instance);\n    });\n  }\n};\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAE3C,SAAQA,OAAO,QAAO,2CAA2C;AACjE,SAAQC,IAAI,QAAO,wCAAwC;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,iBAAiB,GAAGF,OAAO,CAAC;EACvC;EACAG,SAAS,EAAEF,IAAI,CAAAG,eAAA,KAAAA,eAAA,GAAAC,sBAAA,+MAShB;EAECC,EAAE,EAAE,qBAAqB;EAEzBC,UAAU,EAAE;IAEV;AACJ;AACA;AACA;AACA;IACIC,IAAI,EAAE;MAACC,IAAI,EAAEC,MAAM;MAAEC,KAAK,EAAE;IAAQ,CAAC;IAErC;AACJ;AACA;AACA;IACIC,OAAO,EAAE;MAACH,IAAI,EAAEI,MAAM;MAAEF,KAAK,EAAE;IAAG,CAAC;IAEnCG,KAAK,EAAE;MAACL,IAAI,EAAEC,MAAM;MAAEC,KAAK,EAAE;IAAE;EACjC,CAAC;EAED;EACAI,OAAO,EAAE,SAAAA,QAAA,EAAW;IAClB,IAAI,CAACb,iBAAiB,CAACc,QAAQ,EAAE;MAC/Bd,iBAAiB,CAACc,QAAQ,GAAG,IAAI;IACnC;IAEAC,QAAQ,CAACC,gBAAgB,CAAC,eAAe,EAAE,IAAI,CAACC,eAAe,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC7E,CAAC;EAED;AACF;AACA;AACA;AACA;EACEC,QAAQ,EAAE,SAAAA,SAASC,IAAI,EAAE;IACvB,IAAI,CAACR,KAAK,GAAG,EAAE;IACf,IAAI,CAACS,KAAK,CAAC,YAAW;MACpB,IAAI,CAACT,KAAK,GAAGQ,IAAI;IACnB,CAAC,EAAE,IAAI,CAACV,OAAO,CAAC;EAClB,CAAC;EAEDO,eAAe,EAAE,SAAAA,gBAASK,KAAK,EAAE;IAC/B,IAAIA,KAAK,CAACC,MAAM,IAAID,KAAK,CAACC,MAAM,CAACH,IAAI,EAAE;MACrC,IAAI,CAACD,QAAQ,CAACG,KAAK,CAACC,MAAM,CAACH,IAAI,CAAC;IAClC;EACF;AACF,CAAC,CAAC;AAEFpB,iBAAiB,CAACc,QAAQ,GAAG,IAAI;AAEjCd,iBAAiB,CAACwB,mBAAmB,GAAG,YAAW;EACjD,IAAI,CAACxB,iBAAiB,CAACc,QAAQ,EAAE;IAC/Bd,iBAAiB,CAACc,QAAQ,GAAGC,QAAQ,CAACU,aAAa,CAAC,qBAAqB,CAAC;EAC5E;EAEA,IAAIV,QAAQ,CAACW,IAAI,EAAE;IACjBX,QAAQ,CAACW,IAAI,CAACC,WAAW,CAAC3B,iBAAiB,CAACc,QAAQ,CAAC;EACvD,CAAC,MAAM;IACLC,QAAQ,CAACC,gBAAgB,CAAC,MAAM,EAAE,YAAW;MAC3CD,QAAQ,CAACW,IAAI,CAACC,WAAW,CAAC3B,iBAAiB,CAACc,QAAQ,CAAC;IACvD,CAAC,CAAC;EACJ;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}