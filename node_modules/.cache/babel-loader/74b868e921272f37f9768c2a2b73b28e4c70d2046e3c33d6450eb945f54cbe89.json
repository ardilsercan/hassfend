{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { ResizeController } from \"@lit-labs/observers/resize-controller\";\nimport \"@material/mwc-list\";\nconst mdiChevronDown = \"M7.41,8.58L12,13.17L16.59,8.58L18,10L12,16L6,10L7.41,8.58Z\";\nconst mdiCommentProcessingOutline = \"M9,22A1,1 0 0,1 8,21V18H4A2,2 0 0,1 2,16V4C2,2.89 2.9,2 4,2H20A2,2 0 0,1 22,4V16A2,2 0 0,1 20,18H13.9L10.2,21.71C10,21.9 9.75,22 9.5,22V22H9M10,16V19.08L13.08,16H20V4H4V16H10M17,11H15V9H17V11M13,11H11V9H13V11M9,11H7V9H9V11Z\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nconst mdiInformationOutline = \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport { createSearchParam, extractSearchParam } from \"../../common/url/search-params\";\nimport \"../../components/ha-button\";\nimport \"../../components/ha-fab\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-list-item\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-state-icon\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-two-pane-top-app-bar-fixed\";\nimport { deleteConfigEntry } from \"../../data/config_entries\";\nimport { getExtendedEntityRegistryEntry } from \"../../data/entity_registry\";\nimport { fetchIntegrationManifest } from \"../../data/integration\";\nimport { TodoListEntityFeature, getTodoLists } from \"../../data/todo\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../dialogs/generic/show-dialog-box\";\nimport { showVoiceCommandDialog } from \"../../dialogs/voice-command-dialog/show-ha-voice-command-dialog\";\nimport { haStyle } from \"../../resources/styles\";\nimport { createCardElement } from \"../lovelace/create-element/create-card-element\";\nimport { showTodoItemEditDialog } from \"./show-dialog-todo-item-editor\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\nlet PanelTodo = _decorate([customElement(\"ha-panel-todo\")], function (_initialize, _LitElement) {\n  class PanelTodo extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: PanelTodo,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"mobile\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_card\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [storage({\n        key: \"selectedTodoEntity\",\n        state: true\n      })],\n      key: \"_entityId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_headerHeight\",\n      value() {\n        return 56;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_showPaneController\",\n      value() {\n        return new ResizeController(this, {\n          callback: entries => {\n            var _entries$;\n            return ((_entries$ = entries[0]) === null || _entries$ === void 0 ? void 0 : _entries$.contentRect.width) > 750;\n          }\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_mql\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_conversation\",\n      value() {\n        return memoizeOne(_components => isComponentLoaded(this.hass, \"conversation\"));\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(PanelTodo.prototype), \"connectedCallback\", this).call(this);\n        this._mql = window.matchMedia(\"(max-width: 450px), all and (max-height: 500px)\");\n        this._mql.addListener(this._setIsMobile);\n        this.mobile = this._mql.matches;\n        const computedStyles = getComputedStyle(this);\n        this._headerHeight = Number(computedStyles.getPropertyValue(\"--header-height\").replace(\"px\", \"\"));\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        var _this$_mql;\n        _get(_getPrototypeOf(PanelTodo.prototype), \"disconnectedCallback\", this).call(this);\n        (_this$_mql = this._mql) === null || _this$_mql === void 0 || _this$_mql.removeListener(this._setIsMobile);\n        this._mql = undefined;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_setIsMobile\",\n      value() {\n        return ev => {\n          this.mobile = ev.matches;\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        _get(_getPrototypeOf(PanelTodo.prototype), \"willUpdate\", this).call(this, changedProperties);\n        if (!this.hasUpdated) {\n          this.hass.loadFragmentTranslation(\"lovelace\");\n          const urlEntityId = extractSearchParam(\"entity_id\");\n          if (urlEntityId) {\n            this._entityId = urlEntityId;\n          } else {\n            if (this._entityId && !(this._entityId in this.hass.states)) {\n              this._entityId = undefined;\n            }\n            if (!this._entityId) {\n              var _getTodoLists$;\n              this._entityId = (_getTodoLists$ = getTodoLists(this.hass)[0]) === null || _getTodoLists$ === void 0 ? void 0 : _getTodoLists$.entity_id;\n            }\n          }\n        }\n        if (changedProperties.has(\"_entityId\") || !this.hasUpdated) {\n          this._setupTodoElement();\n        }\n        if (changedProperties.has(\"hass\") && this._card) {\n          this._card.hass = this.hass;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setupTodoElement\",\n      value: function _setupTodoElement() {\n        if (!this._entityId) {\n          this._card = undefined;\n          navigate(constructUrlCurrentPath(\"\"), {\n            replace: true\n          });\n          return;\n        }\n        navigate(constructUrlCurrentPath(createSearchParam({\n          entity_id: this._entityId\n        })), {\n          replace: true\n        });\n        this._card = createCardElement({\n          type: \"todo-list\",\n          entity: this._entityId\n        });\n        this._card.hass = this.hass;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_showPaneContro, _this$hass$user, _this$hass$user2;\n        const entityRegistryEntry = this._entityId ? this.hass.entities[this._entityId] : undefined;\n        const entityState = this._entityId ? this.hass.states[this._entityId] : undefined;\n        const showPane = (_this$_showPaneContro = this._showPaneController.value) !== null && _this$_showPaneContro !== void 0 ? _this$_showPaneContro : !this.narrow;\n        const listItems = getTodoLists(this.hass).map(list => html`<ha-list-item\n          graphic=\"icon\"\n          @click=${this._handleEntityPicked}\n          .entityId=${list.entity_id}\n          .activated=${list.entity_id === this._entityId}\n        >\n          <ha-state-icon\n            .stateObj=${list}\n            .hass=${this.hass}\n            slot=\"graphic\"\n          ></ha-state-icon\n          >${list.name}\n        </ha-list-item> `);\n        return html`\n      <ha-two-pane-top-app-bar-fixed .pane=${showPane} footer>\n        <ha-menu-button\n          slot=\"navigationIcon\"\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n        ></ha-menu-button>\n        <div slot=\"title\">\n          ${!showPane ? html`<ha-button-menu\n                class=\"lists\"\n                activatable\n                fixed\n                .noAnchor=${this.mobile}\n                .y=${this.mobile ? this._headerHeight / 2 : this._headerHeight / 4}\n                .x=${this.mobile ? 0 : undefined}\n              >\n                <ha-button slot=\"trigger\">\n                  <div>\n                    ${this._entityId ? entityState ? computeStateName(entityState) : this._entityId : \"\"}\n                  </div>\n                  <ha-svg-icon\n                    slot=\"trailingIcon\"\n                    .path=${mdiChevronDown}\n                  ></ha-svg-icon>\n                </ha-button>\n                ${listItems}\n                ${(_this$hass$user = this.hass.user) !== null && _this$hass$user !== void 0 && _this$hass$user.is_admin ? html`<li divider role=\"separator\"></li>\n                      <ha-list-item graphic=\"icon\" @click=${this._addList}>\n                        <ha-svg-icon\n                          .path=${mdiPlus}\n                          slot=\"graphic\"\n                        ></ha-svg-icon>\n                        ${this.hass.localize(\"ui.panel.todo.create_list\")}\n                      </ha-list-item>` : nothing}\n              </ha-button-menu>` : this.hass.localize(\"panel.todo\")}\n        </div>\n        <mwc-list slot=\"pane\" activatable>${listItems}</mwc-list>\n        ${showPane && (_this$hass$user2 = this.hass.user) !== null && _this$hass$user2 !== void 0 && _this$hass$user2.is_admin ? html`<ha-list-item\n              graphic=\"icon\"\n              slot=\"pane-footer\"\n              @click=${this._addList}\n            >\n              <ha-svg-icon .path=${mdiPlus} slot=\"graphic\"></ha-svg-icon>\n              ${this.hass.localize(\"ui.panel.todo.create_list\")}\n            </ha-list-item>` : nothing}\n        <ha-button-menu slot=\"actionItems\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${\"\"}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n          ${this._conversation(this.hass.config.components) ? html`<ha-list-item\n                graphic=\"icon\"\n                @click=${this._showMoreInfoDialog}\n                .disabled=${!this._entityId}\n              >\n                <ha-svg-icon .path=${mdiInformationOutline} slot=\"graphic\">\n                </ha-svg-icon>\n                ${this.hass.localize(\"ui.panel.todo.information\")}\n              </ha-list-item>` : nothing}\n          <li divider role=\"separator\"></li>\n          <ha-list-item graphic=\"icon\" @click=${this._showVoiceCommandDialog}>\n            <ha-svg-icon .path=${mdiCommentProcessingOutline} slot=\"graphic\">\n            </ha-svg-icon>\n            ${this.hass.localize(\"ui.panel.todo.assist\")}\n          </ha-list-item>\n          ${(entityRegistryEntry === null || entityRegistryEntry === void 0 ? void 0 : entityRegistryEntry.platform) === \"local_todo\" ? html` <li divider role=\"separator\"></li>\n                <ha-list-item\n                  graphic=\"icon\"\n                  @click=${this._deleteList}\n                  class=\"warning\"\n                  .disabled=${!this._entityId}\n                >\n                  <ha-svg-icon\n                    .path=${mdiDelete}\n                    slot=\"graphic\"\n                    class=\"warning\"\n                  >\n                  </ha-svg-icon>\n                  ${this.hass.localize(\"ui.panel.todo.delete_list\")}\n                </ha-list-item>` : nothing}\n        </ha-button-menu>\n        <div id=\"columns\">\n          <div class=\"column\">${this._card}</div>\n        </div>\n        ${entityState && supportsFeature(entityState, TodoListEntityFeature.CREATE_TODO_ITEM) ? html`<ha-fab\n              .label=${this.hass.localize(\"ui.panel.todo.add_item\")}\n              extended\n              @click=${this._addItem}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>` : nothing}\n      </ha-two-pane-top-app-bar-fixed>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleEntityPicked\",\n      value: function _handleEntityPicked(ev) {\n        this._entityId = ev.currentTarget.entityId;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addList\",\n      value: async function _addList() {\n        var _this$hass$userData;\n        showConfigFlowDialog(this, {\n          startFlowHandler: \"local_todo\",\n          showAdvanced: (_this$hass$userData = this.hass.userData) === null || _this$hass$userData === void 0 ? void 0 : _this$hass$userData.showAdvanced,\n          manifest: await fetchIntegrationManifest(this.hass, \"local_todo\")\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showMoreInfoDialog\",\n      value: function _showMoreInfoDialog() {\n        if (!this._entityId) {\n          return;\n        }\n        fireEvent(this, \"hass-more-info\", {\n          entityId: this._entityId\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteList\",\n      value: async function _deleteList() {\n        var _getTodoLists$2;\n        if (!this._entityId) {\n          return;\n        }\n        const entityRegistryEntry = await getExtendedEntityRegistryEntry(this.hass, this._entityId);\n        if (entityRegistryEntry.platform !== \"local_todo\") {\n          return;\n        }\n        const entryId = entityRegistryEntry.config_entry_id;\n        if (!entryId) {\n          return;\n        }\n        const confirmed = await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.todo.delete_confirm_title\", {\n            name: this._entityId in this.hass.states ? computeStateName(this.hass.states[this._entityId]) : this._entityId\n          }),\n          text: this.hass.localize(\"ui.panel.todo.delete_confirm_text\"),\n          confirmText: this.hass.localize(\"ui.common.delete\"),\n          dismissText: this.hass.localize(\"ui.common.cancel\"),\n          destructive: true\n        });\n        if (!confirmed) {\n          return;\n        }\n        const result = await deleteConfigEntry(this.hass, entryId);\n        this._entityId = (_getTodoLists$2 = getTodoLists(this.hass)[0]) === null || _getTodoLists$2 === void 0 ? void 0 : _getTodoLists$2.entity_id;\n        if (result.require_restart) {\n          showAlertDialog(this, {\n            text: this.hass.localize(\"ui.panel.todo.restart_confirm\")\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showVoiceCommandDialog\",\n      value: function _showVoiceCommandDialog() {\n        showVoiceCommandDialog(this, this.hass, {\n          pipeline_id: \"last_used\"\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addItem\",\n      value: function _addItem() {\n        showTodoItemEditDialog(this, {\n          entity: this._entityId\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        :host {\n          display: block;\n        }\n        #columns {\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          margin: 8px;\n          padding-bottom: 70px;\n        }\n        .column {\n          flex: 1 0 0;\n          max-width: 500px;\n          min-width: 0;\n        }\n        :host([mobile]) .lists {\n          --mdc-menu-min-width: 100vw;\n        }\n        :host(:not([mobile])) .lists ha-list-item {\n          max-width: calc(100vw - 120px);\n        }\n        :host([mobile]) ha-button-menu {\n          --mdc-shape-medium: 0 0 var(--mdc-shape-medium)\n            var(--mdc-shape-medium);\n        }\n        ha-button-menu {\n          max-width: 100%;\n        }\n        ha-button-menu ha-button {\n          --button-slot-container-overflow: hidden;\n          max-width: 100%;\n          --mdc-theme-primary: currentColor;\n          --mdc-typography-button-text-transform: none;\n          --mdc-typography-button-font-size: var(\n            --mdc-typography-headline6-font-size,\n            1.25rem\n          );\n          --mdc-typography-button-font-weight: var(\n            --mdc-typography-headline6-font-weight,\n            500\n          );\n          --mdc-typography-button-letter-spacing: var(\n            --mdc-typography-headline6-letter-spacing,\n            0.0125em\n          );\n          --mdc-typography-button-line-height: var(\n            --mdc-typography-headline6-line-height,\n            2rem\n          );\n          --button-height: 40px;\n        }\n        ha-button-menu ha-button div {\n          text-overflow: ellipsis;\n          width: 100%;\n          overflow: hidden;\n          white-space: nowrap;\n          display: block;\n        }\n        ha-fab {\n          position: fixed;\n          right: 16px;\n          bottom: 16px;\n          inset-inline-end: 16px;\n          inset-inline-start: initial;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["ResizeController","mdiChevronDown","mdiCommentProcessingOutline","mdiDelete","mdiDotsVertical","mdiInformationOutline","mdiPlus","LitElement","css","html","nothing","customElement","property","state","memoizeOne","isComponentLoaded","storage","fireEvent","computeStateName","navigate","constructUrlCurrentPath","createSearchParam","extractSearchParam","deleteConfigEntry","getExtendedEntityRegistryEntry","fetchIntegrationManifest","TodoListEntityFeature","getTodoLists","showConfigFlowDialog","showAlertDialog","showConfirmationDialog","showVoiceCommandDialog","haStyle","createCardElement","showTodoItemEditDialog","supportsFeature","PanelTodo","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","reflect","callback","entries","_entries$","contentRect","width","_components","hass","connectedCallback","_get","_getPrototypeOf","prototype","call","_mql","window","matchMedia","addListener","_setIsMobile","mobile","matches","computedStyles","getComputedStyle","_headerHeight","Number","getPropertyValue","replace","disconnectedCallback","_this$_mql","removeListener","undefined","ev","willUpdate","changedProperties","hasUpdated","loadFragmentTranslation","urlEntityId","_entityId","states","_getTodoLists$","entity_id","has","_setupTodoElement","_card","entity","render","_this$_showPaneContro","_this$hass$user","_this$hass$user2","entityRegistryEntry","entities","entityState","showPane","_showPaneController","narrow","listItems","map","list","_handleEntityPicked","name","user","is_admin","_addList","localize","_conversation","config","components","_showMoreInfoDialog","_showVoiceCommandDialog","platform","_deleteList","CREATE_TODO_ITEM","_addItem","currentTarget","entityId","_this$hass$userData","startFlowHandler","showAdvanced","userData","manifest","_getTodoLists$2","entryId","config_entry_id","confirmed","title","text","confirmText","dismissText","destructive","result","require_restart","pipeline_id","static","styles"],"sources":["/workspaces/frontend/src/panels/todo/ha-panel-todo.ts"],"sourcesContent":["import { ResizeController } from \"@lit-labs/observers/resize-controller\";\nimport \"@material/mwc-list\";\nimport {\n  mdiChevronDown,\n  mdiCommentProcessingOutline,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiInformationOutline,\n  mdiPlus,\n} from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeStateName } from \"../../common/entity/compute_state_name\";\nimport { navigate } from \"../../common/navigate\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport {\n  createSearchParam,\n  extractSearchParam,\n} from \"../../common/url/search-params\";\nimport \"../../components/ha-button\";\nimport \"../../components/ha-fab\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-list-item\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-state-icon\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-two-pane-top-app-bar-fixed\";\nimport { deleteConfigEntry } from \"../../data/config_entries\";\nimport { getExtendedEntityRegistryEntry } from \"../../data/entity_registry\";\nimport { fetchIntegrationManifest } from \"../../data/integration\";\nimport { TodoListEntityFeature, getTodoLists } from \"../../data/todo\";\nimport { showConfigFlowDialog } from \"../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../dialogs/generic/show-dialog-box\";\nimport { showVoiceCommandDialog } from \"../../dialogs/voice-command-dialog/show-ha-voice-command-dialog\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { HuiErrorCard } from \"../lovelace/cards/hui-error-card\";\nimport { createCardElement } from \"../lovelace/create-element/create-card-element\";\nimport { LovelaceCard } from \"../lovelace/types\";\nimport { showTodoItemEditDialog } from \"./show-dialog-todo-item-editor\";\nimport { supportsFeature } from \"../../common/entity/supports-feature\";\n\n@customElement(\"ha-panel-todo\")\nclass PanelTodo extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean, reflect: true }) public mobile = false;\n\n  @state() private _card?: LovelaceCard | HuiErrorCard;\n\n  @storage({\n    key: \"selectedTodoEntity\",\n    state: true,\n  })\n  private _entityId?: string;\n\n  private _headerHeight = 56;\n\n  private _showPaneController = new ResizeController(this, {\n    callback: (entries) => entries[0]?.contentRect.width > 750,\n  });\n\n  private _mql?: MediaQueryList;\n\n  private _conversation = memoizeOne((_components) =>\n    isComponentLoaded(this.hass, \"conversation\")\n  );\n\n  public connectedCallback() {\n    super.connectedCallback();\n    this._mql = window.matchMedia(\n      \"(max-width: 450px), all and (max-height: 500px)\"\n    );\n    this._mql.addListener(this._setIsMobile);\n    this.mobile = this._mql.matches;\n    const computedStyles = getComputedStyle(this);\n    this._headerHeight = Number(\n      computedStyles.getPropertyValue(\"--header-height\").replace(\"px\", \"\")\n    );\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._mql?.removeListener(this._setIsMobile!);\n    this._mql = undefined;\n  }\n\n  private _setIsMobile = (ev: MediaQueryListEvent) => {\n    this.mobile = ev.matches;\n  };\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    if (!this.hasUpdated) {\n      this.hass.loadFragmentTranslation(\"lovelace\");\n\n      const urlEntityId = extractSearchParam(\"entity_id\");\n      if (urlEntityId) {\n        this._entityId = urlEntityId;\n      } else {\n        if (this._entityId && !(this._entityId in this.hass.states)) {\n          this._entityId = undefined;\n        }\n        if (!this._entityId) {\n          this._entityId = getTodoLists(this.hass)[0]?.entity_id;\n        }\n      }\n    }\n\n    if (changedProperties.has(\"_entityId\") || !this.hasUpdated) {\n      this._setupTodoElement();\n    }\n\n    if (changedProperties.has(\"hass\") && this._card) {\n      this._card.hass = this.hass;\n    }\n  }\n\n  private _setupTodoElement(): void {\n    if (!this._entityId) {\n      this._card = undefined;\n      navigate(constructUrlCurrentPath(\"\"), { replace: true });\n      return;\n    }\n    navigate(\n      constructUrlCurrentPath(createSearchParam({ entity_id: this._entityId })),\n      { replace: true }\n    );\n    this._card = createCardElement({\n      type: \"todo-list\",\n      entity: this._entityId,\n    }) as LovelaceCard;\n    this._card.hass = this.hass;\n  }\n\n  protected render(): TemplateResult {\n    const entityRegistryEntry = this._entityId\n      ? this.hass.entities[this._entityId]\n      : undefined;\n    const entityState = this._entityId\n      ? this.hass.states[this._entityId]\n      : undefined;\n    const showPane = this._showPaneController.value ?? !this.narrow;\n    const listItems = getTodoLists(this.hass).map(\n      (list) =>\n        html`<ha-list-item\n          graphic=\"icon\"\n          @click=${this._handleEntityPicked}\n          .entityId=${list.entity_id}\n          .activated=${list.entity_id === this._entityId}\n        >\n          <ha-state-icon\n            .stateObj=${list}\n            .hass=${this.hass}\n            slot=\"graphic\"\n          ></ha-state-icon\n          >${list.name}\n        </ha-list-item> `\n    );\n    return html`\n      <ha-two-pane-top-app-bar-fixed .pane=${showPane} footer>\n        <ha-menu-button\n          slot=\"navigationIcon\"\n          .hass=${this.hass}\n          .narrow=${this.narrow}\n        ></ha-menu-button>\n        <div slot=\"title\">\n          ${!showPane\n            ? html`<ha-button-menu\n                class=\"lists\"\n                activatable\n                fixed\n                .noAnchor=${this.mobile}\n                .y=${this.mobile\n                  ? this._headerHeight / 2\n                  : this._headerHeight / 4}\n                .x=${this.mobile ? 0 : undefined}\n              >\n                <ha-button slot=\"trigger\">\n                  <div>\n                    ${this._entityId\n                      ? entityState\n                        ? computeStateName(entityState)\n                        : this._entityId\n                      : \"\"}\n                  </div>\n                  <ha-svg-icon\n                    slot=\"trailingIcon\"\n                    .path=${mdiChevronDown}\n                  ></ha-svg-icon>\n                </ha-button>\n                ${listItems}\n                ${this.hass.user?.is_admin\n                  ? html`<li divider role=\"separator\"></li>\n                      <ha-list-item graphic=\"icon\" @click=${this._addList}>\n                        <ha-svg-icon\n                          .path=${mdiPlus}\n                          slot=\"graphic\"\n                        ></ha-svg-icon>\n                        ${this.hass.localize(\"ui.panel.todo.create_list\")}\n                      </ha-list-item>`\n                  : nothing}\n              </ha-button-menu>`\n            : this.hass.localize(\"panel.todo\")}\n        </div>\n        <mwc-list slot=\"pane\" activatable>${listItems}</mwc-list>\n        ${showPane && this.hass.user?.is_admin\n          ? html`<ha-list-item\n              graphic=\"icon\"\n              slot=\"pane-footer\"\n              @click=${this._addList}\n            >\n              <ha-svg-icon .path=${mdiPlus} slot=\"graphic\"></ha-svg-icon>\n              ${this.hass.localize(\"ui.panel.todo.create_list\")}\n            </ha-list-item>`\n          : nothing}\n        <ha-button-menu slot=\"actionItems\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${\"\"}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n          ${this._conversation(this.hass.config.components)\n            ? html`<ha-list-item\n                graphic=\"icon\"\n                @click=${this._showMoreInfoDialog}\n                .disabled=${!this._entityId}\n              >\n                <ha-svg-icon .path=${mdiInformationOutline} slot=\"graphic\">\n                </ha-svg-icon>\n                ${this.hass.localize(\"ui.panel.todo.information\")}\n              </ha-list-item>`\n            : nothing}\n          <li divider role=\"separator\"></li>\n          <ha-list-item graphic=\"icon\" @click=${this._showVoiceCommandDialog}>\n            <ha-svg-icon .path=${mdiCommentProcessingOutline} slot=\"graphic\">\n            </ha-svg-icon>\n            ${this.hass.localize(\"ui.panel.todo.assist\")}\n          </ha-list-item>\n          ${entityRegistryEntry?.platform === \"local_todo\"\n            ? html` <li divider role=\"separator\"></li>\n                <ha-list-item\n                  graphic=\"icon\"\n                  @click=${this._deleteList}\n                  class=\"warning\"\n                  .disabled=${!this._entityId}\n                >\n                  <ha-svg-icon\n                    .path=${mdiDelete}\n                    slot=\"graphic\"\n                    class=\"warning\"\n                  >\n                  </ha-svg-icon>\n                  ${this.hass.localize(\"ui.panel.todo.delete_list\")}\n                </ha-list-item>`\n            : nothing}\n        </ha-button-menu>\n        <div id=\"columns\">\n          <div class=\"column\">${this._card}</div>\n        </div>\n        ${entityState &&\n        supportsFeature(entityState, TodoListEntityFeature.CREATE_TODO_ITEM)\n          ? html`<ha-fab\n              .label=${this.hass.localize(\"ui.panel.todo.add_item\")}\n              extended\n              @click=${this._addItem}\n            >\n              <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n            </ha-fab>`\n          : nothing}\n      </ha-two-pane-top-app-bar-fixed>\n    `;\n  }\n\n  private _handleEntityPicked(ev) {\n    this._entityId = ev.currentTarget.entityId;\n  }\n\n  private async _addList(): Promise<void> {\n    showConfigFlowDialog(this, {\n      startFlowHandler: \"local_todo\",\n      showAdvanced: this.hass.userData?.showAdvanced,\n      manifest: await fetchIntegrationManifest(this.hass, \"local_todo\"),\n    });\n  }\n\n  private _showMoreInfoDialog(): void {\n    if (!this._entityId) {\n      return;\n    }\n    fireEvent(this, \"hass-more-info\", { entityId: this._entityId });\n  }\n\n  private async _deleteList(): Promise<void> {\n    if (!this._entityId) {\n      return;\n    }\n\n    const entityRegistryEntry = await getExtendedEntityRegistryEntry(\n      this.hass,\n      this._entityId\n    );\n\n    if (entityRegistryEntry.platform !== \"local_todo\") {\n      return;\n    }\n\n    const entryId = entityRegistryEntry.config_entry_id;\n\n    if (!entryId) {\n      return;\n    }\n\n    const confirmed = await showConfirmationDialog(this, {\n      title: this.hass.localize(\"ui.panel.todo.delete_confirm_title\", {\n        name:\n          this._entityId in this.hass.states\n            ? computeStateName(this.hass.states[this._entityId])\n            : this._entityId,\n      }),\n      text: this.hass.localize(\"ui.panel.todo.delete_confirm_text\"),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      destructive: true,\n    });\n\n    if (!confirmed) {\n      return;\n    }\n    const result = await deleteConfigEntry(this.hass, entryId);\n\n    this._entityId = getTodoLists(this.hass)[0]?.entity_id;\n\n    if (result.require_restart) {\n      showAlertDialog(this, {\n        text: this.hass.localize(\"ui.panel.todo.restart_confirm\"),\n      });\n    }\n  }\n\n  private _showVoiceCommandDialog(): void {\n    showVoiceCommandDialog(this, this.hass, { pipeline_id: \"last_used\" });\n  }\n\n  private _addItem() {\n    showTodoItemEditDialog(this, { entity: this._entityId! });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n        }\n        #columns {\n          display: flex;\n          flex-direction: row;\n          justify-content: center;\n          margin: 8px;\n          padding-bottom: 70px;\n        }\n        .column {\n          flex: 1 0 0;\n          max-width: 500px;\n          min-width: 0;\n        }\n        :host([mobile]) .lists {\n          --mdc-menu-min-width: 100vw;\n        }\n        :host(:not([mobile])) .lists ha-list-item {\n          max-width: calc(100vw - 120px);\n        }\n        :host([mobile]) ha-button-menu {\n          --mdc-shape-medium: 0 0 var(--mdc-shape-medium)\n            var(--mdc-shape-medium);\n        }\n        ha-button-menu {\n          max-width: 100%;\n        }\n        ha-button-menu ha-button {\n          --button-slot-container-overflow: hidden;\n          max-width: 100%;\n          --mdc-theme-primary: currentColor;\n          --mdc-typography-button-text-transform: none;\n          --mdc-typography-button-font-size: var(\n            --mdc-typography-headline6-font-size,\n            1.25rem\n          );\n          --mdc-typography-button-font-weight: var(\n            --mdc-typography-headline6-font-weight,\n            500\n          );\n          --mdc-typography-button-letter-spacing: var(\n            --mdc-typography-headline6-letter-spacing,\n            0.0125em\n          );\n          --mdc-typography-button-line-height: var(\n            --mdc-typography-headline6-line-height,\n            2rem\n          );\n          --button-height: 40px;\n        }\n        ha-button-menu ha-button div {\n          text-overflow: ellipsis;\n          width: 100%;\n          overflow: hidden;\n          white-space: nowrap;\n          display: block;\n        }\n        ha-fab {\n          position: fixed;\n          right: 16px;\n          bottom: 16px;\n          inset-inline-end: 16px;\n          inset-inline-start: initial;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-todo\": PanelTodo;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,gBAAgB,QAAQ,uCAAuC;AACxE,OAAO,oBAAoB;AAAC,MAAAC,cAAA;AAAA,MAAAC,2BAAA;AAAA,MAAAC,SAAA;AAAA,MAAAC,eAAA;AAAA,MAAAC,qBAAA;AAAA,MAAAC,OAAA;AAS5B,SAEEC,UAAU,EAGVC,GAAG,EACHC,IAAI,EACJC,OAAO,QACF,KAAK;AACZ,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,iBAAiB,QAAQ,yCAAyC;AAC3E,SAASC,OAAO,QAAQ,iCAAiC;AACzD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,gBAAgB,QAAQ,wCAAwC;AACzE,SAASC,QAAQ,QAAQ,uBAAuB;AAChD,SAASC,uBAAuB,QAAQ,gCAAgC;AACxE,SACEC,iBAAiB,EACjBC,kBAAkB,QACb,gCAAgC;AACvC,OAAO,4BAA4B;AACnC,OAAO,yBAAyB;AAChC,OAAO,iCAAiC;AACxC,OAAO,+BAA+B;AACtC,OAAO,iCAAiC;AACxC,OAAO,gCAAgC;AACvC,OAAO,8BAA8B;AACrC,OAAO,gDAAgD;AACvD,SAASC,iBAAiB,QAAQ,2BAA2B;AAC7D,SAASC,8BAA8B,QAAQ,4BAA4B;AAC3E,SAASC,wBAAwB,QAAQ,wBAAwB;AACjE,SAASC,qBAAqB,EAAEC,YAAY,QAAQ,iBAAiB;AACrE,SAASC,oBAAoB,QAAQ,mDAAmD;AACxF,SACEC,eAAe,EACfC,sBAAsB,QACjB,uCAAuC;AAC9C,SAASC,sBAAsB,QAAQ,iEAAiE;AACxG,SAASC,OAAO,QAAQ,wBAAwB;AAGhD,SAASC,iBAAiB,QAAQ,gDAAgD;AAElF,SAASC,sBAAsB,QAAQ,gCAAgC;AACvE,SAASC,eAAe,QAAQ,sCAAsC;AAAC,IAGjEC,SAAS,GAAAC,SAAA,EADd1B,aAAa,CAAC,eAAe,CAAC,aAAA2B,WAAA,EAAAC,WAAA;EAA/B,MACMH,SAAS,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA4XnC;EAAC;IAAAI,CAAA,EA5XKN,SAAS;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACZjC,QAAQ,CAAC;QAAEkC,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjC,QAAQ,CAAC;QAAEqC,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAJ,GAAA;MAAAC,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEhEjC,QAAQ,CAAC;QAAEqC,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAJ,GAAA;MAAAC,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEhEhC,KAAK,CAAC,CAAC;MAAAkC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEP7B,OAAO,CAAC;QACP+B,GAAG,EAAE,oBAAoB;QACzBlC,KAAK,EAAE;MACT,CAAC,CAAC;MAAAkC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAGsB,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEI,IAAIhD,gBAAgB,CAAC,IAAI,EAAE;UACvDoD,QAAQ,EAAGC,OAAO;YAAA,IAAAC,SAAA;YAAA,OAAK,EAAAA,SAAA,GAAAD,OAAO,CAAC,CAAC,CAAC,cAAAC,SAAA,uBAAVA,SAAA,CAAYC,WAAW,CAACC,KAAK,IAAG,GAAG;UAAA;QAC5D,CAAC,CAAC;MAAA;IAAA;MAAAZ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAIsBlC,UAAU,CAAE2C,WAAW,IAC7C1C,iBAAiB,CAAC,IAAI,CAAC2C,IAAI,EAAE,cAAc,CAC7C,CAAC;MAAA;IAAA;MAAAd,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAW,kBAAA,EAA2B;QACzBC,IAAA,CAAAC,eAAA,CA5BEzB,SAAS,CAAA0B,SAAA,8BAAAC,IAAA;QA6BX,IAAI,CAACC,IAAI,GAAGC,MAAM,CAACC,UAAU,CAC3B,iDACF,CAAC;QACD,IAAI,CAACF,IAAI,CAACG,WAAW,CAAC,IAAI,CAACC,YAAY,CAAC;QACxC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACL,IAAI,CAACM,OAAO;QAC/B,MAAMC,cAAc,GAAGC,gBAAgB,CAAC,IAAI,CAAC;QAC7C,IAAI,CAACC,aAAa,GAAGC,MAAM,CACzBH,cAAc,CAACI,gBAAgB,CAAC,iBAAiB,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,EAAE,CACrE,CAAC;MACH;IAAC;MAAAhC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA6B,qBAAA,EAA8B;QAAA,IAAAC,UAAA;QAC5BlB,IAAA,CAAAC,eAAA,CAzCEzB,SAAS,CAAA0B,SAAA,iCAAAC,IAAA;QA0CX,CAAAe,UAAA,OAAI,CAACd,IAAI,cAAAc,UAAA,eAATA,UAAA,CAAWC,cAAc,CAAC,IAAI,CAACX,YAAa,CAAC;QAC7C,IAAI,CAACJ,IAAI,GAAGgB,SAAS;MACvB;IAAC;MAAApC,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEuBiC,EAAuB,IAAK;UAClD,IAAI,CAACZ,MAAM,GAAGY,EAAE,CAACX,OAAO;QAC1B,CAAC;MAAA;IAAA;MAAA1B,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAkC,WAAqBC,iBAAiC,EAAQ;QAC5DvB,IAAA,CAAAC,eAAA,CAnDEzB,SAAS,CAAA0B,SAAA,uBAAAC,IAAA,OAmDMoB,iBAAiB;QAElC,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UACpB,IAAI,CAAC1B,IAAI,CAAC2B,uBAAuB,CAAC,UAAU,CAAC;UAE7C,MAAMC,WAAW,GAAGhE,kBAAkB,CAAC,WAAW,CAAC;UACnD,IAAIgE,WAAW,EAAE;YACf,IAAI,CAACC,SAAS,GAAGD,WAAW;UAC9B,CAAC,MAAM;YACL,IAAI,IAAI,CAACC,SAAS,IAAI,EAAE,IAAI,CAACA,SAAS,IAAI,IAAI,CAAC7B,IAAI,CAAC8B,MAAM,CAAC,EAAE;cAC3D,IAAI,CAACD,SAAS,GAAGP,SAAS;YAC5B;YACA,IAAI,CAAC,IAAI,CAACO,SAAS,EAAE;cAAA,IAAAE,cAAA;cACnB,IAAI,CAACF,SAAS,IAAAE,cAAA,GAAG9D,YAAY,CAAC,IAAI,CAAC+B,IAAI,CAAC,CAAC,CAAC,CAAC,cAAA+B,cAAA,uBAA1BA,cAAA,CAA4BC,SAAS;YACxD;UACF;QACF;QAEA,IAAIP,iBAAiB,CAACQ,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAACP,UAAU,EAAE;UAC1D,IAAI,CAACQ,iBAAiB,CAAC,CAAC;QAC1B;QAEA,IAAIT,iBAAiB,CAACQ,GAAG,CAAC,MAAM,CAAC,IAAI,IAAI,CAACE,KAAK,EAAE;UAC/C,IAAI,CAACA,KAAK,CAACnC,IAAI,GAAG,IAAI,CAACA,IAAI;QAC7B;MACF;IAAC;MAAAd,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA4C,kBAAA,EAAkC;QAChC,IAAI,CAAC,IAAI,CAACL,SAAS,EAAE;UACnB,IAAI,CAACM,KAAK,GAAGb,SAAS;UACtB7D,QAAQ,CAACC,uBAAuB,CAAC,EAAE,CAAC,EAAE;YAAEwD,OAAO,EAAE;UAAK,CAAC,CAAC;UACxD;QACF;QACAzD,QAAQ,CACNC,uBAAuB,CAACC,iBAAiB,CAAC;UAAEqE,SAAS,EAAE,IAAI,CAACH;QAAU,CAAC,CAAC,CAAC,EACzE;UAAEX,OAAO,EAAE;QAAK,CAClB,CAAC;QACD,IAAI,CAACiB,KAAK,GAAG5D,iBAAiB,CAAC;UAC7BgB,IAAI,EAAE,WAAW;UACjB6C,MAAM,EAAE,IAAI,CAACP;QACf,CAAC,CAAiB;QAClB,IAAI,CAACM,KAAK,CAACnC,IAAI,GAAG,IAAI,CAACA,IAAI;MAC7B;IAAC;MAAAd,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA+C,OAAA,EAAmC;QAAA,IAAAC,qBAAA,EAAAC,eAAA,EAAAC,gBAAA;QACjC,MAAMC,mBAAmB,GAAG,IAAI,CAACZ,SAAS,GACtC,IAAI,CAAC7B,IAAI,CAAC0C,QAAQ,CAAC,IAAI,CAACb,SAAS,CAAC,GAClCP,SAAS;QACb,MAAMqB,WAAW,GAAG,IAAI,CAACd,SAAS,GAC9B,IAAI,CAAC7B,IAAI,CAAC8B,MAAM,CAAC,IAAI,CAACD,SAAS,CAAC,GAChCP,SAAS;QACb,MAAMsB,QAAQ,IAAAN,qBAAA,GAAG,IAAI,CAACO,mBAAmB,CAACvD,KAAK,cAAAgD,qBAAA,cAAAA,qBAAA,GAAI,CAAC,IAAI,CAACQ,MAAM;QAC/D,MAAMC,SAAS,GAAG9E,YAAY,CAAC,IAAI,CAAC+B,IAAI,CAAC,CAACgD,GAAG,CAC1CC,IAAI,IACHlG,IAAK;AACb;AACA,mBAAmB,IAAI,CAACmG,mBAAoB;AAC5C,sBAAsBD,IAAI,CAACjB,SAAU;AACrC,uBAAuBiB,IAAI,CAACjB,SAAS,KAAK,IAAI,CAACH,SAAU;AACzD;AACA;AACA,wBAAwBoB,IAAK;AAC7B,oBAAoB,IAAI,CAACjD,IAAK;AAC9B;AACA;AACA,aAAaiD,IAAI,CAACE,IAAK;AACvB,yBACI,CAAC;QACD,OAAOpG,IAAK;AAChB,6CAA6C6F,QAAS;AACtD;AACA;AACA,kBAAkB,IAAI,CAAC5C,IAAK;AAC5B,oBAAoB,IAAI,CAAC8C,MAAO;AAChC;AACA;AACA,YAAY,CAACF,QAAQ,GACP7F,IAAK;AACnB;AACA;AACA;AACA,4BAA4B,IAAI,CAAC4D,MAAO;AACxC,qBAAqB,IAAI,CAACA,MAAM,GACZ,IAAI,CAACI,aAAa,GAAG,CAAC,GACtB,IAAI,CAACA,aAAa,GAAG,CAAE;AAC3C,qBAAqB,IAAI,CAACJ,MAAM,GAAG,CAAC,GAAGW,SAAU;AACjD;AACA;AACA;AACA,sBAAsB,IAAI,CAACO,SAAS,GACZc,WAAW,GACTnF,gBAAgB,CAACmF,WAAW,CAAC,GAC7B,IAAI,CAACd,SAAS,GAChB,EAAG;AAC3B;AACA;AACA;AACA,4BAA4BtF,cAAe;AAC3C;AACA;AACA,kBAAkBwG,SAAU;AAC5B,kBAAkB,CAAAR,eAAA,OAAI,CAACvC,IAAI,CAACoD,IAAI,cAAAb,eAAA,eAAdA,eAAA,CAAgBc,QAAQ,GACtBtG,IAAK;AACzB,4DAA4D,IAAI,CAACuG,QAAS;AAC1E;AACA,kCAAkC1G,OAAQ;AAC1C;AACA;AACA,0BAA0B,IAAI,CAACoD,IAAI,CAACuD,QAAQ,CAAC,2BAA2B,CAAE;AAC1E,sCAAsC,GAClBvG,OAAQ;AAC5B,gCAAgC,GAClB,IAAI,CAACgD,IAAI,CAACuD,QAAQ,CAAC,YAAY,CAAE;AAC/C;AACA,4CAA4CR,SAAU;AACtD,UAAUH,QAAQ,KAAAJ,gBAAA,GAAI,IAAI,CAACxC,IAAI,CAACoD,IAAI,cAAAZ,gBAAA,eAAdA,gBAAA,CAAgBa,QAAQ,GAClCtG,IAAK;AACjB;AACA;AACA,uBAAuB,IAAI,CAACuG,QAAS;AACrC;AACA,mCAAmC1G,OAAQ;AAC3C,gBAAgB,IAAI,CAACoD,IAAI,CAACuD,QAAQ,CAAC,2BAA2B,CAAE;AAChE,4BAA4B,GAChBvG,OAAQ;AACpB;AACA;AACA;AACA,qBAAqB,EAAG;AACxB,oBAAoBN,eAAgB;AACpC;AACA,YAAY,IAAI,CAAC8G,aAAa,CAAC,IAAI,CAACxD,IAAI,CAACyD,MAAM,CAACC,UAAU,CAAC,GAC7C3G,IAAK;AACnB;AACA,yBAAyB,IAAI,CAAC4G,mBAAoB;AAClD,4BAA4B,CAAC,IAAI,CAAC9B,SAAU;AAC5C;AACA,qCAAqClF,qBAAsB;AAC3D;AACA,kBAAkB,IAAI,CAACqD,IAAI,CAACuD,QAAQ,CAAC,2BAA2B,CAAE;AAClE,8BAA8B,GAChBvG,OAAQ;AACtB;AACA,gDAAgD,IAAI,CAAC4G,uBAAwB;AAC7E,iCAAiCpH,2BAA4B;AAC7D;AACA,cAAc,IAAI,CAACwD,IAAI,CAACuD,QAAQ,CAAC,sBAAsB,CAAE;AACzD;AACA,YAAY,CAAAd,mBAAmB,aAAnBA,mBAAmB,uBAAnBA,mBAAmB,CAAEoB,QAAQ,MAAK,YAAY,GAC5C9G,IAAK;AACnB;AACA;AACA,2BAA2B,IAAI,CAAC+G,WAAY;AAC5C;AACA,8BAA8B,CAAC,IAAI,CAACjC,SAAU;AAC9C;AACA;AACA,4BAA4BpF,SAAU;AACtC;AACA;AACA;AACA;AACA,oBAAoB,IAAI,CAACuD,IAAI,CAACuD,QAAQ,CAAC,2BAA2B,CAAE;AACpE,gCAAgC,GAClBvG,OAAQ;AACtB;AACA;AACA,gCAAgC,IAAI,CAACmF,KAAM;AAC3C;AACA,UAAUQ,WAAW,IACblE,eAAe,CAACkE,WAAW,EAAE3E,qBAAqB,CAAC+F,gBAAgB,CAAC,GAChEhH,IAAK;AACjB,uBAAuB,IAAI,CAACiD,IAAI,CAACuD,QAAQ,CAAC,wBAAwB,CAAE;AACpE;AACA,uBAAuB,IAAI,CAACS,QAAS;AACrC;AACA,+CAA+CpH,OAAQ;AACvD,sBAAsB,GACVI,OAAQ;AACpB;AACA,KAAK;MACH;IAAC;MAAAkC,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA4D,oBAA4B3B,EAAE,EAAE;QAC9B,IAAI,CAACM,SAAS,GAAGN,EAAE,CAAC0C,aAAa,CAACC,QAAQ;MAC5C;IAAC;MAAAhF,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAgE,SAAA,EAAwC;QAAA,IAAAa,mBAAA;QACtCjG,oBAAoB,CAAC,IAAI,EAAE;UACzBkG,gBAAgB,EAAE,YAAY;UAC9BC,YAAY,GAAAF,mBAAA,GAAE,IAAI,CAACnE,IAAI,CAACsE,QAAQ,cAAAH,mBAAA,uBAAlBA,mBAAA,CAAoBE,YAAY;UAC9CE,QAAQ,EAAE,MAAMxG,wBAAwB,CAAC,IAAI,CAACiC,IAAI,EAAE,YAAY;QAClE,CAAC,CAAC;MACJ;IAAC;MAAAd,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAqE,oBAAA,EAAoC;QAClC,IAAI,CAAC,IAAI,CAAC9B,SAAS,EAAE;UACnB;QACF;QACAtE,SAAS,CAAC,IAAI,EAAE,gBAAgB,EAAE;UAAE2G,QAAQ,EAAE,IAAI,CAACrC;QAAU,CAAC,CAAC;MACjE;IAAC;MAAA3C,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAwE,YAAA,EAA2C;QAAA,IAAAU,eAAA;QACzC,IAAI,CAAC,IAAI,CAAC3C,SAAS,EAAE;UACnB;QACF;QAEA,MAAMY,mBAAmB,GAAG,MAAM3E,8BAA8B,CAC9D,IAAI,CAACkC,IAAI,EACT,IAAI,CAAC6B,SACP,CAAC;QAED,IAAIY,mBAAmB,CAACoB,QAAQ,KAAK,YAAY,EAAE;UACjD;QACF;QAEA,MAAMY,OAAO,GAAGhC,mBAAmB,CAACiC,eAAe;QAEnD,IAAI,CAACD,OAAO,EAAE;UACZ;QACF;QAEA,MAAME,SAAS,GAAG,MAAMvG,sBAAsB,CAAC,IAAI,EAAE;UACnDwG,KAAK,EAAE,IAAI,CAAC5E,IAAI,CAACuD,QAAQ,CAAC,oCAAoC,EAAE;YAC9DJ,IAAI,EACF,IAAI,CAACtB,SAAS,IAAI,IAAI,CAAC7B,IAAI,CAAC8B,MAAM,GAC9BtE,gBAAgB,CAAC,IAAI,CAACwC,IAAI,CAAC8B,MAAM,CAAC,IAAI,CAACD,SAAS,CAAC,CAAC,GAClD,IAAI,CAACA;UACb,CAAC,CAAC;UACFgD,IAAI,EAAE,IAAI,CAAC7E,IAAI,CAACuD,QAAQ,CAAC,mCAAmC,CAAC;UAC7DuB,WAAW,EAAE,IAAI,CAAC9E,IAAI,CAAEuD,QAAQ,CAAC,kBAAkB,CAAC;UACpDwB,WAAW,EAAE,IAAI,CAAC/E,IAAI,CAAEuD,QAAQ,CAAC,kBAAkB,CAAC;UACpDyB,WAAW,EAAE;QACf,CAAC,CAAC;QAEF,IAAI,CAACL,SAAS,EAAE;UACd;QACF;QACA,MAAMM,MAAM,GAAG,MAAMpH,iBAAiB,CAAC,IAAI,CAACmC,IAAI,EAAEyE,OAAO,CAAC;QAE1D,IAAI,CAAC5C,SAAS,IAAA2C,eAAA,GAAGvG,YAAY,CAAC,IAAI,CAAC+B,IAAI,CAAC,CAAC,CAAC,CAAC,cAAAwE,eAAA,uBAA1BA,eAAA,CAA4BxC,SAAS;QAEtD,IAAIiD,MAAM,CAACC,eAAe,EAAE;UAC1B/G,eAAe,CAAC,IAAI,EAAE;YACpB0G,IAAI,EAAE,IAAI,CAAC7E,IAAI,CAACuD,QAAQ,CAAC,+BAA+B;UAC1D,CAAC,CAAC;QACJ;MACF;IAAC;MAAArE,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAsE,wBAAA,EAAwC;QACtCvF,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC2B,IAAI,EAAE;UAAEmF,WAAW,EAAE;QAAY,CAAC,CAAC;MACvE;IAAC;MAAAjG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0E,SAAA,EAAmB;QACjBxF,sBAAsB,CAAC,IAAI,EAAE;UAAE4D,MAAM,EAAE,IAAI,CAACP;QAAW,CAAC,CAAC;MAC3D;IAAC;MAAA3C,IAAA;MAAAkG,MAAA;MAAA/F,GAAA;MAAAC,KAAA,EAED,SAAA+F,OAAA,EAAoC;QAClC,OAAO,CACL/G,OAAO,EACPxB,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GA3XqBD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}