{"ast":null,"code":"/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n  /**\n   * To construct a new CacheableResponse instance you must provide at least\n   * one of the `config` properties.\n   *\n   * If both `statuses` and `headers` are specified, then both conditions must\n   * be met for the `Response` to be considered cacheable.\n   *\n   * @param {Object} config\n   * @param {Array<number>} [config.statuses] One or more status codes that a\n   * `Response` can have and be considered cacheable.\n   * @param {Object<string,string>} [config.headers] A mapping of header names\n   * and expected values that a `Response` can have and be considered cacheable.\n   * If multiple headers are provided, only one needs to be present.\n   */\n  constructor(config = {}) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!(config.statuses || config.headers)) {\n        throw new WorkboxError('statuses-or-headers-required', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor'\n        });\n      }\n      if (config.statuses) {\n        assert.isArray(config.statuses, {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.statuses'\n        });\n      }\n      if (config.headers) {\n        assert.isType(config.headers, 'object', {\n          moduleName: 'workbox-cacheable-response',\n          className: 'CacheableResponse',\n          funcName: 'constructor',\n          paramName: 'config.headers'\n        });\n      }\n    }\n    this._statuses = config.statuses;\n    this._headers = config.headers;\n  }\n  /**\n   * Checks a response to see whether it's cacheable or not, based on this\n   * object's configuration.\n   *\n   * @param {Response} response The response whose cacheability is being\n   * checked.\n   * @return {boolean} `true` if the `Response` is cacheable, and `false`\n   * otherwise.\n   */\n  isResponseCacheable(response) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert.isInstance(response, Response, {\n        moduleName: 'workbox-cacheable-response',\n        className: 'CacheableResponse',\n        funcName: 'isResponseCacheable',\n        paramName: 'response'\n      });\n    }\n    let cacheable = true;\n    if (this._statuses) {\n      cacheable = this._statuses.includes(response.status);\n    }\n    if (this._headers && cacheable) {\n      cacheable = Object.keys(this._headers).some(headerName => {\n        return response.headers.get(headerName) === this._headers[headerName];\n      });\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      if (!cacheable) {\n        logger.groupCollapsed(`The request for ` + `'${getFriendlyURL(response.url)}' returned a response that does ` + `not meet the criteria for being cached.`);\n        logger.groupCollapsed(`View cacheability criteria here.`);\n        logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n        logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n        logger.groupEnd();\n        const logFriendlyHeaders = {};\n        response.headers.forEach((value, key) => {\n          logFriendlyHeaders[key] = value;\n        });\n        logger.groupCollapsed(`View response status and headers here.`);\n        logger.log(`Response status: ${response.status}`);\n        logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n        logger.groupEnd();\n        logger.groupCollapsed(`View full response details here.`);\n        logger.log(response.headers);\n        logger.log(response);\n        logger.groupEnd();\n        logger.groupEnd();\n      }\n    }\n    return cacheable;\n  }\n}\nexport { CacheableResponse };","map":{"version":3,"names":["assert","WorkboxError","getFriendlyURL","logger","CacheableResponse","constructor","config","process","env","NODE_ENV","statuses","headers","moduleName","className","funcName","isArray","paramName","isType","_statuses","_headers","isResponseCacheable","response","isInstance","Response","cacheable","includes","status","Object","keys","some","headerName","get","groupCollapsed","url","log","JSON","stringify","groupEnd","logFriendlyHeaders","forEach","value","key"],"sources":["/workspaces/frontend/node_modules/workbox-cacheable-response/CacheableResponse.js"],"sourcesContent":["/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}