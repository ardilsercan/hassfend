{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright (c) 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A mixin that forwards CSS class names to the internal overlay element\n * by setting the `overlayClass` property or `overlay-class` attribute.\n *\n * @polymerMixin\n */\nexport var OverlayClassMixin = function OverlayClassMixin(superclass) {\n  return /*#__PURE__*/function (_superclass) {\n    _inherits(OverlayClassMixinClass, _superclass);\n    function OverlayClassMixinClass() {\n      _classCallCheck(this, OverlayClassMixinClass);\n      return _callSuper(this, OverlayClassMixinClass, arguments);\n    }\n    _createClass(OverlayClassMixinClass, [{\n      key: \"__updateOverlayClassNames\",\n      value: /** @private */\n      function __updateOverlayClassNames(overlayClass, overlayElement) {\n        var _this = this;\n        if (!overlayElement) {\n          return;\n        }\n\n        // Overlay is set but overlayClass is not set\n        if (overlayClass === undefined) {\n          return;\n        }\n        var classList = overlayElement.classList;\n        if (!this.__initialClasses) {\n          this.__initialClasses = new Set(classList);\n        }\n        if (Array.isArray(this.__previousClasses)) {\n          // Remove old classes that no longer apply\n          var classesToRemove = this.__previousClasses.filter(function (name) {\n            return !_this.__initialClasses.has(name);\n          });\n          if (classesToRemove.length > 0) {\n            classList.remove.apply(classList, _toConsumableArray(classesToRemove));\n          }\n        }\n\n        // Add new classes based on the overlayClass\n        var classesToAdd = typeof overlayClass === 'string' ? overlayClass.split(' ') : [];\n        if (classesToAdd.length > 0) {\n          classList.add.apply(classList, _toConsumableArray(classesToAdd));\n        }\n        this.__previousClasses = classesToAdd;\n      }\n    }], [{\n      key: \"properties\",\n      get: function get() {\n        return {\n          /**\n           * A space-delimited list of CSS class names to set on the overlay element.\n           * This property does not affect other CSS class names set manually via JS.\n           *\n           * Note, if the CSS class name was set with this property, clearing it will\n           * remove it from the overlay, even if the same class name was also added\n           * manually, e.g. by using `classList.add()` in the `renderer` function.\n           *\n           * @attr {string} overlay-class\n           */\n          overlayClass: {\n            type: String\n          },\n          /**\n           * An overlay element on which CSS class names are set.\n           *\n           * @protected\n           */\n          _overlayElement: {\n            type: Object\n          }\n        };\n      }\n    }, {\n      key: \"observers\",\n      get: function get() {\n        return ['__updateOverlayClassNames(overlayClass, _overlayElement)'];\n      }\n    }]);\n    return OverlayClassMixinClass;\n  }(superclass);\n};","map":{"version":3,"names":["OverlayClassMixin","superclass","_superclass","_inherits","OverlayClassMixinClass","_classCallCheck","_callSuper","arguments","_createClass","key","value","__updateOverlayClassNames","overlayClass","overlayElement","_this","undefined","classList","__initialClasses","Set","Array","isArray","__previousClasses","classesToRemove","filter","name","has","length","remove","apply","_toConsumableArray","classesToAdd","split","add","get","type","String","_overlayElement","Object"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/component-base/src/overlay-class-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A mixin that forwards CSS class names to the internal overlay element\n * by setting the `overlayClass` property or `overlay-class` attribute.\n *\n * @polymerMixin\n */\nexport const OverlayClassMixin = (superclass) =>\n  class OverlayClassMixinClass extends superclass {\n    static get properties() {\n      return {\n        /**\n         * A space-delimited list of CSS class names to set on the overlay element.\n         * This property does not affect other CSS class names set manually via JS.\n         *\n         * Note, if the CSS class name was set with this property, clearing it will\n         * remove it from the overlay, even if the same class name was also added\n         * manually, e.g. by using `classList.add()` in the `renderer` function.\n         *\n         * @attr {string} overlay-class\n         */\n        overlayClass: {\n          type: String,\n        },\n\n        /**\n         * An overlay element on which CSS class names are set.\n         *\n         * @protected\n         */\n        _overlayElement: {\n          type: Object,\n        },\n      };\n    }\n\n    static get observers() {\n      return ['__updateOverlayClassNames(overlayClass, _overlayElement)'];\n    }\n\n    /** @private */\n    __updateOverlayClassNames(overlayClass, overlayElement) {\n      if (!overlayElement) {\n        return;\n      }\n\n      // Overlay is set but overlayClass is not set\n      if (overlayClass === undefined) {\n        return;\n      }\n\n      const { classList } = overlayElement;\n\n      if (!this.__initialClasses) {\n        this.__initialClasses = new Set(classList);\n      }\n\n      if (Array.isArray(this.__previousClasses)) {\n        // Remove old classes that no longer apply\n        const classesToRemove = this.__previousClasses.filter((name) => !this.__initialClasses.has(name));\n        if (classesToRemove.length > 0) {\n          classList.remove(...classesToRemove);\n        }\n      }\n\n      // Add new classes based on the overlayClass\n      const classesToAdd = typeof overlayClass === 'string' ? overlayClass.split(' ') : [];\n      if (classesToAdd.length > 0) {\n        classList.add(...classesToAdd);\n      }\n\n      this.__previousClasses = classesToAdd;\n    }\n  };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiBA,CAAIC,UAAU;EAAA,8BAAAC,WAAA;IAAAC,SAAA,CAAAC,sBAAA,EAAAF,WAAA;IAAA,SAAAE,uBAAA;MAAAC,eAAA,OAAAD,sBAAA;MAAA,OAAAE,UAAA,OAAAF,sBAAA,EAAAG,SAAA;IAAA;IAAAC,YAAA,CAAAJ,sBAAA;MAAAK,GAAA;MAAAC,KAAA,EAiCxC;MACA,SAAAC,0BAA0BC,YAAY,EAAEC,cAAc,EAAE;QAAA,IAAAC,KAAA;QACtD,IAAI,CAACD,cAAc,EAAE;UACnB;QACF;;QAEA;QACA,IAAID,YAAY,KAAKG,SAAS,EAAE;UAC9B;QACF;QAEA,IAAQC,SAAS,GAAKH,cAAc,CAA5BG,SAAS;QAEjB,IAAI,CAAC,IAAI,CAACC,gBAAgB,EAAE;UAC1B,IAAI,CAACA,gBAAgB,GAAG,IAAIC,GAAG,CAACF,SAAS,CAAC;QAC5C;QAEA,IAAIG,KAAK,CAACC,OAAO,CAAC,IAAI,CAACC,iBAAiB,CAAC,EAAE;UACzC;UACA,IAAMC,eAAe,GAAG,IAAI,CAACD,iBAAiB,CAACE,MAAM,CAAC,UAACC,IAAI;YAAA,OAAK,CAACV,KAAI,CAACG,gBAAgB,CAACQ,GAAG,CAACD,IAAI,CAAC;UAAA,EAAC;UACjG,IAAIF,eAAe,CAACI,MAAM,GAAG,CAAC,EAAE;YAC9BV,SAAS,CAACW,MAAM,CAAAC,KAAA,CAAhBZ,SAAS,EAAAa,kBAAA,CAAWP,eAAe,EAAC;UACtC;QACF;;QAEA;QACA,IAAMQ,YAAY,GAAG,OAAOlB,YAAY,KAAK,QAAQ,GAAGA,YAAY,CAACmB,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;QACpF,IAAID,YAAY,CAACJ,MAAM,GAAG,CAAC,EAAE;UAC3BV,SAAS,CAACgB,GAAG,CAAAJ,KAAA,CAAbZ,SAAS,EAAAa,kBAAA,CAAQC,YAAY,EAAC;QAChC;QAEA,IAAI,CAACT,iBAAiB,GAAGS,YAAY;MACvC;IAAC;MAAArB,GAAA;MAAAwB,GAAA,EA/DD,SAAAA,IAAA,EAAwB;QACtB,OAAO;UACL;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;UACQrB,YAAY,EAAE;YACZsB,IAAI,EAAEC;UACR,CAAC;UAED;AACR;AACA;AACA;AACA;UACQC,eAAe,EAAE;YACfF,IAAI,EAAEG;UACR;QACF,CAAC;MACH;IAAC;MAAA5B,GAAA;MAAAwB,GAAA,EAED,SAAAA,IAAA,EAAuB;QACrB,OAAO,CAAC,0DAA0D,CAAC;MACrE;IAAC;IAAA,OAAA7B,sBAAA;EAAA,EA9BkCH,UAAU;AAAA,CAiE9C"},"metadata":{},"sourceType":"module","externalDependencies":[]}