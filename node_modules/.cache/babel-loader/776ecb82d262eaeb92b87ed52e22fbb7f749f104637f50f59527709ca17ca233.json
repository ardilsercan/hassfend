{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\n// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport var slugify = function slugify(value) {\n  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"_\";\n  var a = \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·\";\n  var b = \"aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz\".concat(delimiter);\n  var p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n  var slugified;\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value.toString().toLowerCase().replace(p, function (c) {\n      return b.charAt(a.indexOf(c));\n    }) // Replace special characters\n    .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n    .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n    .replace(new RegExp(\"(\".concat(delimiter, \")\\\\1+\"), \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n    .replace(new RegExp(\"^\".concat(delimiter, \"+\")), \"\") // Trim delimiter from start of text\n    .replace(new RegExp(\"\".concat(delimiter, \"+$\")), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n  return slugified;\n};","map":{"version":3,"names":["slugify","value","delimiter","arguments","length","undefined","a","b","concat","p","RegExp","split","join","slugified","toString","toLowerCase","replace","c","charAt","indexOf"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/string/slugify.ts"],"sourcesContent":["// https://gist.github.com/hagemann/382adfc57adbd5af078dc93feef01fe1\nexport const slugify = (value: string, delimiter = \"_\") => {\n  const a =\n    \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìıİłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·\";\n  const b = `aaaaaaaaaacccddeeeeeeeegghiiiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz${delimiter}`;\n  const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\n\n  let slugified;\n\n  if (value === \"\") {\n    slugified = \"\";\n  } else {\n    slugified = value\n      .toString()\n      .toLowerCase()\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\n      .replace(/(\\d),(?=\\d)/g, \"$1\") // Remove Commas between numbers\n      .replace(/[^a-z0-9]+/g, delimiter) // Replace all non-word characters\n      .replace(new RegExp(`(${delimiter})\\\\1+`, \"g\"), \"$1\") // Replace multiple delimiters with single delimiter\n      .replace(new RegExp(`^${delimiter}+`), \"\") // Trim delimiter from start of text\n      .replace(new RegExp(`${delimiter}+$`), \"\"); // Trim delimiter from end of text\n\n    if (slugified === \"\") {\n      slugified = \"unknown\";\n    }\n  }\n\n  return slugified;\n};\n"],"mappings":";;;;;;;;AAAA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAOA,CAAIC,KAAa,EAAsB;EAAA,IAApBC,SAAS,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,GAAG;EACpD,IAAMG,CAAC,GACL,8EAA8E;EAChF,IAAMC,CAAC,iFAAAC,MAAA,CAAiFN,SAAS,CAAE;EACnG,IAAMO,CAAC,GAAG,IAAIC,MAAM,CAACJ,CAAC,CAACK,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;EAEhD,IAAIC,SAAS;EAEb,IAAIZ,KAAK,KAAK,EAAE,EAAE;IAChBY,SAAS,GAAG,EAAE;EAChB,CAAC,MAAM;IACLA,SAAS,GAAGZ,KAAK,CACda,QAAQ,CAAC,CAAC,CACVC,WAAW,CAAC,CAAC,CACbC,OAAO,CAACP,CAAC,EAAE,UAACQ,CAAC;MAAA,OAAKV,CAAC,CAACW,MAAM,CAACZ,CAAC,CAACa,OAAO,CAACF,CAAC,CAAC,CAAC;IAAA,EAAC,CAAC;IAAA,CAC1CD,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;IAAA,CAC9BA,OAAO,CAAC,aAAa,EAAEd,SAAS,CAAC,CAAC;IAAA,CAClCc,OAAO,CAAC,IAAIN,MAAM,KAAAF,MAAA,CAAKN,SAAS,YAAS,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IAAA,CACrDc,OAAO,CAAC,IAAIN,MAAM,KAAAF,MAAA,CAAKN,SAAS,MAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IAAA,CAC1Cc,OAAO,CAAC,IAAIN,MAAM,IAAAF,MAAA,CAAIN,SAAS,OAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;IAE9C,IAAIW,SAAS,KAAK,EAAE,EAAE;MACpBA,SAAS,GAAG,SAAS;IACvB;EACF;EAEA,OAAOA,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}