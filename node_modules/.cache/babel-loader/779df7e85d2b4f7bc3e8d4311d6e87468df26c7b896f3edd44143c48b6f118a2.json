{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { addListener, removeListener } from '../utils/gestures.js';\n\n/**\n * Element class mixin that provides API for adding Polymer's cross-platform\n * gesture events to nodes.\n *\n * The API is designed to be compatible with override points implemented\n * in `TemplateStamp` such that declarative event listeners in\n * templates will support gesture events when this mixin is applied along with\n * `TemplateStamp`.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides API for adding Polymer's\n *   cross-platform gesture events to nodes\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport var GestureEventListeners = dedupingMixin(function (superClass) {\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_GestureEventListeners}\n   */\n  var GestureEventListeners = /*#__PURE__*/function (_superClass) {\n    _inherits(GestureEventListeners, _superClass);\n    function GestureEventListeners() {\n      _classCallCheck(this, GestureEventListeners);\n      return _callSuper(this, GestureEventListeners, arguments);\n    }\n    _createClass(GestureEventListeners, [{\n      key: \"_addEventListenerToNode\",\n      value:\n      /**\n       * Add the event listener to the node if it is a gestures event.\n       *\n       * @param {!EventTarget} node Node to add event listener to\n       * @param {string} eventName Name of event\n       * @param {function(!Event):void} handler Listener function to add\n       * @return {void}\n       * @override\n       */\n      function _addEventListenerToNode(node, eventName, handler) {\n        if (!addListener(node, eventName, handler)) {\n          _get(_getPrototypeOf(GestureEventListeners.prototype), \"_addEventListenerToNode\", this).call(this, node, eventName, handler);\n        }\n      }\n\n      /**\n       * Remove the event listener to the node if it is a gestures event.\n       *\n       * @param {!EventTarget} node Node to remove event listener from\n       * @param {string} eventName Name of event\n       * @param {function(!Event):void} handler Listener function to remove\n       * @return {void}\n       * @override\n       */\n    }, {\n      key: \"_removeEventListenerFromNode\",\n      value: function _removeEventListenerFromNode(node, eventName, handler) {\n        if (!removeListener(node, eventName, handler)) {\n          _get(_getPrototypeOf(GestureEventListeners.prototype), \"_removeEventListenerFromNode\", this).call(this, node, eventName, handler);\n        }\n      }\n    }]);\n    return GestureEventListeners;\n  }(superClass);\n  return GestureEventListeners;\n});","map":{"version":3,"names":["dedupingMixin","addListener","removeListener","GestureEventListeners","superClass","_superClass","_inherits","_classCallCheck","_callSuper","arguments","_createClass","key","value","_addEventListenerToNode","node","eventName","handler","_get","_getPrototypeOf","prototype","call","_removeEventListenerFromNode"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/polymer/lib/mixins/gesture-event-listeners.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { dedupingMixin } from '../utils/mixin.js';\nimport { addListener, removeListener } from '../utils/gestures.js';\n\n/**\n * Element class mixin that provides API for adding Polymer's cross-platform\n * gesture events to nodes.\n *\n * The API is designed to be compatible with override points implemented\n * in `TemplateStamp` such that declarative event listeners in\n * templates will support gesture events when this mixin is applied along with\n * `TemplateStamp`.\n *\n * @mixinFunction\n * @polymer\n * @summary Element class mixin that provides API for adding Polymer's\n *   cross-platform gesture events to nodes\n * @template T\n * @param {function(new:T)} superClass Class to apply mixin to.\n * @return {function(new:T)} superClass with mixin applied.\n */\nexport const GestureEventListeners = dedupingMixin((superClass) => {\n  /**\n   * @polymer\n   * @mixinClass\n   * @implements {Polymer_GestureEventListeners}\n   */\n  class GestureEventListeners extends superClass {\n    /**\n     * Add the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     * @override\n     */\n    _addEventListenerToNode(node, eventName, handler) {\n      if (!addListener(node, eventName, handler)) {\n        super._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n\n    /**\n     * Remove the event listener to the node if it is a gestures event.\n     *\n     * @param {!EventTarget} node Node to remove event listener from\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to remove\n     * @return {void}\n     * @override\n     */\n    _removeEventListenerFromNode(node, eventName, handler) {\n      if (!removeListener(node, eventName, handler)) {\n        super._removeEventListenerFromNode(node, eventName, handler);\n      }\n    }\n  }\n\n  return GestureEventListeners;\n});\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,kBAAkB;AAEzB,SAASA,aAAa,QAAQ,mBAAmB;AACjD,SAASC,WAAW,EAAEC,cAAc,QAAQ,sBAAsB;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,qBAAqB,GAAGH,aAAa,CAAC,UAACI,UAAU,EAAK;EACjE;AACF;AACA;AACA;AACA;EAJE,IAKMD,qBAAqB,0BAAAE,WAAA;IAAAC,SAAA,CAAAH,qBAAA,EAAAE,WAAA;IAAA,SAAAF,sBAAA;MAAAI,eAAA,OAAAJ,qBAAA;MAAA,OAAAK,UAAA,OAAAL,qBAAA,EAAAM,SAAA;IAAA;IAAAC,YAAA,CAAAP,qBAAA;MAAAQ,GAAA;MAAAC,KAAA;MACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACI,SAAAC,wBAAwBC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;QAChD,IAAI,CAACf,WAAW,CAACa,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC,EAAE;UAC1CC,IAAA,CAAAC,eAAA,CAAAf,qBAAA,CAAAgB,SAAA,oCAAAC,IAAA,OAA8BN,IAAI,EAAEC,SAAS,EAAEC,OAAO;QACxD;MACF;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IARI;MAAAL,GAAA;MAAAC,KAAA,EASA,SAAAS,6BAA6BP,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;QACrD,IAAI,CAACd,cAAc,CAACY,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC,EAAE;UAC7CC,IAAA,CAAAC,eAAA,CAAAf,qBAAA,CAAAgB,SAAA,yCAAAC,IAAA,OAAmCN,IAAI,EAAEC,SAAS,EAAEC,OAAO;QAC7D;MACF;IAAC;IAAA,OAAAb,qBAAA;EAAA,EA7BiCC,UAAU;EAgC9C,OAAOD,qBAAqB;AAC9B,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}