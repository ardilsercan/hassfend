{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiDownload = \"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\";\nconst mdiFilterRemove = \"M14.76,20.83L17.6,18L14.76,15.17L16.17,13.76L19,16.57L21.83,13.76L23.24,15.17L20.43,18L23.24,20.83L21.83,22.24L19,19.4L16.17,22.24L14.76,20.83M12,12V19.88C12.04,20.18 11.94,20.5 11.71,20.71C11.32,21.1 10.69,21.1 10.3,20.71L8.29,18.7C8.06,18.47 7.96,18.16 8,17.87V12H7.97L2.21,4.62C1.87,4.19 1.95,3.56 2.38,3.22C2.57,3.08 2.78,3 3,3V3H17V3C17.22,3 17.43,3.08 17.62,3.22C18.05,3.56 18.13,4.19 17.79,4.62L12.03,12H12Z\";\nimport { differenceInHours } from \"date-fns/esm\";\nimport { LitElement, css, html } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { navigate } from \"../../common/navigate\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport { createSearchParam, extractSearchParamsObject, removeSearchParam } from \"../../common/url/search-params\";\nimport { MIN_TIME_BETWEEN_UPDATES } from \"../../components/chart/ha-chart-base\";\nimport \"../../components/chart/state-history-charts\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-icon-button-arrow-prev\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-target-picker\";\nimport \"../../components/ha-top-app-bar-fixed\";\nimport { getAreaDeviceLookup, getAreaEntityLookup } from \"../../data/area_registry\";\nimport { getDeviceEntityLookup, subscribeDeviceRegistry } from \"../../data/device_registry\";\nimport { subscribeEntityRegistry } from \"../../data/entity_registry\";\nimport { computeHistory, subscribeHistory, computeGroupKey } from \"../../data/history\";\nimport { fetchStatistics } from \"../../data/recorder\";\nimport { getSensorNumericDeviceClasses } from \"../../data/sensor\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../resources/styles\";\nimport { fileDownload } from \"../../util/file_download\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\nlet HaPanelHistory = _decorate(null, function (_initialize, _SubscribeMixin) {\n  class HaPanelHistory extends _SubscribeMixin {\n    constructor() {\n      super();\n      _initialize(this);\n      const start = new Date();\n      start.setHours(start.getHours() - 1, 0, 0, 0);\n      this._startDate = start;\n      const end = new Date();\n      end.setHours(end.getHours() + 2, 0, 0, 0);\n      this._endDate = end;\n    }\n  }\n  return {\n    F: HaPanelHistory,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        reflect: true,\n        type: Boolean\n      })],\n      key: \"rtl\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_startDate\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_endDate\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [storage({\n        key: \"historyPickedValue\",\n        state: true,\n        subscribe: false\n      })],\n      key: \"_targetPickerValue\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_isLoading\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_stateHistory\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_mungedStateHistory\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_statisticsHistory\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceEntityLookup\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_areaEntityLookup\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_areaDeviceLookup\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_showBack\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"state-history-charts\")],\n      key: \"_stateHistoryCharts\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_subscribed\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_interval\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(HaPanelHistory.prototype), \"connectedCallback\", this).call(this);\n        if (this.hasUpdated) {\n          this._getHistory();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(HaPanelHistory.prototype), \"disconnectedCallback\", this).call(this);\n        this._unsubscribeHistory();\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        return [subscribeEntityRegistry(this.hass.connection, entities => {\n          this._deviceEntityLookup = getDeviceEntityLookup(entities);\n          this._areaEntityLookup = getAreaEntityLookup(entities);\n        }), subscribeDeviceRegistry(this.hass.connection, devices => {\n          this._areaDeviceLookup = getAreaDeviceLookup(devices);\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_goBack\",\n      value: function _goBack() {\n        history.back();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const entitiesSelected = this._getEntityIds().length > 0;\n        return html`\n      <ha-top-app-bar-fixed>\n        ${this._showBack ? html`\n              <ha-icon-button-arrow-prev\n                slot=\"navigationIcon\"\n                @click=${this._goBack}\n              ></ha-icon-button-arrow-prev>\n            ` : html`\n              <ha-menu-button\n                slot=\"navigationIcon\"\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `}\n        <div slot=\"title\">${this.hass.localize(\"panel.history\")}</div>\n        ${entitiesSelected ? html`\n              <ha-icon-button\n                slot=\"actionItems\"\n                @click=${this._removeAll}\n                .disabled=${this._isLoading}\n                .path=${mdiFilterRemove}\n                .label=${this.hass.localize(\"ui.panel.history.remove_all\")}\n              ></ha-icon-button>\n            ` : \"\"}\n        <ha-icon-button\n          slot=\"actionItems\"\n          @click=${this._downloadHistory}\n          .disabled=${this._isLoading}\n          .path=${mdiDownload}\n          .label=${this.hass.localize(\"ui.panel.history.download_data\")}\n        ></ha-icon-button>\n\n        <div class=\"flex content\">\n          <div class=\"filters\">\n            <ha-date-range-picker\n              .hass=${this.hass}\n              ?disabled=${this._isLoading}\n              .startDate=${this._startDate}\n              .endDate=${this._endDate}\n              extendedPresets\n              @change=${this._dateRangeChanged}\n            ></ha-date-range-picker>\n            <ha-target-picker\n              .hass=${this.hass}\n              .value=${this._targetPickerValue}\n              .disabled=${this._isLoading}\n              addOnTop\n              @value-changed=${this._targetsChanged}\n            ></ha-target-picker>\n          </div>\n          ${this._isLoading ? html`<div class=\"progress-wrapper\">\n                <ha-circular-progress indeterminate></ha-circular-progress>\n              </div>` : !entitiesSelected ? html`<div class=\"start-search\">\n                  ${this.hass.localize(\"ui.panel.history.start_search\")}\n                </div>` : html`\n                  <state-history-charts\n                    .hass=${this.hass}\n                    .historyData=${this._mungedStateHistory}\n                    .startTime=${this._startDate}\n                    .endTime=${this._endDate}\n                  >\n                  </state-history-charts>\n                `}\n        </div>\n      </ha-top-app-bar-fixed>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"mergeHistoryResults\",\n      value: function mergeHistoryResults(ltsResult, historyResult) {\n        const result = {\n          ...historyResult,\n          line: []\n        };\n        const lookup = {};\n        for (const item of historyResult.line) {\n          const key = computeGroupKey(item.unit, item.device_class, true);\n          if (key) {\n            lookup[key] = {\n              historyItem: item\n            };\n          }\n        }\n        for (const item of ltsResult.line) {\n          const key = computeGroupKey(item.unit, item.device_class, true);\n          if (!key) {\n            continue;\n          }\n          if (key in lookup) {\n            lookup[key].ltsItem = item;\n          } else {\n            lookup[key] = {\n              ltsItem: item\n            };\n          }\n        }\n        for (const {\n          historyItem,\n          ltsItem\n        } of Object.values(lookup)) {\n          if (!historyItem || !ltsItem) {\n            // Only one result has data for this item, so just push it directly instead of merging.\n            result.line.push(historyItem || ltsItem);\n            continue;\n          }\n          const newLineItem = {\n            ...historyItem,\n            data: []\n          };\n          const entities = new Set([...historyItem.data.map(d => d.entity_id), ...ltsItem.data.map(d => d.entity_id)]);\n          for (const entity of entities) {\n            var _historyDataItem$stat;\n            const historyDataItem = historyItem.data.find(d => d.entity_id === entity);\n            const ltsDataItem = ltsItem.data.find(d => d.entity_id === entity);\n            if (!historyDataItem || !ltsDataItem) {\n              newLineItem.data.push(historyDataItem || ltsDataItem);\n              continue;\n            }\n\n            // Remove statistics that overlap with states\n            const oldestState = ((_historyDataItem$stat = historyDataItem.states[0]) === null || _historyDataItem$stat === void 0 ? void 0 : _historyDataItem$stat.last_changed) ||\n            // If no state, fall back to the max last changed of the last statistics (so approve all)\n            ltsDataItem.statistics[ltsDataItem.statistics.length - 1].last_changed + 1;\n            const statistics = [];\n            for (const s of ltsDataItem.statistics) {\n              if (s.last_changed >= oldestState) {\n                break;\n              }\n              statistics.push(s);\n            }\n            newLineItem.data.push(statistics.length === 0 ?\n            // All statistics overlapped with states, so just push the states\n            historyDataItem : {\n              ...historyDataItem,\n              statistics\n            });\n          }\n          result.line.push(newLineItem);\n        }\n        return result;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(HaPanelHistory.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"_stateHistory\") || changedProps.has(\"_statisticsHistory\") || changedProps.has(\"_startDate\") || changedProps.has(\"_endDate\") || changedProps.has(\"_targetPickerValue\")) {\n          if (this._statisticsHistory && this._stateHistory) {\n            this._mungedStateHistory = this.mergeHistoryResults(this._statisticsHistory, this._stateHistory);\n          } else {\n            this._mungedStateHistory = this._stateHistory || this._statisticsHistory;\n          }\n        }\n        if (this.hasUpdated) {\n          return;\n        }\n        const searchParams = extractSearchParamsObject();\n        const entityIds = searchParams.entity_id;\n        const deviceIds = searchParams.device_id;\n        const areaIds = searchParams.area_id;\n        if (entityIds || deviceIds || areaIds) {\n          this._targetPickerValue = {};\n        }\n        if (entityIds) {\n          const splitIds = entityIds.split(\",\");\n          this._targetPickerValue.entity_id = splitIds;\n        }\n        if (deviceIds) {\n          const splitIds = deviceIds.split(\",\");\n          this._targetPickerValue.device_id = splitIds;\n        }\n        if (areaIds) {\n          const splitIds = areaIds.split(\",\");\n          this._targetPickerValue.area_id = splitIds;\n        }\n        const startDate = searchParams.start_date;\n        if (startDate) {\n          this._startDate = new Date(startDate);\n        }\n        const endDate = searchParams.end_date;\n        if (endDate) {\n          this._endDate = new Date(endDate);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HaPanelHistory.prototype), \"firstUpdated\", this).call(this, changedProps);\n        const searchParams = extractSearchParamsObject();\n        if (searchParams.back === \"1\" && history.length > 1) {\n          this._showBack = true;\n          navigate(constructUrlCurrentPath(removeSearchParam(\"back\")), {\n            replace: true\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        if (changedProps.has(\"_startDate\") || changedProps.has(\"_endDate\") || changedProps.has(\"_targetPickerValue\") || !this._stateHistory && (changedProps.has(\"_deviceEntityLookup\") || changedProps.has(\"_areaEntityLookup\") || changedProps.has(\"_areaDeviceLookup\"))) {\n          this._getHistory();\n          this._getStats();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_removeAll\",\n      value: function _removeAll() {\n        this._targetPickerValue = {};\n        this._updatePath();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getStats\",\n      value: async function _getStats() {\n        var _this$_statisticsHist;\n        const statisticIds = this._getEntityIds();\n        if (statisticIds.length === 0) {\n          this._statisticsHistory = undefined;\n          return;\n        }\n        const statistics = await fetchStatistics(this.hass, this._startDate, this._endDate, statisticIds, \"hour\", undefined, [\"mean\", \"state\"]);\n\n        // Maintain the statistic id ordering\n        const orderedStatistics = {};\n        statisticIds.forEach(id => {\n          if (id in statistics) {\n            orderedStatistics[id] = statistics[id];\n          }\n        });\n\n        // Convert statistics to HistoryResult format\n        const statsHistoryStates = {};\n        Object.entries(orderedStatistics).forEach(([key, value]) => {\n          const entityHistoryStates = value.map(e => ({\n            s: e.mean != null ? e.mean.toString() : e.state.toString(),\n            lc: e.start / 1000,\n            a: {},\n            lu: e.start / 1000\n          }));\n          statsHistoryStates[key] = entityHistoryStates;\n        });\n        const {\n          numeric_device_classes: sensorNumericDeviceClasses\n        } = await getSensorNumericDeviceClasses(this.hass);\n        this._statisticsHistory = computeHistory(this.hass, statsHistoryStates, this.hass.localize, sensorNumericDeviceClasses, true);\n        // remap states array to statistics array\n        (((_this$_statisticsHist = this._statisticsHistory) === null || _this$_statisticsHist === void 0 ? void 0 : _this$_statisticsHist.line) || []).forEach(item => {\n          item.data.forEach(data => {\n            data.statistics = data.states;\n            data.states = [];\n          });\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getHistory\",\n      value: async function _getHistory() {\n        const entityIds = this._getEntityIds();\n        if (entityIds.length === 0) {\n          this._stateHistory = undefined;\n          return;\n        }\n        this._isLoading = true;\n        if (this._subscribed) {\n          this._unsubscribeHistory();\n        }\n        const now = new Date();\n        const {\n          numeric_device_classes: sensorNumericDeviceClasses\n        } = await getSensorNumericDeviceClasses(this.hass);\n        this._subscribed = subscribeHistory(this.hass, history => {\n          this._isLoading = false;\n          this._stateHistory = computeHistory(this.hass, history, this.hass.localize, sensorNumericDeviceClasses, true);\n        }, this._startDate, this._endDate, entityIds);\n        this._subscribed.catch(() => {\n          this._isLoading = false;\n          this._unsubscribeHistory();\n        });\n        if (this._endDate > now) {\n          this._setRedrawTimer();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setRedrawTimer\",\n      value: function _setRedrawTimer() {\n        clearInterval(this._interval);\n        const now = new Date();\n        const end = this._endDate > now ? now : this._endDate;\n        const timespan = differenceInHours(end, this._startDate);\n        this._interval = window.setInterval(() => {\n          var _this$_stateHistoryCh;\n          return (_this$_stateHistoryCh = this._stateHistoryCharts) === null || _this$_stateHistoryCh === void 0 ? void 0 : _this$_stateHistoryCh.requestUpdate();\n        },\n        // if timespan smaller than 1 hour, update every 10 seconds, smaller than 5 hours, redraw every minute, otherwise every 5 minutes\n        timespan < 2 ? 10000 : timespan < 10 ? 60 * 1000 : MIN_TIME_BETWEEN_UPDATES);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_unsubscribeHistory\",\n      value: function _unsubscribeHistory() {\n        if (this._interval) {\n          clearInterval(this._interval);\n          this._interval = undefined;\n        }\n        if (this._subscribed) {\n          this._subscribed.then(unsub => unsub === null || unsub === void 0 ? void 0 : unsub());\n          this._subscribed = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getEntityIds\",\n      value: function _getEntityIds() {\n        return this.__getEntityIds(this._targetPickerValue, this._deviceEntityLookup, this._areaEntityLookup, this._areaDeviceLookup);\n      }\n    }, {\n      kind: \"field\",\n      key: \"__getEntityIds\",\n      value() {\n        return memoizeOne((targetPickerValue, deviceEntityLookup, areaEntityLookup, areaDeviceLookup) => {\n          if (!targetPickerValue || deviceEntityLookup === undefined || areaEntityLookup === undefined || areaDeviceLookup === undefined) {\n            return [];\n          }\n          const entityIds = new Set();\n          let {\n            area_id: searchingAreaId,\n            device_id: searchingDeviceId,\n            entity_id: searchingEntityId\n          } = targetPickerValue;\n          if (searchingAreaId) {\n            searchingAreaId = ensureArray(searchingAreaId);\n            for (const singleSearchingAreaId of searchingAreaId) {\n              const foundEntities = areaEntityLookup[singleSearchingAreaId];\n              if (foundEntities !== null && foundEntities !== void 0 && foundEntities.length) {\n                for (const foundEntity of foundEntities) {\n                  if (foundEntity.entity_category === null) {\n                    entityIds.add(foundEntity.entity_id);\n                  }\n                }\n              }\n              const foundDevices = areaDeviceLookup[singleSearchingAreaId];\n              if (!(foundDevices !== null && foundDevices !== void 0 && foundDevices.length)) {\n                continue;\n              }\n              for (const foundDevice of foundDevices) {\n                const foundDeviceEntities = deviceEntityLookup[foundDevice.id];\n                if (!(foundDeviceEntities !== null && foundDeviceEntities !== void 0 && foundDeviceEntities.length)) {\n                  continue;\n                }\n                for (const foundDeviceEntity of foundDeviceEntities) {\n                  if ((!foundDeviceEntity.area_id || foundDeviceEntity.area_id === singleSearchingAreaId) && foundDeviceEntity.entity_category === null) {\n                    entityIds.add(foundDeviceEntity.entity_id);\n                  }\n                }\n              }\n            }\n          }\n          if (searchingDeviceId) {\n            searchingDeviceId = ensureArray(searchingDeviceId);\n            for (const singleSearchingDeviceId of searchingDeviceId) {\n              const foundEntities = deviceEntityLookup[singleSearchingDeviceId];\n              if (!(foundEntities !== null && foundEntities !== void 0 && foundEntities.length)) {\n                continue;\n              }\n              for (const foundEntity of foundEntities) {\n                if (foundEntity.entity_category === null) {\n                  entityIds.add(foundEntity.entity_id);\n                }\n              }\n            }\n          }\n          if (searchingEntityId) {\n            searchingEntityId = ensureArray(searchingEntityId);\n            for (const singleSearchingEntityId of searchingEntityId) {\n              entityIds.add(singleSearchingEntityId);\n            }\n          }\n          return [...entityIds];\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dateRangeChanged\",\n      value: function _dateRangeChanged(ev) {\n        this._startDate = ev.detail.startDate;\n        const endDate = ev.detail.endDate;\n        if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n          endDate.setDate(endDate.getDate() + 1);\n          endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n        }\n        this._endDate = endDate;\n        this._updatePath();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_targetsChanged\",\n      value: function _targetsChanged(ev) {\n        this._targetPickerValue = ev.detail.value;\n        this._updatePath();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updatePath\",\n      value: function _updatePath() {\n        const params = {};\n        if (this._targetPickerValue.entity_id) {\n          params.entity_id = ensureArray(this._targetPickerValue.entity_id).join(\",\");\n        }\n        if (this._targetPickerValue.area_id) {\n          params.area_id = ensureArray(this._targetPickerValue.area_id).join(\",\");\n        }\n        if (this._targetPickerValue.device_id) {\n          params.device_id = ensureArray(this._targetPickerValue.device_id).join(\",\");\n        }\n        if (this._startDate) {\n          params.start_date = this._startDate.toISOString();\n        }\n        if (this._endDate) {\n          params.end_date = this._endDate.toISOString();\n        }\n        navigate(`/history?${createSearchParam(params)}`, {\n          replace: true\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_downloadHistory\",\n      value: function _downloadHistory() {\n        const entities = this._getEntityIds();\n        if (entities.length === 0 || !this._mungedStateHistory) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.history.download_data_error\"),\n            text: this.hass.localize(\"ui.panel.history.error_no_data\"),\n            warning: true\n          });\n          return;\n        }\n        const csv = [\"entity_id,state,last_changed\\n\"];\n        const formatDate = number => new Date(number).toISOString();\n        for (const line of this._mungedStateHistory.line) {\n          for (const entity of line.data) {\n            const entityId = entity.entity_id;\n            if (entity.statistics) {\n              for (const s of entity.statistics) {\n                csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n              }\n            }\n            for (const s of entity.states) {\n              csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n            }\n          }\n        }\n        for (const timeline of this._mungedStateHistory.timeline) {\n          const entityId = timeline.entity_id;\n          for (const s of timeline.data) {\n            csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n          }\n        }\n        const blob = new Blob(csv, {\n          type: \"text/csv\"\n        });\n        const url = window.URL.createObjectURL(blob);\n        fileDownload(url, \"history.csv\");\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        .content {\n          padding: 0 16px 16px;\n          padding-bottom: max(env(safe-area-inset-bottom), 16px);\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        .progress-wrapper {\n          position: relative;\n          display: flex;\n          align-items: center;\n          flex-direction: column;\n          padding: 16px;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-start;\n          margin-top: 16px;\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          max-width: 100%;\n          direction: var(--direction);\n        }\n\n        @media all and (max-width: 1025px) {\n          .filters {\n            flex-direction: column;\n          }\n          ha-date-range-picker {\n            margin-right: 0;\n            margin-inline-end: 0;\n            margin-inline-start: initial;\n            width: 100%;\n          }\n        }\n\n        .start-search {\n          padding-top: 16px;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n      `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));\ncustomElements.define(\"ha-panel-history\", HaPanelHistory);","map":{"version":3,"names":["differenceInHours","LitElement","css","html","property","query","state","memoizeOne","ensureArray","storage","navigate","constructUrlCurrentPath","createSearchParam","extractSearchParamsObject","removeSearchParam","MIN_TIME_BETWEEN_UPDATES","getAreaDeviceLookup","getAreaEntityLookup","getDeviceEntityLookup","subscribeDeviceRegistry","subscribeEntityRegistry","computeHistory","subscribeHistory","computeGroupKey","fetchStatistics","getSensorNumericDeviceClasses","SubscribeMixin","haStyle","fileDownload","showAlertDialog","HaPanelHistory","_decorate","_initialize","_SubscribeMixin","constructor","start","Date","setHours","getHours","_startDate","end","_endDate","F","d","kind","decorators","attribute","key","value","reflect","type","Boolean","subscribe","connectedCallback","_get","_getPrototypeOf","prototype","call","hasUpdated","_getHistory","disconnectedCallback","_unsubscribeHistory","hassSubscribe","hass","connection","entities","_deviceEntityLookup","_areaEntityLookup","devices","_areaDeviceLookup","_goBack","history","back","render","entitiesSelected","_getEntityIds","length","_showBack","narrow","localize","_removeAll","_isLoading","mdiFilterRemove","_downloadHistory","mdiDownload","_dateRangeChanged","_targetPickerValue","_targetsChanged","_mungedStateHistory","mergeHistoryResults","ltsResult","historyResult","result","line","lookup","item","unit","device_class","historyItem","ltsItem","Object","values","push","newLineItem","data","Set","map","entity_id","entity","_historyDataItem$stat","historyDataItem","find","ltsDataItem","oldestState","states","last_changed","statistics","s","willUpdate","changedProps","has","_statisticsHistory","_stateHistory","searchParams","entityIds","deviceIds","device_id","areaIds","area_id","splitIds","split","startDate","start_date","endDate","end_date","firstUpdated","replace","updated","_getStats","_updatePath","_this$_statisticsHist","statisticIds","undefined","orderedStatistics","forEach","id","statsHistoryStates","entries","entityHistoryStates","e","mean","toString","lc","a","lu","numeric_device_classes","sensorNumericDeviceClasses","_subscribed","now","catch","_setRedrawTimer","clearInterval","_interval","timespan","window","setInterval","_this$_stateHistoryCh","_stateHistoryCharts","requestUpdate","then","unsub","__getEntityIds","targetPickerValue","deviceEntityLookup","areaEntityLookup","areaDeviceLookup","searchingAreaId","searchingDeviceId","searchingEntityId","singleSearchingAreaId","foundEntities","foundEntity","entity_category","add","foundDevices","foundDevice","foundDeviceEntities","foundDeviceEntity","singleSearchingDeviceId","singleSearchingEntityId","ev","detail","getMinutes","setDate","getDate","setMilliseconds","getMilliseconds","params","join","toISOString","title","text","warning","csv","formatDate","number","entityId","timeline","blob","Blob","url","URL","createObjectURL","static","styles","customElements","define"],"sources":["/workspaces/frontend/src/panels/history/ha-panel-history.ts"],"sourcesContent":["import { mdiDownload, mdiFilterRemove } from \"@mdi/js\";\nimport { differenceInHours } from \"date-fns/esm\";\nimport {\n  HassServiceTarget,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket/dist/types\";\nimport { LitElement, PropertyValues, css, html } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../common/array/ensure-array\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { navigate } from \"../../common/navigate\";\nimport { constructUrlCurrentPath } from \"../../common/url/construct-url\";\nimport {\n  createSearchParam,\n  extractSearchParamsObject,\n  removeSearchParam,\n} from \"../../common/url/search-params\";\nimport { MIN_TIME_BETWEEN_UPDATES } from \"../../components/chart/ha-chart-base\";\nimport \"../../components/chart/state-history-charts\";\nimport type { StateHistoryCharts } from \"../../components/chart/state-history-charts\";\nimport \"../../components/ha-circular-progress\";\nimport \"../../components/ha-date-range-picker\";\nimport \"../../components/ha-icon-button\";\nimport \"../../components/ha-icon-button-arrow-prev\";\nimport \"../../components/ha-menu-button\";\nimport \"../../components/ha-target-picker\";\nimport \"../../components/ha-top-app-bar-fixed\";\nimport {\n  AreaDeviceLookup,\n  AreaEntityLookup,\n  getAreaDeviceLookup,\n  getAreaEntityLookup,\n} from \"../../data/area_registry\";\nimport {\n  DeviceEntityLookup,\n  getDeviceEntityLookup,\n  subscribeDeviceRegistry,\n} from \"../../data/device_registry\";\nimport { subscribeEntityRegistry } from \"../../data/entity_registry\";\nimport {\n  HistoryResult,\n  computeHistory,\n  subscribeHistory,\n  HistoryStates,\n  EntityHistoryState,\n  LineChartUnit,\n  computeGroupKey,\n  LineChartState,\n} from \"../../data/history\";\nimport { fetchStatistics, Statistics } from \"../../data/recorder\";\nimport { getSensorNumericDeviceClasses } from \"../../data/sensor\";\nimport { SubscribeMixin } from \"../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../resources/styles\";\nimport { HomeAssistant } from \"../../types\";\nimport { fileDownload } from \"../../util/file_download\";\nimport { showAlertDialog } from \"../../dialogs/generic/show-dialog-box\";\n\nclass HaPanelHistory extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) hass!: HomeAssistant;\n\n  @property({ reflect: true, type: Boolean }) public narrow = false;\n\n  @property({ reflect: true, type: Boolean }) rtl = false;\n\n  @state() private _startDate: Date;\n\n  @state() private _endDate: Date;\n\n  @storage({\n    key: \"historyPickedValue\",\n    state: true,\n    subscribe: false,\n  })\n  private _targetPickerValue: HassServiceTarget = {};\n\n  @state() private _isLoading = false;\n\n  @state() private _stateHistory?: HistoryResult;\n\n  private _mungedStateHistory?: HistoryResult;\n\n  @state() private _statisticsHistory?: HistoryResult;\n\n  @state() private _deviceEntityLookup?: DeviceEntityLookup;\n\n  @state() private _areaEntityLookup?: AreaEntityLookup;\n\n  @state() private _areaDeviceLookup?: AreaDeviceLookup;\n\n  @state()\n  private _showBack?: boolean;\n\n  @query(\"state-history-charts\")\n  private _stateHistoryCharts?: StateHistoryCharts;\n\n  private _subscribed?: Promise<UnsubscribeFunc>;\n\n  private _interval?: number;\n\n  public constructor() {\n    super();\n\n    const start = new Date();\n    start.setHours(start.getHours() - 1, 0, 0, 0);\n    this._startDate = start;\n\n    const end = new Date();\n    end.setHours(end.getHours() + 2, 0, 0, 0);\n    this._endDate = end;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated) {\n      this._getHistory();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeHistory();\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      subscribeEntityRegistry(this.hass.connection!, (entities) => {\n        this._deviceEntityLookup = getDeviceEntityLookup(entities);\n        this._areaEntityLookup = getAreaEntityLookup(entities);\n      }),\n      subscribeDeviceRegistry(this.hass.connection!, (devices) => {\n        this._areaDeviceLookup = getAreaDeviceLookup(devices);\n      }),\n    ];\n  }\n\n  private _goBack(): void {\n    history.back();\n  }\n\n  protected render() {\n    const entitiesSelected = this._getEntityIds().length > 0;\n    return html`\n      <ha-top-app-bar-fixed>\n        ${this._showBack\n          ? html`\n              <ha-icon-button-arrow-prev\n                slot=\"navigationIcon\"\n                @click=${this._goBack}\n              ></ha-icon-button-arrow-prev>\n            `\n          : html`\n              <ha-menu-button\n                slot=\"navigationIcon\"\n                .hass=${this.hass}\n                .narrow=${this.narrow}\n              ></ha-menu-button>\n            `}\n        <div slot=\"title\">${this.hass.localize(\"panel.history\")}</div>\n        ${entitiesSelected\n          ? html`\n              <ha-icon-button\n                slot=\"actionItems\"\n                @click=${this._removeAll}\n                .disabled=${this._isLoading}\n                .path=${mdiFilterRemove}\n                .label=${this.hass.localize(\"ui.panel.history.remove_all\")}\n              ></ha-icon-button>\n            `\n          : \"\"}\n        <ha-icon-button\n          slot=\"actionItems\"\n          @click=${this._downloadHistory}\n          .disabled=${this._isLoading}\n          .path=${mdiDownload}\n          .label=${this.hass.localize(\"ui.panel.history.download_data\")}\n        ></ha-icon-button>\n\n        <div class=\"flex content\">\n          <div class=\"filters\">\n            <ha-date-range-picker\n              .hass=${this.hass}\n              ?disabled=${this._isLoading}\n              .startDate=${this._startDate}\n              .endDate=${this._endDate}\n              extendedPresets\n              @change=${this._dateRangeChanged}\n            ></ha-date-range-picker>\n            <ha-target-picker\n              .hass=${this.hass}\n              .value=${this._targetPickerValue}\n              .disabled=${this._isLoading}\n              addOnTop\n              @value-changed=${this._targetsChanged}\n            ></ha-target-picker>\n          </div>\n          ${this._isLoading\n            ? html`<div class=\"progress-wrapper\">\n                <ha-circular-progress indeterminate></ha-circular-progress>\n              </div>`\n            : !entitiesSelected\n              ? html`<div class=\"start-search\">\n                  ${this.hass.localize(\"ui.panel.history.start_search\")}\n                </div>`\n              : html`\n                  <state-history-charts\n                    .hass=${this.hass}\n                    .historyData=${this._mungedStateHistory}\n                    .startTime=${this._startDate}\n                    .endTime=${this._endDate}\n                  >\n                  </state-history-charts>\n                `}\n        </div>\n      </ha-top-app-bar-fixed>\n    `;\n  }\n\n  private mergeHistoryResults(\n    ltsResult: HistoryResult,\n    historyResult: HistoryResult\n  ): HistoryResult {\n    const result: HistoryResult = { ...historyResult, line: [] };\n\n    const lookup: Record<\n      string,\n      { historyItem?: LineChartUnit; ltsItem?: LineChartUnit }\n    > = {};\n\n    for (const item of historyResult.line) {\n      const key = computeGroupKey(item.unit, item.device_class, true);\n      if (key) {\n        lookup[key] = {\n          historyItem: item,\n        };\n      }\n    }\n\n    for (const item of ltsResult.line) {\n      const key = computeGroupKey(item.unit, item.device_class, true);\n      if (!key) {\n        continue;\n      }\n      if (key in lookup) {\n        lookup[key].ltsItem = item;\n      } else {\n        lookup[key] = { ltsItem: item };\n      }\n    }\n\n    for (const { historyItem, ltsItem } of Object.values(lookup)) {\n      if (!historyItem || !ltsItem) {\n        // Only one result has data for this item, so just push it directly instead of merging.\n        result.line.push(historyItem || ltsItem!);\n        continue;\n      }\n\n      const newLineItem: LineChartUnit = { ...historyItem, data: [] };\n      const entities = new Set([\n        ...historyItem.data.map((d) => d.entity_id),\n        ...ltsItem.data.map((d) => d.entity_id),\n      ]);\n\n      for (const entity of entities) {\n        const historyDataItem = historyItem.data.find(\n          (d) => d.entity_id === entity\n        );\n        const ltsDataItem = ltsItem.data.find((d) => d.entity_id === entity);\n\n        if (!historyDataItem || !ltsDataItem) {\n          newLineItem.data.push(historyDataItem || ltsDataItem!);\n          continue;\n        }\n\n        // Remove statistics that overlap with states\n        const oldestState =\n          historyDataItem.states[0]?.last_changed ||\n          // If no state, fall back to the max last changed of the last statistics (so approve all)\n          ltsDataItem.statistics![ltsDataItem.statistics!.length - 1]\n            .last_changed + 1;\n\n        const statistics: LineChartState[] = [];\n        for (const s of ltsDataItem.statistics!) {\n          if (s.last_changed >= oldestState) {\n            break;\n          }\n          statistics.push(s);\n        }\n\n        newLineItem.data.push(\n          statistics.length === 0\n            ? // All statistics overlapped with states, so just push the states\n              historyDataItem\n            : {\n                ...historyDataItem,\n                statistics,\n              }\n        );\n      }\n      result.line.push(newLineItem);\n    }\n    return result;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n\n    if (\n      changedProps.has(\"_stateHistory\") ||\n      changedProps.has(\"_statisticsHistory\") ||\n      changedProps.has(\"_startDate\") ||\n      changedProps.has(\"_endDate\") ||\n      changedProps.has(\"_targetPickerValue\")\n    ) {\n      if (this._statisticsHistory && this._stateHistory) {\n        this._mungedStateHistory = this.mergeHistoryResults(\n          this._statisticsHistory,\n          this._stateHistory\n        );\n      } else {\n        this._mungedStateHistory =\n          this._stateHistory || this._statisticsHistory;\n      }\n    }\n\n    if (this.hasUpdated) {\n      return;\n    }\n\n    const searchParams = extractSearchParamsObject();\n    const entityIds = searchParams.entity_id;\n    const deviceIds = searchParams.device_id;\n    const areaIds = searchParams.area_id;\n    if (entityIds || deviceIds || areaIds) {\n      this._targetPickerValue = {};\n    }\n    if (entityIds) {\n      const splitIds = entityIds.split(\",\");\n      this._targetPickerValue!.entity_id = splitIds;\n    }\n    if (deviceIds) {\n      const splitIds = deviceIds.split(\",\");\n      this._targetPickerValue!.device_id = splitIds;\n    }\n    if (areaIds) {\n      const splitIds = areaIds.split(\",\");\n      this._targetPickerValue!.area_id = splitIds;\n    }\n\n    const startDate = searchParams.start_date;\n    if (startDate) {\n      this._startDate = new Date(startDate);\n    }\n    const endDate = searchParams.end_date;\n    if (endDate) {\n      this._endDate = new Date(endDate);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    const searchParams = extractSearchParamsObject();\n    if (searchParams.back === \"1\" && history.length > 1) {\n      this._showBack = true;\n      navigate(constructUrlCurrentPath(removeSearchParam(\"back\")), {\n        replace: true,\n      });\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (\n      changedProps.has(\"_startDate\") ||\n      changedProps.has(\"_endDate\") ||\n      changedProps.has(\"_targetPickerValue\") ||\n      (!this._stateHistory &&\n        (changedProps.has(\"_deviceEntityLookup\") ||\n          changedProps.has(\"_areaEntityLookup\") ||\n          changedProps.has(\"_areaDeviceLookup\")))\n    ) {\n      this._getHistory();\n      this._getStats();\n    }\n  }\n\n  private _removeAll() {\n    this._targetPickerValue = {};\n    this._updatePath();\n  }\n\n  private async _getStats() {\n    const statisticIds = this._getEntityIds();\n\n    if (statisticIds.length === 0) {\n      this._statisticsHistory = undefined;\n      return;\n    }\n\n    const statistics = await fetchStatistics(\n      this.hass!,\n      this._startDate,\n      this._endDate,\n      statisticIds,\n      \"hour\",\n      undefined,\n      [\"mean\", \"state\"]\n    );\n\n    // Maintain the statistic id ordering\n    const orderedStatistics: Statistics = {};\n    statisticIds.forEach((id) => {\n      if (id in statistics) {\n        orderedStatistics[id] = statistics[id];\n      }\n    });\n\n    // Convert statistics to HistoryResult format\n    const statsHistoryStates: HistoryStates = {};\n    Object.entries(orderedStatistics).forEach(([key, value]) => {\n      const entityHistoryStates: EntityHistoryState[] = value.map((e) => ({\n        s: e.mean != null ? e.mean.toString() : e.state!.toString(),\n        lc: e.start / 1000,\n        a: {},\n        lu: e.start / 1000,\n      }));\n      statsHistoryStates[key] = entityHistoryStates;\n    });\n\n    const { numeric_device_classes: sensorNumericDeviceClasses } =\n      await getSensorNumericDeviceClasses(this.hass);\n\n    this._statisticsHistory = computeHistory(\n      this.hass,\n      statsHistoryStates,\n      this.hass.localize,\n      sensorNumericDeviceClasses,\n      true\n    );\n    // remap states array to statistics array\n    (this._statisticsHistory?.line || []).forEach((item) => {\n      item.data.forEach((data) => {\n        data.statistics = data.states;\n        data.states = [];\n      });\n    });\n  }\n\n  private async _getHistory() {\n    const entityIds = this._getEntityIds();\n\n    if (entityIds.length === 0) {\n      this._stateHistory = undefined;\n      return;\n    }\n\n    this._isLoading = true;\n\n    if (this._subscribed) {\n      this._unsubscribeHistory();\n    }\n\n    const now = new Date();\n\n    const { numeric_device_classes: sensorNumericDeviceClasses } =\n      await getSensorNumericDeviceClasses(this.hass);\n\n    this._subscribed = subscribeHistory(\n      this.hass,\n      (history) => {\n        this._isLoading = false;\n        this._stateHistory = computeHistory(\n          this.hass,\n          history,\n          this.hass.localize,\n          sensorNumericDeviceClasses,\n          true\n        );\n      },\n      this._startDate,\n      this._endDate,\n      entityIds\n    );\n    this._subscribed.catch(() => {\n      this._isLoading = false;\n      this._unsubscribeHistory();\n    });\n    if (this._endDate > now) {\n      this._setRedrawTimer();\n    }\n  }\n\n  private _setRedrawTimer() {\n    clearInterval(this._interval);\n    const now = new Date();\n    const end = this._endDate > now ? now : this._endDate;\n    const timespan = differenceInHours(end, this._startDate);\n    this._interval = window.setInterval(\n      () => this._stateHistoryCharts?.requestUpdate(),\n      // if timespan smaller than 1 hour, update every 10 seconds, smaller than 5 hours, redraw every minute, otherwise every 5 minutes\n      timespan < 2\n        ? 10000\n        : timespan < 10\n          ? 60 * 1000\n          : MIN_TIME_BETWEEN_UPDATES\n    );\n  }\n\n  private _unsubscribeHistory() {\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = undefined;\n    }\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub?.());\n      this._subscribed = undefined;\n    }\n  }\n\n  private _getEntityIds(): string[] {\n    return this.__getEntityIds(\n      this._targetPickerValue,\n      this._deviceEntityLookup,\n      this._areaEntityLookup,\n      this._areaDeviceLookup\n    );\n  }\n\n  private __getEntityIds = memoizeOne(\n    (\n      targetPickerValue: HassServiceTarget,\n      deviceEntityLookup: DeviceEntityLookup | undefined,\n      areaEntityLookup: AreaEntityLookup | undefined,\n      areaDeviceLookup: AreaDeviceLookup | undefined\n    ): string[] => {\n      if (\n        !targetPickerValue ||\n        deviceEntityLookup === undefined ||\n        areaEntityLookup === undefined ||\n        areaDeviceLookup === undefined\n      ) {\n        return [];\n      }\n\n      const entityIds = new Set<string>();\n      let {\n        area_id: searchingAreaId,\n        device_id: searchingDeviceId,\n        entity_id: searchingEntityId,\n      } = targetPickerValue;\n\n      if (searchingAreaId) {\n        searchingAreaId = ensureArray(searchingAreaId);\n        for (const singleSearchingAreaId of searchingAreaId) {\n          const foundEntities = areaEntityLookup[singleSearchingAreaId];\n          if (foundEntities?.length) {\n            for (const foundEntity of foundEntities) {\n              if (foundEntity.entity_category === null) {\n                entityIds.add(foundEntity.entity_id);\n              }\n            }\n          }\n\n          const foundDevices = areaDeviceLookup[singleSearchingAreaId];\n          if (!foundDevices?.length) {\n            continue;\n          }\n\n          for (const foundDevice of foundDevices) {\n            const foundDeviceEntities = deviceEntityLookup[foundDevice.id];\n            if (!foundDeviceEntities?.length) {\n              continue;\n            }\n\n            for (const foundDeviceEntity of foundDeviceEntities) {\n              if (\n                (!foundDeviceEntity.area_id ||\n                  foundDeviceEntity.area_id === singleSearchingAreaId) &&\n                foundDeviceEntity.entity_category === null\n              ) {\n                entityIds.add(foundDeviceEntity.entity_id);\n              }\n            }\n          }\n        }\n      }\n\n      if (searchingDeviceId) {\n        searchingDeviceId = ensureArray(searchingDeviceId);\n        for (const singleSearchingDeviceId of searchingDeviceId) {\n          const foundEntities = deviceEntityLookup[singleSearchingDeviceId];\n          if (!foundEntities?.length) {\n            continue;\n          }\n\n          for (const foundEntity of foundEntities) {\n            if (foundEntity.entity_category === null) {\n              entityIds.add(foundEntity.entity_id);\n            }\n          }\n        }\n      }\n\n      if (searchingEntityId) {\n        searchingEntityId = ensureArray(searchingEntityId);\n        for (const singleSearchingEntityId of searchingEntityId) {\n          entityIds.add(singleSearchingEntityId);\n        }\n      }\n\n      return [...entityIds];\n    }\n  );\n\n  private _dateRangeChanged(ev) {\n    this._startDate = ev.detail.startDate;\n    const endDate = ev.detail.endDate;\n    if (endDate.getHours() === 0 && endDate.getMinutes() === 0) {\n      endDate.setDate(endDate.getDate() + 1);\n      endDate.setMilliseconds(endDate.getMilliseconds() - 1);\n    }\n    this._endDate = endDate;\n\n    this._updatePath();\n  }\n\n  private _targetsChanged(ev) {\n    this._targetPickerValue = ev.detail.value;\n    this._updatePath();\n  }\n\n  private _updatePath() {\n    const params: Record<string, string> = {};\n\n    if (this._targetPickerValue.entity_id) {\n      params.entity_id = ensureArray(this._targetPickerValue.entity_id).join(\n        \",\"\n      );\n    }\n    if (this._targetPickerValue.area_id) {\n      params.area_id = ensureArray(this._targetPickerValue.area_id).join(\",\");\n    }\n    if (this._targetPickerValue.device_id) {\n      params.device_id = ensureArray(this._targetPickerValue.device_id).join(\n        \",\"\n      );\n    }\n\n    if (this._startDate) {\n      params.start_date = this._startDate.toISOString();\n    }\n\n    if (this._endDate) {\n      params.end_date = this._endDate.toISOString();\n    }\n\n    navigate(`/history?${createSearchParam(params)}`, { replace: true });\n  }\n\n  private _downloadHistory() {\n    const entities = this._getEntityIds();\n    if (entities.length === 0 || !this._mungedStateHistory) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.panel.history.download_data_error\"),\n        text: this.hass.localize(\"ui.panel.history.error_no_data\"),\n        warning: true,\n      });\n      return;\n    }\n\n    const csv: string[] = [\"entity_id,state,last_changed\\n\"];\n    const formatDate = (number) => new Date(number).toISOString();\n\n    for (const line of this._mungedStateHistory.line) {\n      for (const entity of line.data) {\n        const entityId = entity.entity_id;\n\n        if (entity.statistics) {\n          for (const s of entity.statistics) {\n            csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n          }\n        }\n\n        for (const s of entity.states) {\n          csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n        }\n      }\n    }\n    for (const timeline of this._mungedStateHistory.timeline) {\n      const entityId = timeline.entity_id;\n      for (const s of timeline.data) {\n        csv.push(`${entityId},${s.state},${formatDate(s.last_changed)}\\n`);\n      }\n    }\n    const blob = new Blob(csv, {\n      type: \"text/csv\",\n    });\n    const url = window.URL.createObjectURL(blob);\n    fileDownload(url, \"history.csv\");\n  }\n\n  static get styles() {\n    return [\n      haStyle,\n      css`\n        .content {\n          padding: 0 16px 16px;\n          padding-bottom: max(env(safe-area-inset-bottom), 16px);\n        }\n\n        :host([virtualize]) {\n          height: 100%;\n        }\n\n        .progress-wrapper {\n          position: relative;\n          display: flex;\n          align-items: center;\n          flex-direction: column;\n          padding: 16px;\n        }\n\n        .filters {\n          display: flex;\n          align-items: flex-start;\n          margin-top: 16px;\n        }\n\n        ha-date-range-picker {\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n          max-width: 100%;\n          direction: var(--direction);\n        }\n\n        @media all and (max-width: 1025px) {\n          .filters {\n            flex-direction: column;\n          }\n          ha-date-range-picker {\n            margin-right: 0;\n            margin-inline-end: 0;\n            margin-inline-start: initial;\n            width: 100%;\n          }\n        }\n\n        .start-search {\n          padding-top: 16px;\n          text-align: center;\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-panel-history\", HaPanelHistory);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-panel-history\": HaPanelHistory;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}