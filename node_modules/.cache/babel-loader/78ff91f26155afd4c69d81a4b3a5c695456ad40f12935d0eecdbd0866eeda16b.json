{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { activateFirstItem, activateLastItem, activateNextItem as _activateNextItem, activatePreviousItem as _activatePreviousItem, getActiveItem, getFirstActivatableItem } from './list-navigation-helpers.js';\n// TODO: move this file to List and make List use this\n/**\n * Default keys that trigger navigation.\n */\n// tslint:disable:enforce-name-casing Following Enum style\nexport var NavigableKeys = {\n  ArrowDown: 'ArrowDown',\n  ArrowLeft: 'ArrowLeft',\n  ArrowUp: 'ArrowUp',\n  ArrowRight: 'ArrowRight',\n  Home: 'Home',\n  End: 'End'\n};\n/**\n * A controller that handles list keyboard navigation and item management.\n */\nexport var ListController = /*#__PURE__*/function () {\n  function ListController(config) {\n    var _this = this;\n    _classCallCheck(this, ListController);\n    /**\n     * Handles keyboard navigation. Should be bound to the node that will act as\n     * the List.\n     */\n    this.handleKeydown = function (event) {\n      var key = event.key;\n      if (event.defaultPrevented || !_this.isNavigableKey(key)) {\n        return;\n      }\n      // do not use this.items directly in upcoming calculations so we don't\n      // re-query the DOM unnecessarily\n      var items = _this.items;\n      if (!items.length) {\n        return;\n      }\n      var activeItemRecord = getActiveItem(items, _this.isActivatable);\n      if (activeItemRecord) {\n        activeItemRecord.item.tabIndex = -1;\n      }\n      event.preventDefault();\n      var isRtl = _this.isRtl();\n      var inlinePrevious = isRtl ? NavigableKeys.ArrowRight : NavigableKeys.ArrowLeft;\n      var inlineNext = isRtl ? NavigableKeys.ArrowLeft : NavigableKeys.ArrowRight;\n      switch (key) {\n        // Activate the next item\n        case NavigableKeys.ArrowDown:\n        case inlineNext:\n          _activateNextItem(items, activeItemRecord, _this.isActivatable);\n          break;\n        // Activate the previous item\n        case NavigableKeys.ArrowUp:\n        case inlinePrevious:\n          _activatePreviousItem(items, activeItemRecord, _this.isActivatable);\n          break;\n        // Activate the first item\n        case NavigableKeys.Home:\n          activateFirstItem(items, _this.isActivatable);\n          break;\n        // Activate the last item\n        case NavigableKeys.End:\n          activateLastItem(items, _this.isActivatable);\n          break;\n        default:\n          break;\n      }\n    };\n    /**\n     * Listener to be bound to the `deactivate-items` item event.\n     */\n    this.onDeactivateItems = function () {\n      var items = _this.items;\n      var _iterator = _createForOfIteratorHelper(items),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var item = _step.value;\n          _this.deactivateItem(item);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n    /**\n     * Listener to be bound to the `request-activation` item event..\n     */\n    this.onRequestActivation = function (event) {\n      _this.onDeactivateItems();\n      var target = event.target;\n      _this.activateItem(target);\n      target.focus();\n    };\n    /**\n     * Listener to be bound to the `slotchange` event for the slot that renders\n     * the items.\n     */\n    this.onSlotchange = function () {\n      var items = _this.items;\n      // Whether we have encountered an item that has been activated\n      var encounteredActivated = false;\n      var _iterator2 = _createForOfIteratorHelper(items),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var item = _step2.value;\n          var isActivated = !item.disabled && item.tabIndex > -1;\n          if (isActivated && !encounteredActivated) {\n            encounteredActivated = true;\n            item.tabIndex = 0;\n            continue;\n          }\n          // Deactivate the rest including disabled\n          item.tabIndex = -1;\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (encounteredActivated) {\n        return;\n      }\n      var firstActivatableItem = getFirstActivatableItem(items, _this.isActivatable);\n      if (!firstActivatableItem) {\n        return;\n      }\n      firstActivatableItem.tabIndex = 0;\n    };\n    var isItem = config.isItem,\n      getPossibleItems = config.getPossibleItems,\n      isRtl = config.isRtl,\n      deactivateItem = config.deactivateItem,\n      activateItem = config.activateItem,\n      isNavigableKey = config.isNavigableKey,\n      isActivatable = config.isActivatable;\n    this.isItem = isItem;\n    this.getPossibleItems = getPossibleItems;\n    this.isRtl = isRtl;\n    this.deactivateItem = deactivateItem;\n    this.activateItem = activateItem;\n    this.isNavigableKey = isNavigableKey;\n    this.isActivatable = isActivatable;\n  }\n  /**\n   * The items being managed by the list. Additionally, attempts to see if the\n   * object has a sub-item in the `.item` property.\n   */\n  _createClass(ListController, [{\n    key: \"items\",\n    get: function get() {\n      var maybeItems = this.getPossibleItems();\n      var items = [];\n      var _iterator3 = _createForOfIteratorHelper(maybeItems),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var itemOrParent = _step3.value;\n          var isItem = this.isItem(itemOrParent);\n          // if the item is a list item, add it to the list of items\n          if (isItem) {\n            items.push(itemOrParent);\n            continue;\n          }\n          // If the item exposes an `item` property check if it is a list item.\n          var subItem = itemOrParent.item;\n          if (subItem && this.isItem(subItem)) {\n            items.push(subItem);\n          }\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return items;\n    }\n    /**\n     * Activates the next item in the list. If at the end of the list, the first\n     * item will be activated.\n     *\n     * @return The activated list item or `null` if there are no items.\n     */\n  }, {\n    key: \"activateNextItem\",\n    value: function activateNextItem() {\n      var items = this.items;\n      var activeItemRecord = getActiveItem(items, this.isActivatable);\n      if (activeItemRecord) {\n        activeItemRecord.item.tabIndex = -1;\n      }\n      return _activateNextItem(items, activeItemRecord, this.isActivatable);\n    }\n    /**\n     * Activates the previous item in the list. If at the start of the list, the\n     * last item will be activated.\n     *\n     * @return The activated list item or `null` if there are no items.\n     */\n  }, {\n    key: \"activatePreviousItem\",\n    value: function activatePreviousItem() {\n      var items = this.items;\n      var activeItemRecord = getActiveItem(items, this.isActivatable);\n      if (activeItemRecord) {\n        activeItemRecord.item.tabIndex = -1;\n      }\n      return _activatePreviousItem(items, activeItemRecord, this.isActivatable);\n    }\n  }]);\n  return ListController;\n}();","map":{"version":3,"names":["activateFirstItem","activateLastItem","activateNextItem","activatePreviousItem","getActiveItem","getFirstActivatableItem","NavigableKeys","ArrowDown","ArrowLeft","ArrowUp","ArrowRight","Home","End","ListController","config","_this","_classCallCheck","handleKeydown","event","key","defaultPrevented","isNavigableKey","items","length","activeItemRecord","isActivatable","item","tabIndex","preventDefault","isRtl","inlinePrevious","inlineNext","onDeactivateItems","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","deactivateItem","err","e","f","onRequestActivation","target","activateItem","focus","onSlotchange","encounteredActivated","_iterator2","_step2","isActivated","disabled","firstActivatableItem","isItem","getPossibleItems","_createClass","get","maybeItems","_iterator3","_step3","itemOrParent","push","subItem"],"sources":["list-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {\n  activateFirstItem,\n  activateLastItem,\n  activateNextItem,\n  activatePreviousItem,\n  getActiveItem,\n  getFirstActivatableItem,\n  ListItem,\n} from './list-navigation-helpers.js';\n\n// TODO: move this file to List and make List use this\n\n/**\n * Default keys that trigger navigation.\n */\n// tslint:disable:enforce-name-casing Following Enum style\nexport const NavigableKeys = {\n  ArrowDown: 'ArrowDown',\n  ArrowLeft: 'ArrowLeft',\n  ArrowUp: 'ArrowUp',\n  ArrowRight: 'ArrowRight',\n  Home: 'Home',\n  End: 'End',\n} as const;\n// tslint:enable:enforce-name-casing\n\n/**\n * Default set of navigable keys.\n */\nexport type NavigableKeys = (typeof NavigableKeys)[keyof typeof NavigableKeys];\n\n/**\n * The configuration object to customize the behavior of the List Controller\n */\nexport interface ListControllerConfig<Item extends ListItem> {\n  /**\n   * A function that determines whether or not the given element is an Item\n   */\n  isItem: (item: HTMLElement) => item is Item;\n  /**\n   * A function that returns an array of elements to consider as items. For\n   * example, all the slotted elements.\n   */\n  getPossibleItems: () => HTMLElement[];\n  /**\n   * A function that returns whether or not the list is in an RTL context.\n   */\n  isRtl: () => boolean;\n  /**\n   * Deactivates an item such as setting the tabindex to -1 and or sets selected\n   * to false.\n   */\n  deactivateItem: (item: Item) => void;\n  /**\n   * Activates an item such as setting the tabindex to 1 and or sets selected to\n   * true (but does not focus).\n   */\n  activateItem: (item: Item) => void;\n  /**\n   * Whether or not the key should be handled by the list for navigation.\n   */\n  isNavigableKey: (key: string) => boolean;\n  /**\n   * Whether or not the item can be activated. Defaults to items that are not\n   * disabled.\n   */\n  isActivatable?: (item: Item) => boolean;\n}\n\n/**\n * A controller that handles list keyboard navigation and item management.\n */\nexport class ListController<Item extends ListItem> {\n  isItem: (item: HTMLElement) => item is Item;\n  private readonly getPossibleItems: () => HTMLElement[];\n  private readonly isRtl: () => boolean;\n  private readonly deactivateItem: (item: Item) => void;\n  private readonly activateItem: (item: Item) => void;\n  private readonly isNavigableKey: (key: string) => boolean;\n  private readonly isActivatable?: (item: Item) => boolean;\n\n  constructor(config: ListControllerConfig<Item>) {\n    const {\n      isItem,\n      getPossibleItems,\n      isRtl,\n      deactivateItem,\n      activateItem,\n      isNavigableKey,\n      isActivatable,\n    } = config;\n    this.isItem = isItem;\n    this.getPossibleItems = getPossibleItems;\n    this.isRtl = isRtl;\n    this.deactivateItem = deactivateItem;\n    this.activateItem = activateItem;\n    this.isNavigableKey = isNavigableKey;\n    this.isActivatable = isActivatable;\n  }\n\n  /**\n   * The items being managed by the list. Additionally, attempts to see if the\n   * object has a sub-item in the `.item` property.\n   */\n  get items(): Item[] {\n    const maybeItems = this.getPossibleItems();\n    const items: Item[] = [];\n\n    for (const itemOrParent of maybeItems) {\n      const isItem = this.isItem(itemOrParent);\n      // if the item is a list item, add it to the list of items\n      if (isItem) {\n        items.push(itemOrParent);\n        continue;\n      }\n\n      // If the item exposes an `item` property check if it is a list item.\n      const subItem = (itemOrParent as HTMLElement & {item?: Item}).item;\n      if (subItem && this.isItem(subItem)) {\n        items.push(subItem);\n      }\n    }\n\n    return items;\n  }\n\n  /**\n   * Handles keyboard navigation. Should be bound to the node that will act as\n   * the List.\n   */\n  handleKeydown = (event: KeyboardEvent) => {\n    const key = event.key;\n    if (event.defaultPrevented || !this.isNavigableKey(key)) {\n      return;\n    }\n    // do not use this.items directly in upcoming calculations so we don't\n    // re-query the DOM unnecessarily\n    const items = this.items;\n\n    if (!items.length) {\n      return;\n    }\n\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n\n    if (activeItemRecord) {\n      activeItemRecord.item.tabIndex = -1;\n    }\n\n    event.preventDefault();\n\n    const isRtl = this.isRtl();\n    const inlinePrevious = isRtl\n      ? NavigableKeys.ArrowRight\n      : NavigableKeys.ArrowLeft;\n    const inlineNext = isRtl\n      ? NavigableKeys.ArrowLeft\n      : NavigableKeys.ArrowRight;\n\n    switch (key) {\n      // Activate the next item\n      case NavigableKeys.ArrowDown:\n      case inlineNext:\n        activateNextItem(items, activeItemRecord, this.isActivatable);\n        break;\n\n      // Activate the previous item\n      case NavigableKeys.ArrowUp:\n      case inlinePrevious:\n        activatePreviousItem(items, activeItemRecord, this.isActivatable);\n        break;\n\n      // Activate the first item\n      case NavigableKeys.Home:\n        activateFirstItem(items, this.isActivatable);\n        break;\n\n      // Activate the last item\n      case NavigableKeys.End:\n        activateLastItem(items, this.isActivatable);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  /**\n   * Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activateNextItem(): Item | null {\n    const items = this.items;\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n    if (activeItemRecord) {\n      activeItemRecord.item.tabIndex = -1;\n    }\n    return activateNextItem(items, activeItemRecord, this.isActivatable);\n  }\n\n  /**\n   * Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activatePreviousItem(): Item | null {\n    const items = this.items;\n    const activeItemRecord = getActiveItem(items, this.isActivatable);\n    if (activeItemRecord) {\n      activeItemRecord.item.tabIndex = -1;\n    }\n    return activatePreviousItem(items, activeItemRecord, this.isActivatable);\n  }\n\n  /**\n   * Listener to be bound to the `deactivate-items` item event.\n   */\n  onDeactivateItems = () => {\n    const items = this.items;\n\n    for (const item of items) {\n      this.deactivateItem(item);\n    }\n  };\n\n  /**\n   * Listener to be bound to the `request-activation` item event..\n   */\n  onRequestActivation = (event: Event) => {\n    this.onDeactivateItems();\n    const target = event.target as Item;\n    this.activateItem(target);\n    target.focus();\n  };\n\n  /**\n   * Listener to be bound to the `slotchange` event for the slot that renders\n   * the items.\n   */\n  onSlotchange = () => {\n    const items = this.items;\n    // Whether we have encountered an item that has been activated\n    let encounteredActivated = false;\n\n    for (const item of items) {\n      const isActivated = !item.disabled && item.tabIndex > -1;\n\n      if (isActivated && !encounteredActivated) {\n        encounteredActivated = true;\n        item.tabIndex = 0;\n        continue;\n      }\n\n      // Deactivate the rest including disabled\n      item.tabIndex = -1;\n    }\n\n    if (encounteredActivated) {\n      return;\n    }\n\n    const firstActivatableItem = getFirstActivatableItem(\n      items,\n      this.isActivatable,\n    );\n\n    if (!firstActivatableItem) {\n      return;\n    }\n\n    firstActivatableItem.tabIndex = 0;\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}