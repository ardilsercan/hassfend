{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, literal, object, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport \"../../../../../components/ha-check-list-item\";\nimport \"../../../../../components/ha-switch\";\nimport \"../../../../../components/user/ha-user-badge\";\nimport { fetchUsers } from \"../../../../../data/user\";\nconst userConditionStruct = object({\n  condition: literal(\"user\"),\n  users: array(string())\n});\nexport let HaCardConditionUser = _decorate([customElement(\"ha-card-condition-user\")], function (_initialize, _LitElement) {\n  class HaCardConditionUser extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaCardConditionUser,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"condition\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"defaultConfig\",\n      value: function defaultConfig() {\n        return {\n          condition: \"user\",\n          users: []\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_users\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"validateUIConfig\",\n      value: function validateUIConfig(condition) {\n        return assert(condition, userConditionStruct);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_sortedUsers\",\n      value() {\n        return memoizeOne(users => users.sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language)));\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: async function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HaCardConditionUser.prototype), \"firstUpdated\", this).call(this, changedProps);\n        this._fetchUsers();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchUsers\",\n      value: async function _fetchUsers() {\n        const users = await fetchUsers(this.hass);\n        this._users = users.filter(user => !user.system_generated);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$condition$users;\n        const selectedUsers = (_this$condition$users = this.condition.users) !== null && _this$condition$users !== void 0 ? _this$condition$users : [];\n        return html`\n      <mwc-list>\n        ${this._sortedUsers(this._users).map(user => html`\n            <ha-check-list-item\n              graphic=\"avatar\"\n              hasMeta\n              .userId=${user.id}\n              .selected=${selectedUsers.includes(user.id)}\n              @request-selected=${this._userChanged}\n            >\n              <ha-user-badge\n                slot=\"graphic\"\n                .hass=${this.hass}\n                .user=${user}\n              ></ha-user-badge>\n              <span>${user.name}</span>\n            </ha-check-list-item>\n          `)}\n      </mwc-list>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_userChanged\",\n      value: function _userChanged(ev) {\n        var _this$condition$users2;\n        ev.stopPropagation();\n        const selectedUsers = (_this$condition$users2 = this.condition.users) !== null && _this$condition$users2 !== void 0 ? _this$condition$users2 : [];\n        const userId = ev.currentTarget.userId;\n        const checked = ev.detail.selected;\n        if (checked === selectedUsers.includes(userId)) {\n          return;\n        }\n        let users = selectedUsers;\n        if (checked) {\n          users = [...users, userId];\n        } else {\n          users = users.filter(user => user !== userId);\n        }\n        const condition = {\n          ...this.condition,\n          users\n        };\n        fireEvent(this, \"value-changed\", {\n          value: condition\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: block;\n      }\n      mwc-list {\n        --mdc-list-vertical-padding: 0;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","customElement","property","state","memoizeOne","array","assert","literal","object","string","fireEvent","stringCompare","fetchUsers","userConditionStruct","condition","users","HaCardConditionUser","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","static","defaultConfig","validateUIConfig","sort","a","b","name","hass","locale","language","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","_fetchUsers","_users","filter","user","system_generated","render","_this$condition$users","selectedUsers","_sortedUsers","map","id","includes","_userChanged","ev","_this$condition$users2","stopPropagation","userId","currentTarget","checked","detail","selected","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/editor/conditions/types/ha-card-condition-user.ts"],"sourcesContent":["import \"@material/mwc-list\";\nimport { LitElement, PropertyValues, css, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, literal, object, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport \"../../../../../components/ha-check-list-item\";\nimport \"../../../../../components/ha-switch\";\nimport \"../../../../../components/user/ha-user-badge\";\nimport { User, fetchUsers } from \"../../../../../data/user\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { UserCondition } from \"../../../common/validate-condition\";\n\nconst userConditionStruct = object({\n  condition: literal(\"user\"),\n  users: array(string()),\n});\n\n@customElement(\"ha-card-condition-user\")\nexport class HaCardConditionUser extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: UserCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig(): UserCondition {\n    return { condition: \"user\", users: [] };\n  }\n\n  @state() private _users: User[] = [];\n\n  protected static validateUIConfig(condition: UserCondition) {\n    return assert(condition, userConditionStruct);\n  }\n\n  private _sortedUsers = memoizeOne((users: User[]) =>\n    users.sort((a, b) =>\n      stringCompare(a.name, b.name, this.hass.locale.language)\n    )\n  );\n\n  protected async firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._fetchUsers();\n  }\n\n  private async _fetchUsers() {\n    const users = await fetchUsers(this.hass);\n    this._users = users.filter((user) => !user.system_generated);\n  }\n\n  protected render() {\n    const selectedUsers = this.condition.users ?? [];\n\n    return html`\n      <mwc-list>\n        ${this._sortedUsers(this._users).map(\n          (user) => html`\n            <ha-check-list-item\n              graphic=\"avatar\"\n              hasMeta\n              .userId=${user.id}\n              .selected=${selectedUsers.includes(user.id)}\n              @request-selected=${this._userChanged}\n            >\n              <ha-user-badge\n                slot=\"graphic\"\n                .hass=${this.hass}\n                .user=${user}\n              ></ha-user-badge>\n              <span>${user.name}</span>\n            </ha-check-list-item>\n          `\n        )}\n      </mwc-list>\n    `;\n  }\n\n  private _userChanged(ev) {\n    ev.stopPropagation();\n    const selectedUsers = this.condition.users ?? [];\n    const userId = ev.currentTarget.userId as string;\n    const checked = ev.detail.selected as boolean;\n\n    if (checked === selectedUsers.includes(userId)) {\n      return;\n    }\n\n    let users = selectedUsers;\n    if (checked) {\n      users = [...users, userId];\n    } else {\n      users = users.filter((user) => user !== userId);\n    }\n\n    const condition: UserCondition = {\n      ...this.condition,\n      users,\n    };\n\n    fireEvent(this, \"value-changed\", { value: condition });\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        display: block;\n      }\n      mwc-list {\n        --mdc-list-vertical-padding: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-card-condition-user\": HaCardConditionUser;\n  }\n}\n"],"mappings":";;;AAAA,OAAO,oBAAoB;AAC3B,SAASA,UAAU,EAAkBC,GAAG,EAAEC,IAAI,QAAQ,KAAK;AAC3D,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,KAAK,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,MAAM,QAAQ,aAAa;AACpE,SAASC,SAAS,QAAQ,sCAAsC;AAChE,SAASC,aAAa,QAAQ,sCAAsC;AACpE,OAAO,8CAA8C;AACrD,OAAO,qCAAqC;AAC5C,OAAO,8CAA8C;AACrD,SAAeC,UAAU,QAAQ,0BAA0B;AAI3D,MAAMC,mBAAmB,GAAGL,MAAM,CAAC;EACjCM,SAAS,EAAEP,OAAO,CAAC,MAAM,CAAC;EAC1BQ,KAAK,EAAEV,KAAK,CAACI,MAAM,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,WACaO,mBAAmB,GAAAC,SAAA,EAD/BhB,aAAa,CAAC,wBAAwB,CAAC,aAAAiB,WAAA,EAAAC,WAAA;EAAxC,MACaH,mBAAmB,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA+FpD;EAAC;IAAAI,CAAA,EA/FYN,mBAAmB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAC7BvB,QAAQ,CAAC;QAAEwB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BvB,QAAQ,CAAC;QAAEwB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BvB,QAAQ,CAAC;QAAE2B,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAAmB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAO,MAAA;MAAAJ,GAAA;MAAAC,KAAA,EAEpD,SAAAI,cAAA,EAAiD;QAC/C,OAAO;UAAElB,SAAS,EAAE,MAAM;UAAEC,KAAK,EAAE;QAAG,CAAC;MACzC;IAAC;MAAAS,IAAA;MAAAC,UAAA,GAEAtB,KAAK,CAAC,CAAC;MAAAwB,GAAA;MAAAC,MAAA;QAAA,OAA0B,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAO,MAAA;MAAAJ,GAAA;MAAAC,KAAA,EAEpC,SAAAK,iBAAkCnB,SAAwB,EAAE;QAC1D,OAAOR,MAAM,CAACQ,SAAS,EAAED,mBAAmB,CAAC;MAC/C;IAAC;MAAAW,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEsBxB,UAAU,CAAEW,KAAa,IAC9CA,KAAK,CAACmB,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACdzB,aAAa,CAACwB,CAAC,CAACE,IAAI,EAAED,CAAC,CAACC,IAAI,EAAE,IAAI,CAACC,IAAI,CAACC,MAAM,CAACC,QAAQ,CACzD,CACF,CAAC;MAAA;IAAA;MAAAhB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAa,aAA6BC,YAA4B,EAAE;QACzDC,IAAA,CAAAC,eAAA,CAxBS5B,mBAAmB,CAAA6B,SAAA,yBAAAC,IAAA,OAwBTJ,YAAY;QAC/B,IAAI,CAACK,WAAW,CAAC,CAAC;MACpB;IAAC;MAAAvB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,eAAAmB,YAAA,EAA4B;QAC1B,MAAMhC,KAAK,GAAG,MAAMH,UAAU,CAAC,IAAI,CAAC0B,IAAI,CAAC;QACzC,IAAI,CAACU,MAAM,GAAGjC,KAAK,CAACkC,MAAM,CAAEC,IAAI,IAAK,CAACA,IAAI,CAACC,gBAAgB,CAAC;MAC9D;IAAC;MAAA3B,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwB,OAAA,EAAmB;QAAA,IAAAC,qBAAA;QACjB,MAAMC,aAAa,IAAAD,qBAAA,GAAG,IAAI,CAACvC,SAAS,CAACC,KAAK,cAAAsC,qBAAA,cAAAA,qBAAA,GAAI,EAAE;QAEhD,OAAOrD,IAAK;AAChB;AACA,UAAU,IAAI,CAACuD,YAAY,CAAC,IAAI,CAACP,MAAM,CAAC,CAACQ,GAAG,CACjCN,IAAI,IAAKlD,IAAK;AACzB;AACA;AACA;AACA,wBAAwBkD,IAAI,CAACO,EAAG;AAChC,0BAA0BH,aAAa,CAACI,QAAQ,CAACR,IAAI,CAACO,EAAE,CAAE;AAC1D,kCAAkC,IAAI,CAACE,YAAa;AACpD;AACA;AACA;AACA,wBAAwB,IAAI,CAACrB,IAAK;AAClC,wBAAwBY,IAAK;AAC7B;AACA,sBAAsBA,IAAI,CAACb,IAAK;AAChC;AACA,WACQ,CAAE;AACV;AACA,KAAK;MACH;IAAC;MAAAb,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA+B,aAAqBC,EAAE,EAAE;QAAA,IAAAC,sBAAA;QACvBD,EAAE,CAACE,eAAe,CAAC,CAAC;QACpB,MAAMR,aAAa,IAAAO,sBAAA,GAAG,IAAI,CAAC/C,SAAS,CAACC,KAAK,cAAA8C,sBAAA,cAAAA,sBAAA,GAAI,EAAE;QAChD,MAAME,MAAM,GAAGH,EAAE,CAACI,aAAa,CAACD,MAAgB;QAChD,MAAME,OAAO,GAAGL,EAAE,CAACM,MAAM,CAACC,QAAmB;QAE7C,IAAIF,OAAO,KAAKX,aAAa,CAACI,QAAQ,CAACK,MAAM,CAAC,EAAE;UAC9C;QACF;QAEA,IAAIhD,KAAK,GAAGuC,aAAa;QACzB,IAAIW,OAAO,EAAE;UACXlD,KAAK,GAAG,CAAC,GAAGA,KAAK,EAAEgD,MAAM,CAAC;QAC5B,CAAC,MAAM;UACLhD,KAAK,GAAGA,KAAK,CAACkC,MAAM,CAAEC,IAAI,IAAKA,IAAI,KAAKa,MAAM,CAAC;QACjD;QAEA,MAAMjD,SAAwB,GAAG;UAC/B,GAAG,IAAI,CAACA,SAAS;UACjBC;QACF,CAAC;QAEDL,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE;UAAEkB,KAAK,EAAEd;QAAU,CAAC,CAAC;MACxD;IAAC;MAAAU,IAAA;MAAAO,MAAA;MAAAJ,GAAA;MAAAC,KAAA,EAED,SAAAwC,OAAA,EAAoB;QAClB,OAAOrE,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GA9FsCD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}