{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport { ContextProvider } from \"@lit-labs/context\";\nimport { areasContext, configContext, connectionContext, devicesContext, entitiesContext, localeContext, localizeContext, panelsContext, selectedThemeContext, statesContext, themesContext, userContext, userDataContext } from \"../data/context\";\nexport var contextMixin = function contextMixin(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n    function _class() {\n      var _this;\n      _classCallCheck(this, _class);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, _class, [].concat(args));\n      _this.__contextProviders = {\n        connection: new ContextProvider(_assertThisInitialized(_this), {\n          context: connectionContext,\n          initialValue: _this.hass ? _this.hass.connection : _this._pendingHass.connection\n        }),\n        states: new ContextProvider(_assertThisInitialized(_this), {\n          context: statesContext,\n          initialValue: _this.hass ? _this.hass.states : _this._pendingHass.states\n        }),\n        entities: new ContextProvider(_assertThisInitialized(_this), {\n          context: entitiesContext,\n          initialValue: _this.hass ? _this.hass.entities : _this._pendingHass.entities\n        }),\n        devices: new ContextProvider(_assertThisInitialized(_this), {\n          context: devicesContext,\n          initialValue: _this.hass ? _this.hass.devices : _this._pendingHass.devices\n        }),\n        areas: new ContextProvider(_assertThisInitialized(_this), {\n          context: areasContext,\n          initialValue: _this.hass ? _this.hass.areas : _this._pendingHass.areas\n        }),\n        localize: new ContextProvider(_assertThisInitialized(_this), {\n          context: localizeContext,\n          initialValue: _this.hass ? _this.hass.localize : _this._pendingHass.localize\n        }),\n        locale: new ContextProvider(_assertThisInitialized(_this), {\n          context: localeContext,\n          initialValue: _this.hass ? _this.hass.locale : _this._pendingHass.locale\n        }),\n        config: new ContextProvider(_assertThisInitialized(_this), {\n          context: configContext,\n          initialValue: _this.hass ? _this.hass.config : _this._pendingHass.config\n        }),\n        themes: new ContextProvider(_assertThisInitialized(_this), {\n          context: themesContext,\n          initialValue: _this.hass ? _this.hass.themes : _this._pendingHass.themes\n        }),\n        selectedTheme: new ContextProvider(_assertThisInitialized(_this), {\n          context: selectedThemeContext,\n          initialValue: _this.hass ? _this.hass.selectedTheme : _this._pendingHass.selectedTheme\n        }),\n        user: new ContextProvider(_assertThisInitialized(_this), {\n          context: userContext,\n          initialValue: _this.hass ? _this.hass.user : _this._pendingHass.user\n        }),\n        userData: new ContextProvider(_assertThisInitialized(_this), {\n          context: userDataContext,\n          initialValue: _this.hass ? _this.hass.userData : _this._pendingHass.userData\n        }),\n        panels: new ContextProvider(_assertThisInitialized(_this), {\n          context: panelsContext,\n          initialValue: _this.hass ? _this.hass.panels : _this._pendingHass.panels\n        })\n      };\n      return _this;\n    }\n    _createClass(_class, [{\n      key: \"hassConnected\",\n      value: function hassConnected() {\n        _get(_getPrototypeOf(_class.prototype), \"hassConnected\", this).call(this);\n        for (var _i = 0, _Object$entries = Object.entries(this.hass); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n            key = _Object$entries$_i[0],\n            value = _Object$entries$_i[1];\n          if (key in this.__contextProviders) {\n            this.__contextProviders[key].setValue(value);\n          }\n        }\n      }\n    }, {\n      key: \"_updateHass\",\n      value: function _updateHass(obj) {\n        _get(_getPrototypeOf(_class.prototype), \"_updateHass\", this).call(this, obj);\n        for (var _i2 = 0, _Object$entries2 = Object.entries(obj); _i2 < _Object$entries2.length; _i2++) {\n          var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n            key = _Object$entries2$_i[0],\n            value = _Object$entries2$_i[1];\n          if (key in this.__contextProviders) {\n            this.__contextProviders[key].setValue(value);\n          }\n        }\n      }\n    }]);\n    return _class;\n  }(superClass);\n};","map":{"version":3,"names":["ContextProvider","areasContext","configContext","connectionContext","devicesContext","entitiesContext","localeContext","localizeContext","panelsContext","selectedThemeContext","statesContext","themesContext","userContext","userDataContext","contextMixin","superClass","_superClass","_inherits","_class","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","__contextProviders","connection","_assertThisInitialized","context","initialValue","hass","_pendingHass","states","entities","devices","areas","localize","locale","config","themes","selectedTheme","user","userData","panels","_createClass","key","value","hassConnected","_get","_getPrototypeOf","prototype","call","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","setValue","_updateHass","obj","_i2","_Object$entries2","_Object$entries2$_i"],"sources":["/workspaces/frontend/src/state/context-mixin.ts"],"sourcesContent":["import { ContextProvider } from \"@lit-labs/context\";\nimport {\n  areasContext,\n  configContext,\n  connectionContext,\n  devicesContext,\n  entitiesContext,\n  localeContext,\n  localizeContext,\n  panelsContext,\n  selectedThemeContext,\n  statesContext,\n  themesContext,\n  userContext,\n  userDataContext,\n} from \"../data/context\";\nimport { Constructor, HomeAssistant } from \"../types\";\nimport { HassBaseEl } from \"./hass-base-mixin\";\n\nexport const contextMixin = <T extends Constructor<HassBaseEl>>(\n  superClass: T\n) =>\n  class extends superClass {\n    private __contextProviders: Record<\n      string,\n      ContextProvider<any> | undefined\n    > = {\n      connection: new ContextProvider(this, {\n        context: connectionContext,\n        initialValue: this.hass\n          ? this.hass.connection\n          : this._pendingHass.connection,\n      }),\n      states: new ContextProvider(this, {\n        context: statesContext,\n        initialValue: this.hass ? this.hass.states : this._pendingHass.states,\n      }),\n      entities: new ContextProvider(this, {\n        context: entitiesContext,\n        initialValue: this.hass\n          ? this.hass.entities\n          : this._pendingHass.entities,\n      }),\n      devices: new ContextProvider(this, {\n        context: devicesContext,\n        initialValue: this.hass ? this.hass.devices : this._pendingHass.devices,\n      }),\n      areas: new ContextProvider(this, {\n        context: areasContext,\n        initialValue: this.hass ? this.hass.areas : this._pendingHass.areas,\n      }),\n      localize: new ContextProvider(this, {\n        context: localizeContext,\n        initialValue: this.hass\n          ? this.hass.localize\n          : this._pendingHass.localize,\n      }),\n      locale: new ContextProvider(this, {\n        context: localeContext,\n        initialValue: this.hass ? this.hass.locale : this._pendingHass.locale,\n      }),\n      config: new ContextProvider(this, {\n        context: configContext,\n        initialValue: this.hass ? this.hass.config : this._pendingHass.config,\n      }),\n      themes: new ContextProvider(this, {\n        context: themesContext,\n        initialValue: this.hass ? this.hass.themes : this._pendingHass.themes,\n      }),\n      selectedTheme: new ContextProvider(this, {\n        context: selectedThemeContext,\n        initialValue: this.hass\n          ? this.hass.selectedTheme\n          : this._pendingHass.selectedTheme,\n      }),\n      user: new ContextProvider(this, {\n        context: userContext,\n        initialValue: this.hass ? this.hass.user : this._pendingHass.user,\n      }),\n      userData: new ContextProvider(this, {\n        context: userDataContext,\n        initialValue: this.hass\n          ? this.hass.userData\n          : this._pendingHass.userData,\n      }),\n      panels: new ContextProvider(this, {\n        context: panelsContext,\n        initialValue: this.hass ? this.hass.panels : this._pendingHass.panels,\n      }),\n    };\n\n    protected hassConnected() {\n      super.hassConnected();\n      for (const [key, value] of Object.entries(this.hass!)) {\n        if (key in this.__contextProviders) {\n          this.__contextProviders[key]!.setValue(value);\n        }\n      }\n    }\n\n    protected _updateHass(obj: Partial<HomeAssistant>) {\n      super._updateHass(obj);\n      for (const [key, value] of Object.entries(obj)) {\n        if (key in this.__contextProviders) {\n          this.__contextProviders[key]!.setValue(value);\n        }\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}