{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport MDCFormFieldFoundation from '@material/form-field/foundation.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { FormElement } from '@material/mwc-base/form-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query, queryAssignedNodes } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport class FormfieldBase extends BaseElement {\n  constructor() {\n    super(...arguments);\n    this.alignEnd = false;\n    this.spaceBetween = false;\n    this.nowrap = false;\n    this.label = '';\n    this.mdcFoundationClass = MDCFormFieldFoundation;\n  }\n  createAdapter() {\n    return {\n      registerInteractionHandler: (type, handler) => {\n        this.labelEl.addEventListener(type, handler);\n      },\n      deregisterInteractionHandler: (type, handler) => {\n        this.labelEl.removeEventListener(type, handler);\n      },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      }\n    };\n  }\n  get input() {\n    var _a, _b;\n    return (_b = (_a = this.slottedInputs) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : null;\n  }\n  render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n  click() {\n    this._labelClick();\n  }\n  _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n__decorate([property({\n  type: Boolean\n})], FormfieldBase.prototype, \"alignEnd\", void 0);\n__decorate([property({\n  type: Boolean\n})], FormfieldBase.prototype, \"spaceBetween\", void 0);\n__decorate([property({\n  type: Boolean\n})], FormfieldBase.prototype, \"nowrap\", void 0);\n__decorate([property({\n  type: String\n}), observer(async function (label) {\n  var _a;\n  (_a = this.input) === null || _a === void 0 ? void 0 : _a.setAttribute('aria-label', label);\n})], FormfieldBase.prototype, \"label\", void 0);\n__decorate([query('.mdc-form-field')], FormfieldBase.prototype, \"mdcRoot\", void 0);\n__decorate([queryAssignedNodes('', true, '*')], FormfieldBase.prototype, \"slottedInputs\", void 0);\n__decorate([query('label')], FormfieldBase.prototype, \"labelEl\", void 0);","map":{"version":3,"names":["MDCFormFieldFoundation","BaseElement","FormElement","observer","html","property","query","queryAssignedNodes","classMap","FormfieldBase","constructor","alignEnd","spaceBetween","nowrap","label","mdcFoundationClass","createAdapter","registerInteractionHandler","type","handler","labelEl","addEventListener","deregisterInteractionHandler","removeEventListener","activateInputRipple","input","ripple","startPress","deactivateInputRipple","endPress","_b","_a","slottedInputs","render","classes","_labelClick","click","focus","__decorate","Boolean","String","setAttribute"],"sources":["mwc-formfield-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n// tslint:disable:no-new-decorators\n\nimport {MDCFormFieldAdapter} from '@material/form-field/adapter.js';\nimport MDCFormFieldFoundation from '@material/form-field/foundation.js';\nimport {BaseElement, EventType, SpecificEventListener} from '@material/mwc-base/base-element.js';\nimport {FormElement} from '@material/mwc-base/form-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {html} from 'lit';\nimport {property, query, queryAssignedNodes} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\n\nexport class FormfieldBase extends BaseElement {\n  @property({type: Boolean}) alignEnd = false;\n  @property({type: Boolean}) spaceBetween = false;\n  @property({type: Boolean}) nowrap = false;\n\n  @property({type: String})\n  @observer(async function(this: FormfieldBase, label: string) {\n    this.input?.setAttribute('aria-label', label);\n  })\n  label = '';\n\n  @query('.mdc-form-field') protected mdcRoot!: HTMLElement;\n\n  protected mdcFoundation!: MDCFormFieldFoundation;\n\n  protected readonly mdcFoundationClass = MDCFormFieldFoundation;\n\n  protected createAdapter(): MDCFormFieldAdapter {\n    return {\n      registerInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.addEventListener(type, handler);\n          },\n      deregisterInteractionHandler:\n          <K extends EventType>(type: K, handler: SpecificEventListener<K>) => {\n            this.labelEl.removeEventListener(type, handler);\n          },\n      activateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.startPress();\n          }\n        }\n      },\n      deactivateInputRipple: async () => {\n        const input = this.input;\n        if (input instanceof FormElement) {\n          const ripple = await input.ripple;\n          if (ripple) {\n            ripple.endPress();\n          }\n        }\n      },\n    };\n  }\n\n  @queryAssignedNodes('', true, '*')\n  protected slottedInputs!: HTMLElement[]|null;\n\n  @query('label') protected labelEl!: HTMLLabelElement;\n\n  protected get input() {\n    return this.slottedInputs?.[0] ?? null;\n  }\n\n  protected override render() {\n    const classes = {\n      'mdc-form-field--align-end': this.alignEnd,\n      'mdc-form-field--space-between': this.spaceBetween,\n      'mdc-form-field--nowrap': this.nowrap\n    };\n\n    return html`\n      <div class=\"mdc-form-field ${classMap(classes)}\">\n        <slot></slot>\n        <label class=\"mdc-label\"\n               @click=\"${this._labelClick}\">${this.label}</label>\n      </div>`;\n  }\n\n  override click() {\n    this._labelClick();\n  }\n\n  protected _labelClick() {\n    const input = this.input;\n    if (input) {\n      input.focus();\n      input.click();\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}