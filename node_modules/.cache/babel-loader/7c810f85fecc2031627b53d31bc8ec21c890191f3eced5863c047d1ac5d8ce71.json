{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\nimport { normalizeKey } from '@material/dom/keyboard';\nimport { numbers } from './constants';\nimport { preventDefaultEvent } from './events';\n/**\n * Initializes a state object for typeahead. Use the same reference for calls to\n * typeahead functions.\n *\n * @return The current state of the typeahead process. Each state reference\n *     represents a typeahead instance as the reference is typically mutated\n *     in-place.\n */\nexport function initState() {\n  var state = {\n    bufferClearTimeout: 0,\n    currentFirstChar: '',\n    sortedIndexCursor: 0,\n    typeaheadBuffer: ''\n  };\n  return state;\n}\n/**\n * Initializes typeahead state by indexing the current list items by primary\n * text into the sortedIndexByFirstChar data structure.\n *\n * @param listItemCount numer of items in the list\n * @param getPrimaryTextByItemIndex function that returns the primary text at a\n *     given index\n *\n * @return Map that maps the first character of the primary text to the full\n *     list text and it's index\n */\nexport function initSortedIndex(listItemCount, getPrimaryTextByItemIndex) {\n  var sortedIndexByFirstChar = new Map();\n  // Aggregate item text to index mapping\n  for (var i = 0; i < listItemCount; i++) {\n    var primaryText = getPrimaryTextByItemIndex(i).trim();\n    if (!primaryText) {\n      continue;\n    }\n    var firstChar = primaryText[0].toLowerCase();\n    if (!sortedIndexByFirstChar.has(firstChar)) {\n      sortedIndexByFirstChar.set(firstChar, []);\n    }\n    sortedIndexByFirstChar.get(firstChar).push({\n      text: primaryText.toLowerCase(),\n      index: i\n    });\n  }\n  // Sort the mapping\n  // TODO(b/157162694): Investigate replacing forEach with Map.values()\n  sortedIndexByFirstChar.forEach(function (values) {\n    values.sort(function (first, second) {\n      return first.index - second.index;\n    });\n  });\n  return sortedIndexByFirstChar;\n}\n/**\n * Given the next desired character from the user, it attempts to find the next\n * list option matching the buffer. Wraps around if at the end of options.\n *\n * @param opts Options and accessors\n *   - nextChar - the next character to match against items\n *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`\n *   - focusedItemIndex - the index of the currently focused item\n *   - focusItemAtIndex - function that focuses a list item at given index\n *   - skipFocus - whether or not to focus the matched item\n *   - isItemAtIndexDisabled - function that determines whether an item at a\n *        given index is disabled\n * @param state The typeahead state instance. See `initState`.\n *\n * @return The index of the matched item, or -1 if no match.\n */\nexport function matchItem(opts, state) {\n  var nextChar = opts.nextChar,\n    focusItemAtIndex = opts.focusItemAtIndex,\n    sortedIndexByFirstChar = opts.sortedIndexByFirstChar,\n    focusedItemIndex = opts.focusedItemIndex,\n    skipFocus = opts.skipFocus,\n    isItemAtIndexDisabled = opts.isItemAtIndexDisabled;\n  clearTimeout(state.bufferClearTimeout);\n  state.bufferClearTimeout = setTimeout(function () {\n    clearBuffer(state);\n  }, numbers.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS);\n  state.typeaheadBuffer = state.typeaheadBuffer + nextChar;\n  var index;\n  if (state.typeaheadBuffer.length === 1) {\n    index = matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state);\n  } else {\n    index = matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state);\n  }\n  if (index !== -1 && !skipFocus) {\n    focusItemAtIndex(index);\n  }\n  return index;\n}\n/**\n * Matches the user's single input character in the buffer to the\n * next option that begins with such character. Wraps around if at\n * end of options. Returns -1 if no match is found.\n */\nfunction matchFirstChar(sortedIndexByFirstChar, focusedItemIndex, isItemAtIndexDisabled, state) {\n  var firstChar = state.typeaheadBuffer[0];\n  var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);\n  if (!itemsMatchingFirstChar) {\n    return -1;\n  }\n  // Has the same firstChar been recently matched?\n  // Also, did starting index remain the same between key presses?\n  // If both hold true, simply increment index.\n  if (firstChar === state.currentFirstChar && itemsMatchingFirstChar[state.sortedIndexCursor].index === focusedItemIndex) {\n    state.sortedIndexCursor = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;\n    var newIndex = itemsMatchingFirstChar[state.sortedIndexCursor].index;\n    if (!isItemAtIndexDisabled(newIndex)) {\n      return newIndex;\n    }\n  }\n  // If we're here, it means one of the following happened:\n  // - either firstChar or startingIndex has changed, invalidating the\n  // cursor.\n  // - The next item of typeahead is disabled, so we have to look further.\n  state.currentFirstChar = firstChar;\n  var newCursorPosition = -1;\n  var cursorPosition;\n  // Find the first non-disabled item as a fallback.\n  for (cursorPosition = 0; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {\n    if (!isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {\n      newCursorPosition = cursorPosition;\n      break;\n    }\n  }\n  // Advance cursor to first item matching the firstChar that is positioned\n  // after starting item. Cursor is unchanged from fallback if there's no\n  // such item.\n  for (; cursorPosition < itemsMatchingFirstChar.length; cursorPosition++) {\n    if (itemsMatchingFirstChar[cursorPosition].index > focusedItemIndex && !isItemAtIndexDisabled(itemsMatchingFirstChar[cursorPosition].index)) {\n      newCursorPosition = cursorPosition;\n      break;\n    }\n  }\n  if (newCursorPosition !== -1) {\n    state.sortedIndexCursor = newCursorPosition;\n    return itemsMatchingFirstChar[state.sortedIndexCursor].index;\n  }\n  return -1;\n}\n/**\n * Attempts to find the next item that matches all of the typeahead buffer.\n * Wraps around if at end of options. Returns -1 if no match is found.\n */\nfunction matchAllChars(sortedIndexByFirstChar, isItemAtIndexDisabled, state) {\n  var firstChar = state.typeaheadBuffer[0];\n  var itemsMatchingFirstChar = sortedIndexByFirstChar.get(firstChar);\n  if (!itemsMatchingFirstChar) {\n    return -1;\n  }\n  // Do nothing if text already matches\n  var startingItem = itemsMatchingFirstChar[state.sortedIndexCursor];\n  if (startingItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0 && !isItemAtIndexDisabled(startingItem.index)) {\n    return startingItem.index;\n  }\n  // Find next item that matches completely; if no match, we'll eventually\n  // loop around to same position\n  var cursorPosition = (state.sortedIndexCursor + 1) % itemsMatchingFirstChar.length;\n  var nextCursorPosition = -1;\n  while (cursorPosition !== state.sortedIndexCursor) {\n    var currentItem = itemsMatchingFirstChar[cursorPosition];\n    var matches = currentItem.text.lastIndexOf(state.typeaheadBuffer, 0) === 0;\n    var isEnabled = !isItemAtIndexDisabled(currentItem.index);\n    if (matches && isEnabled) {\n      nextCursorPosition = cursorPosition;\n      break;\n    }\n    cursorPosition = (cursorPosition + 1) % itemsMatchingFirstChar.length;\n  }\n  if (nextCursorPosition !== -1) {\n    state.sortedIndexCursor = nextCursorPosition;\n    return itemsMatchingFirstChar[state.sortedIndexCursor].index;\n  }\n  return -1;\n}\n/**\n * Whether or not the given typeahead instaance state is currently typing.\n *\n * @param state The typeahead state instance. See `initState`.\n */\nexport function isTypingInProgress(state) {\n  return state.typeaheadBuffer.length > 0;\n}\n/**\n * Clears the typeahaed buffer so that it resets item matching to the first\n * character.\n *\n * @param state The typeahead state instance. See `initState`.\n */\nexport function clearBuffer(state) {\n  state.typeaheadBuffer = '';\n}\n/**\n * Given a keydown event, it calculates whether or not to automatically focus a\n * list item depending on what was typed mimicing the typeahead functionality of\n * a standard <select> element that is open.\n *\n * @param opts Options and accessors\n *   - event - the KeyboardEvent to handle and parse\n *   - sortedIndexByFirstChar - output of `initSortedIndex(...)`\n *   - focusedItemIndex - the index of the currently focused item\n *   - focusItemAtIndex - function that focuses a list item at given index\n *   - isItemAtFocusedIndexDisabled - whether or not the currently focused item\n *      is disabled\n *   - isTargetListItem - whether or not the event target is a list item\n * @param state The typeahead state instance. See `initState`.\n *\n * @returns index of the item matched by the keydown. -1 if not matched.\n */\nexport function handleKeydown(opts, state) {\n  var event = opts.event,\n    isTargetListItem = opts.isTargetListItem,\n    focusedItemIndex = opts.focusedItemIndex,\n    focusItemAtIndex = opts.focusItemAtIndex,\n    sortedIndexByFirstChar = opts.sortedIndexByFirstChar,\n    isItemAtIndexDisabled = opts.isItemAtIndexDisabled;\n  var isArrowLeft = normalizeKey(event) === 'ArrowLeft';\n  var isArrowUp = normalizeKey(event) === 'ArrowUp';\n  var isArrowRight = normalizeKey(event) === 'ArrowRight';\n  var isArrowDown = normalizeKey(event) === 'ArrowDown';\n  var isHome = normalizeKey(event) === 'Home';\n  var isEnd = normalizeKey(event) === 'End';\n  var isEnter = normalizeKey(event) === 'Enter';\n  var isSpace = normalizeKey(event) === 'Spacebar';\n  if (event.altKey || event.ctrlKey || event.metaKey || isArrowLeft || isArrowUp || isArrowRight || isArrowDown || isHome || isEnd || isEnter) {\n    return -1;\n  }\n  var isCharacterKey = !isSpace && event.key.length === 1;\n  if (isCharacterKey) {\n    preventDefaultEvent(event);\n    var matchItemOpts = {\n      focusItemAtIndex: focusItemAtIndex,\n      focusedItemIndex: focusedItemIndex,\n      nextChar: event.key.toLowerCase(),\n      sortedIndexByFirstChar: sortedIndexByFirstChar,\n      skipFocus: false,\n      isItemAtIndexDisabled: isItemAtIndexDisabled\n    };\n    return matchItem(matchItemOpts, state);\n  }\n  if (!isSpace) {\n    return -1;\n  }\n  if (isTargetListItem) {\n    preventDefaultEvent(event);\n  }\n  var typeaheadOnListItem = isTargetListItem && isTypingInProgress(state);\n  if (typeaheadOnListItem) {\n    var matchItemOpts = {\n      focusItemAtIndex: focusItemAtIndex,\n      focusedItemIndex: focusedItemIndex,\n      nextChar: ' ',\n      sortedIndexByFirstChar: sortedIndexByFirstChar,\n      skipFocus: false,\n      isItemAtIndexDisabled: isItemAtIndexDisabled\n    };\n    // space participates in typeahead matching if in rapid typing mode\n    return matchItem(matchItemOpts, state);\n  }\n  return -1;\n}","map":{"version":3,"names":["normalizeKey","numbers","preventDefaultEvent","initState","state","bufferClearTimeout","currentFirstChar","sortedIndexCursor","typeaheadBuffer","initSortedIndex","listItemCount","getPrimaryTextByItemIndex","sortedIndexByFirstChar","Map","i","primaryText","trim","firstChar","toLowerCase","has","set","get","push","text","index","forEach","values","sort","first","second","matchItem","opts","nextChar","focusItemAtIndex","focusedItemIndex","skipFocus","isItemAtIndexDisabled","clearTimeout","setTimeout","clearBuffer","TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS","length","matchFirstChar","matchAllChars","itemsMatchingFirstChar","newIndex","newCursorPosition","cursorPosition","startingItem","lastIndexOf","nextCursorPosition","currentItem","matches","isEnabled","isTypingInProgress","handleKeydown","event","isTargetListItem","isArrowLeft","isArrowUp","isArrowRight","isArrowDown","isHome","isEnd","isEnter","isSpace","altKey","ctrlKey","metaKey","isCharacterKey","key","matchItemOpts","typeaheadOnListItem"],"sources":["typeahead.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}