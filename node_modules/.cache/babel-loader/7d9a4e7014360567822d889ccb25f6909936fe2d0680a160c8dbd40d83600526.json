{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiEye = \"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M12,17A5,5 0 0,1 7,12A5,5 0 0,1 12,7A5,5 0 0,1 17,12A5,5 0 0,1 12,17M12,4.5C7,4.5 2.73,7.61 1,12C2.73,16.39 7,19.5 12,19.5C17,19.5 21.27,16.39 23,12C21.27,7.61 17,4.5 12,4.5Z\";\nconst mdiEyeOff = \"M11.83,9L15,12.16C15,12.11 15,12.05 15,12A3,3 0 0,0 12,9C11.94,9 11.89,9 11.83,9M7.53,9.8L9.08,11.35C9.03,11.56 9,11.77 9,12A3,3 0 0,0 12,15C12.22,15 12.44,14.97 12.65,14.92L14.2,16.47C13.53,16.8 12.79,17 12,17A5,5 0 0,1 7,12C7,11.21 7.2,10.47 7.53,9.8M2,4.27L4.28,6.55L4.73,7C3.08,8.3 1.78,10 1,12C2.73,16.39 7,19.5 12,19.5C13.55,19.5 15.03,19.2 16.38,18.66L16.81,19.08L19.73,22L21,20.73L3.27,3M12,7A5,5 0 0,1 17,12C17,12.64 16.87,13.26 16.64,13.82L19.57,16.75C21.07,15.5 22.27,13.86 23,12C21.27,7.61 17,4.5 12,4.5C10.6,4.5 9.26,4.75 8,5.2L10.17,7.35C10.74,7.13 11.35,7 12,7Z\";\n/* eslint-disable lit/prefer-static-styles */\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-icon-button\";\nimport \"../ha-textfield\";\nconst MASKED_FIELDS = [\"password\", \"secret\", \"token\"];\nexport let HaFormString = _decorate([customElement(\"ha-form-string\")], function (_initialize, _LitElement) {\n  class HaFormString extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaFormString,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"localize\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"localizeBaseKey\",\n      value() {\n        return \"ui.components.selectors.text\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"schema\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"data\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"helper\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"unmaskedPassword\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-textfield\")],\n      key: \"_input\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value: function focus() {\n        if (this._input) {\n          this._input.focus();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$schema$descript, _this$localize;\n        return html`\n      <ha-textfield\n        .type=${!this.isPassword ? this.stringType : this.unmaskedPassword ? \"text\" : \"password\"}\n        .label=${this.label}\n        .value=${this.data || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .required=${this.schema.required}\n        .autoValidate=${this.schema.required}\n        .name=${this.schema.name}\n        .autocomplete=${this.schema.autocomplete}\n        .suffix=${this.isPassword ?\n        // reserve some space for the icon.\n        html`<div style=\"width: 24px\"></div>` : (_this$schema$descript = this.schema.description) === null || _this$schema$descript === void 0 ? void 0 : _this$schema$descript.suffix}\n        .validationMessage=${this.schema.required ? (_this$localize = this.localize) === null || _this$localize === void 0 ? void 0 : _this$localize.call(this, \"ui.common.error_required\") : undefined}\n        @input=${this._valueChanged}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      ${this.renderIcon()}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"renderIcon\",\n      value: function renderIcon() {\n        var _this$localize2;\n        if (!this.isPassword) return nothing;\n        return html`\n      <ha-icon-button\n        toggles\n        .label=${(_this$localize2 = this.localize) === null || _this$localize2 === void 0 ? void 0 : _this$localize2.call(this, `${this.localizeBaseKey}.${this.unmaskedPassword ? \"hide_password\" : \"show_password\"}`)}\n        @click=${this.toggleUnmaskedPassword}\n        .path=${this.unmaskedPassword ? mdiEyeOff : mdiEye}\n      ></ha-icon-button>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        if (changedProps.has(\"schema\")) {\n          this.toggleAttribute(\"own-margin\", !!this.schema.required);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"toggleUnmaskedPassword\",\n      value: function toggleUnmaskedPassword() {\n        this.unmaskedPassword = !this.unmaskedPassword;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        let value = ev.target.value;\n        if (this.data === value) {\n          return;\n        }\n        if (value === \"\" && !this.schema.required) {\n          value = undefined;\n        }\n        fireEvent(this, \"value-changed\", {\n          value\n        });\n      }\n    }, {\n      kind: \"get\",\n      key: \"stringType\",\n      value: function stringType() {\n        if (this.schema.format) {\n          if ([\"email\", \"url\"].includes(this.schema.format)) {\n            return this.schema.format;\n          }\n          if (this.schema.format === \"fqdnurl\") {\n            return \"url\";\n          }\n        }\n        return \"text\";\n      }\n    }, {\n      kind: \"get\",\n      key: \"isPassword\",\n      value: function isPassword() {\n        return MASKED_FIELDS.some(field => this.schema.name.includes(field));\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      :host([own-margin]) {\n        margin-bottom: 5px;\n      }\n      ha-textfield {\n        display: block;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        inset-inline-start: initial;\n        inset-inline-end: 8px;\n        --mdc-icon-button-size: 40px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        direction: var(--direction);\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","query","state","fireEvent","MASKED_FIELDS","HaFormString","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","focus","_input","render","_this$schema$descript","_this$localize","isPassword","stringType","unmaskedPassword","label","data","helper","disabled","schema","required","name","autocomplete","description","suffix","localize","call","undefined","_valueChanged","renderIcon","_this$localize2","localizeBaseKey","toggleUnmaskedPassword","mdiEyeOff","mdiEye","updated","changedProps","has","toggleAttribute","ev","target","format","includes","some","field","static","styles"],"sources":["/workspaces/frontend/src/components/ha-form/ha-form-string.ts"],"sourcesContent":["/* eslint-disable lit/prefer-static-styles */\nimport { mdiEye, mdiEyeOff } from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../ha-icon-button\";\nimport \"../ha-textfield\";\nimport type { HaTextField } from \"../ha-textfield\";\nimport type {\n  HaFormElement,\n  HaFormStringData,\n  HaFormStringSchema,\n} from \"./types\";\nimport { LocalizeFunc, LocalizeKeys } from \"../../common/translations/localize\";\n\nconst MASKED_FIELDS = [\"password\", \"secret\", \"token\"];\n\n@customElement(\"ha-form-string\")\nexport class HaFormString extends LitElement implements HaFormElement {\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property() public localizeBaseKey = \"ui.components.selectors.text\";\n\n  @property({ attribute: false }) public schema!: HaFormStringSchema;\n\n  @property() public data!: HaFormStringData;\n\n  @property() public label!: string;\n\n  @property() public helper?: string;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  @state() protected unmaskedPassword = false;\n\n  @query(\"ha-textfield\") private _input?: HaTextField;\n\n  public focus(): void {\n    if (this._input) {\n      this._input.focus();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-textfield\n        .type=${!this.isPassword\n          ? this.stringType\n          : this.unmaskedPassword\n            ? \"text\"\n            : \"password\"}\n        .label=${this.label}\n        .value=${this.data || \"\"}\n        .helper=${this.helper}\n        helperPersistent\n        .disabled=${this.disabled}\n        .required=${this.schema.required}\n        .autoValidate=${this.schema.required}\n        .name=${this.schema.name}\n        .autocomplete=${this.schema.autocomplete}\n        .suffix=${this.isPassword\n          ? // reserve some space for the icon.\n            html`<div style=\"width: 24px\"></div>`\n          : this.schema.description?.suffix}\n        .validationMessage=${this.schema.required\n          ? this.localize?.(\"ui.common.error_required\")\n          : undefined}\n        @input=${this._valueChanged}\n        @change=${this._valueChanged}\n      ></ha-textfield>\n      ${this.renderIcon()}\n    `;\n  }\n\n  protected renderIcon() {\n    if (!this.isPassword) return nothing;\n    return html`\n      <ha-icon-button\n        toggles\n        .label=${this.localize?.(\n          `${this.localizeBaseKey}.${\n            this.unmaskedPassword ? \"hide_password\" : \"show_password\"\n          }` as LocalizeKeys\n        )}\n        @click=${this.toggleUnmaskedPassword}\n        .path=${this.unmaskedPassword ? mdiEyeOff : mdiEye}\n      ></ha-icon-button>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"schema\")) {\n      this.toggleAttribute(\"own-margin\", !!this.schema.required);\n    }\n  }\n\n  protected toggleUnmaskedPassword(): void {\n    this.unmaskedPassword = !this.unmaskedPassword;\n  }\n\n  protected _valueChanged(ev: Event): void {\n    let value: string | undefined = (ev.target as HaTextField).value;\n    if (this.data === value) {\n      return;\n    }\n    if (value === \"\" && !this.schema.required) {\n      value = undefined;\n    }\n    fireEvent(this, \"value-changed\", {\n      value,\n    });\n  }\n\n  protected get stringType(): string {\n    if (this.schema.format) {\n      if ([\"email\", \"url\"].includes(this.schema.format)) {\n        return this.schema.format;\n      }\n      if (this.schema.format === \"fqdnurl\") {\n        return \"url\";\n      }\n    }\n    return \"text\";\n  }\n\n  protected get isPassword(): boolean {\n    return MASKED_FIELDS.some((field) => this.schema.name.includes(field));\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        position: relative;\n      }\n      :host([own-margin]) {\n        margin-bottom: 5px;\n      }\n      ha-textfield {\n        display: block;\n      }\n      ha-icon-button {\n        position: absolute;\n        top: 8px;\n        right: 8px;\n        inset-inline-start: initial;\n        inset-inline-end: 8px;\n        --mdc-icon-button-size: 40px;\n        --mdc-icon-size: 20px;\n        color: var(--secondary-text-color);\n        direction: var(--direction);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-form-string\": HaFormString;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}