{"ast":null,"code":"import { showToast } from \"./toast\";\nexport const supportsServiceWorker = () => \"serviceWorker\" in navigator && (location.protocol === \"https:\" || location.hostname === \"localhost\");\nexport const registerServiceWorker = async (rootEl, notifyUpdate = true) => {\n  if (!supportsServiceWorker()) {\n    return;\n  }\n\n  // If the active service worker changes, refresh the page because the cache has changed\n  navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n    location.reload();\n  });\n  const reg = await navigator.serviceWorker.register(\"/service_worker.js\");\n  if (!notifyUpdate || __DEV__ || __DEMO__) {\n    return;\n  }\n  reg.addEventListener(\"updatefound\", () => {\n    const installingWorker = reg.installing;\n    if (!installingWorker) {\n      return;\n    }\n    installingWorker.addEventListener(\"statechange\", () => {\n      if (installingWorker.state !== \"installed\" || !navigator.serviceWorker.controller) {\n        return;\n      }\n\n      // Notify users a new frontend is available.\n      showToast(rootEl, {\n        message: \"A new version of the frontend is available.\",\n        action: {\n          // We tell the service worker to call skipWaiting, which activates\n          // the new service worker. Above we listen for `controllerchange`\n          // so we reload the page once a new service worker activates.\n          action: () => installingWorker.postMessage({\n            type: \"skipWaiting\"\n          }),\n          text: \"reload\"\n        },\n        duration: 0,\n        dismissable: false\n      });\n    });\n  });\n};","map":{"version":3,"names":["showToast","supportsServiceWorker","navigator","location","protocol","hostname","registerServiceWorker","rootEl","notifyUpdate","serviceWorker","addEventListener","reload","reg","register","__DEV__","__DEMO__","installingWorker","installing","state","controller","message","action","postMessage","type","text","duration","dismissable"],"sources":["/workspaces/frontend/src/util/register-service-worker.ts"],"sourcesContent":["import { showToast } from \"./toast\";\n\nexport const supportsServiceWorker = () =>\n  \"serviceWorker\" in navigator &&\n  (location.protocol === \"https:\" || location.hostname === \"localhost\");\n\nexport const registerServiceWorker = async (\n  rootEl: HTMLElement,\n  notifyUpdate = true\n) => {\n  if (!supportsServiceWorker()) {\n    return;\n  }\n\n  // If the active service worker changes, refresh the page because the cache has changed\n  navigator.serviceWorker.addEventListener(\"controllerchange\", () => {\n    location.reload();\n  });\n\n  const reg = await navigator.serviceWorker.register(\"/service_worker.js\");\n\n  if (!notifyUpdate || __DEV__ || __DEMO__) {\n    return;\n  }\n\n  reg.addEventListener(\"updatefound\", () => {\n    const installingWorker = reg.installing;\n\n    if (!installingWorker) {\n      return;\n    }\n\n    installingWorker.addEventListener(\"statechange\", () => {\n      if (\n        installingWorker.state !== \"installed\" ||\n        !navigator.serviceWorker.controller\n      ) {\n        return;\n      }\n\n      // Notify users a new frontend is available.\n      showToast(rootEl, {\n        message: \"A new version of the frontend is available.\",\n        action: {\n          // We tell the service worker to call skipWaiting, which activates\n          // the new service worker. Above we listen for `controllerchange`\n          // so we reload the page once a new service worker activates.\n          action: () => installingWorker.postMessage({ type: \"skipWaiting\" }),\n          text: \"reload\",\n        },\n        duration: 0,\n        dismissable: false,\n      });\n    });\n  });\n};\n"],"mappings":"AAAA,SAASA,SAAS,QAAQ,SAAS;AAEnC,OAAO,MAAMC,qBAAqB,GAAGA,CAAA,KACnC,eAAe,IAAIC,SAAS,KAC3BC,QAAQ,CAACC,QAAQ,KAAK,QAAQ,IAAID,QAAQ,CAACE,QAAQ,KAAK,WAAW,CAAC;AAEvE,OAAO,MAAMC,qBAAqB,GAAG,MAAAA,CACnCC,MAAmB,EACnBC,YAAY,GAAG,IAAI,KAChB;EACH,IAAI,CAACP,qBAAqB,CAAC,CAAC,EAAE;IAC5B;EACF;;EAEA;EACAC,SAAS,CAACO,aAAa,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;IACjEP,QAAQ,CAACQ,MAAM,CAAC,CAAC;EACnB,CAAC,CAAC;EAEF,MAAMC,GAAG,GAAG,MAAMV,SAAS,CAACO,aAAa,CAACI,QAAQ,CAAC,oBAAoB,CAAC;EAExE,IAAI,CAACL,YAAY,IAAIM,OAAO,IAAIC,QAAQ,EAAE;IACxC;EACF;EAEAH,GAAG,CAACF,gBAAgB,CAAC,aAAa,EAAE,MAAM;IACxC,MAAMM,gBAAgB,GAAGJ,GAAG,CAACK,UAAU;IAEvC,IAAI,CAACD,gBAAgB,EAAE;MACrB;IACF;IAEAA,gBAAgB,CAACN,gBAAgB,CAAC,aAAa,EAAE,MAAM;MACrD,IACEM,gBAAgB,CAACE,KAAK,KAAK,WAAW,IACtC,CAAChB,SAAS,CAACO,aAAa,CAACU,UAAU,EACnC;QACA;MACF;;MAEA;MACAnB,SAAS,CAACO,MAAM,EAAE;QAChBa,OAAO,EAAE,6CAA6C;QACtDC,MAAM,EAAE;UACN;UACA;UACA;UACAA,MAAM,EAAEA,CAAA,KAAML,gBAAgB,CAACM,WAAW,CAAC;YAAEC,IAAI,EAAE;UAAc,CAAC,CAAC;UACnEC,IAAI,EAAE;QACR,CAAC;QACDC,QAAQ,EAAE,CAAC;QACXC,WAAW,EAAE;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}