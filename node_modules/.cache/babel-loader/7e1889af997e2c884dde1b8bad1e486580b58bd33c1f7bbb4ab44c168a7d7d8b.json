{"ast":null,"code":"import { mainWindow } from \"../common/dom/get_main_window\";\nimport { ancestorsWithProperty } from \"../common/dom/ancestors-with-property\";\nimport { deepActiveElement } from \"../common/dom/deep-active-element\";\nimport { nextRender } from \"../common/util/render-status\";\nconst LOADED = {};\nexport const FOCUS_TARGET = Symbol.for(\"HA focus target\");\nexport const showDialog = async (element, root, dialogTag, dialogParams, dialogImport, addHistory = true) => {\n  var _mainWindow$history$s;\n  if (!(dialogTag in LOADED)) {\n    if (!dialogImport) {\n      if (__DEV__) {\n        // eslint-disable-next-line\n        console.warn(\"Asked to show dialog that's not loaded and can't be imported\");\n      }\n      return false;\n    }\n    LOADED[dialogTag] = {\n      element: dialogImport().then(() => {\n        const dialogEl = document.createElement(dialogTag);\n        element.provideHass(dialogEl);\n        return dialogEl;\n      })\n    };\n  }\n\n  // Get the focus targets after the dialog closes, but keep the original if dialog is being replaced\n  if ((_mainWindow$history$s = mainWindow.history.state) !== null && _mainWindow$history$s !== void 0 && _mainWindow$history$s.replaced) {\n    LOADED[dialogTag].closedFocusTargets = LOADED[mainWindow.history.state.dialog].closedFocusTargets;\n    delete LOADED[mainWindow.history.state.dialog].closedFocusTargets;\n  } else {\n    LOADED[dialogTag].closedFocusTargets = ancestorsWithProperty(deepActiveElement(), FOCUS_TARGET);\n  }\n  if (addHistory) {\n    var _mainWindow$history$s2, _mainWindow$history$s3;\n    mainWindow.history.replaceState({\n      dialog: dialogTag,\n      open: false,\n      oldState: (_mainWindow$history$s2 = mainWindow.history.state) !== null && _mainWindow$history$s2 !== void 0 && _mainWindow$history$s2.open && ((_mainWindow$history$s3 = mainWindow.history.state) === null || _mainWindow$history$s3 === void 0 ? void 0 : _mainWindow$history$s3.dialog) !== dialogTag ? mainWindow.history.state : null\n    }, \"\");\n    try {\n      mainWindow.history.pushState({\n        dialog: dialogTag,\n        dialogParams: dialogParams,\n        open: true\n      }, \"\");\n    } catch (err) {\n      // dialogParams could not be cloned, probably contains callback\n      mainWindow.history.pushState({\n        dialog: dialogTag,\n        dialogParams: null,\n        open: true\n      }, \"\");\n    }\n  }\n  const dialogElement = await LOADED[dialogTag].element;\n  dialogElement.addEventListener(\"dialog-closed\", _handleClosedFocus);\n\n  // Append it again so it's the last element in the root,\n  // so it's guaranteed to be on top of the other elements\n  root.appendChild(dialogElement);\n  dialogElement.showDialog(dialogParams);\n  return true;\n};\nexport const replaceDialog = dialogElement => {\n  mainWindow.history.replaceState({\n    ...mainWindow.history.state,\n    replaced: true\n  }, \"\");\n  dialogElement.removeEventListener(\"dialog-closed\", _handleClosedFocus);\n};\nexport const closeDialog = async dialogTag => {\n  if (!(dialogTag in LOADED)) {\n    return true;\n  }\n  const dialogElement = await LOADED[dialogTag].element;\n  if (dialogElement.closeDialog) {\n    return dialogElement.closeDialog() !== false;\n  }\n  return true;\n};\nexport const makeDialogManager = (element, root) => {\n  element.addEventListener(\"show-dialog\", e => {\n    const {\n      dialogTag,\n      dialogImport,\n      dialogParams,\n      addHistory\n    } = e.detail;\n    showDialog(element, root, dialogTag, dialogParams, dialogImport, addHistory);\n  });\n};\nconst _handleClosedFocus = async ev => {\n  const closedFocusTargets = LOADED[ev.detail.dialog].closedFocusTargets;\n  delete LOADED[ev.detail.dialog].closedFocusTargets;\n  if (!closedFocusTargets) return;\n\n  // Undo whatever the browser focused to provide easy checking\n  let focusedElement = deepActiveElement();\n  if (focusedElement instanceof HTMLElement) focusedElement.blur();\n\n  // Make sure backdrop is fully updated before trying (especially needed for underlay dialogs)\n  await nextRender();\n\n  // Try all targets in order and stop when one works\n  for (const focusTarget of closedFocusTargets) {\n    if (focusTarget instanceof HTMLElement) {\n      focusTarget.focus();\n      focusedElement = deepActiveElement();\n      if (focusedElement && focusedElement !== document.body) return;\n    }\n  }\n  if (__DEV__) {\n    // eslint-disable-next-line no-console\n    console.warn(\"Failed to focus any targets after closing dialog: %o\", closedFocusTargets);\n  }\n};","map":{"version":3,"names":["mainWindow","ancestorsWithProperty","deepActiveElement","nextRender","LOADED","FOCUS_TARGET","Symbol","for","showDialog","element","root","dialogTag","dialogParams","dialogImport","addHistory","_mainWindow$history$s","__DEV__","console","warn","then","dialogEl","document","createElement","provideHass","history","state","replaced","closedFocusTargets","dialog","_mainWindow$history$s2","_mainWindow$history$s3","replaceState","open","oldState","pushState","err","dialogElement","addEventListener","_handleClosedFocus","appendChild","replaceDialog","removeEventListener","closeDialog","makeDialogManager","e","detail","ev","focusedElement","HTMLElement","blur","focusTarget","focus","body"],"sources":["/workspaces/frontend/src/dialogs/make-dialog-manager.ts"],"sourcesContent":["import { HASSDomEvent, ValidHassDomEvent } from \"../common/dom/fire_event\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { ProvideHassElement } from \"../mixins/provide-hass-lit-mixin\";\nimport { ancestorsWithProperty } from \"../common/dom/ancestors-with-property\";\nimport { deepActiveElement } from \"../common/dom/deep-active-element\";\nimport { nextRender } from \"../common/util/render-status\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"show-dialog\": ShowDialogParams<unknown>;\n    \"close-dialog\": undefined;\n    \"dialog-closed\": DialogClosedParams;\n  }\n  // for add event listener\n  interface HTMLElementEventMap {\n    \"show-dialog\": HASSDomEvent<ShowDialogParams<unknown>>;\n    \"dialog-closed\": HASSDomEvent<DialogClosedParams>;\n  }\n}\n\nexport interface HassDialog<T = HASSDomEvents[ValidHassDomEvent]>\n  extends HTMLElement {\n  showDialog(params: T);\n  closeDialog?: () => boolean | void;\n}\n\ninterface ShowDialogParams<T> {\n  dialogTag: keyof HTMLElementTagNameMap;\n  dialogImport: () => Promise<unknown>;\n  dialogParams: T;\n  addHistory?: boolean;\n}\n\nexport interface DialogClosedParams {\n  dialog: string;\n}\n\nexport interface DialogState {\n  dialog: string;\n  open: boolean;\n  oldState: null | DialogState;\n  dialogParams?: unknown;\n}\n\ninterface LoadedDialogInfo {\n  element: Promise<HassDialog>;\n  closedFocusTargets?: Set<Element>;\n}\n\ninterface LoadedDialogsDict {\n  [tag: string]: LoadedDialogInfo;\n}\n\nconst LOADED: LoadedDialogsDict = {};\nexport const FOCUS_TARGET = Symbol.for(\"HA focus target\");\n\nexport const showDialog = async (\n  element: HTMLElement & ProvideHassElement,\n  root: ShadowRoot | HTMLElement,\n  dialogTag: string,\n  dialogParams: unknown,\n  dialogImport?: () => Promise<unknown>,\n  addHistory = true\n): Promise<boolean> => {\n  if (!(dialogTag in LOADED)) {\n    if (!dialogImport) {\n      if (__DEV__) {\n        // eslint-disable-next-line\n        console.warn(\n          \"Asked to show dialog that's not loaded and can't be imported\"\n        );\n      }\n      return false;\n    }\n    LOADED[dialogTag] = {\n      element: dialogImport().then(() => {\n        const dialogEl = document.createElement(dialogTag) as HassDialog;\n        element.provideHass(dialogEl);\n        return dialogEl;\n      }),\n    };\n  }\n\n  // Get the focus targets after the dialog closes, but keep the original if dialog is being replaced\n  if (mainWindow.history.state?.replaced) {\n    LOADED[dialogTag].closedFocusTargets =\n      LOADED[mainWindow.history.state.dialog].closedFocusTargets;\n    delete LOADED[mainWindow.history.state.dialog].closedFocusTargets;\n  } else {\n    LOADED[dialogTag].closedFocusTargets = ancestorsWithProperty(\n      deepActiveElement(),\n      FOCUS_TARGET\n    );\n  }\n\n  if (addHistory) {\n    mainWindow.history.replaceState(\n      {\n        dialog: dialogTag,\n        open: false,\n        oldState:\n          mainWindow.history.state?.open &&\n          mainWindow.history.state?.dialog !== dialogTag\n            ? mainWindow.history.state\n            : null,\n      },\n      \"\"\n    );\n    try {\n      mainWindow.history.pushState(\n        { dialog: dialogTag, dialogParams: dialogParams, open: true },\n        \"\"\n      );\n    } catch (err: any) {\n      // dialogParams could not be cloned, probably contains callback\n      mainWindow.history.pushState(\n        { dialog: dialogTag, dialogParams: null, open: true },\n        \"\"\n      );\n    }\n  }\n\n  const dialogElement = await LOADED[dialogTag].element;\n  dialogElement.addEventListener(\"dialog-closed\", _handleClosedFocus);\n\n  // Append it again so it's the last element in the root,\n  // so it's guaranteed to be on top of the other elements\n  root.appendChild(dialogElement);\n  dialogElement.showDialog(dialogParams);\n\n  return true;\n};\n\nexport const replaceDialog = (dialogElement: HassDialog) => {\n  mainWindow.history.replaceState(\n    { ...mainWindow.history.state, replaced: true },\n    \"\"\n  );\n  dialogElement.removeEventListener(\"dialog-closed\", _handleClosedFocus);\n};\n\nexport const closeDialog = async (dialogTag: string): Promise<boolean> => {\n  if (!(dialogTag in LOADED)) {\n    return true;\n  }\n  const dialogElement = await LOADED[dialogTag].element;\n  if (dialogElement.closeDialog) {\n    return dialogElement.closeDialog() !== false;\n  }\n  return true;\n};\n\nexport const makeDialogManager = (\n  element: HTMLElement & ProvideHassElement,\n  root: ShadowRoot | HTMLElement\n) => {\n  element.addEventListener(\n    \"show-dialog\",\n    (e: HASSDomEvent<ShowDialogParams<unknown>>) => {\n      const { dialogTag, dialogImport, dialogParams, addHistory } = e.detail;\n      showDialog(\n        element,\n        root,\n        dialogTag,\n        dialogParams,\n        dialogImport,\n        addHistory\n      );\n    }\n  );\n};\n\nconst _handleClosedFocus = async (ev: HASSDomEvent<DialogClosedParams>) => {\n  const closedFocusTargets = LOADED[ev.detail.dialog].closedFocusTargets;\n  delete LOADED[ev.detail.dialog].closedFocusTargets;\n  if (!closedFocusTargets) return;\n\n  // Undo whatever the browser focused to provide easy checking\n  let focusedElement = deepActiveElement();\n  if (focusedElement instanceof HTMLElement) focusedElement.blur();\n\n  // Make sure backdrop is fully updated before trying (especially needed for underlay dialogs)\n  await nextRender();\n\n  // Try all targets in order and stop when one works\n  for (const focusTarget of closedFocusTargets) {\n    if (focusTarget instanceof HTMLElement) {\n      focusTarget.focus();\n      focusedElement = deepActiveElement();\n      if (focusedElement && focusedElement !== document.body) return;\n    }\n  }\n\n  if (__DEV__) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      \"Failed to focus any targets after closing dialog: %o\",\n      closedFocusTargets\n    );\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}