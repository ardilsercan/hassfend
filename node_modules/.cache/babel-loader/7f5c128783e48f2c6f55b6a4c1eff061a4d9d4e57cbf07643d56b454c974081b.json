{"ast":null,"code":"import { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nexport { fetchDeviceRegistry, subscribeDeviceRegistry } from \"./ws-device_registry\";\nexport const fallbackDeviceName = (hass, entities) => {\n  for (const entity of entities || []) {\n    const entityId = typeof entity === \"string\" ? entity : entity.entity_id;\n    const stateObj = hass.states[entityId];\n    if (stateObj) {\n      return computeStateName(stateObj);\n    }\n  }\n  return undefined;\n};\nexport const computeDeviceName = (device, hass, entities) => device.name_by_user || device.name || entities && fallbackDeviceName(hass, entities) || hass.localize(\"ui.panel.config.devices.unnamed_device\", {\n  type: hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n});\nexport const devicesInArea = (devices, areaId) => devices.filter(device => device.area_id === areaId);\nexport const updateDeviceRegistryEntry = (hass, deviceId, updates) => hass.callWS({\n  type: \"config/device_registry/update\",\n  device_id: deviceId,\n  ...updates\n});\nexport const removeConfigEntryFromDevice = (hass, deviceId, configEntryId) => hass.callWS({\n  type: \"config/device_registry/remove_config_entry\",\n  device_id: deviceId,\n  config_entry_id: configEntryId\n});\nexport const sortDeviceRegistryByName = (entries, language) => entries.sort((entry1, entry2) => caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language));\nexport const getDeviceEntityLookup = entities => {\n  const deviceEntityLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\nexport const getDeviceEntityDisplayLookup = entities => {\n  const deviceEntityLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\nexport const getDeviceIntegrationLookup = (entitySources, entities) => {\n  const deviceIntegrations = {};\n  for (const entity of entities) {\n    const source = entitySources[entity.entity_id];\n    if (!(source !== null && source !== void 0 && source.domain) || entity.device_id === null) {\n      continue;\n    }\n    if (!deviceIntegrations[entity.device_id]) {\n      deviceIntegrations[entity.device_id] = [];\n    }\n    deviceIntegrations[entity.device_id].push(source.domain);\n  }\n  return deviceIntegrations;\n};","map":{"version":3,"names":["computeStateName","caseInsensitiveStringCompare","fetchDeviceRegistry","subscribeDeviceRegistry","fallbackDeviceName","hass","entities","entity","entityId","entity_id","stateObj","states","undefined","computeDeviceName","device","name_by_user","name","localize","type","entry_type","devicesInArea","devices","areaId","filter","area_id","updateDeviceRegistryEntry","deviceId","updates","callWS","device_id","removeConfigEntryFromDevice","configEntryId","config_entry_id","sortDeviceRegistryByName","entries","language","sort","entry1","entry2","getDeviceEntityLookup","deviceEntityLookup","push","getDeviceEntityDisplayLookup","getDeviceIntegrationLookup","entitySources","deviceIntegrations","source","domain"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/device_registry.ts"],"sourcesContent":["import { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport type {\n  EntityRegistryDisplayEntry,\n  EntityRegistryEntry,\n} from \"./entity_registry\";\nimport type { EntitySources } from \"./entity_sources\";\n\nexport {\n  fetchDeviceRegistry,\n  subscribeDeviceRegistry,\n} from \"./ws-device_registry\";\n\nexport interface DeviceRegistryEntry {\n  id: string;\n  config_entries: string[];\n  connections: Array<[string, string]>;\n  identifiers: Array<[string, string]>;\n  manufacturer: string | null;\n  model: string | null;\n  name: string | null;\n  sw_version: string | null;\n  hw_version: string | null;\n  serial_number: string | null;\n  via_device_id: string | null;\n  area_id: string | null;\n  name_by_user: string | null;\n  entry_type: \"service\" | null;\n  disabled_by: \"user\" | \"integration\" | \"config_entry\" | null;\n  configuration_url: string | null;\n}\n\nexport interface DeviceEntityDisplayLookup {\n  [deviceId: string]: EntityRegistryDisplayEntry[];\n}\n\nexport interface DeviceEntityLookup {\n  [deviceId: string]: EntityRegistryEntry[];\n}\n\nexport interface DeviceRegistryEntryMutableParams {\n  area_id?: string | null;\n  name_by_user?: string | null;\n  disabled_by?: string | null;\n}\n\nexport const fallbackDeviceName = (\n  hass: HomeAssistant,\n  entities: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) => {\n  for (const entity of entities || []) {\n    const entityId = typeof entity === \"string\" ? entity : entity.entity_id;\n    const stateObj = hass.states[entityId];\n    if (stateObj) {\n      return computeStateName(stateObj);\n    }\n  }\n  return undefined;\n};\n\nexport const computeDeviceName = (\n  device: DeviceRegistryEntry,\n  hass: HomeAssistant,\n  entities?: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) =>\n  device.name_by_user ||\n  device.name ||\n  (entities && fallbackDeviceName(hass, entities)) ||\n  hass.localize(\"ui.panel.config.devices.unnamed_device\", {\n    type: hass.localize(\n      `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n    ),\n  });\n\nexport const devicesInArea = (devices: DeviceRegistryEntry[], areaId: string) =>\n  devices.filter((device) => device.area_id === areaId);\n\nexport const updateDeviceRegistryEntry = (\n  hass: HomeAssistant,\n  deviceId: string,\n  updates: Partial<DeviceRegistryEntryMutableParams>\n) =>\n  hass.callWS<DeviceRegistryEntry>({\n    type: \"config/device_registry/update\",\n    device_id: deviceId,\n    ...updates,\n  });\n\nexport const removeConfigEntryFromDevice = (\n  hass: HomeAssistant,\n  deviceId: string,\n  configEntryId: string\n) =>\n  hass.callWS<DeviceRegistryEntry>({\n    type: \"config/device_registry/remove_config_entry\",\n    device_id: deviceId,\n    config_entry_id: configEntryId,\n  });\n\nexport const sortDeviceRegistryByName = (\n  entries: DeviceRegistryEntry[],\n  language: string\n) =>\n  entries.sort((entry1, entry2) =>\n    caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language)\n  );\n\nexport const getDeviceEntityLookup = (\n  entities: EntityRegistryEntry[]\n): DeviceEntityLookup => {\n  const deviceEntityLookup: DeviceEntityLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\n\nexport const getDeviceEntityDisplayLookup = (\n  entities: EntityRegistryDisplayEntry[]\n): DeviceEntityDisplayLookup => {\n  const deviceEntityLookup: DeviceEntityDisplayLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\n\nexport const getDeviceIntegrationLookup = (\n  entitySources: EntitySources,\n  entities: EntityRegistryDisplayEntry[]\n): Record<string, string[]> => {\n  const deviceIntegrations: Record<string, string[]> = {};\n\n  for (const entity of entities) {\n    const source = entitySources[entity.entity_id];\n    if (!source?.domain || entity.device_id === null) {\n      continue;\n    }\n\n    if (!deviceIntegrations[entity.device_id!]) {\n      deviceIntegrations[entity.device_id!] = [];\n    }\n    deviceIntegrations[entity.device_id!].push(source.domain);\n  }\n  return deviceIntegrations;\n};\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,qCAAqC;AACtE,SAASC,4BAA4B,QAAQ,0BAA0B;AAQvE,SACEC,mBAAmB,EACnBC,uBAAuB,QAClB,sBAAsB;AAmC7B,OAAO,MAAMC,kBAAkB,GAAGA,CAChCC,IAAmB,EACnBC,QAAyE,KACtE;EACH,KAAK,MAAMC,MAAM,IAAID,QAAQ,IAAI,EAAE,EAAE;IACnC,MAAME,QAAQ,GAAG,OAAOD,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGA,MAAM,CAACE,SAAS;IACvE,MAAMC,QAAQ,GAAGL,IAAI,CAACM,MAAM,CAACH,QAAQ,CAAC;IACtC,IAAIE,QAAQ,EAAE;MACZ,OAAOV,gBAAgB,CAACU,QAAQ,CAAC;IACnC;EACF;EACA,OAAOE,SAAS;AAClB,CAAC;AAED,OAAO,MAAMC,iBAAiB,GAAGA,CAC/BC,MAA2B,EAC3BT,IAAmB,EACnBC,QAA0E,KAE1EQ,MAAM,CAACC,YAAY,IACnBD,MAAM,CAACE,IAAI,IACVV,QAAQ,IAAIF,kBAAkB,CAACC,IAAI,EAAEC,QAAQ,CAAE,IAChDD,IAAI,CAACY,QAAQ,CAAC,wCAAwC,EAAE;EACtDC,IAAI,EAAEb,IAAI,CAACY,QAAQ,CAChB,gCAA+BH,MAAM,CAACK,UAAU,IAAI,QAAS,EAChE;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMC,aAAa,GAAGA,CAACC,OAA8B,EAAEC,MAAc,KAC1ED,OAAO,CAACE,MAAM,CAAET,MAAM,IAAKA,MAAM,CAACU,OAAO,KAAKF,MAAM,CAAC;AAEvD,OAAO,MAAMG,yBAAyB,GAAGA,CACvCpB,IAAmB,EACnBqB,QAAgB,EAChBC,OAAkD,KAElDtB,IAAI,CAACuB,MAAM,CAAsB;EAC/BV,IAAI,EAAE,+BAA+B;EACrCW,SAAS,EAAEH,QAAQ;EACnB,GAAGC;AACL,CAAC,CAAC;AAEJ,OAAO,MAAMG,2BAA2B,GAAGA,CACzCzB,IAAmB,EACnBqB,QAAgB,EAChBK,aAAqB,KAErB1B,IAAI,CAACuB,MAAM,CAAsB;EAC/BV,IAAI,EAAE,4CAA4C;EAClDW,SAAS,EAAEH,QAAQ;EACnBM,eAAe,EAAED;AACnB,CAAC,CAAC;AAEJ,OAAO,MAAME,wBAAwB,GAAGA,CACtCC,OAA8B,EAC9BC,QAAgB,KAEhBD,OAAO,CAACE,IAAI,CAAC,CAACC,MAAM,EAAEC,MAAM,KAC1BrC,4BAA4B,CAACoC,MAAM,CAACrB,IAAI,IAAI,EAAE,EAAEsB,MAAM,CAACtB,IAAI,IAAI,EAAE,EAAEmB,QAAQ,CAC7E,CAAC;AAEH,OAAO,MAAMI,qBAAqB,GAChCjC,QAA+B,IACR;EACvB,MAAMkC,kBAAsC,GAAG,CAAC,CAAC;EACjD,KAAK,MAAMjC,MAAM,IAAID,QAAQ,EAAE;IAC7B,IAAI,CAACC,MAAM,CAACsB,SAAS,EAAE;MACrB;IACF;IACA,IAAI,EAAEtB,MAAM,CAACsB,SAAS,IAAIW,kBAAkB,CAAC,EAAE;MAC7CA,kBAAkB,CAACjC,MAAM,CAACsB,SAAS,CAAC,GAAG,EAAE;IAC3C;IACAW,kBAAkB,CAACjC,MAAM,CAACsB,SAAS,CAAC,CAACY,IAAI,CAAClC,MAAM,CAAC;EACnD;EACA,OAAOiC,kBAAkB;AAC3B,CAAC;AAED,OAAO,MAAME,4BAA4B,GACvCpC,QAAsC,IACR;EAC9B,MAAMkC,kBAA6C,GAAG,CAAC,CAAC;EACxD,KAAK,MAAMjC,MAAM,IAAID,QAAQ,EAAE;IAC7B,IAAI,CAACC,MAAM,CAACsB,SAAS,EAAE;MACrB;IACF;IACA,IAAI,EAAEtB,MAAM,CAACsB,SAAS,IAAIW,kBAAkB,CAAC,EAAE;MAC7CA,kBAAkB,CAACjC,MAAM,CAACsB,SAAS,CAAC,GAAG,EAAE;IAC3C;IACAW,kBAAkB,CAACjC,MAAM,CAACsB,SAAS,CAAC,CAACY,IAAI,CAAClC,MAAM,CAAC;EACnD;EACA,OAAOiC,kBAAkB;AAC3B,CAAC;AAED,OAAO,MAAMG,0BAA0B,GAAGA,CACxCC,aAA4B,EAC5BtC,QAAsC,KACT;EAC7B,MAAMuC,kBAA4C,GAAG,CAAC,CAAC;EAEvD,KAAK,MAAMtC,MAAM,IAAID,QAAQ,EAAE;IAC7B,MAAMwC,MAAM,GAAGF,aAAa,CAACrC,MAAM,CAACE,SAAS,CAAC;IAC9C,IAAI,EAACqC,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEC,MAAM,KAAIxC,MAAM,CAACsB,SAAS,KAAK,IAAI,EAAE;MAChD;IACF;IAEA,IAAI,CAACgB,kBAAkB,CAACtC,MAAM,CAACsB,SAAS,CAAE,EAAE;MAC1CgB,kBAAkB,CAACtC,MAAM,CAACsB,SAAS,CAAE,GAAG,EAAE;IAC5C;IACAgB,kBAAkB,CAACtC,MAAM,CAACsB,SAAS,CAAE,CAACY,IAAI,CAACK,MAAM,CAACC,MAAM,CAAC;EAC3D;EACA,OAAOF,kBAAkB;AAC3B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}