{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '../../../focus/md-focus-ring.js';\nimport '../../../labs/item/item.js';\nimport '../../../ripple/ripple.js';\nimport { html, LitElement, nothing } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { literal, html as staticHtml } from 'lit/static-html.js';\nimport { requestUpdateOnAriaChange } from '../../../internal/aria/delegate.js';\nimport { createRequestActivationEvent } from '../list-navigation-helpers.js';\n/**\n * @fires request-activation {Event} Requests the list to set `tabindex=0` on\n * the item and focus it. --bubbles --composed\n */\nexport class ListItemEl extends LitElement {\n  constructor() {\n    super(...arguments);\n    /**\n     * Disables the item and makes it non-selectable and non-interactive.\n     */\n    this.disabled = false;\n    /**\n     * Sets the behavior of the list item, defaults to \"text\". Change to \"link\" or\n     * \"button\" for interactive items.\n     */\n    this.type = 'text';\n    /**\n     * READONLY. Sets the `md-list-item` attribute on the element.\n     */\n    this.isListItem = true;\n    /**\n     * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n     */\n    this.href = '';\n    /**\n     * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\n     * set.\n     */\n    this.target = '';\n  }\n  get isDisabled() {\n    return this.disabled && this.type !== 'link';\n  }\n  willUpdate(changed) {\n    if (this.href) {\n      this.type = 'link';\n    }\n    super.willUpdate(changed);\n  }\n  render() {\n    return this.renderListItem(html`\n      <md-item>\n        <div slot=\"container\">\n          ${this.renderRipple()} ${this.renderFocusRing()}\n        </div>\n        <slot name=\"start\" slot=\"start\"></slot>\n        <slot name=\"end\" slot=\"end\"></slot>\n        ${this.renderBody()}\n      </md-item>\n    `);\n  }\n  /**\n   * Renders the root list item.\n   *\n   * @param content the child content of the list item.\n   */\n  renderListItem(content) {\n    const isAnchor = this.type === 'link';\n    let tag;\n    switch (this.type) {\n      case 'link':\n        tag = literal`a`;\n        break;\n      case 'button':\n        tag = literal`button`;\n        break;\n      default:\n      case 'text':\n        tag = literal`li`;\n        break;\n    }\n    const isInteractive = this.type !== 'text';\n    // TODO(b/265339866): announce \"button\"/\"link\" inside of a list item. Until\n    // then all are \"listitem\" roles for correct announcement.\n    const target = isAnchor && !!this.target ? this.target : nothing;\n    return staticHtml`\n      <${tag}\n        id=\"item\"\n        tabindex=\"${this.isDisabled || !isInteractive ? -1 : 0}\"\n        ?disabled=${this.isDisabled}\n        role=\"listitem\"\n        aria-selected=${this.ariaSelected || nothing}\n        aria-checked=${this.ariaChecked || nothing}\n        aria-expanded=${this.ariaExpanded || nothing}\n        aria-haspopup=${this.ariaHasPopup || nothing}\n        class=\"list-item ${classMap(this.getRenderClasses())}\"\n        href=${this.href || nothing}\n        target=${target}\n        @focus=${this.onFocus}\n      >${content}</${tag}>\n    `;\n  }\n  /**\n   * Handles rendering of the ripple element.\n   */\n  renderRipple() {\n    if (this.type === 'text') {\n      return nothing;\n    }\n    return html` <md-ripple\n      part=\"ripple\"\n      for=\"item\"\n      ?disabled=${this.isDisabled}></md-ripple>`;\n  }\n  /**\n   * Handles rendering of the focus ring.\n   */\n  renderFocusRing() {\n    if (this.type === 'text') {\n      return nothing;\n    }\n    return html` <md-focus-ring\n      @visibility-changed=${this.onFocusRingVisibilityChanged}\n      part=\"focus-ring\"\n      for=\"item\"\n      inward></md-focus-ring>`;\n  }\n  onFocusRingVisibilityChanged(e) {}\n  /**\n   * Classes applied to the list item root.\n   */\n  getRenderClasses() {\n    return {\n      'disabled': this.isDisabled\n    };\n  }\n  /**\n   * Handles rendering the headline and supporting text.\n   */\n  renderBody() {\n    return html`\n      <slot></slot>\n      <slot name=\"overline\" slot=\"overline\"></slot>\n      <slot name=\"headline\" slot=\"headline\"></slot>\n      <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n      <slot\n        name=\"trailing-supporting-text\"\n        slot=\"trailing-supporting-text\"></slot>\n    `;\n  }\n  onFocus() {\n    if (this.tabIndex !== -1) {\n      return;\n    }\n    // Handles the case where the user clicks on the element and then tabs.\n    this.dispatchEvent(createRequestActivationEvent());\n  }\n  focus() {\n    var _this$listItemRoot;\n    // TODO(b/300334509): needed for some cases where delegatesFocus doesn't\n    // work programmatically like in FF and select-option\n    (_this$listItemRoot = this.listItemRoot) === null || _this$listItemRoot === void 0 || _this$listItemRoot.focus();\n  }\n}\n(() => {\n  requestUpdateOnAriaChange(ListItemEl);\n})();\n/** @nocollapse */\nListItemEl.shadowRootOptions = {\n  ...LitElement.shadowRootOptions,\n  delegatesFocus: true\n};\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], ListItemEl.prototype, \"disabled\", void 0);\n__decorate([property({\n  reflect: true\n})], ListItemEl.prototype, \"type\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'md-list-item',\n  reflect: true\n})], ListItemEl.prototype, \"isListItem\", void 0);\n__decorate([property()], ListItemEl.prototype, \"href\", void 0);\n__decorate([property()], ListItemEl.prototype, \"target\", void 0);\n__decorate([query('.list-item')], ListItemEl.prototype, \"listItemRoot\", void 0);","map":{"version":3,"names":["html","LitElement","nothing","property","query","classMap","literal","staticHtml","requestUpdateOnAriaChange","createRequestActivationEvent","ListItemEl","constructor","disabled","type","isListItem","href","target","isDisabled","willUpdate","changed","render","renderListItem","renderRipple","renderFocusRing","renderBody","content","isAnchor","tag","isInteractive","ariaSelected","ariaChecked","ariaExpanded","ariaHasPopup","getRenderClasses","onFocus","onFocusRingVisibilityChanged","e","tabIndex","dispatchEvent","focus","_this$listItemRoot","listItemRoot","shadowRootOptions","delegatesFocus","__decorate","Boolean","reflect","attribute"],"sources":["list-item.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../../focus/md-focus-ring.js';\nimport '../../../labs/item/item.js';\nimport '../../../ripple/ripple.js';\n\nimport {html, LitElement, nothing, PropertyValues, TemplateResult} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\nimport {literal, html as staticHtml, StaticValue} from 'lit/static-html.js';\n\nimport {ARIAMixinStrict} from '../../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../../internal/aria/delegate.js';\nimport {\n  createRequestActivationEvent,\n  ListItem,\n} from '../list-navigation-helpers.js';\n\n/**\n * Supported behaviors for a list item.\n */\nexport type ListItemType = 'text' | 'button' | 'link';\n\n/**\n * @fires request-activation {Event} Requests the list to set `tabindex=0` on\n * the item and focus it. --bubbles --composed\n */\nexport class ListItemEl extends LitElement implements ListItem {\n  static {\n    requestUpdateOnAriaChange(ListItemEl);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Disables the item and makes it non-selectable and non-interactive.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * Sets the behavior of the list item, defaults to \"text\". Change to \"link\" or\n   * \"button\" for interactive items.\n   */\n  @property({reflect: true}) type: ListItemType = 'text';\n\n  /**\n   * READONLY. Sets the `md-list-item` attribute on the element.\n   */\n  @property({type: Boolean, attribute: 'md-list-item', reflect: true})\n  isListItem = true;\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n   */\n  @property() href = '';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `target` attribute when `href` is\n   * set.\n   */\n  @property() target: '_blank' | '_parent' | '_self' | '_top' | '' = '';\n\n  @query('.list-item') protected readonly listItemRoot!: HTMLElement | null;\n\n  private get isDisabled() {\n    return this.disabled && this.type !== 'link';\n  }\n\n  protected override willUpdate(changed: PropertyValues<ListItemEl>) {\n    if (this.href) {\n      this.type = 'link';\n    }\n\n    super.willUpdate(changed);\n  }\n\n  protected override render() {\n    return this.renderListItem(html`\n      <md-item>\n        <div slot=\"container\">\n          ${this.renderRipple()} ${this.renderFocusRing()}\n        </div>\n        <slot name=\"start\" slot=\"start\"></slot>\n        <slot name=\"end\" slot=\"end\"></slot>\n        ${this.renderBody()}\n      </md-item>\n    `);\n  }\n\n  /**\n   * Renders the root list item.\n   *\n   * @param content the child content of the list item.\n   */\n  protected renderListItem(content: unknown) {\n    const isAnchor = this.type === 'link';\n    let tag: StaticValue;\n    switch (this.type) {\n      case 'link':\n        tag = literal`a`;\n        break;\n      case 'button':\n        tag = literal`button`;\n        break;\n      default:\n      case 'text':\n        tag = literal`li`;\n        break;\n    }\n\n    const isInteractive = this.type !== 'text';\n    // TODO(b/265339866): announce \"button\"/\"link\" inside of a list item. Until\n    // then all are \"listitem\" roles for correct announcement.\n    const target = isAnchor && !!this.target ? this.target : nothing;\n    return staticHtml`\n      <${tag}\n        id=\"item\"\n        tabindex=\"${this.isDisabled || !isInteractive ? -1 : 0}\"\n        ?disabled=${this.isDisabled}\n        role=\"listitem\"\n        aria-selected=${(this as ARIAMixinStrict).ariaSelected || nothing}\n        aria-checked=${(this as ARIAMixinStrict).ariaChecked || nothing}\n        aria-expanded=${(this as ARIAMixinStrict).ariaExpanded || nothing}\n        aria-haspopup=${(this as ARIAMixinStrict).ariaHasPopup || nothing}\n        class=\"list-item ${classMap(this.getRenderClasses())}\"\n        href=${this.href || nothing}\n        target=${target}\n        @focus=${this.onFocus}\n      >${content}</${tag}>\n    `;\n  }\n\n  /**\n   * Handles rendering of the ripple element.\n   */\n  protected renderRipple(): TemplateResult | typeof nothing {\n    if (this.type === 'text') {\n      return nothing;\n    }\n\n    return html` <md-ripple\n      part=\"ripple\"\n      for=\"item\"\n      ?disabled=${this.isDisabled}></md-ripple>`;\n  }\n\n  /**\n   * Handles rendering of the focus ring.\n   */\n  protected renderFocusRing(): TemplateResult | typeof nothing {\n    if (this.type === 'text') {\n      return nothing;\n    }\n\n    return html` <md-focus-ring\n      @visibility-changed=${this.onFocusRingVisibilityChanged}\n      part=\"focus-ring\"\n      for=\"item\"\n      inward></md-focus-ring>`;\n  }\n\n  protected onFocusRingVisibilityChanged(e: Event) {}\n\n  /**\n   * Classes applied to the list item root.\n   */\n  protected getRenderClasses(): ClassInfo {\n    return {'disabled': this.isDisabled};\n  }\n\n  /**\n   * Handles rendering the headline and supporting text.\n   */\n  protected renderBody() {\n    return html`\n      <slot></slot>\n      <slot name=\"overline\" slot=\"overline\"></slot>\n      <slot name=\"headline\" slot=\"headline\"></slot>\n      <slot name=\"supporting-text\" slot=\"supporting-text\"></slot>\n      <slot\n        name=\"trailing-supporting-text\"\n        slot=\"trailing-supporting-text\"></slot>\n    `;\n  }\n\n  protected onFocus() {\n    if (this.tabIndex !== -1) {\n      return;\n    }\n    // Handles the case where the user clicks on the element and then tabs.\n    this.dispatchEvent(createRequestActivationEvent());\n  }\n\n  override focus() {\n    // TODO(b/300334509): needed for some cases where delegatesFocus doesn't\n    // work programmatically like in FF and select-option\n    this.listItemRoot?.focus();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}