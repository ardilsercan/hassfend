{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldPolyfill = void 0;\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nvar supported_locales_generated_1 = require(\"./supported-locales.generated\");\n/**\n * Check if this is old Node that only supports en\n * @returns\n */\nfunction onlySupportsEn() {\n  return !Intl.NumberFormat.polyfilled && !Intl.NumberFormat.supportedLocalesOf(['es']).length;\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\nfunction supportsES2020() {\n  try {\n    var s = new Intl.NumberFormat('en', {\n      style: 'unit',\n      unit: 'bit',\n      unitDisplay: 'long',\n      notation: 'scientific'\n    }).format(10000);\n    // Check for a plurality bug in environment that uses the older versions of ICU:\n    // https://unicode-org.atlassian.net/browse/ICU-13836\n    if (s !== '1E4 bits') {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n  return true;\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\nfunction supportsES2023() {\n  try {\n    var s = new Intl.NumberFormat('en', {\n      notation: 'compact',\n      minimumSignificantDigits: 3,\n      maximumSignificantDigits: 3,\n      minimumFractionDigits: 2,\n      maximumFractionDigits: 2,\n      // @ts-ignore TS types are old\n      roundingPriority: 'morePrecision'\n    }).format(1e8);\n    return s === '100.00M';\n  } catch (e) {\n    return false;\n  }\n}\nfunction supportedLocalesOf(locale) {\n  if (!locale) {\n    return true;\n  }\n  var locales = Array.isArray(locale) ? locale : [locale];\n  return Intl.NumberFormat.supportedLocalesOf(locales).length === locales.length;\n}\nfunction shouldPolyfill(locale) {\n  if (locale === void 0) {\n    locale = 'en';\n  }\n  if (typeof Intl === 'undefined' || !('NumberFormat' in Intl) || !supportsES2020() || !supportsES2023() || onlySupportsEn() || !supportedLocalesOf(locale)) {\n    return locale ? (0, intl_localematcher_1.match)([locale], supported_locales_generated_1.supportedLocales, 'en') : undefined;\n  }\n}\nexports.shouldPolyfill = shouldPolyfill;","map":{"version":3,"names":["Object","defineProperty","exports","value","shouldPolyfill","intl_localematcher_1","require","supported_locales_generated_1","onlySupportsEn","Intl","NumberFormat","polyfilled","supportedLocalesOf","length","supportsES2020","s","style","unit","unitDisplay","notation","format","e","supportsES2023","minimumSignificantDigits","maximumSignificantDigits","minimumFractionDigits","maximumFractionDigits","roundingPriority","locale","locales","Array","isArray","match","supportedLocales","undefined"],"sources":["/workspaces/frontend/node_modules/@formatjs/intl-numberformat/should-polyfill.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.shouldPolyfill = void 0;\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nvar supported_locales_generated_1 = require(\"./supported-locales.generated\");\n/**\n * Check if this is old Node that only supports en\n * @returns\n */\nfunction onlySupportsEn() {\n    return (!Intl.NumberFormat.polyfilled &&\n        !Intl.NumberFormat.supportedLocalesOf(['es']).length);\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\nfunction supportsES2020() {\n    try {\n        var s = new Intl.NumberFormat('en', {\n            style: 'unit',\n            unit: 'bit',\n            unitDisplay: 'long',\n            notation: 'scientific',\n        }).format(10000);\n        // Check for a plurality bug in environment that uses the older versions of ICU:\n        // https://unicode-org.atlassian.net/browse/ICU-13836\n        if (s !== '1E4 bits') {\n            return false;\n        }\n    }\n    catch (e) {\n        return false;\n    }\n    return true;\n}\n/**\n * Check if Intl.NumberFormat is ES2020 compatible.\n * Caveat: we are not checking `toLocaleString`.\n *\n * @public\n * @param unit unit to check\n */\nfunction supportsES2023() {\n    try {\n        var s = new Intl.NumberFormat('en', {\n            notation: 'compact',\n            minimumSignificantDigits: 3,\n            maximumSignificantDigits: 3,\n            minimumFractionDigits: 2,\n            maximumFractionDigits: 2,\n            // @ts-ignore TS types are old\n            roundingPriority: 'morePrecision',\n        }).format(1e8);\n        return s === '100.00M';\n    }\n    catch (e) {\n        return false;\n    }\n}\nfunction supportedLocalesOf(locale) {\n    if (!locale) {\n        return true;\n    }\n    var locales = Array.isArray(locale) ? locale : [locale];\n    return Intl.NumberFormat.supportedLocalesOf(locales).length === locales.length;\n}\nfunction shouldPolyfill(locale) {\n    if (locale === void 0) { locale = 'en'; }\n    if (typeof Intl === 'undefined' ||\n        !('NumberFormat' in Intl) ||\n        !supportsES2020() ||\n        !supportsES2023() ||\n        onlySupportsEn() ||\n        !supportedLocalesOf(locale)) {\n        return locale ? (0, intl_localematcher_1.match)([locale], supported_locales_generated_1.supportedLocales, 'en') : undefined;\n    }\n}\nexports.shouldPolyfill = shouldPolyfill;\n"],"mappings":"AAAA,YAAY;;AACZA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,cAAc,GAAG,KAAK,CAAC;AAC/B,IAAIC,oBAAoB,GAAGC,OAAO,CAAC,8BAA8B,CAAC;AAClE,IAAIC,6BAA6B,GAAGD,OAAO,CAAC,+BAA+B,CAAC;AAC5E;AACA;AACA;AACA;AACA,SAASE,cAAcA,CAAA,EAAG;EACtB,OAAQ,CAACC,IAAI,CAACC,YAAY,CAACC,UAAU,IACjC,CAACF,IAAI,CAACC,YAAY,CAACE,kBAAkB,CAAC,CAAC,IAAI,CAAC,CAAC,CAACC,MAAM;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAA,EAAG;EACtB,IAAI;IACA,IAAIC,CAAC,GAAG,IAAIN,IAAI,CAACC,YAAY,CAAC,IAAI,EAAE;MAChCM,KAAK,EAAE,MAAM;MACbC,IAAI,EAAE,KAAK;MACXC,WAAW,EAAE,MAAM;MACnBC,QAAQ,EAAE;IACd,CAAC,CAAC,CAACC,MAAM,CAAC,KAAK,CAAC;IAChB;IACA;IACA,IAAIL,CAAC,KAAK,UAAU,EAAE;MAClB,OAAO,KAAK;IAChB;EACJ,CAAC,CACD,OAAOM,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;EACA,OAAO,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,cAAcA,CAAA,EAAG;EACtB,IAAI;IACA,IAAIP,CAAC,GAAG,IAAIN,IAAI,CAACC,YAAY,CAAC,IAAI,EAAE;MAChCS,QAAQ,EAAE,SAAS;MACnBI,wBAAwB,EAAE,CAAC;MAC3BC,wBAAwB,EAAE,CAAC;MAC3BC,qBAAqB,EAAE,CAAC;MACxBC,qBAAqB,EAAE,CAAC;MACxB;MACAC,gBAAgB,EAAE;IACtB,CAAC,CAAC,CAACP,MAAM,CAAC,GAAG,CAAC;IACd,OAAOL,CAAC,KAAK,SAAS;EAC1B,CAAC,CACD,OAAOM,CAAC,EAAE;IACN,OAAO,KAAK;EAChB;AACJ;AACA,SAAST,kBAAkBA,CAACgB,MAAM,EAAE;EAChC,IAAI,CAACA,MAAM,EAAE;IACT,OAAO,IAAI;EACf;EACA,IAAIC,OAAO,GAAGC,KAAK,CAACC,OAAO,CAACH,MAAM,CAAC,GAAGA,MAAM,GAAG,CAACA,MAAM,CAAC;EACvD,OAAOnB,IAAI,CAACC,YAAY,CAACE,kBAAkB,CAACiB,OAAO,CAAC,CAAChB,MAAM,KAAKgB,OAAO,CAAChB,MAAM;AAClF;AACA,SAAST,cAAcA,CAACwB,MAAM,EAAE;EAC5B,IAAIA,MAAM,KAAK,KAAK,CAAC,EAAE;IAAEA,MAAM,GAAG,IAAI;EAAE;EACxC,IAAI,OAAOnB,IAAI,KAAK,WAAW,IAC3B,EAAE,cAAc,IAAIA,IAAI,CAAC,IACzB,CAACK,cAAc,CAAC,CAAC,IACjB,CAACQ,cAAc,CAAC,CAAC,IACjBd,cAAc,CAAC,CAAC,IAChB,CAACI,kBAAkB,CAACgB,MAAM,CAAC,EAAE;IAC7B,OAAOA,MAAM,GAAG,CAAC,CAAC,EAAEvB,oBAAoB,CAAC2B,KAAK,EAAE,CAACJ,MAAM,CAAC,EAAErB,6BAA6B,CAAC0B,gBAAgB,EAAE,IAAI,CAAC,GAAGC,SAAS;EAC/H;AACJ;AACAhC,OAAO,CAACE,cAAc,GAAGA,cAAc"},"metadata":{},"sourceType":"script","externalDependencies":[]}