{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"@material/mwc-list/mwc-list\";\nvar mdiContentDuplicate = \"M11,17H4A2,2 0 0,1 2,15V3A2,2 0 0,1 4,1H16V3H4V15H11V13L15,16L11,19V17M19,21V7H8V13H6V7A2,2 0 0,1 8,5H19A2,2 0 0,1 21,7V21A2,2 0 0,1 19,23H8A2,2 0 0,1 6,21V19H8V21H19Z\";\nvar mdiContentSave = \"M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z\";\nvar mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nvar mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/device/ha-device-picker\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport { computeDeviceName, subscribeDeviceRegistry } from \"../../../data/device_registry\";\nimport { subscribeEntityRegistry, updateEntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { activateScene, applyScene, deleteScene, getSceneConfig, getSceneEditorInitData, saveScene, SCENE_IGNORED_DOMAINS, showSceneEditor } from \"../../../data/scene\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nexport var HaSceneEditor = _decorate([customElement(\"ha-scene-editor\")], function (_initialize, _SubscribeMixin) {\n  var HaSceneEditor = /*#__PURE__*/function (_SubscribeMixin2) {\n    _inherits(HaSceneEditor, _SubscribeMixin2);\n    function HaSceneEditor() {\n      var _this;\n      _classCallCheck(this, HaSceneEditor);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaSceneEditor, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaSceneEditor);\n  }(_SubscribeMixin);\n  return {\n    F: HaSceneEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"sceneId\",\n      value: function value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"scenes\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"showAdvanced\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_dirty\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_errors\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entities\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_single_entities\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_devices\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceRegistryEntries\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entityRegistryEntries\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_scene\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_storedStates\",\n      value: function value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_unsubscribeEvents\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_deviceEntityLookup\",\n      value: function value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_activateContextId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_saving\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_updatedAreaId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_scenesSet\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_getRegistryAreaId\",\n      value: function value() {\n        return memoizeOne(function (entries, entity_id) {\n          var entry = entries.find(function (ent) {\n            return ent.entity_id === entity_id;\n          });\n          return entry ? entry.area_id : null;\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getEntitiesDevices\",\n      value: function value() {\n        var _this2 = this;\n        return memoizeOne(function (entities, devices, deviceEntityLookup, deviceRegs) {\n          var outputDevices = [];\n          if (devices.length) {\n            var deviceLookup = {};\n            var _iterator = _createForOfIteratorHelper(deviceRegs),\n              _step;\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var device = _step.value;\n                deviceLookup[device.id] = device;\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            devices.forEach(function (deviceId) {\n              var device = deviceLookup[deviceId];\n              var deviceEntities = deviceEntityLookup[deviceId] || [];\n              outputDevices.push({\n                name: computeDeviceName(device, _this2.hass, _this2._deviceEntityLookup[device.id]),\n                id: device.id,\n                entities: deviceEntities\n              });\n            });\n          }\n          var outputEntities = [];\n          entities.forEach(function (entity) {\n            if (!outputDevices.find(function (device) {\n              return device.entities.includes(entity);\n            })) {\n              outputEntities.push(entity);\n            }\n          });\n          return {\n            devices: outputDevices,\n            entities: outputEntities\n          };\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value:\n      // undefined means not set in this session\n      // null means picked nothing.\n\n      // Callback to be called when scene is set.\n\n      function disconnectedCallback() {\n        _get(_getPrototypeOf(HaSceneEditor.prototype), \"disconnectedCallback\", this).call(this);\n        if (this._unsubscribeEvents) {\n          this._unsubscribeEvents();\n          this._unsubscribeEvents = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        var _this3 = this;\n        return [subscribeEntityRegistry(this.hass.connection, function (entries) {\n          _this3._entityRegistryEntries = entries;\n        }), subscribeDeviceRegistry(this.hass.connection, function (entries) {\n          _this3._deviceRegistryEntries = entries;\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this4 = this;\n        if (!this.hass) {\n          return nothing;\n        }\n        var _this$_getEntitiesDev = this._getEntitiesDevices(this._entities, this._devices, this._deviceEntityLookup, this._deviceRegistryEntries),\n          devices = _this$_getEntitiesDev.devices,\n          entities = _this$_getEntitiesDev.entities;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <hass-subpage\\n        .hass=\", \"\\n        .narrow=\", \"\\n        .route=\", \"\\n        .backCallback=\", \"\\n        .header=\", \"\\n      >\\n        <ha-button-menu\\n          slot=\\\"toolbar-icon\\\"\\n          @action=\", \"\\n          activatable\\n        >\\n          <ha-icon-button\\n            slot=\\\"trigger\\\"\\n            .label=\", \"\\n            .path=\", \"\\n          ></ha-icon-button>\\n\\n          <ha-list-item .disabled=\", \" graphic=\\\"icon\\\">\\n            \", \"\\n            <ha-svg-icon\\n              slot=\\\"graphic\\\"\\n              .path=\", \"\\n            ></ha-svg-icon>\\n          </ha-list-item>\\n\\n          <ha-list-item\\n            .disabled=\", \"\\n            class=\", \"\\n            graphic=\\\"icon\\\"\\n          >\\n            \", \"\\n            <ha-svg-icon\\n              class=\", \"\\n              slot=\\\"graphic\\\"\\n              .path=\", \"\\n            >\\n            </ha-svg-icon>\\n          </ha-list-item>\\n        </ha-button-menu>\\n        \", \"\\n        <div\\n          id=\\\"root\\\"\\n          class=\", \"\\n        >\\n          \", \"\\n        </div>\\n        <ha-fab\\n          slot=\\\"fab\\\"\\n          .label=\", \"\\n          extended\\n          .disabled=\", \"\\n          @click=\", \"\\n          class=\", \"\\n        >\\n          <ha-svg-icon slot=\\\"icon\\\" .path=\", \"></ha-svg-icon>\\n        </ha-fab>\\n      </hass-subpage>\\n    \"])), this.hass, this.narrow, this.route, this._backTapped, this._scene ? computeStateName(this._scene) : this.hass.localize(\"ui.panel.config.scene.editor.default_name\"), this._handleMenuAction, this.hass.localize(\"ui.common.menu\"), mdiDotsVertical, !this.sceneId, this.hass.localize(\"ui.panel.config.scene.picker.duplicate_scene\"), mdiContentDuplicate, !this.sceneId, classMap({\n          warning: Boolean(this.sceneId)\n        }), this.hass.localize(\"ui.panel.config.scene.picker.delete_scene\"), classMap({\n          warning: Boolean(this.sceneId)\n        }), mdiDelete, this._errors ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\" <div class=\\\"errors\\\">\", \"</div> \"])), this._errors) : \"\", classMap({\n          rtl: computeRTL(this.hass)\n        }), this._config ? html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                <div\\n                  class=\", \"\\n                >\\n                  <ha-card outlined>\\n                    <div class=\\\"card-content\\\">\\n                      <ha-textfield\\n                        .value=\", \"\\n                        .name=\", \"\\n                        @change=\", \"\\n                        .label=\", \"\\n                      ></ha-textfield>\\n                      <ha-icon-picker\\n                        .hass=\", \"\\n                        .label=\", \"\\n                        .name=\", \"\\n                        .value=\", \"\\n                        @value-changed=\", \"\\n                      >\\n                      </ha-icon-picker>\\n                      <ha-area-picker\\n                        .hass=\", \"\\n                        .label=\", \"\\n                        .name=\", \"\\n                        .value=\", \"\\n                        @value-changed=\", \"\\n                      >\\n                      </ha-area-picker>\\n                    </div>\\n                  </ha-card>\\n                </div>\\n\\n                <ha-config-section vertical .isWide=\", \">\\n                  <div slot=\\\"header\\\">\\n                    \", \"\\n                  </div>\\n                  <div slot=\\\"introduction\\\">\\n                    \", \"\\n                  </div>\\n\\n                  \", \"\\n\\n                  <ha-card\\n                    outlined\\n                    .header=\", \"\\n                  >\\n                    <div class=\\\"card-content\\\">\\n                      <ha-device-picker\\n                        @value-changed=\", \"\\n                        .hass=\", \"\\n                        .label=\", \"\\n                      ></ha-device-picker>\\n                    </div>\\n                  </ha-card>\\n                </ha-config-section>\\n\\n                \", \"\\n              \"])), classMap({\n          container: true,\n          narrow: !this.isWide\n        }), this._config.name, \"name\", this._valueChanged, this.hass.localize(\"ui.panel.config.scene.editor.name\"), this.hass, this.hass.localize(\"ui.panel.config.scene.editor.icon\"), \"icon\", this._config.icon, this._valueChanged, this.hass, this.hass.localize(\"ui.panel.config.scene.editor.area\"), \"area\", this._sceneAreaIdWithUpdates || \"\", this._areaChanged, this.isWide, this.hass.localize(\"ui.panel.config.scene.editor.devices.header\"), this.hass.localize(\"ui.panel.config.scene.editor.devices.introduction\"), devices.map(function (device) {\n          return html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n                      <ha-card outlined>\\n                        <h1 class=\\\"card-header\\\">\\n                          \", \"\\n                          <ha-icon-button\\n                            .path=\", \"\\n                            .label=\", \"\\n                            .device=\", \"\\n                            @click=\", \"\\n                          ></ha-icon-button>\\n                        </h1>\\n                        <mwc-list>\\n                          \", \"\\n                        </mwc-list>\\n                      </ha-card>\\n                    \"])), device.name, mdiDelete, _this4.hass.localize(\"ui.panel.config.scene.editor.devices.delete\"), device.id, _this4._deleteDevice, device.entities.map(function (entityId) {\n            var entityStateObj = _this4.hass.states[entityId];\n            if (!entityStateObj) {\n              return nothing;\n            }\n            return html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n                              <ha-list-item\\n                                hasMeta\\n                                graphic=\\\"icon\\\"\\n                                .entityId=\", \"\\n                                @click=\", \"\\n                              >\\n                                <state-badge\\n                                  .hass=\", \"\\n                                  .stateObj=\", \"\\n                                  slot=\\\"graphic\\\"\\n                                ></state-badge>\\n                                \", \"\\n                              </ha-list-item>\\n                            \"])), entityId, _this4._showMoreInfo, _this4.hass, entityStateObj, computeStateName(entityStateObj));\n          }));\n        }), this.hass.localize(\"ui.panel.config.scene.editor.devices.add\"), this._devicePicked, this.hass, this.hass.localize(\"ui.panel.config.scene.editor.devices.add\"), this.showAdvanced ? html(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n                      <ha-config-section vertical .isWide=\", \">\\n                        <div slot=\\\"header\\\">\\n                          \", \"\\n                        </div>\\n                        <div slot=\\\"introduction\\\">\\n                          \", \"\\n                        </div>\\n                        \", \"\\n\\n                        <ha-card\\n                          outlined\\n                          header=\", \"\\n                        >\\n                          <div class=\\\"card-content\\\">\\n                            <ha-entity-picker\\n                              @value-changed=\", \"\\n                              .excludeDomains=\", \"\\n                              .hass=\", \"\\n                              label=\", \"\\n                            ></ha-entity-picker>\\n                          </div>\\n                        </ha-card>\\n                      </ha-config-section>\\n                    \"])), this.isWide, this.hass.localize(\"ui.panel.config.scene.editor.entities.header\"), this.hass.localize(\"ui.panel.config.scene.editor.entities.introduction\"), entities.length ? html(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n                              <ha-card\\n                                outlined\\n                                class=\\\"entities\\\"\\n                                .header=\", \"\\n                              >\\n                                <mwc-list>\\n                                  \", \"\\n                                </mwc-list>\\n                              </ha-card>\\n                            \"])), this.hass.localize(\"ui.panel.config.scene.editor.entities.without_device\"), entities.map(function (entityId) {\n          var entityStateObj = _this4.hass.states[entityId];\n          if (!entityStateObj) {\n            return nothing;\n          }\n          return html(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n                                      <ha-list-item\\n                                        hasMeta\\n                                        graphic=\\\"icon\\\"\\n                                        .entityId=\", \"\\n                                        @click=\", \"\\n                                      >\\n                                        <state-badge\\n                                          .hass=\", \"\\n                                          .stateObj=\", \"\\n                                          slot=\\\"graphic\\\"\\n                                        ></state-badge>\\n                                        \", \"\\n                                        <div slot=\\\"meta\\\">\\n                                          <ha-icon-button\\n                                            .path=\", \"\\n                                            .entityId=\", \"\\n                                            .label=\", \"\\n                                            @click=\", \"\\n                                          ></ha-icon-button>\\n                                        </div>\\n                                      </ha-list-item>\\n                                    \"])), entityId, _this4._showMoreInfo, _this4.hass, entityStateObj, computeStateName(entityStateObj), mdiDelete, entityId, _this4.hass.localize(\"ui.panel.config.scene.editor.entities.delete\"), _this4._deleteEntity);\n        })) : \"\", this.hass.localize(\"ui.panel.config.scene.editor.entities.add\"), this._entityPicked, SCENE_IGNORED_DOMAINS, this.hass, this.hass.localize(\"ui.panel.config.scene.editor.entities.add\")) : \"\") : \"\", this.hass.localize(\"ui.panel.config.scene.editor.save\"), this._saving, this._saveScene, classMap({\n          dirty: this._dirty,\n          saving: this._saving\n        }), mdiContentSave);\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HaSceneEditor.prototype), \"updated\", this).call(this, changedProps);\n        var oldscene = changedProps.get(\"sceneId\");\n        if (changedProps.has(\"sceneId\") && this.sceneId && this.hass && (\n        // Only refresh config if we picked a new scene. If same ID, don't fetch it.\n        !oldscene || oldscene !== this.sceneId)) {\n          this._loadConfig();\n        }\n        if (changedProps.has(\"sceneId\") && !this.sceneId && this.hass) {\n          this._dirty = false;\n          var initData = getSceneEditorInitData();\n          this._config = Object.assign({\n            name: this.hass.localize(\"ui.panel.config.scene.editor.default_name\"),\n            entities: {}\n          }, initData === null || initData === void 0 ? void 0 : initData.config);\n          this._initEntities(this._config);\n          if (initData !== null && initData !== void 0 && initData.areaId) {\n            this._updatedAreaId = initData.areaId;\n          }\n          this._dirty = initData !== undefined && (initData.areaId !== undefined || initData.config !== undefined);\n        }\n        if (changedProps.has(\"_entityRegistryEntries\")) {\n          this._deviceEntityLookup = {};\n          var _iterator2 = _createForOfIteratorHelper(this._entityRegistryEntries),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var entity = _step2.value;\n              if (!entity.device_id || entity.entity_category || entity.hidden_by || SCENE_IGNORED_DOMAINS.includes(computeDomain(entity.entity_id))) {\n                continue;\n              }\n              if (!(entity.device_id in this._deviceEntityLookup)) {\n                this._deviceEntityLookup[entity.device_id] = [];\n              }\n              this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n              if (this._entities.includes(entity.entity_id) && !this._single_entities.includes(entity.device_id) && !this._devices.includes(entity.device_id)) {\n                this._devices = [].concat(_toConsumableArray(this._devices), [entity.device_id]);\n              }\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n        }\n        if (changedProps.has(\"scenes\") && this.sceneId && this._config && !this._scene) {\n          this._setScene();\n        }\n        if (this._scenesSet && changedProps.has(\"scenes\")) {\n          this._scenesSet();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleMenuAction\",\n      value: function () {\n        var _handleMenuAction2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(ev) {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.t0 = ev.detail.index;\n                _context.next = _context.t0 === 0 ? 3 : _context.t0 === 1 ? 5 : 7;\n                break;\n              case 3:\n                this._duplicate();\n                return _context.abrupt(\"break\", 7);\n              case 5:\n                this._deleteTapped();\n                return _context.abrupt(\"break\", 7);\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _handleMenuAction(_x) {\n          return _handleMenuAction2.apply(this, arguments);\n        }\n        return _handleMenuAction;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_setScene\",\n      value: function () {\n        var _setScene2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this5 = this;\n          var scene, _yield$activateScene, context;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                scene = this.scenes.find(function (entity) {\n                  return entity.attributes.id === _this5.sceneId;\n                });\n                if (scene) {\n                  _context2.next = 3;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 3:\n                this._scene = scene;\n                _context2.next = 6;\n                return activateScene(this.hass, this._scene.entity_id);\n              case 6:\n                _yield$activateScene = _context2.sent;\n                context = _yield$activateScene.context;\n                this._activateContextId = context.id;\n                _context2.next = 11;\n                return this.hass.connection.subscribeEvents(function (event) {\n                  return _this5._stateChanged(event);\n                }, \"state_changed\");\n              case 11:\n                this._unsubscribeEvents = _context2.sent;\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _setScene() {\n          return _setScene2.apply(this, arguments);\n        }\n        return _setScene;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_showMoreInfo\",\n      value: function _showMoreInfo(ev) {\n        var entityId = ev.currentTarget.entityId;\n        fireEvent(this, \"hass-more-info\", {\n          entityId: entityId\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_loadConfig\",\n      value: function () {\n        var _loadConfig2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var config;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return getSceneConfig(this.hass, this.sceneId);\n              case 3:\n                config = _context3.sent;\n                _context3.next = 12;\n                break;\n              case 6:\n                _context3.prev = 6;\n                _context3.t0 = _context3[\"catch\"](0);\n                _context3.next = 10;\n                return showAlertDialog(this, {\n                  text: _context3.t0.status_code === 404 ? this.hass.localize(\"ui.panel.config.scene.editor.load_error_not_editable\") : this.hass.localize(\"ui.panel.config.scene.editor.load_error_unknown\", {\n                    err_no: _context3.t0.status_code\n                  })\n                });\n              case 10:\n                history.back();\n                return _context3.abrupt(\"return\");\n              case 12:\n                if (!config.entities) {\n                  config.entities = {};\n                }\n                this._initEntities(config);\n                this._setScene();\n                this._dirty = false;\n                this._config = config;\n              case 17:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this, [[0, 6]]);\n        }));\n        function _loadConfig() {\n          return _loadConfig2.apply(this, arguments);\n        }\n        return _loadConfig;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_initEntities\",\n      value: function _initEntities(config) {\n        var _this6 = this;\n        this._entities = Object.keys(config.entities);\n        this._entities.forEach(function (entity) {\n          return _this6._storeState(entity);\n        });\n        this._single_entities = [];\n        var filteredEntityReg = this._entityRegistryEntries.filter(function (entityReg) {\n          return _this6._entities.includes(entityReg.entity_id);\n        });\n        var newDevices = [];\n        if (config.metadata) {\n          Object.keys(config.entities).forEach(function (entity) {\n            var _entity;\n            if (!_this6._single_entities.includes(entity) && (_entity = config.metadata[entity]) !== null && _entity !== void 0 && _entity.entity_only) {\n              _this6._single_entities.push(entity);\n            }\n          });\n        }\n        var _iterator3 = _createForOfIteratorHelper(filteredEntityReg),\n          _step3;\n        try {\n          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n            var _config$metadata;\n            var entityReg = _step3.value;\n            if (!entityReg.device_id) {\n              continue;\n            }\n            var entityMetaData = (_config$metadata = config.metadata) === null || _config$metadata === void 0 ? void 0 : _config$metadata[entityReg.entity_id];\n            if (!newDevices.includes(entityReg.device_id) && !(entityMetaData !== null && entityMetaData !== void 0 && entityMetaData.entity_only)) {\n              newDevices.push(entityReg.device_id);\n            }\n          }\n        } catch (err) {\n          _iterator3.e(err);\n        } finally {\n          _iterator3.f();\n        }\n        this._devices = newDevices;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_entityPicked\",\n      value: function _entityPicked(ev) {\n        var entityId = ev.detail.value;\n        ev.target.value = \"\";\n        if (this._entities.includes(entityId)) {\n          return;\n        }\n        this._entities = [].concat(_toConsumableArray(this._entities), [entityId]);\n        this._single_entities.push(entityId);\n        this._storeState(entityId);\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteEntity\",\n      value: function _deleteEntity(ev) {\n        ev.stopPropagation();\n        var deleteEntityId = ev.target.entityId;\n        this._entities = this._entities.filter(function (entityId) {\n          return entityId !== deleteEntityId;\n        });\n        this._single_entities = this._single_entities.filter(function (entityId) {\n          return entityId !== deleteEntityId;\n        });\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_pickDevice\",\n      value: function _pickDevice(device_id) {\n        var _this7 = this;\n        if (this._devices.includes(device_id)) {\n          return;\n        }\n        this._devices = [].concat(_toConsumableArray(this._devices), [device_id]);\n        var deviceEntities = this._deviceEntityLookup[device_id];\n        if (!deviceEntities) {\n          return;\n        }\n        this._entities = [].concat(_toConsumableArray(this._entities), _toConsumableArray(deviceEntities));\n        deviceEntities.forEach(function (entityId) {\n          _this7._storeState(entityId);\n        });\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_devicePicked\",\n      value: function _devicePicked(ev) {\n        var device = ev.detail.value;\n        ev.target.value = \"\";\n        this._pickDevice(device);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteDevice\",\n      value: function _deleteDevice(ev) {\n        var deviceId = ev.target.device;\n        this._devices = this._devices.filter(function (device) {\n          return device !== deviceId;\n        });\n        var deviceEntities = this._deviceEntityLookup[deviceId];\n        if (!deviceEntities) {\n          return;\n        }\n        this._entities = this._entities.filter(function (entityId) {\n          return !deviceEntities.includes(entityId);\n        });\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        var _detail$value, _detail;\n        ev.stopPropagation();\n        var target = ev.target;\n        var name = target.name;\n        if (!name) {\n          return;\n        }\n        var newVal = (_detail$value = (_detail = ev.detail) === null || _detail === void 0 ? void 0 : _detail.value) !== null && _detail$value !== void 0 ? _detail$value : target.value;\n        if (target.type === \"number\") {\n          newVal = Number(newVal);\n        }\n        if ((this._config[name] || \"\") === newVal) {\n          return;\n        }\n        if (!newVal) {\n          delete this._config[name];\n          this._config = Object.assign({}, this._config);\n        } else {\n          this._config = Object.assign(Object.assign({}, this._config), {}, _defineProperty({}, name, newVal));\n        }\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_areaChanged\",\n      value: function _areaChanged(ev) {\n        var newValue = ev.detail.value === \"\" ? null : ev.detail.value;\n        if (newValue === (this._sceneAreaIdWithUpdates || \"\")) {\n          return;\n        }\n        if (newValue === this._sceneAreaIdCurrent) {\n          this._updatedAreaId = undefined;\n        } else {\n          this._updatedAreaId = newValue;\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_stateChanged\",\n      value: function _stateChanged(event) {\n        if (event.context.id !== this._activateContextId && this._entities.includes(event.data.entity_id)) {\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_backTapped\",\n      value: function value() {\n        var _this8 = this;\n        return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          var result;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return _this8.confirmUnsavedChanged();\n              case 2:\n                result = _context4.sent;\n                if (result) {\n                  _this8._goBack();\n                }\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4);\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_goBack\",\n      value: function _goBack() {\n        applyScene(this.hass, this._storedStates);\n        afterNextRender(function () {\n          return history.back();\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteTapped\",\n      value: function _deleteTapped() {\n        var _this$_config,\n          _this9 = this;\n        showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.scene.picker.delete_confirm_title\"),\n          text: this.hass.localize(\"ui.panel.config.scene.picker.delete_confirm_text\", {\n            name: (_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.name\n          }),\n          confirmText: this.hass.localize(\"ui.common.delete\"),\n          dismissText: this.hass.localize(\"ui.common.cancel\"),\n          confirm: function confirm() {\n            return _this9._delete();\n          },\n          destructive: true\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_delete\",\n      value: function () {\n        var _delete2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return deleteScene(this.hass, this.sceneId);\n              case 2:\n                applyScene(this.hass, this._storedStates);\n                history.back();\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5, this);\n        }));\n        function _delete() {\n          return _delete2.apply(this, arguments);\n        }\n        return _delete;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"confirmUnsavedChanged\",\n      value: function () {\n        var _confirmUnsavedChanged = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!this._dirty) {\n                  _context6.next = 2;\n                  break;\n                }\n                return _context6.abrupt(\"return\", showConfirmationDialog(this, {\n                  title: this.hass.localize(\"ui.panel.config.scene.editor.unsaved_confirm_title\"),\n                  text: this.hass.localize(\"ui.panel.config.scene.editor.unsaved_confirm_text\"),\n                  confirmText: this.hass.localize(\"ui.common.leave\"),\n                  dismissText: this.hass.localize(\"ui.common.stay\"),\n                  destructive: true\n                }));\n              case 2:\n                return _context6.abrupt(\"return\", true);\n              case 3:\n              case \"end\":\n                return _context6.stop();\n            }\n          }, _callee6, this);\n        }));\n        function confirmUnsavedChanged() {\n          return _confirmUnsavedChanged.apply(this, arguments);\n        }\n        return confirmUnsavedChanged;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_duplicate\",\n      value: function () {\n        var _duplicate2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n          var result, _this$_config2;\n          return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.confirmUnsavedChanged();\n              case 2:\n                result = _context7.sent;\n                if (result) {\n                  showSceneEditor(Object.assign(Object.assign({}, this._config), {}, {\n                    id: undefined,\n                    name: \"\".concat((_this$_config2 = this._config) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.name, \" (\").concat(this.hass.localize(\"ui.panel.config.scene.picker.duplicate\"), \")\")\n                  }), this._sceneAreaIdCurrent || undefined);\n                }\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }, _callee7, this);\n        }));\n        function _duplicate() {\n          return _duplicate2.apply(this, arguments);\n        }\n        return _duplicate;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_calculateMetaData\",\n      value: function _calculateMetaData() {\n        var output = {};\n        var _iterator4 = _createForOfIteratorHelper(this._single_entities),\n          _step4;\n        try {\n          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n            var entityId = _step4.value;\n            var entityState = this._getCurrentState(entityId);\n            if (!entityState) {\n              continue;\n            }\n            output[entityId] = {\n              entity_only: true\n            };\n          }\n        } catch (err) {\n          _iterator4.e(err);\n        } finally {\n          _iterator4.f();\n        }\n        return output;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateStates\",\n      value: function _calculateStates() {\n        var _this10 = this;\n        var output = {};\n        this._entities.forEach(function (entityId) {\n          var entityState = _this10._getCurrentState(entityId);\n          if (entityState) {\n            output[entityId] = entityState;\n          }\n        });\n        return output;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_storeState\",\n      value: function _storeState(entityId) {\n        if (entityId in this._storedStates) {\n          return;\n        }\n        var entityState = this._getCurrentState(entityId);\n        if (!entityState) {\n          return;\n        }\n        this._storedStates[entityId] = entityState;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getCurrentState\",\n      value: function _getCurrentState(entityId) {\n        var stateObj = this.hass.states[entityId];\n        if (!stateObj) {\n          return undefined;\n        }\n        return Object.assign(Object.assign({}, stateObj.attributes), {}, {\n          state: stateObj.state\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_saveScene\",\n      value: function () {\n        var _saveScene2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n          var _this11 = this;\n          var id, scene;\n          return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                id = !this.sceneId ? \"\" + Date.now() : this.sceneId;\n                this._config = Object.assign(Object.assign({}, this._config), {}, {\n                  entities: this._calculateStates(),\n                  metadata: this._calculateMetaData()\n                });\n                _context8.prev = 2;\n                this._saving = true;\n                _context8.next = 6;\n                return saveScene(this.hass, id, this._config);\n              case 6:\n                if (!(this._updatedAreaId !== undefined)) {\n                  _context8.next = 24;\n                  break;\n                }\n                scene = this._scene || this.scenes.find(function (entity) {\n                  return entity.attributes.id === id;\n                });\n                if (scene) {\n                  _context8.next = 20;\n                  break;\n                }\n                _context8.prev = 9;\n                _context8.next = 12;\n                return new Promise(function (resolve, reject) {\n                  setTimeout(reject, 3000);\n                  _this11._scenesSet = resolve;\n                });\n              case 12:\n                scene = this.scenes.find(function (entity) {\n                  return entity.attributes.id === id;\n                });\n                _context8.next = 17;\n                break;\n              case 15:\n                _context8.prev = 15;\n                _context8.t0 = _context8[\"catch\"](9);\n              case 17:\n                _context8.prev = 17;\n                this._scenesSet = undefined;\n                return _context8.finish(17);\n              case 20:\n                if (!scene) {\n                  _context8.next = 23;\n                  break;\n                }\n                _context8.next = 23;\n                return updateEntityRegistryEntry(this.hass, scene.entity_id, {\n                  area_id: this._updatedAreaId\n                });\n              case 23:\n                this._updatedAreaId = undefined;\n              case 24:\n                this._dirty = false;\n                if (!this.sceneId) {\n                  navigate(\"/config/scene/edit/\".concat(id), {\n                    replace: true\n                  });\n                }\n                _context8.next = 33;\n                break;\n              case 28:\n                _context8.prev = 28;\n                _context8.t1 = _context8[\"catch\"](2);\n                this._errors = _context8.t1.body.message || _context8.t1.message;\n                showToast(this, {\n                  message: _context8.t1.body.message || _context8.t1.message\n                });\n                throw _context8.t1;\n              case 33:\n                _context8.prev = 33;\n                this._saving = false;\n                return _context8.finish(33);\n              case 36:\n              case \"end\":\n                return _context8.stop();\n            }\n          }, _callee8, this, [[2, 28, 33, 36], [9, 15, 17, 20]]);\n        }));\n        function _saveScene() {\n          return _saveScene2.apply(this, arguments);\n        }\n        return _saveScene;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"handleKeyboardSave\",\n      value: function handleKeyboardSave() {\n        this._saveScene();\n      }\n    }, {\n      kind: \"get\",\n      key: \"_sceneAreaIdWithUpdates\",\n      value: function _sceneAreaIdWithUpdates() {\n        return this._updatedAreaId !== undefined ? this._updatedAreaId : this._sceneAreaIdCurrent;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_sceneAreaIdCurrent\",\n      value: function _sceneAreaIdCurrent() {\n        return this._scene ? this._getRegistryAreaId(this._entityRegistryEntries, this._scene.entity_id) : undefined;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n        ha-card {\\n          overflow: hidden;\\n        }\\n        .container {\\n          padding: 28px 20px 0;\\n          max-width: 1040px;\\n          margin: 0 auto;\\n        }\\n        .narrow.container {\\n          max-width: 640px;\\n        }\\n        .errors {\\n          padding: 20px;\\n          font-weight: bold;\\n          color: var(--error-color);\\n        }\\n        ha-config-section:last-child {\\n          padding-bottom: 20px;\\n        }\\n        ha-card ha-icon-button {\\n          color: var(--secondary-text-color);\\n        }\\n        .card-header > ha-icon-button {\\n          float: right;\\n          position: relative;\\n          top: -8px;\\n        }\\n        span[slot=\\\"introduction\\\"] a {\\n          color: var(--primary-color);\\n        }\\n        ha-fab {\\n          position: relative;\\n          bottom: calc(-80px - env(safe-area-inset-bottom));\\n          transition: bottom 0.3s;\\n        }\\n        ha-fab.dirty {\\n          bottom: 0;\\n        }\\n        ha-fab.saving {\\n          opacity: var(--light-disabled-opacity);\\n        }\\n        ha-icon-picker,\\n        ha-area-picker,\\n        ha-entity-picker {\\n          display: block;\\n          margin-top: 8px;\\n        }\\n        ha-textfield {\\n          display: block;\\n        }\\n        div[slot=\\\"meta\\\"] {\\n          display: flex;\\n          justify-content: center;\\n          align-items: center;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, SubscribeMixin(KeyboardShortcutMixin(LitElement)));","map":{"version":3,"names":["mdiContentDuplicate","mdiContentSave","mdiDelete","mdiDotsVertical","css","html","LitElement","nothing","customElement","property","state","classMap","memoizeOne","fireEvent","computeDomain","computeStateName","navigate","computeRTL","afterNextRender","computeDeviceName","subscribeDeviceRegistry","subscribeEntityRegistry","updateEntityRegistryEntry","activateScene","applyScene","deleteScene","getSceneConfig","getSceneEditorInitData","saveScene","SCENE_IGNORED_DOMAINS","showSceneEditor","showAlertDialog","showConfirmationDialog","KeyboardShortcutMixin","SubscribeMixin","haStyle","showToast","HaSceneEditor","_decorate","_initialize","_SubscribeMixin","_SubscribeMixin2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","type","Boolean","entries","entity_id","entry","find","ent","area_id","_this2","entities","devices","deviceEntityLookup","deviceRegs","outputDevices","deviceLookup","_iterator","_createForOfIteratorHelper","_step","s","n","done","device","id","err","e","f","forEach","deviceId","deviceEntities","push","name","hass","_deviceEntityLookup","outputEntities","entity","includes","disconnectedCallback","_get","_getPrototypeOf","prototype","call","_unsubscribeEvents","undefined","hassSubscribe","_this3","connection","_entityRegistryEntries","_deviceRegistryEntries","render","_this4","_this$_getEntitiesDev","_getEntitiesDevices","_entities","_devices","_templateObject","_taggedTemplateLiteral","narrow","route","_backTapped","_scene","localize","_handleMenuAction","sceneId","warning","_errors","_templateObject2","rtl","_config","_templateObject3","container","isWide","_valueChanged","icon","_sceneAreaIdWithUpdates","_areaChanged","map","_templateObject4","_deleteDevice","entityId","entityStateObj","states","_templateObject5","_showMoreInfo","_devicePicked","showAdvanced","_templateObject6","_templateObject7","_templateObject8","_deleteEntity","_entityPicked","_saving","_saveScene","dirty","_dirty","saving","updated","changedProps","oldscene","get","has","_loadConfig","initData","Object","assign","config","_initEntities","areaId","_updatedAreaId","_iterator2","_step2","device_id","entity_category","hidden_by","_single_entities","_toConsumableArray","_setScene","_scenesSet","_handleMenuAction2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ev","wrap","_callee$","_context","prev","next","t0","detail","index","_duplicate","abrupt","_deleteTapped","stop","_x","apply","_setScene2","_callee2","_this5","scene","_yield$activateScene","context","_callee2$","_context2","scenes","attributes","sent","_activateContextId","subscribeEvents","event","_stateChanged","currentTarget","_loadConfig2","_callee3","_callee3$","_context3","text","status_code","err_no","history","back","_this6","keys","_storeState","filteredEntityReg","filter","entityReg","newDevices","metadata","_entity","entity_only","_iterator3","_step3","_config$metadata","entityMetaData","target","stopPropagation","deleteEntityId","_pickDevice","_this7","_detail$value","_detail","newVal","Number","_defineProperty","newValue","_sceneAreaIdCurrent","data","_this8","_callee4","result","_callee4$","_context4","confirmUnsavedChanged","_goBack","_storedStates","_this$_config","_this9","title","confirmText","dismissText","confirm","_delete","destructive","_delete2","_callee5","_callee5$","_context5","_confirmUnsavedChanged","_callee6","_callee6$","_context6","_duplicate2","_callee7","_this$_config2","_callee7$","_context7","_calculateMetaData","output","_iterator4","_step4","entityState","_getCurrentState","_calculateStates","_this10","stateObj","_saveScene2","_callee8","_this11","_callee8$","_context8","Date","now","Promise","resolve","reject","setTimeout","finish","replace","t1","body","message","handleKeyboardSave","_getRegistryAreaId","static","styles","_templateObject9"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/scene/ha-scene-editor.ts"],"sourcesContent":["import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list\";\nimport {\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n} from \"@mdi/js\";\nimport { HassEvent } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/device/ha-device-picker\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport {\n  activateScene,\n  applyScene,\n  deleteScene,\n  getSceneConfig,\n  getSceneEditorInitData,\n  saveScene,\n  SceneConfig,\n  SceneEntities,\n  SceneEntity,\n  SceneMetaData,\n  SCENE_IGNORED_DOMAINS,\n  showSceneEditor,\n} from \"../../../data/scene\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\n\ninterface DeviceEntities {\n  id: string;\n  name: string;\n  entities: string[];\n}\n\ninterface DeviceEntitiesLookup {\n  [deviceId: string]: string[];\n}\n\n@customElement(\"ha-scene-editor\")\nexport class HaSceneEditor extends SubscribeMixin(\n  KeyboardShortcutMixin(LitElement)\n) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property() public sceneId: string | null = null;\n\n  @property({ attribute: false }) public scenes!: SceneEntity[];\n\n  @property({ type: Boolean }) public showAdvanced = false;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _config?: SceneConfig;\n\n  @state() private _entities: string[] = [];\n\n  private _single_entities: string[] = [];\n\n  @state() private _devices: string[] = [];\n\n  @state()\n  private _deviceRegistryEntries: DeviceRegistryEntry[] = [];\n\n  @state()\n  private _entityRegistryEntries: EntityRegistryEntry[] = [];\n\n  @state() private _scene?: SceneEntity;\n\n  private _storedStates: SceneEntities = {};\n\n  private _unsubscribeEvents?: () => void;\n\n  private _deviceEntityLookup: DeviceEntitiesLookup = {};\n\n  private _activateContextId?: string;\n\n  @state() private _saving = false;\n\n  // undefined means not set in this session\n  // null means picked nothing.\n  @state() private _updatedAreaId?: string | null;\n\n  // Callback to be called when scene is set.\n  private _scenesSet?: () => void;\n\n  private _getRegistryAreaId = memoizeOne(\n    (entries: EntityRegistryEntry[], entity_id: string) => {\n      const entry = entries.find((ent) => ent.entity_id === entity_id);\n      return entry ? entry.area_id : null;\n    }\n  );\n\n  private _getEntitiesDevices = memoizeOne(\n    (\n      entities: string[],\n      devices: string[],\n      deviceEntityLookup: DeviceEntitiesLookup,\n      deviceRegs: DeviceRegistryEntry[]\n    ) => {\n      const outputDevices: DeviceEntities[] = [];\n\n      if (devices.length) {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of deviceRegs) {\n          deviceLookup[device.id] = device;\n        }\n\n        devices.forEach((deviceId) => {\n          const device = deviceLookup[deviceId];\n          const deviceEntities: string[] = deviceEntityLookup[deviceId] || [];\n          outputDevices.push({\n            name: computeDeviceName(\n              device,\n              this.hass,\n              this._deviceEntityLookup[device.id]\n            ),\n            id: device.id,\n            entities: deviceEntities,\n          });\n        });\n      }\n\n      const outputEntities: string[] = [];\n\n      entities.forEach((entity) => {\n        if (!outputDevices.find((device) => device.entities.includes(entity))) {\n          outputEntities.push(entity);\n        }\n      });\n\n      return { devices: outputDevices, entities: outputEntities };\n    }\n  );\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubscribeEvents) {\n      this._unsubscribeEvents();\n      this._unsubscribeEvents = undefined;\n    }\n  }\n\n  public hassSubscribe() {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entityRegistryEntries = entries;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._deviceRegistryEntries = entries;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n    const { devices, entities } = this._getEntitiesDevices(\n      this._entities,\n      this._devices,\n      this._deviceEntityLookup,\n      this._deviceRegistryEntries\n    );\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${this._scene\n          ? computeStateName(this._scene)\n          : this.hass.localize(\"ui.panel.config.scene.editor.default_name\")}\n      >\n        <ha-button-menu\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <ha-list-item .disabled=${!this.sceneId} graphic=\"icon\">\n            ${this.hass.localize(\n              \"ui.panel.config.scene.picker.duplicate_scene\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </ha-list-item>\n\n          <ha-list-item\n            .disabled=${!this.sceneId}\n            class=${classMap({ warning: Boolean(this.sceneId) })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\"ui.panel.config.scene.picker.delete_scene\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.sceneId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </ha-list-item>\n        </ha-button-menu>\n        ${this._errors ? html` <div class=\"errors\">${this._errors}</div> ` : \"\"}\n        <div\n          id=\"root\"\n          class=${classMap({\n            rtl: computeRTL(this.hass),\n          })}\n        >\n          ${this._config\n            ? html`\n                <div\n                  class=${classMap({\n                    container: true,\n                    narrow: !this.isWide,\n                  })}\n                >\n                  <ha-card outlined>\n                    <div class=\"card-content\">\n                      <ha-textfield\n                        .value=${this._config.name}\n                        .name=${\"name\"}\n                        @change=${this._valueChanged}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.name\"\n                        )}\n                      ></ha-textfield>\n                      <ha-icon-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.icon\"\n                        )}\n                        .name=${\"icon\"}\n                        .value=${this._config.icon}\n                        @value-changed=${this._valueChanged}\n                      >\n                      </ha-icon-picker>\n                      <ha-area-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.area\"\n                        )}\n                        .name=${\"area\"}\n                        .value=${this._sceneAreaIdWithUpdates || \"\"}\n                        @value-changed=${this._areaChanged}\n                      >\n                      </ha-area-picker>\n                    </div>\n                  </ha-card>\n                </div>\n\n                <ha-config-section vertical .isWide=${this.isWide}>\n                  <div slot=\"header\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.header\"\n                    )}\n                  </div>\n                  <div slot=\"introduction\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.introduction\"\n                    )}\n                  </div>\n\n                  ${devices.map(\n                    (device) => html`\n                      <ha-card outlined>\n                        <h1 class=\"card-header\">\n                          ${device.name}\n                          <ha-icon-button\n                            .path=${mdiDelete}\n                            .label=${this.hass.localize(\n                              \"ui.panel.config.scene.editor.devices.delete\"\n                            )}\n                            .device=${device.id}\n                            @click=${this._deleteDevice}\n                          ></ha-icon-button>\n                        </h1>\n                        <mwc-list>\n                          ${device.entities.map((entityId) => {\n                            const entityStateObj = this.hass.states[entityId];\n                            if (!entityStateObj) {\n                              return nothing;\n                            }\n                            return html`\n                              <ha-list-item\n                                hasMeta\n                                graphic=\"icon\"\n                                .entityId=${entityId}\n                                @click=${this._showMoreInfo}\n                              >\n                                <state-badge\n                                  .hass=${this.hass}\n                                  .stateObj=${entityStateObj}\n                                  slot=\"graphic\"\n                                ></state-badge>\n                                ${computeStateName(entityStateObj)}\n                              </ha-list-item>\n                            `;\n                          })}\n                        </mwc-list>\n                      </ha-card>\n                    `\n                  )}\n\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.add\"\n                    )}\n                  >\n                    <div class=\"card-content\">\n                      <ha-device-picker\n                        @value-changed=${this._devicePicked}\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.devices.add\"\n                        )}\n                      ></ha-device-picker>\n                    </div>\n                  </ha-card>\n                </ha-config-section>\n\n                ${this.showAdvanced\n                  ? html`\n                      <ha-config-section vertical .isWide=${this.isWide}>\n                        <div slot=\"header\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.header\"\n                          )}\n                        </div>\n                        <div slot=\"introduction\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.introduction\"\n                          )}\n                        </div>\n                        ${entities.length\n                          ? html`\n                              <ha-card\n                                outlined\n                                class=\"entities\"\n                                .header=${this.hass.localize(\n                                  \"ui.panel.config.scene.editor.entities.without_device\"\n                                )}\n                              >\n                                <mwc-list>\n                                  ${entities.map((entityId) => {\n                                    const entityStateObj =\n                                      this.hass.states[entityId];\n                                    if (!entityStateObj) {\n                                      return nothing;\n                                    }\n                                    return html`\n                                      <ha-list-item\n                                        hasMeta\n                                        graphic=\"icon\"\n                                        .entityId=${entityId}\n                                        @click=${this._showMoreInfo}\n                                      >\n                                        <state-badge\n                                          .hass=${this.hass}\n                                          .stateObj=${entityStateObj}\n                                          slot=\"graphic\"\n                                        ></state-badge>\n                                        ${computeStateName(entityStateObj)}\n                                        <div slot=\"meta\">\n                                          <ha-icon-button\n                                            .path=${mdiDelete}\n                                            .entityId=${entityId}\n                                            .label=${this.hass.localize(\n                                              \"ui.panel.config.scene.editor.entities.delete\"\n                                            )}\n                                            @click=${this._deleteEntity}\n                                          ></ha-icon-button>\n                                        </div>\n                                      </ha-list-item>\n                                    `;\n                                  })}\n                                </mwc-list>\n                              </ha-card>\n                            `\n                          : \"\"}\n\n                        <ha-card\n                          outlined\n                          header=${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.add\"\n                          )}\n                        >\n                          <div class=\"card-content\">\n                            <ha-entity-picker\n                              @value-changed=${this._entityPicked}\n                              .excludeDomains=${SCENE_IGNORED_DOMAINS}\n                              .hass=${this.hass}\n                              label=${this.hass.localize(\n                                \"ui.panel.config.scene.editor.entities.add\"\n                              )}\n                            ></ha-entity-picker>\n                          </div>\n                        </ha-card>\n                      </ha-config-section>\n                    `\n                  : \"\"}\n              `\n            : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.scene.editor.save\")}\n          extended\n          .disabled=${this._saving}\n          @click=${this._saveScene}\n          class=${classMap({ dirty: this._dirty, saving: this._saving })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldscene = changedProps.get(\"sceneId\");\n\n    if (\n      changedProps.has(\"sceneId\") &&\n      this.sceneId &&\n      this.hass &&\n      // Only refresh config if we picked a new scene. If same ID, don't fetch it.\n      (!oldscene || oldscene !== this.sceneId)\n    ) {\n      this._loadConfig();\n    }\n\n    if (changedProps.has(\"sceneId\") && !this.sceneId && this.hass) {\n      this._dirty = false;\n      const initData = getSceneEditorInitData();\n      this._config = {\n        name: this.hass.localize(\"ui.panel.config.scene.editor.default_name\"),\n        entities: {},\n        ...initData?.config,\n      };\n      this._initEntities(this._config);\n      if (initData?.areaId) {\n        this._updatedAreaId = initData.areaId;\n      }\n      this._dirty =\n        initData !== undefined &&\n        (initData.areaId !== undefined || initData.config !== undefined);\n    }\n\n    if (changedProps.has(\"_entityRegistryEntries\")) {\n      this._deviceEntityLookup = {};\n      for (const entity of this._entityRegistryEntries) {\n        if (\n          !entity.device_id ||\n          entity.entity_category ||\n          entity.hidden_by ||\n          SCENE_IGNORED_DOMAINS.includes(computeDomain(entity.entity_id))\n        ) {\n          continue;\n        }\n        if (!(entity.device_id in this._deviceEntityLookup)) {\n          this._deviceEntityLookup[entity.device_id] = [];\n        }\n        this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n        if (\n          this._entities.includes(entity.entity_id) &&\n          !this._single_entities.includes(entity.device_id) &&\n          !this._devices.includes(entity.device_id)\n        ) {\n          this._devices = [...this._devices, entity.device_id];\n        }\n      }\n    }\n    if (\n      changedProps.has(\"scenes\") &&\n      this.sceneId &&\n      this._config &&\n      !this._scene\n    ) {\n      this._setScene();\n    }\n    if (this._scenesSet && changedProps.has(\"scenes\")) {\n      this._scenesSet();\n    }\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._duplicate();\n        break;\n      case 1:\n        this._deleteTapped();\n        break;\n    }\n  }\n\n  private async _setScene() {\n    const scene = this.scenes.find(\n      (entity: SceneEntity) => entity.attributes.id === this.sceneId\n    );\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    const { context } = await activateScene(this.hass, this._scene.entity_id);\n    this._activateContextId = context.id;\n    this._unsubscribeEvents =\n      await this.hass!.connection.subscribeEvents<HassEvent>(\n        (event) => this._stateChanged(event),\n        \"state_changed\"\n      );\n  }\n\n  private _showMoreInfo(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _loadConfig() {\n    let config: SceneConfig;\n    try {\n      config = await getSceneConfig(this.hass, this.sceneId!);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_not_editable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_unknown\",\n                { err_no: err.status_code }\n              ),\n      });\n      history.back();\n      return;\n    }\n\n    if (!config.entities) {\n      config.entities = {};\n    }\n\n    this._initEntities(config);\n\n    this._setScene();\n\n    this._dirty = false;\n    this._config = config;\n  }\n\n  private _initEntities(config: SceneConfig) {\n    this._entities = Object.keys(config.entities);\n    this._entities.forEach((entity) => this._storeState(entity));\n    this._single_entities = [];\n\n    const filteredEntityReg = this._entityRegistryEntries.filter((entityReg) =>\n      this._entities.includes(entityReg.entity_id)\n    );\n    const newDevices: string[] = [];\n\n    if (config.metadata) {\n      Object.keys(config.entities).forEach((entity) => {\n        if (\n          !this._single_entities.includes(entity) &&\n          config.metadata![entity]?.entity_only\n        ) {\n          this._single_entities.push(entity);\n        }\n      });\n    }\n\n    for (const entityReg of filteredEntityReg) {\n      if (!entityReg.device_id) {\n        continue;\n      }\n      const entityMetaData = config.metadata?.[entityReg.entity_id];\n      if (\n        !newDevices.includes(entityReg.device_id) &&\n        !entityMetaData?.entity_only\n      ) {\n        newDevices.push(entityReg.device_id);\n      }\n    }\n\n    this._devices = newDevices;\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    const entityId = ev.detail.value;\n    (ev.target as any).value = \"\";\n    if (this._entities.includes(entityId)) {\n      return;\n    }\n    this._entities = [...this._entities, entityId];\n    this._single_entities.push(entityId);\n    this._storeState(entityId);\n    this._dirty = true;\n  }\n\n  private _deleteEntity(ev: Event) {\n    ev.stopPropagation();\n    const deleteEntityId = (ev.target as any).entityId;\n    this._entities = this._entities.filter(\n      (entityId) => entityId !== deleteEntityId\n    );\n    this._single_entities = this._single_entities.filter(\n      (entityId) => entityId !== deleteEntityId\n    );\n    this._dirty = true;\n  }\n\n  private _pickDevice(device_id: string) {\n    if (this._devices.includes(device_id)) {\n      return;\n    }\n    this._devices = [...this._devices, device_id];\n    const deviceEntities = this._deviceEntityLookup[device_id];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = [...this._entities, ...deviceEntities];\n    deviceEntities.forEach((entityId) => {\n      this._storeState(entityId);\n    });\n    this._dirty = true;\n  }\n\n  private _devicePicked(ev: CustomEvent) {\n    const device = ev.detail.value;\n    (ev.target as any).value = \"\";\n    this._pickDevice(device);\n  }\n\n  private _deleteDevice(ev: Event) {\n    const deviceId = (ev.target as any).device;\n    this._devices = this._devices.filter((device) => device !== deviceId);\n    const deviceEntities = this._deviceEntityLookup[deviceId];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = this._entities.filter(\n      (entityId) => !deviceEntities.includes(entityId)\n    );\n    this._dirty = true;\n  }\n\n  private _valueChanged(ev: Event) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    let newVal = (ev as CustomEvent).detail?.value ?? target.value;\n    if (target.type === \"number\") {\n      newVal = Number(newVal);\n    }\n    if ((this._config![name] || \"\") === newVal) {\n      return;\n    }\n    if (!newVal) {\n      delete this._config![name];\n      this._config = { ...this._config! };\n    } else {\n      this._config = { ...this._config!, [name]: newVal };\n    }\n    this._dirty = true;\n  }\n\n  private _areaChanged(ev: CustomEvent) {\n    const newValue = ev.detail.value === \"\" ? null : ev.detail.value;\n\n    if (newValue === (this._sceneAreaIdWithUpdates || \"\")) {\n      return;\n    }\n\n    if (newValue === this._sceneAreaIdCurrent) {\n      this._updatedAreaId = undefined;\n    } else {\n      this._updatedAreaId = newValue;\n      this._dirty = true;\n    }\n  }\n\n  private _stateChanged(event: HassEvent) {\n    if (\n      event.context.id !== this._activateContextId &&\n      this._entities.includes(event.data.entity_id)\n    ) {\n      this._dirty = true;\n    }\n  }\n\n  private _backTapped = async (): Promise<void> => {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      this._goBack();\n    }\n  };\n\n  private _goBack(): void {\n    applyScene(this.hass, this._storedStates);\n    afterNextRender(() => history.back());\n  }\n\n  private _deleteTapped(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.config.scene.picker.delete_confirm_title\"\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.config.scene.picker.delete_confirm_text\",\n        { name: this._config?.name }\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n      destructive: true,\n    });\n  }\n\n  private async _delete(): Promise<void> {\n    await deleteScene(this.hass, this.sceneId!);\n    applyScene(this.hass, this._storedStates);\n    history.back();\n  }\n\n  private async confirmUnsavedChanged(): Promise<boolean> {\n    if (this._dirty) {\n      return showConfirmationDialog(this, {\n        title: this.hass!.localize(\n          \"ui.panel.config.scene.editor.unsaved_confirm_title\"\n        ),\n        text: this.hass!.localize(\n          \"ui.panel.config.scene.editor.unsaved_confirm_text\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        destructive: true,\n      });\n    }\n    return true;\n  }\n\n  private async _duplicate() {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      showSceneEditor(\n        {\n          ...this._config,\n          id: undefined,\n          name: `${this._config?.name} (${this.hass.localize(\n            \"ui.panel.config.scene.picker.duplicate\"\n          )})`,\n        },\n        this._sceneAreaIdCurrent || undefined\n      );\n    }\n  }\n\n  private _calculateMetaData(): SceneMetaData {\n    const output: SceneMetaData = {};\n\n    for (const entityId of this._single_entities) {\n      const entityState = this._getCurrentState(entityId);\n\n      if (!entityState) {\n        continue;\n      }\n\n      output[entityId] = {\n        entity_only: true,\n      };\n    }\n\n    return output;\n  }\n\n  private _calculateStates(): SceneEntities {\n    const output: SceneEntities = {};\n    this._entities.forEach((entityId) => {\n      const entityState = this._getCurrentState(entityId);\n      if (entityState) {\n        output[entityId] = entityState;\n      }\n    });\n    return output;\n  }\n\n  private _storeState(entityId: string): void {\n    if (entityId in this._storedStates) {\n      return;\n    }\n    const entityState = this._getCurrentState(entityId);\n    if (!entityState) {\n      return;\n    }\n    this._storedStates[entityId] = entityState;\n  }\n\n  private _getCurrentState(entityId: string) {\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj) {\n      return undefined;\n    }\n    return { ...stateObj.attributes, state: stateObj.state };\n  }\n\n  private async _saveScene(): Promise<void> {\n    const id = !this.sceneId ? \"\" + Date.now() : this.sceneId!;\n    this._config = {\n      ...this._config!,\n      entities: this._calculateStates(),\n      metadata: this._calculateMetaData(),\n    };\n    try {\n      this._saving = true;\n      await saveScene(this.hass, id, this._config);\n\n      if (this._updatedAreaId !== undefined) {\n        let scene =\n          this._scene ||\n          this.scenes.find(\n            (entity: SceneEntity) => entity.attributes.id === id\n          );\n\n        if (!scene) {\n          try {\n            await new Promise<void>((resolve, reject) => {\n              setTimeout(reject, 3000);\n              this._scenesSet = resolve;\n            });\n            scene = this.scenes.find(\n              (entity: SceneEntity) => entity.attributes.id === id\n            );\n          } catch (err) {\n            // We do nothing.\n          } finally {\n            this._scenesSet = undefined;\n          }\n        }\n\n        if (scene) {\n          await updateEntityRegistryEntry(this.hass, scene.entity_id, {\n            area_id: this._updatedAreaId,\n          });\n        }\n\n        this._updatedAreaId = undefined;\n      }\n\n      this._dirty = false;\n\n      if (!this.sceneId) {\n        navigate(`/config/scene/edit/${id}`, { replace: true });\n      }\n    } catch (err: any) {\n      this._errors = err.body.message || err.message;\n      showToast(this, {\n        message: err.body.message || err.message,\n      });\n      throw err;\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScene();\n  }\n\n  private get _sceneAreaIdWithUpdates(): string | undefined | null {\n    return this._updatedAreaId !== undefined\n      ? this._updatedAreaId\n      : this._sceneAreaIdCurrent;\n  }\n\n  private get _sceneAreaIdCurrent(): string | undefined | null {\n    return this._scene\n      ? this._getRegistryAreaId(\n          this._entityRegistryEntries,\n          this._scene.entity_id\n        )\n      : undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .container {\n          padding: 28px 20px 0;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n        .narrow.container {\n          max-width: 640px;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        ha-config-section:last-child {\n          padding-bottom: 20px;\n        }\n        ha-card ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n        .card-header > ha-icon-button {\n          float: right;\n          position: relative;\n          top: -8px;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        ha-fab.saving {\n          opacity: var(--light-disabled-opacity);\n        }\n        ha-icon-picker,\n        ha-area-picker,\n        ha-entity-picker {\n          display: block;\n          margin-top: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        div[slot=\"meta\"] {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-scene-editor\": HaSceneEditor;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAO,6BAA6B;AAAC,IAAAA,mBAAA;AAAA,IAAAC,cAAA;AAAA,IAAAC,SAAA;AAAA,IAAAC,eAAA;AAQrC,SACEC,GAAG,EAEHC,IAAI,EACJC,UAAU,EAEVC,OAAO,QACF,KAAK;AACZ,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,SAAS,QAAQ,gCAAgC;AAC1D,SAASC,aAAa,QAAQ,uCAAuC;AACrE,SAASC,gBAAgB,QAAQ,2CAA2C;AAC5E,SAASC,QAAQ,QAAQ,0BAA0B;AACnD,SAASC,UAAU,QAAQ,kCAAkC;AAC7D,SAASC,eAAe,QAAQ,oCAAoC;AACpE,OAAO,6CAA6C;AACpD,OAAO,+CAA+C;AACtD,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,6BAA6B;AACpC,OAAO,4BAA4B;AACnC,OAAO,oCAAoC;AAC3C,OAAO,oCAAoC;AAC3C,OAAO,kCAAkC;AACzC,OAAO,iCAAiC;AACxC,OAAO,kCAAkC;AACzC,SACEC,iBAAiB,EAEjBC,uBAAuB,QAClB,+BAA+B;AACtC,SAEEC,uBAAuB,EACvBC,yBAAyB,QACpB,+BAA+B;AACtC,SACEC,aAAa,EACbC,UAAU,EACVC,WAAW,EACXC,cAAc,EACdC,sBAAsB,EACtBC,SAAS,EAKTC,qBAAqB,EACrBC,eAAe,QACV,qBAAqB;AAC5B,SACEC,eAAe,EACfC,sBAAsB,QACjB,0CAA0C;AACjD,OAAO,+BAA+B;AACtC,SAASC,qBAAqB,QAAQ,yCAAyC;AAC/E,SAASC,cAAc,QAAQ,iCAAiC;AAChE,SAASC,OAAO,QAAQ,2BAA2B;AAEnD,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,OAAO,sBAAsB;AAY7B,WACaC,aAAa,GAAAC,SAAA,EADzB9B,aAAa,CAAC,iBAAiB,CAAC,aAAA+B,WAAA,EAAAC,eAAA;EAAA,IACpBH,aAAa,0BAAAI,gBAAA;IAAAC,SAAA,CAAAL,aAAA,EAAAI,gBAAA;IAAA,SAAAJ,cAAA;MAAA,IAAAM,KAAA;MAAAC,eAAA,OAAAP,aAAA;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAQ,UAAA,OAAAd,aAAA,KAAAe,MAAA,CAAAJ,IAAA;MAAAT,WAAA,CAAAc,sBAAA,CAAAV,KAAA;MAAA,OAAAA,KAAA;IAAA;IAAA,OAAAW,YAAA,CAAAjB,aAAA;EAAA,EAAAG,eAAA;EAAA;IAAAe,CAAA,EAAblB,aAAa;IAAAmB,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAGvBjD,QAAQ,CAAC;QAAEkD,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjD,QAAQ,CAAC;QAAEqD,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEjDjD,QAAQ,CAAC;QAAEqD,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEjDjD,QAAQ,CAAC;QAAEkD,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjD,QAAQ,CAAC,CAAC;MAAAmD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAiC,IAAI;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE/CjD,QAAQ,CAAC;QAAEkD,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjD,QAAQ,CAAC;QAAEqD,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAuB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEvDhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAkB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEPhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEPhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAA+B,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAEJ,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEtChD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAA8B,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEvChD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OACgD,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEzDhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OACgD,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEzDhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAE+B,CAAC,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAIW,CAAC,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAIrDhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAmB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAI/BhD,KAAK,CAAC,CAAC;MAAAkD,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAKqBjD,UAAU,CACrC,UAACoD,OAA8B,EAAEC,SAAiB,EAAK;UACrD,IAAMC,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,UAACC,GAAG;YAAA,OAAKA,GAAG,CAACH,SAAS,KAAKA,SAAS;UAAA,EAAC;UAChE,OAAOC,KAAK,GAAGA,KAAK,CAACG,OAAO,GAAG,IAAI;QACrC,CACF,CAAC;MAAA;IAAA;MAAAZ,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,IAAAS,MAAA;QAAA,OAE6B1D,UAAU,CACtC,UACE2D,QAAkB,EAClBC,OAAiB,EACjBC,kBAAwC,EACxCC,UAAiC,EAC9B;UACH,IAAMC,aAA+B,GAAG,EAAE;UAE1C,IAAIH,OAAO,CAACzB,MAAM,EAAE;YAClB,IAAM6B,YAAyD,GAAG,CAAC,CAAC;YAAC,IAAAC,SAAA,GAAAC,0BAAA,CAChDJ,UAAU;cAAAK,KAAA;YAAA;cAA/B,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAiC;gBAAA,IAAtBC,MAAM,GAAAJ,KAAA,CAAAlB,KAAA;gBACfe,YAAY,CAACO,MAAM,CAACC,EAAE,CAAC,GAAGD,MAAM;cAClC;YAAC,SAAAE,GAAA;cAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;YAAA;cAAAR,SAAA,CAAAU,CAAA;YAAA;YAEDf,OAAO,CAACgB,OAAO,CAAC,UAACC,QAAQ,EAAK;cAC5B,IAAMN,MAAM,GAAGP,YAAY,CAACa,QAAQ,CAAC;cACrC,IAAMC,cAAwB,GAAGjB,kBAAkB,CAACgB,QAAQ,CAAC,IAAI,EAAE;cACnEd,aAAa,CAACgB,IAAI,CAAC;gBACjBC,IAAI,EAAEzE,iBAAiB,CACrBgE,MAAM,EACNb,MAAI,CAACuB,IAAI,EACTvB,MAAI,CAACwB,mBAAmB,CAACX,MAAM,CAACC,EAAE,CACpC,CAAC;gBACDA,EAAE,EAAED,MAAM,CAACC,EAAE;gBACbb,QAAQ,EAAEmB;cACZ,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;UAEA,IAAMK,cAAwB,GAAG,EAAE;UAEnCxB,QAAQ,CAACiB,OAAO,CAAC,UAACQ,MAAM,EAAK;YAC3B,IAAI,CAACrB,aAAa,CAACR,IAAI,CAAC,UAACgB,MAAM;cAAA,OAAKA,MAAM,CAACZ,QAAQ,CAAC0B,QAAQ,CAACD,MAAM,CAAC;YAAA,EAAC,EAAE;cACrED,cAAc,CAACJ,IAAI,CAACK,MAAM,CAAC;YAC7B;UACF,CAAC,CAAC;UAEF,OAAO;YAAExB,OAAO,EAAEG,aAAa;YAAEJ,QAAQ,EAAEwB;UAAe,CAAC;QAC7D,CACF,CAAC;MAAA;IAAA;MAAAtC,IAAA;MAAAG,GAAA;MAAAC,KAAA;MAtDD;MACA;;MAGA;;MAoDA,SAAAqC,qBAAA,EAA8B;QAC5BC,IAAA,CAAAC,eAAA,CAxGS/D,aAAa,CAAAgE,SAAA,iCAAAC,IAAA;QAyGtB,IAAI,IAAI,CAACC,kBAAkB,EAAE;UAC3B,IAAI,CAACA,kBAAkB,CAAC,CAAC;UACzB,IAAI,CAACA,kBAAkB,GAAGC,SAAS;QACrC;MACF;IAAC;MAAA/C,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA4C,cAAA,EAAuB;QAAA,IAAAC,MAAA;QACrB,OAAO,CACLrF,uBAAuB,CAAC,IAAI,CAACwE,IAAI,CAACc,UAAU,EAAE,UAAC3C,OAAO,EAAK;UACzD0C,MAAI,CAACE,sBAAsB,GAAG5C,OAAO;QACvC,CAAC,CAAC,EACF5C,uBAAuB,CAAC,IAAI,CAACyE,IAAI,CAACc,UAAU,EAAE,UAAC3C,OAAO,EAAK;UACzD0C,MAAI,CAACG,sBAAsB,GAAG7C,OAAO;QACvC,CAAC,CAAC,CACH;MACH;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAiD,OAAA,EAAmB;QAAA,IAAAC,MAAA;QACjB,IAAI,CAAC,IAAI,CAAClB,IAAI,EAAE;UACd,OAAOtF,OAAO;QAChB;QACA,IAAAyG,qBAAA,GAA8B,IAAI,CAACC,mBAAmB,CACpD,IAAI,CAACC,SAAS,EACd,IAAI,CAACC,QAAQ,EACb,IAAI,CAACrB,mBAAmB,EACxB,IAAI,CAACe,sBACP,CAAC;UALOrC,OAAO,GAAAwC,qBAAA,CAAPxC,OAAO;UAAED,QAAQ,GAAAyC,qBAAA,CAARzC,QAAQ;QAOzB,OAAOlE,IAAI,CAAA+G,eAAA,KAAAA,eAAA,GAAAC,sBAAA,m1CAEC,IAAI,CAACxB,IAAI,EACP,IAAI,CAACyB,MAAM,EACZ,IAAI,CAACC,KAAK,EACH,IAAI,CAACC,WAAW,EACtB,IAAI,CAACC,MAAM,GACjB1G,gBAAgB,CAAC,IAAI,CAAC0G,MAAM,CAAC,GAC7B,IAAI,CAAC5B,IAAI,CAAC6B,QAAQ,CAAC,2CAA2C,CAAC,EAIvD,IAAI,CAACC,iBAAiB,EAKrB,IAAI,CAAC9B,IAAI,CAAC6B,QAAQ,CAAC,gBAAgB,CAAC,EACrCvH,eAAe,EAGC,CAAC,IAAI,CAACyH,OAAO,EACnC,IAAI,CAAC/B,IAAI,CAAC6B,QAAQ,CAClB,8CACF,CAAC,EAGS1H,mBAAmB,EAKjB,CAAC,IAAI,CAAC4H,OAAO,EACjBjH,QAAQ,CAAC;UAAEkH,OAAO,EAAE9D,OAAO,CAAC,IAAI,CAAC6D,OAAO;QAAE,CAAC,CAAC,EAGlD,IAAI,CAAC/B,IAAI,CAAC6B,QAAQ,CAAC,2CAA2C,CAAC,EAEvD/G,QAAQ,CAAC;UAAEkH,OAAO,EAAE9D,OAAO,CAAC,IAAI,CAAC6D,OAAO;QAAE,CAAC,CAAC,EAE5C1H,SAAS,EAKrB,IAAI,CAAC4H,OAAO,GAAGzH,IAAI,CAAA0H,gBAAA,KAAAA,gBAAA,GAAAV,sBAAA,2CAAwB,IAAI,CAACS,OAAO,IAAY,EAAE,EAG7DnH,QAAQ,CAAC;UACfqH,GAAG,EAAE/G,UAAU,CAAC,IAAI,CAAC4E,IAAI;QAC3B,CAAC,CAAC,EAEA,IAAI,CAACoC,OAAO,GACV5H,IAAI,CAAA6H,gBAAA,KAAAA,gBAAA,GAAAb,sBAAA,0zDAEQ1G,QAAQ,CAAC;UACfwH,SAAS,EAAE,IAAI;UACfb,MAAM,EAAE,CAAC,IAAI,CAACc;QAChB,CAAC,CAAC,EAKa,IAAI,CAACH,OAAO,CAACrC,IAAI,EAClB,MAAM,EACJ,IAAI,CAACyC,aAAa,EACnB,IAAI,CAACxC,IAAI,CAAC6B,QAAQ,CACzB,mCACF,CAAC,EAGO,IAAI,CAAC7B,IAAI,EACR,IAAI,CAACA,IAAI,CAAC6B,QAAQ,CACzB,mCACF,CAAC,EACO,MAAM,EACL,IAAI,CAACO,OAAO,CAACK,IAAI,EACT,IAAI,CAACD,aAAa,EAI3B,IAAI,CAACxC,IAAI,EACR,IAAI,CAACA,IAAI,CAAC6B,QAAQ,CACzB,mCACF,CAAC,EACO,MAAM,EACL,IAAI,CAACa,uBAAuB,IAAI,EAAE,EAC1B,IAAI,CAACC,YAAY,EAOJ,IAAI,CAACJ,MAAM,EAE3C,IAAI,CAACvC,IAAI,CAAC6B,QAAQ,CAClB,6CACF,CAAC,EAGC,IAAI,CAAC7B,IAAI,CAAC6B,QAAQ,CAClB,mDACF,CAAC,EAGDlD,OAAO,CAACiE,GAAG,CACX,UAACtD,MAAM;UAAA,OAAK9E,IAAI,CAAAqI,gBAAA,KAAAA,gBAAA,GAAArB,sBAAA,okBAGRlC,MAAM,CAACS,IAAI,EAEH1F,SAAS,EACR6G,MAAI,CAAClB,IAAI,CAAC6B,QAAQ,CACzB,6CACF,CAAC,EACSvC,MAAM,CAACC,EAAE,EACV2B,MAAI,CAAC4B,aAAa,EAI3BxD,MAAM,CAACZ,QAAQ,CAACkE,GAAG,CAAC,UAACG,QAAQ,EAAK;YAClC,IAAMC,cAAc,GAAG9B,MAAI,CAAClB,IAAI,CAACiD,MAAM,CAACF,QAAQ,CAAC;YACjD,IAAI,CAACC,cAAc,EAAE;cACnB,OAAOtI,OAAO;YAChB;YACA,OAAOF,IAAI,CAAA0I,gBAAA,KAAAA,gBAAA,GAAA1B,sBAAA,qnBAIKuB,QAAQ,EACX7B,MAAI,CAACiC,aAAa,EAGjBjC,MAAI,CAAClB,IAAI,EACLgD,cAAc,EAG1B9H,gBAAgB,CAAC8H,cAAc,CAAC;UAGxC,CAAC,CAAC;QAAA,CAIV,CAAC,EAIW,IAAI,CAAChD,IAAI,CAAC6B,QAAQ,CAC1B,0CACF,CAAC,EAIoB,IAAI,CAACuB,aAAa,EAC3B,IAAI,CAACpD,IAAI,EACR,IAAI,CAACA,IAAI,CAAC6B,QAAQ,CACzB,0CACF,CAAC,EAMP,IAAI,CAACwB,YAAY,GACf7I,IAAI,CAAA8I,gBAAA,KAAAA,gBAAA,GAAA9B,sBAAA,k7BACoC,IAAI,CAACe,MAAM,EAE3C,IAAI,CAACvC,IAAI,CAAC6B,QAAQ,CAClB,8CACF,CAAC,EAGC,IAAI,CAAC7B,IAAI,CAAC6B,QAAQ,CAClB,oDACF,CAAC,EAEDnD,QAAQ,CAACxB,MAAM,GACb1C,IAAI,CAAA+I,gBAAA,KAAAA,gBAAA,GAAA/B,sBAAA,uaAIU,IAAI,CAACxB,IAAI,CAAC6B,QAAQ,CAC1B,sDACF,CAAC,EAGGnD,QAAQ,CAACkE,GAAG,CAAC,UAACG,QAAQ,EAAK;UAC3B,IAAMC,cAAc,GAClB9B,MAAI,CAAClB,IAAI,CAACiD,MAAM,CAACF,QAAQ,CAAC;UAC5B,IAAI,CAACC,cAAc,EAAE;YACnB,OAAOtI,OAAO;UAChB;UACA,OAAOF,IAAI,CAAAgJ,gBAAA,KAAAA,gBAAA,GAAAhC,sBAAA,irCAIKuB,QAAQ,EACX7B,MAAI,CAACiC,aAAa,EAGjBjC,MAAI,CAAClB,IAAI,EACLgD,cAAc,EAG1B9H,gBAAgB,CAAC8H,cAAc,CAAC,EAGtB3I,SAAS,EACL0I,QAAQ,EACX7B,MAAI,CAAClB,IAAI,CAAC6B,QAAQ,CACzB,8CACF,CAAC,EACQX,MAAI,CAACuC,aAAa;QAKrC,CAAC,CAAC,IAIR,EAAE,EAIK,IAAI,CAACzD,IAAI,CAAC6B,QAAQ,CACzB,2CACF,CAAC,EAIoB,IAAI,CAAC6B,aAAa,EACjB1H,qBAAqB,EAC/B,IAAI,CAACgE,IAAI,EACT,IAAI,CAACA,IAAI,CAAC6B,QAAQ,CACxB,2CACF,CAAC,IAMX,EAAE,IAER,EAAE,EAIG,IAAI,CAAC7B,IAAI,CAAC6B,QAAQ,CAAC,mCAAmC,CAAC,EAEpD,IAAI,CAAC8B,OAAO,EACf,IAAI,CAACC,UAAU,EAChB9I,QAAQ,CAAC;UAAE+I,KAAK,EAAE,IAAI,CAACC,MAAM;UAAEC,MAAM,EAAE,IAAI,CAACJ;QAAQ,CAAC,CAAC,EAE7BvJ,cAAc;MAIvD;IAAC;MAAAwD,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAgG,QAAkBC,YAA4B,EAAQ;QACpD3D,IAAA,CAAAC,eAAA,CA5YS/D,aAAa,CAAAgE,SAAA,oBAAAC,IAAA,OA4YRwD,YAAY;QAE1B,IAAMC,QAAQ,GAAGD,YAAY,CAACE,GAAG,CAAC,SAAS,CAAC;QAE5C,IACEF,YAAY,CAACG,GAAG,CAAC,SAAS,CAAC,IAC3B,IAAI,CAACrC,OAAO,IACZ,IAAI,CAAC/B,IAAI;QACT;QACC,CAACkE,QAAQ,IAAIA,QAAQ,KAAK,IAAI,CAACnC,OAAO,CAAC,EACxC;UACA,IAAI,CAACsC,WAAW,CAAC,CAAC;QACpB;QAEA,IAAIJ,YAAY,CAACG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAACrC,OAAO,IAAI,IAAI,CAAC/B,IAAI,EAAE;UAC7D,IAAI,CAAC8D,MAAM,GAAG,KAAK;UACnB,IAAMQ,QAAQ,GAAGxI,sBAAsB,CAAC,CAAC;UACzC,IAAI,CAACsG,OAAO,GAAAmC,MAAA,CAAAC,MAAA;YACVzE,IAAI,EAAE,IAAI,CAACC,IAAI,CAAC6B,QAAQ,CAAC,2CAA2C,CAAC;YACrEnD,QAAQ,EAAE,CAAC;UAAC,GACT4F,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEG,MAAM,CACpB;UACD,IAAI,CAACC,aAAa,CAAC,IAAI,CAACtC,OAAO,CAAC;UAChC,IAAIkC,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEK,MAAM,EAAE;YACpB,IAAI,CAACC,cAAc,GAAGN,QAAQ,CAACK,MAAM;UACvC;UACA,IAAI,CAACb,MAAM,GACTQ,QAAQ,KAAK3D,SAAS,KACrB2D,QAAQ,CAACK,MAAM,KAAKhE,SAAS,IAAI2D,QAAQ,CAACG,MAAM,KAAK9D,SAAS,CAAC;QACpE;QAEA,IAAIsD,YAAY,CAACG,GAAG,CAAC,wBAAwB,CAAC,EAAE;UAC9C,IAAI,CAACnE,mBAAmB,GAAG,CAAC,CAAC;UAAC,IAAA4E,UAAA,GAAA5F,0BAAA,CACT,IAAI,CAAC8B,sBAAsB;YAAA+D,MAAA;UAAA;YAAhD,KAAAD,UAAA,CAAA1F,CAAA,MAAA2F,MAAA,GAAAD,UAAA,CAAAzF,CAAA,IAAAC,IAAA,GAAkD;cAAA,IAAvCc,MAAM,GAAA2E,MAAA,CAAA9G,KAAA;cACf,IACE,CAACmC,MAAM,CAAC4E,SAAS,IACjB5E,MAAM,CAAC6E,eAAe,IACtB7E,MAAM,CAAC8E,SAAS,IAChBjJ,qBAAqB,CAACoE,QAAQ,CAACnF,aAAa,CAACkF,MAAM,CAAC/B,SAAS,CAAC,CAAC,EAC/D;gBACA;cACF;cACA,IAAI,EAAE+B,MAAM,CAAC4E,SAAS,IAAI,IAAI,CAAC9E,mBAAmB,CAAC,EAAE;gBACnD,IAAI,CAACA,mBAAmB,CAACE,MAAM,CAAC4E,SAAS,CAAC,GAAG,EAAE;cACjD;cACA,IAAI,CAAC9E,mBAAmB,CAACE,MAAM,CAAC4E,SAAS,CAAC,CAACjF,IAAI,CAACK,MAAM,CAAC/B,SAAS,CAAC;cACjE,IACE,IAAI,CAACiD,SAAS,CAACjB,QAAQ,CAACD,MAAM,CAAC/B,SAAS,CAAC,IACzC,CAAC,IAAI,CAAC8G,gBAAgB,CAAC9E,QAAQ,CAACD,MAAM,CAAC4E,SAAS,CAAC,IACjD,CAAC,IAAI,CAACzD,QAAQ,CAAClB,QAAQ,CAACD,MAAM,CAAC4E,SAAS,CAAC,EACzC;gBACA,IAAI,CAACzD,QAAQ,MAAA/D,MAAA,CAAA4H,kBAAA,CAAO,IAAI,CAAC7D,QAAQ,IAAEnB,MAAM,CAAC4E,SAAS,EAAC;cACtD;YACF;UAAC,SAAAvF,GAAA;YAAAqF,UAAA,CAAApF,CAAA,CAAAD,GAAA;UAAA;YAAAqF,UAAA,CAAAnF,CAAA;UAAA;QACH;QACA,IACEuE,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC,IAC1B,IAAI,CAACrC,OAAO,IACZ,IAAI,CAACK,OAAO,IACZ,CAAC,IAAI,CAACR,MAAM,EACZ;UACA,IAAI,CAACwD,SAAS,CAAC,CAAC;QAClB;QACA,IAAI,IAAI,CAACC,UAAU,IAAIpB,YAAY,CAACG,GAAG,CAAC,QAAQ,CAAC,EAAE;UACjD,IAAI,CAACiB,UAAU,CAAC,CAAC;QACnB;MACF;IAAC;MAAAzH,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAsH,kBAAA,GAAAC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAC,QAAgCC,EAA6B;UAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;YAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;cAAA;gBAAAF,QAAA,CAAAG,EAAA,GACnDN,EAAE,CAACO,MAAM,CAACC,KAAK;gBAAAL,QAAA,CAAAE,IAAA,GAAAF,QAAA,CAAAG,EAAA,KAChB,CAAC,OAAAH,QAAA,CAAAG,EAAA,KAGD,CAAC;gBAAA;cAAA;gBAFJ,IAAI,CAACG,UAAU,CAAC,CAAC;gBAAC,OAAAN,QAAA,CAAAO,MAAA;cAAA;gBAGlB,IAAI,CAACC,aAAa,CAAC,CAAC;gBAAC,OAAAR,QAAA,CAAAO,MAAA;cAAA;cAAA;gBAAA,OAAAP,QAAA,CAAAS,IAAA;YAAA;UAAA,GAAAb,OAAA;QAAA,CAG1B;QAAA,SAAA5D,kBAAA0E,EAAA;UAAA,OAAAlB,kBAAA,CAAAmB,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAA6E,iBAAA;MAAA;IAAA;MAAAlE,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAA0I,UAAA,GAAAnB,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAkB,SAAA;UAAA,IAAAC,MAAA;UAAA,IAAAC,KAAA,EAAAC,oBAAA,EAAAC,OAAA;UAAA,OAAAvB,mBAAA,GAAAI,IAAA,UAAAoB,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAlB,IAAA,GAAAkB,SAAA,CAAAjB,IAAA;cAAA;gBACQa,KAAK,GAAG,IAAI,CAACK,MAAM,CAAC5I,IAAI,CAC5B,UAAC6B,MAAmB;kBAAA,OAAKA,MAAM,CAACgH,UAAU,CAAC5H,EAAE,KAAKqH,MAAI,CAAC7E,OAAO;gBAAA,CAChE,CAAC;gBAAA,IACI8E,KAAK;kBAAAI,SAAA,CAAAjB,IAAA;kBAAA;gBAAA;gBAAA,OAAAiB,SAAA,CAAAZ,MAAA;cAAA;gBAGV,IAAI,CAACzE,MAAM,GAAGiF,KAAK;gBAACI,SAAA,CAAAjB,IAAA;gBAAA,OACMtK,aAAa,CAAC,IAAI,CAACsE,IAAI,EAAE,IAAI,CAAC4B,MAAM,CAACxD,SAAS,CAAC;cAAA;gBAAA0I,oBAAA,GAAAG,SAAA,CAAAG,IAAA;gBAAjEL,OAAO,GAAAD,oBAAA,CAAPC,OAAO;gBACf,IAAI,CAACM,kBAAkB,GAAGN,OAAO,CAACxH,EAAE;gBAAC0H,SAAA,CAAAjB,IAAA;gBAAA,OAE7B,IAAI,CAAChG,IAAI,CAAEc,UAAU,CAACwG,eAAe,CACzC,UAACC,KAAK;kBAAA,OAAKX,MAAI,CAACY,aAAa,CAACD,KAAK,CAAC;gBAAA,GACpC,eACF,CAAC;cAAA;gBAJH,IAAI,CAAC7G,kBAAkB,GAAAuG,SAAA,CAAAG,IAAA;cAAA;cAAA;gBAAA,OAAAH,SAAA,CAAAV,IAAA;YAAA;UAAA,GAAAI,QAAA;QAAA,CAKxB;QAAA,SAAAvB,UAAA;UAAA,OAAAsB,UAAA,CAAAD,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAAmI,SAAA;MAAA;IAAA;MAAAxH,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAmF,cAAsBwC,EAAS,EAAE;QAC/B,IAAM5C,QAAQ,GAAI4C,EAAE,CAAC8B,aAAa,CAAS1E,QAAQ;QACnD/H,SAAS,CAAC,IAAI,EAAE,gBAAgB,EAAE;UAAE+H,QAAQ,EAARA;QAAS,CAAC,CAAC;MACjD;IAAC;MAAAnF,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAA0J,YAAA,GAAAnC,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAkC,SAAA;UAAA,IAAAlD,MAAA;UAAA,OAAAe,mBAAA,GAAAI,IAAA,UAAAgC,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA9B,IAAA,GAAA8B,SAAA,CAAA7B,IAAA;cAAA;gBAAA6B,SAAA,CAAA9B,IAAA;gBAAA8B,SAAA,CAAA7B,IAAA;gBAAA,OAGmBnK,cAAc,CAAC,IAAI,CAACmE,IAAI,EAAE,IAAI,CAAC+B,OAAQ,CAAC;cAAA;gBAAvD0C,MAAM,GAAAoD,SAAA,CAAAT,IAAA;gBAAAS,SAAA,CAAA7B,IAAA;gBAAA;cAAA;gBAAA6B,SAAA,CAAA9B,IAAA;gBAAA8B,SAAA,CAAA5B,EAAA,GAAA4B,SAAA;gBAAAA,SAAA,CAAA7B,IAAA;gBAAA,OAEA9J,eAAe,CAAC,IAAI,EAAE;kBAC1B4L,IAAI,EACFD,SAAA,CAAA5B,EAAA,CAAI8B,WAAW,KAAK,GAAG,GACnB,IAAI,CAAC/H,IAAI,CAAC6B,QAAQ,CAChB,sDACF,CAAC,GACD,IAAI,CAAC7B,IAAI,CAAC6B,QAAQ,CAChB,iDAAiD,EACjD;oBAAEmG,MAAM,EAAEH,SAAA,CAAA5B,EAAA,CAAI8B;kBAAY,CAC5B;gBACR,CAAC,CAAC;cAAA;gBACFE,OAAO,CAACC,IAAI,CAAC,CAAC;gBAAC,OAAAL,SAAA,CAAAxB,MAAA;cAAA;gBAIjB,IAAI,CAAC5B,MAAM,CAAC/F,QAAQ,EAAE;kBACpB+F,MAAM,CAAC/F,QAAQ,GAAG,CAAC,CAAC;gBACtB;gBAEA,IAAI,CAACgG,aAAa,CAACD,MAAM,CAAC;gBAE1B,IAAI,CAACW,SAAS,CAAC,CAAC;gBAEhB,IAAI,CAACtB,MAAM,GAAG,KAAK;gBACnB,IAAI,CAAC1B,OAAO,GAAGqC,MAAM;cAAC;cAAA;gBAAA,OAAAoD,SAAA,CAAAtB,IAAA;YAAA;UAAA,GAAAoB,QAAA;QAAA,CACvB;QAAA,SAAAtD,YAAA;UAAA,OAAAqD,YAAA,CAAAjB,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAAoH,WAAA;MAAA;IAAA;MAAAzG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0G,cAAsBD,MAAmB,EAAE;QAAA,IAAA0D,MAAA;QACzC,IAAI,CAAC9G,SAAS,GAAGkD,MAAM,CAAC6D,IAAI,CAAC3D,MAAM,CAAC/F,QAAQ,CAAC;QAC7C,IAAI,CAAC2C,SAAS,CAAC1B,OAAO,CAAC,UAACQ,MAAM;UAAA,OAAKgI,MAAI,CAACE,WAAW,CAAClI,MAAM,CAAC;QAAA,EAAC;QAC5D,IAAI,CAAC+E,gBAAgB,GAAG,EAAE;QAE1B,IAAMoD,iBAAiB,GAAG,IAAI,CAACvH,sBAAsB,CAACwH,MAAM,CAAC,UAACC,SAAS;UAAA,OACrEL,MAAI,CAAC9G,SAAS,CAACjB,QAAQ,CAACoI,SAAS,CAACpK,SAAS,CAAC;QAAA,CAC9C,CAAC;QACD,IAAMqK,UAAoB,GAAG,EAAE;QAE/B,IAAIhE,MAAM,CAACiE,QAAQ,EAAE;UACnBnE,MAAM,CAAC6D,IAAI,CAAC3D,MAAM,CAAC/F,QAAQ,CAAC,CAACiB,OAAO,CAAC,UAACQ,MAAM,EAAK;YAAA,IAAAwI,OAAA;YAC/C,IACE,CAACR,MAAI,CAACjD,gBAAgB,CAAC9E,QAAQ,CAACD,MAAM,CAAC,KAAAwI,OAAA,GACvClE,MAAM,CAACiE,QAAQ,CAAEvI,MAAM,CAAC,cAAAwI,OAAA,eAAxBA,OAAA,CAA0BC,WAAW,EACrC;cACAT,MAAI,CAACjD,gBAAgB,CAACpF,IAAI,CAACK,MAAM,CAAC;YACpC;UACF,CAAC,CAAC;QACJ;QAAC,IAAA0I,UAAA,GAAA5J,0BAAA,CAEuBqJ,iBAAiB;UAAAQ,MAAA;QAAA;UAAzC,KAAAD,UAAA,CAAA1J,CAAA,MAAA2J,MAAA,GAAAD,UAAA,CAAAzJ,CAAA,IAAAC,IAAA,GAA2C;YAAA,IAAA0J,gBAAA;YAAA,IAAhCP,SAAS,GAAAM,MAAA,CAAA9K,KAAA;YAClB,IAAI,CAACwK,SAAS,CAACzD,SAAS,EAAE;cACxB;YACF;YACA,IAAMiE,cAAc,IAAAD,gBAAA,GAAGtE,MAAM,CAACiE,QAAQ,cAAAK,gBAAA,uBAAfA,gBAAA,CAAkBP,SAAS,CAACpK,SAAS,CAAC;YAC7D,IACE,CAACqK,UAAU,CAACrI,QAAQ,CAACoI,SAAS,CAACzD,SAAS,CAAC,IACzC,EAACiE,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEJ,WAAW,GAC5B;cACAH,UAAU,CAAC3I,IAAI,CAAC0I,SAAS,CAACzD,SAAS,CAAC;YACtC;UACF;QAAC,SAAAvF,GAAA;UAAAqJ,UAAA,CAAApJ,CAAA,CAAAD,GAAA;QAAA;UAAAqJ,UAAA,CAAAnJ,CAAA;QAAA;QAED,IAAI,CAAC4B,QAAQ,GAAGmH,UAAU;MAC5B;IAAC;MAAA7K,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0F,cAAsBiC,EAAe,EAAE;QACrC,IAAM5C,QAAQ,GAAG4C,EAAE,CAACO,MAAM,CAAClI,KAAK;QAC/B2H,EAAE,CAACsD,MAAM,CAASjL,KAAK,GAAG,EAAE;QAC7B,IAAI,IAAI,CAACqD,SAAS,CAACjB,QAAQ,CAAC2C,QAAQ,CAAC,EAAE;UACrC;QACF;QACA,IAAI,CAAC1B,SAAS,MAAA9D,MAAA,CAAA4H,kBAAA,CAAO,IAAI,CAAC9D,SAAS,IAAE0B,QAAQ,EAAC;QAC9C,IAAI,CAACmC,gBAAgB,CAACpF,IAAI,CAACiD,QAAQ,CAAC;QACpC,IAAI,CAACsF,WAAW,CAACtF,QAAQ,CAAC;QAC1B,IAAI,CAACe,MAAM,GAAG,IAAI;MACpB;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAyF,cAAsBkC,EAAS,EAAE;QAC/BA,EAAE,CAACuD,eAAe,CAAC,CAAC;QACpB,IAAMC,cAAc,GAAIxD,EAAE,CAACsD,MAAM,CAASlG,QAAQ;QAClD,IAAI,CAAC1B,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkH,MAAM,CACpC,UAACxF,QAAQ;UAAA,OAAKA,QAAQ,KAAKoG,cAAc;QAAA,CAC3C,CAAC;QACD,IAAI,CAACjE,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACqD,MAAM,CAClD,UAACxF,QAAQ;UAAA,OAAKA,QAAQ,KAAKoG,cAAc;QAAA,CAC3C,CAAC;QACD,IAAI,CAACrF,MAAM,GAAG,IAAI;MACpB;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoL,YAAoBrE,SAAiB,EAAE;QAAA,IAAAsE,MAAA;QACrC,IAAI,IAAI,CAAC/H,QAAQ,CAAClB,QAAQ,CAAC2E,SAAS,CAAC,EAAE;UACrC;QACF;QACA,IAAI,CAACzD,QAAQ,MAAA/D,MAAA,CAAA4H,kBAAA,CAAO,IAAI,CAAC7D,QAAQ,IAAEyD,SAAS,EAAC;QAC7C,IAAMlF,cAAc,GAAG,IAAI,CAACI,mBAAmB,CAAC8E,SAAS,CAAC;QAC1D,IAAI,CAAClF,cAAc,EAAE;UACnB;QACF;QACA,IAAI,CAACwB,SAAS,MAAA9D,MAAA,CAAA4H,kBAAA,CAAO,IAAI,CAAC9D,SAAS,GAAA8D,kBAAA,CAAKtF,cAAc,EAAC;QACvDA,cAAc,CAACF,OAAO,CAAC,UAACoD,QAAQ,EAAK;UACnCsG,MAAI,CAAChB,WAAW,CAACtF,QAAQ,CAAC;QAC5B,CAAC,CAAC;QACF,IAAI,CAACe,MAAM,GAAG,IAAI;MACpB;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoF,cAAsBuC,EAAe,EAAE;QACrC,IAAMrG,MAAM,GAAGqG,EAAE,CAACO,MAAM,CAAClI,KAAK;QAC7B2H,EAAE,CAACsD,MAAM,CAASjL,KAAK,GAAG,EAAE;QAC7B,IAAI,CAACoL,WAAW,CAAC9J,MAAM,CAAC;MAC1B;IAAC;MAAA1B,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA8E,cAAsB6C,EAAS,EAAE;QAC/B,IAAM/F,QAAQ,GAAI+F,EAAE,CAACsD,MAAM,CAAS3J,MAAM;QAC1C,IAAI,CAACgC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACiH,MAAM,CAAC,UAACjJ,MAAM;UAAA,OAAKA,MAAM,KAAKM,QAAQ;QAAA,EAAC;QACrE,IAAMC,cAAc,GAAG,IAAI,CAACI,mBAAmB,CAACL,QAAQ,CAAC;QACzD,IAAI,CAACC,cAAc,EAAE;UACnB;QACF;QACA,IAAI,CAACwB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACkH,MAAM,CACpC,UAACxF,QAAQ;UAAA,OAAK,CAAClD,cAAc,CAACO,QAAQ,CAAC2C,QAAQ,CAAC;QAAA,CAClD,CAAC;QACD,IAAI,CAACe,MAAM,GAAG,IAAI;MACpB;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwE,cAAsBmD,EAAS,EAAE;QAAA,IAAA2D,aAAA,EAAAC,OAAA;QAC/B5D,EAAE,CAACuD,eAAe,CAAC,CAAC;QACpB,IAAMD,MAAM,GAAGtD,EAAE,CAACsD,MAAa;QAC/B,IAAMlJ,IAAI,GAAGkJ,MAAM,CAAClJ,IAAI;QACxB,IAAI,CAACA,IAAI,EAAE;UACT;QACF;QACA,IAAIyJ,MAAM,IAAAF,aAAA,IAAAC,OAAA,GAAI5D,EAAE,CAAiBO,MAAM,cAAAqD,OAAA,uBAA1BA,OAAA,CAA4BvL,KAAK,cAAAsL,aAAA,cAAAA,aAAA,GAAIL,MAAM,CAACjL,KAAK;QAC9D,IAAIiL,MAAM,CAAChL,IAAI,KAAK,QAAQ,EAAE;UAC5BuL,MAAM,GAAGC,MAAM,CAACD,MAAM,CAAC;QACzB;QACA,IAAI,CAAC,IAAI,CAACpH,OAAO,CAAErC,IAAI,CAAC,IAAI,EAAE,MAAMyJ,MAAM,EAAE;UAC1C;QACF;QACA,IAAI,CAACA,MAAM,EAAE;UACX,OAAO,IAAI,CAACpH,OAAO,CAAErC,IAAI,CAAC;UAC1B,IAAI,CAACqC,OAAO,GAAAmC,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACpC,OAAO,CAAG;QACrC,CAAC,MAAM;UACL,IAAI,CAACA,OAAO,GAAAmC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQ,IAAI,CAACpC,OAAO,OAAAsH,eAAA,KAAI3J,IAAI,EAAGyJ,MAAM,EAAE;QACrD;QACA,IAAI,CAAC1F,MAAM,GAAG,IAAI;MACpB;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA2E,aAAqBgD,EAAe,EAAE;QACpC,IAAMgE,QAAQ,GAAGhE,EAAE,CAACO,MAAM,CAAClI,KAAK,KAAK,EAAE,GAAG,IAAI,GAAG2H,EAAE,CAACO,MAAM,CAAClI,KAAK;QAEhE,IAAI2L,QAAQ,MAAM,IAAI,CAACjH,uBAAuB,IAAI,EAAE,CAAC,EAAE;UACrD;QACF;QAEA,IAAIiH,QAAQ,KAAK,IAAI,CAACC,mBAAmB,EAAE;UACzC,IAAI,CAAChF,cAAc,GAAGjE,SAAS;QACjC,CAAC,MAAM;UACL,IAAI,CAACiE,cAAc,GAAG+E,QAAQ;UAC9B,IAAI,CAAC7F,MAAM,GAAG,IAAI;QACpB;MACF;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwJ,cAAsBD,KAAgB,EAAE;QACtC,IACEA,KAAK,CAACR,OAAO,CAACxH,EAAE,KAAK,IAAI,CAAC8H,kBAAkB,IAC5C,IAAI,CAAChG,SAAS,CAACjB,QAAQ,CAACmH,KAAK,CAACsC,IAAI,CAACzL,SAAS,CAAC,EAC7C;UACA,IAAI,CAAC0F,MAAM,GAAG,IAAI;QACpB;MACF;IAAC;MAAAlG,IAAA;MAAAG,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,IAAA8L,MAAA;QAAA,oBAAAvE,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAEqB,SAAAsE,SAAA;UAAA,IAAAC,MAAA;UAAA,OAAAxE,mBAAA,GAAAI,IAAA,UAAAqE,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAnE,IAAA,GAAAmE,SAAA,CAAAlE,IAAA;cAAA;gBAAAkE,SAAA,CAAAlE,IAAA;gBAAA,OACC8D,MAAI,CAACK,qBAAqB,CAAC,CAAC;cAAA;gBAA3CH,MAAM,GAAAE,SAAA,CAAA9C,IAAA;gBACZ,IAAI4C,MAAM,EAAE;kBACVF,MAAI,CAACM,OAAO,CAAC,CAAC;gBAChB;cAAC;cAAA;gBAAA,OAAAF,SAAA,CAAA3D,IAAA;YAAA;UAAA,GAAAwD,QAAA;QAAA,CACF;MAAA;IAAA;MAAAnM,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoM,QAAA,EAAwB;QACtBzO,UAAU,CAAC,IAAI,CAACqE,IAAI,EAAE,IAAI,CAACqK,aAAa,CAAC;QACzChP,eAAe,CAAC;UAAA,OAAM4M,OAAO,CAACC,IAAI,CAAC,CAAC;QAAA,EAAC;MACvC;IAAC;MAAAtK,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAsI,cAAA,EAA8B;QAAA,IAAAgE,aAAA;UAAAC,MAAA;QAC5BpO,sBAAsB,CAAC,IAAI,EAAE;UAC3BqO,KAAK,EAAE,IAAI,CAACxK,IAAI,CAAE6B,QAAQ,CACxB,mDACF,CAAC;UACDiG,IAAI,EAAE,IAAI,CAAC9H,IAAI,CAAE6B,QAAQ,CACvB,kDAAkD,EAClD;YAAE9B,IAAI,GAAAuK,aAAA,GAAE,IAAI,CAAClI,OAAO,cAAAkI,aAAA,uBAAZA,aAAA,CAAcvK;UAAK,CAC7B,CAAC;UACD0K,WAAW,EAAE,IAAI,CAACzK,IAAI,CAAE6B,QAAQ,CAAC,kBAAkB,CAAC;UACpD6I,WAAW,EAAE,IAAI,CAAC1K,IAAI,CAAE6B,QAAQ,CAAC,kBAAkB,CAAC;UACpD8I,OAAO,EAAE,SAAAA,QAAA;YAAA,OAAMJ,MAAI,CAACK,OAAO,CAAC,CAAC;UAAA;UAC7BC,WAAW,EAAE;QACf,CAAC,CAAC;MACJ;IAAC;MAAAjN,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAA8M,QAAA,GAAAvF,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAAsF,SAAA;UAAA,OAAAvF,mBAAA,GAAAI,IAAA,UAAAoF,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAlF,IAAA,GAAAkF,SAAA,CAAAjF,IAAA;cAAA;gBAAAiF,SAAA,CAAAjF,IAAA;gBAAA,OACQpK,WAAW,CAAC,IAAI,CAACoE,IAAI,EAAE,IAAI,CAAC+B,OAAQ,CAAC;cAAA;gBAC3CpG,UAAU,CAAC,IAAI,CAACqE,IAAI,EAAE,IAAI,CAACqK,aAAa,CAAC;gBACzCpC,OAAO,CAACC,IAAI,CAAC,CAAC;cAAC;cAAA;gBAAA,OAAA+C,SAAA,CAAA1E,IAAA;YAAA;UAAA,GAAAwE,QAAA;QAAA,CAChB;QAAA,SAAAH,QAAA;UAAA,OAAAE,QAAA,CAAArE,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAA2N,OAAA;MAAA;IAAA;MAAAhN,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAkN,sBAAA,GAAA3F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA0F,SAAA;UAAA,OAAA3F,mBAAA,GAAAI,IAAA,UAAAwF,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAtF,IAAA,GAAAsF,SAAA,CAAArF,IAAA;cAAA;gBAAA,KACM,IAAI,CAAClC,MAAM;kBAAAuH,SAAA,CAAArF,IAAA;kBAAA;gBAAA;gBAAA,OAAAqF,SAAA,CAAAhF,MAAA,WACNlK,sBAAsB,CAAC,IAAI,EAAE;kBAClCqO,KAAK,EAAE,IAAI,CAACxK,IAAI,CAAE6B,QAAQ,CACxB,oDACF,CAAC;kBACDiG,IAAI,EAAE,IAAI,CAAC9H,IAAI,CAAE6B,QAAQ,CACvB,mDACF,CAAC;kBACD4I,WAAW,EAAE,IAAI,CAACzK,IAAI,CAAE6B,QAAQ,CAAC,iBAAiB,CAAC;kBACnD6I,WAAW,EAAE,IAAI,CAAC1K,IAAI,CAAE6B,QAAQ,CAAC,gBAAgB,CAAC;kBAClDgJ,WAAW,EAAE;gBACf,CAAC,CAAC;cAAA;gBAAA,OAAAQ,SAAA,CAAAhF,MAAA,WAEG,IAAI;cAAA;cAAA;gBAAA,OAAAgF,SAAA,CAAA9E,IAAA;YAAA;UAAA,GAAA4E,QAAA;QAAA,CACZ;QAAA,SAAAhB,sBAAA;UAAA,OAAAe,sBAAA,CAAAzE,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAAkN,qBAAA;MAAA;IAAA;MAAAvM,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAsN,WAAA,GAAA/F,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA8F,SAAA;UAAA,IAAAvB,MAAA,EAAAwB,cAAA;UAAA,OAAAhG,mBAAA,GAAAI,IAAA,UAAA6F,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAA3F,IAAA,GAAA2F,SAAA,CAAA1F,IAAA;cAAA;gBAAA0F,SAAA,CAAA1F,IAAA;gBAAA,OACuB,IAAI,CAACmE,qBAAqB,CAAC,CAAC;cAAA;gBAA3CH,MAAM,GAAA0B,SAAA,CAAAtE,IAAA;gBACZ,IAAI4C,MAAM,EAAE;kBACV/N,eAAe,CAAAsI,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAER,IAAI,CAACpC,OAAO;oBACf7C,EAAE,EAAEoB,SAAS;oBACbZ,IAAI,KAAAxC,MAAA,EAAAiO,cAAA,GAAK,IAAI,CAACpJ,OAAO,cAAAoJ,cAAA,uBAAZA,cAAA,CAAczL,IAAI,QAAAxC,MAAA,CAAK,IAAI,CAACyC,IAAI,CAAC6B,QAAQ,CAChD,wCACF,CAAC;kBAAG,IAEN,IAAI,CAAC+H,mBAAmB,IAAIjJ,SAC9B,CAAC;gBACH;cAAC;cAAA;gBAAA,OAAA+K,SAAA,CAAAnF,IAAA;YAAA;UAAA,GAAAgF,QAAA;QAAA,CACF;QAAA,SAAAnF,WAAA;UAAA,OAAAkF,WAAA,CAAA7E,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAAmJ,UAAA;MAAA;IAAA;MAAAxI,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA2N,mBAAA,EAA4C;QAC1C,IAAMC,MAAqB,GAAG,CAAC,CAAC;QAAC,IAAAC,UAAA,GAAA5M,0BAAA,CAEV,IAAI,CAACiG,gBAAgB;UAAA4G,MAAA;QAAA;UAA5C,KAAAD,UAAA,CAAA1M,CAAA,MAAA2M,MAAA,GAAAD,UAAA,CAAAzM,CAAA,IAAAC,IAAA,GAA8C;YAAA,IAAnC0D,QAAQ,GAAA+I,MAAA,CAAA9N,KAAA;YACjB,IAAM+N,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACjJ,QAAQ,CAAC;YAEnD,IAAI,CAACgJ,WAAW,EAAE;cAChB;YACF;YAEAH,MAAM,CAAC7I,QAAQ,CAAC,GAAG;cACjB6F,WAAW,EAAE;YACf,CAAC;UACH;QAAC,SAAApJ,GAAA;UAAAqM,UAAA,CAAApM,CAAA,CAAAD,GAAA;QAAA;UAAAqM,UAAA,CAAAnM,CAAA;QAAA;QAED,OAAOkM,MAAM;MACf;IAAC;MAAAhO,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAiO,iBAAA,EAA0C;QAAA,IAAAC,OAAA;QACxC,IAAMN,MAAqB,GAAG,CAAC,CAAC;QAChC,IAAI,CAACvK,SAAS,CAAC1B,OAAO,CAAC,UAACoD,QAAQ,EAAK;UACnC,IAAMgJ,WAAW,GAAGG,OAAI,CAACF,gBAAgB,CAACjJ,QAAQ,CAAC;UACnD,IAAIgJ,WAAW,EAAE;YACfH,MAAM,CAAC7I,QAAQ,CAAC,GAAGgJ,WAAW;UAChC;QACF,CAAC,CAAC;QACF,OAAOH,MAAM;MACf;IAAC;MAAAhO,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAqK,YAAoBtF,QAAgB,EAAQ;QAC1C,IAAIA,QAAQ,IAAI,IAAI,CAACsH,aAAa,EAAE;UAClC;QACF;QACA,IAAM0B,WAAW,GAAG,IAAI,CAACC,gBAAgB,CAACjJ,QAAQ,CAAC;QACnD,IAAI,CAACgJ,WAAW,EAAE;UAChB;QACF;QACA,IAAI,CAAC1B,aAAa,CAACtH,QAAQ,CAAC,GAAGgJ,WAAW;MAC5C;IAAC;MAAAnO,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAgO,iBAAyBjJ,QAAgB,EAAE;QACzC,IAAMoJ,QAAQ,GAAG,IAAI,CAACnM,IAAI,CAACiD,MAAM,CAACF,QAAQ,CAAC;QAC3C,IAAI,CAACoJ,QAAQ,EAAE;UACb,OAAOxL,SAAS;QAClB;QACA,OAAA4D,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAY2H,QAAQ,CAAChF,UAAU;UAAEtM,KAAK,EAAEsR,QAAQ,CAACtR;QAAK;MACxD;IAAC;MAAA+C,IAAA;MAAAG,GAAA;MAAAC,KAAA;QAAA,IAAAoO,WAAA,GAAA7G,iBAAA,eAAAC,mBAAA,GAAAC,IAAA,CAED,SAAA4G,SAAA;UAAA,IAAAC,OAAA;UAAA,IAAA/M,EAAA,EAAAsH,KAAA;UAAA,OAAArB,mBAAA,GAAAI,IAAA,UAAA2G,UAAAC,SAAA;YAAA,kBAAAA,SAAA,CAAAzG,IAAA,GAAAyG,SAAA,CAAAxG,IAAA;cAAA;gBACQzG,EAAE,GAAG,CAAC,IAAI,CAACwC,OAAO,GAAG,EAAE,GAAG0K,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC3K,OAAQ;gBAC1D,IAAI,CAACK,OAAO,GAAAmC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACP,IAAI,CAACpC,OAAO;kBACf1D,QAAQ,EAAE,IAAI,CAACuN,gBAAgB,CAAC,CAAC;kBACjCvD,QAAQ,EAAE,IAAI,CAACiD,kBAAkB,CAAC;gBAAC,EACpC;gBAACa,SAAA,CAAAzG,IAAA;gBAEA,IAAI,CAACpC,OAAO,GAAG,IAAI;gBAAC6I,SAAA,CAAAxG,IAAA;gBAAA,OACdjK,SAAS,CAAC,IAAI,CAACiE,IAAI,EAAET,EAAE,EAAE,IAAI,CAAC6C,OAAO,CAAC;cAAA;gBAAA,MAExC,IAAI,CAACwC,cAAc,KAAKjE,SAAS;kBAAA6L,SAAA,CAAAxG,IAAA;kBAAA;gBAAA;gBAC/Ba,KAAK,GACP,IAAI,CAACjF,MAAM,IACX,IAAI,CAACsF,MAAM,CAAC5I,IAAI,CACd,UAAC6B,MAAmB;kBAAA,OAAKA,MAAM,CAACgH,UAAU,CAAC5H,EAAE,KAAKA,EAAE;gBAAA,CACtD,CAAC;gBAAA,IAEEsH,KAAK;kBAAA2F,SAAA,CAAAxG,IAAA;kBAAA;gBAAA;gBAAAwG,SAAA,CAAAzG,IAAA;gBAAAyG,SAAA,CAAAxG,IAAA;gBAAA,OAEA,IAAI2G,OAAO,CAAO,UAACC,OAAO,EAAEC,MAAM,EAAK;kBAC3CC,UAAU,CAACD,MAAM,EAAE,IAAI,CAAC;kBACxBP,OAAI,CAACjH,UAAU,GAAGuH,OAAO;gBAC3B,CAAC,CAAC;cAAA;gBACF/F,KAAK,GAAG,IAAI,CAACK,MAAM,CAAC5I,IAAI,CACtB,UAAC6B,MAAmB;kBAAA,OAAKA,MAAM,CAACgH,UAAU,CAAC5H,EAAE,KAAKA,EAAE;gBAAA,CACtD,CAAC;gBAACiN,SAAA,CAAAxG,IAAA;gBAAA;cAAA;gBAAAwG,SAAA,CAAAzG,IAAA;gBAAAyG,SAAA,CAAAvG,EAAA,GAAAuG,SAAA;cAAA;gBAAAA,SAAA,CAAAzG,IAAA;gBAIF,IAAI,CAACV,UAAU,GAAG1E,SAAS;gBAAC,OAAA6L,SAAA,CAAAO,MAAA;cAAA;gBAAA,KAI5BlG,KAAK;kBAAA2F,SAAA,CAAAxG,IAAA;kBAAA;gBAAA;gBAAAwG,SAAA,CAAAxG,IAAA;gBAAA,OACDvK,yBAAyB,CAAC,IAAI,CAACuE,IAAI,EAAE6G,KAAK,CAACzI,SAAS,EAAE;kBAC1DI,OAAO,EAAE,IAAI,CAACoG;gBAChB,CAAC,CAAC;cAAA;gBAGJ,IAAI,CAACA,cAAc,GAAGjE,SAAS;cAAC;gBAGlC,IAAI,CAACmD,MAAM,GAAG,KAAK;gBAEnB,IAAI,CAAC,IAAI,CAAC/B,OAAO,EAAE;kBACjB5G,QAAQ,uBAAAoC,MAAA,CAAuBgC,EAAE,GAAI;oBAAEyN,OAAO,EAAE;kBAAK,CAAC,CAAC;gBACzD;gBAACR,SAAA,CAAAxG,IAAA;gBAAA;cAAA;gBAAAwG,SAAA,CAAAzG,IAAA;gBAAAyG,SAAA,CAAAS,EAAA,GAAAT,SAAA;gBAED,IAAI,CAACvK,OAAO,GAAGuK,SAAA,CAAAS,EAAA,CAAIC,IAAI,CAACC,OAAO,IAAIX,SAAA,CAAAS,EAAA,CAAIE,OAAO;gBAC9C5Q,SAAS,CAAC,IAAI,EAAE;kBACd4Q,OAAO,EAAEX,SAAA,CAAAS,EAAA,CAAIC,IAAI,CAACC,OAAO,IAAIX,SAAA,CAAAS,EAAA,CAAIE;gBACnC,CAAC,CAAC;gBAAC,MAAAX,SAAA,CAAAS,EAAA;cAAA;gBAAAT,SAAA,CAAAzG,IAAA;gBAGH,IAAI,CAACpC,OAAO,GAAG,KAAK;gBAAC,OAAA6I,SAAA,CAAAO,MAAA;cAAA;cAAA;gBAAA,OAAAP,SAAA,CAAAjG,IAAA;YAAA;UAAA,GAAA8F,QAAA;QAAA,CAExB;QAAA,SAAAzI,WAAA;UAAA,OAAAwI,WAAA,CAAA3F,KAAA,OAAAxJ,SAAA;QAAA;QAAA,OAAA2G,UAAA;MAAA;IAAA;MAAAhG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoP,mBAAA,EAA+B;QAC7B,IAAI,CAACxJ,UAAU,CAAC,CAAC;MACnB;IAAC;MAAAhG,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0E,wBAAA,EAAiE;QAC/D,OAAO,IAAI,CAACkC,cAAc,KAAKjE,SAAS,GACpC,IAAI,CAACiE,cAAc,GACnB,IAAI,CAACgF,mBAAmB;MAC9B;IAAC;MAAAhM,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA4L,oBAAA,EAA6D;QAC3D,OAAO,IAAI,CAAChI,MAAM,GACd,IAAI,CAACyL,kBAAkB,CACrB,IAAI,CAACtM,sBAAsB,EAC3B,IAAI,CAACa,MAAM,CAACxD,SACd,CAAC,GACDuC,SAAS;MACf;IAAC;MAAA/C,IAAA;MAAA0P,MAAA;MAAAvP,GAAA;MAAAC,KAAA,EAED,SAAAuP,OAAA,EAAoC;QAClC,OAAO,CACLjR,OAAO,EACP/B,GAAG,CAAAiT,gBAAA,KAAAA,gBAAA,GAAAhM,sBAAA,y5CAyDJ;MACH;IAAC;EAAA;AAAA,GA95BgCnF,cAAc,CAC/CD,qBAAqB,CAAC3B,UAAU,CAClC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}