{"ast":null,"code":"import _typeof from \"@babel/runtime/helpers/typeof\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nexport var processConfigEntities = function processConfigEntities(entities) {\n  var checkEntityId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n  return entities.map(function (entityConf, index) {\n    if (_typeof(entityConf) === \"object\" && !Array.isArray(entityConf) && entityConf.type) {\n      return entityConf;\n    }\n    var config;\n    if (typeof entityConf === \"string\") {\n      config = {\n        entity: entityConf\n      };\n    } else if (_typeof(entityConf) === \"object\" && !Array.isArray(entityConf)) {\n      if (!(\"entity\" in entityConf)) {\n        throw new Error(\"Object at position \".concat(index, \" is missing entity field\"));\n      }\n      config = entityConf;\n    } else {\n      throw new Error(\"Invalid entity ID at position \".concat(index));\n    }\n    if (checkEntityId && !isValidEntityId(config.entity)) {\n      throw new Error(\"Invalid entity ID at position \".concat(index, \": \").concat(config.entity));\n    }\n    return config;\n  });\n};","map":{"version":3,"names":["isValidEntityId","processConfigEntities","entities","checkEntityId","arguments","length","undefined","Array","isArray","Error","map","entityConf","index","_typeof","type","config","entity","concat"],"sources":["/workspaces/frontend/src/panels/lovelace/common/process-config-entities.ts"],"sourcesContent":["// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { EntityConfig, LovelaceRowConfig } from \"../entity-rows/types\";\n\nexport const processConfigEntities = <\n  T extends EntityConfig | LovelaceRowConfig,\n>(\n  entities: Array<T | string>,\n  checkEntityId = true\n): T[] => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n\n  return entities.map((entityConf, index): T => {\n    if (\n      typeof entityConf === \"object\" &&\n      !Array.isArray(entityConf) &&\n      entityConf.type\n    ) {\n      return entityConf;\n    }\n\n    let config: T;\n\n    if (typeof entityConf === \"string\") {\n      config = { entity: entityConf } as T;\n    } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n      if (!(\"entity\" in entityConf)) {\n        throw new Error(`Object at position ${index} is missing entity field`);\n      }\n      config = entityConf as T;\n    } else {\n      throw new Error(`Invalid entity ID at position ${index}`);\n    }\n\n    if (checkEntityId && !isValidEntityId((config as EntityConfig).entity!)) {\n      throw new Error(\n        `Invalid entity ID at position ${index}: ${\n          (config as EntityConfig).entity\n        }`\n      );\n    }\n\n    return config;\n  });\n};\n"],"mappings":";;;;;AAAA;AACA,SAASA,eAAe,QAAQ,wCAAwC;AAGxE,OAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAGhCC,QAA2B,EAEnB;EAAA,IADRC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAEpB,IAAI,CAACF,QAAQ,IAAI,CAACK,KAAK,CAACC,OAAO,CAACN,QAAQ,CAAC,EAAE;IACzC,MAAM,IAAIO,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,OAAOP,QAAQ,CAACQ,GAAG,CAAC,UAACC,UAAU,EAAEC,KAAK,EAAQ;IAC5C,IACEC,OAAA,CAAOF,UAAU,MAAK,QAAQ,IAC9B,CAACJ,KAAK,CAACC,OAAO,CAACG,UAAU,CAAC,IAC1BA,UAAU,CAACG,IAAI,EACf;MACA,OAAOH,UAAU;IACnB;IAEA,IAAII,MAAS;IAEb,IAAI,OAAOJ,UAAU,KAAK,QAAQ,EAAE;MAClCI,MAAM,GAAG;QAAEC,MAAM,EAAEL;MAAW,CAAM;IACtC,CAAC,MAAM,IAAIE,OAAA,CAAOF,UAAU,MAAK,QAAQ,IAAI,CAACJ,KAAK,CAACC,OAAO,CAACG,UAAU,CAAC,EAAE;MACvE,IAAI,EAAE,QAAQ,IAAIA,UAAU,CAAC,EAAE;QAC7B,MAAM,IAAIF,KAAK,uBAAAQ,MAAA,CAAuBL,KAAK,6BAA0B,CAAC;MACxE;MACAG,MAAM,GAAGJ,UAAe;IAC1B,CAAC,MAAM;MACL,MAAM,IAAIF,KAAK,kCAAAQ,MAAA,CAAkCL,KAAK,CAAE,CAAC;IAC3D;IAEA,IAAIT,aAAa,IAAI,CAACH,eAAe,CAAEe,MAAM,CAAkBC,MAAO,CAAC,EAAE;MACvE,MAAM,IAAIP,KAAK,kCAAAQ,MAAA,CACoBL,KAAK,QAAAK,MAAA,CACnCF,MAAM,CAAkBC,MAAM,CAEnC,CAAC;IACH;IAEA,OAAOD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}