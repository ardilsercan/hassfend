{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport Fuse from \"fuse.js\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { until } from \"lit/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { storage } from \"../../../../common/decorators/storage\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/search-input\";\nimport { isUnavailableState } from \"../../../../data/entity\";\nimport { CUSTOM_TYPE_PREFIX, customCards, getCustomCardEntry } from \"../../../../data/lovelace_custom_cards\";\nimport { calcUnusedEntities, computeUsedEntities } from \"../../common/compute-unused-entities\";\nimport { tryCreateCardElement } from \"../../create-element/create-card-element\";\nimport { getCardStubConfig } from \"../get-card-stub-config\";\nimport { coreCards } from \"../lovelace-cards\";\nexport let HuiCardPicker = _decorate([customElement(\"hui-card-picker\")], function (_initialize, _LitElement) {\n  class HuiCardPicker extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiCardPicker,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [storage({\n        key: \"lovelaceClipboard\",\n        state: true,\n        subscribe: true,\n        storage: \"sessionStorage\"\n      })],\n      key: \"_clipboard\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_cards\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"lovelace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"cardPicked\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_filter\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_width\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_height\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_unusedEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_usedEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_filterCards\",\n      value() {\n        return memoizeOne((cardElements, filter) => {\n          if (!filter) {\n            return cardElements;\n          }\n          let cards = cardElements.map(cardElement => cardElement.card);\n          const options = {\n            keys: [\"type\", \"name\", \"description\"],\n            isCaseSensitive: false,\n            minMatchCharLength: Math.min(filter.length, 2),\n            threshold: 0.2\n          };\n          const fuse = new Fuse(cards, options);\n          cards = fuse.search(filter).map(result => result.item);\n          return cardElements.filter(cardElement => cards.includes(cardElement.card));\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this.lovelace || !this._unusedEntities || !this._usedEntities) {\n          return nothing;\n        }\n        return html`\n      <search-input\n        .hass=${this.hass}\n        .filter=${this._filter}\n        @value-changed=${this._handleSearchChange}\n        .label=${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.search_cards\")}\n      ></search-input>\n      <div\n        id=\"content\"\n        style=${styleMap({\n          width: this._width ? `${this._width}px` : \"auto\",\n          height: this._height ? `${this._height}px` : \"auto\"\n        })}\n      >\n        <div class=\"cards-container\">\n          ${this._clipboard && !this._filter ? html`\n                ${until(this._renderCardElement({\n          type: this._clipboard.type,\n          showElement: true,\n          isCustom: false,\n          name: this.hass.localize(\"ui.panel.lovelace.editor.card.generic.paste\"),\n          description: `${this.hass.localize(\"ui.panel.lovelace.editor.card.generic.paste_description\", {\n            type: this._clipboard.type\n          })}`\n        }, this._clipboard), html`\n                    <div class=\"card spinner\">\n                      <ha-circular-progress\n                        indeterminate\n                      ></ha-circular-progress>\n                    </div>\n                  `)}\n              ` : nothing}\n          ${this._filterCards(this._cards, this._filter).map(cardElement => cardElement.element)}\n        </div>\n        <div class=\"cards-container\">\n          <div\n            class=\"card manual\"\n            @click=${this._cardPicked}\n            .config=${{\n          type: \"\"\n        }}\n          >\n            <div class=\"card-header\">\n              ${this.hass.localize(`ui.panel.lovelace.editor.card.generic.manual`)}\n            </div>\n            <div class=\"preview description\">\n              ${this.hass.localize(`ui.panel.lovelace.editor.card.generic.manual_description`)}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        const oldHass = changedProps.get(\"hass\");\n        if (!oldHass) {\n          return true;\n        }\n        if (oldHass.locale !== this.hass.locale) {\n          return true;\n        }\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        if (!this.hass || !this.lovelace) {\n          return;\n        }\n        const usedEntities = computeUsedEntities(this.lovelace);\n        const unusedEntities = calcUnusedEntities(this.hass, usedEntities);\n        this._usedEntities = [...usedEntities].filter(eid => this.hass.states[eid] && !isUnavailableState(this.hass.states[eid].state));\n        this._unusedEntities = [...unusedEntities].filter(eid => this.hass.states[eid] && !isUnavailableState(this.hass.states[eid].state));\n        this._loadCards();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_loadCards\",\n      value: function _loadCards() {\n        let cards = coreCards.map(card => ({\n          name: this.hass.localize(`ui.panel.lovelace.editor.card.${card.type}.name`),\n          description: this.hass.localize(`ui.panel.lovelace.editor.card.${card.type}.description`),\n          ...card\n        }));\n        if (customCards.length > 0) {\n          cards = cards.concat(customCards.map(ccard => ({\n            type: ccard.type,\n            name: ccard.name,\n            description: ccard.description,\n            showElement: ccard.preview,\n            isCustom: true\n          })));\n        }\n        this._cards = cards.map(card => ({\n          card: card,\n          element: html`${until(this._renderCardElement(card), html`\n          <div class=\"card spinner\">\n            <ha-circular-progress indeterminate></ha-circular-progress>\n          </div>\n        `)}`\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSearchChange\",\n      value: function _handleSearchChange(ev) {\n        const value = ev.detail.value;\n        if (!value) {\n          // Reset when we no longer filter\n          this._width = undefined;\n          this._height = undefined;\n        } else if (!this._width || !this._height) {\n          // Save height and width so the dialog doesn't jump while searching\n          const div = this.shadowRoot.getElementById(\"content\");\n          if (div && !this._width) {\n            const width = div.clientWidth;\n            if (width) {\n              this._width = width;\n            }\n          }\n          if (div && !this._height) {\n            const height = div.clientHeight;\n            if (height) {\n              this._height = height;\n            }\n          }\n        }\n        this._filter = value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_cardPicked\",\n      value: function _cardPicked(ev) {\n        const config = ev.currentTarget.config;\n        fireEvent(this, \"config-changed\", {\n          config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_tryCreateCardElement\",\n      value: function _tryCreateCardElement(cardConfig) {\n        const element = tryCreateCardElement(cardConfig);\n        element.hass = this.hass;\n        element.addEventListener(\"ll-rebuild\", ev => {\n          ev.stopPropagation();\n          this._rebuildCard(element, cardConfig);\n        }, {\n          once: true\n        });\n        return element;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildCard\",\n      value: function _rebuildCard(cardElToReplace, config) {\n        let newCardEl;\n        try {\n          newCardEl = this._tryCreateCardElement(config);\n        } catch (err) {\n          return;\n        }\n        if (cardElToReplace.parentElement) {\n          cardElToReplace.parentElement.replaceChild(newCardEl, cardElToReplace);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderCardElement\",\n      value: async function _renderCardElement(card, config) {\n        let {\n          type\n        } = card;\n        const {\n          showElement,\n          isCustom,\n          name,\n          description\n        } = card;\n        const customCard = isCustom ? getCustomCardEntry(type) : undefined;\n        if (isCustom) {\n          type = `${CUSTOM_TYPE_PREFIX}${type}`;\n        }\n        let element;\n        let cardConfig = config !== null && config !== void 0 ? config : {\n          type\n        };\n        if (this.hass && this.lovelace) {\n          if (!config) {\n            cardConfig = await getCardStubConfig(this.hass, type, this._unusedEntities, this._usedEntities);\n          }\n          if (showElement) {\n            try {\n              element = this._tryCreateCardElement(cardConfig);\n            } catch (err) {\n              element = undefined;\n            }\n          }\n        }\n        return html`\n      <div class=\"card\">\n        <div\n          class=\"overlay\"\n          @click=${this._cardPicked}\n          .config=${cardConfig}\n        ></div>\n        <div class=\"card-header\">\n          ${customCard ? `${this.hass.localize(\"ui.panel.lovelace.editor.cardpicker.custom_card\")}: ${customCard.name || customCard.type}` : name}\n        </div>\n        <div\n          class=\"preview ${classMap({\n          description: !element || element.tagName === \"HUI-ERROR-CARD\"\n        })}\"\n        >\n          ${element && element.tagName !== \"HUI-ERROR-CARD\" ? element : customCard ? customCard.description || this.hass.localize(`ui.panel.lovelace.editor.cardpicker.no_description`) : description}\n        </div>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [css`\n        search-input {\n          display: block;\n          --mdc-shape-small: var(--card-picker-search-shape);\n          margin: var(--card-picker-search-margin);\n        }\n\n        .cards-container {\n          display: grid;\n          grid-gap: 8px 8px;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          margin-top: 20px;\n        }\n\n        .card {\n          height: 100%;\n          max-width: 500px;\n          display: flex;\n          flex-direction: column;\n          border-radius: var(--ha-card-border-radius, 12px);\n          background: var(--primary-background-color, #fafafa);\n          cursor: pointer;\n          position: relative;\n          overflow: hidden;\n          border: var(--ha-card-border-width, 1px) solid\n            var(--ha-card-border-color, var(--divider-color));\n        }\n\n        .card-header {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: 16px;\n          font-weight: bold;\n          letter-spacing: -0.012em;\n          line-height: 20px;\n          padding: 12px 16px;\n          display: block;\n          text-align: center;\n          background: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          border-bottom: 1px solid var(--divider-color);\n        }\n\n        .preview {\n          pointer-events: none;\n          margin: 20px;\n          flex-grow: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .preview > :first-child {\n          zoom: 0.6;\n          display: block;\n          width: 100%;\n        }\n\n        .description {\n          text-align: center;\n        }\n\n        .spinner {\n          align-items: center;\n          justify-content: center;\n        }\n\n        .overlay {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          box-sizing: border-box;\n          border-radius: var(--ha-card-border-radius, 12px);\n        }\n\n        .manual {\n          max-width: none;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["Fuse","LitElement","css","html","nothing","customElement","property","state","classMap","styleMap","until","memoizeOne","storage","fireEvent","isUnavailableState","CUSTOM_TYPE_PREFIX","customCards","getCustomCardEntry","calcUnusedEntities","computeUsedEntities","tryCreateCardElement","getCardStubConfig","coreCards","HuiCardPicker","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","subscribe","cardElements","filter","cards","map","cardElement","card","options","keys","isCaseSensitive","minMatchCharLength","Math","min","length","threshold","fuse","search","result","item","includes","render","hass","lovelace","_unusedEntities","_usedEntities","_filter","_handleSearchChange","localize","width","_width","height","_height","_clipboard","_renderCardElement","type","showElement","isCustom","name","description","_filterCards","_cards","element","_cardPicked","shouldUpdate","changedProps","oldHass","get","locale","firstUpdated","usedEntities","unusedEntities","eid","states","_loadCards","concat","ccard","preview","ev","detail","undefined","div","shadowRoot","getElementById","clientWidth","clientHeight","config","currentTarget","_tryCreateCardElement","cardConfig","addEventListener","stopPropagation","_rebuildCard","once","cardElToReplace","newCardEl","err","parentElement","replaceChild","customCard","tagName","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/card-editor/hui-card-picker.ts"],"sourcesContent":["import Fuse, { IFuseOptions } from \"fuse.js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { until } from \"lit/directives/until\";\nimport memoizeOne from \"memoize-one\";\nimport { storage } from \"../../../../common/decorators/storage\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/search-input\";\nimport { isUnavailableState } from \"../../../../data/entity\";\nimport type { LovelaceCardConfig } from \"../../../../data/lovelace/config/card\";\nimport type { LovelaceConfig } from \"../../../../data/lovelace/config/types\";\nimport {\n  CUSTOM_TYPE_PREFIX,\n  CustomCardEntry,\n  customCards,\n  getCustomCardEntry,\n} from \"../../../../data/lovelace_custom_cards\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport {\n  calcUnusedEntities,\n  computeUsedEntities,\n} from \"../../common/compute-unused-entities\";\nimport { tryCreateCardElement } from \"../../create-element/create-card-element\";\nimport type { LovelaceCard } from \"../../types\";\nimport { getCardStubConfig } from \"../get-card-stub-config\";\nimport { coreCards } from \"../lovelace-cards\";\nimport type { Card, CardPickTarget } from \"../types\";\n\ninterface CardElement {\n  card: Card;\n  element: TemplateResult;\n}\n\n@customElement(\"hui-card-picker\")\nexport class HuiCardPicker extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @storage({\n    key: \"lovelaceClipboard\",\n    state: true,\n    subscribe: true,\n    storage: \"sessionStorage\",\n  })\n  private _clipboard?: LovelaceCardConfig;\n\n  @state() private _cards: CardElement[] = [];\n\n  public lovelace?: LovelaceConfig;\n\n  public cardPicked?: (cardConf: LovelaceCardConfig) => void;\n\n  @state() private _filter = \"\";\n\n  @state() private _width?: number;\n\n  @state() private _height?: number;\n\n  private _unusedEntities?: string[];\n\n  private _usedEntities?: string[];\n\n  private _filterCards = memoizeOne(\n    (cardElements: CardElement[], filter?: string): CardElement[] => {\n      if (!filter) {\n        return cardElements;\n      }\n      let cards = cardElements.map(\n        (cardElement: CardElement) => cardElement.card\n      );\n      const options: IFuseOptions<Card> = {\n        keys: [\"type\", \"name\", \"description\"],\n        isCaseSensitive: false,\n        minMatchCharLength: Math.min(filter.length, 2),\n        threshold: 0.2,\n      };\n      const fuse = new Fuse(cards, options);\n      cards = fuse.search(filter).map((result) => result.item);\n      return cardElements.filter((cardElement: CardElement) =>\n        cards.includes(cardElement.card)\n      );\n    }\n  );\n\n  protected render() {\n    if (\n      !this.hass ||\n      !this.lovelace ||\n      !this._unusedEntities ||\n      !this._usedEntities\n    ) {\n      return nothing;\n    }\n\n    return html`\n      <search-input\n        .hass=${this.hass}\n        .filter=${this._filter}\n        @value-changed=${this._handleSearchChange}\n        .label=${this.hass.localize(\n          \"ui.panel.lovelace.editor.edit_card.search_cards\"\n        )}\n      ></search-input>\n      <div\n        id=\"content\"\n        style=${styleMap({\n          width: this._width ? `${this._width}px` : \"auto\",\n          height: this._height ? `${this._height}px` : \"auto\",\n        })}\n      >\n        <div class=\"cards-container\">\n          ${this._clipboard && !this._filter\n            ? html`\n                ${until(\n                  this._renderCardElement(\n                    {\n                      type: this._clipboard.type,\n                      showElement: true,\n                      isCustom: false,\n                      name: this.hass!.localize(\n                        \"ui.panel.lovelace.editor.card.generic.paste\"\n                      ),\n                      description: `${this.hass!.localize(\n                        \"ui.panel.lovelace.editor.card.generic.paste_description\",\n                        {\n                          type: this._clipboard.type,\n                        }\n                      )}`,\n                    },\n                    this._clipboard\n                  ),\n                  html`\n                    <div class=\"card spinner\">\n                      <ha-circular-progress\n                        indeterminate\n                      ></ha-circular-progress>\n                    </div>\n                  `\n                )}\n              `\n            : nothing}\n          ${this._filterCards(this._cards, this._filter).map(\n            (cardElement: CardElement) => cardElement.element\n          )}\n        </div>\n        <div class=\"cards-container\">\n          <div\n            class=\"card manual\"\n            @click=${this._cardPicked}\n            .config=${{ type: \"\" }}\n          >\n            <div class=\"card-header\">\n              ${this.hass!.localize(\n                `ui.panel.lovelace.editor.card.generic.manual`\n              )}\n            </div>\n            <div class=\"preview description\">\n              ${this.hass!.localize(\n                `ui.panel.lovelace.editor.card.generic.manual_description`\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass) {\n      return true;\n    }\n\n    if (oldHass.locale !== this.hass!.locale) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected firstUpdated(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n\n    const usedEntities = computeUsedEntities(this.lovelace);\n    const unusedEntities = calcUnusedEntities(this.hass, usedEntities);\n\n    this._usedEntities = [...usedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !isUnavailableState(this.hass!.states[eid].state)\n    );\n    this._unusedEntities = [...unusedEntities].filter(\n      (eid) =>\n        this.hass!.states[eid] &&\n        !isUnavailableState(this.hass!.states[eid].state)\n    );\n\n    this._loadCards();\n  }\n\n  private _loadCards() {\n    let cards: Card[] = coreCards.map((card: Card) => ({\n      name: this.hass!.localize(\n        `ui.panel.lovelace.editor.card.${card.type}.name`\n      ),\n      description: this.hass!.localize(\n        `ui.panel.lovelace.editor.card.${card.type}.description`\n      ),\n      ...card,\n    }));\n    if (customCards.length > 0) {\n      cards = cards.concat(\n        customCards.map((ccard: CustomCardEntry) => ({\n          type: ccard.type,\n          name: ccard.name,\n          description: ccard.description,\n          showElement: ccard.preview,\n          isCustom: true,\n        }))\n      );\n    }\n    this._cards = cards.map((card: Card) => ({\n      card: card,\n      element: html`${until(\n        this._renderCardElement(card),\n        html`\n          <div class=\"card spinner\">\n            <ha-circular-progress indeterminate></ha-circular-progress>\n          </div>\n        `\n      )}`,\n    }));\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    const value = ev.detail.value;\n\n    if (!value) {\n      // Reset when we no longer filter\n      this._width = undefined;\n      this._height = undefined;\n    } else if (!this._width || !this._height) {\n      // Save height and width so the dialog doesn't jump while searching\n      const div = this.shadowRoot!.getElementById(\"content\");\n      if (div && !this._width) {\n        const width = div.clientWidth;\n        if (width) {\n          this._width = width;\n        }\n      }\n      if (div && !this._height) {\n        const height = div.clientHeight;\n        if (height) {\n          this._height = height;\n        }\n      }\n    }\n\n    this._filter = value;\n  }\n\n  private _cardPicked(ev: Event): void {\n    const config: LovelaceCardConfig = (ev.currentTarget! as CardPickTarget)\n      .config;\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _tryCreateCardElement(cardConfig: LovelaceCardConfig) {\n    const element = tryCreateCardElement(cardConfig) as LovelaceCard;\n    element.hass = this.hass;\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev) => {\n        ev.stopPropagation();\n        this._rebuildCard(element, cardConfig);\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  private _rebuildCard(\n    cardElToReplace: LovelaceCard,\n    config: LovelaceCardConfig\n  ): void {\n    let newCardEl: LovelaceCard;\n    try {\n      newCardEl = this._tryCreateCardElement(config);\n    } catch (err: any) {\n      return;\n    }\n    if (cardElToReplace.parentElement) {\n      cardElToReplace.parentElement!.replaceChild(newCardEl, cardElToReplace);\n    }\n  }\n\n  private async _renderCardElement(\n    card: Card,\n    config?: LovelaceCardConfig\n  ): Promise<TemplateResult> {\n    let { type } = card;\n    const { showElement, isCustom, name, description } = card;\n    const customCard = isCustom ? getCustomCardEntry(type) : undefined;\n    if (isCustom) {\n      type = `${CUSTOM_TYPE_PREFIX}${type}`;\n    }\n\n    let element: LovelaceCard | undefined;\n    let cardConfig: LovelaceCardConfig = config ?? { type };\n\n    if (this.hass && this.lovelace) {\n      if (!config) {\n        cardConfig = await getCardStubConfig(\n          this.hass,\n          type,\n          this._unusedEntities!,\n          this._usedEntities!\n        );\n      }\n\n      if (showElement) {\n        try {\n          element = this._tryCreateCardElement(cardConfig);\n        } catch (err: any) {\n          element = undefined;\n        }\n      }\n    }\n\n    return html`\n      <div class=\"card\">\n        <div\n          class=\"overlay\"\n          @click=${this._cardPicked}\n          .config=${cardConfig}\n        ></div>\n        <div class=\"card-header\">\n          ${customCard\n            ? `${this.hass!.localize(\n                \"ui.panel.lovelace.editor.cardpicker.custom_card\"\n              )}: ${customCard.name || customCard.type}`\n            : name}\n        </div>\n        <div\n          class=\"preview ${classMap({\n            description: !element || element.tagName === \"HUI-ERROR-CARD\",\n          })}\"\n        >\n          ${element && element.tagName !== \"HUI-ERROR-CARD\"\n            ? element\n            : customCard\n              ? customCard.description ||\n                this.hass!.localize(\n                  `ui.panel.lovelace.editor.cardpicker.no_description`\n                )\n              : description}\n        </div>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        search-input {\n          display: block;\n          --mdc-shape-small: var(--card-picker-search-shape);\n          margin: var(--card-picker-search-margin);\n        }\n\n        .cards-container {\n          display: grid;\n          grid-gap: 8px 8px;\n          grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n          margin-top: 20px;\n        }\n\n        .card {\n          height: 100%;\n          max-width: 500px;\n          display: flex;\n          flex-direction: column;\n          border-radius: var(--ha-card-border-radius, 12px);\n          background: var(--primary-background-color, #fafafa);\n          cursor: pointer;\n          position: relative;\n          overflow: hidden;\n          border: var(--ha-card-border-width, 1px) solid\n            var(--ha-card-border-color, var(--divider-color));\n        }\n\n        .card-header {\n          color: var(--ha-card-header-color, --primary-text-color);\n          font-family: var(--ha-card-header-font-family, inherit);\n          font-size: 16px;\n          font-weight: bold;\n          letter-spacing: -0.012em;\n          line-height: 20px;\n          padding: 12px 16px;\n          display: block;\n          text-align: center;\n          background: var(\n            --ha-card-background,\n            var(--card-background-color, white)\n          );\n          border-bottom: 1px solid var(--divider-color);\n        }\n\n        .preview {\n          pointer-events: none;\n          margin: 20px;\n          flex-grow: 1;\n          display: flex;\n          align-items: center;\n          justify-content: center;\n        }\n\n        .preview > :first-child {\n          zoom: 0.6;\n          display: block;\n          width: 100%;\n        }\n\n        .description {\n          text-align: center;\n        }\n\n        .spinner {\n          align-items: center;\n          justify-content: center;\n        }\n\n        .overlay {\n          position: absolute;\n          width: 100%;\n          height: 100%;\n          z-index: 1;\n          box-sizing: border-box;\n          border-radius: var(--ha-card-border-radius, 12px);\n        }\n\n        .manual {\n          max-width: none;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-card-picker\": HuiCardPicker;\n  }\n}\n"],"mappings":"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CAACjB,IAAI,CAAEM,QAAQ,CAChB,oDACH,CAAC,GACDW,WAAY;AAC5B;AACA;AACA,KAAK;MACH;IAAC;MAAA3C,IAAA;MAAAqF,MAAA;MAAAlF,GAAA;MAAAC,KAAA,EAED,SAAAkF,OAAA,EAAoC;QAClC,OAAO,CACLnH,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GA9ZgCD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}