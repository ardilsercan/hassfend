{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '../../elevation/elevation.js';\nimport { html, nothing } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { redispatchEvent } from '../../internal/events/redispatch-event.js';\nimport { MultiActionChip } from './multi-action-chip.js';\nimport { renderRemoveButton } from './trailing-icons.js';\n/**\n * A filter chip component.\n *\n * @fires remove {Event} Dispatched when the remove button is clicked.\n */\nexport class FilterChip extends MultiActionChip {\n  constructor() {\n    super(...arguments);\n    this.elevated = false;\n    this.removable = false;\n    this.selected = false;\n    /**\n     * Only needed for SSR.\n     *\n     * Add this attribute when a filter chip has a `slot=\"selected-icon\"` to avoid\n     * a Flash Of Unstyled Content.\n     */\n    this.hasSelectedIcon = false;\n  }\n  get primaryId() {\n    return 'button';\n  }\n  getContainerClasses() {\n    return {\n      ...super.getContainerClasses(),\n      elevated: this.elevated,\n      selected: this.selected,\n      'has-trailing': this.removable,\n      'has-icon': this.hasIcon || this.selected\n    };\n  }\n  renderPrimaryAction(content) {\n    const {\n      ariaLabel\n    } = this;\n    return html`\n      <button\n        class=\"primary action\"\n        id=\"button\"\n        aria-label=${ariaLabel || nothing}\n        aria-pressed=${this.selected}\n        ?disabled=${this.disabled && !this.alwaysFocusable}\n        @click=${this.handleClick}\n        >${content}</button\n      >\n    `;\n  }\n  renderLeadingIcon() {\n    if (!this.selected) {\n      return super.renderLeadingIcon();\n    }\n    return html`\n      <slot name=\"selected-icon\">\n        <svg class=\"checkmark\" viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n          <path\n            d=\"M6.75012 12.1274L3.62262 8.99988L2.55762 10.0574L6.75012 14.2499L15.7501 5.24988L14.6926 4.19238L6.75012 12.1274Z\" />\n        </svg>\n      </slot>\n    `;\n  }\n  renderTrailingAction(focusListener) {\n    if (this.removable) {\n      return renderRemoveButton({\n        focusListener,\n        ariaLabel: this.ariaLabelRemove,\n        disabled: this.disabled\n      });\n    }\n    return nothing;\n  }\n  renderOutline() {\n    if (this.elevated) {\n      return html`<md-elevation></md-elevation>`;\n    }\n    return super.renderOutline();\n  }\n  handleClick(event) {\n    if (this.disabled) {\n      return;\n    }\n    // Store prevValue to revert in case `chip.selected` is changed during an\n    // event listener.\n    const prevValue = this.selected;\n    this.selected = !this.selected;\n    const preventDefault = !redispatchEvent(this, event);\n    if (preventDefault) {\n      // We should not do `this.selected = !this.selected`, since a client\n      // click listener could change its value. Instead, always revert to the\n      // original value.\n      this.selected = prevValue;\n      return;\n    }\n  }\n}\n__decorate([property({\n  type: Boolean\n})], FilterChip.prototype, \"elevated\", void 0);\n__decorate([property({\n  type: Boolean\n})], FilterChip.prototype, \"removable\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], FilterChip.prototype, \"selected\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true,\n  attribute: 'has-selected-icon'\n})], FilterChip.prototype, \"hasSelectedIcon\", void 0);\n__decorate([query('.primary.action')], FilterChip.prototype, \"primaryAction\", void 0);\n__decorate([query('.trailing.action')], FilterChip.prototype, \"trailingAction\", void 0);","map":{"version":3,"names":["html","nothing","property","query","redispatchEvent","MultiActionChip","renderRemoveButton","FilterChip","constructor","elevated","removable","selected","hasSelectedIcon","primaryId","getContainerClasses","hasIcon","renderPrimaryAction","content","ariaLabel","disabled","alwaysFocusable","handleClick","renderLeadingIcon","renderTrailingAction","focusListener","ariaLabelRemove","renderOutline","event","prevValue","preventDefault","__decorate","type","Boolean","reflect","attribute"],"sources":["filter-chip.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../elevation/elevation.js';\n\nimport {html, nothing} from 'lit';\nimport {property, query} from 'lit/decorators.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {redispatchEvent} from '../../internal/events/redispatch-event.js';\n\nimport {MultiActionChip} from './multi-action-chip.js';\nimport {renderRemoveButton} from './trailing-icons.js';\n\n/**\n * A filter chip component.\n *\n * @fires remove {Event} Dispatched when the remove button is clicked.\n */\nexport class FilterChip extends MultiActionChip {\n  @property({type: Boolean}) elevated = false;\n  @property({type: Boolean}) removable = false;\n  @property({type: Boolean, reflect: true}) selected = false;\n\n  /**\n   * Only needed for SSR.\n   *\n   * Add this attribute when a filter chip has a `slot=\"selected-icon\"` to avoid\n   * a Flash Of Unstyled Content.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'has-selected-icon'})\n  hasSelectedIcon = false;\n\n  protected get primaryId() {\n    return 'button';\n  }\n\n  @query('.primary.action')\n  protected readonly primaryAction!: HTMLElement | null;\n  @query('.trailing.action')\n  protected readonly trailingAction!: HTMLElement | null;\n\n  protected override getContainerClasses() {\n    return {\n      ...super.getContainerClasses(),\n      elevated: this.elevated,\n      selected: this.selected,\n      'has-trailing': this.removable,\n      'has-icon': this.hasIcon || this.selected,\n    };\n  }\n\n  protected override renderPrimaryAction(content: unknown) {\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <button\n        class=\"primary action\"\n        id=\"button\"\n        aria-label=${ariaLabel || nothing}\n        aria-pressed=${this.selected}\n        ?disabled=${this.disabled && !this.alwaysFocusable}\n        @click=${this.handleClick}\n        >${content}</button\n      >\n    `;\n  }\n\n  protected override renderLeadingIcon() {\n    if (!this.selected) {\n      return super.renderLeadingIcon();\n    }\n\n    return html`\n      <slot name=\"selected-icon\">\n        <svg class=\"checkmark\" viewBox=\"0 0 18 18\" aria-hidden=\"true\">\n          <path\n            d=\"M6.75012 12.1274L3.62262 8.99988L2.55762 10.0574L6.75012 14.2499L15.7501 5.24988L14.6926 4.19238L6.75012 12.1274Z\" />\n        </svg>\n      </slot>\n    `;\n  }\n\n  protected override renderTrailingAction(focusListener: EventListener) {\n    if (this.removable) {\n      return renderRemoveButton({\n        focusListener,\n        ariaLabel: this.ariaLabelRemove,\n        disabled: this.disabled,\n      });\n    }\n\n    return nothing;\n  }\n\n  protected override renderOutline() {\n    if (this.elevated) {\n      return html`<md-elevation></md-elevation>`;\n    }\n\n    return super.renderOutline();\n  }\n\n  private handleClick(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    // Store prevValue to revert in case `chip.selected` is changed during an\n    // event listener.\n    const prevValue = this.selected;\n    this.selected = !this.selected;\n\n    const preventDefault = !redispatchEvent(this, event);\n    if (preventDefault) {\n      // We should not do `this.selected = !this.selected`, since a client\n      // click listener could change its value. Instead, always revert to the\n      // original value.\n      this.selected = prevValue;\n      return;\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}