{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport \"../../../components/ha-svg-icon\";\nimport { createErrorBadgeConfig, createErrorBadgeElement } from \"../badges/hui-error-badge\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { createBadgeElement as _createBadgeElement } from \"../create-element/create-badge-element\";\nimport { createCardElement as _createCardElement } from \"../create-element/create-card-element\";\nimport { createErrorCardConfig, createErrorCardElement } from \"../create-element/create-element-base\";\nimport { createViewElement } from \"../create-element/create-view-element\";\nimport { showCreateCardDialog } from \"../editor/card-editor/show-create-card-dialog\";\nimport { showEditCardDialog } from \"../editor/card-editor/show-edit-card-dialog\";\nimport { confDeleteCard } from \"../editor/delete-card\";\nimport { deleteCard } from \"../editor/config-util\";\nimport { generateLovelaceViewStrategy } from \"../strategies/get-strategy\";\nimport { PANEL_VIEW_LAYOUT, DEFAULT_VIEW_LAYOUT } from \"./const\";\nimport { isStrategyView } from \"../../../data/lovelace/config/view\";\nexport let HUIView = _decorate([customElement(\"hui-view\")], function (_initialize, _ReactiveElement) {\n  class HUIView extends _ReactiveElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HUIView,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"lovelace\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"index\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_cards\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_badges\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_layoutElementType\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_layoutElement\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_viewConfigTheme\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"createCardElement\",\n      value:\n      // Public to make demo happy\n      function createCardElement(cardConfig) {\n        const element = _createCardElement(cardConfig);\n        try {\n          element.hass = this.hass;\n        } catch (e) {\n          return createErrorCardElement(createErrorCardConfig(e.message, cardConfig));\n        }\n        element.addEventListener(\"ll-rebuild\", ev => {\n          // In edit mode let it go to hui-root and rebuild whole view.\n          if (!this.lovelace.editMode) {\n            ev.stopPropagation();\n            this._rebuildCard(element, cardConfig);\n          }\n        }, {\n          once: true\n        });\n        return element;\n      }\n    }, {\n      kind: \"method\",\n      key: \"createBadgeElement\",\n      value: function createBadgeElement(badgeConfig) {\n        const element = _createBadgeElement(badgeConfig);\n        try {\n          element.hass = this.hass;\n        } catch (e) {\n          return createErrorBadgeElement(createErrorBadgeConfig(e.message));\n        }\n        element.addEventListener(\"ll-badge-rebuild\", () => {\n          this._rebuildBadge(element, badgeConfig);\n        }, {\n          once: true\n        });\n        return element;\n      }\n    }, {\n      kind: \"method\",\n      key: \"createRenderRoot\",\n      value: function createRenderRoot() {\n        return this;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        _get(_getPrototypeOf(HUIView.prototype), \"willUpdate\", this).call(this, changedProperties);\n\n        /*\n          We need to handle the following use cases:\n           - initialization: create layout element, populate\n           - config changed to view with same layout element\n           - config changed to view with different layout element\n           - forwarded properties hass/narrow/lovelace/cards/badges change\n              - cards/badges change if one is rebuild when it was loaded later\n              - lovelace changes if edit mode is enabled or config has changed\n        */\n\n        const oldLovelace = changedProperties.get(\"lovelace\");\n\n        // If config has changed, create element if necessary and set all values.\n        if (changedProperties.has(\"index\") || changedProperties.has(\"lovelace\") && (!oldLovelace || this.lovelace.config.views[this.index] !== oldLovelace.config.views[this.index])) {\n          this._initializeConfig();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"update\",\n      value: function update(changedProperties) {\n        _get(_getPrototypeOf(HUIView.prototype), \"update\", this).call(this, changedProperties);\n\n        // If no layout element, we're still creating one\n        if (this._layoutElement) {\n          // Config has not changed. Just props\n          if (changedProperties.has(\"hass\")) {\n            this._badges.forEach(badge => {\n              try {\n                badge.hass = this.hass;\n              } catch (e) {\n                this._rebuildBadge(badge, createErrorBadgeConfig(e.message));\n              }\n            });\n            this._cards.forEach(element => {\n              try {\n                element.hass = this.hass;\n              } catch (e) {\n                this._rebuildCard(element, createErrorCardConfig(e.message, null));\n              }\n            });\n            this._layoutElement.hass = this.hass;\n            const oldHass = changedProperties.get(\"hass\");\n            if (!oldHass || this.hass.themes !== oldHass.themes || this.hass.selectedTheme !== oldHass.selectedTheme) {\n              applyThemesOnElement(this, this.hass.themes, this._viewConfigTheme);\n            }\n          }\n          if (changedProperties.has(\"narrow\")) {\n            this._layoutElement.narrow = this.narrow;\n          }\n          if (changedProperties.has(\"lovelace\")) {\n            this._layoutElement.lovelace = this.lovelace;\n          }\n          if (changedProperties.has(\"_cards\")) {\n            this._layoutElement.cards = this._cards;\n          }\n          if (changedProperties.has(\"_badges\")) {\n            this._layoutElement.badges = this._badges;\n          }\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_initializeConfig\",\n      value: async function _initializeConfig() {\n        let viewConfig = this.lovelace.config.views[this.index];\n        let isStrategy = false;\n        if (isStrategyView(viewConfig)) {\n          isStrategy = true;\n          viewConfig = await generateLovelaceViewStrategy(viewConfig.strategy, this.hass);\n        }\n        viewConfig = {\n          ...viewConfig,\n          type: viewConfig.panel ? PANEL_VIEW_LAYOUT : viewConfig.type || DEFAULT_VIEW_LAYOUT\n        };\n\n        // Create a new layout element if necessary.\n        let addLayoutElement = false;\n        if (!this._layoutElement || this._layoutElementType !== viewConfig.type) {\n          addLayoutElement = true;\n          this._createLayoutElement(viewConfig);\n        }\n        this._createBadges(viewConfig);\n        this._createCards(viewConfig);\n        this._layoutElement.isStrategy = isStrategy;\n        this._layoutElement.hass = this.hass;\n        this._layoutElement.narrow = this.narrow;\n        this._layoutElement.lovelace = this.lovelace;\n        this._layoutElement.index = this.index;\n        this._layoutElement.cards = this._cards;\n        this._layoutElement.badges = this._badges;\n        applyThemesOnElement(this, this.hass.themes, viewConfig.theme);\n        this._viewConfigTheme = viewConfig.theme;\n        if (addLayoutElement) {\n          while (this.lastChild) {\n            this.removeChild(this.lastChild);\n          }\n          this.appendChild(this._layoutElement);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createLayoutElement\",\n      value: function _createLayoutElement(config) {\n        this._layoutElement = createViewElement(config);\n        this._layoutElementType = config.type;\n        this._layoutElement.addEventListener(\"ll-create-card\", () => {\n          showCreateCardDialog(this, {\n            lovelaceConfig: this.lovelace.config,\n            saveConfig: this.lovelace.saveConfig,\n            path: [this.index]\n          });\n        });\n        this._layoutElement.addEventListener(\"ll-edit-card\", ev => {\n          showEditCardDialog(this, {\n            lovelaceConfig: this.lovelace.config,\n            saveConfig: this.lovelace.saveConfig,\n            path: ev.detail.path\n          });\n        });\n        this._layoutElement.addEventListener(\"ll-delete-card\", ev => {\n          if (ev.detail.confirm) {\n            confDeleteCard(this, this.hass, this.lovelace, ev.detail.path);\n          } else {\n            const newLovelace = deleteCard(this.lovelace.config, ev.detail.path);\n            this.lovelace.saveConfig(newLovelace);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createBadges\",\n      value: function _createBadges(config) {\n        if (!config || !config.badges || !Array.isArray(config.badges)) {\n          this._badges = [];\n          return;\n        }\n        const badges = processConfigEntities(config.badges);\n        this._badges = badges.map(badge => {\n          const element = _createBadgeElement(badge);\n          try {\n            element.hass = this.hass;\n          } catch (e) {\n            return createErrorBadgeElement(createErrorBadgeConfig(e.message));\n          }\n          return element;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createCards\",\n      value: function _createCards(config) {\n        if (!config || !config.cards || !Array.isArray(config.cards)) {\n          this._cards = [];\n          return;\n        }\n        this._cards = config.cards.map(cardConfig => {\n          const element = this.createCardElement(cardConfig);\n          try {\n            element.hass = this.hass;\n          } catch (e) {\n            return createErrorCardElement(createErrorCardConfig(e.message, cardConfig));\n          }\n          return element;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildCard\",\n      value: function _rebuildCard(cardElToReplace, config) {\n        let newCardEl = this.createCardElement(config);\n        try {\n          newCardEl.hass = this.hass;\n        } catch (e) {\n          newCardEl = createErrorCardElement(createErrorCardConfig(e.message, config));\n        }\n        if (cardElToReplace.parentElement) {\n          cardElToReplace.parentElement.replaceChild(newCardEl, cardElToReplace);\n        }\n        this._cards = this._cards.map(curCardEl => curCardEl === cardElToReplace ? newCardEl : curCardEl);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rebuildBadge\",\n      value: function _rebuildBadge(badgeElToReplace, config) {\n        let newBadgeEl = this.createBadgeElement(config);\n        try {\n          newBadgeEl.hass = this.hass;\n        } catch (e) {\n          newBadgeEl = createErrorBadgeElement(createErrorBadgeConfig(e.message));\n        }\n        if (badgeElToReplace.parentElement) {\n          badgeElToReplace.parentElement.replaceChild(newBadgeEl, badgeElToReplace);\n        }\n        this._badges = this._badges.map(curBadgeEl => curBadgeEl === badgeElToReplace ? newBadgeEl : curBadgeEl);\n      }\n    }]\n  };\n}, ReactiveElement);","map":{"version":3,"names":["ReactiveElement","customElement","property","state","applyThemesOnElement","createErrorBadgeConfig","createErrorBadgeElement","processConfigEntities","createBadgeElement","createCardElement","createErrorCardConfig","createErrorCardElement","createViewElement","showCreateCardDialog","showEditCardDialog","confDeleteCard","deleteCard","generateLovelaceViewStrategy","PANEL_VIEW_LAYOUT","DEFAULT_VIEW_LAYOUT","isStrategyView","HUIView","_decorate","_initialize","_ReactiveElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","Number","cardConfig","element","hass","e","message","addEventListener","ev","lovelace","editMode","stopPropagation","_rebuildCard","once","badgeConfig","_rebuildBadge","createRenderRoot","willUpdate","changedProperties","_get","_getPrototypeOf","prototype","call","oldLovelace","get","has","config","views","index","_initializeConfig","update","_layoutElement","_badges","forEach","badge","_cards","oldHass","themes","selectedTheme","_viewConfigTheme","narrow","cards","badges","viewConfig","isStrategy","strategy","panel","addLayoutElement","_layoutElementType","_createLayoutElement","_createBadges","_createCards","theme","lastChild","removeChild","appendChild","lovelaceConfig","saveConfig","path","detail","confirm","newLovelace","Array","isArray","map","cardElToReplace","newCardEl","parentElement","replaceChild","curCardEl","badgeElToReplace","newBadgeEl","curBadgeEl"],"sources":["/workspaces/frontend/src/panels/lovelace/views/hui-view.ts"],"sourcesContent":["import { PropertyValues, ReactiveElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { applyThemesOnElement } from \"../../../common/dom/apply_themes_on_element\";\nimport \"../../../components/entity/ha-state-label-badge\";\nimport \"../../../components/ha-svg-icon\";\nimport type { LovelaceViewElement } from \"../../../data/lovelace\";\nimport type { HomeAssistant } from \"../../../types\";\nimport {\n  createErrorBadgeConfig,\n  createErrorBadgeElement,\n} from \"../badges/hui-error-badge\";\nimport type { HuiErrorCard } from \"../cards/hui-error-card\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { createBadgeElement } from \"../create-element/create-badge-element\";\nimport { createCardElement } from \"../create-element/create-card-element\";\nimport {\n  createErrorCardConfig,\n  createErrorCardElement,\n} from \"../create-element/create-element-base\";\nimport { createViewElement } from \"../create-element/create-view-element\";\nimport { showCreateCardDialog } from \"../editor/card-editor/show-create-card-dialog\";\nimport { showEditCardDialog } from \"../editor/card-editor/show-edit-card-dialog\";\nimport { confDeleteCard } from \"../editor/delete-card\";\nimport { deleteCard } from \"../editor/config-util\";\nimport { generateLovelaceViewStrategy } from \"../strategies/get-strategy\";\nimport type { Lovelace, LovelaceBadge, LovelaceCard } from \"../types\";\nimport { PANEL_VIEW_LAYOUT, DEFAULT_VIEW_LAYOUT } from \"./const\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport { LovelaceBadgeConfig } from \"../../../data/lovelace/config/badge\";\nimport {\n  LovelaceViewConfig,\n  isStrategyView,\n} from \"../../../data/lovelace/config/view\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"ll-create-card\": undefined;\n    \"ll-edit-card\": { path: [number] | [number, number] };\n    \"ll-delete-card\": { path: [number] | [number, number]; confirm: boolean };\n  }\n}\n\n@customElement(\"hui-view\")\nexport class HUIView extends ReactiveElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public lovelace!: Lovelace;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Number }) public index!: number;\n\n  @state() private _cards: Array<LovelaceCard | HuiErrorCard> = [];\n\n  @state() private _badges: LovelaceBadge[] = [];\n\n  private _layoutElementType?: string;\n\n  private _layoutElement?: LovelaceViewElement;\n\n  private _viewConfigTheme?: string;\n\n  // Public to make demo happy\n  public createCardElement(cardConfig: LovelaceCardConfig) {\n    const element = createCardElement(cardConfig) as LovelaceCard;\n    try {\n      element.hass = this.hass;\n    } catch (e: any) {\n      return createErrorCardElement(\n        createErrorCardConfig(e.message, cardConfig)\n      );\n    }\n    element.addEventListener(\n      \"ll-rebuild\",\n      (ev: Event) => {\n        // In edit mode let it go to hui-root and rebuild whole view.\n        if (!this.lovelace!.editMode) {\n          ev.stopPropagation();\n          this._rebuildCard(element, cardConfig);\n        }\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  public createBadgeElement(badgeConfig: LovelaceBadgeConfig) {\n    const element = createBadgeElement(badgeConfig) as LovelaceBadge;\n    try {\n      element.hass = this.hass;\n    } catch (e: any) {\n      return createErrorBadgeElement(createErrorBadgeConfig(e.message));\n    }\n    element.addEventListener(\n      \"ll-badge-rebuild\",\n      () => {\n        this._rebuildBadge(element, badgeConfig);\n      },\n      { once: true }\n    );\n    return element;\n  }\n\n  protected createRenderRoot() {\n    return this;\n  }\n\n  public willUpdate(changedProperties: PropertyValues): void {\n    super.willUpdate(changedProperties);\n\n    /*\n      We need to handle the following use cases:\n       - initialization: create layout element, populate\n       - config changed to view with same layout element\n       - config changed to view with different layout element\n       - forwarded properties hass/narrow/lovelace/cards/badges change\n          - cards/badges change if one is rebuild when it was loaded later\n          - lovelace changes if edit mode is enabled or config has changed\n    */\n\n    const oldLovelace = changedProperties.get(\"lovelace\") as this[\"lovelace\"];\n\n    // If config has changed, create element if necessary and set all values.\n    if (\n      changedProperties.has(\"index\") ||\n      (changedProperties.has(\"lovelace\") &&\n        (!oldLovelace ||\n          this.lovelace.config.views[this.index] !==\n            oldLovelace.config.views[this.index]))\n    ) {\n      this._initializeConfig();\n    }\n  }\n\n  protected update(changedProperties) {\n    super.update(changedProperties);\n\n    // If no layout element, we're still creating one\n    if (this._layoutElement) {\n      // Config has not changed. Just props\n      if (changedProperties.has(\"hass\")) {\n        this._badges.forEach((badge) => {\n          try {\n            badge.hass = this.hass;\n          } catch (e: any) {\n            this._rebuildBadge(badge, createErrorBadgeConfig(e.message));\n          }\n        });\n\n        this._cards.forEach((element) => {\n          try {\n            element.hass = this.hass;\n          } catch (e: any) {\n            this._rebuildCard(element, createErrorCardConfig(e.message, null));\n          }\n        });\n\n        this._layoutElement.hass = this.hass;\n\n        const oldHass = changedProperties.get(\"hass\") as\n          | this[\"hass\"]\n          | undefined;\n\n        if (\n          !oldHass ||\n          this.hass.themes !== oldHass.themes ||\n          this.hass.selectedTheme !== oldHass.selectedTheme\n        ) {\n          applyThemesOnElement(this, this.hass.themes, this._viewConfigTheme);\n        }\n      }\n      if (changedProperties.has(\"narrow\")) {\n        this._layoutElement.narrow = this.narrow;\n      }\n      if (changedProperties.has(\"lovelace\")) {\n        this._layoutElement.lovelace = this.lovelace;\n      }\n      if (changedProperties.has(\"_cards\")) {\n        this._layoutElement.cards = this._cards;\n      }\n      if (changedProperties.has(\"_badges\")) {\n        this._layoutElement.badges = this._badges;\n      }\n    }\n  }\n\n  private async _initializeConfig() {\n    let viewConfig = this.lovelace.config.views[this.index];\n    let isStrategy = false;\n\n    if (isStrategyView(viewConfig)) {\n      isStrategy = true;\n      viewConfig = await generateLovelaceViewStrategy(\n        viewConfig.strategy,\n        this.hass!\n      );\n    }\n\n    viewConfig = {\n      ...viewConfig,\n      type: viewConfig.panel\n        ? PANEL_VIEW_LAYOUT\n        : viewConfig.type || DEFAULT_VIEW_LAYOUT,\n    };\n\n    // Create a new layout element if necessary.\n    let addLayoutElement = false;\n\n    if (!this._layoutElement || this._layoutElementType !== viewConfig.type) {\n      addLayoutElement = true;\n      this._createLayoutElement(viewConfig);\n    }\n\n    this._createBadges(viewConfig);\n    this._createCards(viewConfig);\n    this._layoutElement!.isStrategy = isStrategy;\n    this._layoutElement!.hass = this.hass;\n    this._layoutElement!.narrow = this.narrow;\n    this._layoutElement!.lovelace = this.lovelace;\n    this._layoutElement!.index = this.index;\n    this._layoutElement!.cards = this._cards;\n    this._layoutElement!.badges = this._badges;\n\n    applyThemesOnElement(this, this.hass.themes, viewConfig.theme);\n    this._viewConfigTheme = viewConfig.theme;\n\n    if (addLayoutElement) {\n      while (this.lastChild) {\n        this.removeChild(this.lastChild);\n      }\n      this.appendChild(this._layoutElement!);\n    }\n  }\n\n  private _createLayoutElement(config: LovelaceViewConfig): void {\n    this._layoutElement = createViewElement(config) as LovelaceViewElement;\n    this._layoutElementType = config.type;\n    this._layoutElement.addEventListener(\"ll-create-card\", () => {\n      showCreateCardDialog(this, {\n        lovelaceConfig: this.lovelace.config,\n        saveConfig: this.lovelace.saveConfig,\n        path: [this.index],\n      });\n    });\n    this._layoutElement.addEventListener(\"ll-edit-card\", (ev) => {\n      showEditCardDialog(this, {\n        lovelaceConfig: this.lovelace.config,\n        saveConfig: this.lovelace.saveConfig,\n        path: ev.detail.path,\n      });\n    });\n    this._layoutElement.addEventListener(\"ll-delete-card\", (ev) => {\n      if (ev.detail.confirm) {\n        confDeleteCard(this, this.hass!, this.lovelace!, ev.detail.path);\n      } else {\n        const newLovelace = deleteCard(this.lovelace!.config, ev.detail.path);\n        this.lovelace.saveConfig(newLovelace);\n      }\n    });\n  }\n\n  private _createBadges(config: LovelaceViewConfig): void {\n    if (!config || !config.badges || !Array.isArray(config.badges)) {\n      this._badges = [];\n      return;\n    }\n\n    const badges = processConfigEntities(config.badges as any);\n    this._badges = badges.map((badge) => {\n      const element = createBadgeElement(badge);\n      try {\n        element.hass = this.hass;\n      } catch (e: any) {\n        return createErrorBadgeElement(createErrorBadgeConfig(e.message));\n      }\n      return element;\n    });\n  }\n\n  private _createCards(config: LovelaceViewConfig): void {\n    if (!config || !config.cards || !Array.isArray(config.cards)) {\n      this._cards = [];\n      return;\n    }\n\n    this._cards = config.cards.map((cardConfig) => {\n      const element = this.createCardElement(cardConfig);\n      try {\n        element.hass = this.hass;\n      } catch (e: any) {\n        return createErrorCardElement(\n          createErrorCardConfig(e.message, cardConfig)\n        );\n      }\n      return element;\n    });\n  }\n\n  private _rebuildCard(\n    cardElToReplace: LovelaceCard,\n    config: LovelaceCardConfig\n  ): void {\n    let newCardEl = this.createCardElement(config);\n    try {\n      newCardEl.hass = this.hass;\n    } catch (e: any) {\n      newCardEl = createErrorCardElement(\n        createErrorCardConfig(e.message, config)\n      );\n    }\n    if (cardElToReplace.parentElement) {\n      cardElToReplace.parentElement!.replaceChild(newCardEl, cardElToReplace);\n    }\n    this._cards = this._cards!.map((curCardEl) =>\n      curCardEl === cardElToReplace ? newCardEl : curCardEl\n    );\n  }\n\n  private _rebuildBadge(\n    badgeElToReplace: LovelaceBadge,\n    config: LovelaceBadgeConfig\n  ): void {\n    let newBadgeEl = this.createBadgeElement(config);\n    try {\n      newBadgeEl.hass = this.hass;\n    } catch (e: any) {\n      newBadgeEl = createErrorBadgeElement(createErrorBadgeConfig(e.message));\n    }\n    if (badgeElToReplace.parentElement) {\n      badgeElToReplace.parentElement!.replaceChild(\n        newBadgeEl,\n        badgeElToReplace\n      );\n    }\n    this._badges = this._badges!.map((curBadgeEl) =>\n      curBadgeEl === badgeElToReplace ? newBadgeEl : curBadgeEl\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-view\": HUIView;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}