{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { IronSelectableBehavior } from './iron-selectable.js';\n\n/**\n * @polymerBehavior IronMultiSelectableBehavior\n */\nexport var IronMultiSelectableBehaviorImpl = {\n  properties: {\n    /**\n     * If true, multiple selections are allowed.\n     */\n    multi: {\n      type: Boolean,\n      value: false,\n      observer: 'multiChanged'\n    },\n    /**\n     * Gets or sets the selected elements. This is used instead of `selected`\n     * when `multi` is true.\n     */\n    selectedValues: {\n      type: Array,\n      notify: true,\n      value: function value() {\n        return [];\n      }\n    },\n    /**\n     * Returns an array of currently selected items.\n     */\n    selectedItems: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function value() {\n        return [];\n      }\n    }\n  },\n  observers: ['_updateSelected(selectedValues.splices)'],\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function select(value) {\n    if (this.multi) {\n      this._toggleSelected(value);\n    } else {\n      this.selected = value;\n    }\n  },\n  multiChanged: function multiChanged(multi) {\n    this._selection.multi = multi;\n    this._updateSelected();\n  },\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null || this.selectedValues != null && this.selectedValues.length;\n  },\n  _updateAttrForSelected: function _updateAttrForSelected() {\n    if (!this.multi) {\n      IronSelectableBehavior._updateAttrForSelected.apply(this);\n    } else if (this.selectedItems && this.selectedItems.length > 0) {\n      this.selectedValues = this.selectedItems.map(function (selectedItem) {\n        return this._indexToValue(this.indexOf(selectedItem));\n      }, this).filter(function (unfilteredValue) {\n        return unfilteredValue != null;\n      }, this);\n    }\n  },\n  _updateSelected: function _updateSelected() {\n    if (this.multi) {\n      this._selectMulti(this.selectedValues);\n    } else {\n      this._selectSelected(this.selected);\n    }\n  },\n  _selectMulti: function _selectMulti(values) {\n    values = values || [];\n    var selectedItems = (this._valuesToItems(values) || []).filter(function (item) {\n      return item !== null && item !== undefined;\n    });\n\n    // clear all but the current selected items\n    this._selection.clear(selectedItems);\n\n    // select only those not selected yet\n    for (var i = 0; i < selectedItems.length; i++) {\n      this._selection.setItemSelected(selectedItems[i], true);\n    }\n\n    // Check for items, since this array is populated only when attached\n    if (this.fallbackSelection && !this._selection.get().length) {\n      var fallback = this._valueToItem(this.fallbackSelection);\n      if (fallback) {\n        this.select(this.fallbackSelection);\n      }\n    }\n  },\n  _selectionChange: function _selectionChange() {\n    var s = this._selection.get();\n    if (this.multi) {\n      this._setSelectedItems(s);\n      this._setSelectedItem(s.length ? s[0] : null);\n    } else {\n      if (s !== null && s !== undefined) {\n        this._setSelectedItems([s]);\n        this._setSelectedItem(s);\n      } else {\n        this._setSelectedItems([]);\n        this._setSelectedItem(null);\n      }\n    }\n  },\n  _toggleSelected: function _toggleSelected(value) {\n    var i = this.selectedValues.indexOf(value);\n    var unselected = i < 0;\n    if (unselected) {\n      this.push('selectedValues', value);\n    } else {\n      this.splice('selectedValues', i, 1);\n    }\n  },\n  _valuesToItems: function _valuesToItems(values) {\n    return values == null ? null : values.map(function (value) {\n      return this._valueToItem(value);\n    }, this);\n  }\n};\n\n/** @polymerBehavior */\nexport var IronMultiSelectableBehavior = [IronSelectableBehavior, IronMultiSelectableBehaviorImpl];","map":{"version":3,"names":["IronSelectableBehavior","IronMultiSelectableBehaviorImpl","properties","multi","type","Boolean","value","observer","selectedValues","Array","notify","selectedItems","readOnly","observers","select","_toggleSelected","selected","multiChanged","_selection","_updateSelected","_shouldUpdateSelection","length","_updateAttrForSelected","apply","map","selectedItem","_indexToValue","indexOf","filter","unfilteredValue","_selectMulti","_selectSelected","values","_valuesToItems","item","undefined","clear","i","setItemSelected","fallbackSelection","get","fallback","_valueToItem","_selectionChange","s","_setSelectedItems","_setSelectedItem","unselected","push","splice","IronMultiSelectableBehavior"],"sources":["/workspaces/frontend/node_modules/@polymer/iron-selector/iron-multi-selectable.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronSelectableBehavior} from './iron-selectable.js';\n\n/**\n * @polymerBehavior IronMultiSelectableBehavior\n */\nexport const IronMultiSelectableBehaviorImpl = {\n  properties: {\n\n    /**\n     * If true, multiple selections are allowed.\n     */\n    multi: {type: Boolean, value: false, observer: 'multiChanged'},\n\n    /**\n     * Gets or sets the selected elements. This is used instead of `selected`\n     * when `multi` is true.\n     */\n    selectedValues: {\n      type: Array,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n    /**\n     * Returns an array of currently selected items.\n     */\n    selectedItems: {\n      type: Array,\n      readOnly: true,\n      notify: true,\n      value: function() {\n        return [];\n      }\n    },\n\n  },\n\n  observers: ['_updateSelected(selectedValues.splices)'],\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @method select\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    if (this.multi) {\n      this._toggleSelected(value);\n    } else {\n      this.selected = value;\n    }\n  },\n\n  multiChanged: function(multi) {\n    this._selection.multi = multi;\n    this._updateSelected();\n  },\n\n  // UNUSED, FOR API COMPATIBILITY\n  get _shouldUpdateSelection() {\n    return this.selected != null ||\n        (this.selectedValues != null && this.selectedValues.length);\n  },\n\n  _updateAttrForSelected: function() {\n    if (!this.multi) {\n      IronSelectableBehavior._updateAttrForSelected.apply(this);\n    } else if (this.selectedItems && this.selectedItems.length > 0) {\n      this.selectedValues =\n          this.selectedItems\n              .map(\n                  function(selectedItem) {\n                    return this._indexToValue(this.indexOf(selectedItem));\n                  },\n                  this)\n              .filter(function(unfilteredValue) {\n                return unfilteredValue != null;\n              }, this);\n    }\n  },\n\n  _updateSelected: function() {\n    if (this.multi) {\n      this._selectMulti(this.selectedValues);\n    } else {\n      this._selectSelected(this.selected);\n    }\n  },\n\n  _selectMulti: function(values) {\n    values = values || [];\n\n    var selectedItems =\n        (this._valuesToItems(values) || []).filter(function(item) {\n          return item !== null && item !== undefined;\n        });\n\n    // clear all but the current selected items\n    this._selection.clear(selectedItems);\n\n    // select only those not selected yet\n    for (var i = 0; i < selectedItems.length; i++) {\n      this._selection.setItemSelected(selectedItems[i], true);\n    }\n\n    // Check for items, since this array is populated only when attached\n    if (this.fallbackSelection && !this._selection.get().length) {\n      var fallback = this._valueToItem(this.fallbackSelection);\n      if (fallback) {\n        this.select(this.fallbackSelection);\n      }\n    }\n  },\n\n  _selectionChange: function() {\n    var s = this._selection.get();\n    if (this.multi) {\n      this._setSelectedItems(s);\n      this._setSelectedItem(s.length ? s[0] : null);\n    } else {\n      if (s !== null && s !== undefined) {\n        this._setSelectedItems([s]);\n        this._setSelectedItem(s);\n      } else {\n        this._setSelectedItems([]);\n        this._setSelectedItem(null);\n      }\n    }\n  },\n\n  _toggleSelected: function(value) {\n    var i = this.selectedValues.indexOf(value);\n    var unselected = i < 0;\n    if (unselected) {\n      this.push('selectedValues', value);\n    } else {\n      this.splice('selectedValues', i, 1);\n    }\n  },\n\n  _valuesToItems: function(values) {\n    return (values == null) ? null : values.map(function(value) {\n      return this._valueToItem(value);\n    }, this);\n  }\n};\n\n/** @polymerBehavior */\nexport const IronMultiSelectableBehavior =\n    [IronSelectableBehavior, IronMultiSelectableBehaviorImpl];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}