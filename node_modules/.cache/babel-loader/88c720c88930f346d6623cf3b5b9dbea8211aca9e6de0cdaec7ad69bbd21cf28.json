{"ast":null,"code":"import { navigate } from \"../common/navigate\";\nexport const AUTOMATION_DEFAULT_MODE = \"single\";\nexport const AUTOMATION_DEFAULT_MAX = 10;\nexport const expandConditionWithShorthand = cond => {\n  if (\"condition\" in cond && Array.isArray(cond.condition)) {\n    return {\n      condition: \"and\",\n      conditions: cond.condition\n    };\n  }\n  for (const condition of [\"and\", \"or\", \"not\"]) {\n    if (condition in cond) {\n      return {\n        condition,\n        conditions: cond[condition]\n      };\n    }\n  }\n  return cond;\n};\nexport const triggerAutomationActions = (hass, entityId) => {\n  hass.callService(\"automation\", \"trigger\", {\n    entity_id: entityId,\n    skip_condition: true\n  });\n};\nexport const deleteAutomation = (hass, id) => hass.callApi(\"DELETE\", `config/automation/config/${id}`);\nlet initialAutomationEditorData;\nexport const fetchAutomationFileConfig = (hass, id) => hass.callApi(\"GET\", `config/automation/config/${id}`);\nexport const getAutomationStateConfig = (hass, entity_id) => hass.callWS({\n  type: \"automation/config\",\n  entity_id\n});\nexport const saveAutomationConfig = (hass, id, config) => hass.callApi(\"POST\", `config/automation/config/${id}`, config);\nexport const showAutomationEditor = data => {\n  initialAutomationEditorData = data;\n  navigate(\"/config/automation/edit/new\");\n};\nexport const duplicateAutomation = config => {\n  showAutomationEditor({\n    ...config,\n    id: undefined,\n    alias: undefined\n  });\n};\nexport const getAutomationEditorInitData = () => {\n  const data = initialAutomationEditorData;\n  initialAutomationEditorData = undefined;\n  return data;\n};\nexport const subscribeTrigger = (hass, onChange, trigger, variables) => hass.connection.subscribeMessage(onChange, {\n  type: \"subscribe_trigger\",\n  trigger,\n  variables\n});\nexport const testCondition = (hass, condition, variables) => hass.callWS({\n  type: \"test_condition\",\n  condition,\n  variables\n});","map":{"version":3,"names":["navigate","AUTOMATION_DEFAULT_MODE","AUTOMATION_DEFAULT_MAX","expandConditionWithShorthand","cond","Array","isArray","condition","conditions","triggerAutomationActions","hass","entityId","callService","entity_id","skip_condition","deleteAutomation","id","callApi","initialAutomationEditorData","fetchAutomationFileConfig","getAutomationStateConfig","callWS","type","saveAutomationConfig","config","showAutomationEditor","data","duplicateAutomation","undefined","alias","getAutomationEditorInitData","subscribeTrigger","onChange","trigger","variables","connection","subscribeMessage","testCondition"],"sources":["/workspaces/frontend/src/data/automation.ts"],"sourcesContent":["import {\n  HassEntityAttributeBase,\n  HassEntityBase,\n} from \"home-assistant-js-websocket\";\nimport { navigate } from \"../common/navigate\";\nimport { Context, HomeAssistant } from \"../types\";\nimport { BlueprintInput } from \"./blueprint\";\nimport { DeviceCondition, DeviceTrigger } from \"./device_automation\";\nimport { Action, MODES } from \"./script\";\n\nexport const AUTOMATION_DEFAULT_MODE: (typeof MODES)[number] = \"single\";\nexport const AUTOMATION_DEFAULT_MAX = 10;\n\nexport interface AutomationEntity extends HassEntityBase {\n  attributes: HassEntityAttributeBase & {\n    id?: string;\n    last_triggered: string;\n  };\n}\n\nexport type AutomationConfig =\n  | ManualAutomationConfig\n  | BlueprintAutomationConfig;\n\nexport interface ManualAutomationConfig {\n  id?: string;\n  alias?: string;\n  description?: string;\n  trigger: Trigger | Trigger[];\n  condition?: Condition | Condition[];\n  action: Action | Action[];\n  mode?: (typeof MODES)[number];\n  max?: number;\n  max_exceeded?:\n    | \"silent\"\n    | \"critical\"\n    | \"fatal\"\n    | \"error\"\n    | \"warning\"\n    | \"warn\"\n    | \"info\"\n    | \"debug\"\n    | \"notset\";\n  variables?: Record<string, unknown>;\n}\n\nexport interface BlueprintAutomationConfig extends ManualAutomationConfig {\n  use_blueprint: { path: string; input?: BlueprintInput };\n}\n\nexport interface ForDict {\n  days?: number;\n  hours?: number;\n  minutes?: number;\n  seconds?: number;\n  milliseconds?: number;\n}\n\nexport interface ContextConstraint {\n  context_id?: string;\n  parent_id?: string;\n  user_id?: string | string[];\n}\n\nexport interface BaseTrigger {\n  alias?: string;\n  platform: string;\n  id?: string;\n  variables?: Record<string, unknown>;\n  enabled?: boolean;\n}\n\nexport interface StateTrigger extends BaseTrigger {\n  platform: \"state\";\n  entity_id: string | string[];\n  attribute?: string;\n  from?: string | string[];\n  to?: string | string[];\n  for?: string | number | ForDict;\n}\n\nexport interface MqttTrigger extends BaseTrigger {\n  platform: \"mqtt\";\n  topic: string;\n  payload?: string;\n}\n\nexport interface GeoLocationTrigger extends BaseTrigger {\n  platform: \"geo_location\";\n  source: string;\n  zone: string;\n  event: \"enter\" | \"leave\";\n}\n\nexport interface HassTrigger extends BaseTrigger {\n  platform: \"homeassistant\";\n  event: \"start\" | \"shutdown\";\n}\n\nexport interface NumericStateTrigger extends BaseTrigger {\n  platform: \"numeric_state\";\n  entity_id: string | string[];\n  attribute?: string;\n  above?: number;\n  below?: number;\n  value_template?: string;\n  for?: string | number | ForDict;\n}\n\nexport interface ConversationTrigger extends BaseTrigger {\n  platform: \"conversation\";\n  command: string | string[];\n}\n\nexport interface SunTrigger extends BaseTrigger {\n  platform: \"sun\";\n  offset: number;\n  event: \"sunrise\" | \"sunset\";\n}\n\nexport interface TimePatternTrigger extends BaseTrigger {\n  platform: \"time_pattern\";\n  hours?: number | string;\n  minutes?: number | string;\n  seconds?: number | string;\n}\n\nexport interface WebhookTrigger extends BaseTrigger {\n  platform: \"webhook\";\n  webhook_id: string;\n  allowed_methods?: string[];\n  local_only?: boolean;\n}\n\nexport interface PersistentNotificationTrigger extends BaseTrigger {\n  platform: \"persistent_notification\";\n  notification_id?: string;\n  update_type?: string[];\n}\n\nexport interface ZoneTrigger extends BaseTrigger {\n  platform: \"zone\";\n  entity_id: string;\n  zone: string;\n  event: \"enter\" | \"leave\";\n}\n\nexport interface TagTrigger extends BaseTrigger {\n  platform: \"tag\";\n  tag_id: string;\n  device_id?: string;\n}\n\nexport interface TimeTrigger extends BaseTrigger {\n  platform: \"time\";\n  at: string;\n}\n\nexport interface TemplateTrigger extends BaseTrigger {\n  platform: \"template\";\n  value_template: string;\n  for?: string | number | ForDict;\n}\n\nexport interface EventTrigger extends BaseTrigger {\n  platform: \"event\";\n  event_type: string;\n  event_data?: any;\n  context?: ContextConstraint;\n}\n\nexport interface CalendarTrigger extends BaseTrigger {\n  platform: \"calendar\";\n  event: \"start\" | \"end\";\n  entity_id: string;\n  offset: string;\n}\n\nexport type Trigger =\n  | StateTrigger\n  | MqttTrigger\n  | GeoLocationTrigger\n  | HassTrigger\n  | NumericStateTrigger\n  | SunTrigger\n  | ConversationTrigger\n  | TimePatternTrigger\n  | WebhookTrigger\n  | PersistentNotificationTrigger\n  | ZoneTrigger\n  | TagTrigger\n  | TimeTrigger\n  | TemplateTrigger\n  | EventTrigger\n  | DeviceTrigger\n  | CalendarTrigger;\n\ninterface BaseCondition {\n  condition: string;\n  alias?: string;\n  enabled?: boolean;\n}\n\nexport interface LogicalCondition extends BaseCondition {\n  condition: \"and\" | \"not\" | \"or\";\n  conditions: Condition | Condition[];\n}\n\nexport interface StateCondition extends BaseCondition {\n  condition: \"state\";\n  entity_id: string;\n  attribute?: string;\n  state: string | number | string[];\n  for?: string | number | ForDict;\n  match?: \"all\" | \"any\";\n}\n\nexport interface NumericStateCondition extends BaseCondition {\n  condition: \"numeric_state\";\n  entity_id: string;\n  attribute?: string;\n  above?: number;\n  below?: number;\n  value_template?: string;\n}\n\nexport interface SunCondition extends BaseCondition {\n  condition: \"sun\";\n  after_offset?: number;\n  before_offset?: number;\n  after?: \"sunrise\" | \"sunset\";\n  before?: \"sunrise\" | \"sunset\";\n}\n\nexport interface ZoneCondition extends BaseCondition {\n  condition: \"zone\";\n  entity_id: string;\n  zone: string;\n}\n\ntype Weekday = \"sun\" | \"mon\" | \"tue\" | \"wed\" | \"thu\" | \"fri\" | \"sat\";\n\nexport interface TimeCondition extends BaseCondition {\n  condition: \"time\";\n  after?: string;\n  before?: string;\n  weekday?: Weekday | Weekday[];\n}\n\nexport interface TemplateCondition extends BaseCondition {\n  condition: \"template\";\n  value_template: string;\n}\n\nexport interface TriggerCondition extends BaseCondition {\n  condition: \"trigger\";\n  id: string;\n}\n\ntype ShorthandBaseCondition = Omit<BaseCondition, \"condition\">;\n\nexport interface ShorthandAndConditionList extends ShorthandBaseCondition {\n  condition: Condition[];\n}\n\nexport interface ShorthandAndCondition extends ShorthandBaseCondition {\n  and: Condition[];\n}\n\nexport interface ShorthandOrCondition extends ShorthandBaseCondition {\n  or: Condition[];\n}\n\nexport interface ShorthandNotCondition extends ShorthandBaseCondition {\n  not: Condition[];\n}\n\nexport interface AutomationElementGroup {\n  [key: string]: { icon?: string; members?: AutomationElementGroup };\n}\n\nexport type Condition =\n  | StateCondition\n  | NumericStateCondition\n  | SunCondition\n  | ZoneCondition\n  | TimeCondition\n  | TemplateCondition\n  | DeviceCondition\n  | LogicalCondition\n  | TriggerCondition;\n\nexport type ConditionWithShorthand =\n  | Condition\n  | ShorthandAndConditionList\n  | ShorthandAndCondition\n  | ShorthandOrCondition\n  | ShorthandNotCondition;\n\nexport const expandConditionWithShorthand = (\n  cond: ConditionWithShorthand\n): Condition => {\n  if (\"condition\" in cond && Array.isArray(cond.condition)) {\n    return {\n      condition: \"and\",\n      conditions: cond.condition,\n    };\n  }\n\n  for (const condition of [\"and\", \"or\", \"not\"]) {\n    if (condition in cond) {\n      return {\n        condition,\n        conditions: cond[condition],\n      } as Condition;\n    }\n  }\n\n  return cond as Condition;\n};\n\nexport const triggerAutomationActions = (\n  hass: HomeAssistant,\n  entityId: string\n) => {\n  hass.callService(\"automation\", \"trigger\", {\n    entity_id: entityId,\n    skip_condition: true,\n  });\n};\n\nexport const deleteAutomation = (hass: HomeAssistant, id: string) =>\n  hass.callApi(\"DELETE\", `config/automation/config/${id}`);\n\nlet initialAutomationEditorData: Partial<AutomationConfig> | undefined;\n\nexport const fetchAutomationFileConfig = (hass: HomeAssistant, id: string) =>\n  hass.callApi<AutomationConfig>(\"GET\", `config/automation/config/${id}`);\n\nexport const getAutomationStateConfig = (\n  hass: HomeAssistant,\n  entity_id: string\n) =>\n  hass.callWS<{ config: AutomationConfig }>({\n    type: \"automation/config\",\n    entity_id,\n  });\n\nexport const saveAutomationConfig = (\n  hass: HomeAssistant,\n  id: string,\n  config: AutomationConfig\n) => hass.callApi<void>(\"POST\", `config/automation/config/${id}`, config);\n\nexport const showAutomationEditor = (data?: Partial<AutomationConfig>) => {\n  initialAutomationEditorData = data;\n  navigate(\"/config/automation/edit/new\");\n};\n\nexport const duplicateAutomation = (config: AutomationConfig) => {\n  showAutomationEditor({\n    ...config,\n    id: undefined,\n    alias: undefined,\n  });\n};\n\nexport const getAutomationEditorInitData = () => {\n  const data = initialAutomationEditorData;\n  initialAutomationEditorData = undefined;\n  return data;\n};\n\nexport const subscribeTrigger = (\n  hass: HomeAssistant,\n  onChange: (result: {\n    variables: {\n      trigger: Record<string, unknown>;\n    };\n    context: Context;\n  }) => void,\n  trigger: Trigger | Trigger[],\n  variables?: Record<string, unknown>\n) =>\n  hass.connection.subscribeMessage(onChange, {\n    type: \"subscribe_trigger\",\n    trigger,\n    variables,\n  });\n\nexport const testCondition = (\n  hass: HomeAssistant,\n  condition: Condition | Condition[],\n  variables?: Record<string, unknown>\n) =>\n  hass.callWS<{ result: boolean }>({\n    type: \"test_condition\",\n    condition,\n    variables,\n  });\n\nexport type AutomationClipboard = {\n  trigger?: Trigger;\n  condition?: Condition;\n  action?: Action;\n};\n"],"mappings":"AAIA,SAASA,QAAQ,QAAQ,oBAAoB;AAM7C,OAAO,MAAMC,uBAA+C,GAAG,QAAQ;AACvE,OAAO,MAAMC,sBAAsB,GAAG,EAAE;AAgSxC,OAAO,MAAMC,4BAA4B,GACvCC,IAA4B,IACd;EACd,IAAI,WAAW,IAAIA,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAACG,SAAS,CAAC,EAAE;IACxD,OAAO;MACLA,SAAS,EAAE,KAAK;MAChBC,UAAU,EAAEJ,IAAI,CAACG;IACnB,CAAC;EACH;EAEA,KAAK,MAAMA,SAAS,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,KAAK,CAAC,EAAE;IAC5C,IAAIA,SAAS,IAAIH,IAAI,EAAE;MACrB,OAAO;QACLG,SAAS;QACTC,UAAU,EAAEJ,IAAI,CAACG,SAAS;MAC5B,CAAC;IACH;EACF;EAEA,OAAOH,IAAI;AACb,CAAC;AAED,OAAO,MAAMK,wBAAwB,GAAGA,CACtCC,IAAmB,EACnBC,QAAgB,KACb;EACHD,IAAI,CAACE,WAAW,CAAC,YAAY,EAAE,SAAS,EAAE;IACxCC,SAAS,EAAEF,QAAQ;IACnBG,cAAc,EAAE;EAClB,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAACL,IAAmB,EAAEM,EAAU,KAC9DN,IAAI,CAACO,OAAO,CAAC,QAAQ,EAAG,4BAA2BD,EAAG,EAAC,CAAC;AAE1D,IAAIE,2BAAkE;AAEtE,OAAO,MAAMC,yBAAyB,GAAGA,CAACT,IAAmB,EAAEM,EAAU,KACvEN,IAAI,CAACO,OAAO,CAAmB,KAAK,EAAG,4BAA2BD,EAAG,EAAC,CAAC;AAEzE,OAAO,MAAMI,wBAAwB,GAAGA,CACtCV,IAAmB,EACnBG,SAAiB,KAEjBH,IAAI,CAACW,MAAM,CAA+B;EACxCC,IAAI,EAAE,mBAAmB;EACzBT;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMU,oBAAoB,GAAGA,CAClCb,IAAmB,EACnBM,EAAU,EACVQ,MAAwB,KACrBd,IAAI,CAACO,OAAO,CAAO,MAAM,EAAG,4BAA2BD,EAAG,EAAC,EAAEQ,MAAM,CAAC;AAEzE,OAAO,MAAMC,oBAAoB,GAAIC,IAAgC,IAAK;EACxER,2BAA2B,GAAGQ,IAAI;EAClC1B,QAAQ,CAAC,6BAA6B,CAAC;AACzC,CAAC;AAED,OAAO,MAAM2B,mBAAmB,GAAIH,MAAwB,IAAK;EAC/DC,oBAAoB,CAAC;IACnB,GAAGD,MAAM;IACTR,EAAE,EAAEY,SAAS;IACbC,KAAK,EAAED;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAME,2BAA2B,GAAGA,CAAA,KAAM;EAC/C,MAAMJ,IAAI,GAAGR,2BAA2B;EACxCA,2BAA2B,GAAGU,SAAS;EACvC,OAAOF,IAAI;AACb,CAAC;AAED,OAAO,MAAMK,gBAAgB,GAAGA,CAC9BrB,IAAmB,EACnBsB,QAKU,EACVC,OAA4B,EAC5BC,SAAmC,KAEnCxB,IAAI,CAACyB,UAAU,CAACC,gBAAgB,CAACJ,QAAQ,EAAE;EACzCV,IAAI,EAAE,mBAAmB;EACzBW,OAAO;EACPC;AACF,CAAC,CAAC;AAEJ,OAAO,MAAMG,aAAa,GAAGA,CAC3B3B,IAAmB,EACnBH,SAAkC,EAClC2B,SAAmC,KAEnCxB,IAAI,CAACW,MAAM,CAAsB;EAC/BC,IAAI,EAAE,gBAAgB;EACtBf,SAAS;EACT2B;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}