{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, LitElement, svg } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { getValueInPercentage, normalize, roundWithOneDecimal } from \"../util/calculate\";\nexport let HaBar = _decorate([customElement(\"ha-bar\")], function (_initialize, _LitElement) {\n  class HaBar extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaBar,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"min\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"max\",\n      value() {\n        return 100;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const valuePrecentage = roundWithOneDecimal(getValueInPercentage(normalize(this.value, this.min, this.max), this.min, this.max));\n        return svg`\n      <svg>\n        <g>\n          <rect/>\n          <rect width=\"${valuePrecentage}%\"/>\n        </g>\n      </svg>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      rect {\n        height: 100%;\n      }\n      rect:first-child {\n        width: 100%;\n        fill: var(--ha-bar-background-color, var(--secondary-background-color));\n      }\n      rect:last-child {\n        fill: var(--ha-bar-primary-color, var(--primary-color));\n      }\n      svg {\n        border-radius: var(--ha-bar-border-radius, 4px);\n        height: 12px;\n        width: 100%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","LitElement","svg","customElement","property","getValueInPercentage","normalize","roundWithOneDecimal","HaBar","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Number","key","value","render","valuePrecentage","min","max","static","styles"],"sources":["/workspaces/frontend/src/components/ha-bar.ts"],"sourcesContent":["import { css, CSSResultGroup, LitElement, svg, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport {\n  getValueInPercentage,\n  normalize,\n  roundWithOneDecimal,\n} from \"../util/calculate\";\n\n@customElement(\"ha-bar\")\nexport class HaBar extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value!: number;\n\n  protected render(): TemplateResult {\n    const valuePrecentage = roundWithOneDecimal(\n      getValueInPercentage(\n        normalize(this.value, this.min, this.max),\n        this.min,\n        this.max\n      )\n    );\n\n    return svg`\n      <svg>\n        <g>\n          <rect/>\n          <rect width=\"${valuePrecentage}%\"/>\n        </g>\n      </svg>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      rect {\n        height: 100%;\n      }\n      rect:first-child {\n        width: 100%;\n        fill: var(--ha-bar-background-color, var(--secondary-background-color));\n      }\n      rect:last-child {\n        fill: var(--ha-bar-primary-color, var(--primary-color));\n      }\n      svg {\n        border-radius: var(--ha-bar-border-radius, 4px);\n        height: 12px;\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-bar\": HaBar;\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAkBC,UAAU,EAAEC,GAAG,QAAwB,KAAK;AAC1E,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SACEC,oBAAoB,EACpBC,SAAS,EACTC,mBAAmB,QACd,mBAAmB;AAE1B,WACaC,KAAK,GAAAC,SAAA,EADjBN,aAAa,CAAC,QAAQ,CAAC,aAAAO,WAAA,EAAAC,WAAA;EAAxB,MACaH,KAAK,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA6CtC;EAAC;IAAAI,CAAA,EA7CYN,KAAK;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACfb,QAAQ,CAAC;QAAEc,IAAI,EAAEC;MAAO,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAc,CAAC;MAAA;IAAA;MAAAL,IAAA;MAAAC,UAAA,GAEzCb,QAAQ,CAAC;QAAEc,IAAI,EAAEC;MAAO,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAc,GAAG;MAAA;IAAA;MAAAL,IAAA;MAAAC,UAAA,GAE3Cb,QAAQ,CAAC;QAAEc,IAAI,EAAEC;MAAO,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAL,IAAA;MAAAI,GAAA;MAAAC,KAAA,EAE3B,SAAAC,OAAA,EAAmC;QACjC,MAAMC,eAAe,GAAGhB,mBAAmB,CACzCF,oBAAoB,CAClBC,SAAS,CAAC,IAAI,CAACe,KAAK,EAAE,IAAI,CAACG,GAAG,EAAE,IAAI,CAACC,GAAG,CAAC,EACzC,IAAI,CAACD,GAAG,EACR,IAAI,CAACC,GACP,CACF,CAAC;QAED,OAAOvB,GAAI;AACf;AACA;AACA;AACA,yBAAyBqB,eAAgB;AACzC;AACA;AACA,KAAK;MACH;IAAC;MAAAP,IAAA;MAAAU,MAAA;MAAAN,GAAA;MAAAC,KAAA,EAED,SAAAM,OAAA,EAAoC;QAClC,OAAO3B,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GA5CwBC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}