{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nvar ADDITIONAL_PREFERENCES = [\"usage\", \"statistics\"];\nexport var HaAnalytics = _decorate([customElement(\"ha-analytics\")], function (_initialize, _LitElement) {\n  var HaAnalytics = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaAnalytics, _LitElement2);\n    function HaAnalytics() {\n      var _this;\n      _classCallCheck(this, HaAnalytics);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaAnalytics, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaAnalytics);\n  }(_LitElement);\n  return {\n    F: HaAnalytics,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"localize\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"analytics\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"translation_key_panel\"\n      })],\n      key: \"translationKeyPanel\",\n      value: function value() {\n        return \"config\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this2 = this,\n          _this$analytics;\n        var loading = this.analytics === undefined;\n        var baseEnabled = !loading && this.analytics.preferences.base;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-settings-row>\\n        <span slot=\\\"heading\\\" data-for=\\\"base\\\">\\n          \", \"\\n        </span>\\n        <span slot=\\\"description\\\" data-for=\\\"base\\\">\\n          \", \"\\n        </span>\\n        <ha-switch\\n          @change=\", \"\\n          .checked=\", \"\\n          .preference=\", \"\\n          .disabled=\", \"\\n          name=\\\"base\\\"\\n        >\\n        </ha-switch>\\n      </ha-settings-row>\\n      \", \"\\n      <ha-settings-row>\\n        <span slot=\\\"heading\\\" data-for=\\\"diagnostics\\\">\\n          \", \"\\n        </span>\\n        <span slot=\\\"description\\\" data-for=\\\"diagnostics\\\">\\n          \", \"\\n        </span>\\n        <ha-switch\\n          @change=\", \"\\n          .checked=\", \"\\n          .preference=\", \"\\n          .disabled=\", \"\\n          name=\\\"diagnostics\\\"\\n        >\\n        </ha-switch>\\n      </ha-settings-row>\\n    \"])), this.localize(\"ui.panel.\".concat(this.translationKeyPanel, \".analytics.preferences.base.title\")), this.localize(\"ui.panel.\".concat(this.translationKeyPanel, \".analytics.preferences.base.description\")), this._handleRowClick, baseEnabled, \"base\", loading, ADDITIONAL_PREFERENCES.map(function (preference) {\n          var _this2$analytics;\n          return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n          <ha-settings-row>\\n            <span slot=\\\"heading\\\" data-for=\", \">\\n              \", \"\\n            </span>\\n            <span slot=\\\"description\\\" data-for=\", \">\\n              \", \"\\n            </span>\\n            <span>\\n              <ha-switch\\n                @change=\", \"\\n                .checked=\", \"\\n                .preference=\", \"\\n                name=\", \"\\n              >\\n              </ha-switch>\\n              \", \"\\n            </span>\\n          </ha-settings-row>\\n        \"])), preference, _this2.localize(\"ui.panel.\".concat(_this2.translationKeyPanel, \".analytics.preferences.\").concat(preference, \".title\")), preference, _this2.localize(\"ui.panel.\".concat(_this2.translationKeyPanel, \".analytics.preferences.\").concat(preference, \".description\")), _this2._handleRowClick, (_this2$analytics = _this2.analytics) === null || _this2$analytics === void 0 ? void 0 : _this2$analytics.preferences[preference], preference, preference, !baseEnabled ? html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                    <simple-tooltip animation-delay=\\\"0\\\" position=\\\"right\\\">\\n                      \", \"\\n                    </simple-tooltip>\\n                  \"])), _this2.localize(\"ui.panel.\".concat(_this2.translationKeyPanel, \".analytics.need_base_enabled\"))) : \"\");\n        }), this.localize(\"ui.panel.\".concat(this.translationKeyPanel, \".analytics.preferences.diagnostics.title\")), this.localize(\"ui.panel.\".concat(this.translationKeyPanel, \".analytics.preferences.diagnostics.description\")), this._handleRowClick, (_this$analytics = this.analytics) === null || _this$analytics === void 0 ? void 0 : _this$analytics.preferences.diagnostics, \"diagnostics\", loading);\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        var _this3 = this;\n        _get(_getPrototypeOf(HaAnalytics.prototype), \"updated\", this).call(this, changedProps);\n        this.shadowRoot.querySelectorAll(\"*[data-for]\").forEach(function (el) {\n          var forEl = el.dataset.for;\n          delete el.dataset.for;\n          el.addEventListener(\"click\", function () {\n            var toFocus = _this3.shadowRoot.querySelector(\"*[name=\".concat(forEl, \"]\"));\n            if (toFocus) {\n              toFocus.focus();\n              toFocus.click();\n            }\n          });\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleRowClick\",\n      value: function _handleRowClick(ev) {\n        var target = ev.currentTarget;\n        var preference = target.preference;\n        var preferences = this.analytics ? Object.assign({}, this.analytics.preferences) : {};\n        if (preferences[preference] === target.checked) {\n          return;\n        }\n        preferences[preference] = target.checked;\n        if (ADDITIONAL_PREFERENCES.some(function (entry) {\n          return entry === preference;\n        }) && target.checked) {\n          preferences.base = true;\n        } else if (preference === \"base\" && !target.checked) {\n          preferences.usage = false;\n          preferences.statistics = false;\n        }\n        fireEvent(this, \"analytics-preferences-changed\", {\n          preferences: preferences\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n        .error {\\n          color: var(--error-color);\\n        }\\n\\n        ha-settings-row {\\n          padding: 0;\\n        }\\n\\n        span[slot=\\\"heading\\\"],\\n        span[slot=\\\"description\\\"] {\\n          cursor: pointer;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","fireEvent","haStyle","ADDITIONAL_PREFERENCES","HaAnalytics","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","render","_this2","_this$analytics","loading","analytics","undefined","baseEnabled","preferences","base","_templateObject","_taggedTemplateLiteral","localize","translationKeyPanel","_handleRowClick","map","preference","_this2$analytics","_templateObject2","_templateObject3","diagnostics","updated","changedProps","_this3","_get","_getPrototypeOf","prototype","call","shadowRoot","querySelectorAll","forEach","el","forEl","dataset","for","addEventListener","toFocus","querySelector","focus","click","ev","target","currentTarget","Object","assign","checked","some","entry","usage","statistics","static","styles","_templateObject4"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-analytics.ts"],"sourcesContent":["import \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport type { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nimport type { HaSwitch } from \"./ha-switch\";\n\nconst ADDITIONAL_PREFERENCES = [\"usage\", \"statistics\"] as const;\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public localize!: LocalizeFunc;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  @property({ attribute: \"translation_key_panel\" }) public translationKeyPanel:\n    | \"page-onboarding\"\n    | \"config\" = \"config\";\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.base.title`\n          )}\n        </span>\n        <span slot=\"description\" data-for=\"base\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.base.description`\n          )}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) => html`\n          <ha-settings-row>\n            <span slot=\"heading\" data-for=${preference}>\n              ${this.localize(\n                `ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.title`\n              )}\n            </span>\n            <span slot=\"description\" data-for=${preference}>\n              ${this.localize(\n                `ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.description`\n              )}\n            </span>\n            <span>\n              <ha-switch\n                @change=${this._handleRowClick}\n                .checked=${this.analytics?.preferences[preference]}\n                .preference=${preference}\n                name=${preference}\n              >\n              </ha-switch>\n              ${!baseEnabled\n                ? html`\n                    <simple-tooltip animation-delay=\"0\" position=\"right\">\n                      ${this.localize(\n                        `ui.panel.${this.translationKeyPanel}.analytics.need_base_enabled`\n                      )}\n                    </simple-tooltip>\n                  `\n                : \"\"}\n            </span>\n          </ha-settings-row>\n        `\n      )}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.title`\n          )}\n        </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.description`\n          )}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${this.analytics?.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.currentTarget as HaSwitch;\n    const preference = (target as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === target.checked) {\n      return;\n    }\n\n    preferences[preference] = target.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry === preference) &&\n      target.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !target.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}