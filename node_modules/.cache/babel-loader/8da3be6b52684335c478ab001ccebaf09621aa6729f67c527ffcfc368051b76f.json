{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { getGraphColorByIndex } from \"../../common/color/colors\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport { formatNumber, numberFormatToLocale, getNumberFormatOptions } from \"../../common/number/format_number\";\nimport { getDisplayUnit, getStatisticLabel, getStatisticMetadata, statisticsHaveType } from \"../../data/recorder\";\nimport \"./ha-chart-base\";\nexport var supportedStatTypeMap = {\n  mean: \"mean\",\n  min: \"min\",\n  max: \"max\",\n  sum: \"sum\",\n  state: \"sum\",\n  change: \"sum\"\n};\nexport var StatisticsChart = _decorate([customElement(\"statistics-chart\")], function (_initialize, _LitElement) {\n  var StatisticsChart = /*#__PURE__*/function (_LitElement2) {\n    _inherits(StatisticsChart, _LitElement2);\n    function StatisticsChart() {\n      var _this;\n      _classCallCheck(this, StatisticsChart);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, StatisticsChart, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(StatisticsChart);\n  }(_LitElement);\n  return {\n    F: StatisticsChart,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"statisticsData\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"metadata\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"names\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"unit\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"endTime\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"statTypes\",\n      value: function value() {\n        return [\"sum\", \"min\", \"mean\", \"max\"];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"chartType\",\n      value: function value() {\n        return \"line\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"hideLegend\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"logarithmicScale\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isLoadingData\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"period\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_chartData\",\n      value: function value() {\n        return {\n          datasets: []\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_statisticIds\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_chartOptions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-chart-base\")],\n      key: \"_chart\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_computedStyle\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"resize\",\n      value: function value() {\n        var _this2 = this;\n        return function (options) {\n          var _this2$_chart;\n          (_this2$_chart = _this2._chart) === null || _this2$_chart === void 0 || _this2$_chart.resize(options);\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        return changedProps.size > 1 || !changedProps.has(\"hass\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        if (!this.hasUpdated || changedProps.has(\"unit\") || changedProps.has(\"period\") || changedProps.has(\"chartType\") || changedProps.has(\"logarithmicScale\") || changedProps.has(\"hideLegend\")) {\n          this._createOptions();\n        }\n        if (changedProps.has(\"statisticsData\") || changedProps.has(\"statTypes\") || changedProps.has(\"chartType\") || changedProps.has(\"hideLegend\")) {\n          this._generateData();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        this._computedStyle = getComputedStyle(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!isComponentLoaded(this.hass, \"history\")) {\n          return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"<div class=\\\"info\\\">\\n        \", \"\\n      </div>\"])), this.hass.localize(\"ui.components.history_charts.history_disabled\"));\n        }\n        if (this.isLoadingData && !this.statisticsData) {\n          return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<div class=\\\"info\\\">\\n        \", \"\\n      </div>\"])), this.hass.localize(\"ui.components.statistics_charts.loading_statistics\"));\n        }\n        if (!this.statisticsData || !Object.keys(this.statisticsData).length) {\n          return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"<div class=\\\"info\\\">\\n        \", \"\\n      </div>\"])), this.hass.localize(\"ui.components.statistics_charts.no_statistics_found\"));\n        }\n        return html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n      <ha-chart-base\\n        .hass=\", \"\\n        .data=\", \"\\n        .options=\", \"\\n        .chartType=\", \"\\n      ></ha-chart-base>\\n    \"])), this.hass, this._chartData, this._chartOptions, this.chartType);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createOptions\",\n      value: function _createOptions(unit) {\n        var _this3 = this;\n        this._chartOptions = {\n          parsing: false,\n          animation: false,\n          interaction: {\n            mode: \"nearest\",\n            axis: \"x\"\n          },\n          scales: {\n            x: {\n              type: \"time\",\n              adapters: {\n                date: {\n                  locale: this.hass.locale,\n                  config: this.hass.config\n                }\n              },\n              ticks: {\n                source: this.chartType === \"bar\" ? \"data\" : undefined,\n                maxRotation: 0,\n                sampleSize: 5,\n                autoSkipPadding: 20,\n                major: {\n                  enabled: true\n                },\n                font: function font(context) {\n                  return context.tick && context.tick.major ? {\n                    weight: \"bold\"\n                  } : {};\n                }\n              },\n              time: {\n                tooltipFormat: \"datetime\",\n                unit: this.chartType === \"bar\" && this.period && [\"hour\", \"day\", \"week\", \"month\"].includes(this.period) ? this.period : undefined\n              }\n            },\n            y: {\n              beginAtZero: this.chartType === \"bar\",\n              ticks: {\n                maxTicksLimit: 7\n              },\n              title: {\n                display: unit || this.unit,\n                text: unit || this.unit\n              },\n              type: this.logarithmicScale ? \"logarithmic\" : \"linear\"\n            }\n          },\n          plugins: {\n            tooltip: {\n              callbacks: {\n                label: function label(context) {\n                  return \"\".concat(context.dataset.label, \": \").concat(formatNumber(context.parsed.y, _this3.hass.locale, getNumberFormatOptions(undefined, _this3.hass.entities[_this3._statisticIds[context.datasetIndex]])), \" \").concat(\n                  // @ts-ignore\n                  context.dataset.unit || \"\");\n                }\n              }\n            },\n            filler: {\n              propagate: true\n            },\n            legend: {\n              display: !this.hideLegend,\n              labels: {\n                usePointStyle: true\n              }\n            }\n          },\n          elements: {\n            line: {\n              tension: 0.4,\n              cubicInterpolationMode: \"monotone\",\n              borderWidth: 1.5\n            },\n            bar: {\n              borderWidth: 1.5,\n              borderRadius: 4\n            },\n            point: {\n              hitRadius: 50\n            }\n          },\n          // @ts-expect-error\n          locale: numberFormatToLocale(this.hass.locale)\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getStatisticsMetaData\",\n      value: function value() {\n        var _this4 = this;\n        return memoizeOne( /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(statisticIds) {\n            var statsMetadataArray, statisticsMetaData;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return getStatisticMetadata(_this4.hass, statisticIds);\n                case 2:\n                  statsMetadataArray = _context.sent;\n                  statisticsMetaData = {};\n                  statsMetadataArray.forEach(function (x) {\n                    statisticsMetaData[x.statistic_id] = x;\n                  });\n                  return _context.abrupt(\"return\", statisticsMetaData);\n                case 6:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee);\n          }));\n          return function (_x) {\n            return _ref.apply(this, arguments);\n          };\n        }());\n      }\n    }, {\n      kind: \"method\",\n      key: \"_generateData\",\n      value: function () {\n        var _generateData2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this5 = this;\n          var statisticsMetaData, colorIndex, statisticsData, totalDataSets, statisticIds, endTime, unit, names;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.statisticsData) {\n                  _context2.next = 2;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 2:\n                _context2.t0 = this.metadata;\n                if (_context2.t0) {\n                  _context2.next = 7;\n                  break;\n                }\n                _context2.next = 6;\n                return this._getStatisticsMetaData(Object.keys(this.statisticsData));\n              case 6:\n                _context2.t0 = _context2.sent;\n              case 7:\n                statisticsMetaData = _context2.t0;\n                colorIndex = 0;\n                statisticsData = Object.entries(this.statisticsData);\n                totalDataSets = [];\n                statisticIds = [];\n                if (!(statisticsData.length === 0)) {\n                  _context2.next = 14;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 14:\n                endTime = this.endTime ||\n                // Get the highest date from the last date of each statistic\n                new Date(Math.max.apply(Math, _toConsumableArray(statisticsData.map(function (_ref2) {\n                  var _ref3 = _slicedToArray(_ref2, 2),\n                    _ = _ref3[0],\n                    stats = _ref3[1];\n                  return new Date(stats[stats.length - 1].start).getTime();\n                }))));\n                if (endTime > new Date()) {\n                  endTime = new Date();\n                }\n                names = this.names || {};\n                statisticsData.forEach(function (_ref4) {\n                  var _ref5 = _slicedToArray(_ref4, 2),\n                    statistic_id = _ref5[0],\n                    stats = _ref5[1];\n                  var meta = statisticsMetaData === null || statisticsMetaData === void 0 ? void 0 : statisticsMetaData[statistic_id];\n                  var name = names[statistic_id];\n                  if (name === undefined) {\n                    name = getStatisticLabel(_this5.hass, statistic_id, meta);\n                  }\n                  if (!_this5.unit) {\n                    if (unit === undefined) {\n                      unit = getDisplayUnit(_this5.hass, statistic_id, meta);\n                    } else if (unit !== null && unit !== getDisplayUnit(_this5.hass, statistic_id, meta)) {\n                      // Clear unit if not all statistics have same unit\n                      unit = null;\n                    }\n                  }\n\n                  // array containing [value1, value2, etc]\n                  var prevValues = null;\n                  var prevEndTime;\n\n                  // The datasets for the current statistic\n                  var statDataSets = [];\n                  var pushData = function pushData(start, end, dataValues) {\n                    if (!dataValues) return;\n                    if (start > end) {\n                      // Drop data points that are after the requested endTime. This could happen if\n                      // endTime is \"now\" and client time is not in sync with server time.\n                      return;\n                    }\n                    statDataSets.forEach(function (d, i) {\n                      if (_this5.chartType === \"line\" && prevEndTime && prevValues && prevEndTime.getTime() !== start.getTime()) {\n                        // if the end of the previous data doesn't match the start of the current data,\n                        // we have to draw a gap so add a value at the end time, and then an empty value.\n                        d.data.push({\n                          x: prevEndTime.getTime(),\n                          y: prevValues[i]\n                        });\n                        // @ts-expect-error\n                        d.data.push({\n                          x: prevEndTime.getTime(),\n                          y: null\n                        });\n                      }\n                      d.data.push({\n                        x: start.getTime(),\n                        y: dataValues[i]\n                      });\n                    });\n                    prevValues = dataValues;\n                    prevEndTime = end;\n                  };\n                  var color = getGraphColorByIndex(colorIndex, _this5._computedStyle || getComputedStyle(_this5));\n                  colorIndex++;\n                  var statTypes = [];\n                  var hasMean = _this5.statTypes.includes(\"mean\") && statisticsHaveType(stats, \"mean\");\n                  var drawBands = hasMean || _this5.statTypes.includes(\"min\") && statisticsHaveType(stats, \"min\") && _this5.statTypes.includes(\"max\") && statisticsHaveType(stats, \"max\");\n                  var sortedTypes = drawBands ? _toConsumableArray(_this5.statTypes).sort(function (a, b) {\n                    if (a === \"min\" || b === \"max\") {\n                      return -1;\n                    }\n                    if (a === \"max\" || b === \"min\") {\n                      return +1;\n                    }\n                    return 0;\n                  }) : _this5.statTypes;\n                  sortedTypes.forEach(function (type) {\n                    if (statisticsHaveType(stats, type)) {\n                      var band = drawBands && (type === \"min\" || type === \"max\");\n                      statTypes.push(type);\n                      statDataSets.push({\n                        label: name ? \"\".concat(name, \" (\").concat(_this5.hass.localize(\"ui.components.statistics_charts.statistic_types.\".concat(type)), \")\\n            \") : _this5.hass.localize(\"ui.components.statistics_charts.statistic_types.\".concat(type)),\n                        fill: drawBands ? type === \"min\" && hasMean ? \"+1\" : type === \"max\" ? \"-1\" : false : false,\n                        borderColor: band && hasMean ? color + (_this5.hideLegend ? \"00\" : \"7F\") : color,\n                        backgroundColor: band ? color + \"3F\" : color + \"7F\",\n                        pointRadius: 0,\n                        data: [],\n                        // @ts-ignore\n                        unit: meta === null || meta === void 0 ? void 0 : meta.unit_of_measurement,\n                        band: band\n                      });\n                      statisticIds.push(statistic_id);\n                    }\n                  });\n                  var prevDate = null;\n                  // Process chart data.\n                  var firstSum = null;\n                  stats.forEach(function (stat) {\n                    var startDate = new Date(stat.start);\n                    if (prevDate === startDate) {\n                      return;\n                    }\n                    prevDate = startDate;\n                    var dataValues = [];\n                    statTypes.forEach(function (type) {\n                      var _val;\n                      var val;\n                      if (type === \"sum\") {\n                        if (firstSum === null || firstSum === undefined) {\n                          val = 0;\n                          firstSum = stat.sum;\n                        } else {\n                          val = (stat.sum || 0) - firstSum;\n                        }\n                      } else {\n                        val = stat[type];\n                      }\n                      dataValues.push((_val = val) !== null && _val !== void 0 ? _val : null);\n                    });\n                    pushData(startDate, new Date(stat.end), dataValues);\n                  });\n\n                  // Concat two arrays\n                  Array.prototype.push.apply(totalDataSets, statDataSets);\n                });\n                if (unit) {\n                  this._createOptions(unit);\n                }\n                this._chartData = {\n                  datasets: totalDataSets\n                };\n                this._statisticIds = statisticIds;\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _generateData() {\n          return _generateData2.apply(this, arguments);\n        }\n        return _generateData;\n      }()\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n      :host {\\n        display: block;\\n        min-height: 60px;\\n      }\\n      .info {\\n        text-align: center;\\n        line-height: 60px;\\n        color: var(--secondary-text-color);\\n      }\\n    \"])));\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","state","query","memoizeOne","getGraphColorByIndex","isComponentLoaded","formatNumber","numberFormatToLocale","getNumberFormatOptions","getDisplayUnit","getStatisticLabel","getStatisticMetadata","statisticsHaveType","supportedStatTypeMap","mean","min","max","sum","change","StatisticsChart","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","type","Boolean","datasets","_this2","options","_this2$_chart","_chart","resize","shouldUpdate","changedProps","size","has","willUpdate","hasUpdated","_createOptions","_generateData","firstUpdated","_computedStyle","getComputedStyle","render","hass","_templateObject","_taggedTemplateLiteral","localize","isLoadingData","statisticsData","_templateObject2","Object","keys","_templateObject3","_templateObject4","_chartData","_chartOptions","chartType","unit","_this3","parsing","animation","interaction","mode","axis","scales","x","adapters","date","locale","config","ticks","source","undefined","maxRotation","sampleSize","autoSkipPadding","major","enabled","font","context","tick","weight","time","tooltipFormat","period","includes","y","beginAtZero","maxTicksLimit","title","display","text","logarithmicScale","plugins","tooltip","callbacks","label","dataset","parsed","entities","_statisticIds","datasetIndex","filler","propagate","legend","hideLegend","labels","usePointStyle","elements","line","tension","cubicInterpolationMode","borderWidth","bar","borderRadius","point","hitRadius","_this4","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","statisticIds","statsMetadataArray","statisticsMetaData","wrap","_callee$","_context","prev","next","sent","forEach","statistic_id","abrupt","stop","_x","apply","_generateData2","_callee2","_this5","colorIndex","totalDataSets","endTime","names","_callee2$","_context2","t0","metadata","_getStatisticsMetaData","entries","Date","Math","_toConsumableArray","map","_ref2","_ref3","_slicedToArray","_","stats","start","getTime","_ref4","_ref5","meta","name","prevValues","prevEndTime","statDataSets","pushData","end","dataValues","i","data","push","color","statTypes","hasMean","drawBands","sortedTypes","sort","a","b","band","fill","borderColor","backgroundColor","pointRadius","unit_of_measurement","prevDate","firstSum","stat","startDate","_val","val","prototype","static","styles","_templateObject5"],"sources":["/workspaces/frontend/src/components/chart/statistics-chart.ts"],"sourcesContent":["import type {\n  ChartData,\n  ChartDataset,\n  ChartOptions,\n  ChartType,\n} from \"chart.js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state, query } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { getGraphColorByIndex } from \"../../common/color/colors\";\nimport { isComponentLoaded } from \"../../common/config/is_component_loaded\";\nimport {\n  formatNumber,\n  numberFormatToLocale,\n  getNumberFormatOptions,\n} from \"../../common/number/format_number\";\nimport {\n  getDisplayUnit,\n  getStatisticLabel,\n  getStatisticMetadata,\n  Statistics,\n  statisticsHaveType,\n  StatisticsMetaData,\n  StatisticType,\n} from \"../../data/recorder\";\nimport type { HomeAssistant } from \"../../types\";\nimport \"./ha-chart-base\";\nimport type { ChartResizeOptions, HaChartBase } from \"./ha-chart-base\";\n\nexport const supportedStatTypeMap: Record<StatisticType, StatisticType> = {\n  mean: \"mean\",\n  min: \"min\",\n  max: \"max\",\n  sum: \"sum\",\n  state: \"sum\",\n  change: \"sum\",\n};\n\n@customElement(\"statistics-chart\")\nexport class StatisticsChart extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public statisticsData?: Statistics;\n\n  @property({ attribute: false }) public metadata?: Record<\n    string,\n    StatisticsMetaData\n  >;\n\n  @property({ attribute: false }) public names?: Record<string, string>;\n\n  @property() public unit?: string;\n\n  @property({ attribute: false }) public endTime?: Date;\n\n  @property({ type: Array }) public statTypes: Array<StatisticType> = [\n    \"sum\",\n    \"min\",\n    \"mean\",\n    \"max\",\n  ];\n\n  @property() public chartType: ChartType = \"line\";\n\n  @property({ type: Boolean }) public hideLegend = false;\n\n  @property({ type: Boolean }) public logarithmicScale = false;\n\n  @property({ type: Boolean }) public isLoadingData = false;\n\n  @property() public period?: string;\n\n  @state() private _chartData: ChartData = { datasets: [] };\n\n  @state() private _statisticIds: string[] = [];\n\n  @state() private _chartOptions?: ChartOptions;\n\n  @query(\"ha-chart-base\") private _chart?: HaChartBase;\n\n  private _computedStyle?: CSSStyleDeclaration;\n\n  public resize = (options?: ChartResizeOptions): void => {\n    this._chart?.resize(options);\n  };\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return changedProps.size > 1 || !changedProps.has(\"hass\");\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (\n      !this.hasUpdated ||\n      changedProps.has(\"unit\") ||\n      changedProps.has(\"period\") ||\n      changedProps.has(\"chartType\") ||\n      changedProps.has(\"logarithmicScale\") ||\n      changedProps.has(\"hideLegend\")\n    ) {\n      this._createOptions();\n    }\n    if (\n      changedProps.has(\"statisticsData\") ||\n      changedProps.has(\"statTypes\") ||\n      changedProps.has(\"chartType\") ||\n      changedProps.has(\"hideLegend\")\n    ) {\n      this._generateData();\n    }\n  }\n\n  public firstUpdated() {\n    this._computedStyle = getComputedStyle(this);\n  }\n\n  protected render(): TemplateResult {\n    if (!isComponentLoaded(this.hass, \"history\")) {\n      return html`<div class=\"info\">\n        ${this.hass.localize(\"ui.components.history_charts.history_disabled\")}\n      </div>`;\n    }\n\n    if (this.isLoadingData && !this.statisticsData) {\n      return html`<div class=\"info\">\n        ${this.hass.localize(\n          \"ui.components.statistics_charts.loading_statistics\"\n        )}\n      </div>`;\n    }\n\n    if (!this.statisticsData || !Object.keys(this.statisticsData).length) {\n      return html`<div class=\"info\">\n        ${this.hass.localize(\n          \"ui.components.statistics_charts.no_statistics_found\"\n        )}\n      </div>`;\n    }\n\n    return html`\n      <ha-chart-base\n        .hass=${this.hass}\n        .data=${this._chartData}\n        .options=${this._chartOptions}\n        .chartType=${this.chartType}\n      ></ha-chart-base>\n    `;\n  }\n\n  private _createOptions(unit?: string) {\n    this._chartOptions = {\n      parsing: false,\n      animation: false,\n      interaction: {\n        mode: \"nearest\",\n        axis: \"x\",\n      },\n      scales: {\n        x: {\n          type: \"time\",\n          adapters: {\n            date: {\n              locale: this.hass.locale,\n              config: this.hass.config,\n            },\n          },\n          ticks: {\n            source: this.chartType === \"bar\" ? \"data\" : undefined,\n            maxRotation: 0,\n            sampleSize: 5,\n            autoSkipPadding: 20,\n            major: {\n              enabled: true,\n            },\n            font: (context) =>\n              context.tick && context.tick.major\n                ? ({ weight: \"bold\" } as any)\n                : {},\n          },\n          time: {\n            tooltipFormat: \"datetime\",\n            unit:\n              this.chartType === \"bar\" &&\n              this.period &&\n              [\"hour\", \"day\", \"week\", \"month\"].includes(this.period)\n                ? this.period\n                : undefined,\n          },\n        },\n        y: {\n          beginAtZero: this.chartType === \"bar\",\n          ticks: {\n            maxTicksLimit: 7,\n          },\n          title: {\n            display: unit || this.unit,\n            text: unit || this.unit,\n          },\n          type: this.logarithmicScale ? \"logarithmic\" : \"linear\",\n        },\n      },\n      plugins: {\n        tooltip: {\n          callbacks: {\n            label: (context) =>\n              `${context.dataset.label}: ${formatNumber(\n                context.parsed.y,\n                this.hass.locale,\n                getNumberFormatOptions(\n                  undefined,\n                  this.hass.entities[this._statisticIds[context.datasetIndex]]\n                )\n              )} ${\n                // @ts-ignore\n                context.dataset.unit || \"\"\n              }`,\n          },\n        },\n        filler: {\n          propagate: true,\n        },\n        legend: {\n          display: !this.hideLegend,\n          labels: {\n            usePointStyle: true,\n          },\n        },\n      },\n      elements: {\n        line: {\n          tension: 0.4,\n          cubicInterpolationMode: \"monotone\",\n          borderWidth: 1.5,\n        },\n        bar: { borderWidth: 1.5, borderRadius: 4 },\n        point: {\n          hitRadius: 50,\n        },\n      },\n      // @ts-expect-error\n      locale: numberFormatToLocale(this.hass.locale),\n    };\n  }\n\n  private _getStatisticsMetaData = memoizeOne(\n    async (statisticIds: string[] | undefined) => {\n      const statsMetadataArray = await getStatisticMetadata(\n        this.hass,\n        statisticIds\n      );\n      const statisticsMetaData = {};\n      statsMetadataArray.forEach((x) => {\n        statisticsMetaData[x.statistic_id] = x;\n      });\n      return statisticsMetaData;\n    }\n  );\n\n  private async _generateData() {\n    if (!this.statisticsData) {\n      return;\n    }\n\n    const statisticsMetaData =\n      this.metadata ||\n      (await this._getStatisticsMetaData(Object.keys(this.statisticsData)));\n\n    let colorIndex = 0;\n    const statisticsData = Object.entries(this.statisticsData);\n    const totalDataSets: ChartDataset<\"line\">[] = [];\n    const statisticIds: string[] = [];\n    let endTime: Date;\n\n    if (statisticsData.length === 0) {\n      return;\n    }\n\n    endTime =\n      this.endTime ||\n      // Get the highest date from the last date of each statistic\n      new Date(\n        Math.max(\n          ...statisticsData.map(([_, stats]) =>\n            new Date(stats[stats.length - 1].start).getTime()\n          )\n        )\n      );\n\n    if (endTime > new Date()) {\n      endTime = new Date();\n    }\n\n    let unit: string | undefined | null;\n\n    const names = this.names || {};\n    statisticsData.forEach(([statistic_id, stats]) => {\n      const meta = statisticsMetaData?.[statistic_id];\n      let name = names[statistic_id];\n      if (name === undefined) {\n        name = getStatisticLabel(this.hass, statistic_id, meta);\n      }\n\n      if (!this.unit) {\n        if (unit === undefined) {\n          unit = getDisplayUnit(this.hass, statistic_id, meta);\n        } else if (\n          unit !== null &&\n          unit !== getDisplayUnit(this.hass, statistic_id, meta)\n        ) {\n          // Clear unit if not all statistics have same unit\n          unit = null;\n        }\n      }\n\n      // array containing [value1, value2, etc]\n      let prevValues: Array<number | null> | null = null;\n      let prevEndTime: Date | undefined;\n\n      // The datasets for the current statistic\n      const statDataSets: ChartDataset<\"line\">[] = [];\n\n      const pushData = (\n        start: Date,\n        end: Date,\n        dataValues: Array<number | null> | null\n      ) => {\n        if (!dataValues) return;\n        if (start > end) {\n          // Drop data points that are after the requested endTime. This could happen if\n          // endTime is \"now\" and client time is not in sync with server time.\n          return;\n        }\n        statDataSets.forEach((d, i) => {\n          if (\n            this.chartType === \"line\" &&\n            prevEndTime &&\n            prevValues &&\n            prevEndTime.getTime() !== start.getTime()\n          ) {\n            // if the end of the previous data doesn't match the start of the current data,\n            // we have to draw a gap so add a value at the end time, and then an empty value.\n            d.data.push({ x: prevEndTime.getTime(), y: prevValues[i]! });\n            // @ts-expect-error\n            d.data.push({ x: prevEndTime.getTime(), y: null });\n          }\n          d.data.push({ x: start.getTime(), y: dataValues[i]! });\n        });\n        prevValues = dataValues;\n        prevEndTime = end;\n      };\n\n      const color = getGraphColorByIndex(\n        colorIndex,\n        this._computedStyle || getComputedStyle(this)\n      );\n      colorIndex++;\n\n      const statTypes: this[\"statTypes\"] = [];\n\n      const hasMean =\n        this.statTypes.includes(\"mean\") && statisticsHaveType(stats, \"mean\");\n      const drawBands =\n        hasMean ||\n        (this.statTypes.includes(\"min\") &&\n          statisticsHaveType(stats, \"min\") &&\n          this.statTypes.includes(\"max\") &&\n          statisticsHaveType(stats, \"max\"));\n\n      const sortedTypes = drawBands\n        ? [...this.statTypes].sort((a, b) => {\n            if (a === \"min\" || b === \"max\") {\n              return -1;\n            }\n            if (a === \"max\" || b === \"min\") {\n              return +1;\n            }\n            return 0;\n          })\n        : this.statTypes;\n\n      sortedTypes.forEach((type) => {\n        if (statisticsHaveType(stats, type)) {\n          const band = drawBands && (type === \"min\" || type === \"max\");\n          statTypes.push(type);\n          statDataSets.push({\n            label: name\n              ? `${name} (${this.hass.localize(\n                  `ui.components.statistics_charts.statistic_types.${type}`\n                )})\n            `\n              : this.hass.localize(\n                  `ui.components.statistics_charts.statistic_types.${type}`\n                ),\n            fill: drawBands\n              ? type === \"min\" && hasMean\n                ? \"+1\"\n                : type === \"max\"\n                  ? \"-1\"\n                  : false\n              : false,\n            borderColor:\n              band && hasMean ? color + (this.hideLegend ? \"00\" : \"7F\") : color,\n            backgroundColor: band ? color + \"3F\" : color + \"7F\",\n            pointRadius: 0,\n            data: [],\n            // @ts-ignore\n            unit: meta?.unit_of_measurement,\n            band,\n          });\n          statisticIds.push(statistic_id);\n        }\n      });\n\n      let prevDate: Date | null = null;\n      // Process chart data.\n      let firstSum: number | null | undefined = null;\n      stats.forEach((stat) => {\n        const startDate = new Date(stat.start);\n        if (prevDate === startDate) {\n          return;\n        }\n        prevDate = startDate;\n        const dataValues: Array<number | null> = [];\n        statTypes.forEach((type) => {\n          let val: number | null | undefined;\n          if (type === \"sum\") {\n            if (firstSum === null || firstSum === undefined) {\n              val = 0;\n              firstSum = stat.sum;\n            } else {\n              val = (stat.sum || 0) - firstSum;\n            }\n          } else {\n            val = stat[type];\n          }\n          dataValues.push(val ?? null);\n        });\n        pushData(startDate, new Date(stat.end), dataValues);\n      });\n\n      // Concat two arrays\n      Array.prototype.push.apply(totalDataSets, statDataSets);\n    });\n\n    if (unit) {\n      this._createOptions(unit);\n    }\n\n    this._chartData = {\n      datasets: totalDataSets,\n    };\n    this._statisticIds = statisticIds;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: block;\n        min-height: 60px;\n      }\n      .info {\n        text-align: center;\n        line-height: 60px;\n        color: var(--secondary-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"statistics-chart\": StatisticsChart;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}