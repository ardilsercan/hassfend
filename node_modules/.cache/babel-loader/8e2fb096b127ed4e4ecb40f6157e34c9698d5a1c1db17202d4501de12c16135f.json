{"ast":null,"code":"import { isStrategyDashboard } from \"../../../data/lovelace/config/types\";\nimport { isStrategyView } from \"../../../data/lovelace/config/view\";\nimport { cleanLegacyStrategyConfig, isLegacyStrategy } from \"./legacy-strategy\";\nconst MAX_WAIT_STRATEGY_LOAD = 5000;\nconst CUSTOM_PREFIX = \"custom:\";\nconst STRATEGIES = {\n  dashboard: {\n    \"original-states\": () => import(\"./original-states-dashboard-strategy\")\n  },\n  view: {\n    \"original-states\": () => import(\"./original-states-view-strategy\"),\n    energy: () => import(\"../../energy/strategies/energy-view-strategy\")\n  }\n};\nexport const getLovelaceStrategy = async (configType, strategyType) => {\n  var _customElements$get;\n  if (strategyType in STRATEGIES[configType]) {\n    await STRATEGIES[configType][strategyType]();\n    const tag = `${strategyType}-${configType}-strategy`;\n    return customElements.get(tag);\n  }\n  if (!strategyType.startsWith(CUSTOM_PREFIX)) {\n    throw new Error(\"Unknown strategy\");\n  }\n  const legacyTag = `ll-strategy-${strategyType.slice(CUSTOM_PREFIX.length)}`;\n  const tag = `ll-strategy-${configType}-${strategyType.slice(CUSTOM_PREFIX.length)}`;\n  if ((await Promise.race([customElements.whenDefined(legacyTag), customElements.whenDefined(tag), new Promise(resolve => {\n    setTimeout(() => resolve(true), MAX_WAIT_STRATEGY_LOAD);\n  })])) === true) {\n    throw new Error(`Timeout waiting for strategy element ${tag} to be registered`);\n  }\n  return (_customElements$get = customElements.get(tag)) !== null && _customElements$get !== void 0 ? _customElements$get : customElements.get(legacyTag);\n};\nconst generateStrategy = async (configType, renderError, strategyConfig, hass) => {\n  const strategyType = strategyConfig.type;\n  if (!strategyType) {\n    // @ts-ignore\n    return renderError(\"No strategy type found\");\n  }\n  try {\n    const strategy = await getLovelaceStrategy(configType, strategyType);\n\n    // Backward compatibility for custom strategies for loading old strategies format\n    if (isLegacyStrategy(strategy)) {\n      if (configType === \"dashboard\" && \"generateDashboard\" in strategy) {\n        return await strategy.generateDashboard({\n          config: {\n            strategy: strategyConfig,\n            views: []\n          },\n          hass\n        });\n      }\n      if (configType === \"view\" && \"generateView\" in strategy) {\n        return await strategy.generateView({\n          config: {\n            views: []\n          },\n          view: {\n            strategy: strategyConfig\n          },\n          hass\n        });\n      }\n    }\n    const config = cleanLegacyStrategyConfig(strategyConfig);\n    return await strategy.generate(config, hass);\n  } catch (err) {\n    if (err.message !== \"timeout\") {\n      // eslint-disable-next-line\n      console.error(err);\n    }\n    // @ts-ignore\n    return renderError(err);\n  }\n};\nexport const generateLovelaceDashboardStrategy = async (strategyConfig, hass) => generateStrategy(\"dashboard\", err => ({\n  views: [{\n    title: \"Error\",\n    cards: [{\n      type: \"markdown\",\n      content: `Error loading the dashboard strategy:\\n> ${err}`\n    }]\n  }]\n}), strategyConfig, hass);\nexport const generateLovelaceViewStrategy = async (strategyConfig, hass) => generateStrategy(\"view\", err => ({\n  cards: [{\n    type: \"markdown\",\n    content: `Error loading the view strategy:\\n> ${err}`\n  }]\n}), strategyConfig, hass);\n\n/**\n * Find all references to strategies and replaces them with the generated output\n */\nexport const expandLovelaceConfigStrategies = async (config, hass) => {\n  const newConfig = isStrategyDashboard(config) ? await generateLovelaceDashboardStrategy(config.strategy, hass) : {\n    ...config\n  };\n  newConfig.views = await Promise.all(newConfig.views.map(view => isStrategyView(view) ? generateLovelaceViewStrategy(view.strategy, hass) : view));\n  return newConfig;\n};","map":{"version":3,"names":["isStrategyDashboard","isStrategyView","cleanLegacyStrategyConfig","isLegacyStrategy","MAX_WAIT_STRATEGY_LOAD","CUSTOM_PREFIX","STRATEGIES","dashboard","original-states","view","energy","getLovelaceStrategy","configType","strategyType","_customElements$get","tag","customElements","get","startsWith","Error","legacyTag","slice","length","Promise","race","whenDefined","resolve","setTimeout","generateStrategy","renderError","strategyConfig","hass","type","strategy","generateDashboard","config","views","generateView","generate","err","message","console","error","generateLovelaceDashboardStrategy","title","cards","content","generateLovelaceViewStrategy","expandLovelaceConfigStrategies","newConfig","all","map"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/strategies/get-strategy.ts"],"sourcesContent":["import {\n  LovelaceConfig,\n  LovelaceRawConfig,\n  isStrategyDashboard,\n} from \"../../../data/lovelace/config/types\";\nimport { LovelaceStrategyConfig } from \"../../../data/lovelace/config/strategy\";\nimport {\n  LovelaceViewConfig,\n  isStrategyView,\n} from \"../../../data/lovelace/config/view\";\nimport { AsyncReturnType, HomeAssistant } from \"../../../types\";\nimport { cleanLegacyStrategyConfig, isLegacyStrategy } from \"./legacy-strategy\";\nimport {\n  LovelaceDashboardStrategy,\n  LovelaceStrategy,\n  LovelaceViewStrategy,\n} from \"./types\";\n\nconst MAX_WAIT_STRATEGY_LOAD = 5000;\nconst CUSTOM_PREFIX = \"custom:\";\n\nconst STRATEGIES: Record<LovelaceStrategyConfigType, Record<string, any>> = {\n  dashboard: {\n    \"original-states\": () => import(\"./original-states-dashboard-strategy\"),\n  },\n  view: {\n    \"original-states\": () => import(\"./original-states-view-strategy\"),\n    energy: () => import(\"../../energy/strategies/energy-view-strategy\"),\n  },\n};\n\nexport type LovelaceStrategyConfigType = \"dashboard\" | \"view\";\n\ntype Strategies = {\n  dashboard: LovelaceDashboardStrategy;\n  view: LovelaceViewStrategy;\n};\n\ntype StrategyConfig<T extends LovelaceStrategyConfigType> = AsyncReturnType<\n  Strategies[T][\"generate\"]\n>;\n\nexport const getLovelaceStrategy = async <T extends LovelaceStrategyConfigType>(\n  configType: T,\n  strategyType: string\n): Promise<LovelaceStrategy> => {\n  if (strategyType in STRATEGIES[configType]) {\n    await STRATEGIES[configType][strategyType]();\n    const tag = `${strategyType}-${configType}-strategy`;\n    return customElements.get(tag) as unknown as Strategies[T];\n  }\n\n  if (!strategyType.startsWith(CUSTOM_PREFIX)) {\n    throw new Error(\"Unknown strategy\");\n  }\n\n  const legacyTag = `ll-strategy-${strategyType.slice(CUSTOM_PREFIX.length)}`;\n  const tag = `ll-strategy-${configType}-${strategyType.slice(\n    CUSTOM_PREFIX.length\n  )}`;\n\n  if (\n    (await Promise.race([\n      customElements.whenDefined(legacyTag),\n      customElements.whenDefined(tag),\n      new Promise((resolve) => {\n        setTimeout(() => resolve(true), MAX_WAIT_STRATEGY_LOAD);\n      }),\n    ])) === true\n  ) {\n    throw new Error(\n      `Timeout waiting for strategy element ${tag} to be registered`\n    );\n  }\n\n  return (customElements.get(tag) ??\n    customElements.get(legacyTag)) as unknown as Strategies[T];\n};\n\nconst generateStrategy = async <T extends LovelaceStrategyConfigType>(\n  configType: T,\n  renderError: (err: string | Error) => StrategyConfig<T>,\n  strategyConfig: LovelaceStrategyConfig,\n  hass: HomeAssistant\n): Promise<StrategyConfig<T>> => {\n  const strategyType = strategyConfig.type;\n  if (!strategyType) {\n    // @ts-ignore\n    return renderError(\"No strategy type found\");\n  }\n\n  try {\n    const strategy = await getLovelaceStrategy<T>(configType, strategyType);\n\n    // Backward compatibility for custom strategies for loading old strategies format\n    if (isLegacyStrategy(strategy)) {\n      if (configType === \"dashboard\" && \"generateDashboard\" in strategy) {\n        return (await strategy.generateDashboard({\n          config: { strategy: strategyConfig, views: [] },\n          hass,\n        })) as StrategyConfig<T>;\n      }\n      if (configType === \"view\" && \"generateView\" in strategy) {\n        return (await strategy.generateView({\n          config: { views: [] },\n          view: { strategy: strategyConfig },\n          hass,\n        })) as StrategyConfig<T>;\n      }\n    }\n\n    const config = cleanLegacyStrategyConfig(strategyConfig);\n\n    return await strategy.generate(config, hass);\n  } catch (err: any) {\n    if (err.message !== \"timeout\") {\n      // eslint-disable-next-line\n      console.error(err);\n    }\n    // @ts-ignore\n    return renderError(err);\n  }\n};\n\nexport const generateLovelaceDashboardStrategy = async (\n  strategyConfig: LovelaceStrategyConfig,\n  hass: HomeAssistant\n): Promise<LovelaceConfig> =>\n  generateStrategy(\n    \"dashboard\",\n    (err) => ({\n      views: [\n        {\n          title: \"Error\",\n          cards: [\n            {\n              type: \"markdown\",\n              content: `Error loading the dashboard strategy:\\n> ${err}`,\n            },\n          ],\n        },\n      ],\n    }),\n    strategyConfig,\n    hass\n  );\n\nexport const generateLovelaceViewStrategy = async (\n  strategyConfig: LovelaceStrategyConfig,\n  hass: HomeAssistant\n): Promise<LovelaceViewConfig> =>\n  generateStrategy(\n    \"view\",\n    (err) => ({\n      cards: [\n        {\n          type: \"markdown\",\n          content: `Error loading the view strategy:\\n> ${err}`,\n        },\n      ],\n    }),\n    strategyConfig,\n    hass\n  );\n\n/**\n * Find all references to strategies and replaces them with the generated output\n */\nexport const expandLovelaceConfigStrategies = async (\n  config: LovelaceRawConfig,\n  hass: HomeAssistant\n): Promise<LovelaceConfig> => {\n  const newConfig = isStrategyDashboard(config)\n    ? await generateLovelaceDashboardStrategy(config.strategy, hass)\n    : { ...config };\n\n  newConfig.views = await Promise.all(\n    newConfig.views.map((view) =>\n      isStrategyView(view)\n        ? generateLovelaceViewStrategy(view.strategy, hass)\n        : view\n    )\n  );\n\n  return newConfig;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}