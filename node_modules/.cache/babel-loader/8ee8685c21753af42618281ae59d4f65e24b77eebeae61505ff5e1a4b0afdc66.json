{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, unsafeCSS } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeAttributeNameDisplay } from \"../../common/entity/compute_attribute_display\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../data/entity_attributes\";\nexport function generateTiltSliderTrackBackgroundGradient() {\n  const count = 24;\n  const minStrokeWidth = 0.2;\n  const gradient = [];\n  for (let i = 0; i < count; i++) {\n    const stopOffset1 = i / count;\n    const stopOffset2 = stopOffset1 + i / count ** 2 * (1 - minStrokeWidth) + minStrokeWidth / count;\n    if (i !== 0) {\n      gradient.push([stopOffset1, \"transparent\"]);\n    }\n    gradient.push([stopOffset1, \"var(--control-slider-color)\"]);\n    gradient.push([stopOffset2, \"var(--control-slider-color)\"]);\n    gradient.push([stopOffset2, \"transparent\"]);\n  }\n  return unsafeCSS(gradient.map(([stop, color]) => `${color} ${stop * 100}%`).join(\", \"));\n}\nconst GRADIENT = generateTiltSliderTrackBackgroundGradient();\nexport let HaStateControlInfoCoverTiltPosition = _decorate([customElement(\"ha-state-control-cover-tilt-position\")], function (_initialize, _LitElement) {\n  class HaStateControlInfoCoverTiltPosition extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaStateControlInfoCoverTiltPosition,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProp) {\n        if (changedProp.has(\"stateObj\")) {\n          this.value = this.stateObj.attributes.current_tilt_position != null ? Math.round(this.stateObj.attributes.current_tilt_position) : undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.hass.callService(\"cover\", \"set_cover_tilt_position\", {\n          entity_id: this.stateObj.entity_id,\n          tilt_position: value\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const openColor = stateColorCss(this.stateObj, \"open\");\n        const color = stateColorCss(this.stateObj);\n        return html`\n      <ha-control-slider\n        vertical\n        .value=${this.value}\n        min=\"0\"\n        max=\"100\"\n        mode=\"cursor\"\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"current_tilt_position\")}\n        style=${styleMap({\n          // Use open color for inactive state to avoid grey slider that looks disabled\n          \"--state-cover-inactive-color\": openColor,\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_tilt_position}\n        .locale=${this.hass.locale}\n      >\n        <div slot=\"background\" class=\"gradient\"></div>\n      </ha-control-slider>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-slider {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-tooltip-font-size: 20px;\n      }\n      .gradient {\n        background: -webkit-linear-gradient(top, ${GRADIENT});\n        opacity: 0.6;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","unsafeCSS","customElement","property","state","styleMap","computeAttributeNameDisplay","stateColorCss","UNAVAILABLE","DOMAIN_ATTRIBUTES_UNITS","generateTiltSliderTrackBackgroundGradient","count","minStrokeWidth","gradient","i","stopOffset1","stopOffset2","push","map","stop","color","join","GRADIENT","HaStateControlInfoCoverTiltPosition","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","updated","changedProp","has","stateObj","attributes","current_tilt_position","Math","round","undefined","_valueChanged","ev","detail","isNaN","hass","callService","entity_id","tilt_position","render","openColor","localize","entities","cover","locale","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/state-control/cover/ha-state-control-cover-tilt-position.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  TemplateResult,\n  unsafeCSS,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeAttributeNameDisplay } from \"../../common/entity/compute_attribute_display\";\nimport { stateColorCss } from \"../../common/entity/state_color\";\nimport \"../../components/ha-control-slider\";\nimport { CoverEntity } from \"../../data/cover\";\nimport { UNAVAILABLE } from \"../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../data/entity_attributes\";\nimport { HomeAssistant } from \"../../types\";\n\nexport function generateTiltSliderTrackBackgroundGradient() {\n  const count = 24;\n  const minStrokeWidth = 0.2;\n  const gradient: [number, string][] = [];\n\n  for (let i = 0; i < count; i++) {\n    const stopOffset1 = i / count;\n    const stopOffset2 =\n      stopOffset1 +\n      (i / count ** 2) * (1 - minStrokeWidth) +\n      minStrokeWidth / count;\n\n    if (i !== 0) {\n      gradient.push([stopOffset1, \"transparent\"]);\n    }\n    gradient.push([stopOffset1, \"var(--control-slider-color)\"]);\n    gradient.push([stopOffset2, \"var(--control-slider-color)\"]);\n    gradient.push([stopOffset2, \"transparent\"]);\n  }\n\n  return unsafeCSS(\n    gradient\n      .map(([stop, color]) => `${color} ${(stop as number) * 100}%`)\n      .join(\", \")\n  );\n}\n\nconst GRADIENT = generateTiltSliderTrackBackgroundGradient();\n\n@customElement(\"ha-state-control-cover-tilt-position\")\nexport class HaStateControlInfoCoverTiltPosition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: CoverEntity;\n\n  @state() value?: number;\n\n  protected updated(changedProp: Map<string | number | symbol, unknown>): void {\n    if (changedProp.has(\"stateObj\")) {\n      this.value =\n        this.stateObj.attributes.current_tilt_position != null\n          ? Math.round(this.stateObj.attributes.current_tilt_position)\n          : undefined;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass.callService(\"cover\", \"set_cover_tilt_position\", {\n      entity_id: this.stateObj!.entity_id,\n      tilt_position: value,\n    });\n  }\n\n  protected render(): TemplateResult {\n    const openColor = stateColorCss(this.stateObj, \"open\");\n    const color = stateColorCss(this.stateObj);\n\n    return html`\n      <ha-control-slider\n        vertical\n        .value=${this.value}\n        min=\"0\"\n        max=\"100\"\n        mode=\"cursor\"\n        @value-changed=${this._valueChanged}\n        .ariaLabel=${computeAttributeNameDisplay(\n          this.hass.localize,\n          this.stateObj,\n          this.hass.entities,\n          \"current_tilt_position\"\n        )}\n        style=${styleMap({\n          // Use open color for inactive state to avoid grey slider that looks disabled\n          \"--state-cover-inactive-color\": openColor,\n          \"--control-slider-color\": color,\n          \"--control-slider-background\": color,\n        })}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_tilt_position}\n        .locale=${this.hass.locale}\n      >\n        <div slot=\"background\" class=\"gradient\"></div>\n      </ha-control-slider>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-control-slider {\n        height: 45vh;\n        max-height: 320px;\n        min-height: 200px;\n        --control-slider-thickness: 100px;\n        --control-slider-border-radius: 24px;\n        --control-slider-color: var(--primary-color);\n        --control-slider-background: var(--disabled-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-tooltip-font-size: 20px;\n      }\n      .gradient {\n        background: -webkit-linear-gradient(top, ${GRADIENT});\n        opacity: 0.6;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-state-control-cover-tilt-position\": HaStateControlInfoCoverTiltPosition;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}