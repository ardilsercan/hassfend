{"ast":null,"code":"var _Intl$DateTimeFormat$, _Intl$DateTimeFormat, _Intl, _Intl$DateTimeFormat$2, _Intl$DateTimeFormat$3;\nimport { TimeZone } from \"../../data/translation\";\n\n// Browser  time zone can be determined from Intl, with fallback to UTC for polyfill or no support.\n// Alternatively, we could fallback to a fixed offset IANA zone (e.g. \"Etc/GMT+5\") using\n// Date.prototype.getTimeOffset(), but IANA only has whole hour Etc zones, and problems\n// might occur with relative time due to DST.\n// Use optional chain instead of polyfill import since polyfill will always return UTC\nexport var LOCAL_TIME_ZONE = (_Intl$DateTimeFormat$ = (_Intl$DateTimeFormat = (_Intl = Intl).DateTimeFormat) === null || _Intl$DateTimeFormat === void 0 || (_Intl$DateTimeFormat$2 = (_Intl$DateTimeFormat$3 = _Intl$DateTimeFormat.call(_Intl)).resolvedOptions) === null || _Intl$DateTimeFormat$2 === void 0 ? void 0 : _Intl$DateTimeFormat$2.call(_Intl$DateTimeFormat$3).timeZone) !== null && _Intl$DateTimeFormat$ !== void 0 ? _Intl$DateTimeFormat$ : \"UTC\";\n\n// Pick time zone based on user profile option.  Core zone is used when local cannot be determined.\nexport var resolveTimeZone = function resolveTimeZone(option, serverTimeZone) {\n  return option === TimeZone.local && LOCAL_TIME_ZONE !== \"UTC\" ? LOCAL_TIME_ZONE : serverTimeZone;\n};","map":{"version":3,"names":["TimeZone","LOCAL_TIME_ZONE","_Intl$DateTimeFormat$","_Intl$DateTimeFormat","_Intl","Intl","DateTimeFormat","_Intl$DateTimeFormat$2","_Intl$DateTimeFormat$3","call","resolvedOptions","timeZone","resolveTimeZone","option","serverTimeZone","local"],"sources":["/workspaces/frontend/src/common/datetime/resolve-time-zone.ts"],"sourcesContent":["import { TimeZone } from \"../../data/translation\";\n\n// Browser  time zone can be determined from Intl, with fallback to UTC for polyfill or no support.\n// Alternatively, we could fallback to a fixed offset IANA zone (e.g. \"Etc/GMT+5\") using\n// Date.prototype.getTimeOffset(), but IANA only has whole hour Etc zones, and problems\n// might occur with relative time due to DST.\n// Use optional chain instead of polyfill import since polyfill will always return UTC\nexport const LOCAL_TIME_ZONE =\n  Intl.DateTimeFormat?.().resolvedOptions?.().timeZone ?? \"UTC\";\n\n// Pick time zone based on user profile option.  Core zone is used when local cannot be determined.\nexport const resolveTimeZone = (option: TimeZone, serverTimeZone: string) =>\n  option === TimeZone.local && LOCAL_TIME_ZONE !== \"UTC\"\n    ? LOCAL_TIME_ZONE\n    : serverTimeZone;\n"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,wBAAwB;;AAEjD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,eAAe,IAAAC,qBAAA,IAAAC,oBAAA,GAC1B,CAAAC,KAAA,GAAAC,IAAI,EAACC,cAAc,cAAAH,oBAAA,gBAAAI,sBAAA,GAAnB,CAAAC,sBAAA,GAAAL,oBAAA,CAAAM,IAAA,CAAAL,KAAsB,CAAC,EAACM,eAAe,cAAAH,sBAAA,uBAAvCA,sBAAA,CAAAE,IAAA,CAAAD,sBAA0C,CAAC,CAACG,QAAQ,cAAAT,qBAAA,cAAAA,qBAAA,GAAI,KAAK;;AAE/D;AACA,OAAO,IAAMU,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,MAAgB,EAAEC,cAAsB;EAAA,OACtED,MAAM,KAAKb,QAAQ,CAACe,KAAK,IAAId,eAAe,KAAK,KAAK,GAClDA,eAAe,GACfa,cAAc;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}