{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { VirtualKeyboardController } from '@vaadin/field-base/src/virtual-keyboard-controller.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * Checks if the value is supported as an item value in this control.\n *\n * @param {unknown} value\n * @return {boolean}\n */\nfunction isValidValue(value) {\n  return value !== undefined && value !== null;\n}\n\n/**\n * Returns the index of the first item that satisfies the provided testing function\n * ignoring placeholder items.\n *\n * @param {Array<ComboBoxItem | string>} items\n * @param {Function} callback\n * @return {number}\n */\nfunction findItemIndex(items, callback) {\n  return items.findIndex(function (item) {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    }\n    return callback(item);\n  });\n}\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes ValidateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n * @mixes FocusMixin\n * @mixes OverlayClassMixin\n * @param {function(new:HTMLElement)} subclass\n */\nexport var ComboBoxMixin = function ComboBoxMixin(subclass) {\n  return /*#__PURE__*/function (_OverlayClassMixin) {\n    _inherits(ComboBoxMixinClass, _OverlayClassMixin);\n    function ComboBoxMixinClass() {\n      var _this;\n      _classCallCheck(this, ComboBoxMixinClass);\n      _this = _callSuper(this, ComboBoxMixinClass);\n      _this._boundOverlaySelectedItemChanged = _this._overlaySelectedItemChanged.bind(_assertThisInitialized(_this));\n      _this._boundOnClearButtonMouseDown = _this.__onClearButtonMouseDown.bind(_assertThisInitialized(_this));\n      _this._boundOnClick = _this._onClick.bind(_assertThisInitialized(_this));\n      _this._boundOnOverlayTouchAction = _this._onOverlayTouchAction.bind(_assertThisInitialized(_this));\n      _this._boundOnTouchend = _this._onTouchend.bind(_assertThisInitialized(_this));\n      return _this;\n    }\n\n    /**\n     * Tag name prefix used by scroller and items.\n     * @protected\n     * @return {string}\n     */\n    _createClass(ComboBoxMixinClass, [{\n      key: \"_tagNamePrefix\",\n      get: function get() {\n        return 'vaadin-combo-box';\n      }\n\n      /**\n       * Get a reference to the native `<input>` element.\n       * Override to provide a custom input.\n       * @protected\n       * @return {HTMLInputElement | undefined}\n       */\n    }, {\n      key: \"_nativeInput\",\n      get: function get() {\n        return this.inputElement;\n      }\n\n      /**\n       * Override method inherited from `InputMixin`\n       * to customize the input element.\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_inputElementChanged\",\n      value: function _inputElementChanged(inputElement) {\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"_inputElementChanged\", this).call(this, inputElement);\n        var input = this._nativeInput;\n        if (input) {\n          input.autocomplete = 'off';\n          input.autocapitalize = 'off';\n          input.setAttribute('role', 'combobox');\n          input.setAttribute('aria-autocomplete', 'list');\n          input.setAttribute('aria-expanded', !!this.opened);\n\n          // Disable the macOS Safari spell check auto corrections.\n          input.setAttribute('spellcheck', 'false');\n\n          // Disable iOS autocorrect suggestions.\n          input.setAttribute('autocorrect', 'off');\n          this._revertInputValueToValue();\n          if (this.clearElement) {\n            this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\n          }\n        }\n      }\n\n      /** @protected */\n    }, {\n      key: \"ready\",\n      value: function ready() {\n        var _this2 = this;\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"ready\", this).call(this);\n        this._initOverlay();\n        this._initScroller();\n        this._lastCommittedValue = this.value;\n        this.addEventListener('click', this._boundOnClick);\n        this.addEventListener('touchend', this._boundOnTouchend);\n        var bringToFrontListener = function bringToFrontListener() {\n          requestAnimationFrame(function () {\n            _this2._overlayElement.bringToFront();\n          });\n        };\n        this.addEventListener('mousedown', bringToFrontListener);\n        this.addEventListener('touchstart', bringToFrontListener);\n        processTemplates(this);\n        this.addController(new VirtualKeyboardController(this));\n      }\n\n      /** @protected */\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"disconnectedCallback\", this).call(this);\n\n        // Close the overlay on detach\n        this.close();\n      }\n\n      /**\n       * Requests an update for the content of items.\n       * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n       *\n       * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n       */\n    }, {\n      key: \"requestContentUpdate\",\n      value: function requestContentUpdate() {\n        if (!this._scroller) {\n          return;\n        }\n        this._scroller.requestContentUpdate();\n        this._getItemElements().forEach(function (item) {\n          item.requestContentUpdate();\n        });\n      }\n\n      /**\n       * Opens the dropdown list.\n       */\n    }, {\n      key: \"open\",\n      value: function open() {\n        // Prevent _open() being called when input is disabled or read-only\n        if (!this.disabled && !this.readonly) {\n          this.opened = true;\n        }\n      }\n\n      /**\n       * Closes the dropdown list.\n       */\n    }, {\n      key: \"close\",\n      value: function close() {\n        this.opened = false;\n      }\n\n      /**\n       * Override Polymer lifecycle callback to handle `filter` property change after\n       * the observer for `opened` property is triggered. This is needed when opening\n       * combo-box on user input to ensure the focused index is set correctly.\n       *\n       * @param {!Object} currentProps Current accessor values\n       * @param {?Object} changedProps Properties changed since the last call\n       * @param {?Object} oldProps Previous values for each changed property\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_propertiesChanged\",\n      value: function _propertiesChanged(currentProps, changedProps, oldProps) {\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"_propertiesChanged\", this).call(this, currentProps, changedProps, oldProps);\n        if (changedProps.filter !== undefined) {\n          this._filterChanged(changedProps.filter);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_initOverlay\",\n      value: function _initOverlay() {\n        var _this3 = this;\n        var overlay = this.$.overlay;\n\n        // Store instance for detecting \"dir\" attribute on opening\n        overlay._comboBox = this;\n        overlay.addEventListener('touchend', this._boundOnOverlayTouchAction);\n        overlay.addEventListener('touchmove', this._boundOnOverlayTouchAction);\n\n        // Prevent blurring the input when clicking inside the overlay\n        overlay.addEventListener('mousedown', function (e) {\n          return e.preventDefault();\n        });\n\n        // Manual two-way binding for the overlay \"opened\" property\n        overlay.addEventListener('opened-changed', function (e) {\n          _this3._overlayOpened = e.detail.value;\n        });\n        this._overlayElement = overlay;\n      }\n\n      /**\n       * Create and initialize the scroller element.\n       * Override to provide custom host reference.\n       *\n       * @protected\n       */\n    }, {\n      key: \"_initScroller\",\n      value: function _initScroller(host) {\n        var scrollerTag = \"\".concat(this._tagNamePrefix, \"-scroller\");\n        var overlay = this._overlayElement;\n        overlay.renderer = function (root) {\n          if (!root.firstChild) {\n            root.appendChild(document.createElement(scrollerTag));\n          }\n        };\n\n        // Ensure the scroller is rendered\n        overlay.requestContentUpdate();\n        var scroller = overlay.querySelector(scrollerTag);\n        scroller.owner = host || this;\n        scroller.getItemLabel = this._getItemLabel.bind(this);\n        scroller.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\n\n        // Trigger the observer to set properties\n        this._scroller = scroller;\n      }\n\n      /** @private */\n      // eslint-disable-next-line max-params\n    }, {\n      key: \"_updateScroller\",\n      value: function _updateScroller(scroller, items, opened, loading, selectedItem, itemIdPath, focusedIndex, renderer, theme) {\n        if (scroller) {\n          if (opened) {\n            scroller.style.maxHeight = getComputedStyle(this).getPropertyValue(\"--\".concat(this._tagNamePrefix, \"-overlay-max-height\")) || '65vh';\n          }\n          scroller.setProperties({\n            items: opened ? items : [],\n            opened: opened,\n            loading: loading,\n            selectedItem: selectedItem,\n            itemIdPath: itemIdPath,\n            focusedIndex: focusedIndex,\n            renderer: renderer,\n            theme: theme\n          });\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_openedOrItemsChanged\",\n      value: function _openedOrItemsChanged(opened, items, loading) {\n        // Close the overlay if there are no items to display.\n        // See https://github.com/vaadin/vaadin-combo-box/pull/964\n        this._overlayOpened = !!(opened && (loading || items && items.length));\n      }\n\n      /** @private */\n    }, {\n      key: \"_overlayOpenedChanged\",\n      value: function _overlayOpenedChanged(opened, wasOpened) {\n        if (opened) {\n          this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', {\n            bubbles: true,\n            composed: true\n          }));\n          this._onOpened();\n        } else if (wasOpened && this._dropdownItems && this._dropdownItems.length) {\n          this.close();\n          this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', {\n            bubbles: true,\n            composed: true\n          }));\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_focusedIndexChanged\",\n      value: function _focusedIndexChanged(index, oldIndex) {\n        if (oldIndex === undefined) {\n          return;\n        }\n        this._updateActiveDescendant(index);\n      }\n\n      /** @protected */\n    }, {\n      key: \"_isInputFocused\",\n      value: function _isInputFocused() {\n        return this.inputElement && isElementFocused(this.inputElement);\n      }\n\n      /** @private */\n    }, {\n      key: \"_updateActiveDescendant\",\n      value: function _updateActiveDescendant(index) {\n        var input = this._nativeInput;\n        if (!input) {\n          return;\n        }\n        var item = this._getItemElements().find(function (el) {\n          return el.index === index;\n        });\n        if (item) {\n          input.setAttribute('aria-activedescendant', item.id);\n        } else {\n          input.removeAttribute('aria-activedescendant');\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_openedChanged\",\n      value: function _openedChanged(opened, wasOpened) {\n        // Prevent _close() being called when opened is set to its default value (false).\n        if (wasOpened === undefined) {\n          return;\n        }\n        if (opened) {\n          this._openedWithFocusRing = this.hasAttribute('focus-ring');\n          // For touch devices, we don't want to popup virtual keyboard\n          // unless input element is explicitly focused by the user.\n          if (!this._isInputFocused() && !isTouch) {\n            if (this.inputElement) {\n              this.inputElement.focus();\n            }\n          }\n          this._overlayElement.restoreFocusOnClose = true;\n        } else {\n          this._onClosed();\n          if (this._openedWithFocusRing && this._isInputFocused()) {\n            this.setAttribute('focus-ring', '');\n          }\n        }\n        var input = this._nativeInput;\n        if (input) {\n          input.setAttribute('aria-expanded', !!opened);\n          if (opened) {\n            input.setAttribute('aria-controls', this._scroller.id);\n          } else {\n            input.removeAttribute('aria-controls');\n          }\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_onOverlayTouchAction\",\n      value: function _onOverlayTouchAction() {\n        // On touch devices, blur the input on touch start inside the overlay, in order to hide\n        // the virtual keyboard. But don't close the overlay on this blur.\n        this._closeOnBlurIsPrevented = true;\n        this.inputElement.blur();\n        this._closeOnBlurIsPrevented = false;\n      }\n\n      /** @protected */\n    }, {\n      key: \"_isClearButton\",\n      value: function _isClearButton(event) {\n        return event.composedPath()[0] === this.clearElement;\n      }\n\n      /** @private */\n    }, {\n      key: \"__onClearButtonMouseDown\",\n      value: function __onClearButtonMouseDown(event) {\n        event.preventDefault(); // Prevent native focusout event\n        this.inputElement.focus();\n      }\n\n      /**\n       * @param {Event} event\n       * @protected\n       */\n    }, {\n      key: \"_onClearButtonClick\",\n      value: function _onClearButtonClick(event) {\n        event.preventDefault();\n        this._onClearAction();\n\n        // De-select dropdown item\n        if (this.opened) {\n          this.requestContentUpdate();\n        }\n      }\n\n      /**\n       * @param {Event} event\n       * @private\n       */\n    }, {\n      key: \"_onToggleButtonClick\",\n      value: function _onToggleButtonClick(event) {\n        // Prevent parent components such as `vaadin-grid`\n        // from handling the click event after it bubbles.\n        event.preventDefault();\n        if (this.opened) {\n          this.close();\n        } else {\n          this.open();\n        }\n      }\n\n      /**\n       * @param {Event} event\n       * @protected\n       */\n    }, {\n      key: \"_onHostClick\",\n      value: function _onHostClick(event) {\n        if (!this.autoOpenDisabled) {\n          event.preventDefault();\n          this.open();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_onClick\",\n      value: function _onClick(event) {\n        if (this._isClearButton(event)) {\n          this._onClearButtonClick(event);\n        } else if (event.composedPath().includes(this._toggleElement)) {\n          this._onToggleButtonClick(event);\n        } else {\n          this._onHostClick(event);\n        }\n      }\n\n      /**\n       * Override an event listener from `KeyboardMixin`.\n       *\n       * @param {KeyboardEvent} e\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_onKeyDown\",\n      value: function _onKeyDown(e) {\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"_onKeyDown\", this).call(this, e);\n        if (e.key === 'Tab') {\n          this._overlayElement.restoreFocusOnClose = false;\n        } else if (e.key === 'ArrowDown') {\n          this._onArrowDown();\n\n          // Prevent caret from moving\n          e.preventDefault();\n        } else if (e.key === 'ArrowUp') {\n          this._onArrowUp();\n\n          // Prevent caret from moving\n          e.preventDefault();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_getItemLabel\",\n      value: function _getItemLabel(item) {\n        var label = item && this.itemLabelPath ? get(this.itemLabelPath, item) : undefined;\n        if (label === undefined || label === null) {\n          label = item ? item.toString() : '';\n        }\n        return label;\n      }\n\n      /** @private */\n    }, {\n      key: \"_getItemValue\",\n      value: function _getItemValue(item) {\n        var value = item && this.itemValuePath ? get(this.itemValuePath, item) : undefined;\n        if (value === undefined) {\n          value = item ? item.toString() : '';\n        }\n        return value;\n      }\n\n      /** @private */\n    }, {\n      key: \"_onArrowDown\",\n      value: function _onArrowDown() {\n        if (this.opened) {\n          var items = this._dropdownItems;\n          if (items) {\n            this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\n            this._prefillFocusedItemLabel();\n          }\n        } else {\n          this.open();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_onArrowUp\",\n      value: function _onArrowUp() {\n        if (this.opened) {\n          if (this._focusedIndex > -1) {\n            this._focusedIndex = Math.max(0, this._focusedIndex - 1);\n          } else {\n            var items = this._dropdownItems;\n            if (items) {\n              this._focusedIndex = items.length - 1;\n            }\n          }\n          this._prefillFocusedItemLabel();\n        } else {\n          this.open();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_prefillFocusedItemLabel\",\n      value: function _prefillFocusedItemLabel() {\n        if (this._focusedIndex > -1) {\n          var focusedItem = this._dropdownItems[this._focusedIndex];\n          this._inputElementValue = this._getItemLabel(focusedItem);\n          this._markAllSelectionRange();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_setSelectionRange\",\n      value: function _setSelectionRange(start, end) {\n        // Setting selection range focuses and/or moves the caret in some browsers,\n        // and there's no need to modify the selection range if the input isn't focused anyway.\n        // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\n        // the next focusable element instead of the combo-box itself.\n        if (this._isInputFocused() && this.inputElement.setSelectionRange) {\n          this.inputElement.setSelectionRange(start, end);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_markAllSelectionRange\",\n      value: function _markAllSelectionRange() {\n        if (this._inputElementValue !== undefined) {\n          this._setSelectionRange(0, this._inputElementValue.length);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_clearSelectionRange\",\n      value: function _clearSelectionRange() {\n        if (this._inputElementValue !== undefined) {\n          var pos = this._inputElementValue ? this._inputElementValue.length : 0;\n          this._setSelectionRange(pos, pos);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_closeOrCommit\",\n      value: function _closeOrCommit() {\n        if (!this.opened && !this.loading) {\n          this._commitValue();\n        } else {\n          this.close();\n        }\n      }\n\n      /**\n       * Override an event listener from `KeyboardMixin`.\n       *\n       * @param {KeyboardEvent} e\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_onEnter\",\n      value: function _onEnter(e) {\n        // Do not commit value when custom values are disallowed and input value is not a valid option\n        // also stop propagation of the event, otherwise the user could submit a form while the input\n        // still contains an invalid value\n        if (!this._hasValidInputValue()) {\n          // Do not submit the surrounding form.\n          e.preventDefault();\n          // Do not trigger global listeners\n          e.stopPropagation();\n          return;\n        }\n\n        // Stop propagation of the enter event only if the dropdown is opened, this\n        // \"consumes\" the enter event for the action of closing the dropdown\n        if (this.opened) {\n          // Do not submit the surrounding form.\n          e.preventDefault();\n          // Do not trigger global listeners\n          e.stopPropagation();\n        }\n        this._closeOrCommit();\n      }\n\n      /**\n       * @protected\n       */\n    }, {\n      key: \"_hasValidInputValue\",\n      value: function _hasValidInputValue() {\n        var hasInvalidOption = this._focusedIndex < 0 && this._inputElementValue !== '' && this._getItemLabel(this.selectedItem) !== this._inputElementValue;\n        return this.allowCustomValue || !hasInvalidOption;\n      }\n\n      /**\n       * Override an event listener from `KeyboardMixin`.\n       * Do not call `super` in order to override clear\n       * button logic defined in `InputControlMixin`.\n       *\n       * @param {!KeyboardEvent} e\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_onEscape\",\n      value: function _onEscape(e) {\n        if (this.autoOpenDisabled) {\n          // Auto-open is disabled\n          if (this.opened || this.value !== this._inputElementValue && this._inputElementValue.length > 0) {\n            // The overlay is open or\n            // The input value has changed but the change hasn't been committed, so cancel it.\n            e.stopPropagation();\n            this._focusedIndex = -1;\n            this.cancel();\n          } else if (this.clearButtonVisible && !this.opened && !!this.value) {\n            e.stopPropagation();\n            // The clear button is visible and the overlay is closed, so clear the value.\n            this._onClearAction();\n          }\n        } else if (this.opened) {\n          // Auto-open is enabled\n          // The overlay is open\n          e.stopPropagation();\n          if (this._focusedIndex > -1) {\n            // An item is focused, revert the input to the filtered value\n            this._focusedIndex = -1;\n            this._revertInputValue();\n          } else {\n            // No item is focused, cancel the change and close the overlay\n            this.cancel();\n          }\n        } else if (this.clearButtonVisible && !!this.value) {\n          e.stopPropagation();\n          // The clear button is visible and the overlay is closed, so clear the value.\n          this._onClearAction();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_toggleElementChanged\",\n      value: function _toggleElementChanged(toggleElement) {\n        var _this4 = this;\n        if (toggleElement) {\n          // Don't blur the input on toggle mousedown\n          toggleElement.addEventListener('mousedown', function (e) {\n            return e.preventDefault();\n          });\n          // Unfocus previously focused element if focus is not inside combo box (on touch devices)\n          toggleElement.addEventListener('click', function () {\n            if (isTouch && !_this4._isInputFocused()) {\n              document.activeElement.blur();\n            }\n          });\n        }\n      }\n\n      /**\n       * Clears the current value.\n       * @protected\n       */\n    }, {\n      key: \"_onClearAction\",\n      value: function _onClearAction() {\n        this.selectedItem = null;\n        if (this.allowCustomValue) {\n          this.value = '';\n        }\n        this._detectAndDispatchChange();\n      }\n\n      /**\n       * Reverts back to original value.\n       */\n    }, {\n      key: \"cancel\",\n      value: function cancel() {\n        this._revertInputValueToValue();\n        // In the next _detectAndDispatchChange() call, the change detection should not pass\n        this._lastCommittedValue = this.value;\n        this._closeOrCommit();\n      }\n\n      /** @private */\n    }, {\n      key: \"_onOpened\",\n      value: function _onOpened() {\n        // _detectAndDispatchChange() should not consider value changes done before opening\n        this._lastCommittedValue = this.value;\n      }\n\n      /** @private */\n    }, {\n      key: \"_onClosed\",\n      value: function _onClosed() {\n        if (!this.loading || this.allowCustomValue) {\n          this._commitValue();\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_commitValue\",\n      value: function _commitValue() {\n        if (this._focusedIndex > -1) {\n          var focusedItem = this._dropdownItems[this._focusedIndex];\n          if (this.selectedItem !== focusedItem) {\n            this.selectedItem = focusedItem;\n          }\n          // Make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\n          this._inputElementValue = this._getItemLabel(this.selectedItem);\n          this._focusedIndex = -1;\n        } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\n          this.selectedItem = null;\n          if (this.allowCustomValue) {\n            this.value = '';\n          }\n        } else {\n          // Try to find an item which label matches the input value.\n          var items = [this.selectedItem].concat(_toConsumableArray(this._dropdownItems || []));\n          var itemMatchingInputValue = items[this.__getItemIndexByLabel(items, this._inputElementValue)];\n          if (this.allowCustomValue &&\n          // To prevent a repetitive input value being saved after pressing ESC and Tab.\n          !itemMatchingInputValue) {\n            var customValue = this._inputElementValue;\n\n            // Store reference to the last custom value for checking it on focusout.\n            this._lastCustomValue = customValue;\n\n            // An item matching by label was not found, but custom values are allowed.\n            // Dispatch a custom-value-set event with the input value.\n            var e = new CustomEvent('custom-value-set', {\n              detail: customValue,\n              composed: true,\n              cancelable: true,\n              bubbles: true\n            });\n            this.dispatchEvent(e);\n            if (!e.defaultPrevented) {\n              this.value = customValue;\n            }\n          } else if (!this.allowCustomValue && !this.opened && itemMatchingInputValue) {\n            // An item matching by label was found, select it.\n            this.value = this._getItemValue(itemMatchingInputValue);\n          } else {\n            // Revert the input value\n            this._inputElementValue = this.selectedItem ? this._getItemLabel(this.selectedItem) : this.value || '';\n          }\n        }\n        this._detectAndDispatchChange();\n        this._clearSelectionRange();\n        this.filter = '';\n      }\n\n      /**\n       * Override an event listener from `InputMixin`.\n       * @param {!Event} event\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_onInput\",\n      value: function _onInput(event) {\n        var filter = this._inputElementValue;\n\n        // When opening dropdown on user input, both `opened` and `filter` properties are set.\n        // Perform a batched property update instead of relying on sync property observers.\n        // This is necessary to avoid an extra data-provider request for loading first page.\n        var props = {};\n        if (this.filter === filter) {\n          // Filter and input value might get out of sync, while keyboard navigating for example.\n          // Afterwards, input value might be changed to the same value as used in filtering.\n          // In situation like these, we need to make sure all the filter changes handlers are run.\n          this._filterChanged(this.filter);\n        } else {\n          props.filter = filter;\n        }\n        if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\n          props.opened = true;\n        }\n        this.setProperties(props);\n      }\n\n      /**\n       * Override an event listener from `InputMixin`.\n       * @param {!Event} event\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_onChange\",\n      value: function _onChange(event) {\n        // Suppress the native change event fired on the native input.\n        // We use `_detectAndDispatchChange` to fire a custom event.\n        event.stopPropagation();\n      }\n\n      /** @private */\n    }, {\n      key: \"_itemLabelPathChanged\",\n      value: function _itemLabelPathChanged(itemLabelPath) {\n        if (typeof itemLabelPath !== 'string') {\n          console.error('You should set itemLabelPath to a valid string');\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_filterChanged\",\n      value: function _filterChanged(filter) {\n        // Scroll to the top of the list whenever the filter changes.\n        this._scrollIntoView(0);\n        this._focusedIndex = -1;\n        if (this.items) {\n          this.filteredItems = this._filterItems(this.items, filter);\n        } else {\n          // With certain use cases (e. g., external filtering), `items` are\n          // undefined. Filtering is unnecessary per se, but the filteredItems\n          // observer should still be invoked to update focused item.\n          this._filteredItemsChanged(this.filteredItems);\n        }\n      }\n\n      /** @protected */\n    }, {\n      key: \"_revertInputValue\",\n      value: function _revertInputValue() {\n        if (this.filter !== '') {\n          this._inputElementValue = this.filter;\n        } else {\n          this._revertInputValueToValue();\n        }\n        this._clearSelectionRange();\n      }\n\n      /** @private */\n    }, {\n      key: \"_revertInputValueToValue\",\n      value: function _revertInputValueToValue() {\n        if (this.allowCustomValue && !this.selectedItem) {\n          this._inputElementValue = this.value;\n        } else {\n          this._inputElementValue = this._getItemLabel(this.selectedItem);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_selectedItemChanged\",\n      value: function _selectedItemChanged(selectedItem) {\n        if (selectedItem === null || selectedItem === undefined) {\n          if (this.filteredItems) {\n            if (!this.allowCustomValue) {\n              this.value = '';\n            }\n            this._toggleHasValue(this._hasValue);\n            this._inputElementValue = this.value;\n          }\n        } else {\n          var value = this._getItemValue(selectedItem);\n          if (this.value !== value) {\n            this.value = value;\n            if (this.value !== value) {\n              // The value was changed to something else in value-changed listener,\n              // so prevent from resetting it to the previous value.\n              return;\n            }\n          }\n          this._toggleHasValue(true);\n          this._inputElementValue = this._getItemLabel(selectedItem);\n        }\n      }\n\n      /**\n       * Override an observer from `InputMixin`.\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_valueChanged\",\n      value: function _valueChanged(value, oldVal) {\n        if (value === '' && oldVal === undefined) {\n          // Initializing, no need to do anything\n          // See https://github.com/vaadin/vaadin-combo-box/issues/554\n          return;\n        }\n        if (isValidValue(value)) {\n          if (this._getItemValue(this.selectedItem) !== value) {\n            this._selectItemForValue(value);\n          }\n          if (!this.selectedItem && this.allowCustomValue) {\n            this._inputElementValue = value;\n          }\n          this._toggleHasValue(this._hasValue);\n        } else {\n          this.selectedItem = null;\n        }\n        this.filter = '';\n\n        // In the next _detectAndDispatchChange() call, the change detection should pass\n        this._lastCommittedValue = undefined;\n      }\n\n      /** @private */\n    }, {\n      key: \"_detectAndDispatchChange\",\n      value: function _detectAndDispatchChange() {\n        // Do not validate when focusout is caused by document\n        // losing focus, which happens on browser tab switch.\n        if (document.hasFocus()) {\n          this.validate();\n        }\n        if (this.value !== this._lastCommittedValue) {\n          this.dispatchEvent(new CustomEvent('change', {\n            bubbles: true\n          }));\n          this._lastCommittedValue = this.value;\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_itemsChanged\",\n      value: function _itemsChanged(items, oldItems) {\n        var _this5 = this;\n        this._ensureItemsOrDataProvider(function () {\n          _this5.items = oldItems;\n        });\n        if (items) {\n          this.filteredItems = items.slice(0);\n        } else if (oldItems) {\n          // Only clear filteredItems if the component had items previously but got cleared\n          this.filteredItems = null;\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_filteredItemsChanged\",\n      value: function _filteredItemsChanged(filteredItems, oldFilteredItems) {\n        this._setDropdownItems(filteredItems);\n\n        // Store the currently focused item if any. The focused index preserves\n        // in the case when more filtered items are loading but it is reset\n        // when the user types in a filter query.\n        var focusedItem = oldFilteredItems ? oldFilteredItems[this._focusedIndex] : null;\n\n        // Try to sync `selectedItem` based on `value` once a new set of `filteredItems` is available\n        // (as a result of external filtering or when they have been loaded by the data provider).\n        // When `value` is specified but `selectedItem` is not, it means that there was no item\n        // matching `value` at the moment `value` was set, so `selectedItem` has remained unsynced.\n        var valueIndex = this.__getItemIndexByValue(filteredItems, this.value);\n        if ((this.selectedItem === null || this.selectedItem === undefined) && valueIndex >= 0) {\n          this.selectedItem = filteredItems[valueIndex];\n        }\n\n        // Try to first set focus on the item that had been focused before `filteredItems` were updated\n        // if it is still present in the `filteredItems` array. Otherwise, set the focused index\n        // depending on the selected item or the filter query.\n        var focusedItemIndex = this.__getItemIndexByValue(filteredItems, this._getItemValue(focusedItem));\n        if (focusedItemIndex > -1) {\n          this._focusedIndex = focusedItemIndex;\n        } else {\n          // When the user filled in something that is different from the current value = filtering is enabled,\n          // set the focused index to the item that matches the filter query.\n          this._focusedIndex = this.__getItemIndexByLabel(this.filteredItems, this.filter);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"_filterItems\",\n      value: function _filterItems(arr, filter) {\n        var _this6 = this;\n        if (!arr) {\n          return arr;\n        }\n        var filteredItems = arr.filter(function (item) {\n          filter = filter ? filter.toString().toLowerCase() : '';\n          // Check if item contains input value.\n          return _this6._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\n        });\n        return filteredItems;\n      }\n\n      /** @private */\n    }, {\n      key: \"_selectItemForValue\",\n      value: function _selectItemForValue(value) {\n        var valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\n        var previouslySelectedItem = this.selectedItem;\n        if (valueIndex >= 0) {\n          this.selectedItem = this.filteredItems[valueIndex];\n        } else if (this.dataProvider && this.selectedItem === undefined) {\n          this.selectedItem = undefined;\n        } else {\n          this.selectedItem = null;\n        }\n        if (this.selectedItem === null && previouslySelectedItem === null) {\n          this._selectedItemChanged(this.selectedItem);\n        }\n      }\n\n      /**\n       * Provide items to be rendered in the dropdown.\n       * Override this method to show custom items.\n       *\n       * @protected\n       */\n    }, {\n      key: \"_setDropdownItems\",\n      value: function _setDropdownItems(items) {\n        this._dropdownItems = items;\n      }\n\n      /** @private */\n    }, {\n      key: \"_getItemElements\",\n      value: function _getItemElements() {\n        return Array.from(this._scroller.querySelectorAll(\"\".concat(this._tagNamePrefix, \"-item\")));\n      }\n\n      /** @private */\n    }, {\n      key: \"_scrollIntoView\",\n      value: function _scrollIntoView(index) {\n        if (!this._scroller) {\n          return;\n        }\n        this._scroller.scrollIntoView(index);\n      }\n\n      /**\n       * Returns the first item that matches the provided value.\n       *\n       * @private\n       */\n    }, {\n      key: \"__getItemIndexByValue\",\n      value: function __getItemIndexByValue(items, value) {\n        var _this7 = this;\n        if (!items || !isValidValue(value)) {\n          return -1;\n        }\n        return findItemIndex(items, function (item) {\n          return _this7._getItemValue(item) === value;\n        });\n      }\n\n      /**\n       * Returns the first item that matches the provided label.\n       * Labels are matched against each other case insensitively.\n       *\n       * @private\n       */\n    }, {\n      key: \"__getItemIndexByLabel\",\n      value: function __getItemIndexByLabel(items, label) {\n        var _this8 = this;\n        if (!items || !label) {\n          return -1;\n        }\n        return findItemIndex(items, function (item) {\n          return _this8._getItemLabel(item).toString().toLowerCase() === label.toString().toLowerCase();\n        });\n      }\n\n      /** @private */\n    }, {\n      key: \"_overlaySelectedItemChanged\",\n      value: function _overlaySelectedItemChanged(e) {\n        // Stop this private event from leaking outside.\n        e.stopPropagation();\n        if (e.detail.item instanceof ComboBoxPlaceholder) {\n          // Placeholder items should not be selectable.\n          return;\n        }\n        if (this.opened) {\n          this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\n          this.close();\n        }\n      }\n\n      /**\n       * Override method inherited from `FocusMixin`\n       * to close the overlay on blur and commit the value.\n       *\n       * @param {boolean} focused\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_setFocused\",\n      value: function _setFocused(focused) {\n        _get(_getPrototypeOf(ComboBoxMixinClass.prototype), \"_setFocused\", this).call(this, focused);\n        if (!focused && !this.readonly && !this._closeOnBlurIsPrevented) {\n          // User's logic in `custom-value-set` event listener might cause input to blur,\n          // which will result in attempting to commit the same custom value once again.\n          if (!this.opened && this.allowCustomValue && this._inputElementValue === this._lastCustomValue) {\n            delete this._lastCustomValue;\n            return;\n          }\n          this._closeOrCommit();\n        }\n      }\n\n      /**\n       * Override method inherited from `FocusMixin` to not remove focused\n       * state when focus moves to the overlay.\n       *\n       * @param {FocusEvent} event\n       * @return {boolean}\n       * @protected\n       * @override\n       */\n    }, {\n      key: \"_shouldRemoveFocus\",\n      value: function _shouldRemoveFocus(event) {\n        // VoiceOver on iOS fires `focusout` event when moving focus to the item in the dropdown.\n        // Do not focus the input in this case, because it would break announcement for the item.\n        if (event.relatedTarget && event.relatedTarget.localName === \"\".concat(this._tagNamePrefix, \"-item\")) {\n          return false;\n        }\n\n        // Do not blur when focus moves to the overlay\n        // Also, fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\n        if (event.relatedTarget === this._overlayElement) {\n          event.composedPath()[0].focus();\n          return false;\n        }\n        return true;\n      }\n\n      /** @private */\n    }, {\n      key: \"_onTouchend\",\n      value: function _onTouchend(event) {\n        if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\n          return;\n        }\n        event.preventDefault();\n        this._onClearAction();\n      }\n\n      /**\n       * Fired when the value changes.\n       *\n       * @event value-changed\n       * @param {Object} detail\n       * @param {String} detail.value the combobox value\n       */\n\n      /**\n       * Fired when selected item changes.\n       *\n       * @event selected-item-changed\n       * @param {Object} detail\n       * @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\n       */\n\n      /**\n       * Fired when the user sets a custom value.\n       * @event custom-value-set\n       * @param {String} detail the custom value\n       */\n\n      /**\n       * Fired when value changes.\n       * To comply with https://developer.mozilla.org/en-US/docs/Web/Events/change\n       * @event change\n       */\n\n      /**\n       * Fired after the `vaadin-combo-box-overlay` opens.\n       *\n       * @event vaadin-combo-box-dropdown-opened\n       */\n\n      /**\n       * Fired after the `vaadin-combo-box-overlay` closes.\n       *\n       * @event vaadin-combo-box-dropdown-closed\n       */\n    }], [{\n      key: \"properties\",\n      get: function get() {\n        return {\n          /**\n           * True if the dropdown is open, false otherwise.\n           * @type {boolean}\n           */\n          opened: {\n            type: Boolean,\n            notify: true,\n            value: false,\n            reflectToAttribute: true,\n            observer: '_openedChanged'\n          },\n          /**\n           * Set true to prevent the overlay from opening automatically.\n           * @attr {boolean} auto-open-disabled\n           */\n          autoOpenDisabled: {\n            type: Boolean\n          },\n          /**\n           * When present, it specifies that the field is read-only.\n           * @type {boolean}\n           */\n          readonly: {\n            type: Boolean,\n            value: false,\n            reflectToAttribute: true\n          },\n          /**\n           * Custom function for rendering the content of every item.\n           * Receives three arguments:\n           *\n           * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\n           * - `comboBox` The reference to the `<vaadin-combo-box>` element.\n           * - `model` The object with the properties related with the rendered\n           *   item, contains:\n           *   - `model.index` The index of the rendered item.\n           *   - `model.item` The item.\n           * @type {ComboBoxRenderer | undefined}\n           */\n          renderer: Function,\n          /**\n           * A full set of items to filter the visible options from.\n           * The items can be of either `String` or `Object` type.\n           * @type {!Array<!ComboBoxItem | string> | undefined}\n           */\n          items: {\n            type: Array,\n            observer: '_itemsChanged'\n          },\n          /**\n           * If `true`, the user can input a value that is not present in the items list.\n           * `value` property will be set to the input value in this case.\n           * Also, when `value` is set programmatically, the input value will be set\n           * to reflect that value.\n           * @attr {boolean} allow-custom-value\n           * @type {boolean}\n           */\n          allowCustomValue: {\n            type: Boolean,\n            value: false\n          },\n          /**\n           * A subset of items, filtered based on the user input. Filtered items\n           * can be assigned directly to omit the internal filtering functionality.\n           * The items can be of either `String` or `Object` type.\n           * @type {!Array<!ComboBoxItem | string> | undefined}\n           */\n          filteredItems: {\n            type: Array,\n            observer: '_filteredItemsChanged'\n          },\n          /**\n           * Used to detect user value changes and fire `change` events.\n           * @private\n           */\n          _lastCommittedValue: String,\n          /**\n           * When set to `true`, \"loading\" attribute is added to host and the overlay element.\n           * @type {boolean}\n           */\n          loading: {\n            type: Boolean,\n            value: false,\n            reflectToAttribute: true\n          },\n          /**\n           * @type {number}\n           * @protected\n           */\n          _focusedIndex: {\n            type: Number,\n            observer: '_focusedIndexChanged',\n            value: -1\n          },\n          /**\n           * Filtering string the user has typed into the input field.\n           * @type {string}\n           */\n          filter: {\n            type: String,\n            value: '',\n            notify: true\n          },\n          /**\n           * The selected item from the `items` array.\n           * @type {ComboBoxItem | string | undefined}\n           */\n          selectedItem: {\n            type: Object,\n            notify: true\n          },\n          /**\n           * Path for label of the item. If `items` is an array of objects, the\n           * `itemLabelPath` is used to fetch the displayed string label for each\n           * item.\n           *\n           * The item label is also used for matching items when processing user\n           * input, i.e., for filtering and selecting items.\n           * @attr {string} item-label-path\n           * @type {string}\n           */\n          itemLabelPath: {\n            type: String,\n            value: 'label',\n            observer: '_itemLabelPathChanged'\n          },\n          /**\n           * Path for the value of the item. If `items` is an array of objects, the\n           * `itemValuePath:` is used to fetch the string value for the selected\n           * item.\n           *\n           * The item value is used in the `value` property of the combo box,\n           * to provide the form value.\n           * @attr {string} item-value-path\n           * @type {string}\n           */\n          itemValuePath: {\n            type: String,\n            value: 'value'\n          },\n          /**\n           * Path for the id of the item. If `items` is an array of objects,\n           * the `itemIdPath` is used to compare and identify the same item\n           * in `selectedItem` and `filteredItems` (items given by the\n           * `dataProvider` callback).\n           * @attr {string} item-id-path\n           */\n          itemIdPath: String,\n          /**\n           * @type {!HTMLElement | undefined}\n           * @protected\n           */\n          _toggleElement: {\n            type: Object,\n            observer: '_toggleElementChanged'\n          },\n          /**\n           * Set of items to be rendered in the dropdown.\n           * @protected\n           */\n          _dropdownItems: {\n            type: Array\n          },\n          /** @private */\n          _closeOnBlurIsPrevented: Boolean,\n          /** @private */\n          _scroller: Object,\n          /** @private */\n          _overlayOpened: {\n            type: Boolean,\n            observer: '_overlayOpenedChanged'\n          }\n        };\n      }\n    }, {\n      key: \"observers\",\n      get: function get() {\n        return ['_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)', '_openedOrItemsChanged(opened, _dropdownItems, loading)', '_updateScroller(_scroller, _dropdownItems, opened, loading, selectedItem, itemIdPath, _focusedIndex, renderer, theme)'];\n      }\n    }]);\n    return ComboBoxMixinClass;\n  }(OverlayClassMixin(ControllerMixin(ValidateMixin(FocusMixin(KeyboardMixin(InputMixin(DisabledMixin(subclass))))))));\n};","map":{"version":3,"names":["DisabledMixin","FocusMixin","isElementFocused","KeyboardMixin","isTouch","ControllerMixin","OverlayClassMixin","get","processTemplates","InputMixin","ValidateMixin","VirtualKeyboardController","ComboBoxPlaceholder","isValidValue","value","undefined","findItemIndex","items","callback","findIndex","item","ComboBoxMixin","subclass","_OverlayClassMixin","_inherits","ComboBoxMixinClass","_this","_classCallCheck","_callSuper","_boundOverlaySelectedItemChanged","_overlaySelectedItemChanged","bind","_assertThisInitialized","_boundOnClearButtonMouseDown","__onClearButtonMouseDown","_boundOnClick","_onClick","_boundOnOverlayTouchAction","_onOverlayTouchAction","_boundOnTouchend","_onTouchend","_createClass","key","inputElement","_inputElementChanged","_get","_getPrototypeOf","prototype","call","input","_nativeInput","autocomplete","autocapitalize","setAttribute","opened","_revertInputValueToValue","clearElement","addEventListener","ready","_this2","_initOverlay","_initScroller","_lastCommittedValue","bringToFrontListener","requestAnimationFrame","_overlayElement","bringToFront","addController","disconnectedCallback","close","requestContentUpdate","_scroller","_getItemElements","forEach","open","disabled","readonly","_propertiesChanged","currentProps","changedProps","oldProps","filter","_filterChanged","_this3","overlay","$","_comboBox","e","preventDefault","_overlayOpened","detail","host","scrollerTag","concat","_tagNamePrefix","renderer","root","firstChild","appendChild","document","createElement","scroller","querySelector","owner","getItemLabel","_getItemLabel","_updateScroller","loading","selectedItem","itemIdPath","focusedIndex","theme","style","maxHeight","getComputedStyle","getPropertyValue","setProperties","_openedOrItemsChanged","length","_overlayOpenedChanged","wasOpened","dispatchEvent","CustomEvent","bubbles","composed","_onOpened","_dropdownItems","_focusedIndexChanged","index","oldIndex","_updateActiveDescendant","_isInputFocused","find","el","id","removeAttribute","_openedChanged","_openedWithFocusRing","hasAttribute","focus","restoreFocusOnClose","_onClosed","_closeOnBlurIsPrevented","blur","_isClearButton","event","composedPath","_onClearButtonClick","_onClearAction","_onToggleButtonClick","_onHostClick","autoOpenDisabled","includes","_toggleElement","_onKeyDown","_onArrowDown","_onArrowUp","label","itemLabelPath","toString","_getItemValue","itemValuePath","_focusedIndex","Math","min","_prefillFocusedItemLabel","max","focusedItem","_inputElementValue","_markAllSelectionRange","_setSelectionRange","start","end","setSelectionRange","_clearSelectionRange","pos","_closeOrCommit","_commitValue","_onEnter","_hasValidInputValue","stopPropagation","hasInvalidOption","allowCustomValue","_onEscape","cancel","clearButtonVisible","_revertInputValue","_toggleElementChanged","toggleElement","_this4","activeElement","_detectAndDispatchChange","_toConsumableArray","itemMatchingInputValue","__getItemIndexByLabel","customValue","_lastCustomValue","cancelable","defaultPrevented","_onInput","props","_onChange","_itemLabelPathChanged","console","error","_scrollIntoView","filteredItems","_filterItems","_filteredItemsChanged","_selectedItemChanged","_toggleHasValue","_hasValue","_valueChanged","oldVal","_selectItemForValue","hasFocus","validate","_itemsChanged","oldItems","_this5","_ensureItemsOrDataProvider","slice","oldFilteredItems","_setDropdownItems","valueIndex","__getItemIndexByValue","focusedItemIndex","arr","_this6","toLowerCase","indexOf","previouslySelectedItem","dataProvider","Array","from","querySelectorAll","scrollIntoView","_this7","_this8","_setFocused","focused","_shouldRemoveFocus","relatedTarget","localName","type","Boolean","notify","reflectToAttribute","observer","Function","String","Number","Object"],"sources":["/workspaces/frontend/node_modules/@vaadin/combo-box/src/vaadin-combo-box-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { VirtualKeyboardController } from '@vaadin/field-base/src/virtual-keyboard-controller.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * Checks if the value is supported as an item value in this control.\n *\n * @param {unknown} value\n * @return {boolean}\n */\nfunction isValidValue(value) {\n  return value !== undefined && value !== null;\n}\n\n/**\n * Returns the index of the first item that satisfies the provided testing function\n * ignoring placeholder items.\n *\n * @param {Array<ComboBoxItem | string>} items\n * @param {Function} callback\n * @return {number}\n */\nfunction findItemIndex(items, callback) {\n  return items.findIndex((item) => {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    }\n\n    return callback(item);\n  });\n}\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes ValidateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n * @mixes FocusMixin\n * @mixes OverlayClassMixin\n * @param {function(new:HTMLElement)} subclass\n */\nexport const ComboBoxMixin = (subclass) =>\n  class ComboBoxMixinClass extends OverlayClassMixin(\n    ControllerMixin(ValidateMixin(FocusMixin(KeyboardMixin(InputMixin(DisabledMixin(subclass)))))),\n  ) {\n    static get properties() {\n      return {\n        /**\n         * True if the dropdown is open, false otherwise.\n         * @type {boolean}\n         */\n        opened: {\n          type: Boolean,\n          notify: true,\n          value: false,\n          reflectToAttribute: true,\n          observer: '_openedChanged',\n        },\n\n        /**\n         * Set true to prevent the overlay from opening automatically.\n         * @attr {boolean} auto-open-disabled\n         */\n        autoOpenDisabled: {\n          type: Boolean,\n        },\n\n        /**\n         * When present, it specifies that the field is read-only.\n         * @type {boolean}\n         */\n        readonly: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * Custom function for rendering the content of every item.\n         * Receives three arguments:\n         *\n         * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\n         * - `comboBox` The reference to the `<vaadin-combo-box>` element.\n         * - `model` The object with the properties related with the rendered\n         *   item, contains:\n         *   - `model.index` The index of the rendered item.\n         *   - `model.item` The item.\n         * @type {ComboBoxRenderer | undefined}\n         */\n        renderer: Function,\n\n        /**\n         * A full set of items to filter the visible options from.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        items: {\n          type: Array,\n          observer: '_itemsChanged',\n        },\n\n        /**\n         * If `true`, the user can input a value that is not present in the items list.\n         * `value` property will be set to the input value in this case.\n         * Also, when `value` is set programmatically, the input value will be set\n         * to reflect that value.\n         * @attr {boolean} allow-custom-value\n         * @type {boolean}\n         */\n        allowCustomValue: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * A subset of items, filtered based on the user input. Filtered items\n         * can be assigned directly to omit the internal filtering functionality.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        filteredItems: {\n          type: Array,\n          observer: '_filteredItemsChanged',\n        },\n\n        /**\n         * Used to detect user value changes and fire `change` events.\n         * @private\n         */\n        _lastCommittedValue: String,\n\n        /**\n         * When set to `true`, \"loading\" attribute is added to host and the overlay element.\n         * @type {boolean}\n         */\n        loading: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _focusedIndex: {\n          type: Number,\n          observer: '_focusedIndexChanged',\n          value: -1,\n        },\n\n        /**\n         * Filtering string the user has typed into the input field.\n         * @type {string}\n         */\n        filter: {\n          type: String,\n          value: '',\n          notify: true,\n        },\n\n        /**\n         * The selected item from the `items` array.\n         * @type {ComboBoxItem | string | undefined}\n         */\n        selectedItem: {\n          type: Object,\n          notify: true,\n        },\n\n        /**\n         * Path for label of the item. If `items` is an array of objects, the\n         * `itemLabelPath` is used to fetch the displayed string label for each\n         * item.\n         *\n         * The item label is also used for matching items when processing user\n         * input, i.e., for filtering and selecting items.\n         * @attr {string} item-label-path\n         * @type {string}\n         */\n        itemLabelPath: {\n          type: String,\n          value: 'label',\n          observer: '_itemLabelPathChanged',\n        },\n\n        /**\n         * Path for the value of the item. If `items` is an array of objects, the\n         * `itemValuePath:` is used to fetch the string value for the selected\n         * item.\n         *\n         * The item value is used in the `value` property of the combo box,\n         * to provide the form value.\n         * @attr {string} item-value-path\n         * @type {string}\n         */\n        itemValuePath: {\n          type: String,\n          value: 'value',\n        },\n\n        /**\n         * Path for the id of the item. If `items` is an array of objects,\n         * the `itemIdPath` is used to compare and identify the same item\n         * in `selectedItem` and `filteredItems` (items given by the\n         * `dataProvider` callback).\n         * @attr {string} item-id-path\n         */\n        itemIdPath: String,\n\n        /**\n         * @type {!HTMLElement | undefined}\n         * @protected\n         */\n        _toggleElement: {\n          type: Object,\n          observer: '_toggleElementChanged',\n        },\n\n        /**\n         * Set of items to be rendered in the dropdown.\n         * @protected\n         */\n        _dropdownItems: {\n          type: Array,\n        },\n\n        /** @private */\n        _closeOnBlurIsPrevented: Boolean,\n\n        /** @private */\n        _scroller: Object,\n\n        /** @private */\n        _overlayOpened: {\n          type: Boolean,\n          observer: '_overlayOpenedChanged',\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)',\n        '_openedOrItemsChanged(opened, _dropdownItems, loading)',\n        '_updateScroller(_scroller, _dropdownItems, opened, loading, selectedItem, itemIdPath, _focusedIndex, renderer, theme)',\n      ];\n    }\n\n    constructor() {\n      super();\n      this._boundOverlaySelectedItemChanged = this._overlaySelectedItemChanged.bind(this);\n      this._boundOnClearButtonMouseDown = this.__onClearButtonMouseDown.bind(this);\n      this._boundOnClick = this._onClick.bind(this);\n      this._boundOnOverlayTouchAction = this._onOverlayTouchAction.bind(this);\n      this._boundOnTouchend = this._onTouchend.bind(this);\n    }\n\n    /**\n     * Tag name prefix used by scroller and items.\n     * @protected\n     * @return {string}\n     */\n    get _tagNamePrefix() {\n      return 'vaadin-combo-box';\n    }\n\n    /**\n     * Get a reference to the native `<input>` element.\n     * Override to provide a custom input.\n     * @protected\n     * @return {HTMLInputElement | undefined}\n     */\n    get _nativeInput() {\n      return this.inputElement;\n    }\n\n    /**\n     * Override method inherited from `InputMixin`\n     * to customize the input element.\n     * @protected\n     * @override\n     */\n    _inputElementChanged(inputElement) {\n      super._inputElementChanged(inputElement);\n\n      const input = this._nativeInput;\n\n      if (input) {\n        input.autocomplete = 'off';\n        input.autocapitalize = 'off';\n\n        input.setAttribute('role', 'combobox');\n        input.setAttribute('aria-autocomplete', 'list');\n        input.setAttribute('aria-expanded', !!this.opened);\n\n        // Disable the macOS Safari spell check auto corrections.\n        input.setAttribute('spellcheck', 'false');\n\n        // Disable iOS autocorrect suggestions.\n        input.setAttribute('autocorrect', 'off');\n\n        this._revertInputValueToValue();\n\n        if (this.clearElement) {\n          this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\n        }\n      }\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._initOverlay();\n      this._initScroller();\n\n      this._lastCommittedValue = this.value;\n\n      this.addEventListener('click', this._boundOnClick);\n      this.addEventListener('touchend', this._boundOnTouchend);\n\n      const bringToFrontListener = () => {\n        requestAnimationFrame(() => {\n          this._overlayElement.bringToFront();\n        });\n      };\n\n      this.addEventListener('mousedown', bringToFrontListener);\n      this.addEventListener('touchstart', bringToFrontListener);\n\n      processTemplates(this);\n\n      this.addController(new VirtualKeyboardController(this));\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // Close the overlay on detach\n      this.close();\n    }\n\n    /**\n     * Requests an update for the content of items.\n     * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n     *\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n     */\n    requestContentUpdate() {\n      if (!this._scroller) {\n        return;\n      }\n\n      this._scroller.requestContentUpdate();\n\n      this._getItemElements().forEach((item) => {\n        item.requestContentUpdate();\n      });\n    }\n\n    /**\n     * Opens the dropdown list.\n     */\n    open() {\n      // Prevent _open() being called when input is disabled or read-only\n      if (!this.disabled && !this.readonly) {\n        this.opened = true;\n      }\n    }\n\n    /**\n     * Closes the dropdown list.\n     */\n    close() {\n      this.opened = false;\n    }\n\n    /**\n     * Override Polymer lifecycle callback to handle `filter` property change after\n     * the observer for `opened` property is triggered. This is needed when opening\n     * combo-box on user input to ensure the focused index is set correctly.\n     *\n     * @param {!Object} currentProps Current accessor values\n     * @param {?Object} changedProps Properties changed since the last call\n     * @param {?Object} oldProps Previous values for each changed property\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      super._propertiesChanged(currentProps, changedProps, oldProps);\n\n      if (changedProps.filter !== undefined) {\n        this._filterChanged(changedProps.filter);\n      }\n    }\n\n    /** @private */\n    _initOverlay() {\n      const overlay = this.$.overlay;\n\n      // Store instance for detecting \"dir\" attribute on opening\n      overlay._comboBox = this;\n\n      overlay.addEventListener('touchend', this._boundOnOverlayTouchAction);\n      overlay.addEventListener('touchmove', this._boundOnOverlayTouchAction);\n\n      // Prevent blurring the input when clicking inside the overlay\n      overlay.addEventListener('mousedown', (e) => e.preventDefault());\n\n      // Manual two-way binding for the overlay \"opened\" property\n      overlay.addEventListener('opened-changed', (e) => {\n        this._overlayOpened = e.detail.value;\n      });\n\n      this._overlayElement = overlay;\n    }\n\n    /**\n     * Create and initialize the scroller element.\n     * Override to provide custom host reference.\n     *\n     * @protected\n     */\n    _initScroller(host) {\n      const scrollerTag = `${this._tagNamePrefix}-scroller`;\n\n      const overlay = this._overlayElement;\n\n      overlay.renderer = (root) => {\n        if (!root.firstChild) {\n          root.appendChild(document.createElement(scrollerTag));\n        }\n      };\n\n      // Ensure the scroller is rendered\n      overlay.requestContentUpdate();\n\n      const scroller = overlay.querySelector(scrollerTag);\n\n      scroller.owner = host || this;\n      scroller.getItemLabel = this._getItemLabel.bind(this);\n      scroller.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\n\n      // Trigger the observer to set properties\n      this._scroller = scroller;\n    }\n\n    /** @private */\n    // eslint-disable-next-line max-params\n    _updateScroller(scroller, items, opened, loading, selectedItem, itemIdPath, focusedIndex, renderer, theme) {\n      if (scroller) {\n        if (opened) {\n          scroller.style.maxHeight =\n            getComputedStyle(this).getPropertyValue(`--${this._tagNamePrefix}-overlay-max-height`) || '65vh';\n        }\n\n        scroller.setProperties({\n          items: opened ? items : [],\n          opened,\n          loading,\n          selectedItem,\n          itemIdPath,\n          focusedIndex,\n          renderer,\n          theme,\n        });\n      }\n    }\n\n    /** @private */\n    _openedOrItemsChanged(opened, items, loading) {\n      // Close the overlay if there are no items to display.\n      // See https://github.com/vaadin/vaadin-combo-box/pull/964\n      this._overlayOpened = !!(opened && (loading || (items && items.length)));\n    }\n\n    /** @private */\n    _overlayOpenedChanged(opened, wasOpened) {\n      if (opened) {\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', { bubbles: true, composed: true }));\n\n        this._onOpened();\n      } else if (wasOpened && this._dropdownItems && this._dropdownItems.length) {\n        this.close();\n\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', { bubbles: true, composed: true }));\n      }\n    }\n\n    /** @private */\n    _focusedIndexChanged(index, oldIndex) {\n      if (oldIndex === undefined) {\n        return;\n      }\n      this._updateActiveDescendant(index);\n    }\n\n    /** @protected */\n    _isInputFocused() {\n      return this.inputElement && isElementFocused(this.inputElement);\n    }\n\n    /** @private */\n    _updateActiveDescendant(index) {\n      const input = this._nativeInput;\n      if (!input) {\n        return;\n      }\n\n      const item = this._getItemElements().find((el) => el.index === index);\n      if (item) {\n        input.setAttribute('aria-activedescendant', item.id);\n      } else {\n        input.removeAttribute('aria-activedescendant');\n      }\n    }\n\n    /** @private */\n    _openedChanged(opened, wasOpened) {\n      // Prevent _close() being called when opened is set to its default value (false).\n      if (wasOpened === undefined) {\n        return;\n      }\n\n      if (opened) {\n        this._openedWithFocusRing = this.hasAttribute('focus-ring');\n        // For touch devices, we don't want to popup virtual keyboard\n        // unless input element is explicitly focused by the user.\n        if (!this._isInputFocused() && !isTouch) {\n          if (this.inputElement) {\n            this.inputElement.focus();\n          }\n        }\n\n        this._overlayElement.restoreFocusOnClose = true;\n      } else {\n        this._onClosed();\n        if (this._openedWithFocusRing && this._isInputFocused()) {\n          this.setAttribute('focus-ring', '');\n        }\n      }\n\n      const input = this._nativeInput;\n      if (input) {\n        input.setAttribute('aria-expanded', !!opened);\n\n        if (opened) {\n          input.setAttribute('aria-controls', this._scroller.id);\n        } else {\n          input.removeAttribute('aria-controls');\n        }\n      }\n    }\n\n    /** @private */\n    _onOverlayTouchAction() {\n      // On touch devices, blur the input on touch start inside the overlay, in order to hide\n      // the virtual keyboard. But don't close the overlay on this blur.\n      this._closeOnBlurIsPrevented = true;\n      this.inputElement.blur();\n      this._closeOnBlurIsPrevented = false;\n    }\n\n    /** @protected */\n    _isClearButton(event) {\n      return event.composedPath()[0] === this.clearElement;\n    }\n\n    /** @private */\n    __onClearButtonMouseDown(event) {\n      event.preventDefault(); // Prevent native focusout event\n      this.inputElement.focus();\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onClearButtonClick(event) {\n      event.preventDefault();\n      this._onClearAction();\n\n      // De-select dropdown item\n      if (this.opened) {\n        this.requestContentUpdate();\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @private\n     */\n    _onToggleButtonClick(event) {\n      // Prevent parent components such as `vaadin-grid`\n      // from handling the click event after it bubbles.\n      event.preventDefault();\n\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onHostClick(event) {\n      if (!this.autoOpenDisabled) {\n        event.preventDefault();\n        this.open();\n      }\n    }\n\n    /** @private */\n    _onClick(event) {\n      if (this._isClearButton(event)) {\n        this._onClearButtonClick(event);\n      } else if (event.composedPath().includes(this._toggleElement)) {\n        this._onToggleButtonClick(event);\n      } else {\n        this._onHostClick(event);\n      }\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     *\n     * @param {KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onKeyDown(e) {\n      super._onKeyDown(e);\n\n      if (e.key === 'Tab') {\n        this._overlayElement.restoreFocusOnClose = false;\n      } else if (e.key === 'ArrowDown') {\n        this._onArrowDown();\n\n        // Prevent caret from moving\n        e.preventDefault();\n      } else if (e.key === 'ArrowUp') {\n        this._onArrowUp();\n\n        // Prevent caret from moving\n        e.preventDefault();\n      }\n    }\n\n    /** @private */\n    _getItemLabel(item) {\n      let label = item && this.itemLabelPath ? get(this.itemLabelPath, item) : undefined;\n      if (label === undefined || label === null) {\n        label = item ? item.toString() : '';\n      }\n      return label;\n    }\n\n    /** @private */\n    _getItemValue(item) {\n      let value = item && this.itemValuePath ? get(this.itemValuePath, item) : undefined;\n      if (value === undefined) {\n        value = item ? item.toString() : '';\n      }\n      return value;\n    }\n\n    /** @private */\n    _onArrowDown() {\n      if (this.opened) {\n        const items = this._dropdownItems;\n        if (items) {\n          this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\n          this._prefillFocusedItemLabel();\n        }\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _onArrowUp() {\n      if (this.opened) {\n        if (this._focusedIndex > -1) {\n          this._focusedIndex = Math.max(0, this._focusedIndex - 1);\n        } else {\n          const items = this._dropdownItems;\n          if (items) {\n            this._focusedIndex = items.length - 1;\n          }\n        }\n\n        this._prefillFocusedItemLabel();\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _prefillFocusedItemLabel() {\n      if (this._focusedIndex > -1) {\n        const focusedItem = this._dropdownItems[this._focusedIndex];\n        this._inputElementValue = this._getItemLabel(focusedItem);\n        this._markAllSelectionRange();\n      }\n    }\n\n    /** @private */\n    _setSelectionRange(start, end) {\n      // Setting selection range focuses and/or moves the caret in some browsers,\n      // and there's no need to modify the selection range if the input isn't focused anyway.\n      // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\n      // the next focusable element instead of the combo-box itself.\n      if (this._isInputFocused() && this.inputElement.setSelectionRange) {\n        this.inputElement.setSelectionRange(start, end);\n      }\n    }\n\n    /** @private */\n    _markAllSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        this._setSelectionRange(0, this._inputElementValue.length);\n      }\n    }\n\n    /** @private */\n    _clearSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        const pos = this._inputElementValue ? this._inputElementValue.length : 0;\n        this._setSelectionRange(pos, pos);\n      }\n    }\n\n    /** @private */\n    _closeOrCommit() {\n      if (!this.opened && !this.loading) {\n        this._commitValue();\n      } else {\n        this.close();\n      }\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     *\n     * @param {KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onEnter(e) {\n      // Do not commit value when custom values are disallowed and input value is not a valid option\n      // also stop propagation of the event, otherwise the user could submit a form while the input\n      // still contains an invalid value\n      if (!this._hasValidInputValue()) {\n        // Do not submit the surrounding form.\n        e.preventDefault();\n        // Do not trigger global listeners\n        e.stopPropagation();\n        return;\n      }\n\n      // Stop propagation of the enter event only if the dropdown is opened, this\n      // \"consumes\" the enter event for the action of closing the dropdown\n      if (this.opened) {\n        // Do not submit the surrounding form.\n        e.preventDefault();\n        // Do not trigger global listeners\n        e.stopPropagation();\n      }\n\n      this._closeOrCommit();\n    }\n\n    /**\n     * @protected\n     */\n    _hasValidInputValue() {\n      const hasInvalidOption =\n        this._focusedIndex < 0 &&\n        this._inputElementValue !== '' &&\n        this._getItemLabel(this.selectedItem) !== this._inputElementValue;\n\n      return this.allowCustomValue || !hasInvalidOption;\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     * Do not call `super` in order to override clear\n     * button logic defined in `InputControlMixin`.\n     *\n     * @param {!KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onEscape(e) {\n      if (this.autoOpenDisabled) {\n        // Auto-open is disabled\n        if (this.opened || (this.value !== this._inputElementValue && this._inputElementValue.length > 0)) {\n          // The overlay is open or\n          // The input value has changed but the change hasn't been committed, so cancel it.\n          e.stopPropagation();\n          this._focusedIndex = -1;\n          this.cancel();\n        } else if (this.clearButtonVisible && !this.opened && !!this.value) {\n          e.stopPropagation();\n          // The clear button is visible and the overlay is closed, so clear the value.\n          this._onClearAction();\n        }\n      } else if (this.opened) {\n        // Auto-open is enabled\n        // The overlay is open\n        e.stopPropagation();\n\n        if (this._focusedIndex > -1) {\n          // An item is focused, revert the input to the filtered value\n          this._focusedIndex = -1;\n          this._revertInputValue();\n        } else {\n          // No item is focused, cancel the change and close the overlay\n          this.cancel();\n        }\n      } else if (this.clearButtonVisible && !!this.value) {\n        e.stopPropagation();\n        // The clear button is visible and the overlay is closed, so clear the value.\n        this._onClearAction();\n      }\n    }\n\n    /** @private */\n    _toggleElementChanged(toggleElement) {\n      if (toggleElement) {\n        // Don't blur the input on toggle mousedown\n        toggleElement.addEventListener('mousedown', (e) => e.preventDefault());\n        // Unfocus previously focused element if focus is not inside combo box (on touch devices)\n        toggleElement.addEventListener('click', () => {\n          if (isTouch && !this._isInputFocused()) {\n            document.activeElement.blur();\n          }\n        });\n      }\n    }\n\n    /**\n     * Clears the current value.\n     * @protected\n     */\n    _onClearAction() {\n      this.selectedItem = null;\n\n      if (this.allowCustomValue) {\n        this.value = '';\n      }\n\n      this._detectAndDispatchChange();\n    }\n\n    /**\n     * Reverts back to original value.\n     */\n    cancel() {\n      this._revertInputValueToValue();\n      // In the next _detectAndDispatchChange() call, the change detection should not pass\n      this._lastCommittedValue = this.value;\n      this._closeOrCommit();\n    }\n\n    /** @private */\n    _onOpened() {\n      // _detectAndDispatchChange() should not consider value changes done before opening\n      this._lastCommittedValue = this.value;\n    }\n\n    /** @private */\n    _onClosed() {\n      if (!this.loading || this.allowCustomValue) {\n        this._commitValue();\n      }\n    }\n\n    /** @private */\n    _commitValue() {\n      if (this._focusedIndex > -1) {\n        const focusedItem = this._dropdownItems[this._focusedIndex];\n        if (this.selectedItem !== focusedItem) {\n          this.selectedItem = focusedItem;\n        }\n        // Make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n        this._focusedIndex = -1;\n      } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\n        this.selectedItem = null;\n\n        if (this.allowCustomValue) {\n          this.value = '';\n        }\n      } else {\n        // Try to find an item which label matches the input value.\n        const items = [this.selectedItem, ...(this._dropdownItems || [])];\n        const itemMatchingInputValue = items[this.__getItemIndexByLabel(items, this._inputElementValue)];\n\n        if (\n          this.allowCustomValue &&\n          // To prevent a repetitive input value being saved after pressing ESC and Tab.\n          !itemMatchingInputValue\n        ) {\n          const customValue = this._inputElementValue;\n\n          // Store reference to the last custom value for checking it on focusout.\n          this._lastCustomValue = customValue;\n\n          // An item matching by label was not found, but custom values are allowed.\n          // Dispatch a custom-value-set event with the input value.\n          const e = new CustomEvent('custom-value-set', {\n            detail: customValue,\n            composed: true,\n            cancelable: true,\n            bubbles: true,\n          });\n          this.dispatchEvent(e);\n          if (!e.defaultPrevented) {\n            this.value = customValue;\n          }\n        } else if (!this.allowCustomValue && !this.opened && itemMatchingInputValue) {\n          // An item matching by label was found, select it.\n          this.value = this._getItemValue(itemMatchingInputValue);\n        } else {\n          // Revert the input value\n          this._inputElementValue = this.selectedItem ? this._getItemLabel(this.selectedItem) : this.value || '';\n        }\n      }\n\n      this._detectAndDispatchChange();\n\n      this._clearSelectionRange();\n\n      this.filter = '';\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      const filter = this._inputElementValue;\n\n      // When opening dropdown on user input, both `opened` and `filter` properties are set.\n      // Perform a batched property update instead of relying on sync property observers.\n      // This is necessary to avoid an extra data-provider request for loading first page.\n      const props = {};\n\n      if (this.filter === filter) {\n        // Filter and input value might get out of sync, while keyboard navigating for example.\n        // Afterwards, input value might be changed to the same value as used in filtering.\n        // In situation like these, we need to make sure all the filter changes handlers are run.\n        this._filterChanged(this.filter);\n      } else {\n        props.filter = filter;\n      }\n\n      if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\n        props.opened = true;\n      }\n\n      this.setProperties(props);\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onChange(event) {\n      // Suppress the native change event fired on the native input.\n      // We use `_detectAndDispatchChange` to fire a custom event.\n      event.stopPropagation();\n    }\n\n    /** @private */\n    _itemLabelPathChanged(itemLabelPath) {\n      if (typeof itemLabelPath !== 'string') {\n        console.error('You should set itemLabelPath to a valid string');\n      }\n    }\n\n    /** @private */\n    _filterChanged(filter) {\n      // Scroll to the top of the list whenever the filter changes.\n      this._scrollIntoView(0);\n\n      this._focusedIndex = -1;\n\n      if (this.items) {\n        this.filteredItems = this._filterItems(this.items, filter);\n      } else {\n        // With certain use cases (e. g., external filtering), `items` are\n        // undefined. Filtering is unnecessary per se, but the filteredItems\n        // observer should still be invoked to update focused item.\n        this._filteredItemsChanged(this.filteredItems);\n      }\n    }\n\n    /** @protected */\n    _revertInputValue() {\n      if (this.filter !== '') {\n        this._inputElementValue = this.filter;\n      } else {\n        this._revertInputValueToValue();\n      }\n      this._clearSelectionRange();\n    }\n\n    /** @private */\n    _revertInputValueToValue() {\n      if (this.allowCustomValue && !this.selectedItem) {\n        this._inputElementValue = this.value;\n      } else {\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n      }\n    }\n\n    /** @private */\n    _selectedItemChanged(selectedItem) {\n      if (selectedItem === null || selectedItem === undefined) {\n        if (this.filteredItems) {\n          if (!this.allowCustomValue) {\n            this.value = '';\n          }\n\n          this._toggleHasValue(this._hasValue);\n          this._inputElementValue = this.value;\n        }\n      } else {\n        const value = this._getItemValue(selectedItem);\n        if (this.value !== value) {\n          this.value = value;\n          if (this.value !== value) {\n            // The value was changed to something else in value-changed listener,\n            // so prevent from resetting it to the previous value.\n            return;\n          }\n        }\n\n        this._toggleHasValue(true);\n        this._inputElementValue = this._getItemLabel(selectedItem);\n      }\n    }\n\n    /**\n     * Override an observer from `InputMixin`.\n     * @protected\n     * @override\n     */\n    _valueChanged(value, oldVal) {\n      if (value === '' && oldVal === undefined) {\n        // Initializing, no need to do anything\n        // See https://github.com/vaadin/vaadin-combo-box/issues/554\n        return;\n      }\n\n      if (isValidValue(value)) {\n        if (this._getItemValue(this.selectedItem) !== value) {\n          this._selectItemForValue(value);\n        }\n\n        if (!this.selectedItem && this.allowCustomValue) {\n          this._inputElementValue = value;\n        }\n\n        this._toggleHasValue(this._hasValue);\n      } else {\n        this.selectedItem = null;\n      }\n\n      this.filter = '';\n\n      // In the next _detectAndDispatchChange() call, the change detection should pass\n      this._lastCommittedValue = undefined;\n    }\n\n    /** @private */\n    _detectAndDispatchChange() {\n      // Do not validate when focusout is caused by document\n      // losing focus, which happens on browser tab switch.\n      if (document.hasFocus()) {\n        this.validate();\n      }\n\n      if (this.value !== this._lastCommittedValue) {\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n        this._lastCommittedValue = this.value;\n      }\n    }\n\n    /** @private */\n    _itemsChanged(items, oldItems) {\n      this._ensureItemsOrDataProvider(() => {\n        this.items = oldItems;\n      });\n\n      if (items) {\n        this.filteredItems = items.slice(0);\n      } else if (oldItems) {\n        // Only clear filteredItems if the component had items previously but got cleared\n        this.filteredItems = null;\n      }\n    }\n\n    /** @private */\n    _filteredItemsChanged(filteredItems, oldFilteredItems) {\n      this._setDropdownItems(filteredItems);\n\n      // Store the currently focused item if any. The focused index preserves\n      // in the case when more filtered items are loading but it is reset\n      // when the user types in a filter query.\n      const focusedItem = oldFilteredItems ? oldFilteredItems[this._focusedIndex] : null;\n\n      // Try to sync `selectedItem` based on `value` once a new set of `filteredItems` is available\n      // (as a result of external filtering or when they have been loaded by the data provider).\n      // When `value` is specified but `selectedItem` is not, it means that there was no item\n      // matching `value` at the moment `value` was set, so `selectedItem` has remained unsynced.\n      const valueIndex = this.__getItemIndexByValue(filteredItems, this.value);\n      if ((this.selectedItem === null || this.selectedItem === undefined) && valueIndex >= 0) {\n        this.selectedItem = filteredItems[valueIndex];\n      }\n\n      // Try to first set focus on the item that had been focused before `filteredItems` were updated\n      // if it is still present in the `filteredItems` array. Otherwise, set the focused index\n      // depending on the selected item or the filter query.\n      const focusedItemIndex = this.__getItemIndexByValue(filteredItems, this._getItemValue(focusedItem));\n      if (focusedItemIndex > -1) {\n        this._focusedIndex = focusedItemIndex;\n      } else {\n        // When the user filled in something that is different from the current value = filtering is enabled,\n        // set the focused index to the item that matches the filter query.\n        this._focusedIndex = this.__getItemIndexByLabel(this.filteredItems, this.filter);\n      }\n    }\n\n    /** @private */\n    _filterItems(arr, filter) {\n      if (!arr) {\n        return arr;\n      }\n\n      const filteredItems = arr.filter((item) => {\n        filter = filter ? filter.toString().toLowerCase() : '';\n        // Check if item contains input value.\n        return this._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\n      });\n\n      return filteredItems;\n    }\n\n    /** @private */\n    _selectItemForValue(value) {\n      const valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\n      const previouslySelectedItem = this.selectedItem;\n\n      if (valueIndex >= 0) {\n        this.selectedItem = this.filteredItems[valueIndex];\n      } else if (this.dataProvider && this.selectedItem === undefined) {\n        this.selectedItem = undefined;\n      } else {\n        this.selectedItem = null;\n      }\n\n      if (this.selectedItem === null && previouslySelectedItem === null) {\n        this._selectedItemChanged(this.selectedItem);\n      }\n    }\n\n    /**\n     * Provide items to be rendered in the dropdown.\n     * Override this method to show custom items.\n     *\n     * @protected\n     */\n    _setDropdownItems(items) {\n      this._dropdownItems = items;\n    }\n\n    /** @private */\n    _getItemElements() {\n      return Array.from(this._scroller.querySelectorAll(`${this._tagNamePrefix}-item`));\n    }\n\n    /** @private */\n    _scrollIntoView(index) {\n      if (!this._scroller) {\n        return;\n      }\n      this._scroller.scrollIntoView(index);\n    }\n\n    /**\n     * Returns the first item that matches the provided value.\n     *\n     * @private\n     */\n    __getItemIndexByValue(items, value) {\n      if (!items || !isValidValue(value)) {\n        return -1;\n      }\n\n      return findItemIndex(items, (item) => {\n        return this._getItemValue(item) === value;\n      });\n    }\n\n    /**\n     * Returns the first item that matches the provided label.\n     * Labels are matched against each other case insensitively.\n     *\n     * @private\n     */\n    __getItemIndexByLabel(items, label) {\n      if (!items || !label) {\n        return -1;\n      }\n\n      return findItemIndex(items, (item) => {\n        return this._getItemLabel(item).toString().toLowerCase() === label.toString().toLowerCase();\n      });\n    }\n\n    /** @private */\n    _overlaySelectedItemChanged(e) {\n      // Stop this private event from leaking outside.\n      e.stopPropagation();\n\n      if (e.detail.item instanceof ComboBoxPlaceholder) {\n        // Placeholder items should not be selectable.\n        return;\n      }\n\n      if (this.opened) {\n        this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\n        this.close();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin`\n     * to close the overlay on blur and commit the value.\n     *\n     * @param {boolean} focused\n     * @protected\n     * @override\n     */\n    _setFocused(focused) {\n      super._setFocused(focused);\n\n      if (!focused && !this.readonly && !this._closeOnBlurIsPrevented) {\n        // User's logic in `custom-value-set` event listener might cause input to blur,\n        // which will result in attempting to commit the same custom value once again.\n        if (!this.opened && this.allowCustomValue && this._inputElementValue === this._lastCustomValue) {\n          delete this._lastCustomValue;\n          return;\n        }\n\n        this._closeOrCommit();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin` to not remove focused\n     * state when focus moves to the overlay.\n     *\n     * @param {FocusEvent} event\n     * @return {boolean}\n     * @protected\n     * @override\n     */\n    _shouldRemoveFocus(event) {\n      // VoiceOver on iOS fires `focusout` event when moving focus to the item in the dropdown.\n      // Do not focus the input in this case, because it would break announcement for the item.\n      if (event.relatedTarget && event.relatedTarget.localName === `${this._tagNamePrefix}-item`) {\n        return false;\n      }\n\n      // Do not blur when focus moves to the overlay\n      // Also, fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\n      if (event.relatedTarget === this._overlayElement) {\n        event.composedPath()[0].focus();\n        return false;\n      }\n\n      return true;\n    }\n\n    /** @private */\n    _onTouchend(event) {\n      if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\n        return;\n      }\n\n      event.preventDefault();\n      this._onClearAction();\n    }\n\n    /**\n     * Fired when the value changes.\n     *\n     * @event value-changed\n     * @param {Object} detail\n     * @param {String} detail.value the combobox value\n     */\n\n    /**\n     * Fired when selected item changes.\n     *\n     * @event selected-item-changed\n     * @param {Object} detail\n     * @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\n     */\n\n    /**\n     * Fired when the user sets a custom value.\n     * @event custom-value-set\n     * @param {String} detail the custom value\n     */\n\n    /**\n     * Fired when value changes.\n     * To comply with https://developer.mozilla.org/en-US/docs/Web/Events/change\n     * @event change\n     */\n\n    /**\n     * Fired after the `vaadin-combo-box-overlay` opens.\n     *\n     * @event vaadin-combo-box-dropdown-opened\n     */\n\n    /**\n     * Fired after the `vaadin-combo-box-overlay` closes.\n     *\n     * @event vaadin-combo-box-dropdown-closed\n     */\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}