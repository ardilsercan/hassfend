{"ast":null,"code":"const SUFFIXES = [\" \", \": \"];\n\n/**\n * Strips a device name from an entity name.\n * @param entityName the entity name\n * @param lowerCasedPrefix the prefix to strip, lower cased\n * @returns\n */\nexport const stripPrefixFromEntityName = (entityName, lowerCasedPrefix) => {\n  const lowerCasedEntityName = entityName.toLowerCase();\n  for (const suffix of SUFFIXES) {\n    const lowerCasedPrefixWithSuffix = `${lowerCasedPrefix}${suffix}`;\n    if (lowerCasedEntityName.startsWith(lowerCasedPrefixWithSuffix)) {\n      const newName = entityName.substring(lowerCasedPrefixWithSuffix.length);\n      if (newName.length) {\n        // If first word already has an upper case letter (e.g. from brand name)\n        // leave as-is, otherwise capitalize the first word.\n        return hasUpperCase(newName.substr(0, newName.indexOf(\" \"))) ? newName : newName[0].toUpperCase() + newName.slice(1);\n      }\n    }\n  }\n  return undefined;\n};\nconst hasUpperCase = str => str.toLowerCase() !== str;","map":{"version":3,"names":["SUFFIXES","stripPrefixFromEntityName","entityName","lowerCasedPrefix","lowerCasedEntityName","toLowerCase","suffix","lowerCasedPrefixWithSuffix","startsWith","newName","substring","length","hasUpperCase","substr","indexOf","toUpperCase","slice","undefined","str"],"sources":["/workspaces/frontend/src/common/entity/strip_prefix_from_entity_name.ts"],"sourcesContent":["const SUFFIXES = [\" \", \": \"];\n\n/**\n * Strips a device name from an entity name.\n * @param entityName the entity name\n * @param lowerCasedPrefix the prefix to strip, lower cased\n * @returns\n */\nexport const stripPrefixFromEntityName = (\n  entityName: string,\n  lowerCasedPrefix: string\n) => {\n  const lowerCasedEntityName = entityName.toLowerCase();\n\n  for (const suffix of SUFFIXES) {\n    const lowerCasedPrefixWithSuffix = `${lowerCasedPrefix}${suffix}`;\n\n    if (lowerCasedEntityName.startsWith(lowerCasedPrefixWithSuffix)) {\n      const newName = entityName.substring(lowerCasedPrefixWithSuffix.length);\n      if (newName.length) {\n        // If first word already has an upper case letter (e.g. from brand name)\n        // leave as-is, otherwise capitalize the first word.\n        return hasUpperCase(newName.substr(0, newName.indexOf(\" \")))\n          ? newName\n          : newName[0].toUpperCase() + newName.slice(1);\n      }\n    }\n  }\n\n  return undefined;\n};\n\nconst hasUpperCase = (str: string): boolean => str.toLowerCase() !== str;\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,GAAGA,CACvCC,UAAkB,EAClBC,gBAAwB,KACrB;EACH,MAAMC,oBAAoB,GAAGF,UAAU,CAACG,WAAW,CAAC,CAAC;EAErD,KAAK,MAAMC,MAAM,IAAIN,QAAQ,EAAE;IAC7B,MAAMO,0BAA0B,GAAI,GAAEJ,gBAAiB,GAAEG,MAAO,EAAC;IAEjE,IAAIF,oBAAoB,CAACI,UAAU,CAACD,0BAA0B,CAAC,EAAE;MAC/D,MAAME,OAAO,GAAGP,UAAU,CAACQ,SAAS,CAACH,0BAA0B,CAACI,MAAM,CAAC;MACvE,IAAIF,OAAO,CAACE,MAAM,EAAE;QAClB;QACA;QACA,OAAOC,YAAY,CAACH,OAAO,CAACI,MAAM,CAAC,CAAC,EAAEJ,OAAO,CAACK,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,GACxDL,OAAO,GACPA,OAAO,CAAC,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,GAAGN,OAAO,CAACO,KAAK,CAAC,CAAC,CAAC;MACjD;IACF;EACF;EAEA,OAAOC,SAAS;AAClB,CAAC;AAED,MAAML,YAAY,GAAIM,GAAW,IAAcA,GAAG,CAACb,WAAW,CAAC,CAAC,KAAKa,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}