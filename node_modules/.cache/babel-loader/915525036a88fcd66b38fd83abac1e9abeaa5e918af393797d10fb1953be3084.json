{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.parse-int.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nexport var expandHex = function expandHex(hex) {\n  hex = hex.replace(\"#\", \"\");\n  if (hex.length === 6) return hex;\n  var result = \"\";\n  var _iterator = _createForOfIteratorHelper(hex),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var val = _step.value;\n      result += val + val;\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return result;\n};\n\n// Blend 2 hex colors: c1 is placed over c2, blend is c1's opacity.\nexport var hexBlend = function hexBlend(c1, c2) {\n  var blend = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n  var color = \"\";\n  c1 = expandHex(c1);\n  c2 = expandHex(c2);\n  for (var i = 0; i <= 5; i += 2) {\n    var h1 = parseInt(c1.substr(i, 2), 16);\n    var h2 = parseInt(c2.substr(i, 2), 16);\n    var hex = Math.floor(h2 + (h1 - h2) * (blend / 100)).toString(16);\n    while (hex.length < 2) hex = \"0\" + hex;\n    color += hex;\n  }\n  return \"#\".concat(color);\n};","map":{"version":3,"names":["expandHex","hex","replace","length","result","_iterator","_createForOfIteratorHelper","_step","s","n","done","val","value","err","e","f","hexBlend","c1","c2","blend","arguments","undefined","color","i","h1","parseInt","substr","h2","Math","floor","toString","concat"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/color/hex.ts"],"sourcesContent":["export const expandHex = (hex: string): string => {\n  hex = hex.replace(\"#\", \"\");\n  if (hex.length === 6) return hex;\n  let result = \"\";\n  for (const val of hex) {\n    result += val + val;\n  }\n  return result;\n};\n\n// Blend 2 hex colors: c1 is placed over c2, blend is c1's opacity.\nexport const hexBlend = (c1: string, c2: string, blend = 50): string => {\n  let color = \"\";\n  c1 = expandHex(c1);\n  c2 = expandHex(c2);\n  for (let i = 0; i <= 5; i += 2) {\n    const h1 = parseInt(c1.substr(i, 2), 16);\n    const h2 = parseInt(c2.substr(i, 2), 16);\n    let hex = Math.floor(h2 + (h1 - h2) * (blend / 100)).toString(16);\n    while (hex.length < 2) hex = \"0\" + hex;\n    color += hex;\n  }\n  return `#${color}`;\n};\n"],"mappings":";;;;;;AAAA,OAAO,IAAMA,SAAS,GAAG,SAAZA,SAASA,CAAIC,GAAW,EAAa;EAChDA,GAAG,GAAGA,GAAG,CAACC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;EAC1B,IAAID,GAAG,CAACE,MAAM,KAAK,CAAC,EAAE,OAAOF,GAAG;EAChC,IAAIG,MAAM,GAAG,EAAE;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACEL,GAAG;IAAAM,KAAA;EAAA;IAArB,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAuB;MAAA,IAAZC,GAAG,GAAAJ,KAAA,CAAAK,KAAA;MACZR,MAAM,IAAIO,GAAG,GAAGA,GAAG;IACrB;EAAC,SAAAE,GAAA;IAAAR,SAAA,CAAAS,CAAA,CAAAD,GAAA;EAAA;IAAAR,SAAA,CAAAU,CAAA;EAAA;EACD,OAAOX,MAAM;AACf,CAAC;;AAED;AACA,OAAO,IAAMY,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,EAAU,EAAEC,EAAU,EAAyB;EAAA,IAAvBC,KAAK,GAAAC,SAAA,CAAAjB,MAAA,QAAAiB,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,EAAE;EACzD,IAAIE,KAAK,GAAG,EAAE;EACdL,EAAE,GAAGjB,SAAS,CAACiB,EAAE,CAAC;EAClBC,EAAE,GAAGlB,SAAS,CAACkB,EAAE,CAAC;EAClB,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAE;IAC9B,IAAMC,EAAE,GAAGC,QAAQ,CAACR,EAAE,CAACS,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC,IAAMI,EAAE,GAAGF,QAAQ,CAACP,EAAE,CAACQ,MAAM,CAACH,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;IACxC,IAAItB,GAAG,GAAG2B,IAAI,CAACC,KAAK,CAACF,EAAE,GAAG,CAACH,EAAE,GAAGG,EAAE,KAAKR,KAAK,GAAG,GAAG,CAAC,CAAC,CAACW,QAAQ,CAAC,EAAE,CAAC;IACjE,OAAO7B,GAAG,CAACE,MAAM,GAAG,CAAC,EAAEF,GAAG,GAAG,GAAG,GAAGA,GAAG;IACtCqB,KAAK,IAAIrB,GAAG;EACd;EACA,WAAA8B,MAAA,CAAWT,KAAK;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}