{"ast":null,"code":"/* eslint-disable @typescript-eslint/triple-slash-reference */\n// eslint-disable-next-line spaced-comment\n/// <reference path=\"../types/service-worker.d.ts\" />\n/* eslint-env serviceworker */\nimport { cacheNames } from \"workbox-core\";\nimport { CacheableResponsePlugin } from \"workbox-cacheable-response\";\nimport { ExpirationPlugin } from \"workbox-expiration\";\nimport { cleanupOutdatedCaches, precacheAndRoute } from \"workbox-precaching\";\nimport { registerRoute, setCatchHandler } from \"workbox-routing\";\nimport { CacheFirst, NetworkOnly, StaleWhileRevalidate } from \"workbox-strategies\";\nconst noFallBackRegEx = /\\/(api|static|auth|frontend_latest|frontend_es5|local)\\/.*/;\nconst initRouting = () => {\n  precacheAndRoute(\n  // @ts-ignore\n  WB_MANIFEST, {\n    // Ignore all URL parameters.\n    ignoreURLParametersMatching: [/.*/]\n  });\n\n  // Cache static content (including translations) on first access.\n  registerRoute(/\\/(static|frontend_latest|frontend_es5)\\/.+/, new CacheFirst({\n    matchOptions: {\n      ignoreSearch: true\n    }\n  }));\n\n  // Cache any brand images used for 30 days\n  // Use revalidation so cache is always available during an extended outage\n  registerRoute(({\n    url,\n    request\n  }) => url.origin === \"https://brands.home-assistant.io\" && request.destination === \"image\", new StaleWhileRevalidate({\n    cacheName: \"brands\",\n    // CORS must be forced to work for CSS images\n    fetchOptions: {\n      mode: \"cors\",\n      credentials: \"omit\"\n    },\n    plugins: [\n    // Add 404 so we quicly respond to domains with missing images\n    new CacheableResponsePlugin({\n      statuses: [0, 200, 404]\n    }), new ExpirationPlugin({\n      maxAgeSeconds: 60 * 60 * 24 * 30,\n      purgeOnQuotaError: true\n    })]\n  }));\n\n  // Get api from network.\n  registerRoute(/\\/(api|auth)\\/.*/, new NetworkOnly());\n\n  // Get manifest, service worker, onboarding from network.\n  registerRoute(/\\/(service_worker.js|manifest.json|onboarding.html)/, new NetworkOnly());\n\n  // For the root \"/\" we ignore search\n  registerRoute(/\\/(\\?.*)?$/, new StaleWhileRevalidate({\n    matchOptions: {\n      ignoreSearch: true\n    }\n  }));\n\n  // For rest of the files (on Indexline Technology domain only) try both cache and network.\n  // This includes \"/states\" response and user files from \"/local\".\n  // First access might bring stale data from cache, but a single refresh will bring updated\n  // file.\n  registerRoute(/\\/.*/, new StaleWhileRevalidate({\n    cacheName: \"file-cache\",\n    plugins: [new ExpirationPlugin({\n      maxAgeSeconds: 60 * 60 * 24,\n      purgeOnQuotaError: true\n    })]\n  }));\n};\nconst initPushNotifications = () => {\n  // HTML5 Push Notifications\n  function firePushCallback(payload, jwt) {\n    // Don't send the JWT in the payload.data\n    delete payload.data.jwt;\n    // If payload.data is empty then just remove the entire payload.data object.\n    if (Object.keys(payload.data).length === 0 && payload.data.constructor === Object) {\n      delete payload.data;\n    }\n    fetch(\"/api/notify.html5/callback\", {\n      credentials: \"same-origin\",\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + jwt\n      }),\n      body: JSON.stringify(payload)\n    });\n  }\n  function notificationEventCallback(eventType, event) {\n    firePushCallback({\n      action: event.action,\n      data: event.notification.data,\n      tag: event.notification.tag,\n      type: eventType\n    }, event.notification.data.jwt);\n  }\n  self.addEventListener(\"push\", event => {\n    let data;\n    if (event.data) {\n      data = event.data.json();\n      if (data.dismiss) {\n        event.waitUntil(self.registration.getNotifications({\n          tag: data.tag\n        }).then(notifications => notifications.forEach(n => n.close())));\n        return;\n      }\n      event.waitUntil(self.registration.showNotification(data.title, data).then(( /* notification */\n      ) => {\n        firePushCallback({\n          type: \"received\",\n          tag: data.tag,\n          data: data.data\n        }, data.data.jwt);\n      }));\n    }\n  });\n  self.addEventListener(\"notificationclick\", event => {\n    notificationEventCallback(\"clicked\", event);\n    event.notification.close();\n    if (event.action || !event.notification.data || !event.notification.data.url) {\n      return;\n    }\n    const url = event.notification.data.url;\n    if (!url) return;\n    event.waitUntil(clients.matchAll({\n      type: \"window\"\n    }).then(windowClients => {\n      let i;\n      let client;\n      for (i = 0; i < windowClients.length; i++) {\n        client = windowClients[i];\n        if (client.url === url && \"focus\" in client) {\n          return client.focus();\n        }\n      }\n      if (clients.openWindow) {\n        return clients.openWindow(url);\n      }\n      return undefined;\n    }));\n  });\n  self.addEventListener(\"notificationclose\", event => {\n    notificationEventCallback(\"closed\", event);\n  });\n};\nconst catchHandler = async options => {\n  const dest = options.request.destination;\n  const url = options.request.url;\n  if (dest !== \"document\" || noFallBackRegEx.test(url)) {\n    return Response.error();\n  }\n  // eslint-disable-next-line no-console\n  console.log(\"Using fallback for:\", url);\n  return (await caches.match(\"/\", {\n    ignoreSearch: true\n  })) || Response.error();\n};\nself.addEventListener(\"install\", event => {\n  // Delete all runtime caching, so that index.html has to be refetched.\n  // And add the new index.html back to the runtime cache\n  const cacheName = cacheNames.runtime;\n  event.waitUntil(caches.delete(cacheName).then(() => caches.open(cacheName).then(cache => {\n    cache.add(\"/\");\n  })));\n});\nself.addEventListener(\"activate\", () => {\n  // Attach the service worker to any page of the app\n  // that didn't have a service worker loaded.\n  // Happens the first time they open the app without any\n  // service worker registered.\n  // This will serve code splitted bundles from SW.\n  clients.claim();\n});\nself.addEventListener(\"message\", message => {\n  if (message.data.type === \"skipWaiting\") {\n    self.skipWaiting();\n  }\n});\ncleanupOutdatedCaches();\ninitRouting();\nsetCatchHandler(catchHandler);\ninitPushNotifications();","map":{"version":3,"names":["cacheNames","CacheableResponsePlugin","ExpirationPlugin","cleanupOutdatedCaches","precacheAndRoute","registerRoute","setCatchHandler","CacheFirst","NetworkOnly","StaleWhileRevalidate","noFallBackRegEx","initRouting","WB_MANIFEST","ignoreURLParametersMatching","matchOptions","ignoreSearch","url","request","origin","destination","cacheName","fetchOptions","mode","credentials","plugins","statuses","maxAgeSeconds","purgeOnQuotaError","initPushNotifications","firePushCallback","payload","jwt","data","Object","keys","length","constructor","fetch","method","headers","Headers","Authorization","body","JSON","stringify","notificationEventCallback","eventType","event","action","notification","tag","type","self","addEventListener","json","dismiss","waitUntil","registration","getNotifications","then","notifications","forEach","n","close","showNotification","title","clients","matchAll","windowClients","i","client","focus","openWindow","undefined","catchHandler","options","dest","test","Response","error","console","log","caches","match","runtime","delete","open","cache","add","claim","message","skipWaiting"],"sources":["/workspaces/frontend/src/entrypoints/service_worker.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/triple-slash-reference */\n// eslint-disable-next-line spaced-comment\n/// <reference path=\"../types/service-worker.d.ts\" />\n/* eslint-env serviceworker */\nimport { cacheNames, RouteHandler } from \"workbox-core\";\nimport { CacheableResponsePlugin } from \"workbox-cacheable-response\";\nimport { ExpirationPlugin } from \"workbox-expiration\";\nimport { cleanupOutdatedCaches, precacheAndRoute } from \"workbox-precaching\";\nimport { registerRoute, setCatchHandler } from \"workbox-routing\";\nimport {\n  CacheFirst,\n  NetworkOnly,\n  StaleWhileRevalidate,\n} from \"workbox-strategies\";\n\nconst noFallBackRegEx =\n  /\\/(api|static|auth|frontend_latest|frontend_es5|local)\\/.*/;\n\nconst initRouting = () => {\n  precacheAndRoute(\n    // @ts-ignore\n    WB_MANIFEST,\n    {\n      // Ignore all URL parameters.\n      ignoreURLParametersMatching: [/.*/],\n    }\n  );\n\n  // Cache static content (including translations) on first access.\n  registerRoute(\n    /\\/(static|frontend_latest|frontend_es5)\\/.+/,\n    new CacheFirst({ matchOptions: { ignoreSearch: true } })\n  );\n\n  // Cache any brand images used for 30 days\n  // Use revalidation so cache is always available during an extended outage\n  registerRoute(\n    ({ url, request }) =>\n      url.origin === \"https://brands.home-assistant.io\" &&\n      request.destination === \"image\",\n    new StaleWhileRevalidate({\n      cacheName: \"brands\",\n      // CORS must be forced to work for CSS images\n      fetchOptions: { mode: \"cors\", credentials: \"omit\" },\n      plugins: [\n        // Add 404 so we quicly respond to domains with missing images\n        new CacheableResponsePlugin({ statuses: [0, 200, 404] }),\n        new ExpirationPlugin({\n          maxAgeSeconds: 60 * 60 * 24 * 30,\n          purgeOnQuotaError: true,\n        }),\n      ],\n    })\n  );\n\n  // Get api from network.\n  registerRoute(/\\/(api|auth)\\/.*/, new NetworkOnly());\n\n  // Get manifest, service worker, onboarding from network.\n  registerRoute(\n    /\\/(service_worker.js|manifest.json|onboarding.html)/,\n    new NetworkOnly()\n  );\n\n  // For the root \"/\" we ignore search\n  registerRoute(\n    /\\/(\\?.*)?$/,\n    new StaleWhileRevalidate({ matchOptions: { ignoreSearch: true } })\n  );\n\n  // For rest of the files (on Indexline Technology domain only) try both cache and network.\n  // This includes \"/states\" response and user files from \"/local\".\n  // First access might bring stale data from cache, but a single refresh will bring updated\n  // file.\n  registerRoute(\n    /\\/.*/,\n    new StaleWhileRevalidate({\n      cacheName: \"file-cache\",\n      plugins: [\n        new ExpirationPlugin({\n          maxAgeSeconds: 60 * 60 * 24,\n          purgeOnQuotaError: true,\n        }),\n      ],\n    })\n  );\n};\n\nconst initPushNotifications = () => {\n  // HTML5 Push Notifications\n  function firePushCallback(payload, jwt) {\n    // Don't send the JWT in the payload.data\n    delete payload.data.jwt;\n    // If payload.data is empty then just remove the entire payload.data object.\n    if (\n      Object.keys(payload.data).length === 0 &&\n      payload.data.constructor === Object\n    ) {\n      delete payload.data;\n    }\n    fetch(\"/api/notify.html5/callback\", {\n      credentials: \"same-origin\",\n      method: \"POST\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + jwt,\n      }),\n      body: JSON.stringify(payload),\n    });\n  }\n\n  function notificationEventCallback(eventType, event) {\n    firePushCallback(\n      {\n        action: event.action,\n        data: event.notification.data,\n        tag: event.notification.tag,\n        type: eventType,\n      },\n      event.notification.data.jwt\n    );\n  }\n\n  self.addEventListener(\"push\", (event) => {\n    let data;\n    if (event.data) {\n      data = event.data.json();\n      if (data.dismiss) {\n        event.waitUntil(\n          self.registration\n            .getNotifications({ tag: data.tag })\n            .then((notifications) => notifications.forEach((n) => n.close()))\n        );\n        return;\n      }\n      event.waitUntil(\n        self.registration\n          .showNotification(data.title, data)\n          .then((/* notification */) => {\n            firePushCallback(\n              {\n                type: \"received\",\n                tag: data.tag,\n                data: data.data,\n              },\n              data.data.jwt\n            );\n          })\n      );\n    }\n  });\n\n  self.addEventListener(\"notificationclick\", (event) => {\n    notificationEventCallback(\"clicked\", event);\n\n    event.notification.close();\n\n    if (\n      event.action ||\n      !event.notification.data ||\n      !event.notification.data.url\n    ) {\n      return;\n    }\n\n    const url = event.notification.data.url;\n\n    if (!url) return;\n\n    event.waitUntil(\n      clients\n        .matchAll({\n          type: \"window\",\n        })\n        .then((windowClients) => {\n          let i;\n          let client;\n          for (i = 0; i < windowClients.length; i++) {\n            client = windowClients[i];\n            if (client.url === url && \"focus\" in client) {\n              return client.focus();\n            }\n          }\n          if (clients.openWindow) {\n            return clients.openWindow(url);\n          }\n          return undefined;\n        })\n    );\n  });\n\n  self.addEventListener(\"notificationclose\", (event) => {\n    notificationEventCallback(\"closed\", event);\n  });\n};\n\nconst catchHandler: RouteHandler = async (options) => {\n  const dest = (options.request as Request).destination;\n  const url = (options.request as Request).url;\n\n  if (dest !== \"document\" || noFallBackRegEx.test(url)) {\n    return Response.error();\n  }\n  // eslint-disable-next-line no-console\n  console.log(\"Using fallback for:\", url);\n\n  return (await caches.match(\"/\", { ignoreSearch: true })) || Response.error();\n};\n\nself.addEventListener(\"install\", (event) => {\n  // Delete all runtime caching, so that index.html has to be refetched.\n  // And add the new index.html back to the runtime cache\n  const cacheName = cacheNames.runtime;\n  event.waitUntil(\n    caches.delete(cacheName).then(() =>\n      caches.open(cacheName).then((cache) => {\n        cache.add(\"/\");\n      })\n    )\n  );\n});\n\nself.addEventListener(\"activate\", () => {\n  // Attach the service worker to any page of the app\n  // that didn't have a service worker loaded.\n  // Happens the first time they open the app without any\n  // service worker registered.\n  // This will serve code splitted bundles from SW.\n  clients.claim();\n});\n\nself.addEventListener(\"message\", (message) => {\n  if (message.data.type === \"skipWaiting\") {\n    self.skipWaiting();\n  }\n});\n\ncleanupOutdatedCaches();\ninitRouting();\nsetCatchHandler(catchHandler);\ninitPushNotifications();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}