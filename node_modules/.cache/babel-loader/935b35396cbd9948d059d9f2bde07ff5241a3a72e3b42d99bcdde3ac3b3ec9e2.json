{"ast":null,"code":"'use strict';\n\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar getBuiltIn = require('../internals/get-built-in');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar call = require('../internals/function-call');\nvar fails = require('../internals/fails');\nvar toString = require('../internals/to-string');\nvar validateArgumentsLength = require('../internals/validate-arguments-length');\nvar c2i = require('../internals/base64-map').c2i;\nvar disallowed = /[^\\d+/a-z]/i;\nvar whitespaces = /[\\t\\n\\f\\r ]+/g;\nvar finalEq = /[=]{1,2}$/;\nvar $atob = getBuiltIn('atob');\nvar fromCharCode = String.fromCharCode;\nvar charAt = uncurryThis(''.charAt);\nvar replace = uncurryThis(''.replace);\nvar exec = uncurryThis(disallowed.exec);\nvar BASIC = !!$atob && !fails(function () {\n  return $atob('aGk=') !== 'hi';\n});\nvar NO_SPACES_IGNORE = BASIC && fails(function () {\n  return $atob(' ') !== '';\n});\nvar NO_ENCODING_CHECK = BASIC && !fails(function () {\n  $atob('a');\n});\nvar NO_ARG_RECEIVING_CHECK = BASIC && !fails(function () {\n  $atob();\n});\nvar WRONG_ARITY = BASIC && $atob.length !== 1;\nvar FORCED = !BASIC || NO_SPACES_IGNORE || NO_ENCODING_CHECK || NO_ARG_RECEIVING_CHECK || WRONG_ARITY;\n\n// `atob` method\n// https://html.spec.whatwg.org/multipage/webappapis.html#dom-atob\n$({\n  global: true,\n  bind: true,\n  enumerable: true,\n  forced: FORCED\n}, {\n  atob: function atob(data) {\n    validateArgumentsLength(arguments.length, 1);\n    // `webpack` dev server bug on IE global methods - use call(fn, global, ...)\n    if (BASIC && !NO_SPACES_IGNORE && !NO_ENCODING_CHECK) return call($atob, global, data);\n    var string = replace(toString(data), whitespaces, '');\n    var output = '';\n    var position = 0;\n    var bc = 0;\n    var length, chr, bs;\n    if (string.length % 4 === 0) {\n      string = replace(string, finalEq, '');\n    }\n    length = string.length;\n    if (length % 4 === 1 || exec(disallowed, string)) {\n      throw new (getBuiltIn('DOMException'))('The string is not correctly encoded', 'InvalidCharacterError');\n    }\n    while (position < length) {\n      chr = charAt(string, position++);\n      bs = bc % 4 ? bs * 64 + c2i[chr] : c2i[chr];\n      if (bc++ % 4) output += fromCharCode(255 & bs >> (-2 * bc & 6));\n    }\n    return output;\n  }\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}