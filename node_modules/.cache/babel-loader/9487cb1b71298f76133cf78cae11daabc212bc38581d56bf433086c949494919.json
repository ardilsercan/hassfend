{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.concat.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PartitionDateTimeRangePattern = void 0;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar ToLocalTime_1 = require(\"./ToLocalTime\");\nvar FormatDateTimePattern_1 = require(\"./FormatDateTimePattern\");\nvar TABLE_2_FIELDS = ['era', 'year', 'month', 'day', 'dayPeriod', 'ampm', 'hour', 'minute', 'second', 'fractionalSecondDigits'];\nfunction PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n  x = (0, ecma402_abstract_1.TimeClip)(x);\n  if (isNaN(x)) {\n    throw new RangeError('Invalid start time');\n  }\n  y = (0, ecma402_abstract_1.TimeClip)(y);\n  if (isNaN(y)) {\n    throw new RangeError('Invalid end time');\n  }\n  /** IMPL START */\n  var getInternalSlots = implDetails.getInternalSlots,\n    tzData = implDetails.tzData;\n  var internalSlots = getInternalSlots(dtf);\n  /** IMPL END */\n  var tm1 = (0, ToLocalTime_1.ToLocalTime)(x,\n  // @ts-ignore\n  internalSlots.calendar, internalSlots.timeZone, {\n    tzData: tzData\n  });\n  var tm2 = (0, ToLocalTime_1.ToLocalTime)(y,\n  // @ts-ignore\n  internalSlots.calendar, internalSlots.timeZone, {\n    tzData: tzData\n  });\n  var pattern = internalSlots.pattern,\n    rangePatterns = internalSlots.rangePatterns;\n  var rangePattern;\n  var dateFieldsPracticallyEqual = true;\n  var patternContainsLargerDateField = false;\n  for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n    var fieldName = TABLE_2_FIELDS_1[_i];\n    if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n      var rp = fieldName in rangePatterns ? rangePatterns[fieldName] : undefined;\n      if (rangePattern !== undefined && rp === undefined) {\n        patternContainsLargerDateField = true;\n      } else {\n        rangePattern = rp;\n        if (fieldName === 'ampm') {\n          var v1 = tm1.hour;\n          var v2 = tm2.hour;\n          if (v1 > 11 && v2 < 11 || v1 < 11 && v2 > 11) {\n            dateFieldsPracticallyEqual = false;\n          }\n        } else if (fieldName === 'dayPeriod') {\n          // TODO\n        } else if (fieldName === 'fractionalSecondDigits') {\n          var fractionalSecondDigits = internalSlots.fractionalSecondDigits;\n          if (fractionalSecondDigits === undefined) {\n            fractionalSecondDigits = 3;\n          }\n          var v1 = Math.floor(tm1.millisecond * Math.pow(10, fractionalSecondDigits - 3));\n          var v2 = Math.floor(tm2.millisecond * Math.pow(10, fractionalSecondDigits - 3));\n          if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n            dateFieldsPracticallyEqual = false;\n          }\n        } else {\n          var v1 = tm1[fieldName];\n          var v2 = tm2[fieldName];\n          if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n            dateFieldsPracticallyEqual = false;\n          }\n        }\n      }\n    }\n  }\n  if (dateFieldsPracticallyEqual) {\n    var result_2 = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);\n    for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n      var r = result_1[_a];\n      r.source = ecma402_abstract_1.RangePatternType.shared;\n    }\n    return result_2;\n  }\n  var result = [];\n  if (rangePattern === undefined) {\n    rangePattern = rangePatterns.default;\n    /** IMPL DETAILS */\n    // Now we have to replace {0} & {1} with actual pattern\n    for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n      var patternPart = _c[_b];\n      if (patternPart.pattern === '{0}' || patternPart.pattern === '{1}') {\n        patternPart.pattern = pattern;\n      }\n    }\n  }\n  for (var _d = 0, _e = rangePattern.patternParts; _d < _e.length; _d++) {\n    var rangePatternPart = _e[_d];\n    var source = rangePatternPart.source,\n      pattern_1 = rangePatternPart.pattern;\n    var z = void 0;\n    if (source === ecma402_abstract_1.RangePatternType.startRange || source === ecma402_abstract_1.RangePatternType.shared) {\n      z = x;\n    } else {\n      z = y;\n    }\n    var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern_1);\n    var partResult = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, patternParts, z, implDetails);\n    for (var _f = 0, partResult_1 = partResult; _f < partResult_1.length; _f++) {\n      var r = partResult_1[_f];\n      r.source = source;\n    }\n    result = result.concat(partResult);\n  }\n  return result;\n}\nexports.PartitionDateTimeRangePattern = PartitionDateTimeRangePattern;","map":{"version":3,"names":["require","Object","defineProperty","exports","value","PartitionDateTimeRangePattern","ecma402_abstract_1","ToLocalTime_1","FormatDateTimePattern_1","TABLE_2_FIELDS","dtf","x","y","implDetails","TimeClip","isNaN","RangeError","getInternalSlots","tzData","internalSlots","tm1","ToLocalTime","calendar","timeZone","tm2","pattern","rangePatterns","rangePattern","dateFieldsPracticallyEqual","patternContainsLargerDateField","_i","TABLE_2_FIELDS_1","length","fieldName","rp","undefined","v1","hour","v2","fractionalSecondDigits","Math","floor","millisecond","pow","SameValue","result_2","FormatDateTimePattern","PartitionPattern","_a","result_1","r","source","RangePatternType","shared","result","default","_b","_c","patternParts","patternPart","_d","_e","rangePatternPart","pattern_1","z","startRange","partResult","_f","partResult_1","concat"],"sources":["/workspaces/frontend/node_modules/@formatjs/intl-datetimeformat/src/abstract/PartitionDateTimeRangePattern.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PartitionDateTimeRangePattern = void 0;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar ToLocalTime_1 = require(\"./ToLocalTime\");\nvar FormatDateTimePattern_1 = require(\"./FormatDateTimePattern\");\nvar TABLE_2_FIELDS = [\n    'era',\n    'year',\n    'month',\n    'day',\n    'dayPeriod',\n    'ampm',\n    'hour',\n    'minute',\n    'second',\n    'fractionalSecondDigits',\n];\nfunction PartitionDateTimeRangePattern(dtf, x, y, implDetails) {\n    x = (0, ecma402_abstract_1.TimeClip)(x);\n    if (isNaN(x)) {\n        throw new RangeError('Invalid start time');\n    }\n    y = (0, ecma402_abstract_1.TimeClip)(y);\n    if (isNaN(y)) {\n        throw new RangeError('Invalid end time');\n    }\n    /** IMPL START */\n    var getInternalSlots = implDetails.getInternalSlots, tzData = implDetails.tzData;\n    var internalSlots = getInternalSlots(dtf);\n    /** IMPL END */\n    var tm1 = (0, ToLocalTime_1.ToLocalTime)(x, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var tm2 = (0, ToLocalTime_1.ToLocalTime)(y, \n    // @ts-ignore\n    internalSlots.calendar, internalSlots.timeZone, { tzData: tzData });\n    var pattern = internalSlots.pattern, rangePatterns = internalSlots.rangePatterns;\n    var rangePattern;\n    var dateFieldsPracticallyEqual = true;\n    var patternContainsLargerDateField = false;\n    for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {\n        var fieldName = TABLE_2_FIELDS_1[_i];\n        if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {\n            var rp = fieldName in rangePatterns ? rangePatterns[fieldName] : undefined;\n            if (rangePattern !== undefined && rp === undefined) {\n                patternContainsLargerDateField = true;\n            }\n            else {\n                rangePattern = rp;\n                if (fieldName === 'ampm') {\n                    var v1 = tm1.hour;\n                    var v2 = tm2.hour;\n                    if ((v1 > 11 && v2 < 11) || (v1 < 11 && v2 > 11)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n                else if (fieldName === 'dayPeriod') {\n                    // TODO\n                }\n                else if (fieldName === 'fractionalSecondDigits') {\n                    var fractionalSecondDigits = internalSlots.fractionalSecondDigits;\n                    if (fractionalSecondDigits === undefined) {\n                        fractionalSecondDigits = 3;\n                    }\n                    var v1 = Math.floor(tm1.millisecond * Math.pow(10, (fractionalSecondDigits - 3)));\n                    var v2 = Math.floor(tm2.millisecond * Math.pow(10, (fractionalSecondDigits - 3)));\n                    if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n                else {\n                    var v1 = tm1[fieldName];\n                    var v2 = tm2[fieldName];\n                    if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {\n                        dateFieldsPracticallyEqual = false;\n                    }\n                }\n            }\n        }\n    }\n    if (dateFieldsPracticallyEqual) {\n        var result_2 = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);\n        for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {\n            var r = result_1[_a];\n            r.source = ecma402_abstract_1.RangePatternType.shared;\n        }\n        return result_2;\n    }\n    var result = [];\n    if (rangePattern === undefined) {\n        rangePattern = rangePatterns.default;\n        /** IMPL DETAILS */\n        // Now we have to replace {0} & {1} with actual pattern\n        for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {\n            var patternPart = _c[_b];\n            if (patternPart.pattern === '{0}' || patternPart.pattern === '{1}') {\n                patternPart.pattern = pattern;\n            }\n        }\n    }\n    for (var _d = 0, _e = rangePattern.patternParts; _d < _e.length; _d++) {\n        var rangePatternPart = _e[_d];\n        var source = rangePatternPart.source, pattern_1 = rangePatternPart.pattern;\n        var z = void 0;\n        if (source === ecma402_abstract_1.RangePatternType.startRange ||\n            source === ecma402_abstract_1.RangePatternType.shared) {\n            z = x;\n        }\n        else {\n            z = y;\n        }\n        var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern_1);\n        var partResult = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, patternParts, z, implDetails);\n        for (var _f = 0, partResult_1 = partResult; _f < partResult_1.length; _f++) {\n            var r = partResult_1[_f];\n            r.source = source;\n        }\n        result = result.concat(partResult);\n    }\n    return result;\n}\nexports.PartitionDateTimeRangePattern = PartitionDateTimeRangePattern;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}