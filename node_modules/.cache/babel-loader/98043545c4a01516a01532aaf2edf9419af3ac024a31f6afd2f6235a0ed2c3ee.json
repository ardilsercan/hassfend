{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nconst mdiPower = \"M16.56,5.44L15.11,6.89C16.84,7.94 18,9.83 18,12A6,6 0 0,1 12,18A6,6 0 0,1 6,12C6,9.83 7.16,7.94 8.88,6.88L7.44,5.44C5.36,6.88 4,9.28 4,12A8,8 0 0,0 12,20A8,8 0 0,0 20,12C20,9.28 18.64,6.88 16.56,5.44M13,3H11V13H13\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { numberFormatToLocale } from \"../../../common/number/format_number\";\nimport { round } from \"../../../common/number/round\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/chart/ha-chart-base\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-settings-row\";\nimport { subscribeConfigEntries } from \"../../../data/config_entries\";\nimport { BOARD_NAMES } from \"../../../data/hardware\";\nimport { fetchHassioHassOsInfo } from \"../../../data/hassio/host\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { showRestartDialog } from \"../../../dialogs/restart/show-dialog-restart\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { DEFAULT_PRIMARY_COLOR } from \"../../../resources/styles-data\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { hardwareBrandsUrl } from \"../../../util/brands-url\";\nimport { showhardwareAvailableDialog } from \"./show-dialog-hardware-available\";\nconst DATASAMPLES = 60;\nconst DATA_SET_CONFIG = {\n  fill: \"origin\",\n  borderColor: DEFAULT_PRIMARY_COLOR,\n  backgroundColor: DEFAULT_PRIMARY_COLOR + \"2B\",\n  pointRadius: 0,\n  lineTension: 0.2,\n  borderWidth: 1\n};\nlet HaConfigHardware = _decorate([customElement(\"ha-config-hardware\")], function (_initialize, _SubscribeMixin) {\n  class HaConfigHardware extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaConfigHardware,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_OSData\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_hardwareInfo\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_chartOptions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_systemStatusData\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_configEntries\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_memoryEntries\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_cpuEntries\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        const subs = [subscribeConfigEntries(this.hass, messages => {\n          let fullUpdate = false;\n          const newEntries = [];\n          messages.forEach(message => {\n            if (message.type === null || message.type === \"added\") {\n              newEntries.push(message.entry);\n              if (message.type === null) {\n                fullUpdate = true;\n              }\n            } else if (message.type === \"removed\") {\n              if (this._configEntries) {\n                delete this._configEntries[message.entry.entry_id];\n              }\n            } else if (message.type === \"updated\") {\n              if (this._configEntries) {\n                const newEntry = message.entry;\n                this._configEntries[message.entry.entry_id] = newEntry;\n              }\n            }\n          });\n          if (!newEntries.length && !fullUpdate) {\n            return;\n          }\n          const entries = [...(fullUpdate ? [] : Object.values(this._configEntries || {})), ...newEntries];\n          const configEntries = {};\n          for (const entry of entries) {\n            configEntries[entry.entry_id] = entry;\n          }\n          this._configEntries = configEntries;\n        }, {\n          type: [\"hardware\"]\n        })];\n        if (isComponentLoaded(this.hass, \"hardware\")) {\n          subs.push(this.hass.connection.subscribeMessage(message => {\n            // Only store the last 60 entries\n            this._memoryEntries.shift();\n            this._cpuEntries.shift();\n            this._memoryEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.memory_used_percent\n            });\n            this._cpuEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.cpu_percent\n            });\n            this._systemStatusData = message;\n          }, {\n            type: \"hardware/subscribe_system_status\"\n          }));\n        }\n        return subs;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        if (!this.hasUpdated) {\n          this._chartOptions = {\n            animation: false,\n            responsive: true,\n            scales: {\n              y: {\n                gridLines: {\n                  drawTicks: false\n                },\n                ticks: {\n                  maxTicksLimit: 7,\n                  fontSize: 10,\n                  max: 100,\n                  min: 0,\n                  stepSize: 1,\n                  callback: value => value + blankBeforePercent(this.hass.locale) + \"%\"\n                }\n              },\n              x: {\n                type: \"time\",\n                adapters: {\n                  date: {\n                    locale: this.hass.locale,\n                    config: this.hass.config\n                  }\n                },\n                gridLines: {\n                  display: true,\n                  drawTicks: false\n                },\n                ticks: {\n                  maxRotation: 0,\n                  sampleSize: 5,\n                  autoSkipPadding: 20,\n                  major: {\n                    enabled: true\n                  },\n                  fontSize: 10,\n                  autoSkip: true,\n                  maxTicksLimit: 5\n                }\n              }\n            },\n            // @ts-expect-error\n            locale: numberFormatToLocale(this.hass.locale)\n          };\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HaConfigHardware.prototype), \"firstUpdated\", this).call(this, changedProps);\n        this._load();\n        const date = new Date();\n        // Force graph to start drawing from the right\n        for (let i = 0; i < DATASAMPLES; i++) {\n          const t = new Date(date);\n          t.setSeconds(t.getSeconds() - 5 * (DATASAMPLES - i));\n          this._memoryEntries.push({\n            x: t.getTime(),\n            y: null\n          });\n          this._cpuEntries.push({\n            x: t.getTime(),\n            y: null\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_hardwareInfo, _this$_hardwareInfo2, _this$_OSData;\n        let boardId;\n        let boardName;\n        let imageURL;\n        let documentationURL;\n        let boardConfigEntries = [];\n        const boardData = (_this$_hardwareInfo = this._hardwareInfo) === null || _this$_hardwareInfo === void 0 ? void 0 : _this$_hardwareInfo.hardware.find(hw => hw.board !== null);\n        const dongles = (_this$_hardwareInfo2 = this._hardwareInfo) === null || _this$_hardwareInfo2 === void 0 ? void 0 : _this$_hardwareInfo2.hardware.filter(hw => hw.dongle !== null && (!hw.config_entries.length || hw.config_entries.some(entryId => {\n          var _this$_configEntries;\n          return ((_this$_configEntries = this._configEntries) === null || _this$_configEntries === void 0 ? void 0 : _this$_configEntries[entryId]) && !this._configEntries[entryId].disabled_by;\n        })));\n        if (boardData) {\n          var _this$hass$themes;\n          boardConfigEntries = boardData.config_entries.map(id => {\n            var _this$_configEntries2;\n            return (_this$_configEntries2 = this._configEntries) === null || _this$_configEntries2 === void 0 ? void 0 : _this$_configEntries2[id];\n          }).filter(entry => (entry === null || entry === void 0 ? void 0 : entry.supports_options) && !entry.disabled_by);\n          boardId = boardData.board.hassio_board_id;\n          boardName = boardData.name;\n          documentationURL = boardData.url;\n          imageURL = hardwareBrandsUrl({\n            category: \"boards\",\n            manufacturer: boardData.board.manufacturer,\n            model: boardData.board.model,\n            darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n          });\n        } else if ((_this$_OSData = this._OSData) !== null && _this$_OSData !== void 0 && _this$_OSData.board) {\n          boardId = this._OSData.board;\n          boardName = BOARD_NAMES[this._OSData.board];\n        }\n        return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.hardware.caption\")}\n      >\n        ${isComponentLoaded(this.hass, \"hassio\") ? html`\n              <ha-icon-button\n                slot=\"toolbar-icon\"\n                .path=${mdiPower}\n                .label=${this.hass.localize(\"ui.panel.config.hardware.restart_homeassistant\")}\n                @click=${this._showRestartDialog}\n              ></ha-icon-button>\n            ` : \"\"}\n        ${this._error ? html`\n              <ha-alert alert-type=\"error\"\n                >${this._error.message || this._error.code}</ha-alert\n              >\n            ` : \"\"}\n        <div class=\"content\">\n          ${boardName || isComponentLoaded(this.hass, \"hassio\") ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    ${imageURL ? html`<img\n                          alt=\"\"\n                          src=${imageURL}\n                          crossorigin=\"anonymous\"\n                          referrerpolicy=\"no-referrer\"\n                        />` : \"\"}\n                    <div class=\"board-info\">\n                      <p class=\"primary-text\">\n                        ${boardName || this.hass.localize(\"ui.panel.config.hardware.generic_hardware\")}\n                      </p>\n                      ${boardId ? html`<p class=\"secondary-text\">${boardId}</p>` : \"\"}\n                    </div>\n                  </div>\n                  ${documentationURL ? html`\n                        <mwc-list>\n                          <ha-clickable-list-item\n                            .href=${documentationURL}\n                            openNewTab\n                            twoline\n                            hasMeta\n                          >\n                            <span\n                              >${this.hass.localize(\"ui.panel.config.hardware.documentation\")}</span\n                            >\n                            <span slot=\"secondary\"\n                              >${this.hass.localize(\"ui.panel.config.hardware.documentation_description\")}</span\n                            >\n                            <ha-icon-next slot=\"meta\"></ha-icon-next>\n                          </ha-clickable-list-item>\n                        </mwc-list>\n                      ` : \"\"}\n                  ${boardConfigEntries.length || isComponentLoaded(this.hass, \"hassio\") ? html`<div class=\"card-actions\">\n                        ${boardConfigEntries.length ? html`\n                              <mwc-button\n                                .entry=${boardConfigEntries[0]}\n                                @click=${this._openOptionsFlow}\n                              >\n                                ${this.hass.localize(\"ui.panel.config.hardware.configure\")}\n                              </mwc-button>\n                            ` : nothing}\n                        ${isComponentLoaded(this.hass, \"hassio\") ? html`\n                              <mwc-button @click=${this._openHardware}>\n                                ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.title\")}\n                              </mwc-button>\n                            ` : nothing}\n                      </div>` : \"\"}\n                </ha-card>\n              ` : \"\"}\n          ${dongles !== null && dongles !== void 0 && dongles.length ? html`<ha-card outlined>\n                ${dongles.map(dongle => {\n          const configEntry = dongle.config_entries.map(id => {\n            var _this$_configEntries3;\n            return (_this$_configEntries3 = this._configEntries) === null || _this$_configEntries3 === void 0 ? void 0 : _this$_configEntries3[id];\n          }).filter(entry => (entry === null || entry === void 0 ? void 0 : entry.supports_options) && !entry.disabled_by)[0];\n          return html`<div class=\"row\">\n                    ${dongle.name}${configEntry ? html`<mwc-button\n                          .entry=${configEntry}\n                          @click=${this._openOptionsFlow}\n                        >\n                          ${this.hass.localize(\"ui.panel.config.hardware.configure\")}\n                        </mwc-button>` : \"\"}\n                  </div>`;\n        })}\n              </ha-card>` : \"\"}\n          ${this._systemStatusData ? html`<ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.processor\")}\n                    </div>\n                    <div class=\"value\">\n                      ${this._systemStatusData.cpu_percent || \"-\"}${blankBeforePercent(this.hass.locale)}%\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n          datasets: [{\n            ...DATA_SET_CONFIG,\n            data: this._cpuEntries\n          }]\n        }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>\n                <ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.memory\")}\n                    </div>\n                    <div class=\"value\">\n                      ${round(this._systemStatusData.memory_used_mb / 1024, 1)}\n                      GB /\n                      ${round((this._systemStatusData.memory_used_mb + this._systemStatusData.memory_free_mb) / 1024, 0)}\n                      GB\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n          datasets: [{\n            ...DATA_SET_CONFIG,\n            data: this._memoryEntries\n          }]\n        }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>` : isComponentLoaded(this.hass, \"hardware\") ? html`<ha-card outlined>\n                  <div class=\"card-content\">\n                    <div class=\"value\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.loading_system_data\")}\n                    </div>\n                  </div>\n                </ha-card>` : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_load\",\n      value: async function _load() {\n        if (isComponentLoaded(this.hass, \"usb\")) {\n          await scanUSBDevices(this.hass);\n        }\n        const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n        try {\n          var _this$_hardwareInfo3;\n          if (isComponentLoaded(this.hass, \"hardware\")) {\n            this._hardwareInfo = await this.hass.callWS({\n              type: \"hardware/info\"\n            });\n          }\n          if (isHassioLoaded && !((_this$_hardwareInfo3 = this._hardwareInfo) !== null && _this$_hardwareInfo3 !== void 0 && _this$_hardwareInfo3.hardware.length)) {\n            this._OSData = await fetchHassioHassOsInfo(this.hass);\n          }\n        } catch (err) {\n          this._error = err.message || err;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_openOptionsFlow\",\n      value: async function _openOptionsFlow(ev) {\n        const entry = ev.currentTarget.entry;\n        if (!entry) {\n          return;\n        }\n        showOptionsFlowDialog(this, entry);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_openHardware\",\n      value: async function _openHardware() {\n        showhardwareAvailableDialog(this);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showRestartDialog\",\n      value: async function _showRestartDialog() {\n        showRestartDialog(this);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return [haStyle, css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n        --mdc-list-side-padding: 24px;\n        --mdc-list-vertical-padding: 0;\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n        margin-bottom: 16px;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px;\n      }\n      .card-content img {\n        max-width: 300px;\n        margin: auto;\n      }\n      .board-info {\n        text-align: center;\n      }\n      .primary-text {\n        font-size: 16px;\n        margin: 0;\n      }\n      .secondary-text {\n        font-size: 14px;\n        margin-bottom: 0;\n        color: var(--secondary-text-color);\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .header .title {\n        color: var(--secondary-text-color);\n        font-size: 18px;\n      }\n\n      .header .value {\n        font-size: 16px;\n      }\n      .row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        height: 48px;\n        padding: 8px 16px;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n      }\n    `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["mdiPower","css","html","LitElement","nothing","customElement","property","state","isComponentLoaded","numberFormatToLocale","round","blankBeforePercent","subscribeConfigEntries","BOARD_NAMES","fetchHassioHassOsInfo","scanUSBDevices","showOptionsFlowDialog","showRestartDialog","SubscribeMixin","DEFAULT_PRIMARY_COLOR","haStyle","hardwareBrandsUrl","showhardwareAvailableDialog","DATASAMPLES","DATA_SET_CONFIG","fill","borderColor","backgroundColor","pointRadius","lineTension","borderWidth","HaConfigHardware","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","hassSubscribe","subs","hass","messages","fullUpdate","newEntries","forEach","message","push","entry","_configEntries","entry_id","newEntry","length","entries","Object","values","configEntries","connection","subscribeMessage","_memoryEntries","shift","_cpuEntries","x","Date","timestamp","getTime","y","memory_used_percent","cpu_percent","_systemStatusData","willUpdate","hasUpdated","_chartOptions","animation","responsive","scales","gridLines","drawTicks","ticks","maxTicksLimit","fontSize","max","min","stepSize","callback","locale","adapters","date","config","display","maxRotation","sampleSize","autoSkipPadding","major","enabled","autoSkip","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","_load","i","t","setSeconds","getSeconds","render","_this$_hardwareInfo","_this$_hardwareInfo2","_this$_OSData","boardId","boardName","imageURL","documentationURL","boardConfigEntries","boardData","_hardwareInfo","hardware","find","hw","board","dongles","filter","dongle","config_entries","some","entryId","_this$_configEntries","disabled_by","_this$hass$themes","map","id","_this$_configEntries2","supports_options","hassio_board_id","name","url","category","manufacturer","model","darkOptimized","themes","darkMode","_OSData","narrow","localize","_showRestartDialog","_error","code","_openOptionsFlow","_openHardware","configEntry","_this$_configEntries3","datasets","data","memory_used_mb","memory_free_mb","isHassioLoaded","_this$_hardwareInfo3","callWS","err","ev","currentTarget","static"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/hardware/ha-config-hardware.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiPower } from \"@mdi/js\";\nimport type { ChartOptions } from \"chart.js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { numberFormatToLocale } from \"../../../common/number/format_number\";\nimport { round } from \"../../../common/number/round\";\nimport { blankBeforePercent } from \"../../../common/translations/blank_before_percent\";\nimport \"../../../components/buttons/ha-progress-button\";\nimport \"../../../components/chart/ha-chart-base\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-clickable-list-item\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-settings-row\";\nimport {\n  ConfigEntry,\n  subscribeConfigEntries,\n} from \"../../../data/config_entries\";\nimport {\n  BOARD_NAMES,\n  HardwareInfo,\n  SystemStatusStreamMessage,\n} from \"../../../data/hardware\";\nimport {\n  fetchHassioHassOsInfo,\n  HassioHassOSInfo,\n} from \"../../../data/hassio/host\";\nimport { scanUSBDevices } from \"../../../data/usb\";\nimport { showOptionsFlowDialog } from \"../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { showRestartDialog } from \"../../../dialogs/restart/show-dialog-restart\";\nimport \"../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { DEFAULT_PRIMARY_COLOR } from \"../../../resources/styles-data\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { hardwareBrandsUrl } from \"../../../util/brands-url\";\nimport { showhardwareAvailableDialog } from \"./show-dialog-hardware-available\";\n\nconst DATASAMPLES = 60;\n\nconst DATA_SET_CONFIG = {\n  fill: \"origin\",\n  borderColor: DEFAULT_PRIMARY_COLOR,\n  backgroundColor: DEFAULT_PRIMARY_COLOR + \"2B\",\n  pointRadius: 0,\n  lineTension: 0.2,\n  borderWidth: 1,\n};\n\n@customElement(\"ha-config-hardware\")\nclass HaConfigHardware extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _error?: { code: string; message: string };\n\n  @state() private _OSData?: HassioHassOSInfo;\n\n  @state() private _hardwareInfo?: HardwareInfo;\n\n  @state() private _chartOptions?: ChartOptions;\n\n  @state() private _systemStatusData?: SystemStatusStreamMessage;\n\n  @state() private _configEntries?: { [id: string]: ConfigEntry };\n\n  private _memoryEntries: { x: number; y: number | null }[] = [];\n\n  private _cpuEntries: { x: number; y: number | null }[] = [];\n\n  public hassSubscribe(): Array<UnsubscribeFunc | Promise<UnsubscribeFunc>> {\n    const subs = [\n      subscribeConfigEntries(\n        this.hass,\n        (messages) => {\n          let fullUpdate = false;\n          const newEntries: ConfigEntry[] = [];\n          messages.forEach((message) => {\n            if (message.type === null || message.type === \"added\") {\n              newEntries.push(message.entry);\n              if (message.type === null) {\n                fullUpdate = true;\n              }\n            } else if (message.type === \"removed\") {\n              if (this._configEntries) {\n                delete this._configEntries[message.entry.entry_id];\n              }\n            } else if (message.type === \"updated\") {\n              if (this._configEntries) {\n                const newEntry = message.entry;\n                this._configEntries[message.entry.entry_id] = newEntry;\n              }\n            }\n          });\n          if (!newEntries.length && !fullUpdate) {\n            return;\n          }\n          const entries = [\n            ...(fullUpdate ? [] : Object.values(this._configEntries || {})),\n            ...newEntries,\n          ];\n          const configEntries: { [id: string]: ConfigEntry } = {};\n          for (const entry of entries) {\n            configEntries[entry.entry_id] = entry;\n          }\n          this._configEntries = configEntries;\n        },\n        { type: [\"hardware\"] }\n      ),\n    ];\n\n    if (isComponentLoaded(this.hass, \"hardware\")) {\n      subs.push(\n        this.hass.connection.subscribeMessage<SystemStatusStreamMessage>(\n          (message) => {\n            // Only store the last 60 entries\n            this._memoryEntries.shift();\n            this._cpuEntries.shift();\n\n            this._memoryEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.memory_used_percent,\n            });\n            this._cpuEntries.push({\n              x: new Date(message.timestamp).getTime(),\n              y: message.cpu_percent,\n            });\n\n            this._systemStatusData = message;\n          },\n          {\n            type: \"hardware/subscribe_system_status\",\n          }\n        )\n      );\n    }\n\n    return subs;\n  }\n\n  protected willUpdate(): void {\n    if (!this.hasUpdated) {\n      this._chartOptions = {\n        animation: false,\n        responsive: true,\n        scales: {\n          y: {\n            gridLines: {\n              drawTicks: false,\n            },\n            ticks: {\n              maxTicksLimit: 7,\n              fontSize: 10,\n              max: 100,\n              min: 0,\n              stepSize: 1,\n              callback: (value) =>\n                value + blankBeforePercent(this.hass.locale) + \"%\",\n            },\n          },\n          x: {\n            type: \"time\",\n            adapters: {\n              date: {\n                locale: this.hass.locale,\n                config: this.hass.config,\n              },\n            },\n            gridLines: {\n              display: true,\n              drawTicks: false,\n            },\n            ticks: {\n              maxRotation: 0,\n              sampleSize: 5,\n              autoSkipPadding: 20,\n              major: {\n                enabled: true,\n              },\n              fontSize: 10,\n              autoSkip: true,\n              maxTicksLimit: 5,\n            },\n          },\n        },\n        // @ts-expect-error\n        locale: numberFormatToLocale(this.hass.locale),\n      };\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n    this._load();\n\n    const date = new Date();\n    // Force graph to start drawing from the right\n    for (let i = 0; i < DATASAMPLES; i++) {\n      const t = new Date(date);\n      t.setSeconds(t.getSeconds() - 5 * (DATASAMPLES - i));\n      this._memoryEntries.push({ x: t.getTime(), y: null });\n      this._cpuEntries.push({ x: t.getTime(), y: null });\n    }\n  }\n\n  protected render() {\n    let boardId: string | undefined;\n    let boardName: string | undefined;\n    let imageURL: string | undefined;\n    let documentationURL: string | undefined;\n    let boardConfigEntries: ConfigEntry[] = [];\n\n    const boardData = this._hardwareInfo?.hardware.find(\n      (hw) => hw.board !== null\n    );\n\n    const dongles = this._hardwareInfo?.hardware.filter(\n      (hw) =>\n        hw.dongle !== null &&\n        (!hw.config_entries.length ||\n          hw.config_entries.some(\n            (entryId) =>\n              this._configEntries?.[entryId] &&\n              !this._configEntries[entryId].disabled_by\n          ))\n    );\n\n    if (boardData) {\n      boardConfigEntries = boardData.config_entries\n        .map((id) => this._configEntries?.[id])\n        .filter(\n          (entry) => entry?.supports_options && !entry.disabled_by\n        ) as ConfigEntry[];\n      boardId = boardData.board!.hassio_board_id;\n      boardName = boardData.name;\n      documentationURL = boardData.url;\n      imageURL = hardwareBrandsUrl({\n        category: \"boards\",\n        manufacturer: boardData.board!.manufacturer,\n        model: boardData.board!.model,\n        darkOptimized: this.hass.themes?.darkMode,\n      });\n    } else if (this._OSData?.board) {\n      boardId = this._OSData.board;\n      boardName = BOARD_NAMES[this._OSData.board];\n    }\n\n    return html`\n      <hass-subpage\n        back-path=\"/config/system\"\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${this.hass.localize(\"ui.panel.config.hardware.caption\")}\n      >\n        ${isComponentLoaded(this.hass, \"hassio\")\n          ? html`\n              <ha-icon-button\n                slot=\"toolbar-icon\"\n                .path=${mdiPower}\n                .label=${this.hass.localize(\n                  \"ui.panel.config.hardware.restart_homeassistant\"\n                )}\n                @click=${this._showRestartDialog}\n              ></ha-icon-button>\n            `\n          : \"\"}\n        ${this._error\n          ? html`\n              <ha-alert alert-type=\"error\"\n                >${this._error.message || this._error.code}</ha-alert\n              >\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${boardName || isComponentLoaded(this.hass, \"hassio\")\n            ? html`\n                <ha-card outlined>\n                  <div class=\"card-content\">\n                    ${imageURL\n                      ? html`<img\n                          alt=\"\"\n                          src=${imageURL}\n                          crossorigin=\"anonymous\"\n                          referrerpolicy=\"no-referrer\"\n                        />`\n                      : \"\"}\n                    <div class=\"board-info\">\n                      <p class=\"primary-text\">\n                        ${boardName ||\n                        this.hass.localize(\n                          \"ui.panel.config.hardware.generic_hardware\"\n                        )}\n                      </p>\n                      ${boardId\n                        ? html`<p class=\"secondary-text\">${boardId}</p>`\n                        : \"\"}\n                    </div>\n                  </div>\n                  ${documentationURL\n                    ? html`\n                        <mwc-list>\n                          <ha-clickable-list-item\n                            .href=${documentationURL}\n                            openNewTab\n                            twoline\n                            hasMeta\n                          >\n                            <span\n                              >${this.hass.localize(\n                                \"ui.panel.config.hardware.documentation\"\n                              )}</span\n                            >\n                            <span slot=\"secondary\"\n                              >${this.hass.localize(\n                                \"ui.panel.config.hardware.documentation_description\"\n                              )}</span\n                            >\n                            <ha-icon-next slot=\"meta\"></ha-icon-next>\n                          </ha-clickable-list-item>\n                        </mwc-list>\n                      `\n                    : \"\"}\n                  ${boardConfigEntries.length ||\n                  isComponentLoaded(this.hass, \"hassio\")\n                    ? html`<div class=\"card-actions\">\n                        ${boardConfigEntries.length\n                          ? html`\n                              <mwc-button\n                                .entry=${boardConfigEntries[0]}\n                                @click=${this._openOptionsFlow}\n                              >\n                                ${this.hass.localize(\n                                  \"ui.panel.config.hardware.configure\"\n                                )}\n                              </mwc-button>\n                            `\n                          : nothing}\n                        ${isComponentLoaded(this.hass, \"hassio\")\n                          ? html`\n                              <mwc-button @click=${this._openHardware}>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.hardware.available_hardware.title\"\n                                )}\n                              </mwc-button>\n                            `\n                          : nothing}\n                      </div>`\n                    : \"\"}\n                </ha-card>\n              `\n            : \"\"}\n          ${dongles?.length\n            ? html`<ha-card outlined>\n                ${dongles.map((dongle) => {\n                  const configEntry = dongle.config_entries\n                    .map((id) => this._configEntries?.[id])\n                    .filter(\n                      (entry) => entry?.supports_options && !entry.disabled_by\n                    )[0];\n                  return html`<div class=\"row\">\n                    ${dongle.name}${configEntry\n                      ? html`<mwc-button\n                          .entry=${configEntry}\n                          @click=${this._openOptionsFlow}\n                        >\n                          ${this.hass.localize(\n                            \"ui.panel.config.hardware.configure\"\n                          )}\n                        </mwc-button>`\n                      : \"\"}\n                  </div>`;\n                })}\n              </ha-card>`\n            : \"\"}\n          ${this._systemStatusData\n            ? html`<ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.hardware.processor\"\n                      )}\n                    </div>\n                    <div class=\"value\">\n                      ${this._systemStatusData.cpu_percent ||\n                      \"-\"}${blankBeforePercent(this.hass.locale)}%\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._cpuEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>\n                <ha-card outlined>\n                  <div class=\"header\">\n                    <div class=\"title\">\n                      ${this.hass.localize(\"ui.panel.config.hardware.memory\")}\n                    </div>\n                    <div class=\"value\">\n                      ${round(this._systemStatusData.memory_used_mb / 1024, 1)}\n                      GB /\n                      ${round(\n                        (this._systemStatusData.memory_used_mb! +\n                          this._systemStatusData.memory_free_mb!) /\n                          1024,\n                        0\n                      )}\n                      GB\n                    </div>\n                  </div>\n                  <div class=\"card-content\">\n                    <ha-chart-base\n                      .hass=${this.hass}\n                      .data=${{\n                        datasets: [\n                          {\n                            ...DATA_SET_CONFIG,\n                            data: this._memoryEntries,\n                          },\n                        ],\n                      }}\n                      .options=${this._chartOptions}\n                    ></ha-chart-base>\n                  </div>\n                </ha-card>`\n            : isComponentLoaded(this.hass, \"hardware\")\n              ? html`<ha-card outlined>\n                  <div class=\"card-content\">\n                    <div class=\"value\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.hardware.loading_system_data\"\n                      )}\n                    </div>\n                  </div>\n                </ha-card>`\n              : \"\"}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private async _load() {\n    if (isComponentLoaded(this.hass, \"usb\")) {\n      await scanUSBDevices(this.hass);\n    }\n\n    const isHassioLoaded = isComponentLoaded(this.hass, \"hassio\");\n    try {\n      if (isComponentLoaded(this.hass, \"hardware\")) {\n        this._hardwareInfo = await this.hass.callWS({ type: \"hardware/info\" });\n      }\n\n      if (isHassioLoaded && !this._hardwareInfo?.hardware.length) {\n        this._OSData = await fetchHassioHassOsInfo(this.hass);\n      }\n    } catch (err: any) {\n      this._error = err.message || err;\n    }\n  }\n\n  private async _openOptionsFlow(ev) {\n    const entry = ev.currentTarget.entry;\n    if (!entry) {\n      return;\n    }\n    showOptionsFlowDialog(this, entry);\n  }\n\n  private async _openHardware() {\n    showhardwareAvailableDialog(this);\n  }\n\n  private async _showRestartDialog() {\n    showRestartDialog(this);\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 28px 20px 0;\n        max-width: 1040px;\n        margin: 0 auto;\n        --mdc-list-side-padding: 24px;\n        --mdc-list-vertical-padding: 0;\n      }\n      ha-card {\n        max-width: 600px;\n        margin: 0 auto;\n        height: 100%;\n        justify-content: space-between;\n        flex-direction: column;\n        display: flex;\n        margin-bottom: 16px;\n      }\n      .card-content {\n        display: flex;\n        justify-content: space-between;\n        flex-direction: column;\n        padding: 16px;\n      }\n      .card-content img {\n        max-width: 300px;\n        margin: auto;\n      }\n      .board-info {\n        text-align: center;\n      }\n      .primary-text {\n        font-size: 16px;\n        margin: 0;\n      }\n      .secondary-text {\n        font-size: 14px;\n        margin-bottom: 0;\n        color: var(--secondary-text-color);\n      }\n\n      .header {\n        padding: 16px;\n        display: flex;\n        justify-content: space-between;\n      }\n\n      .header .title {\n        color: var(--secondary-text-color);\n        font-size: 18px;\n      }\n\n      .header .value {\n        font-size: 16px;\n      }\n      .row {\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        height: 48px;\n        padding: 8px 16px;\n      }\n      .card-actions {\n        display: flex;\n        justify-content: space-between;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-hardware\": HaConfigHardware;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}