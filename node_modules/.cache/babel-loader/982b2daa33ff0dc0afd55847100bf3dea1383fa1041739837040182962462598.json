{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _wrapRegExp from \"@babel/runtime/helpers/wrapRegExp\";\nimport { ReactiveElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { renderMarkdown } from \"../resources/render-markdown\";\nconst _gitHubMarkdownAlerts = {\n  reType: /*#__PURE__*/_wrapRegExp(/((\\[!(caution|important|note|tip|warning)\\])(?:\\s|\\\\n)?)/i, {\n    input: 1,\n    type: 3\n  }),\n  typeToHaAlert: {\n    caution: \"error\",\n    important: \"info\",\n    note: \"info\",\n    tip: \"success\",\n    warning: \"warning\"\n  }\n};\nlet HaMarkdownElement = _decorate([customElement(\"ha-markdown-element\")], function (_initialize, _ReactiveElement) {\n  class HaMarkdownElement extends _ReactiveElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaMarkdownElement,\n    d: [{\n      kind: \"field\",\n      decorators: [property()],\n      key: \"content\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"allowSvg\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"breaks\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"lazy-images\"\n      })],\n      key: \"lazyImages\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"createRenderRoot\",\n      value: function createRenderRoot() {\n        return this;\n      }\n    }, {\n      kind: \"method\",\n      key: \"update\",\n      value: function update(changedProps) {\n        _get(_getPrototypeOf(HaMarkdownElement.prototype), \"update\", this).call(this, changedProps);\n        if (this.content !== undefined) {\n          this._render();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_render\",\n      value: async function _render() {\n        this.innerHTML = await renderMarkdown(String(this.content), {\n          breaks: this.breaks,\n          gfm: true\n        }, {\n          allowSvg: this.allowSvg\n        });\n        this._resize();\n        const walker = document.createTreeWalker(this, NodeFilter.SHOW_ELEMENT, null);\n        while (walker.nextNode()) {\n          const node = walker.currentNode;\n\n          // Open external links in a new window\n          if (node instanceof HTMLAnchorElement && node.host !== document.location.host) {\n            node.target = \"_blank\";\n\n            // protect referrer on external links and deny window.opener access for security reasons\n            // (see https://mathiasbynens.github.io/rel-noopener/)\n            node.rel = \"noreferrer noopener\";\n\n            // Fire a resize event when images loaded to notify content resized\n          } else if (node instanceof HTMLImageElement) {\n            if (this.lazyImages) {\n              node.loading = \"lazy\";\n            }\n            node.addEventListener(\"load\", this._resize);\n          } else if (node instanceof HTMLQuoteElement) {\n            var _node$firstElementChi;\n            /**\n             * Map GitHub blockquote elements to our ha-alert element\n             * https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts\n             */\n            const gitHubAlertMatch = ((_node$firstElementChi = node.firstElementChild) === null || _node$firstElementChi === void 0 || (_node$firstElementChi = _node$firstElementChi.firstChild) === null || _node$firstElementChi === void 0 ? void 0 : _node$firstElementChi.textContent) && _gitHubMarkdownAlerts.reType.exec(node.firstElementChild.firstChild.textContent);\n            if (gitHubAlertMatch) {\n              const {\n                type: alertType\n              } = gitHubAlertMatch.groups;\n              const haAlertNode = document.createElement(\"ha-alert\");\n              haAlertNode.alertType = _gitHubMarkdownAlerts.typeToHaAlert[alertType.toLowerCase()];\n              haAlertNode.append(...Array.from(node.childNodes).map(child => Array.from(child.childNodes)).reduce((acc, val) => acc.concat(val), []).filter(childNode => childNode.textContent && childNode.textContent !== gitHubAlertMatch.input));\n              walker.parentNode().replaceChild(haAlertNode, node);\n            }\n          } else if (node instanceof HTMLElement && [\"ha-alert\", \"ha-qr-code\", \"ha-icon\", \"ha-svg-icon\"].includes(node.localName)) {\n            import( /* webpackInclude: /(ha-alert)|(ha-qr-code)|(ha-icon)|(ha-svg-icon)/ */`./${node.localName}`);\n          }\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_resize\",\n      value() {\n        return () => fireEvent(this, \"content-resize\");\n      }\n    }]\n  };\n}, ReactiveElement);","map":{"version":3,"names":["ReactiveElement","customElement","property","fireEvent","renderMarkdown","_gitHubMarkdownAlerts","reType","_wrapRegExp","input","type","typeToHaAlert","caution","important","note","tip","warning","HaMarkdownElement","_decorate","_initialize","_ReactiveElement","constructor","args","F","d","kind","decorators","key","value","Boolean","attribute","createRenderRoot","update","changedProps","_get","_getPrototypeOf","prototype","call","content","undefined","_render","innerHTML","String","breaks","gfm","allowSvg","_resize","walker","document","createTreeWalker","NodeFilter","SHOW_ELEMENT","nextNode","node","currentNode","HTMLAnchorElement","host","location","target","rel","HTMLImageElement","lazyImages","loading","addEventListener","HTMLQuoteElement","_node$firstElementChi","gitHubAlertMatch","firstElementChild","firstChild","textContent","exec","alertType","groups","haAlertNode","createElement","toLowerCase","append","Array","from","childNodes","map","child","reduce","acc","val","concat","filter","childNode","parentNode","replaceChild","HTMLElement","includes","localName"],"sources":["/workspaces/frontend/src/components/ha-markdown-element.ts"],"sourcesContent":["import { ReactiveElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { renderMarkdown } from \"../resources/render-markdown\";\n\nconst _gitHubMarkdownAlerts = {\n  reType:\n    /(?<input>(\\[!(?<type>caution|important|note|tip|warning)\\])(?:\\s|\\\\n)?)/i,\n  typeToHaAlert: {\n    caution: \"error\",\n    important: \"info\",\n    note: \"info\",\n    tip: \"success\",\n    warning: \"warning\",\n  },\n};\n\n@customElement(\"ha-markdown-element\")\nclass HaMarkdownElement extends ReactiveElement {\n  @property() public content?;\n\n  @property({ type: Boolean }) public allowSvg = false;\n\n  @property({ type: Boolean }) public breaks = false;\n\n  @property({ type: Boolean, attribute: \"lazy-images\" }) public lazyImages =\n    false;\n\n  protected createRenderRoot() {\n    return this;\n  }\n\n  protected update(changedProps) {\n    super.update(changedProps);\n    if (this.content !== undefined) {\n      this._render();\n    }\n  }\n\n  private async _render() {\n    this.innerHTML = await renderMarkdown(\n      String(this.content),\n      {\n        breaks: this.breaks,\n        gfm: true,\n      },\n      {\n        allowSvg: this.allowSvg,\n      }\n    );\n\n    this._resize();\n\n    const walker = document.createTreeWalker(\n      this,\n      NodeFilter.SHOW_ELEMENT,\n      null\n    );\n\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n\n      // Open external links in a new window\n      if (\n        node instanceof HTMLAnchorElement &&\n        node.host !== document.location.host\n      ) {\n        node.target = \"_blank\";\n\n        // protect referrer on external links and deny window.opener access for security reasons\n        // (see https://mathiasbynens.github.io/rel-noopener/)\n        node.rel = \"noreferrer noopener\";\n\n        // Fire a resize event when images loaded to notify content resized\n      } else if (node instanceof HTMLImageElement) {\n        if (this.lazyImages) {\n          node.loading = \"lazy\";\n        }\n        node.addEventListener(\"load\", this._resize);\n      } else if (node instanceof HTMLQuoteElement) {\n        /**\n         * Map GitHub blockquote elements to our ha-alert element\n         * https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#alerts\n         */\n        const gitHubAlertMatch =\n          node.firstElementChild?.firstChild?.textContent &&\n          _gitHubMarkdownAlerts.reType.exec(\n            node.firstElementChild.firstChild.textContent\n          );\n\n        if (gitHubAlertMatch) {\n          const { type: alertType } = gitHubAlertMatch.groups!;\n          const haAlertNode = document.createElement(\"ha-alert\");\n          haAlertNode.alertType =\n            _gitHubMarkdownAlerts.typeToHaAlert[alertType.toLowerCase()];\n\n          haAlertNode.append(\n            ...Array.from(node.childNodes)\n              .map((child) => Array.from(child.childNodes))\n              .reduce((acc, val) => acc.concat(val), [])\n              .filter(\n                (childNode) =>\n                  childNode.textContent &&\n                  childNode.textContent !== gitHubAlertMatch.input\n              )\n          );\n          walker.parentNode()!.replaceChild(haAlertNode, node);\n        }\n      } else if (\n        node instanceof HTMLElement &&\n        [\"ha-alert\", \"ha-qr-code\", \"ha-icon\", \"ha-svg-icon\"].includes(\n          node.localName\n        )\n      ) {\n        import(\n          /* webpackInclude: /(ha-alert)|(ha-qr-code)|(ha-icon)|(ha-svg-icon)/ */ `./${node.localName}`\n        );\n      }\n    }\n  }\n\n  private _resize = () => fireEvent(this, \"content-resize\");\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-markdown-element\": HaMarkdownElement;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}