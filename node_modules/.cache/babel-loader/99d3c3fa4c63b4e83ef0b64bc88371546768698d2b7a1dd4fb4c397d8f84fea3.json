{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.flat.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.global-this.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.get-own-property-names.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.json.parse.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d;\nvar _e;\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\nimport { getCompatibleStyle, adoptStyles } from './css-tag.js';\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\nexport * from './css-tag.js';\nvar NODE_MODE = false;\nvar global = NODE_MODE ? globalThis : window;\nif (NODE_MODE) {\n  (_a = global.customElements) !== null && _a !== void 0 ? _a : global.customElements = customElements;\n}\nvar DEV_MODE = true;\nvar requestUpdateThenable;\nvar issueWarning;\nvar trustedTypes = global.trustedTypes;\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nvar emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';\nvar polyfillSupport = DEV_MODE ? global.reactiveElementPolyfillSupportDevMode : global.reactiveElementPolyfillSupport;\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  var issuedWarnings = (_b = global.litIssuedWarnings) !== null && _b !== void 0 ? _b : global.litIssuedWarnings = new Set();\n  // Issue a warning, if we haven't already.\n  issueWarning = function issueWarning(code, warning) {\n    warning += \" See https://lit.dev/msg/\".concat(code, \" for more information.\");\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n  issueWarning('dev-mode', \"Lit is in dev mode. Not recommended for production!\");\n  // Issue polyfill support warning.\n  if (((_c = global.ShadyDOM) === null || _c === void 0 ? void 0 : _c.inUse) && polyfillSupport === undefined) {\n    issueWarning('polyfill-support-missing', \"Shadow DOM is being polyfilled via `ShadyDOM` but \" + \"the `polyfill-support` module has not been loaded.\");\n  }\n  requestUpdateThenable = function requestUpdateThenable(name) {\n    return {\n      then: function then(onfulfilled, _onrejected) {\n        issueWarning('request-update-promise', \"The `requestUpdate` method should no longer return a Promise but \" + \"does so on `\".concat(name, \"`. Use `updateComplete` instead.\"));\n        if (onfulfilled !== undefined) {\n          onfulfilled(false);\n        }\n      }\n    };\n  };\n}\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nvar debugLogEvent = DEV_MODE ? function (event) {\n  var shouldEmit = global.emitLitDebugLogEvents;\n  if (!shouldEmit) {\n    return;\n  }\n  global.dispatchEvent(new CustomEvent('lit-debug', {\n    detail: event\n  }));\n} : undefined;\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nvar JSCompiler_renameProperty = function JSCompiler_renameProperty(prop, _obj) {\n  return prop;\n};\nexport var defaultConverter = {\n  toAttribute: function toAttribute(value, type) {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n  fromAttribute: function fromAttribute(value, type) {\n    var fromValue = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value);\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport var notEqual = function notEqual(value, old) {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\nvar defaultPropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual\n};\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nvar finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport var ReactiveElement\n// In the Node build, this `extends` clause will be substituted with\n// `(globalThis.HTMLElement ?? HTMLElement)`.\n//\n// This way, we will first prefer any global `HTMLElement` polyfill that the\n// user has assigned, and then fall back to the `HTMLElement` shim which has\n// been imported (see note at the top of this file about how this import is\n// generated by Rollup). Note that the `HTMLElement` variable has been\n// shadowed by this import, so it no longer refers to the global.\n= /*#__PURE__*/function (_HTMLElement) {\n  _inherits(ReactiveElement, _HTMLElement);\n  function ReactiveElement() {\n    var _this;\n    _classCallCheck(this, ReactiveElement);\n    _this = _callSuper(this, ReactiveElement);\n    _this.__instanceProperties = new Map();\n    /**\n     * True if there is a pending update as a result of calling `requestUpdate()`.\n     * Should only be read.\n     * @category updates\n     */\n    _this.isUpdatePending = false;\n    /**\n     * Is set to `true` after the first update. The element code cannot assume\n     * that `renderRoot` exists before the element `hasUpdated`.\n     * @category updates\n     */\n    _this.hasUpdated = false;\n    /**\n     * Name of currently reflecting property\n     */\n    _this.__reflectingProperty = null;\n    _this.__initialize();\n    return _this;\n  }\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  _createClass(ReactiveElement, [{\n    key: \"__initialize\",\n    value:\n    /**\n     * Internal only override point for customizing work done when elements\n     * are constructed.\n     */\n    function __initialize() {\n      var _this2 = this;\n      var _a;\n      this.__updatePromise = new Promise(function (res) {\n        return _this2.enableUpdating = res;\n      });\n      this._$changedProperties = new Map();\n      this.__saveInstanceProperties();\n      // ensures first update will be caught by an early access of\n      // `updateComplete`\n      this.requestUpdate();\n      (_a = this.constructor._initializers) === null || _a === void 0 ? void 0 : _a.forEach(function (i) {\n        return i(_this2);\n      });\n    }\n    /**\n     * Registers a `ReactiveController` to participate in the element's reactive\n     * update cycle. The element automatically calls into any registered\n     * controllers during its lifecycle callbacks.\n     *\n     * If the element is connected when `addController()` is called, the\n     * controller's `hostConnected()` callback will be immediately called.\n     * @category controllers\n     */\n  }, {\n    key: \"addController\",\n    value: function addController(controller) {\n      var _a, _b;\n      ((_a = this.__controllers) !== null && _a !== void 0 ? _a : this.__controllers = []).push(controller);\n      // If a controller is added after the element has been connected,\n      // call hostConnected. Note, re-using existence of `renderRoot` here\n      // (which is set in connectedCallback) to avoid the need to track a\n      // first connected state.\n      if (this.renderRoot !== undefined && this.isConnected) {\n        (_b = controller.hostConnected) === null || _b === void 0 ? void 0 : _b.call(controller);\n      }\n    }\n    /**\n     * Removes a `ReactiveController` from the element.\n     * @category controllers\n     */\n  }, {\n    key: \"removeController\",\n    value: function removeController(controller) {\n      var _a;\n      // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n      // splice do nothing.\n      (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n  }, {\n    key: \"__saveInstanceProperties\",\n    value: function __saveInstanceProperties() {\n      var _this3 = this;\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      this.constructor.elementProperties.forEach(function (_v, p) {\n        if (_this3.hasOwnProperty(p)) {\n          _this3.__instanceProperties.set(p, _this3[p]);\n          delete _this3[p];\n        }\n      });\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     *\n     * @return Returns a node into which to render.\n     * @category rendering\n     */\n  }, {\n    key: \"createRenderRoot\",\n    value: function createRenderRoot() {\n      var _a;\n      var renderRoot = (_a = this.shadowRoot) !== null && _a !== void 0 ? _a : this.attachShadow(this.constructor.shadowRootOptions);\n      adoptStyles(renderRoot, this.constructor.elementStyles);\n      return renderRoot;\n    }\n    /**\n     * On first connection, creates the element's renderRoot, sets up\n     * element styling, and enables updating.\n     * @category lifecycle\n     */\n  }, {\n    key: \"connectedCallback\",\n    value: function connectedCallback() {\n      var _a;\n      // create renderRoot before first update.\n      if (this.renderRoot === undefined) {\n        this.renderRoot = this.createRenderRoot();\n      }\n      this.enableUpdating(true);\n      (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(function (c) {\n        var _a;\n        return (_a = c.hostConnected) === null || _a === void 0 ? void 0 : _a.call(c);\n      });\n    }\n    /**\n     * Note, this method should be considered final and not overridden. It is\n     * overridden on the element instance with a function that triggers the first\n     * update.\n     * @category updates\n     */\n  }, {\n    key: \"enableUpdating\",\n    value: function enableUpdating(_requestedUpdate) {}\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     * @category lifecycle\n     */\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var _a;\n      (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(function (c) {\n        var _a;\n        return (_a = c.hostDisconnected) === null || _a === void 0 ? void 0 : _a.call(c);\n      });\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     *\n     * Specifically, when an attribute is set, the corresponding property is set.\n     * You should rarely need to implement this callback. If this method is\n     * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n     * called.\n     *\n     * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n     * on MDN for more information about the `attributeChangedCallback`.\n     * @category attributes\n     */\n  }, {\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(name, _old, value) {\n      this._$attributeToProperty(name, value);\n    }\n  }, {\n    key: \"__propertyToAttribute\",\n    value: function __propertyToAttribute(name, value) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultPropertyDeclaration;\n      var _a;\n      var attr = this.constructor.__attributeNameForProperty(name, options);\n      if (attr !== undefined && options.reflect === true) {\n        var converter = ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.toAttribute) !== undefined ? options.converter : defaultConverter;\n        var attrValue = converter.toAttribute(value, options.type);\n        if (DEV_MODE && this.constructor.enabledWarnings.indexOf('migration') >= 0 && attrValue === undefined) {\n          issueWarning('undefined-attribute-value', \"The attribute value for the \".concat(name, \" property is \") + \"undefined on element \".concat(this.localName, \". The attribute will be \") + \"removed, but in the previous version of `ReactiveElement`, \" + \"the attribute would not have changed.\");\n        }\n        // Track if the property is being reflected to avoid\n        // setting the property again via `attributeChangedCallback`. Note:\n        // 1. this takes advantage of the fact that the callback is synchronous.\n        // 2. will behave incorrectly if multiple attributes are in the reaction\n        // stack at time of calling. However, since we process attributes\n        // in `update` this should not be possible (or an extreme corner case\n        // that we'd like to discover).\n        // mark state reflecting\n        this.__reflectingProperty = name;\n        if (attrValue == null) {\n          this.removeAttribute(attr);\n        } else {\n          this.setAttribute(attr, attrValue);\n        }\n        // mark state not reflecting\n        this.__reflectingProperty = null;\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_$attributeToProperty\",\n    value: function _$attributeToProperty(name, value) {\n      var _a;\n      var ctor = this.constructor;\n      // Note, hint this as an `AttributeMap` so closure clearly understands\n      // the type; it has issues with tracking types through statics\n      var propName = ctor.__attributeToPropertyMap.get(name);\n      // Use tracking info to avoid reflecting a property value to an attribute\n      // if it was just set because the attribute changed.\n      if (propName !== undefined && this.__reflectingProperty !== propName) {\n        var options = ctor.getPropertyOptions(propName);\n        var converter = typeof options.converter === 'function' ? {\n          fromAttribute: options.converter\n        } : ((_a = options.converter) === null || _a === void 0 ? void 0 : _a.fromAttribute) !== undefined ? options.converter : defaultConverter;\n        // mark state reflecting\n        this.__reflectingProperty = propName;\n        this[propName] = converter.fromAttribute(value, options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        );\n        // mark state not reflecting\n        this.__reflectingProperty = null;\n      }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should be called\n     * when an element should update based on some state not triggered by setting\n     * a reactive property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored.\n     *\n     * @param name name of requesting property\n     * @param oldValue old value of requesting property\n     * @param options property options to use instead of the previously\n     *     configured options\n     * @category updates\n     */\n  }, {\n    key: \"requestUpdate\",\n    value: function requestUpdate(name, oldValue, options) {\n      var shouldRequestUpdate = true;\n      // If we have a property key, perform property update steps.\n      if (name !== undefined) {\n        options = options || this.constructor.getPropertyOptions(name);\n        var hasChanged = options.hasChanged || notEqual;\n        if (hasChanged(this[name], oldValue)) {\n          if (!this._$changedProperties.has(name)) {\n            this._$changedProperties.set(name, oldValue);\n          }\n          // Add to reflecting properties set.\n          // Note, it's important that every change has a chance to add the\n          // property to `_reflectingProperties`. This ensures setting\n          // attribute + property reflects correctly.\n          if (options.reflect === true && this.__reflectingProperty !== name) {\n            if (this.__reflectingProperties === undefined) {\n              this.__reflectingProperties = new Map();\n            }\n            this.__reflectingProperties.set(name, options);\n          }\n        } else {\n          // Abort the request if the property should not be considered changed.\n          shouldRequestUpdate = false;\n        }\n      }\n      if (!this.isUpdatePending && shouldRequestUpdate) {\n        this.__updatePromise = this.__enqueueUpdate();\n      }\n      // Note, since this no longer returns a promise, in dev mode we return a\n      // thenable which warns if it's called.\n      return DEV_MODE ? requestUpdateThenable(this.localName) : undefined;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n  }, {\n    key: \"__enqueueUpdate\",\n    value: (function () {\n      var _enqueueUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              this.isUpdatePending = true;\n              _context.prev = 1;\n              _context.next = 4;\n              return this.__updatePromise;\n            case 4:\n              _context.next = 9;\n              break;\n            case 6:\n              _context.prev = 6;\n              _context.t0 = _context[\"catch\"](1);\n              // Refire any previous errors async so they do not disrupt the update\n              // cycle. Errors are refired so developers have a chance to observe\n              // them, and this can be done by implementing\n              // `window.onunhandledrejection`.\n              Promise.reject(_context.t0);\n            case 9:\n              result = this.scheduleUpdate(); // If `scheduleUpdate` returns a Promise, we await it. This is done to\n              // enable coordinating updates with a scheduler. Note, the result is\n              // checked to avoid delaying an additional microtask unless we need to.\n              if (!(result != null)) {\n                _context.next = 13;\n                break;\n              }\n              _context.next = 13;\n              return result;\n            case 13:\n              return _context.abrupt(\"return\", !this.isUpdatePending);\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[1, 6]]);\n      }));\n      function __enqueueUpdate() {\n        return _enqueueUpdate.apply(this, arguments);\n      }\n      return __enqueueUpdate;\n    }()\n    /**\n     * Schedules an element update. You can override this method to change the\n     * timing of updates by returning a Promise. The update will await the\n     * returned Promise, and you should resolve the Promise to allow the update\n     * to proceed. If this method is overridden, `super.scheduleUpdate()`\n     * must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```ts\n     * override protected async scheduleUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.scheduleUpdate();\n     * }\n     * ```\n     * @category updates\n     */\n    )\n  }, {\n    key: \"scheduleUpdate\",\n    value: function scheduleUpdate() {\n      return this.performUpdate();\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * Call `performUpdate()` to immediately process a pending update. This should\n     * generally not be needed, but it can be done in rare cases when you need to\n     * update synchronously.\n     *\n     * Note: To ensure `performUpdate()` synchronously completes a pending update,\n     * it should not be overridden. In LitElement 2.x it was suggested to override\n     * `performUpdate()` to also customizing update scheduling. Instead, you should now\n     * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n     * scheduling updates via `performUpdate()` continues to work, but will make\n     * also calling `performUpdate()` to synchronously process updates difficult.\n     *\n     * @category updates\n     */\n  }, {\n    key: \"performUpdate\",\n    value: function performUpdate() {\n      var _this4 = this;\n      var _a, _b;\n      // Abort any update if one is not pending when this is called.\n      // This can happen if `performUpdate` is called early to \"flush\"\n      // the update.\n      if (!this.isUpdatePending) {\n        return;\n      }\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'update'\n      });\n      // create renderRoot before first update.\n      if (!this.hasUpdated) {\n        // Produce warning if any class properties are shadowed by class fields\n        if (DEV_MODE) {\n          var shadowedProperties = [];\n          (_a = this.constructor.__reactivePropertyKeys) === null || _a === void 0 ? void 0 : _a.forEach(function (p) {\n            var _a;\n            if (_this4.hasOwnProperty(p) && !((_a = _this4.__instanceProperties) === null || _a === void 0 ? void 0 : _a.has(p))) {\n              shadowedProperties.push(p);\n            }\n          });\n          if (shadowedProperties.length) {\n            throw new Error(\"The following properties on element \".concat(this.localName, \" will not \") + \"trigger updates as expected because they are set using class \" + \"fields: \".concat(shadowedProperties.join(', '), \". \") + \"Native class fields and some compiled output will overwrite \" + \"accessors used for detecting changes. See \" + \"https://lit.dev/msg/class-field-shadowing \" + \"for more information.\");\n          }\n        }\n      }\n      // Mixin instance properties once, if they exist.\n      if (this.__instanceProperties) {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.__instanceProperties.forEach(function (v, p) {\n          return _this4[p] = v;\n        });\n        this.__instanceProperties = undefined;\n      }\n      var shouldUpdate = false;\n      var changedProperties = this._$changedProperties;\n      try {\n        shouldUpdate = this.shouldUpdate(changedProperties);\n        if (shouldUpdate) {\n          this.willUpdate(changedProperties);\n          (_b = this.__controllers) === null || _b === void 0 ? void 0 : _b.forEach(function (c) {\n            var _a;\n            return (_a = c.hostUpdate) === null || _a === void 0 ? void 0 : _a.call(c);\n          });\n          this.update(changedProperties);\n        } else {\n          this.__markUpdated();\n        }\n      } catch (e) {\n        // Prevent `firstUpdated` and `updated` from running when there's an\n        // update exception.\n        shouldUpdate = false;\n        // Ensure element can accept additional updates after an exception.\n        this.__markUpdated();\n        throw e;\n      }\n      // The update is no longer considered pending and further updates are now allowed.\n      if (shouldUpdate) {\n        this._$didUpdate(changedProperties);\n      }\n    }\n    /**\n     * Invoked before `update()` to compute values needed during the update.\n     *\n     * Implement `willUpdate` to compute property values that depend on other\n     * properties and are used in the rest of the update process.\n     *\n     * ```ts\n     * willUpdate(changedProperties) {\n     *   // only need to check changed properties for an expensive computation.\n     *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n     *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n     *   }\n     * }\n     *\n     * render() {\n     *   return html`SHA: ${this.sha}`;\n     * }\n     * ```\n     *\n     * @category updates\n     */\n  }, {\n    key: \"willUpdate\",\n    value: function willUpdate(_changedProperties) {}\n    // Note, this is an override point for polyfill-support.\n    // @internal\n  }, {\n    key: \"_$didUpdate\",\n    value: function _$didUpdate(changedProperties) {\n      var _a;\n      (_a = this.__controllers) === null || _a === void 0 ? void 0 : _a.forEach(function (c) {\n        var _a;\n        return (_a = c.hostUpdated) === null || _a === void 0 ? void 0 : _a.call(c);\n      });\n      if (!this.hasUpdated) {\n        this.hasUpdated = true;\n        this.firstUpdated(changedProperties);\n      }\n      this.updated(changedProperties);\n      if (DEV_MODE && this.isUpdatePending && this.constructor.enabledWarnings.indexOf('change-in-update') >= 0) {\n        issueWarning('change-in-update', \"Element \".concat(this.localName, \" scheduled an update \") + \"(generally because a property was set) \" + \"after an update completed, causing a new update to be scheduled. \" + \"This is inefficient and should be avoided unless the next update \" + \"can only be scheduled as a side effect of the previous update.\");\n      }\n    }\n  }, {\n    key: \"__markUpdated\",\n    value: function __markUpdated() {\n      this._$changedProperties = new Map();\n      this.isUpdatePending = false;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super.getUpdateComplete()`, then any subsequent state.\n     *\n     * @return A promise of a boolean that resolves to true if the update completed\n     *     without triggering another update.\n     * @category updates\n     */\n  }, {\n    key: \"updateComplete\",\n    get: function get() {\n      return this.getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   override async getUpdateComplete() {\n     *     const result = await super.getUpdateComplete();\n     *     await this._myChild.updateComplete;\n     *     return result;\n     *   }\n     * }\n     * ```\n     *\n     * @return A promise of a boolean that resolves to true if the update completed\n     *     without triggering another update.\n     * @category updates\n     */\n  }, {\n    key: \"getUpdateComplete\",\n    value: function getUpdateComplete() {\n      return this.__updatePromise;\n    }\n    /**\n     * Controls whether or not `update()` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n  }, {\n    key: \"shouldUpdate\",\n    value: function shouldUpdate(_changedProperties) {\n      return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n  }, {\n    key: \"update\",\n    value: function update(_changedProperties) {\n      var _this5 = this;\n      if (this.__reflectingProperties !== undefined) {\n        // Use forEach so this works even if for/of loops are compiled to for\n        // loops expecting arrays\n        this.__reflectingProperties.forEach(function (v, k) {\n          return _this5.__propertyToAttribute(k, _this5[k], v);\n        });\n        this.__reflectingProperties = undefined;\n      }\n      this.__markUpdated();\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n  }, {\n    key: \"updated\",\n    value: function updated(_changedProperties) {}\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * ```ts\n     * firstUpdated() {\n     *   this.renderRoot.getElementById('my-text-area').focus();\n     * }\n     * ```\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * @param _changedProperties Map of changed properties with old values\n     * @category updates\n     */\n  }, {\n    key: \"firstUpdated\",\n    value: function firstUpdated(_changedProperties) {}\n  }], [{\n    key: \"addInitializer\",\n    value: function addInitializer(initializer) {\n      var _a;\n      this.finalize();\n      ((_a = this._initializers) !== null && _a !== void 0 ? _a : this._initializers = []).push(initializer);\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     * @category attributes\n     */\n  }, {\n    key: \"observedAttributes\",\n    get: function get() {\n      var _this6 = this;\n      // note: piggy backing on this to ensure we're finalized.\n      this.finalize();\n      var attributes = [];\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      this.elementProperties.forEach(function (v, p) {\n        var attr = _this6.__attributeNameForProperty(p, v);\n        if (attr !== undefined) {\n          _this6.__attributeToPropertyMap.set(attr, p);\n          attributes.push(attr);\n        }\n      });\n      return attributes;\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist\n     * and stores a {@linkcode PropertyDeclaration} for the property with the\n     * given options. The property setter calls the property's `hasChanged`\n     * property option or uses a strict identity check to determine whether or not\n     * to request an update.\n     *\n     * This method may be overridden to customize properties; however,\n     * when doing so, it's important to call `super.createProperty` to ensure\n     * the property is setup correctly. This method calls\n     * `getPropertyDescriptor` internally to get a descriptor to install.\n     * To customize what properties do when they are get or set, override\n     * `getPropertyDescriptor`. To customize the options for a property,\n     * implement `createProperty` like this:\n     *\n     * ```ts\n     * static createProperty(name, options) {\n     *   options = Object.assign(options, {myOption: true});\n     *   super.createProperty(name, options);\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n  }, {\n    key: \"createProperty\",\n    value: function createProperty(name) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultPropertyDeclaration;\n      var _a;\n      // if this is a state property, force the attribute to false.\n      if (options.state) {\n        // Cast as any since this is readonly.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        options.attribute = false;\n      }\n      // Note, since this can be called by the `@property` decorator which\n      // is called before `finalize`, we ensure finalization has been kicked off.\n      this.finalize();\n      this.elementProperties.set(name, options);\n      // Do not generate an accessor if the prototype already has one, since\n      // it would be lost otherwise and that would never be the user's intention;\n      // Instead, we expect users to call `requestUpdate` themselves from\n      // user-defined accessors. Note that if the super has an accessor we will\n      // still overwrite it\n      if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n        var key = _typeof(name) === 'symbol' ? Symbol() : \"__\".concat(name);\n        var descriptor = this.getPropertyDescriptor(name, key, options);\n        if (descriptor !== undefined) {\n          Object.defineProperty(this.prototype, name, descriptor);\n          if (DEV_MODE) {\n            // If this class doesn't have its own set, create one and initialize\n            // with the values in the set from the nearest ancestor class, if any.\n            if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n              this.__reactivePropertyKeys = new Set((_a = this.__reactivePropertyKeys) !== null && _a !== void 0 ? _a : []);\n            }\n            this.__reactivePropertyKeys.add(name);\n          }\n        }\n      }\n    }\n    /**\n     * Returns a property descriptor to be defined on the given named property.\n     * If no descriptor is returned, the property will not become an accessor.\n     * For example,\n     *\n     * ```ts\n     * class MyElement extends LitElement {\n     *   static getPropertyDescriptor(name, key, options) {\n     *     const defaultDescriptor =\n     *         super.getPropertyDescriptor(name, key, options);\n     *     const setter = defaultDescriptor.set;\n     *     return {\n     *       get: defaultDescriptor.get,\n     *       set(value) {\n     *         setter.call(this, value);\n     *         // custom action.\n     *       },\n     *       configurable: true,\n     *       enumerable: true\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * @nocollapse\n     * @category properties\n     */\n  }, {\n    key: \"getPropertyDescriptor\",\n    value: function getPropertyDescriptor(name, key, options) {\n      return {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        get: function get() {\n          return this[key];\n        },\n        set: function set(value) {\n          var oldValue = this[name];\n          this[key] = value;\n          this.requestUpdate(name, oldValue, options);\n        },\n        configurable: true,\n        enumerable: true\n      };\n    }\n    /**\n     * Returns the property options associated with the given property.\n     * These options are defined with a `PropertyDeclaration` via the `properties`\n     * object or the `@property` decorator and are registered in\n     * `createProperty(...)`.\n     *\n     * Note, this method should be considered \"final\" and not overridden. To\n     * customize the options for a given property, override\n     * {@linkcode createProperty}.\n     *\n     * @nocollapse\n     * @final\n     * @category properties\n     */\n  }, {\n    key: \"getPropertyOptions\",\n    value: function getPropertyOptions(name) {\n      return this.elementProperties.get(name) || defaultPropertyDeclaration;\n    }\n    /**\n     * Creates property accessors for registered properties, sets up element\n     * styling, and ensures any superclasses are also finalized. Returns true if\n     * the element was finalized.\n     * @nocollapse\n     */\n  }, {\n    key: \"finalize\",\n    value: function finalize() {\n      var _this7 = this;\n      if (this.hasOwnProperty(finalized)) {\n        return false;\n      }\n      this[finalized] = true;\n      // finalize any superclasses\n      var superCtor = Object.getPrototypeOf(this);\n      superCtor.finalize();\n      // Create own set of initializers for this class if any exist on the\n      // superclass and copy them down. Note, for a small perf boost, avoid\n      // creating initializers unless needed.\n      if (superCtor._initializers !== undefined) {\n        this._initializers = _toConsumableArray(superCtor._initializers);\n      }\n      this.elementProperties = new Map(superCtor.elementProperties);\n      // initialize Map populated in observedAttributes\n      this.__attributeToPropertyMap = new Map();\n      // make any properties\n      // Note, only process \"own\" properties since this element will inherit\n      // any properties defined on the superClass, and finalization ensures\n      // the entire prototype chain is finalized.\n      if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n        var props = this.properties;\n        // support symbols in properties (IE11 does not support this)\n        var propKeys = [].concat(_toConsumableArray(Object.getOwnPropertyNames(props)), _toConsumableArray(Object.getOwnPropertySymbols(props)));\n        // This for/of is ok because propKeys is an array\n        var _iterator = _createForOfIteratorHelper(propKeys),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var p = _step.value;\n            // note, use of `any` is due to TypeScript lack of support for symbol in\n            // index types\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.createProperty(p, props[p]);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      this.elementStyles = this.finalizeStyles(this.styles);\n      // DEV mode warnings\n      if (DEV_MODE) {\n        var warnRemovedOrRenamed = function warnRemovedOrRenamed(name) {\n          var renamed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n          if (_this7.prototype.hasOwnProperty(name)) {\n            issueWarning(renamed ? 'renamed-api' : 'removed-api', \"`\".concat(name, \"` is implemented on class \").concat(_this7.name, \". It \") + \"has been \".concat(renamed ? 'renamed' : 'removed', \" \") + \"in this version of LitElement.\");\n          }\n        };\n        warnRemovedOrRenamed('initialize');\n        warnRemovedOrRenamed('requestUpdateInternal');\n        warnRemovedOrRenamed('_getUpdateComplete', true);\n      }\n      return true;\n    }\n    /**\n     * Takes the styles the user supplied via the `static styles` property and\n     * returns the array of styles to apply to the element.\n     * Override this method to integrate into a style management system.\n     *\n     * Styles are deduplicated preserving the _last_ instance in the list. This\n     * is a performance optimization to avoid duplicated styles that can occur\n     * especially when composing via subclassing. The last item is kept to try\n     * to preserve the cascade order with the assumption that it's most important\n     * that last added styles override previous styles.\n     *\n     * @nocollapse\n     * @category styles\n     */\n  }, {\n    key: \"finalizeStyles\",\n    value: function finalizeStyles(styles) {\n      var elementStyles = [];\n      if (Array.isArray(styles)) {\n        // Dedupe the flattened array in reverse order to preserve the last items.\n        // Casting to Array<unknown> works around TS error that\n        // appears to come from trying to flatten a type CSSResultArray.\n        var set = new Set(styles.flat(Infinity).reverse());\n        // Then preserve original order by adding the set items in reverse order.\n        var _iterator2 = _createForOfIteratorHelper(set),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var s = _step2.value;\n            elementStyles.unshift(getCompatibleStyle(s));\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      } else if (styles !== undefined) {\n        elementStyles.push(getCompatibleStyle(styles));\n      }\n      return elementStyles;\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n  }, {\n    key: \"__attributeNameForProperty\",\n    value: function __attributeNameForProperty(name, options) {\n      var attribute = options.attribute;\n      return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;\n    }\n  }]);\n  return ReactiveElement;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n_e = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nReactiveElement[_e] = true;\n/**\n * Memoized list of all element properties, including any superclass properties.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category properties\n */\nReactiveElement.elementProperties = new Map();\n/**\n * Memoized list of all element styles.\n * Created lazily on user subclasses when finalizing the class.\n * @nocollapse\n * @category styles\n */\nReactiveElement.elementStyles = [];\n/**\n * Options used when calling `attachShadow`. Set this property to customize\n * the options for the shadowRoot; for example, to create a closed\n * shadowRoot: `{mode: 'closed'}`.\n *\n * Note, these options are used in `createRenderRoot`. If this method\n * is customized, options should be respected if possible.\n * @nocollapse\n * @category rendering\n */\nReactiveElement.shadowRootOptions = {\n  mode: 'open'\n};\n// Apply polyfills if available\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport({\n  ReactiveElement: ReactiveElement\n});\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  var ensureOwnWarnings = function ensureOwnWarnings(ctor) {\n    if (!ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))) {\n      ctor.enabledWarnings = ctor.enabledWarnings.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings.indexOf(warning) < 0) {\n      this.enabledWarnings.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (warning) {\n    ensureOwnWarnings(this);\n    var i = this.enabledWarnings.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings.splice(i, 1);\n    }\n  };\n}\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n((_d = global.reactiveElementVersions) !== null && _d !== void 0 ? _d : global.reactiveElementVersions = []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning('multiple-versions', \"Multiple versions of Lit loaded. Loading multiple versions \" + \"is not recommended.\");\n}","map":{"version":3,"names":["getCompatibleStyle","adoptStyles","NODE_MODE","global","globalThis","window","_a","customElements","DEV_MODE","requestUpdateThenable","issueWarning","trustedTypes","emptyStringForBooleanAttribute","emptyScript","polyfillSupport","reactiveElementPolyfillSupportDevMode","reactiveElementPolyfillSupport","issuedWarnings","_b","litIssuedWarnings","Set","code","warning","concat","has","console","warn","add","_c","ShadyDOM","inUse","undefined","name","then","onfulfilled","_onrejected","debugLogEvent","event","shouldEmit","emitLitDebugLogEvents","dispatchEvent","CustomEvent","detail","JSCompiler_renameProperty","prop","_obj","defaultConverter","toAttribute","value","type","Boolean","Object","Array","JSON","stringify","fromAttribute","fromValue","Number","parse","e","notEqual","old","defaultPropertyDeclaration","attribute","String","converter","reflect","hasChanged","finalized","ReactiveElement","_HTMLElement","_inherits","_this","_classCallCheck","_callSuper","__instanceProperties","Map","isUpdatePending","hasUpdated","__reflectingProperty","__initialize","_createClass","key","_this2","__updatePromise","Promise","res","enableUpdating","_$changedProperties","__saveInstanceProperties","requestUpdate","constructor","_initializers","forEach","i","addController","controller","__controllers","push","renderRoot","isConnected","hostConnected","call","removeController","splice","indexOf","_this3","elementProperties","_v","p","hasOwnProperty","set","createRenderRoot","shadowRoot","attachShadow","shadowRootOptions","elementStyles","connectedCallback","c","_requestedUpdate","disconnectedCallback","hostDisconnected","attributeChangedCallback","_old","_$attributeToProperty","__propertyToAttribute","options","arguments","length","attr","__attributeNameForProperty","attrValue","enabledWarnings","localName","removeAttribute","setAttribute","ctor","propName","__attributeToPropertyMap","get","getPropertyOptions","oldValue","shouldRequestUpdate","__reflectingProperties","__enqueueUpdate","_enqueueUpdate","_asyncToGenerator","_regeneratorRuntime","mark","_callee","result","wrap","_callee$","_context","prev","next","t0","reject","scheduleUpdate","abrupt","stop","apply","performUpdate","_this4","kind","shadowedProperties","__reactivePropertyKeys","Error","join","v","shouldUpdate","changedProperties","willUpdate","hostUpdate","update","__markUpdated","_$didUpdate","_changedProperties","hostUpdated","firstUpdated","updated","getUpdateComplete","_this5","k","addInitializer","initializer","finalize","_this6","attributes","createProperty","state","noAccessor","prototype","_typeof","Symbol","descriptor","getPropertyDescriptor","defineProperty","configurable","enumerable","_this7","superCtor","getPrototypeOf","_toConsumableArray","props","properties","propKeys","getOwnPropertyNames","getOwnPropertySymbols","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","f","finalizeStyles","styles","warnRemovedOrRenamed","renamed","isArray","flat","Infinity","reverse","_iterator2","_step2","unshift","toLowerCase","_wrapNativeSuper","HTMLElement","_e","mode","ensureOwnWarnings","slice","enableWarning","disableWarning","_d","reactiveElementVersions"],"sources":["../src/reactive-element.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Use this module if you want to create your own base class extending\n * {@link ReactiveElement}.\n * @packageDocumentation\n */\n\nimport {\n  getCompatibleStyle,\n  adoptStyles,\n  CSSResultGroup,\n  CSSResultOrNative,\n} from './css-tag.js';\nimport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\n// In the Node build, this import will be injected by Rollup:\n// import {HTMLElement, customElements} from '@lit-labs/ssr-dom-shim';\n\nexport * from './css-tag.js';\nexport type {\n  ReactiveController,\n  ReactiveControllerHost,\n} from './reactive-controller.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\nif (NODE_MODE) {\n  global.customElements ??= customElements;\n}\n\nconst DEV_MODE = true;\n\nlet requestUpdateThenable: (name: string) => {\n  then: (\n    onfulfilled?: (value: boolean) => void,\n    _onrejected?: () => void\n  ) => void;\n};\n\nlet issueWarning: (code: string, warning: string) => void;\n\nconst trustedTypes = (global as unknown as {trustedTypes?: {emptyScript: ''}})\n  .trustedTypes;\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nconst polyfillSupport = DEV_MODE\n  ? global.reactiveElementPolyfillSupportDevMode\n  : global.reactiveElementPolyfillSupport;\n\nif (DEV_MODE) {\n  // Ensure warnings are issued only 1x, even if multiple versions of Lit\n  // are loaded.\n  const issuedWarnings: Set<string | undefined> = (global.litIssuedWarnings ??=\n    new Set());\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += ` See https://lit.dev/msg/${code} for more information.`;\n    if (!issuedWarnings.has(warning)) {\n      console.warn(warning);\n      issuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n\n  // Issue polyfill support warning.\n  if (global.ShadyDOM?.inUse && polyfillSupport === undefined) {\n    issueWarning(\n      'polyfill-support-missing',\n      `Shadow DOM is being polyfilled via \\`ShadyDOM\\` but ` +\n        `the \\`polyfill-support\\` module has not been loaded.`\n    );\n  }\n\n  requestUpdateThenable = (name) => ({\n    then: (\n      onfulfilled?: (value: boolean) => void,\n      _onrejected?: () => void\n    ) => {\n      issueWarning(\n        'request-update-promise',\n        `The \\`requestUpdate\\` method should no longer return a Promise but ` +\n          `does so on \\`${name}\\`. Use \\`updateComplete\\` instead.`\n      );\n      if (onfulfilled !== undefined) {\n        onfulfilled(false);\n      }\n    },\n  });\n}\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace ReactiveUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry = Update;\n    export interface Update {\n      kind: 'update';\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: ReactiveUnstable.DebugLog.Entry) => {\n      const shouldEmit = (global as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      global.dispatchEvent(\n        new CustomEvent<ReactiveUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n\n/*\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\n/*@__INLINE__*/\nconst JSCompiler_renameProperty = <P extends PropertyKey>(\n  prop: P,\n  _obj: unknown\n): P => prop;\n\n/**\n * Converts property values to and from attribute values.\n */\nexport interface ComplexAttributeConverter<Type = unknown, TypeHint = unknown> {\n  /**\n   * Called to convert an attribute value to a property\n   * value.\n   */\n  fromAttribute?(value: string | null, type?: TypeHint): Type;\n\n  /**\n   * Called to convert a property value to an attribute\n   * value.\n   *\n   * It returns unknown instead of string, to be compatible with\n   * https://github.com/WICG/trusted-types (and similar efforts).\n   */\n  toAttribute?(value: Type, type?: TypeHint): unknown;\n}\n\ntype AttributeConverter<Type = unknown, TypeHint = unknown> =\n  | ComplexAttributeConverter<Type>\n  | ((value: string | null, type?: TypeHint) => Type);\n\n/**\n * Defines options for a property accessor.\n */\nexport interface PropertyDeclaration<Type = unknown, TypeHint = unknown> {\n  /**\n   * When set to `true`, indicates the property is internal private state. The\n   * property should not be set by users. When using TypeScript, this property\n   * should be marked as `private` or `protected`, and it is also a common\n   * practice to use a leading `_` in the name. The property is not added to\n   * `observedAttributes`.\n   */\n  readonly state?: boolean;\n\n  /**\n   * Indicates how and whether the property becomes an observed attribute.\n   * If the value is `false`, the property is not added to `observedAttributes`.\n   * If true or absent, the lowercased property name is observed (e.g. `fooBar`\n   * becomes `foobar`). If a string, the string value is observed (e.g\n   * `attribute: 'foo-bar'`).\n   */\n  readonly attribute?: boolean | string;\n\n  /**\n   * Indicates the type of the property. This is used only as a hint for the\n   * `converter` to determine how to convert the attribute\n   * to/from a property.\n   */\n  readonly type?: TypeHint;\n\n  /**\n   * Indicates how to convert the attribute to/from a property. If this value\n   * is a function, it is used to convert the attribute value a the property\n   * value. If it's an object, it can have keys for `fromAttribute` and\n   * `toAttribute`. If no `toAttribute` function is provided and\n   * `reflect` is set to `true`, the property value is set directly to the\n   * attribute. A default `converter` is used if none is provided; it supports\n   * `Boolean`, `String`, `Number`, `Object`, and `Array`. Note,\n   * when a property changes and the converter is used to update the attribute,\n   * the property is never updated again as a result of the attribute changing,\n   * and vice versa.\n   */\n  readonly converter?: AttributeConverter<Type, TypeHint>;\n\n  /**\n   * Indicates if the property should reflect to an attribute.\n   * If `true`, when the property is set, the attribute is set using the\n   * attribute name determined according to the rules for the `attribute`\n   * property option and the value of the property converted using the rules\n   * from the `converter` property option.\n   */\n  readonly reflect?: boolean;\n\n  /**\n   * A function that indicates if a property should be considered changed when\n   * it is set. The function should take the `newValue` and `oldValue` and\n   * return `true` if an update should be requested.\n   */\n  hasChanged?(value: Type, oldValue: Type): boolean;\n\n  /**\n   * Indicates whether an accessor will be created for this property. By\n   * default, an accessor will be generated for this property that requests an\n   * update when set. If this flag is `true`, no accessor will be created, and\n   * it will be the user's responsibility to call\n   * `this.requestUpdate(propertyName, oldValue)` to request an update when\n   * the property changes.\n   */\n  readonly noAccessor?: boolean;\n}\n\n/**\n * Map of properties to PropertyDeclaration options. For each property an\n * accessor is made, and the property is processed according to the\n * PropertyDeclaration options.\n */\nexport interface PropertyDeclarations {\n  readonly [key: string]: PropertyDeclaration;\n}\n\ntype PropertyDeclarationMap = Map<PropertyKey, PropertyDeclaration>;\n\ntype AttributeMap = Map<string, PropertyKey>;\n\n/**\n * A Map of property keys to values.\n *\n * Takes an optional type parameter T, which when specified as a non-any,\n * non-unknown type, will make the Map more strongly-typed, associating the map\n * keys with their corresponding value type on T.\n *\n * Use `PropertyValues<this>` when overriding ReactiveElement.update() and\n * other lifecycle methods in order to get stronger type-checking on keys\n * and values.\n */\n// This type is conditional so that if the parameter T is not specified, or\n// is `any`, the type will include `Map<PropertyKey, unknown>`. Since T is not\n// given in the uses of PropertyValues in this file, all uses here fallback to\n// meaning `Map<PropertyKey, unknown>`, but if a developer uses\n// `PropertyValues<this>` (or any other value for T) they will get a\n// strongly-typed Map type.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type PropertyValues<T = any> = T extends object\n  ? PropertyValueMap<T>\n  : Map<PropertyKey, unknown>;\n\n/**\n * Do not use, instead prefer {@linkcode PropertyValues}.\n */\n// This type must be exported such that JavaScript generated by the Google\n// Closure Compiler can import a type reference.\nexport interface PropertyValueMap<T> extends Map<PropertyKey, unknown> {\n  get<K extends keyof T>(k: K): T[K];\n  set<K extends keyof T>(key: K, value: T[K]): this;\n  has<K extends keyof T>(k: K): boolean;\n  delete<K extends keyof T>(k: K): boolean;\n}\n\nexport const defaultConverter: ComplexAttributeConverter = {\n  toAttribute(value: unknown, type?: unknown): unknown {\n    switch (type) {\n      case Boolean:\n        value = value ? emptyStringForBooleanAttribute : null;\n        break;\n      case Object:\n      case Array:\n        // if the value is `null` or `undefined` pass this through\n        // to allow removing/no change behavior.\n        value = value == null ? value : JSON.stringify(value);\n        break;\n    }\n    return value;\n  },\n\n  fromAttribute(value: string | null, type?: unknown) {\n    let fromValue: unknown = value;\n    switch (type) {\n      case Boolean:\n        fromValue = value !== null;\n        break;\n      case Number:\n        fromValue = value === null ? null : Number(value);\n        break;\n      case Object:\n      case Array:\n        // Do *not* generate exception when invalid JSON is set as elements\n        // don't normally complain on being mis-configured.\n        // TODO(sorvell): Do generate exception in *dev mode*.\n        try {\n          // Assert to adhere to Bazel's \"must type assert JSON parse\" rule.\n          fromValue = JSON.parse(value!) as unknown;\n        } catch (e) {\n          fromValue = null;\n        }\n        break;\n    }\n    return fromValue;\n  },\n};\n\nexport interface HasChanged {\n  (value: unknown, old: unknown): boolean;\n}\n\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual: HasChanged = (value: unknown, old: unknown): boolean => {\n  // This ensures (old==NaN, value==NaN) always returns false\n  return old !== value && (old === old || value === value);\n};\n\nconst defaultPropertyDeclaration: PropertyDeclaration = {\n  attribute: true,\n  type: String,\n  converter: defaultConverter,\n  reflect: false,\n  hasChanged: notEqual,\n};\n\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n\n/**\n * A string representing one of the supported dev mode warning categories.\n */\nexport type WarningKind = 'change-in-update' | 'migration';\n\nexport type Initializer = (element: ReactiveElement) => void;\n\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n * @noInheritDoc\n */\nexport abstract class ReactiveElement\n  // In the Node build, this `extends` clause will be substituted with\n  // `(globalThis.HTMLElement ?? HTMLElement)`.\n  //\n  // This way, we will first prefer any global `HTMLElement` polyfill that the\n  // user has assigned, and then fall back to the `HTMLElement` shim which has\n  // been imported (see note at the top of this file about how this import is\n  // generated by Rollup). Note that the `HTMLElement` variable has been\n  // shadowed by this import, so it no longer refers to the global.\n  extends HTMLElement\n  implements ReactiveControllerHost\n{\n  // Note: these are patched in only in DEV_MODE.\n  /**\n   * Read or set all the enabled warning categories for this class.\n   *\n   * This property is only used in development builds.\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enabledWarnings?: WarningKind[];\n\n  /**\n   * Enable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Enable for all ReactiveElement subclasses\n   * ReactiveElement.enableWarning?.('migration');\n   *\n   * // Enable for only MyElement and subclasses\n   * MyElement.enableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static enableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Disable the given warning category for this class.\n   *\n   * This method only exists in development builds, so it should be accessed\n   * with a guard like:\n   *\n   * ```ts\n   * // Disable for all ReactiveElement subclasses\n   * ReactiveElement.disableWarning?.('migration');\n   *\n   * // Disable for only MyElement and subclasses\n   * MyElement.disableWarning?.('migration');\n   * ```\n   *\n   * @nocollapse\n   * @category dev-mode\n   */\n  static disableWarning?: (warningKind: WarningKind) => void;\n\n  /**\n   * Adds an initializer function to the class that is called during instance\n   * construction.\n   *\n   * This is useful for code that runs against a `ReactiveElement`\n   * subclass, such as a decorator, that needs to do work for each\n   * instance, such as setting up a `ReactiveController`.\n   *\n   * ```ts\n   * const myDecorator = (target: typeof ReactiveElement, key: string) => {\n   *   target.addInitializer((instance: ReactiveElement) => {\n   *     // This is run during construction of the element\n   *     new MyController(instance);\n   *   });\n   * }\n   * ```\n   *\n   * Decorating a field will then cause each instance to run an initializer\n   * that adds a controller:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   @myDecorator foo;\n   * }\n   * ```\n   *\n   * Initializers are stored per-constructor. Adding an initializer to a\n   * subclass does not add it to a superclass. Since initializers are run in\n   * constructors, initializers will run in order of the class hierarchy,\n   * starting with superclasses and progressing to the instance's class.\n   *\n   * @nocollapse\n   */\n  static addInitializer(initializer: Initializer) {\n    this.finalize();\n    (this._initializers ??= []).push(initializer);\n  }\n\n  static _initializers?: Initializer[];\n\n  /*\n   * Due to closure compiler ES6 compilation bugs, @nocollapse is required on\n   * all static methods and properties with initializers.  Reference:\n   * - https://github.com/google/closure-compiler/issues/1776\n   */\n\n  /**\n   * Maps attribute names to properties; for example `foobar` attribute to\n   * `fooBar` property. Created lazily on user subclasses when finalizing the\n   * class.\n   * @nocollapse\n   */\n  private static __attributeToPropertyMap: AttributeMap;\n\n  /**\n   * Marks class as having finished creating properties.\n   */\n  protected static [finalized] = true;\n\n  /**\n   * Memoized list of all element properties, including any superclass properties.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category properties\n   */\n  static elementProperties: PropertyDeclarationMap = new Map();\n\n  /**\n   * User-supplied object that maps property names to `PropertyDeclaration`\n   * objects containing options for configuring reactive properties. When\n   * a reactive property is set the element will update and render.\n   *\n   * By default properties are public fields, and as such, they should be\n   * considered as primarily settable by element users, either via attribute or\n   * the property itself.\n   *\n   * Generally, properties that are changed by the element should be private or\n   * protected fields and should use the `state: true` option. Properties\n   * marked as `state` do not reflect from the corresponding attribute\n   *\n   * However, sometimes element code does need to set a public property. This\n   * should typically only be done in response to user interaction, and an event\n   * should be fired informing the user; for example, a checkbox sets its\n   * `checked` property when clicked and fires a `changed` event. Mutating\n   * public properties should typically not be done for non-primitive (object or\n   * array) properties. In other cases when an element needs to manage state, a\n   * private property set with the `state: true` option should be used. When\n   * needed, state properties can be initialized via public properties to\n   * facilitate complex interactions.\n   * @nocollapse\n   * @category properties\n   */\n  static properties: PropertyDeclarations;\n\n  /**\n   * Memoized list of all element styles.\n   * Created lazily on user subclasses when finalizing the class.\n   * @nocollapse\n   * @category styles\n   */\n  static elementStyles: Array<CSSResultOrNative> = [];\n\n  /**\n   * Array of styles to apply to the element. The styles should be defined\n   * using the {@linkcode css} tag function, via constructible stylesheets, or\n   * imported from native CSS module scripts.\n   *\n   * Note on Content Security Policy:\n   *\n   * Element styles are implemented with `<style>` tags when the browser doesn't\n   * support adopted StyleSheets. To use such `<style>` tags with the style-src\n   * CSP directive, the style-src value must either include 'unsafe-inline' or\n   * `nonce-<base64-value>` with `<base64-value>` replaced be a server-generated\n   * nonce.\n   *\n   * To provide a nonce to use on generated `<style>` elements, set\n   * `window.litNonce` to a server-generated nonce in your page's HTML, before\n   * loading application code:\n   *\n   * ```html\n   * <script>\n   *   // Generated and unique per request:\n   *   window.litNonce = 'a1b2c3d4';\n   * </script>\n   * ```\n   * @nocollapse\n   * @category styles\n   */\n  static styles?: CSSResultGroup;\n\n  /**\n   * The set of properties defined by this class that caused an accessor to be\n   * added during `createProperty`.\n   * @nocollapse\n   */\n  private static __reactivePropertyKeys?: Set<PropertyKey>;\n\n  /**\n   * Returns a list of attributes corresponding to the registered properties.\n   * @nocollapse\n   * @category attributes\n   */\n  static get observedAttributes() {\n    // note: piggy backing on this to ensure we're finalized.\n    this.finalize();\n    const attributes: string[] = [];\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    this.elementProperties.forEach((v, p) => {\n      const attr = this.__attributeNameForProperty(p, v);\n      if (attr !== undefined) {\n        this.__attributeToPropertyMap.set(attr, p);\n        attributes.push(attr);\n      }\n    });\n    return attributes;\n  }\n\n  /**\n   * Creates a property accessor on the element prototype if one does not exist\n   * and stores a {@linkcode PropertyDeclaration} for the property with the\n   * given options. The property setter calls the property's `hasChanged`\n   * property option or uses a strict identity check to determine whether or not\n   * to request an update.\n   *\n   * This method may be overridden to customize properties; however,\n   * when doing so, it's important to call `super.createProperty` to ensure\n   * the property is setup correctly. This method calls\n   * `getPropertyDescriptor` internally to get a descriptor to install.\n   * To customize what properties do when they are get or set, override\n   * `getPropertyDescriptor`. To customize the options for a property,\n   * implement `createProperty` like this:\n   *\n   * ```ts\n   * static createProperty(name, options) {\n   *   options = Object.assign(options, {myOption: true});\n   *   super.createProperty(name, options);\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  static createProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    // if this is a state property, force the attribute to false.\n    if (options.state) {\n      // Cast as any since this is readonly.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (options as any).attribute = false;\n    }\n    // Note, since this can be called by the `@property` decorator which\n    // is called before `finalize`, we ensure finalization has been kicked off.\n    this.finalize();\n    this.elementProperties.set(name, options);\n    // Do not generate an accessor if the prototype already has one, since\n    // it would be lost otherwise and that would never be the user's intention;\n    // Instead, we expect users to call `requestUpdate` themselves from\n    // user-defined accessors. Note that if the super has an accessor we will\n    // still overwrite it\n    if (!options.noAccessor && !this.prototype.hasOwnProperty(name)) {\n      const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n      const descriptor = this.getPropertyDescriptor(name, key, options);\n      if (descriptor !== undefined) {\n        Object.defineProperty(this.prototype, name, descriptor);\n        if (DEV_MODE) {\n          // If this class doesn't have its own set, create one and initialize\n          // with the values in the set from the nearest ancestor class, if any.\n          if (!this.hasOwnProperty('__reactivePropertyKeys')) {\n            this.__reactivePropertyKeys = new Set(\n              this.__reactivePropertyKeys ?? []\n            );\n          }\n          this.__reactivePropertyKeys!.add(name);\n        }\n      }\n    }\n  }\n\n  /**\n   * Returns a property descriptor to be defined on the given named property.\n   * If no descriptor is returned, the property will not become an accessor.\n   * For example,\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   static getPropertyDescriptor(name, key, options) {\n   *     const defaultDescriptor =\n   *         super.getPropertyDescriptor(name, key, options);\n   *     const setter = defaultDescriptor.set;\n   *     return {\n   *       get: defaultDescriptor.get,\n   *       set(value) {\n   *         setter.call(this, value);\n   *         // custom action.\n   *       },\n   *       configurable: true,\n   *       enumerable: true\n   *     }\n   *   }\n   * }\n   * ```\n   *\n   * @nocollapse\n   * @category properties\n   */\n  protected static getPropertyDescriptor(\n    name: PropertyKey,\n    key: string | symbol,\n    options: PropertyDeclaration\n  ): PropertyDescriptor | undefined {\n    return {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      get(): any {\n        return (this as {[key: string]: unknown})[key as string];\n      },\n      set(this: ReactiveElement, value: unknown) {\n        const oldValue = (this as {} as {[key: string]: unknown})[\n          name as string\n        ];\n        (this as {} as {[key: string]: unknown})[key as string] = value;\n        (this as unknown as ReactiveElement).requestUpdate(\n          name,\n          oldValue,\n          options\n        );\n      },\n      configurable: true,\n      enumerable: true,\n    };\n  }\n\n  /**\n   * Returns the property options associated with the given property.\n   * These options are defined with a `PropertyDeclaration` via the `properties`\n   * object or the `@property` decorator and are registered in\n   * `createProperty(...)`.\n   *\n   * Note, this method should be considered \"final\" and not overridden. To\n   * customize the options for a given property, override\n   * {@linkcode createProperty}.\n   *\n   * @nocollapse\n   * @final\n   * @category properties\n   */\n  static getPropertyOptions(name: PropertyKey) {\n    return this.elementProperties.get(name) || defaultPropertyDeclaration;\n  }\n\n  /**\n   * Creates property accessors for registered properties, sets up element\n   * styling, and ensures any superclasses are also finalized. Returns true if\n   * the element was finalized.\n   * @nocollapse\n   */\n  protected static finalize() {\n    if (this.hasOwnProperty(finalized)) {\n      return false;\n    }\n    this[finalized] = true;\n    // finalize any superclasses\n    const superCtor = Object.getPrototypeOf(this) as typeof ReactiveElement;\n    superCtor.finalize();\n    // Create own set of initializers for this class if any exist on the\n    // superclass and copy them down. Note, for a small perf boost, avoid\n    // creating initializers unless needed.\n    if (superCtor._initializers !== undefined) {\n      this._initializers = [...superCtor._initializers];\n    }\n    this.elementProperties = new Map(superCtor.elementProperties);\n    // initialize Map populated in observedAttributes\n    this.__attributeToPropertyMap = new Map();\n    // make any properties\n    // Note, only process \"own\" properties since this element will inherit\n    // any properties defined on the superClass, and finalization ensures\n    // the entire prototype chain is finalized.\n    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n      const props = this.properties;\n      // support symbols in properties (IE11 does not support this)\n      const propKeys = [\n        ...Object.getOwnPropertyNames(props),\n        ...Object.getOwnPropertySymbols(props),\n      ];\n      // This for/of is ok because propKeys is an array\n      for (const p of propKeys) {\n        // note, use of `any` is due to TypeScript lack of support for symbol in\n        // index types\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.createProperty(p, (props as any)[p]);\n      }\n    }\n    this.elementStyles = this.finalizeStyles(this.styles);\n    // DEV mode warnings\n    if (DEV_MODE) {\n      const warnRemovedOrRenamed = (name: string, renamed = false) => {\n        if (this.prototype.hasOwnProperty(name)) {\n          issueWarning(\n            renamed ? 'renamed-api' : 'removed-api',\n            `\\`${name}\\` is implemented on class ${this.name}. It ` +\n              `has been ${renamed ? 'renamed' : 'removed'} ` +\n              `in this version of LitElement.`\n          );\n        }\n      };\n      warnRemovedOrRenamed('initialize');\n      warnRemovedOrRenamed('requestUpdateInternal');\n      warnRemovedOrRenamed('_getUpdateComplete', true);\n    }\n    return true;\n  }\n\n  /**\n   * Options used when calling `attachShadow`. Set this property to customize\n   * the options for the shadowRoot; for example, to create a closed\n   * shadowRoot: `{mode: 'closed'}`.\n   *\n   * Note, these options are used in `createRenderRoot`. If this method\n   * is customized, options should be respected if possible.\n   * @nocollapse\n   * @category rendering\n   */\n  static shadowRootOptions: ShadowRootInit = {mode: 'open'};\n\n  /**\n   * Takes the styles the user supplied via the `static styles` property and\n   * returns the array of styles to apply to the element.\n   * Override this method to integrate into a style management system.\n   *\n   * Styles are deduplicated preserving the _last_ instance in the list. This\n   * is a performance optimization to avoid duplicated styles that can occur\n   * especially when composing via subclassing. The last item is kept to try\n   * to preserve the cascade order with the assumption that it's most important\n   * that last added styles override previous styles.\n   *\n   * @nocollapse\n   * @category styles\n   */\n  protected static finalizeStyles(\n    styles?: CSSResultGroup\n  ): Array<CSSResultOrNative> {\n    const elementStyles = [];\n    if (Array.isArray(styles)) {\n      // Dedupe the flattened array in reverse order to preserve the last items.\n      // Casting to Array<unknown> works around TS error that\n      // appears to come from trying to flatten a type CSSResultArray.\n      const set = new Set((styles as Array<unknown>).flat(Infinity).reverse());\n      // Then preserve original order by adding the set items in reverse order.\n      for (const s of set) {\n        elementStyles.unshift(getCompatibleStyle(s as CSSResultOrNative));\n      }\n    } else if (styles !== undefined) {\n      elementStyles.push(getCompatibleStyle(styles));\n    }\n    return elementStyles;\n  }\n\n  /**\n   * Node or ShadowRoot into which element DOM should be rendered. Defaults\n   * to an open shadowRoot.\n   * @category rendering\n   */\n  readonly renderRoot!: HTMLElement | ShadowRoot;\n\n  /**\n   * Returns the property name for the given attribute `name`.\n   * @nocollapse\n   */\n  private static __attributeNameForProperty(\n    name: PropertyKey,\n    options: PropertyDeclaration\n  ) {\n    const attribute = options.attribute;\n    return attribute === false\n      ? undefined\n      : typeof attribute === 'string'\n      ? attribute\n      : typeof name === 'string'\n      ? name.toLowerCase()\n      : undefined;\n  }\n\n  private __instanceProperties?: PropertyValues = new Map();\n  // Initialize to an unresolved Promise so we can make sure the element has\n  // connected before first update.\n  private __updatePromise!: Promise<boolean>;\n\n  /**\n   * True if there is a pending update as a result of calling `requestUpdate()`.\n   * Should only be read.\n   * @category updates\n   */\n  isUpdatePending = false;\n\n  /**\n   * Is set to `true` after the first update. The element code cannot assume\n   * that `renderRoot` exists before the element `hasUpdated`.\n   * @category updates\n   */\n  hasUpdated = false;\n\n  /**\n   * Map with keys for any properties that have changed since the last\n   * update cycle with previous values.\n   *\n   * @internal\n   */\n  _$changedProperties!: PropertyValues;\n\n  /**\n   * Map with keys of properties that should be reflected when updated.\n   */\n  private __reflectingProperties?: Map<PropertyKey, PropertyDeclaration>;\n\n  /**\n   * Name of currently reflecting property\n   */\n  private __reflectingProperty: PropertyKey | null = null;\n\n  /**\n   * Set of controllers.\n   */\n  private __controllers?: ReactiveController[];\n\n  constructor() {\n    super();\n    this.__initialize();\n  }\n\n  /**\n   * Internal only override point for customizing work done when elements\n   * are constructed.\n   */\n  private __initialize() {\n    this.__updatePromise = new Promise<boolean>(\n      (res) => (this.enableUpdating = res)\n    );\n    this._$changedProperties = new Map();\n    this.__saveInstanceProperties();\n    // ensures first update will be caught by an early access of\n    // `updateComplete`\n    this.requestUpdate();\n    (this.constructor as typeof ReactiveElement)._initializers?.forEach((i) =>\n      i(this)\n    );\n  }\n\n  /**\n   * Registers a `ReactiveController` to participate in the element's reactive\n   * update cycle. The element automatically calls into any registered\n   * controllers during its lifecycle callbacks.\n   *\n   * If the element is connected when `addController()` is called, the\n   * controller's `hostConnected()` callback will be immediately called.\n   * @category controllers\n   */\n  addController(controller: ReactiveController) {\n    (this.__controllers ??= []).push(controller);\n    // If a controller is added after the element has been connected,\n    // call hostConnected. Note, re-using existence of `renderRoot` here\n    // (which is set in connectedCallback) to avoid the need to track a\n    // first connected state.\n    if (this.renderRoot !== undefined && this.isConnected) {\n      controller.hostConnected?.();\n    }\n  }\n\n  /**\n   * Removes a `ReactiveController` from the element.\n   * @category controllers\n   */\n  removeController(controller: ReactiveController) {\n    // Note, if the indexOf is -1, the >>> will flip the sign which makes the\n    // splice do nothing.\n    this.__controllers?.splice(this.__controllers.indexOf(controller) >>> 0, 1);\n  }\n\n  /**\n   * Fixes any properties set on the instance before upgrade time.\n   * Otherwise these would shadow the accessor and break these properties.\n   * The properties are stored in a Map which is played back after the\n   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n   * (<=41), properties created for native platform properties like (`id` or\n   * `name`) may not have default values set in the element constructor. On\n   * these browsers native properties appear on instances and therefore their\n   * default value will overwrite any element default (e.g. if the element sets\n   * this.id = 'id' in the constructor, the 'id' will become '' since this is\n   * the native platform default).\n   */\n  private __saveInstanceProperties() {\n    // Use forEach so this works even if for/of loops are compiled to for loops\n    // expecting arrays\n    (this.constructor as typeof ReactiveElement).elementProperties.forEach(\n      (_v, p) => {\n        if (this.hasOwnProperty(p)) {\n          this.__instanceProperties!.set(p, this[p as keyof this]);\n          delete this[p as keyof this];\n        }\n      }\n    );\n  }\n\n  /**\n   * Returns the node into which the element should render and by default\n   * creates and returns an open shadowRoot. Implement to customize where the\n   * element's DOM is rendered. For example, to render into the element's\n   * childNodes, return `this`.\n   *\n   * @return Returns a node into which to render.\n   * @category rendering\n   */\n  protected createRenderRoot(): Element | ShadowRoot {\n    const renderRoot =\n      this.shadowRoot ??\n      this.attachShadow(\n        (this.constructor as typeof ReactiveElement).shadowRootOptions\n      );\n    adoptStyles(\n      renderRoot,\n      (this.constructor as typeof ReactiveElement).elementStyles\n    );\n    return renderRoot;\n  }\n\n  /**\n   * On first connection, creates the element's renderRoot, sets up\n   * element styling, and enables updating.\n   * @category lifecycle\n   */\n  connectedCallback() {\n    // create renderRoot before first update.\n    if (this.renderRoot === undefined) {\n      (\n        this as {\n          renderRoot: Element | DocumentFragment;\n        }\n      ).renderRoot = this.createRenderRoot();\n    }\n    this.enableUpdating(true);\n    this.__controllers?.forEach((c) => c.hostConnected?.());\n  }\n\n  /**\n   * Note, this method should be considered final and not overridden. It is\n   * overridden on the element instance with a function that triggers the first\n   * update.\n   * @category updates\n   */\n  protected enableUpdating(_requestedUpdate: boolean) {}\n\n  /**\n   * Allows for `super.disconnectedCallback()` in extensions while\n   * reserving the possibility of making non-breaking feature additions\n   * when disconnecting at some point in the future.\n   * @category lifecycle\n   */\n  disconnectedCallback() {\n    this.__controllers?.forEach((c) => c.hostDisconnected?.());\n  }\n\n  /**\n   * Synchronizes property values when attributes change.\n   *\n   * Specifically, when an attribute is set, the corresponding property is set.\n   * You should rarely need to implement this callback. If this method is\n   * overridden, `super.attributeChangedCallback(name, _old, value)` must be\n   * called.\n   *\n   * See [using the lifecycle callbacks](https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements#using_the_lifecycle_callbacks)\n   * on MDN for more information about the `attributeChangedCallback`.\n   * @category attributes\n   */\n  attributeChangedCallback(\n    name: string,\n    _old: string | null,\n    value: string | null\n  ) {\n    this._$attributeToProperty(name, value);\n  }\n\n  private __propertyToAttribute(\n    name: PropertyKey,\n    value: unknown,\n    options: PropertyDeclaration = defaultPropertyDeclaration\n  ) {\n    const attr = (\n      this.constructor as typeof ReactiveElement\n    ).__attributeNameForProperty(name, options);\n    if (attr !== undefined && options.reflect === true) {\n      const converter =\n        (options.converter as ComplexAttributeConverter)?.toAttribute !==\n        undefined\n          ? (options.converter as ComplexAttributeConverter)\n          : defaultConverter;\n      const attrValue = converter.toAttribute!(value, options.type);\n      if (\n        DEV_MODE &&\n        (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n          'migration'\n        ) >= 0 &&\n        attrValue === undefined\n      ) {\n        issueWarning(\n          'undefined-attribute-value',\n          `The attribute value for the ${name as string} property is ` +\n            `undefined on element ${this.localName}. The attribute will be ` +\n            `removed, but in the previous version of \\`ReactiveElement\\`, ` +\n            `the attribute would not have changed.`\n        );\n      }\n      // Track if the property is being reflected to avoid\n      // setting the property again via `attributeChangedCallback`. Note:\n      // 1. this takes advantage of the fact that the callback is synchronous.\n      // 2. will behave incorrectly if multiple attributes are in the reaction\n      // stack at time of calling. However, since we process attributes\n      // in `update` this should not be possible (or an extreme corner case\n      // that we'd like to discover).\n      // mark state reflecting\n      this.__reflectingProperty = name;\n      if (attrValue == null) {\n        this.removeAttribute(attr);\n      } else {\n        this.setAttribute(attr, attrValue as string);\n      }\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /** @internal */\n  _$attributeToProperty(name: string, value: string | null) {\n    const ctor = this.constructor as typeof ReactiveElement;\n    // Note, hint this as an `AttributeMap` so closure clearly understands\n    // the type; it has issues with tracking types through statics\n    const propName = (ctor.__attributeToPropertyMap as AttributeMap).get(name);\n    // Use tracking info to avoid reflecting a property value to an attribute\n    // if it was just set because the attribute changed.\n    if (propName !== undefined && this.__reflectingProperty !== propName) {\n      const options = ctor.getPropertyOptions(propName);\n      const converter =\n        typeof options.converter === 'function'\n          ? {fromAttribute: options.converter}\n          : options.converter?.fromAttribute !== undefined\n          ? options.converter\n          : defaultConverter;\n      // mark state reflecting\n      this.__reflectingProperty = propName;\n      this[propName as keyof this] = converter.fromAttribute!(\n        value,\n        options.type\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      ) as any;\n      // mark state not reflecting\n      this.__reflectingProperty = null;\n    }\n  }\n\n  /**\n   * Requests an update which is processed asynchronously. This should be called\n   * when an element should update based on some state not triggered by setting\n   * a reactive property. In this case, pass no arguments. It should also be\n   * called when manually implementing a property setter. In this case, pass the\n   * property `name` and `oldValue` to ensure that any configured property\n   * options are honored.\n   *\n   * @param name name of requesting property\n   * @param oldValue old value of requesting property\n   * @param options property options to use instead of the previously\n   *     configured options\n   * @category updates\n   */\n  requestUpdate(\n    name?: PropertyKey,\n    oldValue?: unknown,\n    options?: PropertyDeclaration\n  ): void {\n    let shouldRequestUpdate = true;\n    // If we have a property key, perform property update steps.\n    if (name !== undefined) {\n      options =\n        options ||\n        (this.constructor as typeof ReactiveElement).getPropertyOptions(name);\n      const hasChanged = options.hasChanged || notEqual;\n      if (hasChanged(this[name as keyof this], oldValue)) {\n        if (!this._$changedProperties.has(name)) {\n          this._$changedProperties.set(name, oldValue);\n        }\n        // Add to reflecting properties set.\n        // Note, it's important that every change has a chance to add the\n        // property to `_reflectingProperties`. This ensures setting\n        // attribute + property reflects correctly.\n        if (options.reflect === true && this.__reflectingProperty !== name) {\n          if (this.__reflectingProperties === undefined) {\n            this.__reflectingProperties = new Map();\n          }\n          this.__reflectingProperties.set(name, options);\n        }\n      } else {\n        // Abort the request if the property should not be considered changed.\n        shouldRequestUpdate = false;\n      }\n    }\n    if (!this.isUpdatePending && shouldRequestUpdate) {\n      this.__updatePromise = this.__enqueueUpdate();\n    }\n    // Note, since this no longer returns a promise, in dev mode we return a\n    // thenable which warns if it's called.\n    return DEV_MODE\n      ? (requestUpdateThenable(this.localName) as unknown as void)\n      : undefined;\n  }\n\n  /**\n   * Sets up the element to asynchronously update.\n   */\n  private async __enqueueUpdate() {\n    this.isUpdatePending = true;\n    try {\n      // Ensure any previous update has resolved before updating.\n      // This `await` also ensures that property changes are batched.\n      await this.__updatePromise;\n    } catch (e) {\n      // Refire any previous errors async so they do not disrupt the update\n      // cycle. Errors are refired so developers have a chance to observe\n      // them, and this can be done by implementing\n      // `window.onunhandledrejection`.\n      Promise.reject(e);\n    }\n    const result = this.scheduleUpdate();\n    // If `scheduleUpdate` returns a Promise, we await it. This is done to\n    // enable coordinating updates with a scheduler. Note, the result is\n    // checked to avoid delaying an additional microtask unless we need to.\n    if (result != null) {\n      await result;\n    }\n    return !this.isUpdatePending;\n  }\n\n  /**\n   * Schedules an element update. You can override this method to change the\n   * timing of updates by returning a Promise. The update will await the\n   * returned Promise, and you should resolve the Promise to allow the update\n   * to proceed. If this method is overridden, `super.scheduleUpdate()`\n   * must be called.\n   *\n   * For instance, to schedule updates to occur just before the next frame:\n   *\n   * ```ts\n   * override protected async scheduleUpdate(): Promise<unknown> {\n   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n   *   super.scheduleUpdate();\n   * }\n   * ```\n   * @category updates\n   */\n  protected scheduleUpdate(): void | Promise<unknown> {\n    return this.performUpdate();\n  }\n\n  /**\n   * Performs an element update. Note, if an exception is thrown during the\n   * update, `firstUpdated` and `updated` will not be called.\n   *\n   * Call `performUpdate()` to immediately process a pending update. This should\n   * generally not be needed, but it can be done in rare cases when you need to\n   * update synchronously.\n   *\n   * Note: To ensure `performUpdate()` synchronously completes a pending update,\n   * it should not be overridden. In LitElement 2.x it was suggested to override\n   * `performUpdate()` to also customizing update scheduling. Instead, you should now\n   * override `scheduleUpdate()`. For backwards compatibility with LitElement 2.x,\n   * scheduling updates via `performUpdate()` continues to work, but will make\n   * also calling `performUpdate()` to synchronously process updates difficult.\n   *\n   * @category updates\n   */\n  protected performUpdate(): void | Promise<unknown> {\n    // Abort any update if one is not pending when this is called.\n    // This can happen if `performUpdate` is called early to \"flush\"\n    // the update.\n    if (!this.isUpdatePending) {\n      return;\n    }\n    debugLogEvent?.({kind: 'update'});\n    // create renderRoot before first update.\n    if (!this.hasUpdated) {\n      // Produce warning if any class properties are shadowed by class fields\n      if (DEV_MODE) {\n        const shadowedProperties: string[] = [];\n        (\n          this.constructor as typeof ReactiveElement\n        ).__reactivePropertyKeys?.forEach((p) => {\n          if (this.hasOwnProperty(p) && !this.__instanceProperties?.has(p)) {\n            shadowedProperties.push(p as string);\n          }\n        });\n        if (shadowedProperties.length) {\n          throw new Error(\n            `The following properties on element ${this.localName} will not ` +\n              `trigger updates as expected because they are set using class ` +\n              `fields: ${shadowedProperties.join(', ')}. ` +\n              `Native class fields and some compiled output will overwrite ` +\n              `accessors used for detecting changes. See ` +\n              `https://lit.dev/msg/class-field-shadowing ` +\n              `for more information.`\n          );\n        }\n      }\n    }\n    // Mixin instance properties once, if they exist.\n    if (this.__instanceProperties) {\n      // Use forEach so this works even if for/of loops are compiled to for loops\n      // expecting arrays\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.__instanceProperties!.forEach((v, p) => ((this as any)[p] = v));\n      this.__instanceProperties = undefined;\n    }\n    let shouldUpdate = false;\n    const changedProperties = this._$changedProperties;\n    try {\n      shouldUpdate = this.shouldUpdate(changedProperties);\n      if (shouldUpdate) {\n        this.willUpdate(changedProperties);\n        this.__controllers?.forEach((c) => c.hostUpdate?.());\n        this.update(changedProperties);\n      } else {\n        this.__markUpdated();\n      }\n    } catch (e) {\n      // Prevent `firstUpdated` and `updated` from running when there's an\n      // update exception.\n      shouldUpdate = false;\n      // Ensure element can accept additional updates after an exception.\n      this.__markUpdated();\n      throw e;\n    }\n    // The update is no longer considered pending and further updates are now allowed.\n    if (shouldUpdate) {\n      this._$didUpdate(changedProperties);\n    }\n  }\n\n  /**\n   * Invoked before `update()` to compute values needed during the update.\n   *\n   * Implement `willUpdate` to compute property values that depend on other\n   * properties and are used in the rest of the update process.\n   *\n   * ```ts\n   * willUpdate(changedProperties) {\n   *   // only need to check changed properties for an expensive computation.\n   *   if (changedProperties.has('firstName') || changedProperties.has('lastName')) {\n   *     this.sha = computeSHA(`${this.firstName} ${this.lastName}`);\n   *   }\n   * }\n   *\n   * render() {\n   *   return html`SHA: ${this.sha}`;\n   * }\n   * ```\n   *\n   * @category updates\n   */\n  protected willUpdate(_changedProperties: PropertyValues): void {}\n\n  // Note, this is an override point for polyfill-support.\n  // @internal\n  _$didUpdate(changedProperties: PropertyValues) {\n    this.__controllers?.forEach((c) => c.hostUpdated?.());\n    if (!this.hasUpdated) {\n      this.hasUpdated = true;\n      this.firstUpdated(changedProperties);\n    }\n    this.updated(changedProperties);\n    if (\n      DEV_MODE &&\n      this.isUpdatePending &&\n      (this.constructor as typeof ReactiveElement).enabledWarnings!.indexOf(\n        'change-in-update'\n      ) >= 0\n    ) {\n      issueWarning(\n        'change-in-update',\n        `Element ${this.localName} scheduled an update ` +\n          `(generally because a property was set) ` +\n          `after an update completed, causing a new update to be scheduled. ` +\n          `This is inefficient and should be avoided unless the next update ` +\n          `can only be scheduled as a side effect of the previous update.`\n      );\n    }\n  }\n\n  private __markUpdated() {\n    this._$changedProperties = new Map();\n    this.isUpdatePending = false;\n  }\n\n  /**\n   * Returns a Promise that resolves when the element has completed updating.\n   * The Promise value is a boolean that is `true` if the element completed the\n   * update without triggering another update. The Promise result is `false` if\n   * a property was set inside `updated()`. If the Promise is rejected, an\n   * exception was thrown during the update.\n   *\n   * To await additional asynchronous work, override the `getUpdateComplete`\n   * method. For example, it is sometimes useful to await a rendered element\n   * before fulfilling this Promise. To do this, first await\n   * `super.getUpdateComplete()`, then any subsequent state.\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  get updateComplete(): Promise<boolean> {\n    return this.getUpdateComplete();\n  }\n\n  /**\n   * Override point for the `updateComplete` promise.\n   *\n   * It is not safe to override the `updateComplete` getter directly due to a\n   * limitation in TypeScript which means it is not possible to call a\n   * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n   * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n   * This method should be overridden instead. For example:\n   *\n   * ```ts\n   * class MyElement extends LitElement {\n   *   override async getUpdateComplete() {\n   *     const result = await super.getUpdateComplete();\n   *     await this._myChild.updateComplete;\n   *     return result;\n   *   }\n   * }\n   * ```\n   *\n   * @return A promise of a boolean that resolves to true if the update completed\n   *     without triggering another update.\n   * @category updates\n   */\n  protected getUpdateComplete(): Promise<boolean> {\n    return this.__updatePromise;\n  }\n\n  /**\n   * Controls whether or not `update()` should be called when the element requests\n   * an update. By default, this method always returns `true`, but this can be\n   * customized to control when to update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected shouldUpdate(_changedProperties: PropertyValues): boolean {\n    return true;\n  }\n\n  /**\n   * Updates the element. This method reflects property values to attributes.\n   * It can be overridden to render and keep updated element DOM.\n   * Setting properties inside this method will *not* trigger\n   * another update.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected update(_changedProperties: PropertyValues) {\n    if (this.__reflectingProperties !== undefined) {\n      // Use forEach so this works even if for/of loops are compiled to for\n      // loops expecting arrays\n      this.__reflectingProperties.forEach((v, k) =>\n        this.__propertyToAttribute(k, this[k as keyof this], v)\n      );\n      this.__reflectingProperties = undefined;\n    }\n    this.__markUpdated();\n  }\n\n  /**\n   * Invoked whenever the element is updated. Implement to perform\n   * post-updating tasks via DOM APIs, for example, focusing an element.\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected updated(_changedProperties: PropertyValues) {}\n\n  /**\n   * Invoked when the element is first updated. Implement to perform one time\n   * work on the element after update.\n   *\n   * ```ts\n   * firstUpdated() {\n   *   this.renderRoot.getElementById('my-text-area').focus();\n   * }\n   * ```\n   *\n   * Setting properties inside this method will trigger the element to update\n   * again after this update cycle completes.\n   *\n   * @param _changedProperties Map of changed properties with old values\n   * @category updates\n   */\n  protected firstUpdated(_changedProperties: PropertyValues) {}\n}\n\n// Apply polyfills if available\npolyfillSupport?.({ReactiveElement});\n\n// Dev mode warnings...\nif (DEV_MODE) {\n  // Default warning set.\n  ReactiveElement.enabledWarnings = ['change-in-update'];\n  const ensureOwnWarnings = function (ctor: typeof ReactiveElement) {\n    if (\n      !ctor.hasOwnProperty(JSCompiler_renameProperty('enabledWarnings', ctor))\n    ) {\n      ctor.enabledWarnings = ctor.enabledWarnings!.slice();\n    }\n  };\n  ReactiveElement.enableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    if (this.enabledWarnings!.indexOf(warning) < 0) {\n      this.enabledWarnings!.push(warning);\n    }\n  };\n  ReactiveElement.disableWarning = function (\n    this: typeof ReactiveElement,\n    warning: WarningKind\n  ) {\n    ensureOwnWarnings(this);\n    const i = this.enabledWarnings!.indexOf(warning);\n    if (i >= 0) {\n      this.enabledWarnings!.splice(i, 1);\n    }\n  };\n}\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for ReactiveElement usage.\n(global.reactiveElementVersions ??= []).push('1.6.3');\nif (DEV_MODE && global.reactiveElementVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. Loading multiple versions ` +\n      `is not recommended.`\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}