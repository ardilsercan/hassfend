{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-list/mwc-list\";\nimport \"@material/web/divider/divider\";\nconst mdiClose = \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\";\nconst mdiContentPaste = \"M19,20H5V4H7V7H17V4H19M12,2A1,1 0 0,1 13,3A1,1 0 0,1 12,4A1,1 0 0,1 11,3A1,1 0 0,1 12,2M19,2H14.82C14.4,0.84 13.3,0 12,0C10.7,0 9.6,0.84 9.18,2H5A2,2 0 0,0 3,4V20A2,2 0 0,0 5,22H19A2,2 0 0,0 21,20V4A2,2 0 0,0 19,2Z\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nimport Fuse from \"fuse.js\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { deepEqual } from \"../../../common/util/deep-equal\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-dialog-header\";\nimport \"../../../components/ha-domain-icon\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-button-prev\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-list-item-new\";\nimport \"../../../components/ha-list-new\";\nimport \"../../../components/ha-service-icon\";\nimport \"../../../components/search-input\";\nimport { ACTION_GROUPS, ACTION_ICONS, SERVICE_PREFIX, getService, isService } from \"../../../data/action\";\nimport { CONDITION_GROUPS, CONDITION_ICONS } from \"../../../data/condition\";\nimport { getServiceIcons } from \"../../../data/icons\";\nimport { domainToName, fetchIntegrationManifests } from \"../../../data/integration\";\nimport { TRIGGER_GROUPS, TRIGGER_ICONS } from \"../../../data/trigger\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { PASTE_VALUE } from \"./show-add-automation-element-dialog\";\nconst TYPES = {\n  trigger: {\n    groups: TRIGGER_GROUPS,\n    icons: TRIGGER_ICONS\n  },\n  condition: {\n    groups: CONDITION_GROUPS,\n    icons: CONDITION_ICONS\n  },\n  action: {\n    groups: ACTION_GROUPS,\n    icons: ACTION_ICONS\n  }\n};\nconst ENTITY_DOMAINS_OTHER = new Set([\"date\", \"datetime\", \"device_tracker\", \"text\", \"time\", \"tts\", \"update\", \"weather\", \"image_processing\"]);\nconst ENTITY_DOMAINS_MAIN = new Set([\"notify\"]);\nlet DialogAddAutomationElement = _decorate([customElement(\"add-automation-element-dialog\")], function (_initialize, _LitElement) {\n  class DialogAddAutomationElement extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogAddAutomationElement,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_group\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_prev\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_filter\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_manifests\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_domains\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-dialog\")],\n      key: \"_dialog\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_fullScreen\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_width\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_height\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        var _this$_params;\n        this._params = params;\n        this._group = params.group;\n        if (((_this$_params = this._params) === null || _this$_params === void 0 ? void 0 : _this$_params.type) === \"action\") {\n          this.hass.loadBackendTranslation(\"services\");\n          this._fetchManifests();\n          this._calculateUsedDomains();\n          getServiceIcons(this.hass);\n        }\n        this._fullScreen = matchMedia(\"all and (max-width: 450px), all and (max-height: 500px)\").matches;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        if (this._params) {\n          fireEvent(this, \"dialog-closed\", {\n            dialog: this.localName\n          });\n        }\n        this._height = undefined;\n        this._width = undefined;\n        this._params = undefined;\n        this._group = undefined;\n        this._prev = undefined;\n        this._filter = \"\";\n        this._manifests = undefined;\n        this._domains = undefined;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getGroups\",\n      value() {\n        return (type, group) => group ? isService(group) ? {} : TYPES[type].groups[group].members : TYPES[type].groups;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_convertToItem\",\n      value() {\n        return (key, options, type, localize) => ({\n          group: Boolean(options.members),\n          key,\n          name: localize(\n          // @ts-ignore\n          `ui.panel.config.automation.editor.${type}s.${options.members ? \"groups\" : \"type\"}.${key}.label`),\n          description: localize(\n          // @ts-ignore\n          `ui.panel.config.automation.editor.${type}s.${options.members ? \"groups\" : \"type\"}.${key}.description${options.members ? \"\" : \".picker\"}`),\n          iconPath: options.icon || TYPES[type].icons[key]\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getFilteredItems\",\n      value() {\n        return memoizeOne((type, group, filter, localize, services, manifests) => {\n          const groups = this._getGroups(type, group);\n          const flattenGroups = grp => Object.entries(grp).map(([key, options]) => options.members ? flattenGroups(options.members) : this._convertToItem(key, options, type, localize));\n          const items = flattenGroups(groups).flat();\n          if (type === \"action\") {\n            items.push(...this._services(localize, services, manifests, group));\n          }\n          const options = {\n            keys: [\"key\", \"name\", \"description\"],\n            isCaseSensitive: false,\n            minMatchCharLength: Math.min(filter.length, 2),\n            threshold: 0.2\n          };\n          const fuse = new Fuse(items, options);\n          return fuse.search(filter).map(result => result.item);\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getGroupItems\",\n      value() {\n        return memoizeOne((type, group, domains, localize, services, manifests) => {\n          if (type === \"action\" && isService(group)) {\n            let result = this._services(localize, services, manifests, group);\n            if (group === `${SERVICE_PREFIX}media_player`) {\n              result = [this._convertToItem(\"play_media\", {}, type, localize), ...result];\n            }\n            return result;\n          }\n          const groups = this._getGroups(type, group);\n          const result = Object.entries(groups).map(([key, options]) => this._convertToItem(key, options, type, localize));\n          if (type === \"action\") {\n            if (!this._group) {\n              result.unshift(...this._serviceGroups(localize, services, manifests, domains, undefined));\n            } else if (this._group === \"helpers\") {\n              result.unshift(...this._serviceGroups(localize, services, manifests, domains, \"helper\"));\n            } else if (this._group === \"other\") {\n              result.unshift(...this._serviceGroups(localize, services, manifests, domains, \"other\"));\n            }\n          }\n          return result.sort((a, b) => {\n            if (a.group && b.group) {\n              return 0;\n            }\n            if (a.group && !b.group) {\n              return 1;\n            }\n            if (!a.group && b.group) {\n              return -1;\n            }\n            return stringCompare(a.name, b.name, this.hass.locale.language);\n          });\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_serviceGroups\",\n      value() {\n        return (localize, services, manifests, domains, type) => {\n          if (!services || !manifests) {\n            return [];\n          }\n          const result = [];\n          Object.keys(services).forEach(domain => {\n            const manifest = manifests[domain];\n            const domainUsed = !domains ? true : domains.has(domain);\n            if (type === undefined && (ENTITY_DOMAINS_MAIN.has(domain) || (manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) === \"entity\" && domainUsed && !ENTITY_DOMAINS_OTHER.has(domain)) || type === \"helper\" && (manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) === \"helper\" || type === \"other\" && !ENTITY_DOMAINS_MAIN.has(domain) && (ENTITY_DOMAINS_OTHER.has(domain) || !domainUsed && (manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) === \"entity\" || ![\"helper\", \"entity\"].includes((manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) || \"\"))) {\n              result.push({\n                group: true,\n                icon: html`\n            <ha-domain-icon\n              .hass=${this.hass}\n              .domain=${domain}\n              brandFallback\n            ></ha-domain-icon>\n          `,\n                key: `${SERVICE_PREFIX}${domain}`,\n                name: domainToName(localize, domain, manifest),\n                description: \"\"\n              });\n            }\n          });\n          return result.sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language));\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_services\",\n      value() {\n        return memoizeOne((localize, services, manifests, group) => {\n          if (!services) {\n            return [];\n          }\n          const result = [];\n          let domain;\n          if (isService(group)) {\n            domain = getService(group);\n          }\n          const addDomain = dmn => {\n            const services_keys = Object.keys(services[dmn]);\n            for (const service of services_keys) {\n              var _services$dmn$service, _services$dmn$service2;\n              result.push({\n                group: false,\n                icon: html`\n              <ha-service-icon\n                .hass=${this.hass}\n                .service=${`${dmn}.${service}`}\n              ></ha-service-icon>\n            `,\n                key: `${SERVICE_PREFIX}${dmn}.${service}`,\n                name: `${domain ? \"\" : `${domainToName(localize, dmn)}: `}${this.hass.localize(`component.${dmn}.services.${service}.name`) || ((_services$dmn$service = services[dmn][service]) === null || _services$dmn$service === void 0 ? void 0 : _services$dmn$service.name) || service}`,\n                description: this.hass.localize(`component.${domain}.services.${service}.description`) || ((_services$dmn$service2 = services[dmn][service]) === null || _services$dmn$service2 === void 0 ? void 0 : _services$dmn$service2.description)\n              });\n            }\n          };\n          if (domain) {\n            addDomain(domain);\n            return result.sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language));\n          }\n          if (group && ![\"helpers\", \"other\"].includes(group)) {\n            return [];\n          }\n          Object.keys(services).sort().forEach(dmn => {\n            const manifest = manifests === null || manifests === void 0 ? void 0 : manifests[dmn];\n            if (group === \"helpers\" && (manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) !== \"helper\") {\n              return;\n            }\n            if (group === \"other\" && (ENTITY_DOMAINS_OTHER.has(dmn) || [\"helper\", \"entity\"].includes((manifest === null || manifest === void 0 ? void 0 : manifest.integration_type) || \"\"))) {\n              return;\n            }\n            addDomain(dmn);\n          });\n          return result;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchManifests\",\n      value: async function _fetchManifests() {\n        const manifests = {};\n        const fetched = await fetchIntegrationManifests(this.hass);\n        for (const manifest of fetched) {\n          manifests[manifest.domain] = manifest;\n        }\n        this._manifests = manifests;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateUsedDomains\",\n      value: function _calculateUsedDomains() {\n        const domains = new Set(Object.keys(this.hass.states).map(computeDomain));\n        if (!deepEqual(domains, this._domains)) {\n          this._domains = domains;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_opened\",\n      value: function _opened() {\n        var _querySelector;\n        // Store the width and height so that when we search, box doesn't jump\n        const boundingRect = (_querySelector = this.shadowRoot.querySelector(\"ha-list-new\")) === null || _querySelector === void 0 ? void 0 : _querySelector.getBoundingClientRect();\n        this._width = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.width;\n        this._height = boundingRect === null || boundingRect === void 0 ? void 0 : boundingRect.height;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        var _this$_params2, _changedProperties$ge;\n        if (((_this$_params2 = this._params) === null || _this$_params2 === void 0 ? void 0 : _this$_params2.type) === \"action\" && changedProperties.has(\"hass\") && ((_changedProperties$ge = changedProperties.get(\"hass\")) === null || _changedProperties$ge === void 0 ? void 0 : _changedProperties$ge.states) !== this.hass.states) {\n          this._calculateUsedDomains();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_manifests;\n        if (!this._params) {\n          return nothing;\n        }\n        const items = this._filter ? this._getFilteredItems(this._params.type, this._group, this._filter, this.hass.localize, this.hass.services, this._manifests) : this._getGroupItems(this._params.type, this._group, this._domains, this.hass.localize, this.hass.services, this._manifests);\n        const groupName = isService(this._group) ? domainToName(this.hass.localize, getService(this._group), (_this$_manifests = this._manifests) === null || _this$_manifests === void 0 ? void 0 : _this$_manifests[getService(this._group)]) : this.hass.localize(\n        // @ts-ignore\n        `ui.panel.config.automation.editor.${this._params.type}s.groups.${this._group}.label`);\n        return html`\n      <ha-dialog\n        open\n        hideActions\n        @opened=${this._opened}\n        @closed=${this.closeDialog}\n        .heading=${true}\n      >\n        <div slot=\"heading\">\n          <ha-dialog-header>\n            <span slot=\"title\"\n              >${this._group ? groupName : this.hass.localize(`ui.panel.config.automation.editor.${this._params.type}s.add`)}</span\n            >\n            ${this._group && this._group !== this._params.group ? html`<ha-icon-button-prev\n                  slot=\"navigationIcon\"\n                  @click=${this._back}\n                ></ha-icon-button-prev>` : html`<ha-icon-button\n                  .path=${mdiClose}\n                  slot=\"navigationIcon\"\n                  dialogAction=\"cancel\"\n                ></ha-icon-button>`}\n          </ha-dialog-header>\n          <search-input\n            dialogInitialFocus=${ifDefined(this._fullScreen ? undefined : \"\")}\n            .hass=${this.hass}\n            .filter=${this._filter}\n            @value-changed=${this._filterChanged}\n            .label=${groupName ? this.hass.localize(\"ui.panel.config.automation.editor.search_in\", {\n          group: groupName\n        }) : this.hass.localize(`ui.panel.config.automation.editor.${this._params.type}s.search`)}\n          ></search-input>\n        </div>\n        <ha-list-new\n          dialogInitialFocus=${ifDefined(this._fullScreen ? \"\" : undefined)}\n          style=${styleMap({\n          width: this._width ? `${this._width}px` : \"auto\",\n          height: this._height ? `${Math.min(468, this._height)}px` : \"auto\"\n        })}\n        >\n          ${this._params.clipboardItem && !this._filter && (!this._group || items.find(item => item.key === this._params.clipboardItem)) ? html`<ha-list-item-new\n                  class=\"paste\"\n                  .value=${PASTE_VALUE}\n                  @click=${this._selected}\n                >\n                  ${this.hass.localize(`ui.panel.config.automation.editor.${this._params.type}s.paste`)}\n                  <span slot=\"secondary\"\n                    >${this.hass.localize(\n        // @ts-ignore\n        `ui.panel.config.automation.editor.${this._params.type}s.type.${this._params.clipboardItem}.label`)}</span\n                  >\n                  <ha-svg-icon\n                    slot=\"start\"\n                    .path=${mdiContentPaste}\n                  ></ha-svg-icon\n                  ><ha-svg-icon slot=\"end\" .path=${mdiPlus}></ha-svg-icon>\n                </ha-list-item-new>\n                <md-divider></md-divider>` : \"\"}\n          ${repeat(items, item => item.key, item => html`\n              <ha-list-item-new\n                interactive\n                type=\"button\"\n                .value=${item.key}\n                .group=${item.group}\n                @click=${this._selected}\n              >\n                <div slot=\"headline\">${item.name}</div>\n                <div slot=\"supporting-text\">${item.description}</div>\n                ${item.icon ? html`<span slot=\"start\">${item.icon}</span>` : item.iconPath ? html`<ha-svg-icon\n                        slot=\"start\"\n                        .path=${item.iconPath}\n                      ></ha-svg-icon>` : nothing}\n                ${item.group ? html`<ha-icon-next slot=\"end\"></ha-icon-next>` : html`<ha-svg-icon\n                      slot=\"end\"\n                      .path=${mdiPlus}\n                    ></ha-svg-icon>`}\n              </ha-list-item-new>\n            `)}\n        </ha-list-new>\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_back\",\n      value: function _back() {\n        this._dialog.scrollToPos(0, 0);\n        if (this._filter) {\n          this._filter = \"\";\n          return;\n        }\n        if (this._prev) {\n          this._group = this._prev;\n          this._prev = undefined;\n          return;\n        }\n        this._group = undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_selected\",\n      value: function _selected(ev) {\n        this._dialog.scrollToPos(0, 0);\n        const item = ev.currentTarget;\n        if (item.group) {\n          this._prev = this._group;\n          this._group = item.value;\n          return;\n        }\n        this._params.add(item.value);\n        this.closeDialog();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_filterChanged\",\n      value: function _filterChanged(ev) {\n        this._filter = ev.detail.value;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, haStyleDialog, css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n          --mdc-dialog-max-height: 60vh;\n        }\n        @media all and (min-width: 550px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 500px;\n          }\n        }\n        ha-icon-next {\n          width: 24px;\n        }\n        ha-list-new {\n          max-height: 468px;\n          max-width: 100vw;\n          --md-list-item-leading-space: 24px;\n          --md-list-item-trailing-space: 24px;\n        }\n        ha-list-item-new img {\n          width: 24px;\n        }\n        search-input {\n          display: block;\n          margin: 0 16px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiClose","mdiContentPaste","mdiPlus","Fuse","LitElement","css","html","nothing","customElement","property","query","state","ifDefined","repeat","styleMap","memoizeOne","fireEvent","computeDomain","stringCompare","deepEqual","ACTION_GROUPS","ACTION_ICONS","SERVICE_PREFIX","getService","isService","CONDITION_GROUPS","CONDITION_ICONS","getServiceIcons","domainToName","fetchIntegrationManifests","TRIGGER_GROUPS","TRIGGER_ICONS","haStyle","haStyleDialog","PASTE_VALUE","TYPES","trigger","groups","icons","condition","action","ENTITY_DOMAINS_OTHER","Set","ENTITY_DOMAINS_MAIN","DialogAddAutomationElement","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","_this$_params","_params","_group","group","type","hass","loadBackendTranslation","_fetchManifests","_calculateUsedDomains","_fullScreen","matchMedia","matches","closeDialog","dialog","localName","_height","undefined","_width","_prev","_filter","_manifests","_domains","members","options","localize","Boolean","name","description","iconPath","icon","filter","services","manifests","_getGroups","flattenGroups","grp","Object","entries","map","_convertToItem","items","flat","push","_services","keys","isCaseSensitive","minMatchCharLength","Math","min","length","threshold","fuse","search","result","item","domains","unshift","_serviceGroups","sort","a","b","locale","language","forEach","domain","manifest","domainUsed","has","integration_type","includes","addDomain","dmn","services_keys","service","_services$dmn$service","_services$dmn$service2","fetched","states","_opened","_querySelector","boundingRect","shadowRoot","querySelector","getBoundingClientRect","width","height","willUpdate","changedProperties","_this$_params2","_changedProperties$ge","get","render","_this$_manifests","_getFilteredItems","_getGroupItems","groupName","_back","_filterChanged","clipboardItem","find","_selected","_dialog","scrollToPos","ev","currentTarget","add","detail","static","styles"],"sources":["/workspaces/frontend/src/panels/config/automation/add-automation-element-dialog.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list\";\nimport \"@material/web/divider/divider\";\nimport { mdiClose, mdiContentPaste, mdiPlus } from \"@mdi/js\";\nimport Fuse, { IFuseOptions } from \"fuse.js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { repeat } from \"lit/directives/repeat\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport { deepEqual } from \"../../../common/util/deep-equal\";\nimport \"../../../components/ha-dialog\";\nimport type { HaDialog } from \"../../../components/ha-dialog\";\nimport \"../../../components/ha-dialog-header\";\nimport \"../../../components/ha-domain-icon\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-button-prev\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-list-item-new\";\nimport \"../../../components/ha-list-new\";\nimport \"../../../components/ha-service-icon\";\nimport \"../../../components/search-input\";\nimport {\n  ACTION_GROUPS,\n  ACTION_ICONS,\n  SERVICE_PREFIX,\n  getService,\n  isService,\n} from \"../../../data/action\";\nimport { AutomationElementGroup } from \"../../../data/automation\";\nimport { CONDITION_GROUPS, CONDITION_ICONS } from \"../../../data/condition\";\nimport { getServiceIcons } from \"../../../data/icons\";\nimport {\n  IntegrationManifest,\n  domainToName,\n  fetchIntegrationManifests,\n} from \"../../../data/integration\";\nimport { TRIGGER_GROUPS, TRIGGER_ICONS } from \"../../../data/trigger\";\nimport { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport { HomeAssistant } from \"../../../types\";\nimport {\n  AddAutomationElementDialogParams,\n  PASTE_VALUE,\n} from \"./show-add-automation-element-dialog\";\n\nconst TYPES = {\n  trigger: { groups: TRIGGER_GROUPS, icons: TRIGGER_ICONS },\n  condition: {\n    groups: CONDITION_GROUPS,\n    icons: CONDITION_ICONS,\n  },\n  action: {\n    groups: ACTION_GROUPS,\n    icons: ACTION_ICONS,\n  },\n};\n\ninterface ListItem {\n  key: string;\n  name: string;\n  description: string;\n  iconPath?: string;\n  icon?: TemplateResult;\n  group: boolean;\n}\n\ninterface DomainManifestLookup {\n  [domain: string]: IntegrationManifest;\n}\n\nconst ENTITY_DOMAINS_OTHER = new Set([\n  \"date\",\n  \"datetime\",\n  \"device_tracker\",\n  \"text\",\n  \"time\",\n  \"tts\",\n  \"update\",\n  \"weather\",\n  \"image_processing\",\n]);\n\nconst ENTITY_DOMAINS_MAIN = new Set([\"notify\"]);\n\n@customElement(\"add-automation-element-dialog\")\nclass DialogAddAutomationElement extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: AddAutomationElementDialogParams;\n\n  @state() private _group?: string;\n\n  @state() private _prev?: string;\n\n  @state() private _filter = \"\";\n\n  @state() private _manifests?: DomainManifestLookup;\n\n  @state() private _domains?: Set<string>;\n\n  @query(\"ha-dialog\") private _dialog?: HaDialog;\n\n  private _fullScreen = false;\n\n  @state() private _width?: number;\n\n  @state() private _height?: number;\n\n  public showDialog(params): void {\n    this._params = params;\n    this._group = params.group;\n    if (this._params?.type === \"action\") {\n      this.hass.loadBackendTranslation(\"services\");\n      this._fetchManifests();\n      this._calculateUsedDomains();\n      getServiceIcons(this.hass);\n    }\n    this._fullScreen = matchMedia(\n      \"all and (max-width: 450px), all and (max-height: 500px)\"\n    ).matches;\n  }\n\n  public closeDialog(): void {\n    if (this._params) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._height = undefined;\n    this._width = undefined;\n    this._params = undefined;\n    this._group = undefined;\n    this._prev = undefined;\n    this._filter = \"\";\n    this._manifests = undefined;\n    this._domains = undefined;\n  }\n\n  private _getGroups = (\n    type: AddAutomationElementDialogParams[\"type\"],\n    group: string | undefined\n  ): AutomationElementGroup =>\n    group\n      ? isService(group)\n        ? {}\n        : TYPES[type].groups[group].members!\n      : TYPES[type].groups;\n\n  private _convertToItem = (\n    key: string,\n    options,\n    type: AddAutomationElementDialogParams[\"type\"],\n    localize: LocalizeFunc\n  ): ListItem => ({\n    group: Boolean(options.members),\n    key,\n    name: localize(\n      // @ts-ignore\n      `ui.panel.config.automation.editor.${type}s.${\n        options.members ? \"groups\" : \"type\"\n      }.${key}.label`\n    ),\n    description: localize(\n      // @ts-ignore\n      `ui.panel.config.automation.editor.${type}s.${\n        options.members ? \"groups\" : \"type\"\n      }.${key}.description${options.members ? \"\" : \".picker\"}`\n    ),\n    iconPath: options.icon || TYPES[type].icons[key],\n  });\n\n  private _getFilteredItems = memoizeOne(\n    (\n      type: AddAutomationElementDialogParams[\"type\"],\n      group: string | undefined,\n      filter: string,\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"],\n      manifests?: DomainManifestLookup\n    ): ListItem[] => {\n      const groups = this._getGroups(type, group);\n\n      const flattenGroups = (grp: AutomationElementGroup) =>\n        Object.entries(grp).map(([key, options]) =>\n          options.members\n            ? flattenGroups(options.members)\n            : this._convertToItem(key, options, type, localize)\n        );\n\n      const items = flattenGroups(groups).flat();\n\n      if (type === \"action\") {\n        items.push(...this._services(localize, services, manifests, group));\n      }\n\n      const options: IFuseOptions<ListItem> = {\n        keys: [\"key\", \"name\", \"description\"],\n        isCaseSensitive: false,\n        minMatchCharLength: Math.min(filter.length, 2),\n        threshold: 0.2,\n      };\n      const fuse = new Fuse(items, options);\n      return fuse.search(filter).map((result) => result.item);\n    }\n  );\n\n  private _getGroupItems = memoizeOne(\n    (\n      type: AddAutomationElementDialogParams[\"type\"],\n      group: string | undefined,\n      domains: Set<string> | undefined,\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"],\n      manifests?: DomainManifestLookup\n    ): ListItem[] => {\n      if (type === \"action\" && isService(group)) {\n        let result = this._services(localize, services, manifests, group);\n        if (group === `${SERVICE_PREFIX}media_player`) {\n          result = [\n            this._convertToItem(\"play_media\", {}, type, localize),\n            ...result,\n          ];\n        }\n        return result;\n      }\n\n      const groups = this._getGroups(type, group);\n\n      const result = Object.entries(groups).map(([key, options]) =>\n        this._convertToItem(key, options, type, localize)\n      );\n\n      if (type === \"action\") {\n        if (!this._group) {\n          result.unshift(\n            ...this._serviceGroups(\n              localize,\n              services,\n              manifests,\n              domains,\n              undefined\n            )\n          );\n        } else if (this._group === \"helpers\") {\n          result.unshift(\n            ...this._serviceGroups(\n              localize,\n              services,\n              manifests,\n              domains,\n              \"helper\"\n            )\n          );\n        } else if (this._group === \"other\") {\n          result.unshift(\n            ...this._serviceGroups(\n              localize,\n              services,\n              manifests,\n              domains,\n              \"other\"\n            )\n          );\n        }\n      }\n\n      return result.sort((a, b) => {\n        if (a.group && b.group) {\n          return 0;\n        }\n        if (a.group && !b.group) {\n          return 1;\n        }\n        if (!a.group && b.group) {\n          return -1;\n        }\n        return stringCompare(a.name, b.name, this.hass.locale.language);\n      });\n    }\n  );\n\n  private _serviceGroups = (\n    localize: LocalizeFunc,\n    services: HomeAssistant[\"services\"],\n    manifests: DomainManifestLookup | undefined,\n    domains: Set<string> | undefined,\n    type: \"helper\" | \"other\" | undefined\n  ): ListItem[] => {\n    if (!services || !manifests) {\n      return [];\n    }\n    const result: ListItem[] = [];\n    Object.keys(services).forEach((domain) => {\n      const manifest = manifests[domain];\n      const domainUsed = !domains ? true : domains.has(domain);\n      if (\n        (type === undefined &&\n          (ENTITY_DOMAINS_MAIN.has(domain) ||\n            (manifest?.integration_type === \"entity\" &&\n              domainUsed &&\n              !ENTITY_DOMAINS_OTHER.has(domain)))) ||\n        (type === \"helper\" && manifest?.integration_type === \"helper\") ||\n        (type === \"other\" &&\n          !ENTITY_DOMAINS_MAIN.has(domain) &&\n          (ENTITY_DOMAINS_OTHER.has(domain) ||\n            (!domainUsed && manifest?.integration_type === \"entity\") ||\n            ![\"helper\", \"entity\"].includes(manifest?.integration_type || \"\")))\n      ) {\n        result.push({\n          group: true,\n          icon: html`\n            <ha-domain-icon\n              .hass=${this.hass}\n              .domain=${domain}\n              brandFallback\n            ></ha-domain-icon>\n          `,\n          key: `${SERVICE_PREFIX}${domain}`,\n          name: domainToName(localize, domain, manifest),\n          description: \"\",\n        });\n      }\n    });\n    return result.sort((a, b) =>\n      stringCompare(a.name, b.name, this.hass.locale.language)\n    );\n  };\n\n  private _services = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      services: HomeAssistant[\"services\"],\n      manifests: DomainManifestLookup | undefined,\n      group?: string\n    ): ListItem[] => {\n      if (!services) {\n        return [];\n      }\n      const result: ListItem[] = [];\n\n      let domain: string | undefined;\n\n      if (isService(group)) {\n        domain = getService(group!);\n      }\n\n      const addDomain = (dmn: string) => {\n        const services_keys = Object.keys(services[dmn]);\n\n        for (const service of services_keys) {\n          result.push({\n            group: false,\n            icon: html`\n              <ha-service-icon\n                .hass=${this.hass}\n                .service=${`${dmn}.${service}`}\n              ></ha-service-icon>\n            `,\n            key: `${SERVICE_PREFIX}${dmn}.${service}`,\n            name: `${domain ? \"\" : `${domainToName(localize, dmn)}: `}${\n              this.hass.localize(`component.${dmn}.services.${service}.name`) ||\n              services[dmn][service]?.name ||\n              service\n            }`,\n            description:\n              this.hass.localize(\n                `component.${domain}.services.${service}.description`\n              ) || services[dmn][service]?.description,\n          });\n        }\n      };\n\n      if (domain) {\n        addDomain(domain);\n        return result.sort((a, b) =>\n          stringCompare(a.name, b.name, this.hass.locale.language)\n        );\n      }\n\n      if (group && ![\"helpers\", \"other\"].includes(group)) {\n        return [];\n      }\n\n      Object.keys(services)\n        .sort()\n        .forEach((dmn) => {\n          const manifest = manifests?.[dmn];\n          if (group === \"helpers\" && manifest?.integration_type !== \"helper\") {\n            return;\n          }\n          if (\n            group === \"other\" &&\n            (ENTITY_DOMAINS_OTHER.has(dmn) ||\n              [\"helper\", \"entity\"].includes(manifest?.integration_type || \"\"))\n          ) {\n            return;\n          }\n          addDomain(dmn);\n        });\n\n      return result;\n    }\n  );\n\n  private async _fetchManifests() {\n    const manifests = {};\n    const fetched = await fetchIntegrationManifests(this.hass);\n    for (const manifest of fetched) {\n      manifests[manifest.domain] = manifest;\n    }\n    this._manifests = manifests;\n  }\n\n  private _calculateUsedDomains() {\n    const domains = new Set(Object.keys(this.hass.states).map(computeDomain));\n    if (!deepEqual(domains, this._domains)) {\n      this._domains = domains;\n    }\n  }\n\n  protected _opened(): void {\n    // Store the width and height so that when we search, box doesn't jump\n    const boundingRect =\n      this.shadowRoot!.querySelector(\"ha-list-new\")?.getBoundingClientRect();\n    this._width = boundingRect?.width;\n    this._height = boundingRect?.height;\n  }\n\n  protected willUpdate(changedProperties: PropertyValues): void {\n    if (\n      this._params?.type === \"action\" &&\n      changedProperties.has(\"hass\") &&\n      changedProperties.get(\"hass\")?.states !== this.hass.states\n    ) {\n      this._calculateUsedDomains();\n    }\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    const items = this._filter\n      ? this._getFilteredItems(\n          this._params.type,\n          this._group,\n          this._filter,\n          this.hass.localize,\n          this.hass.services,\n          this._manifests\n        )\n      : this._getGroupItems(\n          this._params.type,\n          this._group,\n          this._domains,\n          this.hass.localize,\n          this.hass.services,\n          this._manifests\n        );\n\n    const groupName = isService(this._group)\n      ? domainToName(\n          this.hass.localize,\n          getService(this._group!),\n          this._manifests?.[getService(this._group!)]\n        )\n      : this.hass.localize(\n          // @ts-ignore\n          `ui.panel.config.automation.editor.${this._params.type}s.groups.${this._group}.label`\n        );\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @opened=${this._opened}\n        @closed=${this.closeDialog}\n        .heading=${true}\n      >\n        <div slot=\"heading\">\n          <ha-dialog-header>\n            <span slot=\"title\"\n              >${this._group\n                ? groupName\n                : this.hass.localize(\n                    `ui.panel.config.automation.editor.${this._params.type}s.add`\n                  )}</span\n            >\n            ${this._group && this._group !== this._params.group\n              ? html`<ha-icon-button-prev\n                  slot=\"navigationIcon\"\n                  @click=${this._back}\n                ></ha-icon-button-prev>`\n              : html`<ha-icon-button\n                  .path=${mdiClose}\n                  slot=\"navigationIcon\"\n                  dialogAction=\"cancel\"\n                ></ha-icon-button>`}\n          </ha-dialog-header>\n          <search-input\n            dialogInitialFocus=${ifDefined(this._fullScreen ? undefined : \"\")}\n            .hass=${this.hass}\n            .filter=${this._filter}\n            @value-changed=${this._filterChanged}\n            .label=${groupName\n              ? this.hass.localize(\n                  \"ui.panel.config.automation.editor.search_in\",\n                  { group: groupName }\n                )\n              : this.hass.localize(\n                  `ui.panel.config.automation.editor.${this._params.type}s.search`\n                )}\n          ></search-input>\n        </div>\n        <ha-list-new\n          dialogInitialFocus=${ifDefined(this._fullScreen ? \"\" : undefined)}\n          style=${styleMap({\n            width: this._width ? `${this._width}px` : \"auto\",\n            height: this._height ? `${Math.min(468, this._height)}px` : \"auto\",\n          })}\n        >\n          ${this._params.clipboardItem &&\n          !this._filter &&\n          (!this._group ||\n            items.find((item) => item.key === this._params!.clipboardItem))\n            ? html`<ha-list-item-new\n                  class=\"paste\"\n                  .value=${PASTE_VALUE}\n                  @click=${this._selected}\n                >\n                  ${this.hass.localize(\n                    `ui.panel.config.automation.editor.${this._params.type}s.paste`\n                  )}\n                  <span slot=\"secondary\"\n                    >${this.hass.localize(\n                      // @ts-ignore\n                      `ui.panel.config.automation.editor.${this._params.type}s.type.${this._params.clipboardItem}.label`\n                    )}</span\n                  >\n                  <ha-svg-icon\n                    slot=\"start\"\n                    .path=${mdiContentPaste}\n                  ></ha-svg-icon\n                  ><ha-svg-icon slot=\"end\" .path=${mdiPlus}></ha-svg-icon>\n                </ha-list-item-new>\n                <md-divider></md-divider>`\n            : \"\"}\n          ${repeat(\n            items,\n            (item) => item.key,\n            (item) => html`\n              <ha-list-item-new\n                interactive\n                type=\"button\"\n                .value=${item.key}\n                .group=${item.group}\n                @click=${this._selected}\n              >\n                <div slot=\"headline\">${item.name}</div>\n                <div slot=\"supporting-text\">${item.description}</div>\n                ${item.icon\n                  ? html`<span slot=\"start\">${item.icon}</span>`\n                  : item.iconPath\n                    ? html`<ha-svg-icon\n                        slot=\"start\"\n                        .path=${item.iconPath}\n                      ></ha-svg-icon>`\n                    : nothing}\n                ${item.group\n                  ? html`<ha-icon-next slot=\"end\"></ha-icon-next>`\n                  : html`<ha-svg-icon\n                      slot=\"end\"\n                      .path=${mdiPlus}\n                    ></ha-svg-icon>`}\n              </ha-list-item-new>\n            `\n          )}\n        </ha-list-new>\n      </ha-dialog>\n    `;\n  }\n\n  private _back() {\n    this._dialog!.scrollToPos(0, 0);\n    if (this._filter) {\n      this._filter = \"\";\n      return;\n    }\n    if (this._prev) {\n      this._group = this._prev;\n      this._prev = undefined;\n      return;\n    }\n    this._group = undefined;\n  }\n\n  private _selected(ev) {\n    this._dialog!.scrollToPos(0, 0);\n    const item = ev.currentTarget;\n    if (item.group) {\n      this._prev = this._group;\n      this._group = item.value;\n      return;\n    }\n    this._params!.add(item.value);\n    this.closeDialog();\n  }\n\n  private _filterChanged(ev) {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-dialog {\n          --dialog-content-padding: 0;\n          --mdc-dialog-max-height: 60vh;\n        }\n        @media all and (min-width: 550px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 500px;\n          }\n        }\n        ha-icon-next {\n          width: 24px;\n        }\n        ha-list-new {\n          max-height: 468px;\n          max-width: 100vw;\n          --md-list-item-leading-space: 24px;\n          --md-list-item-trailing-space: 24px;\n        }\n        ha-list-item-new img {\n          width: 24px;\n        }\n        search-input {\n          display: block;\n          margin: 0 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"add-automation-element-dialog\": DialogAddAutomationElement;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}