{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\nimport { suppressTemplateNotifications } from '../utils/settings.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() {\n    return 'dom-repeat';\n  }\n  static get template() {\n    return null;\n  }\n  static get properties() {\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: !suppressTemplateNotifications,\n        readOnly: true\n      },\n      /**\n       * When greater than zero, defines an initial count of template instances\n       * to render after setting the `items` array, before the next paint, and\n       * puts the `dom-repeat` into \"chunking mode\".  The remaining items (and\n       * any future items as a result of pushing onto the array) will be created\n       * and rendered incrementally at each animation frame thereof until all\n       * instances have been rendered.\n       */\n      initialCount: {\n        type: Number\n      },\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      },\n      /**\n       * When the global `suppressTemplateNotifications` setting is used, setting\n       * `notifyDomChange: true` will enable firing `dom-change` events on this\n       * element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      },\n      /**\n       * When chunking is enabled via `initialCount` and the `items` array is\n       * set to a new array, this flag controls whether the previously rendered\n       * instances are reused or not.\n       *\n       * When `true`, any previously rendered template instances are updated in\n       * place to their new item values synchronously in one shot, and then any\n       * further items (if any) are chunked out.  When `false`, the list is\n       * returned back to its `initialCount` (any instances over the initial\n       * count are discarded) and the remainder of the list is chunked back in.\n       * Set this to `true` to avoid re-creating the list and losing scroll\n       * position, although note that when changing the list to completely\n       * different data the render thread will be blocked until all existing\n       * instances are updated to their new data.\n       */\n      reuseChunkedInstances: {\n        type: Boolean\n      }\n    };\n  }\n  static get observers() {\n    return ['__itemsChanged(items.*)'];\n  }\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__renderStartTime = null;\n    this.__itemsArrayChanged = false;\n    this.__shouldMeasureChunk = false;\n    this.__shouldContinueChunking = false;\n    this.__chunkingId = 0;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:TemplateInstanceBase, Object=)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n    /** @type {TemplateInfo} */\n    this._templateInfo;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i = 0; i < this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n    // Stop chunking if one was in progress\n    if (this.__chunkingId) {\n      cancelAnimationFrame(this.__chunkingId);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i = 0; i < this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n      // Restart chunking if one was in progress when disconnected\n      if (this.__chunkingId) {\n        this.__render();\n      }\n    }\n  }\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      // When `removeNestedTemplates` is true, the \"template\" is the element\n      // itself, which has been given a `_templateInfo` property\n      const thisAsTemplate = /** @type {!HTMLTemplateElement} */\n      /** @type {!HTMLElement} */this;\n      let template = this.template = thisAsTemplate._templateInfo ? thisAsTemplate : ( /** @type {!HTMLTemplateElement} */this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {\n          childList: true\n        });\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function (prop, value) {\n          let i$ = this.__instances;\n          for (let i = 0, inst; i < i$.length && (inst = i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function (inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function () {\n        return obj[methodName].apply(obj, arguments);\n      };\n    }\n    return functionOrMethodName;\n  }\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) {\n      this.__debounceRender(this.__render);\n    }\n  }\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) {\n      this.__debounceRender(this.__render);\n    }\n  }\n  __computeFrameTime(rate) {\n    return Math.ceil(1000 / rate);\n  }\n  __observeChanged() {\n    this.__observePaths = this.observe && this.observe.replace('.*', '.').split(' ');\n  }\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i = 0; i < paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a render.  Restart chunking when the items changed (for\n      // backward compatibility), unless `reuseChunkedInstances` option is set\n      if (change.path === 'items') {\n        this.__itemsArrayChanged = true;\n      }\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(this.__renderDebouncer, delay > 0 ? timeOut.after(delay) : microTask, fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    let items = this.items || [];\n    // Sort and filter the items into a mapping array from instance->item\n    const isntIdxToItemsIdx = this.__sortAndFilterItems(items);\n    // If we're chunking, increase the limit if there are new instances to\n    // create and schedule the next chunk\n    const limit = this.__calculateLimit(isntIdxToItemsIdx.length);\n    // Create, update, and/or remove instances\n    this.__updateInstances(items, limit, isntIdxToItemsIdx);\n    // If we're chunking, schedule a rAF task to measure/continue chunking.     \n    // Do this before any notifying events (renderedItemCount & dom-change)\n    // since those could modify items and enqueue a new full render which will\n    // pre-empt this measurement.\n    if (this.initialCount && (this.__shouldMeasureChunk || this.__shouldContinueChunking)) {\n      cancelAnimationFrame(this.__chunkingId);\n      this.__chunkingId = requestAnimationFrame(() => {\n        this.__chunkingId = null;\n        this.__continueChunking();\n      });\n    }\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    if (!suppressTemplateNotifications || this.notifyDomChange) {\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n  __sortAndFilterItems(items) {\n    // Generate array maping the instance index to the items array index\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i = 0; i < items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) => this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    return isntIdxToItemsIdx;\n  }\n  __calculateLimit(filteredItemCount) {\n    let limit = filteredItemCount;\n    const currentCount = this.__instances.length;\n    // When chunking, we increase the limit from the currently rendered count\n    // by the chunk count that is re-calculated after each rAF (with special\n    // cases for resetting the limit to initialCount after changing items)\n    if (this.initialCount) {\n      let newCount;\n      if (!this.__chunkCount || this.__itemsArrayChanged && !this.reuseChunkedInstances) {\n        // Limit next render to the initial count\n        limit = Math.min(filteredItemCount, this.initialCount);\n        // Subtract off any existing instances to determine the number of\n        // instances that will be created\n        newCount = Math.max(limit - currentCount, 0);\n        // Initialize the chunk size with how many items we're creating\n        this.__chunkCount = newCount || 1;\n      } else {\n        // The number of new instances that will be created is based on the\n        // existing instances, the new list size, and the chunk size\n        newCount = Math.min(Math.max(filteredItemCount - currentCount, 0), this.__chunkCount);\n        // Update the limit based on how many new items we're making, limited\n        // buy the total size of the list\n        limit = Math.min(currentCount + newCount, filteredItemCount);\n      }\n      // Record some state about chunking for use in `__continueChunking`\n      this.__shouldMeasureChunk = newCount === this.__chunkCount;\n      this.__shouldContinueChunking = limit < filteredItemCount;\n      this.__renderStartTime = performance.now();\n    }\n    this.__itemsArrayChanged = false;\n    return limit;\n  }\n  __continueChunking() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio of\n    // target/actual frame time.  Only modify chunk size if our measurement\n    // reflects the cost of a creating a full chunk's worth of instances; this\n    // avoids scaling up the chunk size if we e.g. quickly re-rendered instances\n    // in place\n    if (this.__shouldMeasureChunk) {\n      const renderTime = performance.now() - this.__renderStartTime;\n      const ratio = this._targetFrameTime / renderTime;\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    }\n    // Enqueue a new render if we haven't reached the full size of the list\n    if (this.__shouldContinueChunking) {\n      this.__debounceRender(this.__render);\n    }\n  }\n  __updateInstances(items, limit, isntIdxToItemsIdx) {\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx;\n    // Generate instances and assign items\n    for (instIdx = 0; instIdx < limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i = this.__instances.length - 1; i >= instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i = 0; i < inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n  __detachAndRemoveInstance(idx) {\n    this.__detachInstance(idx);\n    this.__instances.splice(idx, 1);\n  }\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n  __insertInstance(item, instIdx, itemIdx) {\n    const inst = this.__stampInstance(item, instIdx, itemIdx);\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i = 0; i < this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot + 1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n}\ncustomElements.define(DomRepeat.is, DomRepeat);","map":{"version":3,"names":["PolymerElement","TemplateInstanceBase","templatize","modelForElement","Debouncer","enqueueDebouncer","flush","OptionalMutableData","matches","translate","timeOut","microTask","wrap","hideElementsGlobally","suppressTemplateNotifications","domRepeatBase","DomRepeat","is","template","properties","items","type","Array","as","String","value","indexAs","itemsIndexAs","sort","Function","observer","filter","observe","delay","Number","renderedItemCount","notify","readOnly","initialCount","targetFramerate","_targetFrameTime","computed","notifyDomChange","Boolean","reuseChunkedInstances","observers","constructor","__instances","__renderDebouncer","__itemsIdxToInstIdx","__chunkCount","__renderStartTime","__itemsArrayChanged","__shouldMeasureChunk","__shouldContinueChunking","__chunkingId","__sortFn","__filterFn","__observePaths","__ctor","__isDetached","_templateInfo","disconnectedCallback","i","length","__detachInstance","cancelAnimationFrame","connectedCallback","style","display","wrappedParent","parentNode","__attachInstance","__render","__ensureTemplatized","thisAsTemplate","querySelector","MutationObserver","disconnect","Error","childList","instanceProps","mutableData","parentModel","forwardHostProp","prop","i$","inst","notifyInstanceProp","idx","path","JSCompiler_renameProperty","notifyPath","__getMethodHost","__dataHost","_methodHost","__functionFromPropertyValue","functionOrMethodName","methodName","obj","apply","arguments","__sortChanged","__debounceRender","__filterChanged","__computeFrameTime","rate","Math","ceil","__observeChanged","replace","split","__handleObservedPaths","paths","indexOf","__itemsChanged","change","isArray","console","warn","__handleItemPath","fn","debounce","after","bind","render","isntIdxToItemsIdx","__sortAndFilterItems","limit","__calculateLimit","__updateInstances","requestAnimationFrame","__continueChunking","_setRenderedItemCount","dispatchEvent","CustomEvent","bubbles","composed","array","a","b","filteredItemCount","currentCount","newCount","min","max","performance","now","renderTime","ratio","round","itemsIdxToInstIdx","instIdx","itemIdx","item","_setPendingProperty","_flushProperties","__insertInstance","__detachAndRemoveInstance","wrappedRoot","root","children","el","appendChild","parent","insertBefore","splice","__stampInstance","model","beforeRow","beforeNode","_showHideChildren","hidden","itemsPath","slice","dot","itemsIdx","substring","parseInt","itemSubPath","itemPath","_setPendingPropertyOrPath","itemForElement","instance","indexForElement","customElements","define"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/elements/dom-repeat.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport { PolymerElement } from '../../polymer-element.js';\n\nimport { TemplateInstanceBase, templatize, modelForElement } from '../utils/templatize.js'; // eslint-disable-line no-unused-vars\nimport { Debouncer } from '../utils/debounce.js';\nimport { enqueueDebouncer, flush } from '../utils/flush.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { matches, translate } from '../utils/path.js';\nimport { timeOut, microTask } from '../utils/async.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\nimport { suppressTemplateNotifications } from '../utils/settings.js';\n\n/**\n * @constructor\n * @implements {Polymer_OptionalMutableData}\n * @extends {PolymerElement}\n * @private\n */\nconst domRepeatBase = OptionalMutableData(PolymerElement);\n\n/**\n * The `<dom-repeat>` element will automatically stamp and binds one instance\n * of template content to each object in a user-provided array.\n * `dom-repeat` accepts an `items` property, and one instance of the template\n * is stamped for each item into the DOM at the location of the `dom-repeat`\n * element.  The `item` property will be set on each instance's binding\n * scope, thus templates should bind to sub-properties of `item`.\n *\n * Example:\n *\n * ```html\n * <dom-module id=\"employee-list\">\n *\n *   <template>\n *\n *     <div> Employee list: </div>\n *     <dom-repeat items=\"{{employees}}\">\n *       <template>\n *         <div>First name: <span>{{item.first}}</span></div>\n *         <div>Last name: <span>{{item.last}}</span></div>\n *       </template>\n *     </dom-repeat>\n *\n *   </template>\n *\n * </dom-module>\n * ```\n *\n * With the following custom element definition:\n *\n * ```js\n * class EmployeeList extends PolymerElement {\n *   static get is() { return 'employee-list'; }\n *   static get properties() {\n *     return {\n *       employees: {\n *         value() {\n *           return [\n *             {first: 'Bob', last: 'Smith'},\n *             {first: 'Sally', last: 'Johnson'},\n *             ...\n *           ];\n *         }\n *       }\n *     };\n *   }\n * }\n * ```\n *\n * Notifications for changes to items sub-properties will be forwarded to template\n * instances, which will update via the normal structured data notification system.\n *\n * Mutations to the `items` array itself should be made using the Array\n * mutation API's on the PropertyEffects mixin (`push`, `pop`, `splice`,\n * `shift`, `unshift`), and template instances will be kept in sync with the\n * data in the array.\n *\n * Events caught by event handlers within the `dom-repeat` template will be\n * decorated with a `model` property, which represents the binding scope for\n * each template instance.  The model should be used to manipulate data on the\n * instance, for example `event.model.set('item.checked', true);`.\n *\n * Alternatively, the model for a template instance for an element stamped by\n * a `dom-repeat` can be obtained using the `modelForElement` API on the\n * `dom-repeat` that stamped it, for example\n * `this.$.domRepeat.modelForElement(event.target).set('item.checked', true);`.\n * This may be useful for manipulating instance data of event targets obtained\n * by event handlers on parents of the `dom-repeat` (event delegation).\n *\n * A view-specific filter/sort may be applied to each `dom-repeat` by supplying a\n * `filter` and/or `sort` property.  This may be a string that names a function on\n * the host, or a function may be assigned to the property directly.  The functions\n * should implemented following the standard `Array` filter/sort API.\n *\n * In order to re-run the filter or sort functions based on changes to sub-fields\n * of `items`, the `observe` property may be set as a space-separated list of\n * `item` sub-fields that should cause a re-filter/sort when modified.  If\n * the filter or sort function depends on properties not contained in `items`,\n * the user should observe changes to those properties and call `render` to update\n * the view based on the dependency change.\n *\n * For example, for an `dom-repeat` with a filter of the following:\n *\n * ```js\n * isEngineer(item) {\n *   return item.type == 'engineer' || item.manager.type == 'engineer';\n * }\n * ```\n *\n * Then the `observe` property should be configured as follows:\n *\n * ```html\n * <dom-repeat items=\"{{employees}}\" filter=\"isEngineer\" observe=\"type manager.type\">\n * ```\n *\n * @customElement\n * @polymer\n * @extends {domRepeatBase}\n * @appliesMixin OptionalMutableData\n * @summary Custom element for stamping instance of a template bound to\n *   items in an array.\n */\nexport class DomRepeat extends domRepeatBase {\n\n  // Not needed to find template; can be removed once the analyzer\n  // can find the tag name from customElements.define call\n  static get is() { return 'dom-repeat'; }\n\n  static get template() { return null; }\n\n  static get properties() {\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n    return {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the sorted and filtered list of rendered items.\n       * Note, for the index in the `this.items` array, use the value of the\n       * `itemsIndexAs` property.\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * of the instance in the `this.items` array. Note, for the index of\n       * this instance in the sorted and filtered list of rendered items,\n       * use the value of the `indexAs` property.\n       */\n      itemsIndexAs: {\n        type: String,\n        value: 'itemsIndex'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '__sortChanged'\n      },\n\n      /**\n       * A function that can be used to filter items out of the view.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.filter`.\n       * Using a filter function has no effect on the underlying `items` array.\n       */\n      filter: {\n        type: Function,\n        observer: '__filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '__observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time in ms after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffling of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: !suppressTemplateNotifications,\n        readOnly: true\n      },\n\n      /**\n       * When greater than zero, defines an initial count of template instances\n       * to render after setting the `items` array, before the next paint, and\n       * puts the `dom-repeat` into \"chunking mode\".  The remaining items (and\n       * any future items as a result of pushing onto the array) will be created\n       * and rendered incrementally at each animation frame thereof until all\n       * instances have been rendered.\n       */\n      initialCount: {\n        type: Number\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate (in\n       * fps) to target by throttling the number of instances rendered each\n       * frame to not exceed the budget for the target frame rate.  The\n       * framerate is effectively the number of `requestAnimationFrame`s that\n       * it tries to allow to actually fire in a given second. It does this\n       * by measuring the time between `rAF`s and continuously adjusting the\n       * number of items created each `rAF` to maintain the target framerate.\n       * Setting this to a higher number allows lower latency and higher\n       * throughput for event handlers and other tasks, but results in a\n       * longer time for the remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '__computeFrameTime(targetFramerate)'\n      },\n\n      /**\n       * When the global `suppressTemplateNotifications` setting is used, setting\n       * `notifyDomChange: true` will enable firing `dom-change` events on this\n       * element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      },\n\n      /**\n       * When chunking is enabled via `initialCount` and the `items` array is\n       * set to a new array, this flag controls whether the previously rendered\n       * instances are reused or not.\n       *\n       * When `true`, any previously rendered template instances are updated in\n       * place to their new item values synchronously in one shot, and then any\n       * further items (if any) are chunked out.  When `false`, the list is\n       * returned back to its `initialCount` (any instances over the initial\n       * count are discarded) and the remainder of the list is chunked back in.\n       * Set this to `true` to avoid re-creating the list and losing scroll\n       * position, although note that when changing the list to completely\n       * different data the render thread will be blocked until all existing\n       * instances are updated to their new data.\n       */\n      reuseChunkedInstances: {\n        type: Boolean\n      }\n\n    };\n\n  }\n\n  static get observers() {\n    return [ '__itemsChanged(items.*)' ];\n  }\n\n  constructor() {\n    super();\n    this.__instances = [];\n    this.__renderDebouncer = null;\n    this.__itemsIdxToInstIdx = {};\n    this.__chunkCount = null;\n    this.__renderStartTime = null;\n    this.__itemsArrayChanged = false;\n    this.__shouldMeasureChunk = false;\n    this.__shouldContinueChunking = false;\n    this.__chunkingId = 0;\n    this.__sortFn = null;\n    this.__filterFn = null;\n    this.__observePaths = null;\n    /** @type {?function(new:TemplateInstanceBase, Object=)} */\n    this.__ctor = null;\n    this.__isDetached = true;\n    this.template = null;\n    /** @type {TemplateInfo} */\n    this._templateInfo;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.__isDetached = true;\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__detachInstance(i);\n    }\n    // Stop chunking if one was in progress\n    if (this.__chunkingId) {\n      cancelAnimationFrame(this.__chunkingId);\n    }\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    // only perform attachment if the element was previously detached.\n    if (this.__isDetached) {\n      this.__isDetached = false;\n      let wrappedParent = wrap(wrap(this).parentNode);\n      for (let i=0; i<this.__instances.length; i++) {\n        this.__attachInstance(i, wrappedParent);\n      }\n      // Restart chunking if one was in progress when disconnected\n      if (this.__chunkingId) {\n        this.__render();\n      }\n    }\n  }\n\n  __ensureTemplatized() {\n    // Templatizing (generating the instance constructor) needs to wait\n    // until ready, since won't have its template content handed back to\n    // it until then\n    if (!this.__ctor) {\n      // When `removeNestedTemplates` is true, the \"template\" is the element\n      // itself, which has been given a `_templateInfo` property\n      const thisAsTemplate = /** @type {!HTMLTemplateElement} */ (\n          /** @type {!HTMLElement} */ (this));\n      let template = this.template = thisAsTemplate._templateInfo ?\n          thisAsTemplate :\n          /** @type {!HTMLTemplateElement} */ (this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          if (this.querySelector('template')) {\n            observer.disconnect();\n            this.__render();\n          } else {\n            throw new Error('dom-repeat requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return false;\n      }\n      // Template instance props that should be excluded from forwarding\n      let instanceProps = {};\n      instanceProps[this.as] = true;\n      instanceProps[this.indexAs] = true;\n      instanceProps[this.itemsIndexAs] = true;\n      this.__ctor = templatize(template, this, {\n        mutableData: this.mutableData,\n        parentModel: true,\n        instanceProps: instanceProps,\n        /**\n         * @this {DomRepeat}\n         * @param {string} prop Property to set\n         * @param {*} value Value to set property to\n         */\n        forwardHostProp: function(prop, value) {\n          let i$ = this.__instances;\n          for (let i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n            inst.forwardHostProp(prop, value);\n          }\n        },\n        /**\n         * @this {DomRepeat}\n         * @param {Object} inst Instance to notify\n         * @param {string} prop Property to notify\n         * @param {*} value Value to notify\n         */\n        notifyInstanceProp: function(inst, prop, value) {\n          if (matches(this.as, prop)) {\n            let idx = inst[this.itemsIndexAs];\n            if (prop == this.as) {\n              this.items[idx] = value;\n            }\n            let path = translate(this.as, `${JSCompiler_renameProperty('items', this)}.${idx}`, prop);\n            this.notifyPath(path, value);\n          }\n        }\n      });\n    }\n    return true;\n  }\n\n  __getMethodHost() {\n    // Technically this should be the owner of the outermost template.\n    // In shadow dom, this is always getRootNode().host, but we can\n    // approximate this via cooperation with our dataHost always setting\n    // `_methodHost` as long as there were bindings (or id's) on this\n    // instance causing it to get a dataHost.\n    return this.__dataHost._methodHost || this.__dataHost;\n  }\n\n  __functionFromPropertyValue(functionOrMethodName) {\n    if (typeof functionOrMethodName === 'string') {\n      let methodName = functionOrMethodName;\n      let obj = this.__getMethodHost();\n      return function() { return obj[methodName].apply(obj, arguments); };\n    }\n\n    return functionOrMethodName;\n  }\n\n  __sortChanged(sort) {\n    this.__sortFn = this.__functionFromPropertyValue(sort);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __filterChanged(filter) {\n    this.__filterFn = this.__functionFromPropertyValue(filter);\n    if (this.items) { this.__debounceRender(this.__render); }\n  }\n\n  __computeFrameTime(rate) {\n    return Math.ceil(1000/rate);\n  }\n\n  __observeChanged() {\n    this.__observePaths = this.observe &&\n      this.observe.replace('.*', '.').split(' ');\n  }\n\n  __handleObservedPaths(path) {\n    // Handle cases where path changes should cause a re-sort/filter\n    if (this.__sortFn || this.__filterFn) {\n      if (!path) {\n        // Always re-render if the item itself changed\n        this.__debounceRender(this.__render, this.delay);\n      } else if (this.__observePaths) {\n        // Otherwise, re-render if the path changed matches an observed path\n        let paths = this.__observePaths;\n        for (let i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            this.__debounceRender(this.__render, this.delay);\n          }\n        }\n      }\n    }\n  }\n\n  __itemsChanged(change) {\n    if (this.items && !Array.isArray(this.items)) {\n      console.warn('dom-repeat expected array for `items`, found', this.items);\n    }\n    // If path was to an item (e.g. 'items.3' or 'items.3.foo'), forward the\n    // path to that instance synchronously (returns false for non-item paths)\n    if (!this.__handleItemPath(change.path, change.value)) {\n      // Otherwise, the array was reset ('items') or spliced ('items.splices'),\n      // so queue a render.  Restart chunking when the items changed (for\n      // backward compatibility), unless `reuseChunkedInstances` option is set\n      if (change.path === 'items') {\n        this.__itemsArrayChanged = true;\n      }\n      this.__debounceRender(this.__render);\n    }\n  }\n\n  /**\n   * @param {function(this:DomRepeat)} fn Function to debounce.\n   * @param {number=} delay Delay in ms to debounce by.\n   */\n  __debounceRender(fn, delay = 0) {\n    this.__renderDebouncer = Debouncer.debounce(\n          this.__renderDebouncer\n        , delay > 0 ? timeOut.after(delay) : microTask\n        , fn.bind(this));\n    enqueueDebouncer(this.__renderDebouncer);\n  }\n\n  /**\n   * Forces the element to render its content. Normally rendering is\n   * asynchronous to a provoking change. This is done for efficiency so\n   * that multiple changes trigger only a single render. The render method\n   * should be called if, for example, template rendering is required to\n   * validate application state.\n   * @return {void}\n   */\n  render() {\n    // Queue this repeater, then flush all in order\n    this.__debounceRender(this.__render);\n    flush();\n  }\n\n  __render() {\n    if (!this.__ensureTemplatized()) {\n      // No template found yet\n      return;\n    }\n    let items = this.items || [];\n    // Sort and filter the items into a mapping array from instance->item\n    const isntIdxToItemsIdx = this.__sortAndFilterItems(items);\n    // If we're chunking, increase the limit if there are new instances to\n    // create and schedule the next chunk\n    const limit = this.__calculateLimit(isntIdxToItemsIdx.length);\n    // Create, update, and/or remove instances\n    this.__updateInstances(items, limit, isntIdxToItemsIdx);\n    // If we're chunking, schedule a rAF task to measure/continue chunking.     \n    // Do this before any notifying events (renderedItemCount & dom-change)\n    // since those could modify items and enqueue a new full render which will\n    // pre-empt this measurement.\n    if (this.initialCount &&\n       (this.__shouldMeasureChunk || this.__shouldContinueChunking)) {\n      cancelAnimationFrame(this.__chunkingId);\n      this.__chunkingId = requestAnimationFrame(() => {\n        this.__chunkingId = null;\n        this.__continueChunking();\n      });\n    }\n    // Set rendered item count\n    this._setRenderedItemCount(this.__instances.length);\n    // Notify users\n    if (!suppressTemplateNotifications || this.notifyDomChange) {\n      this.dispatchEvent(new CustomEvent('dom-change', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n\n  __sortAndFilterItems(items) {\n    // Generate array maping the instance index to the items array index\n    let isntIdxToItemsIdx = new Array(items.length);\n    for (let i=0; i<items.length; i++) {\n      isntIdxToItemsIdx[i] = i;\n    }\n    // Apply user filter\n    if (this.__filterFn) {\n      isntIdxToItemsIdx = isntIdxToItemsIdx.filter((i, idx, array) =>\n        this.__filterFn(items[i], idx, array));\n    }\n    // Apply user sort\n    if (this.__sortFn) {\n      isntIdxToItemsIdx.sort((a, b) => this.__sortFn(items[a], items[b]));\n    }\n    return isntIdxToItemsIdx;\n  }\n\n  __calculateLimit(filteredItemCount) {\n    let limit = filteredItemCount;\n    const currentCount = this.__instances.length;\n    // When chunking, we increase the limit from the currently rendered count\n    // by the chunk count that is re-calculated after each rAF (with special\n    // cases for resetting the limit to initialCount after changing items)\n    if (this.initialCount) {\n      let newCount;\n      if (!this.__chunkCount ||\n        (this.__itemsArrayChanged && !this.reuseChunkedInstances)) {\n        // Limit next render to the initial count\n        limit = Math.min(filteredItemCount, this.initialCount);\n        // Subtract off any existing instances to determine the number of\n        // instances that will be created\n        newCount = Math.max(limit - currentCount, 0);\n        // Initialize the chunk size with how many items we're creating\n        this.__chunkCount = newCount || 1;\n      } else {\n        // The number of new instances that will be created is based on the\n        // existing instances, the new list size, and the chunk size\n        newCount = Math.min(\n          Math.max(filteredItemCount - currentCount, 0), \n          this.__chunkCount);\n        // Update the limit based on how many new items we're making, limited\n        // buy the total size of the list\n        limit = Math.min(currentCount + newCount, filteredItemCount);\n      }\n      // Record some state about chunking for use in `__continueChunking`\n      this.__shouldMeasureChunk = newCount === this.__chunkCount;\n      this.__shouldContinueChunking = limit < filteredItemCount;\n      this.__renderStartTime = performance.now();\n    }\n    this.__itemsArrayChanged = false;\n    return limit;\n  }\n\n  __continueChunking() {\n    // Simple auto chunkSize throttling algorithm based on feedback loop:\n    // measure actual time between frames and scale chunk count by ratio of\n    // target/actual frame time.  Only modify chunk size if our measurement\n    // reflects the cost of a creating a full chunk's worth of instances; this\n    // avoids scaling up the chunk size if we e.g. quickly re-rendered instances\n    // in place\n    if (this.__shouldMeasureChunk) {\n      const renderTime = performance.now() - this.__renderStartTime;\n      const ratio = this._targetFrameTime / renderTime;\n      this.__chunkCount = Math.round(this.__chunkCount * ratio) || 1;\n    }\n    // Enqueue a new render if we haven't reached the full size of the list\n    if (this.__shouldContinueChunking) {\n      this.__debounceRender(this.__render);\n    }\n  }\n  \n  __updateInstances(items, limit, isntIdxToItemsIdx) {\n    // items->inst map kept for item path forwarding\n    const itemsIdxToInstIdx = this.__itemsIdxToInstIdx = {};\n    let instIdx;\n    // Generate instances and assign items\n    for (instIdx=0; instIdx<limit; instIdx++) {\n      let inst = this.__instances[instIdx];\n      let itemIdx = isntIdxToItemsIdx[instIdx];\n      let item = items[itemIdx];\n      itemsIdxToInstIdx[itemIdx] = instIdx;\n      if (inst) {\n        inst._setPendingProperty(this.as, item);\n        inst._setPendingProperty(this.indexAs, instIdx);\n        inst._setPendingProperty(this.itemsIndexAs, itemIdx);\n        inst._flushProperties();\n      } else {\n        this.__insertInstance(item, instIdx, itemIdx);\n      }\n    }\n    // Remove any extra instances from previous state\n    for (let i=this.__instances.length-1; i>=instIdx; i--) {\n      this.__detachAndRemoveInstance(i);\n    }\n  }\n\n  __detachInstance(idx) {\n    let inst = this.__instances[idx];\n    const wrappedRoot = wrap(inst.root);\n    for (let i=0; i<inst.children.length; i++) {\n      let el = inst.children[i];\n      wrappedRoot.appendChild(el);\n    }\n    return inst;\n  }\n\n  __attachInstance(idx, parent) {\n    let inst = this.__instances[idx];\n    // Note, this is pre-wrapped as an optimization\n    parent.insertBefore(inst.root, this);\n  }\n\n  __detachAndRemoveInstance(idx) {\n    this.__detachInstance(idx);\n    this.__instances.splice(idx, 1);\n  }\n\n  __stampInstance(item, instIdx, itemIdx) {\n    let model = {};\n    model[this.as] = item;\n    model[this.indexAs] = instIdx;\n    model[this.itemsIndexAs] = itemIdx;\n    return new this.__ctor(model);\n  }\n\n  __insertInstance(item, instIdx, itemIdx) {\n    const inst = this.__stampInstance(item, instIdx, itemIdx);\n    let beforeRow = this.__instances[instIdx + 1];\n    let beforeNode = beforeRow ? beforeRow.children[0] : this;\n    wrap(wrap(this).parentNode).insertBefore(inst.root, beforeNode);\n    this.__instances[instIdx] = inst;\n    return inst;\n  }\n\n  // Implements extension point from Templatize mixin\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hidden Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hidden) {\n    for (let i=0; i<this.__instances.length; i++) {\n      this.__instances[i]._showHideChildren(hidden);\n    }\n  }\n\n  // Called as a side effect of a host items.<key>.<path> path change,\n  // responsible for notifying item.<path> changes to inst for key\n  __handleItemPath(path, value) {\n    let itemsPath = path.slice(6); // 'items.'.length == 6\n    let dot = itemsPath.indexOf('.');\n    let itemsIdx = dot < 0 ? itemsPath : itemsPath.substring(0, dot);\n    // If path was index into array...\n    if (itemsIdx == parseInt(itemsIdx, 10)) {\n      let itemSubPath = dot < 0 ? '' : itemsPath.substring(dot+1);\n      // If the path is observed, it will trigger a full refresh\n      this.__handleObservedPaths(itemSubPath);\n      // Note, even if a rull refresh is triggered, always do the path\n      // notification because unless mutableData is used for dom-repeat\n      // and all elements in the instance subtree, a full refresh may\n      // not trigger the proper update.\n      let instIdx = this.__itemsIdxToInstIdx[itemsIdx];\n      let inst = this.__instances[instIdx];\n      if (inst) {\n        let itemPath = this.as + (itemSubPath ? '.' + itemSubPath : '');\n        // This is effectively `notifyPath`, but avoids some of the overhead\n        // of the public API\n        inst._setPendingPropertyOrPath(itemPath, value, false, true);\n        inst._flushProperties();\n      }\n      return true;\n    }\n  }\n\n  /**\n   * Returns the item associated with a given element stamped by\n   * this `dom-repeat`.\n   *\n   * Note, to modify sub-properties of the item,\n   * `modelForElement(el).set('item.<sub-prop>', value)`\n   * should be used.\n   *\n   * @param {!HTMLElement} el Element for which to return the item.\n   * @return {*} Item associated with the element.\n   */\n  itemForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.as];\n  }\n\n  /**\n   * Returns the inst index for a given element stamped by this `dom-repeat`.\n   * If `sort` is provided, the index will reflect the sorted order (rather\n   * than the original array order).\n   *\n   * @param {!HTMLElement} el Element for which to return the index.\n   * @return {?number} Row index associated with the element (note this may\n   *   not correspond to the array index if a user `sort` is applied).\n   */\n  indexForElement(el) {\n    let instance = this.modelForElement(el);\n    return instance && instance[this.indexAs];\n  }\n\n  /**\n   * Returns the template \"model\" associated with a given element, which\n   * serves as the binding scope for the template instance the element is\n   * contained in. A template model\n   * should be used to manipulate data associated with this template instance.\n   *\n   * Example:\n   *\n   *   let model = modelForElement(el);\n   *   if (model.index < 10) {\n   *     model.set('item.checked', true);\n   *   }\n   *\n   * @param {!HTMLElement} el Element for which to return a template model.\n   * @return {TemplateInstanceBase} Model representing the binding scope for\n   *   the element.\n   */\n  modelForElement(el) {\n    return modelForElement(this.template, el);\n  }\n\n}\n\ncustomElements.define(DomRepeat.is, DomRepeat);\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,oBAAoB,EAAEC,UAAU,EAAEC,eAAe,QAAQ,wBAAwB,CAAC,CAAC;AAC5F,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,gBAAgB,EAAEC,KAAK,QAAQ,mBAAmB;AAC3D,SAASC,mBAAmB,QAAQ,2BAA2B;AAC/D,SAASC,OAAO,EAAEC,SAAS,QAAQ,kBAAkB;AACrD,SAASC,OAAO,EAAEC,SAAS,QAAQ,mBAAmB;AACtD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,oBAAoB,QAAQ,oCAAoC;AACzE,SAASC,6BAA6B,QAAQ,sBAAsB;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,aAAa,GAAGR,mBAAmB,CAACP,cAAc,CAAC;;AAEzgB,SAAS,SAASD,aAAa,CAAC;EAE3C;EACA;EACA,WAAWE,EAAEA,CAAA,EAAG;IAAE,OAAO,YAAY;EAAE;EAEvC,WAAWC,QAAQA,CAAA,EAAG;IAAE,OAAO,IAAI;EAAE;EAErC,WAAWC,UAAUA,CAAA,EAAG;IAEtB;AACJ;AACA;AACA;AACA;AACA;AACA;IACI,OAAO;MAEL;AACN;AACA;AACA;MACMC,KAAK,EAAE;QACLC,IAAI,EAAEC;MACR,CAAC;MAED;AACN;AACA;AACA;MACMC,EAAE,EAAE;QACFF,IAAI,EAAEG,MAAM;QACZC,KAAK,EAAE;MACT,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;MACMC,OAAO,EAAE;QACPL,IAAI,EAAEG,MAAM;QACZC,KAAK,EAAE;MACT,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;MACME,YAAY,EAAE;QACZN,IAAI,EAAEG,MAAM;QACZC,KAAK,EAAE;MACT,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;MACMG,IAAI,EAAE;QACJP,IAAI,EAAEQ,QAAQ;QACdC,QAAQ,EAAE;MACZ,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;MACMC,MAAM,EAAE;QACNV,IAAI,EAAEQ,QAAQ;QACdC,QAAQ,EAAE;MACZ,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;MACME,OAAO,EAAE;QACPX,IAAI,EAAEG,MAAM;QACZM,QAAQ,EAAE;MACZ,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;MACMG,KAAK,EAAEC,MAAM;MAEb;AACN;AACA;AACA;AACA;AACA;MACMC,iBAAiB,EAAE;QACjBd,IAAI,EAAEa,MAAM;QACZE,MAAM,EAAE,CAACtB,6BAA6B;QACtCuB,QAAQ,EAAE;MACZ,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,YAAY,EAAE;QACZjB,IAAI,EAAEa;MACR,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMK,eAAe,EAAE;QACflB,IAAI,EAAEa,MAAM;QACZT,KAAK,EAAE;MACT,CAAC;MAEDe,gBAAgB,EAAE;QAChBnB,IAAI,EAAEa,MAAM;QACZO,QAAQ,EAAE;MACZ,CAAC;MAED;AACN;AACA;AACA;AACA;MACMC,eAAe,EAAE;QACfrB,IAAI,EAAEsB;MACR,CAAC;MAED;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACMC,qBAAqB,EAAE;QACrBvB,IAAI,EAAEsB;MACR;IAEF,CAAC;EAEH;EAEA,WAAWE,SAASA,CAAA,EAAG;IACrB,OAAO,CAAE,yBAAyB,CAAE;EACtC;EAEAC,WAAWA,CAAA,EAAG;IACZ,KAAK,CAAC,CAAC;IACP,IAAI,CAACC,WAAW,GAAG,EAAE;IACrB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,mBAAmB,GAAG,CAAC,CAAC;IAC7B,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,mBAAmB,GAAG,KAAK;IAChC,IAAI,CAACC,oBAAoB,GAAG,KAAK;IACjC,IAAI,CAACC,wBAAwB,GAAG,KAAK;IACrC,IAAI,CAACC,YAAY,GAAG,CAAC;IACrB,IAAI,CAACC,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,IAAI,CAACC,cAAc,GAAG,IAAI;IAC1B;IACA,IAAI,CAACC,MAAM,GAAG,IAAI;IAClB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAAC1C,QAAQ,GAAG,IAAI;IACpB;IACA,IAAI,CAAC2C,aAAa;EACpB;;EAEA;AACF;AACA;AACA;EACEC,oBAAoBA,CAAA,EAAG;IACrB,KAAK,CAACA,oBAAoB,CAAC,CAAC;IAC5B,IAAI,CAACF,YAAY,GAAG,IAAI;IACxB,KAAK,IAAIG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAChB,WAAW,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAI,CAACE,gBAAgB,CAACF,CAAC,CAAC;IAC1B;IACA;IACA,IAAI,IAAI,CAACR,YAAY,EAAE;MACrBW,oBAAoB,CAAC,IAAI,CAACX,YAAY,CAAC;IACzC;EACF;;EAEA;AACF;AACA;AACA;EACEY,iBAAiBA,CAAA,EAAG;IAClB,KAAK,CAACA,iBAAiB,CAAC,CAAC;IACzB,IAAI,CAACtD,oBAAoB,CAAC,CAAC,EAAE;MAC3B,IAAI,CAACuD,KAAK,CAACC,OAAO,GAAG,MAAM;IAC7B;IACA;IACA,IAAI,IAAI,CAACT,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,GAAG,KAAK;MACzB,IAAIU,aAAa,GAAG1D,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC2D,UAAU,CAAC;MAC/C,KAAK,IAAIR,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAChB,WAAW,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;QAC5C,IAAI,CAACS,gBAAgB,CAACT,CAAC,EAAEO,aAAa,CAAC;MACzC;MACA;MACA,IAAI,IAAI,CAACf,YAAY,EAAE;QACrB,IAAI,CAACkB,QAAQ,CAAC,CAAC;MACjB;IACF;EACF;EAEAC,mBAAmBA,CAAA,EAAG;IACpB;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACf,MAAM,EAAE;MAChB;MACA;MACA,MAAMgB,cAAc,GAAG;MACnB,2BAA6B,IAAM;MACvC,IAAIzD,QAAQ,GAAG,IAAI,CAACA,QAAQ,GAAGyD,cAAc,CAACd,aAAa,GACvDc,cAAc,KACd,mCAAqC,IAAI,CAACC,aAAa,CAAC,UAAU,CAAC,CAAC;MACxE,IAAI,CAAC1D,QAAQ,EAAE;QACb;QACA,IAAIY,QAAQ,GAAG,IAAI+C,gBAAgB,CAAC,MAAM;UACxC,IAAI,IAAI,CAACD,aAAa,CAAC,UAAU,CAAC,EAAE;YAClC9C,QAAQ,CAACgD,UAAU,CAAC,CAAC;YACrB,IAAI,CAACL,QAAQ,CAAC,CAAC;UACjB,CAAC,MAAM;YACL,MAAM,IAAIM,KAAK,CAAC,wCAAwC,CAAC;UAC3D;QACF,CAAC,CAAC;QACFjD,QAAQ,CAACE,OAAO,CAAC,IAAI,EAAE;UAACgD,SAAS,EAAE;QAAI,CAAC,CAAC;QACzC,OAAO,KAAK;MACd;MACA;MACA,IAAIC,aAAa,GAAG,CAAC,CAAC;MACtBA,aAAa,CAAC,IAAI,CAAC1D,EAAE,CAAC,GAAG,IAAI;MAC7B0D,aAAa,CAAC,IAAI,CAACvD,OAAO,CAAC,GAAG,IAAI;MAClCuD,aAAa,CAAC,IAAI,CAACtD,YAAY,CAAC,GAAG,IAAI;MACvC,IAAI,CAACgC,MAAM,GAAGzD,UAAU,CAACgB,QAAQ,EAAE,IAAI,EAAE;QACvCgE,WAAW,EAAE,IAAI,CAACA,WAAW;QAC7BC,WAAW,EAAE,IAAI;QACjBF,aAAa,EAAEA,aAAa;QAC5B;AACR;AACA;AACA;AACA;QACQG,eAAe,EAAE,SAAAA,CAASC,IAAI,EAAE5D,KAAK,EAAE;UACrC,IAAI6D,EAAE,GAAG,IAAI,CAACvC,WAAW;UACzB,KAAK,IAAIgB,CAAC,GAAC,CAAC,EAAEwB,IAAI,EAAGxB,CAAC,GAACuB,EAAE,CAACtB,MAAM,KAAMuB,IAAI,GAACD,EAAE,CAACvB,CAAC,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;YACtDwB,IAAI,CAACH,eAAe,CAACC,IAAI,EAAE5D,KAAK,CAAC;UACnC;QACF,CAAC;QACD;AACR;AACA;AACA;AACA;AACA;QACQ+D,kBAAkB,EAAE,SAAAA,CAASD,IAAI,EAAEF,IAAI,EAAE5D,KAAK,EAAE;UAC9C,IAAIjB,OAAO,CAAC,IAAI,CAACe,EAAE,EAAE8D,IAAI,CAAC,EAAE;YAC1B,IAAII,GAAG,GAAGF,IAAI,CAAC,IAAI,CAAC5D,YAAY,CAAC;YACjC,IAAI0D,IAAI,IAAI,IAAI,CAAC9D,EAAE,EAAE;cACnB,IAAI,CAACH,KAAK,CAACqE,GAAG,CAAC,GAAGhE,KAAK;YACzB;YACA,IAAIiE,IAAI,GAAGjF,SAAS,CAAC,IAAI,CAACc,EAAE,EAAG,GAAEoE,yBAAyB,CAAC,OAAO,EAAE,IAAI,CAAE,IAAGF,GAAI,EAAC,EAAEJ,IAAI,CAAC;YACzF,IAAI,CAACO,UAAU,CAACF,IAAI,EAAEjE,KAAK,CAAC;UAC9B;QACF;MACF,CAAC,CAAC;IACJ;IACA,OAAO,IAAI;EACb;EAEAoE,eAAeA,CAAA,EAAG;IAChB;IACA;IACA;IACA;IACA;IACA,OAAO,IAAI,CAACC,UAAU,CAACC,WAAW,IAAI,IAAI,CAACD,UAAU;EACvD;EAEAE,2BAA2BA,CAACC,oBAAoB,EAAE;IAChD,IAAI,OAAOA,oBAAoB,KAAK,QAAQ,EAAE;MAC5C,IAAIC,UAAU,GAAGD,oBAAoB;MACrC,IAAIE,GAAG,GAAG,IAAI,CAACN,eAAe,CAAC,CAAC;MAChC,OAAO,YAAW;QAAE,OAAOM,GAAG,CAACD,UAAU,CAAC,CAACE,KAAK,CAACD,GAAG,EAAEE,SAAS,CAAC;MAAE,CAAC;IACrE;IAEA,OAAOJ,oBAAoB;EAC7B;EAEAK,aAAaA,CAAC1E,IAAI,EAAE;IAClB,IAAI,CAAC4B,QAAQ,GAAG,IAAI,CAACwC,2BAA2B,CAACpE,IAAI,CAAC;IACtD,IAAI,IAAI,CAACR,KAAK,EAAE;MAAE,IAAI,CAACmF,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;IAAE;EAC1D;EAEA+B,eAAeA,CAACzE,MAAM,EAAE;IACtB,IAAI,CAAC0B,UAAU,GAAG,IAAI,CAACuC,2BAA2B,CAACjE,MAAM,CAAC;IAC1D,IAAI,IAAI,CAACX,KAAK,EAAE;MAAE,IAAI,CAACmF,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;IAAE;EAC1D;EAEAgC,kBAAkBA,CAACC,IAAI,EAAE;IACvB,OAAOC,IAAI,CAACC,IAAI,CAAC,IAAI,GAACF,IAAI,CAAC;EAC7B;EAEAG,gBAAgBA,CAAA,EAAG;IACjB,IAAI,CAACnD,cAAc,GAAG,IAAI,CAAC1B,OAAO,IAChC,IAAI,CAACA,OAAO,CAAC8E,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;EAC9C;EAEAC,qBAAqBA,CAACtB,IAAI,EAAE;IAC1B;IACA,IAAI,IAAI,CAAClC,QAAQ,IAAI,IAAI,CAACC,UAAU,EAAE;MACpC,IAAI,CAACiC,IAAI,EAAE;QACT;QACA,IAAI,CAACa,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,EAAE,IAAI,CAACxC,KAAK,CAAC;MAClD,CAAC,MAAM,IAAI,IAAI,CAACyB,cAAc,EAAE;QAC9B;QACA,IAAIuD,KAAK,GAAG,IAAI,CAACvD,cAAc;QAC/B,KAAK,IAAIK,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACkD,KAAK,CAACjD,MAAM,EAAED,CAAC,EAAE,EAAE;UACjC,IAAI2B,IAAI,CAACwB,OAAO,CAACD,KAAK,CAAClD,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;YAChC,IAAI,CAACwC,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,EAAE,IAAI,CAACxC,KAAK,CAAC;UAClD;QACF;MACF;IACF;EACF;EAEAkF,cAAcA,CAACC,MAAM,EAAE;IACrB,IAAI,IAAI,CAAChG,KAAK,IAAI,CAACE,KAAK,CAAC+F,OAAO,CAAC,IAAI,CAACjG,KAAK,CAAC,EAAE;MAC5CkG,OAAO,CAACC,IAAI,CAAC,8CAA8C,EAAE,IAAI,CAACnG,KAAK,CAAC;IAC1E;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACoG,gBAAgB,CAACJ,MAAM,CAAC1B,IAAI,EAAE0B,MAAM,CAAC3F,KAAK,CAAC,EAAE;MACrD;MACA;MACA;MACA,IAAI2F,MAAM,CAAC1B,IAAI,KAAK,OAAO,EAAE;QAC3B,IAAI,CAACtC,mBAAmB,GAAG,IAAI;MACjC;MACA,IAAI,CAACmD,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;IACtC;EACF;;EAEA;AACF;AACA;AACA;EACE8B,gBAAgBA,CAACkB,EAAE,EAAExF,KAAK,GAAG,CAAC,EAAE;IAC9B,IAAI,CAACe,iBAAiB,GAAG5C,SAAS,CAACsH,QAAQ,CACrC,IAAI,CAAC1E,iBAAiB,EACtBf,KAAK,GAAG,CAAC,GAAGvB,OAAO,CAACiH,KAAK,CAAC1F,KAAK,CAAC,GAAGtB,SAAS,EAC5C8G,EAAE,CAACG,IAAI,CAAC,IAAI,CAAC,CAAC;IACpBvH,gBAAgB,CAAC,IAAI,CAAC2C,iBAAiB,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACE6E,MAAMA,CAAA,EAAG;IACP;IACA,IAAI,CAACtB,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;IACpCnE,KAAK,CAAC,CAAC;EACT;EAEAmE,QAAQA,CAAA,EAAG;IACT,IAAI,CAAC,IAAI,CAACC,mBAAmB,CAAC,CAAC,EAAE;MAC/B;MACA;IACF;IACA,IAAItD,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,EAAE;IAC5B;IACA,MAAM0G,iBAAiB,GAAG,IAAI,CAACC,oBAAoB,CAAC3G,KAAK,CAAC;IAC1D;IACA;IACA,MAAM4G,KAAK,GAAG,IAAI,CAACC,gBAAgB,CAACH,iBAAiB,CAAC9D,MAAM,CAAC;IAC7D;IACA,IAAI,CAACkE,iBAAiB,CAAC9G,KAAK,EAAE4G,KAAK,EAAEF,iBAAiB,CAAC;IACvD;IACA;IACA;IACA;IACA,IAAI,IAAI,CAACxF,YAAY,KACjB,IAAI,CAACe,oBAAoB,IAAI,IAAI,CAACC,wBAAwB,CAAC,EAAE;MAC/DY,oBAAoB,CAAC,IAAI,CAACX,YAAY,CAAC;MACvC,IAAI,CAACA,YAAY,GAAG4E,qBAAqB,CAAC,MAAM;QAC9C,IAAI,CAAC5E,YAAY,GAAG,IAAI;QACxB,IAAI,CAAC6E,kBAAkB,CAAC,CAAC;MAC3B,CAAC,CAAC;IACJ;IACA;IACA,IAAI,CAACC,qBAAqB,CAAC,IAAI,CAACtF,WAAW,CAACiB,MAAM,CAAC;IACnD;IACA,IAAI,CAAClD,6BAA6B,IAAI,IAAI,CAAC4B,eAAe,EAAE;MAC1D,IAAI,CAAC4F,aAAa,CAAC,IAAIC,WAAW,CAAC,YAAY,EAAE;QAC/CC,OAAO,EAAE,IAAI;QACbC,QAAQ,EAAE;MACZ,CAAC,CAAC,CAAC;IACL;EACF;EAEAV,oBAAoBA,CAAC3G,KAAK,EAAE;IAC1B;IACA,IAAI0G,iBAAiB,GAAG,IAAIxG,KAAK,CAACF,KAAK,CAAC4C,MAAM,CAAC;IAC/C,KAAK,IAAID,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC3C,KAAK,CAAC4C,MAAM,EAAED,CAAC,EAAE,EAAE;MACjC+D,iBAAiB,CAAC/D,CAAC,CAAC,GAAGA,CAAC;IAC1B;IACA;IACA,IAAI,IAAI,CAACN,UAAU,EAAE;MACnBqE,iBAAiB,GAAGA,iBAAiB,CAAC/F,MAAM,CAAC,CAACgC,CAAC,EAAE0B,GAAG,EAAEiD,KAAK,KACzD,IAAI,CAACjF,UAAU,CAACrC,KAAK,CAAC2C,CAAC,CAAC,EAAE0B,GAAG,EAAEiD,KAAK,CAAC,CAAC;IAC1C;IACA;IACA,IAAI,IAAI,CAAClF,QAAQ,EAAE;MACjBsE,iBAAiB,CAAClG,IAAI,CAAC,CAAC+G,CAAC,EAAEC,CAAC,KAAK,IAAI,CAACpF,QAAQ,CAACpC,KAAK,CAACuH,CAAC,CAAC,EAAEvH,KAAK,CAACwH,CAAC,CAAC,CAAC,CAAC;IACrE;IACA,OAAOd,iBAAiB;EAC1B;EAEAG,gBAAgBA,CAACY,iBAAiB,EAAE;IAClC,IAAIb,KAAK,GAAGa,iBAAiB;IAC7B,MAAMC,YAAY,GAAG,IAAI,CAAC/F,WAAW,CAACiB,MAAM;IAC5C;IACA;IACA;IACA,IAAI,IAAI,CAAC1B,YAAY,EAAE;MACrB,IAAIyG,QAAQ;MACZ,IAAI,CAAC,IAAI,CAAC7F,YAAY,IACnB,IAAI,CAACE,mBAAmB,IAAI,CAAC,IAAI,CAACR,qBAAsB,EAAE;QAC3D;QACAoF,KAAK,GAAGrB,IAAI,CAACqC,GAAG,CAACH,iBAAiB,EAAE,IAAI,CAACvG,YAAY,CAAC;QACtD;QACA;QACAyG,QAAQ,GAAGpC,IAAI,CAACsC,GAAG,CAACjB,KAAK,GAAGc,YAAY,EAAE,CAAC,CAAC;QAC5C;QACA,IAAI,CAAC5F,YAAY,GAAG6F,QAAQ,IAAI,CAAC;MACnC,CAAC,MAAM;QACL;QACA;QACAA,QAAQ,GAAGpC,IAAI,CAACqC,GAAG,CACjBrC,IAAI,CAACsC,GAAG,CAACJ,iBAAiB,GAAGC,YAAY,EAAE,CAAC,CAAC,EAC7C,IAAI,CAAC5F,YAAY,CAAC;QACpB;QACA;QACA8E,KAAK,GAAGrB,IAAI,CAACqC,GAAG,CAACF,YAAY,GAAGC,QAAQ,EAAEF,iBAAiB,CAAC;MAC9D;MACA;MACA,IAAI,CAACxF,oBAAoB,GAAG0F,QAAQ,KAAK,IAAI,CAAC7F,YAAY;MAC1D,IAAI,CAACI,wBAAwB,GAAG0E,KAAK,GAAGa,iBAAiB;MACzD,IAAI,CAAC1F,iBAAiB,GAAG+F,WAAW,CAACC,GAAG,CAAC,CAAC;IAC5C;IACA,IAAI,CAAC/F,mBAAmB,GAAG,KAAK;IAChC,OAAO4E,KAAK;EACd;EAEAI,kBAAkBA,CAAA,EAAG;IACnB;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC/E,oBAAoB,EAAE;MAC7B,MAAM+F,UAAU,GAAGF,WAAW,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAChG,iBAAiB;MAC7D,MAAMkG,KAAK,GAAG,IAAI,CAAC7G,gBAAgB,GAAG4G,UAAU;MAChD,IAAI,CAAClG,YAAY,GAAGyD,IAAI,CAAC2C,KAAK,CAAC,IAAI,CAACpG,YAAY,GAAGmG,KAAK,CAAC,IAAI,CAAC;IAChE;IACA;IACA,IAAI,IAAI,CAAC/F,wBAAwB,EAAE;MACjC,IAAI,CAACiD,gBAAgB,CAAC,IAAI,CAAC9B,QAAQ,CAAC;IACtC;EACF;EAEAyD,iBAAiBA,CAAC9G,KAAK,EAAE4G,KAAK,EAAEF,iBAAiB,EAAE;IACjD;IACA,MAAMyB,iBAAiB,GAAG,IAAI,CAACtG,mBAAmB,GAAG,CAAC,CAAC;IACvD,IAAIuG,OAAO;IACX;IACA,KAAKA,OAAO,GAAC,CAAC,EAAEA,OAAO,GAACxB,KAAK,EAAEwB,OAAO,EAAE,EAAE;MACxC,IAAIjE,IAAI,GAAG,IAAI,CAACxC,WAAW,CAACyG,OAAO,CAAC;MACpC,IAAIC,OAAO,GAAG3B,iBAAiB,CAAC0B,OAAO,CAAC;MACxC,IAAIE,IAAI,GAAGtI,KAAK,CAACqI,OAAO,CAAC;MACzBF,iBAAiB,CAACE,OAAO,CAAC,GAAGD,OAAO;MACpC,IAAIjE,IAAI,EAAE;QACRA,IAAI,CAACoE,mBAAmB,CAAC,IAAI,CAACpI,EAAE,EAAEmI,IAAI,CAAC;QACvCnE,IAAI,CAACoE,mBAAmB,CAAC,IAAI,CAACjI,OAAO,EAAE8H,OAAO,CAAC;QAC/CjE,IAAI,CAACoE,mBAAmB,CAAC,IAAI,CAAChI,YAAY,EAAE8H,OAAO,CAAC;QACpDlE,IAAI,CAACqE,gBAAgB,CAAC,CAAC;MACzB,CAAC,MAAM;QACL,IAAI,CAACC,gBAAgB,CAACH,IAAI,EAAEF,OAAO,EAAEC,OAAO,CAAC;MAC/C;IACF;IACA;IACA,KAAK,IAAI1F,CAAC,GAAC,IAAI,CAAChB,WAAW,CAACiB,MAAM,GAAC,CAAC,EAAED,CAAC,IAAEyF,OAAO,EAAEzF,CAAC,EAAE,EAAE;MACrD,IAAI,CAAC+F,yBAAyB,CAAC/F,CAAC,CAAC;IACnC;EACF;EAEAE,gBAAgBA,CAACwB,GAAG,EAAE;IACpB,IAAIF,IAAI,GAAG,IAAI,CAACxC,WAAW,CAAC0C,GAAG,CAAC;IAChC,MAAMsE,WAAW,GAAGnJ,IAAI,CAAC2E,IAAI,CAACyE,IAAI,CAAC;IACnC,KAAK,IAAIjG,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACwB,IAAI,CAAC0E,QAAQ,CAACjG,MAAM,EAAED,CAAC,EAAE,EAAE;MACzC,IAAImG,EAAE,GAAG3E,IAAI,CAAC0E,QAAQ,CAAClG,CAAC,CAAC;MACzBgG,WAAW,CAACI,WAAW,CAACD,EAAE,CAAC;IAC7B;IACA,OAAO3E,IAAI;EACb;EAEAf,gBAAgBA,CAACiB,GAAG,EAAE2E,MAAM,EAAE;IAC5B,IAAI7E,IAAI,GAAG,IAAI,CAACxC,WAAW,CAAC0C,GAAG,CAAC;IAChC;IACA2E,MAAM,CAACC,YAAY,CAAC9E,IAAI,CAACyE,IAAI,EAAE,IAAI,CAAC;EACtC;EAEAF,yBAAyBA,CAACrE,GAAG,EAAE;IAC7B,IAAI,CAACxB,gBAAgB,CAACwB,GAAG,CAAC;IAC1B,IAAI,CAAC1C,WAAW,CAACuH,MAAM,CAAC7E,GAAG,EAAE,CAAC,CAAC;EACjC;EAEA8E,eAAeA,CAACb,IAAI,EAAEF,OAAO,EAAEC,OAAO,EAAE;IACtC,IAAIe,KAAK,GAAG,CAAC,CAAC;IACdA,KAAK,CAAC,IAAI,CAACjJ,EAAE,CAAC,GAAGmI,IAAI;IACrBc,KAAK,CAAC,IAAI,CAAC9I,OAAO,CAAC,GAAG8H,OAAO;IAC7BgB,KAAK,CAAC,IAAI,CAAC7I,YAAY,CAAC,GAAG8H,OAAO;IAClC,OAAO,IAAI,IAAI,CAAC9F,MAAM,CAAC6G,KAAK,CAAC;EAC/B;EAEAX,gBAAgBA,CAACH,IAAI,EAAEF,OAAO,EAAEC,OAAO,EAAE;IACvC,MAAMlE,IAAI,GAAG,IAAI,CAACgF,eAAe,CAACb,IAAI,EAAEF,OAAO,EAAEC,OAAO,CAAC;IACzD,IAAIgB,SAAS,GAAG,IAAI,CAAC1H,WAAW,CAACyG,OAAO,GAAG,CAAC,CAAC;IAC7C,IAAIkB,UAAU,GAAGD,SAAS,GAAGA,SAAS,CAACR,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI;IACzDrJ,IAAI,CAACA,IAAI,CAAC,IAAI,CAAC,CAAC2D,UAAU,CAAC,CAAC8F,YAAY,CAAC9E,IAAI,CAACyE,IAAI,EAAEU,UAAU,CAAC;IAC/D,IAAI,CAAC3H,WAAW,CAACyG,OAAO,CAAC,GAAGjE,IAAI;IAChC,OAAOA,IAAI;EACb;;EAEA;EACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEoF,iBAAiBA,CAACC,MAAM,EAAE;IACxB,KAAK,IAAI7G,CAAC,GAAC,CAAC,EAAEA,CAAC,GAAC,IAAI,CAAChB,WAAW,CAACiB,MAAM,EAAED,CAAC,EAAE,EAAE;MAC5C,IAAI,CAAChB,WAAW,CAACgB,CAAC,CAAC,CAAC4G,iBAAiB,CAACC,MAAM,CAAC;IAC/C;EACF;;EAEA;EACA;EACApD,gBAAgBA,CAAC9B,IAAI,EAAEjE,KAAK,EAAE;IAC5B,IAAIoJ,SAAS,GAAGnF,IAAI,CAACoF,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,IAAIC,GAAG,GAAGF,SAAS,CAAC3D,OAAO,CAAC,GAAG,CAAC;IAChC,IAAI8D,QAAQ,GAAGD,GAAG,GAAG,CAAC,GAAGF,SAAS,GAAGA,SAAS,CAACI,SAAS,CAAC,CAAC,EAAEF,GAAG,CAAC;IAChE;IACA,IAAIC,QAAQ,IAAIE,QAAQ,CAACF,QAAQ,EAAE,EAAE,CAAC,EAAE;MACtC,IAAIG,WAAW,GAAGJ,GAAG,GAAG,CAAC,GAAG,EAAE,GAAGF,SAAS,CAACI,SAAS,CAACF,GAAG,GAAC,CAAC,CAAC;MAC3D;MACA,IAAI,CAAC/D,qBAAqB,CAACmE,WAAW,CAAC;MACvC;MACA;MACA;MACA;MACA,IAAI3B,OAAO,GAAG,IAAI,CAACvG,mBAAmB,CAAC+H,QAAQ,CAAC;MAChD,IAAIzF,IAAI,GAAG,IAAI,CAACxC,WAAW,CAACyG,OAAO,CAAC;MACpC,IAAIjE,IAAI,EAAE;QACR,IAAI6F,QAAQ,GAAG,IAAI,CAAC7J,EAAE,IAAI4J,WAAW,GAAG,GAAG,GAAGA,WAAW,GAAG,EAAE,CAAC;QAC/D;QACA;QACA5F,IAAI,CAAC8F,yBAAyB,CAACD,QAAQ,EAAE3J,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC;QAC5D8D,IAAI,CAACqE,gBAAgB,CAAC,CAAC;MACzB;MACA,OAAO,IAAI;IACb;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE0B,cAAcA,CAACpB,EAAE,EAAE;IACjB,IAAIqB,QAAQ,GAAG,IAAI,CAACpL,eAAe,CAAC+J,EAAE,CAAC;IACvC,OAAOqB,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAAChK,EAAE,CAAC;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEiK,eAAeA,CAACtB,EAAE,EAAE;IAClB,IAAIqB,QAAQ,GAAG,IAAI,CAACpL,eAAe,CAAC+J,EAAE,CAAC;IACvC,OAAOqB,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAAC7J,OAAO,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEvB,eAAeA,CAAC+J,EAAE,EAAE;IAClB,OAAO/J,eAAe,CAAC,IAAI,CAACe,QAAQ,EAAEgJ,EAAE,CAAC;EAC3C;AAEF;AAEAuB,cAAc,CAACC,MAAM,CAAC1K,SAAS,CAACC,EAAE,EAAED,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}