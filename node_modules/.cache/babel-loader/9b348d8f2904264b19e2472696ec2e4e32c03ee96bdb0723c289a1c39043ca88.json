{"ast":null,"code":"// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nexport const processConfigEntities = (entities, checkEntityId = true) => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n  return entities.map((entityConf, index) => {\n    if (typeof entityConf === \"object\" && !Array.isArray(entityConf) && entityConf.type) {\n      return entityConf;\n    }\n    let config;\n    if (typeof entityConf === \"string\") {\n      config = {\n        entity: entityConf\n      };\n    } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n      if (!(\"entity\" in entityConf)) {\n        throw new Error(`Object at position ${index} is missing entity field`);\n      }\n      config = entityConf;\n    } else {\n      throw new Error(`Invalid entity ID at position ${index}`);\n    }\n    if (checkEntityId && !isValidEntityId(config.entity)) {\n      throw new Error(`Invalid entity ID at position ${index}: ${config.entity}`);\n    }\n    return config;\n  });\n};","map":{"version":3,"names":["isValidEntityId","processConfigEntities","entities","checkEntityId","Array","isArray","Error","map","entityConf","index","type","config","entity"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/common/process-config-entities.ts"],"sourcesContent":["// Parse array of entity objects from config\nimport { isValidEntityId } from \"../../../common/entity/valid_entity_id\";\nimport { EntityConfig, LovelaceRowConfig } from \"../entity-rows/types\";\n\nexport const processConfigEntities = <\n  T extends EntityConfig | LovelaceRowConfig,\n>(\n  entities: Array<T | string>,\n  checkEntityId = true\n): T[] => {\n  if (!entities || !Array.isArray(entities)) {\n    throw new Error(\"Entities need to be an array\");\n  }\n\n  return entities.map((entityConf, index): T => {\n    if (\n      typeof entityConf === \"object\" &&\n      !Array.isArray(entityConf) &&\n      entityConf.type\n    ) {\n      return entityConf;\n    }\n\n    let config: T;\n\n    if (typeof entityConf === \"string\") {\n      config = { entity: entityConf } as T;\n    } else if (typeof entityConf === \"object\" && !Array.isArray(entityConf)) {\n      if (!(\"entity\" in entityConf)) {\n        throw new Error(`Object at position ${index} is missing entity field`);\n      }\n      config = entityConf as T;\n    } else {\n      throw new Error(`Invalid entity ID at position ${index}`);\n    }\n\n    if (checkEntityId && !isValidEntityId((config as EntityConfig).entity!)) {\n      throw new Error(\n        `Invalid entity ID at position ${index}: ${\n          (config as EntityConfig).entity\n        }`\n      );\n    }\n\n    return config;\n  });\n};\n"],"mappings":"AAAA;AACA,SAASA,eAAe,QAAQ,wCAAwC;AAGxE,OAAO,MAAMC,qBAAqB,GAAGA,CAGnCC,QAA2B,EAC3BC,aAAa,GAAG,IAAI,KACZ;EACR,IAAI,CAACD,QAAQ,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,QAAQ,CAAC,EAAE;IACzC,MAAM,IAAII,KAAK,CAAC,8BAA8B,CAAC;EACjD;EAEA,OAAOJ,QAAQ,CAACK,GAAG,CAAC,CAACC,UAAU,EAAEC,KAAK,KAAQ;IAC5C,IACE,OAAOD,UAAU,KAAK,QAAQ,IAC9B,CAACJ,KAAK,CAACC,OAAO,CAACG,UAAU,CAAC,IAC1BA,UAAU,CAACE,IAAI,EACf;MACA,OAAOF,UAAU;IACnB;IAEA,IAAIG,MAAS;IAEb,IAAI,OAAOH,UAAU,KAAK,QAAQ,EAAE;MAClCG,MAAM,GAAG;QAAEC,MAAM,EAAEJ;MAAW,CAAM;IACtC,CAAC,MAAM,IAAI,OAAOA,UAAU,KAAK,QAAQ,IAAI,CAACJ,KAAK,CAACC,OAAO,CAACG,UAAU,CAAC,EAAE;MACvE,IAAI,EAAE,QAAQ,IAAIA,UAAU,CAAC,EAAE;QAC7B,MAAM,IAAIF,KAAK,CAAE,sBAAqBG,KAAM,0BAAyB,CAAC;MACxE;MACAE,MAAM,GAAGH,UAAe;IAC1B,CAAC,MAAM;MACL,MAAM,IAAIF,KAAK,CAAE,iCAAgCG,KAAM,EAAC,CAAC;IAC3D;IAEA,IAAIN,aAAa,IAAI,CAACH,eAAe,CAAEW,MAAM,CAAkBC,MAAO,CAAC,EAAE;MACvE,MAAM,IAAIN,KAAK,CACZ,iCAAgCG,KAAM,KACpCE,MAAM,CAAkBC,MAC1B,EACH,CAAC;IACH;IAEA,OAAOD,MAAM;EACf,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}