{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport var KeyboardMixin = dedupingMixin(function (superclass) {\n  return /*#__PURE__*/function (_superclass) {\n    _inherits(KeyboardMixinClass, _superclass);\n    function KeyboardMixinClass() {\n      _classCallCheck(this, KeyboardMixinClass);\n      return _callSuper(this, KeyboardMixinClass, arguments);\n    }\n    _createClass(KeyboardMixinClass, [{\n      key: \"ready\",\n      value: /** @protected */\n      function ready() {\n        var _this = this;\n        _get(_getPrototypeOf(KeyboardMixinClass.prototype), \"ready\", this).call(this);\n        this.addEventListener('keydown', function (event) {\n          _this._onKeyDown(event);\n        });\n        this.addEventListener('keyup', function (event) {\n          _this._onKeyUp(event);\n        });\n      }\n\n      /**\n       * A handler for the `keydown` event. By default, it calls\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} event\n       * @protected\n       */\n    }, {\n      key: \"_onKeyDown\",\n      value: function _onKeyDown(event) {\n        switch (event.key) {\n          case 'Enter':\n            this._onEnter(event);\n            break;\n          case 'Escape':\n            this._onEscape(event);\n            break;\n          default:\n            break;\n        }\n      }\n\n      /**\n       * A handler for the `keyup` event. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n    }, {\n      key: \"_onKeyUp\",\n      value: function _onKeyUp(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Enter\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n    }, {\n      key: \"_onEnter\",\n      value: function _onEnter(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Escape\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n    }, {\n      key: \"_onEscape\",\n      value: function _onEscape(_event) {\n        // To be implemented.\n      }\n    }]);\n    return KeyboardMixinClass;\n  }(superclass);\n});","map":{"version":3,"names":["dedupingMixin","KeyboardMixin","superclass","_superclass","_inherits","KeyboardMixinClass","_classCallCheck","_callSuper","arguments","_createClass","key","value","ready","_this","_get","_getPrototypeOf","prototype","call","addEventListener","event","_onKeyDown","_onKeyUp","_onEnter","_onEscape","_event"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/a11y-base/src/keyboard-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { dedupingMixin } from '@polymer/polymer/lib/utils/mixin.js';\n\n/**\n * A mixin that manages keyboard handling.\n * The mixin subscribes to the keyboard events while an actual implementation\n * for the event handlers is left to the client (a component or another mixin).\n *\n * @polymerMixin\n */\nexport const KeyboardMixin = dedupingMixin(\n  (superclass) =>\n    class KeyboardMixinClass extends superclass {\n      /** @protected */\n      ready() {\n        super.ready();\n\n        this.addEventListener('keydown', (event) => {\n          this._onKeyDown(event);\n        });\n\n        this.addEventListener('keyup', (event) => {\n          this._onKeyUp(event);\n        });\n      }\n\n      /**\n       * A handler for the `keydown` event. By default, it calls\n       * separate methods for handling \"Enter\" and \"Escape\" keys.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} event\n       * @protected\n       */\n      _onKeyDown(event) {\n        switch (event.key) {\n          case 'Enter':\n            this._onEnter(event);\n            break;\n          case 'Escape':\n            this._onEscape(event);\n            break;\n          default:\n            break;\n        }\n      }\n\n      /**\n       * A handler for the `keyup` event. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onKeyUp(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Enter\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEnter(_event) {\n        // To be implemented.\n      }\n\n      /**\n       * A handler for the \"Escape\" key. By default, it does nothing.\n       * Override the method to implement your own behavior.\n       *\n       * @param {KeyboardEvent} _event\n       * @protected\n       */\n      _onEscape(_event) {\n        // To be implemented.\n      }\n    },\n);\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,aAAa,GAAGD,aAAa,CACxC,UAACE,UAAU;EAAA,8BAAAC,WAAA;IAAAC,SAAA,CAAAC,kBAAA,EAAAF,WAAA;IAAA,SAAAE,mBAAA;MAAAC,eAAA,OAAAD,kBAAA;MAAA,OAAAE,UAAA,OAAAF,kBAAA,EAAAG,SAAA;IAAA;IAAAC,YAAA,CAAAJ,kBAAA;MAAAK,GAAA;MAAAC,KAAA,EAEP;MACA,SAAAC,MAAA,EAAQ;QAAA,IAAAC,KAAA;QACNC,IAAA,CAAAC,eAAA,CAAAV,kBAAA,CAAAW,SAAA,kBAAAC,IAAA;QAEA,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAE,UAACC,KAAK,EAAK;UAC1CN,KAAI,CAACO,UAAU,CAACD,KAAK,CAAC;QACxB,CAAC,CAAC;QAEF,IAAI,CAACD,gBAAgB,CAAC,OAAO,EAAE,UAACC,KAAK,EAAK;UACxCN,KAAI,CAACQ,QAAQ,CAACF,KAAK,CAAC;QACtB,CAAC,CAAC;MACJ;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;AACA;IAPM;MAAAT,GAAA;MAAAC,KAAA,EAQA,SAAAS,WAAWD,KAAK,EAAE;QAChB,QAAQA,KAAK,CAACT,GAAG;UACf,KAAK,OAAO;YACV,IAAI,CAACY,QAAQ,CAACH,KAAK,CAAC;YACpB;UACF,KAAK,QAAQ;YACX,IAAI,CAACI,SAAS,CAACJ,KAAK,CAAC;YACrB;UACF;YACE;QACJ;MACF;;MAEA;AACN;AACA;AACA;AACA;AACA;AACA;IANM;MAAAT,GAAA;MAAAC,KAAA,EAOA,SAAAU,SAASG,MAAM,EAAE;QACf;MAAA;;MAGF;AACN;AACA;AACA;AACA;AACA;AACA;IANM;MAAAd,GAAA;MAAAC,KAAA,EAOA,SAAAW,SAASE,MAAM,EAAE;QACf;MAAA;;MAGF;AACN;AACA;AACA;AACA;AACA;AACA;IANM;MAAAd,GAAA;MAAAC,KAAA,EAOA,SAAAY,UAAUC,MAAM,EAAE;QAChB;MAAA;IACD;IAAA,OAAAnB,kBAAA;EAAA,EAlE8BH,UAAU;AAAA,CAoE/C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}