{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport { format, startOfToday, startOfTomorrow } from \"date-fns/esm\";\nexport var mockEnergy = function mockEnergy(hass) {\n  hass.mockWS(\"energy/get_prefs\", function () {\n    return {\n      energy_sources: [{\n        type: \"grid\",\n        flow_from: [{\n          stat_energy_from: \"sensor.energy_consumption_tarif_1\",\n          stat_cost: \"sensor.energy_consumption_tarif_1_cost\",\n          entity_energy_price: null,\n          number_energy_price: null\n        }, {\n          stat_energy_from: \"sensor.energy_consumption_tarif_2\",\n          stat_cost: \"sensor.energy_consumption_tarif_2_cost\",\n          entity_energy_price: null,\n          number_energy_price: null\n        }],\n        flow_to: [{\n          stat_energy_to: \"sensor.energy_production_tarif_1\",\n          stat_compensation: \"sensor.energy_production_tarif_1_compensation\",\n          entity_energy_price: null,\n          number_energy_price: null\n        }, {\n          stat_energy_to: \"sensor.energy_production_tarif_2\",\n          stat_compensation: \"sensor.energy_production_tarif_2_compensation\",\n          entity_energy_price: null,\n          number_energy_price: null\n        }],\n        cost_adjustment_day: 0\n      }, {\n        type: \"solar\",\n        stat_energy_from: \"sensor.solar_production\",\n        config_entry_solar_forecast: [\"solar_forecast\"]\n      },\n      /*         {\n        type: \"battery\",\n        stat_energy_from: \"sensor.battery_output\",\n        stat_energy_to: \"sensor.battery_input\",\n      }, */\n      {\n        type: \"gas\",\n        stat_energy_from: \"sensor.energy_gas\",\n        stat_cost: \"sensor.energy_gas_cost\",\n        entity_energy_price: null,\n        number_energy_price: null\n      }],\n      device_consumption: [{\n        stat_consumption: \"sensor.energy_car\"\n      }, {\n        stat_consumption: \"sensor.energy_ac\"\n      }, {\n        stat_consumption: \"sensor.energy_washing_machine\"\n      }, {\n        stat_consumption: \"sensor.energy_dryer\"\n      }, {\n        stat_consumption: \"sensor.energy_heat_pump\"\n      }, {\n        stat_consumption: \"sensor.energy_boiler\"\n      }]\n    };\n  });\n  hass.mockWS(\"energy/info\", function () {\n    return {\n      cost_sensors: {},\n      solar_forecast_domains: []\n    };\n  });\n  hass.mockWS(\"energy/fossil_energy_consumption\", function (_ref) {\n    var period = _ref.period;\n    return {\n      start: period === \"month\" ? 250 : period === \"day\" ? 10 : 2\n    };\n  });\n  var todayString = format(startOfToday(), \"yyyy-MM-dd\");\n  var tomorrowString = format(startOfTomorrow(), \"yyyy-MM-dd\");\n  hass.mockWS(\"energy/solar_forecast\", function () {\n    var _wh_hours;\n    return {\n      solar_forecast: {\n        wh_hours: (_wh_hours = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_wh_hours, \"\".concat(todayString, \"T06:00:00\"), 0), \"\".concat(todayString, \"T06:23:00\"), 6), \"\".concat(todayString, \"T06:45:00\"), 39), \"\".concat(todayString, \"T07:00:00\"), 28), \"\".concat(todayString, \"T08:00:00\"), 208), \"\".concat(todayString, \"T09:00:00\"), 352), \"\".concat(todayString, \"T10:00:00\"), 544), \"\".concat(todayString, \"T11:00:00\"), 748), \"\".concat(todayString, \"T12:00:00\"), 1259), \"\".concat(todayString, \"T13:00:00\"), 1361), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_wh_hours, \"\".concat(todayString, \"T14:00:00\"), 1373), \"\".concat(todayString, \"T15:00:00\"), 1370), \"\".concat(todayString, \"T16:00:00\"), 1186), \"\".concat(todayString, \"T17:00:00\"), 937), \"\".concat(todayString, \"T18:00:00\"), 652), \"\".concat(todayString, \"T19:00:00\"), 370), \"\".concat(todayString, \"T20:00:00\"), 155), \"\".concat(todayString, \"T21:48:00\"), 24), \"\".concat(todayString, \"T22:36:00\"), 0), \"\".concat(tomorrowString, \"T06:01:00\"), 0), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_wh_hours, \"\".concat(tomorrowString, \"T06:23:00\"), 9), \"\".concat(tomorrowString, \"T06:45:00\"), 47), \"\".concat(tomorrowString, \"T07:00:00\"), 48), \"\".concat(tomorrowString, \"T08:00:00\"), 473), \"\".concat(tomorrowString, \"T09:00:00\"), 827), \"\".concat(tomorrowString, \"T10:00:00\"), 1153), \"\".concat(tomorrowString, \"T11:00:00\"), 1413), \"\".concat(tomorrowString, \"T12:00:00\"), 1590), \"\".concat(tomorrowString, \"T13:00:00\"), 1652), \"\".concat(tomorrowString, \"T14:00:00\"), 1612), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_wh_hours, \"\".concat(tomorrowString, \"T15:00:00\"), 1438), \"\".concat(tomorrowString, \"T16:00:00\"), 1149), \"\".concat(tomorrowString, \"T17:00:00\"), 830), \"\".concat(tomorrowString, \"T18:00:00\"), 542), \"\".concat(tomorrowString, \"T19:00:00\"), 311), \"\".concat(tomorrowString, \"T20:00:00\"), 140), \"\".concat(tomorrowString, \"T21:47:00\"), 22), \"\".concat(tomorrowString, \"T22:34:00\"), 0))\n      }\n    };\n  });\n};","map":{"version":3,"names":["format","startOfToday","startOfTomorrow","mockEnergy","hass","mockWS","energy_sources","type","flow_from","stat_energy_from","stat_cost","entity_energy_price","number_energy_price","flow_to","stat_energy_to","stat_compensation","cost_adjustment_day","config_entry_solar_forecast","device_consumption","stat_consumption","cost_sensors","solar_forecast_domains","_ref","period","start","todayString","tomorrowString","_wh_hours","solar_forecast","wh_hours","_defineProperty","concat"],"sources":["/Users/sercanardil/Desktop/frontend/demo/src/stubs/energy.ts"],"sourcesContent":["import { format, startOfToday, startOfTomorrow } from \"date-fns/esm\";\nimport {\n  EnergyInfo,\n  EnergyPreferences,\n  EnergySolarForecasts,\n  FossilEnergyConsumption,\n} from \"../../../src/data/energy\";\nimport { MockHomeAssistant } from \"../../../src/fake_data/provide_hass\";\n\nexport const mockEnergy = (hass: MockHomeAssistant) => {\n  hass.mockWS(\n    \"energy/get_prefs\",\n    (): EnergyPreferences => ({\n      energy_sources: [\n        {\n          type: \"grid\",\n          flow_from: [\n            {\n              stat_energy_from: \"sensor.energy_consumption_tarif_1\",\n              stat_cost: \"sensor.energy_consumption_tarif_1_cost\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n            {\n              stat_energy_from: \"sensor.energy_consumption_tarif_2\",\n              stat_cost: \"sensor.energy_consumption_tarif_2_cost\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n          ],\n          flow_to: [\n            {\n              stat_energy_to: \"sensor.energy_production_tarif_1\",\n              stat_compensation:\n                \"sensor.energy_production_tarif_1_compensation\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n            {\n              stat_energy_to: \"sensor.energy_production_tarif_2\",\n              stat_compensation:\n                \"sensor.energy_production_tarif_2_compensation\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n          ],\n          cost_adjustment_day: 0,\n        },\n        {\n          type: \"solar\",\n          stat_energy_from: \"sensor.solar_production\",\n          config_entry_solar_forecast: [\"solar_forecast\"],\n        },\n        /*         {\n          type: \"battery\",\n          stat_energy_from: \"sensor.battery_output\",\n          stat_energy_to: \"sensor.battery_input\",\n        }, */\n        {\n          type: \"gas\",\n          stat_energy_from: \"sensor.energy_gas\",\n          stat_cost: \"sensor.energy_gas_cost\",\n          entity_energy_price: null,\n          number_energy_price: null,\n        },\n      ],\n      device_consumption: [\n        {\n          stat_consumption: \"sensor.energy_car\",\n        },\n        {\n          stat_consumption: \"sensor.energy_ac\",\n        },\n        {\n          stat_consumption: \"sensor.energy_washing_machine\",\n        },\n        {\n          stat_consumption: \"sensor.energy_dryer\",\n        },\n        {\n          stat_consumption: \"sensor.energy_heat_pump\",\n        },\n        {\n          stat_consumption: \"sensor.energy_boiler\",\n        },\n      ],\n    })\n  );\n  hass.mockWS(\n    \"energy/info\",\n    (): EnergyInfo => ({ cost_sensors: {}, solar_forecast_domains: [] })\n  );\n  hass.mockWS(\n    \"energy/fossil_energy_consumption\",\n    ({ period }): FossilEnergyConsumption => ({\n      start: period === \"month\" ? 250 : period === \"day\" ? 10 : 2,\n    })\n  );\n  const todayString = format(startOfToday(), \"yyyy-MM-dd\");\n  const tomorrowString = format(startOfTomorrow(), \"yyyy-MM-dd\");\n  hass.mockWS(\n    \"energy/solar_forecast\",\n    (): EnergySolarForecasts => ({\n      solar_forecast: {\n        wh_hours: {\n          [`${todayString}T06:00:00`]: 0,\n          [`${todayString}T06:23:00`]: 6,\n          [`${todayString}T06:45:00`]: 39,\n          [`${todayString}T07:00:00`]: 28,\n          [`${todayString}T08:00:00`]: 208,\n          [`${todayString}T09:00:00`]: 352,\n          [`${todayString}T10:00:00`]: 544,\n          [`${todayString}T11:00:00`]: 748,\n          [`${todayString}T12:00:00`]: 1259,\n          [`${todayString}T13:00:00`]: 1361,\n          [`${todayString}T14:00:00`]: 1373,\n          [`${todayString}T15:00:00`]: 1370,\n          [`${todayString}T16:00:00`]: 1186,\n          [`${todayString}T17:00:00`]: 937,\n          [`${todayString}T18:00:00`]: 652,\n          [`${todayString}T19:00:00`]: 370,\n          [`${todayString}T20:00:00`]: 155,\n          [`${todayString}T21:48:00`]: 24,\n          [`${todayString}T22:36:00`]: 0,\n          [`${tomorrowString}T06:01:00`]: 0,\n          [`${tomorrowString}T06:23:00`]: 9,\n          [`${tomorrowString}T06:45:00`]: 47,\n          [`${tomorrowString}T07:00:00`]: 48,\n          [`${tomorrowString}T08:00:00`]: 473,\n          [`${tomorrowString}T09:00:00`]: 827,\n          [`${tomorrowString}T10:00:00`]: 1153,\n          [`${tomorrowString}T11:00:00`]: 1413,\n          [`${tomorrowString}T12:00:00`]: 1590,\n          [`${tomorrowString}T13:00:00`]: 1652,\n          [`${tomorrowString}T14:00:00`]: 1612,\n          [`${tomorrowString}T15:00:00`]: 1438,\n          [`${tomorrowString}T16:00:00`]: 1149,\n          [`${tomorrowString}T17:00:00`]: 830,\n          [`${tomorrowString}T18:00:00`]: 542,\n          [`${tomorrowString}T19:00:00`]: 311,\n          [`${tomorrowString}T20:00:00`]: 140,\n          [`${tomorrowString}T21:47:00`]: 22,\n          [`${tomorrowString}T22:34:00`]: 0,\n        },\n      },\n    })\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}