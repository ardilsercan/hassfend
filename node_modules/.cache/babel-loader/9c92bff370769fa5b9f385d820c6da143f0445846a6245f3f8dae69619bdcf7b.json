{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nexport class IronSelection {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  constructor(selectCallback) {\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get() {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  }\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @param {Array} excludes items to be excluded.\n   */\n  clear(excludes) {\n    this.selection.slice().forEach(function (item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  }\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @param {*} item The item whose selection state should be checked.\n   * @return {boolean} Returns true if `item` is selected.\n   */\n  isSelected(item) {\n    return this.selection.indexOf(item) >= 0;\n  }\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected(item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from\n        // current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @param {*} item The item to select.\n   */\n  select(item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  }\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @param {*} item The item to toggle.\n   */\n  toggle(item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n}\n;","map":{"version":3,"names":["IronSelection","constructor","selectCallback","selection","get","multi","slice","clear","excludes","forEach","item","indexOf","setItemSelected","isSelected","push","i","splice","select","toggle"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/iron-selector/iron-selection.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nexport class IronSelection {\n  /**\n   * @param {!Function} selectCallback\n   * @suppress {missingProvide}\n   */\n  constructor(selectCallback) {\n    this.selection = [];\n    this.selectCallback = selectCallback;\n  }\n\n  /**\n   * Retrieves the selected item(s).\n   *\n   * @returns Returns the selected item(s). If the multi property is true,\n   * `get` will return an array, otherwise it will return\n   * the selected item or undefined if there is no selection.\n   */\n  get() {\n    return this.multi ? this.selection.slice() : this.selection[0];\n  }\n\n  /**\n   * Clears all the selection except the ones indicated.\n   *\n   * @param {Array} excludes items to be excluded.\n   */\n  clear(excludes) {\n    this.selection.slice().forEach(function(item) {\n      if (!excludes || excludes.indexOf(item) < 0) {\n        this.setItemSelected(item, false);\n      }\n    }, this);\n  }\n\n  /**\n   * Indicates if a given item is selected.\n   *\n   * @param {*} item The item whose selection state should be checked.\n   * @return {boolean} Returns true if `item` is selected.\n   */\n  isSelected(item) {\n    return this.selection.indexOf(item) >= 0;\n  }\n\n  /**\n   * Sets the selection state for a given item to either selected or deselected.\n   *\n   * @param {*} item The item to select.\n   * @param {boolean} isSelected True for selected, false for deselected.\n   */\n  setItemSelected(item, isSelected) {\n    if (item != null) {\n      if (isSelected !== this.isSelected(item)) {\n        // proceed to update selection only if requested state differs from\n        // current\n        if (isSelected) {\n          this.selection.push(item);\n        } else {\n          var i = this.selection.indexOf(item);\n          if (i >= 0) {\n            this.selection.splice(i, 1);\n          }\n        }\n        if (this.selectCallback) {\n          this.selectCallback(item, isSelected);\n        }\n      }\n    }\n  }\n\n  /**\n   * Sets the selection state for a given item. If the `multi` property\n   * is true, then the selected state of `item` will be toggled; otherwise\n   * the `item` will be selected.\n   *\n   * @param {*} item The item to select.\n   */\n  select(item) {\n    if (this.multi) {\n      this.toggle(item);\n    } else if (this.get() !== item) {\n      this.setItemSelected(this.get(), false);\n      this.setItemSelected(item, true);\n    }\n  }\n\n  /**\n   * Toggles the selection state for `item`.\n   *\n   * @param {*} item The item to toggle.\n   */\n  toggle(item) {\n    this.setItemSelected(item, !this.isSelected(item));\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAE3C,OAAO,MAAMA,aAAa,CAAC;EACzB;AACF;AACA;AACA;EACEC,WAAWA,CAACC,cAAc,EAAE;IAC1B,IAAI,CAACC,SAAS,GAAG,EAAE;IACnB,IAAI,CAACD,cAAc,GAAGA,cAAc;EACtC;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEE,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACC,KAAK,GAAG,IAAI,CAACF,SAAS,CAACG,KAAK,CAAC,CAAC,GAAG,IAAI,CAACH,SAAS,CAAC,CAAC,CAAC;EAChE;;EAEA;AACF;AACA;AACA;AACA;EACEI,KAAKA,CAACC,QAAQ,EAAE;IACd,IAAI,CAACL,SAAS,CAACG,KAAK,CAAC,CAAC,CAACG,OAAO,CAAC,UAASC,IAAI,EAAE;MAC5C,IAAI,CAACF,QAAQ,IAAIA,QAAQ,CAACG,OAAO,CAACD,IAAI,CAAC,GAAG,CAAC,EAAE;QAC3C,IAAI,CAACE,eAAe,CAACF,IAAI,EAAE,KAAK,CAAC;MACnC;IACF,CAAC,EAAE,IAAI,CAAC;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEG,UAAUA,CAACH,IAAI,EAAE;IACf,OAAO,IAAI,CAACP,SAAS,CAACQ,OAAO,CAACD,IAAI,CAAC,IAAI,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,eAAeA,CAACF,IAAI,EAAEG,UAAU,EAAE;IAChC,IAAIH,IAAI,IAAI,IAAI,EAAE;MAChB,IAAIG,UAAU,KAAK,IAAI,CAACA,UAAU,CAACH,IAAI,CAAC,EAAE;QACxC;QACA;QACA,IAAIG,UAAU,EAAE;UACd,IAAI,CAACV,SAAS,CAACW,IAAI,CAACJ,IAAI,CAAC;QAC3B,CAAC,MAAM;UACL,IAAIK,CAAC,GAAG,IAAI,CAACZ,SAAS,CAACQ,OAAO,CAACD,IAAI,CAAC;UACpC,IAAIK,CAAC,IAAI,CAAC,EAAE;YACV,IAAI,CAACZ,SAAS,CAACa,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;UAC7B;QACF;QACA,IAAI,IAAI,CAACb,cAAc,EAAE;UACvB,IAAI,CAACA,cAAc,CAACQ,IAAI,EAAEG,UAAU,CAAC;QACvC;MACF;IACF;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEI,MAAMA,CAACP,IAAI,EAAE;IACX,IAAI,IAAI,CAACL,KAAK,EAAE;MACd,IAAI,CAACa,MAAM,CAACR,IAAI,CAAC;IACnB,CAAC,MAAM,IAAI,IAAI,CAACN,GAAG,CAAC,CAAC,KAAKM,IAAI,EAAE;MAC9B,IAAI,CAACE,eAAe,CAAC,IAAI,CAACR,GAAG,CAAC,CAAC,EAAE,KAAK,CAAC;MACvC,IAAI,CAACQ,eAAe,CAACF,IAAI,EAAE,IAAI,CAAC;IAClC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEQ,MAAMA,CAACR,IAAI,EAAE;IACX,IAAI,CAACE,eAAe,CAACF,IAAI,EAAE,CAAC,IAAI,CAACG,UAAU,CAACH,IAAI,CAAC,CAAC;EACpD;AACF;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}