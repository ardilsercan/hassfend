{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { isServer } from 'lit';\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nconst ATTACHABLE_CONTROLLER = Symbol('attachableController');\nlet FOR_ATTRIBUTE_OBSERVER;\nif (!isServer) {\n  /**\n   * A global `MutationObserver` that reacts to `for` attribute changes on\n   * `Attachable` elements. If the `for` attribute changes, the controller will\n   * re-attach to the new referenced element.\n   */\n  FOR_ATTRIBUTE_OBSERVER = new MutationObserver(records => {\n    for (const record of records) {\n      var _record$target$ATTACH;\n      // When a control's `for` attribute changes, inform its\n      // `AttachableController` to update to a new control.\n      (_record$target$ATTACH = record.target[ATTACHABLE_CONTROLLER]) === null || _record$target$ATTACH === void 0 || _record$target$ATTACH.hostConnected();\n    }\n  });\n}\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport class AttachableController {\n  get htmlFor() {\n    return this.host.getAttribute('for');\n  }\n  set htmlFor(htmlFor) {\n    if (htmlFor === null) {\n      this.host.removeAttribute('for');\n    } else {\n      this.host.setAttribute('for', htmlFor);\n    }\n  }\n  get control() {\n    if (this.host.hasAttribute('for')) {\n      if (!this.htmlFor || !this.host.isConnected) {\n        return null;\n      }\n      return this.host.getRootNode().querySelector(`#${this.htmlFor}`);\n    }\n    return this.currentControl || this.host.parentElement;\n  }\n  set control(control) {\n    if (control) {\n      this.attach(control);\n    } else {\n      this.detach();\n    }\n  }\n  /**\n   * Creates a new controller for an `Attachable` element.\n   *\n   * @param host The `Attachable` element.\n   * @param onControlChange A callback with two parameters for the previous and\n   *     next control. An `Attachable` element may perform setup or teardown\n   *     logic whenever the control changes.\n   */\n  constructor(host, onControlChange) {\n    var _FOR_ATTRIBUTE_OBSERV;\n    this.host = host;\n    this.onControlChange = onControlChange;\n    this.currentControl = null;\n    host.addController(this);\n    host[ATTACHABLE_CONTROLLER] = this;\n    (_FOR_ATTRIBUTE_OBSERV = FOR_ATTRIBUTE_OBSERVER) === null || _FOR_ATTRIBUTE_OBSERV === void 0 || _FOR_ATTRIBUTE_OBSERV.observe(host, {\n      attributeFilter: ['for']\n    });\n  }\n  attach(control) {\n    if (control === this.currentControl) {\n      return;\n    }\n    this.setCurrentControl(control);\n    // When imperatively attaching, remove the `for` attribute so\n    // that the attached control is used instead of a referenced one.\n    this.host.removeAttribute('for');\n  }\n  detach() {\n    this.setCurrentControl(null);\n    // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n    // ensure the control is `null` rather than the `parentElement`.\n    this.host.setAttribute('for', '');\n  }\n  /** @private */\n  hostConnected() {\n    this.setCurrentControl(this.control);\n  }\n  /** @private */\n  hostDisconnected() {\n    this.setCurrentControl(null);\n  }\n  setCurrentControl(control) {\n    this.onControlChange(this.currentControl, control);\n    this.currentControl = control;\n  }\n}","map":{"version":3,"names":["isServer","ATTACHABLE_CONTROLLER","Symbol","FOR_ATTRIBUTE_OBSERVER","MutationObserver","records","record","_record$target$ATTACH","target","hostConnected","AttachableController","htmlFor","host","getAttribute","removeAttribute","setAttribute","control","hasAttribute","isConnected","getRootNode","querySelector","currentControl","parentElement","attach","detach","constructor","onControlChange","_FOR_ATTRIBUTE_OBSERV","addController","observe","attributeFilter","setCurrentControl","hostDisconnected"],"sources":["attachable-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {isServer, ReactiveController, ReactiveControllerHost} from 'lit';\n\n/**\n * An element that can be attached to an associated controlling element.\n */\nexport interface Attachable {\n  /**\n   * Reflects the value of the `for` attribute, which is the ID of the element's\n   * associated control.\n   *\n   * Use this when the elements's associated control is not its parent.\n   *\n   * To manually control an element, set its `for` attribute to `\"\"`.\n   *\n   * @example\n   * ```html\n   * <div class=\"container\">\n   *   <md-attachable for=\"interactive\"></md-attachable>\n   *   <button id=\"interactive\">Action</button>\n   * </div>\n   * ```\n   *\n   * @example\n   * ```html\n   * <button class=\"manually-controlled\">\n   *   <md-attachable for=\"\"></md-attachable>\n   * </button>\n   * ```\n   */\n  htmlFor: string | null;\n\n  /**\n   * Gets or sets the element that controls the visibility of the attachable\n   * element. It is one of:\n   *\n   * - The control referenced by the `for` attribute.\n   * - The control provided to `element.attach(control)`\n   * - The element's parent.\n   * - `null` if the element is not controlled.\n   */\n  control: HTMLElement | null;\n\n  /**\n   * Attaches the element to an interactive control.\n   *\n   * @param control The element that controls the attachable element.\n   */\n  attach(control: HTMLElement): void;\n\n  /**\n   * Detaches the element from its current control.\n   */\n  detach(): void;\n}\n\n/**\n * A key to retrieve an `Attachable` element's `AttachableController` from a\n * global `MutationObserver`.\n */\nconst ATTACHABLE_CONTROLLER = Symbol('attachableController');\n\n/**\n * The host of an `AttachableController`. The controller will add itself to\n * the host so it can be retrieved in a global `MutationObserver`.\n */\ninterface AttachableControllerHost extends ReactiveControllerHost, HTMLElement {\n  [ATTACHABLE_CONTROLLER]?: AttachableController;\n}\n\nlet FOR_ATTRIBUTE_OBSERVER: MutationObserver | undefined;\n\nif (!isServer) {\n  /**\n   * A global `MutationObserver` that reacts to `for` attribute changes on\n   * `Attachable` elements. If the `for` attribute changes, the controller will\n   * re-attach to the new referenced element.\n   */\n  FOR_ATTRIBUTE_OBSERVER = new MutationObserver((records) => {\n    for (const record of records) {\n      // When a control's `for` attribute changes, inform its\n      // `AttachableController` to update to a new control.\n      (record.target as AttachableControllerHost)[\n        ATTACHABLE_CONTROLLER\n      ]?.hostConnected();\n    }\n  });\n}\n\n/**\n * A controller that provides an implementation for `Attachable` elements.\n *\n * @example\n * ```ts\n * class MyElement extends LitElement implements Attachable {\n *   get control() { return this.attachableController.control; }\n *\n *   private readonly attachableController = new AttachableController(\n *     this,\n *     (previousControl, newControl) => {\n *       previousControl?.removeEventListener('click', this.handleClick);\n *       newControl?.addEventListener('click', this.handleClick);\n *     }\n *   );\n *\n *   // Implement remaining `Attachable` properties/methods that call the\n *   // controller's properties/methods.\n * }\n * ```\n */\nexport class AttachableController implements ReactiveController, Attachable {\n  get htmlFor() {\n    return this.host.getAttribute('for');\n  }\n\n  set htmlFor(htmlFor: string | null) {\n    if (htmlFor === null) {\n      this.host.removeAttribute('for');\n    } else {\n      this.host.setAttribute('for', htmlFor);\n    }\n  }\n\n  get control() {\n    if (this.host.hasAttribute('for')) {\n      if (!this.htmlFor || !this.host.isConnected) {\n        return null;\n      }\n\n      return (\n        this.host.getRootNode() as Document | ShadowRoot\n      ).querySelector<HTMLElement>(`#${this.htmlFor}`);\n    }\n\n    return this.currentControl || this.host.parentElement;\n  }\n  set control(control: HTMLElement | null) {\n    if (control) {\n      this.attach(control);\n    } else {\n      this.detach();\n    }\n  }\n\n  private currentControl: HTMLElement | null = null;\n\n  /**\n   * Creates a new controller for an `Attachable` element.\n   *\n   * @param host The `Attachable` element.\n   * @param onControlChange A callback with two parameters for the previous and\n   *     next control. An `Attachable` element may perform setup or teardown\n   *     logic whenever the control changes.\n   */\n  constructor(\n    private readonly host: AttachableControllerHost,\n    private readonly onControlChange: (\n      prev: HTMLElement | null,\n      next: HTMLElement | null,\n    ) => void,\n  ) {\n    host.addController(this);\n    host[ATTACHABLE_CONTROLLER] = this;\n    FOR_ATTRIBUTE_OBSERVER?.observe(host, {attributeFilter: ['for']});\n  }\n\n  attach(control: HTMLElement) {\n    if (control === this.currentControl) {\n      return;\n    }\n\n    this.setCurrentControl(control);\n    // When imperatively attaching, remove the `for` attribute so\n    // that the attached control is used instead of a referenced one.\n    this.host.removeAttribute('for');\n  }\n\n  detach() {\n    this.setCurrentControl(null);\n    // When imperatively detaching, add an empty `for=\"\"` attribute. This will\n    // ensure the control is `null` rather than the `parentElement`.\n    this.host.setAttribute('for', '');\n  }\n\n  /** @private */\n  hostConnected() {\n    this.setCurrentControl(this.control);\n  }\n\n  /** @private */\n  hostDisconnected() {\n    this.setCurrentControl(null);\n  }\n\n  private setCurrentControl(control: HTMLElement | null) {\n    this.onControlChange(this.currentControl, control);\n    this.currentControl = control;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}