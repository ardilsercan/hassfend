{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport { html, isServer, LitElement } from 'lit';\nimport { queryAssignedElements } from 'lit/decorators.js';\nimport { ListController, NavigableKeys } from './list-controller.js';\nconst NAVIGABLE_KEY_SET = new Set(Object.values(NavigableKeys));\n// tslint:disable-next-line:enforce-comments-on-exported-symbols\nexport class List extends LitElement {\n  /** @export */\n  get items() {\n    return this.listController.items;\n  }\n  constructor() {\n    super();\n    this.listController = new ListController({\n      isItem: item => item.hasAttribute('md-list-item'),\n      getPossibleItems: () => this.slotItems,\n      isRtl: () => getComputedStyle(this).direction === 'rtl',\n      deactivateItem: item => {\n        item.tabIndex = -1;\n      },\n      activateItem: item => {\n        item.tabIndex = 0;\n      },\n      isNavigableKey: key => NAVIGABLE_KEY_SET.has(key),\n      isActivatable: item => !item.disabled && item.type !== 'text'\n    });\n    this.internals =\n    // Cast needed for closure\n    this.attachInternals();\n    if (!isServer) {\n      this.internals.role = 'list';\n      this.addEventListener('keydown', this.listController.handleKeydown);\n    }\n  }\n  render() {\n    return html`\n      <slot\n        @deactivate-items=${this.listController.onDeactivateItems}\n        @request-activation=${this.listController.onRequestActivation}\n        @slotchange=${this.listController.onSlotchange}>\n      </slot>\n    `;\n  }\n  /**\n   * Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activateNextItem() {\n    return this.listController.activateNextItem();\n  }\n  /**\n   * Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activatePreviousItem() {\n    return this.listController.activatePreviousItem();\n  }\n}\n__decorate([queryAssignedElements({\n  flatten: true\n})], List.prototype, \"slotItems\", void 0);","map":{"version":3,"names":["html","isServer","LitElement","queryAssignedElements","ListController","NavigableKeys","NAVIGABLE_KEY_SET","Set","Object","values","List","items","listController","constructor","isItem","item","hasAttribute","getPossibleItems","slotItems","isRtl","getComputedStyle","direction","deactivateItem","tabIndex","activateItem","isNavigableKey","key","has","isActivatable","disabled","type","internals","attachInternals","role","addEventListener","handleKeydown","render","onDeactivateItems","onRequestActivation","onSlotchange","activateNextItem","activatePreviousItem","__decorate","flatten"],"sources":["list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, isServer, LitElement} from 'lit';\nimport {queryAssignedElements} from 'lit/decorators.js';\n\nimport {ListController, NavigableKeys} from './list-controller.js';\nimport {ListItem as SharedListItem} from './list-navigation-helpers.js';\n\nconst NAVIGABLE_KEY_SET = new Set<string>(Object.values(NavigableKeys));\n\ninterface ListItem extends SharedListItem {\n  type: 'text' | 'button' | 'link';\n}\n\n// tslint:disable-next-line:enforce-comments-on-exported-symbols\nexport class List extends LitElement {\n  /**\n   * An array of activatable and disableable list items. Queries every assigned\n   * element that has the `md-list-item` attribute.\n   *\n   * _NOTE:_ This is a shallow, flattened query via\n   * `HTMLSlotElement.queryAssignedElements` and thus will _only_ include direct\n   * children / directly slotted elements.\n   */\n  @queryAssignedElements({flatten: true})\n  protected slotItems!: Array<ListItem | (HTMLElement & {item?: ListItem})>;\n\n  /** @export */\n  get items() {\n    return this.listController.items;\n  }\n\n  private readonly listController = new ListController<ListItem>({\n    isItem: (item: HTMLElement): item is ListItem =>\n      item.hasAttribute('md-list-item'),\n    getPossibleItems: () => this.slotItems,\n    isRtl: () => getComputedStyle(this).direction === 'rtl',\n    deactivateItem: (item) => {\n      item.tabIndex = -1;\n    },\n    activateItem: (item) => {\n      item.tabIndex = 0;\n    },\n    isNavigableKey: (key) => NAVIGABLE_KEY_SET.has(key),\n    isActivatable: (item) => !item.disabled && item.type !== 'text',\n  });\n\n  private readonly internals =\n    // Cast needed for closure\n    (this as HTMLElement).attachInternals();\n\n  constructor() {\n    super();\n    if (!isServer) {\n      this.internals.role = 'list';\n      this.addEventListener('keydown', this.listController.handleKeydown);\n    }\n  }\n\n  protected override render() {\n    return html`\n      <slot\n        @deactivate-items=${this.listController.onDeactivateItems}\n        @request-activation=${this.listController.onRequestActivation}\n        @slotchange=${this.listController.onSlotchange}>\n      </slot>\n    `;\n  }\n\n  /**\n   * Activates the next item in the list. If at the end of the list, the first\n   * item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activateNextItem(): ListItem | null {\n    return this.listController.activateNextItem();\n  }\n\n  /**\n   * Activates the previous item in the list. If at the start of the list, the\n   * last item will be activated.\n   *\n   * @return The activated list item or `null` if there are no items.\n   */\n  activatePreviousItem(): ListItem | null {\n    return this.listController.activatePreviousItem();\n  }\n}\n"],"mappings":"AAAA;;;;;;AAMA,SAAQA,IAAI,EAAEC,QAAQ,EAAEC,UAAU,QAAO,KAAK;AAC9C,SAAQC,qBAAqB,QAAO,mBAAmB;AAEvD,SAAQC,cAAc,EAAEC,aAAa,QAAO,sBAAsB;AAGlE,MAAMC,iBAAiB,GAAG,IAAIC,GAAG,CAASC,MAAM,CAACC,MAAM,CAACJ,aAAa,CAAC,CAAC;AAMvE;AACA,OAAM,MAAOK,IAAK,SAAQR,UAAU;EAYlC;EACA,IAAIS,KAAKA,CAAA;IACP,OAAO,IAAI,CAACC,cAAc,CAACD,KAAK;EAClC;EAqBAE,YAAA;IACE,KAAK,EAAE;IApBQ,KAAAD,cAAc,GAAG,IAAIR,cAAc,CAAW;MAC7DU,MAAM,EAAGC,IAAiB,IACxBA,IAAI,CAACC,YAAY,CAAC,cAAc,CAAC;MACnCC,gBAAgB,EAAEA,CAAA,KAAM,IAAI,CAACC,SAAS;MACtCC,KAAK,EAAEA,CAAA,KAAMC,gBAAgB,CAAC,IAAI,CAAC,CAACC,SAAS,KAAK,KAAK;MACvDC,cAAc,EAAGP,IAAI,IAAI;QACvBA,IAAI,CAACQ,QAAQ,GAAG,CAAC,CAAC;MACpB,CAAC;MACDC,YAAY,EAAGT,IAAI,IAAI;QACrBA,IAAI,CAACQ,QAAQ,GAAG,CAAC;MACnB,CAAC;MACDE,cAAc,EAAGC,GAAG,IAAKpB,iBAAiB,CAACqB,GAAG,CAACD,GAAG,CAAC;MACnDE,aAAa,EAAGb,IAAI,IAAK,CAACA,IAAI,CAACc,QAAQ,IAAId,IAAI,CAACe,IAAI,KAAK;KAC1D,CAAC;IAEe,KAAAC,SAAS;IACxB;IACC,IAAoB,CAACC,eAAe,EAAE;IAIvC,IAAI,CAAC/B,QAAQ,EAAE;MACb,IAAI,CAAC8B,SAAS,CAACE,IAAI,GAAG,MAAM;MAC5B,IAAI,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACtB,cAAc,CAACuB,aAAa,CAAC;;EAEvE;EAEmBC,MAAMA,CAAA;IACvB,OAAOpC,IAAI;;4BAEa,IAAI,CAACY,cAAc,CAACyB,iBAAiB;8BACnC,IAAI,CAACzB,cAAc,CAAC0B,mBAAmB;sBAC/C,IAAI,CAAC1B,cAAc,CAAC2B,YAAY;;KAEjD;EACH;EAEA;;;;;;EAMAC,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC5B,cAAc,CAAC4B,gBAAgB,EAAE;EAC/C;EAEA;;;;;;EAMAC,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAC7B,cAAc,CAAC6B,oBAAoB,EAAE;EACnD;;AA9DUC,UAAA,EADTvC,qBAAqB,CAAC;EAACwC,OAAO,EAAE;AAAI,CAAC,CAAC,C,sCACmC"},"metadata":{},"sourceType":"module","externalDependencies":[]}