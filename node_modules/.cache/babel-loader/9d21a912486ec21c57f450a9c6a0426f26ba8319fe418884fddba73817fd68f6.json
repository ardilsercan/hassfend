{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-icon-button\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-svg-icon\";\nexport let HaIconButton = _decorate([customElement(\"ha-icon-button\")], function (_initialize, _LitElement) {\n  class HaIconButton extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaIconButton,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"path\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String,\n        attribute: \"aria-haspopup\"\n      })],\n      key: \"ariaHasPopup\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"hideTitle\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"mwc-icon-button\", true)],\n      key: \"_button\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value:\n      // SVG icon path (if you need a non SVG icon instead, use the provided slot to pass an <ha-icon> in)\n\n      // Label that is used for ARIA support and as tooltip\n\n      // These should always be set as properties, not attributes,\n      // so that only the <button> element gets the attribute\n\n      function focus() {\n        var _this$_button;\n        (_this$_button = this._button) === null || _this$_button === void 0 || _this$_button.focus();\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"shadowRootOptions\",\n      value() {\n        return {\n          mode: \"open\",\n          delegatesFocus: true\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <mwc-icon-button\n        aria-label=${ifDefined(this.label)}\n        title=${ifDefined(this.hideTitle ? undefined : this.label)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        .disabled=${this.disabled}\n      >\n        ${this.path ? html`<ha-svg-icon .path=${this.path}></ha-svg-icon>` : html`<slot></slot>`}\n      </mwc-icon-button>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","query","ifDefined","HaIconButton","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Boolean","reflect","key","value","String","attribute","focus","_this$_button","_button","static","mode","delegatesFocus","render","label","hideTitle","undefined","ariaHasPopup","disabled","path","styles"],"sources":["/workspaces/frontend/src/components/ha-icon-button.ts"],"sourcesContent":["import \"@material/mwc-icon-button\";\nimport type { IconButton } from \"@material/mwc-icon-button\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport \"./ha-svg-icon\";\n\n@customElement(\"ha-icon-button\")\nexport class HaIconButton extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  // SVG icon path (if you need a non SVG icon instead, use the provided slot to pass an <ha-icon> in)\n  @property({ type: String }) path?: string;\n\n  // Label that is used for ARIA support and as tooltip\n  @property({ type: String }) label?: string;\n\n  // These should always be set as properties, not attributes,\n  // so that only the <button> element gets the attribute\n  @property({ type: String, attribute: \"aria-haspopup\" })\n  override ariaHasPopup!: IconButton[\"ariaHasPopup\"];\n\n  @property({ type: Boolean }) hideTitle = false;\n\n  @query(\"mwc-icon-button\", true) private _button?: IconButton;\n\n  public override focus() {\n    this._button?.focus();\n  }\n\n  static shadowRootOptions: ShadowRootInit = {\n    mode: \"open\",\n    delegatesFocus: true,\n  };\n\n  protected render(): TemplateResult {\n    return html`\n      <mwc-icon-button\n        aria-label=${ifDefined(this.label)}\n        title=${ifDefined(this.hideTitle ? undefined : this.label)}\n        aria-haspopup=${ifDefined(this.ariaHasPopup)}\n        .disabled=${this.disabled}\n      >\n        ${this.path\n          ? html`<ha-svg-icon .path=${this.path}></ha-svg-icon>`\n          : html`<slot></slot>`}\n      </mwc-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: inline-block;\n        outline: none;\n      }\n      :host([disabled]) {\n        pointer-events: none;\n      }\n      mwc-icon-button {\n        --mdc-theme-on-primary: currentColor;\n        --mdc-theme-text-disabled-on-light: var(--disabled-text-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-icon-button\": HaIconButton;\n  }\n}\n"],"mappings":";AAAA,OAAO,2BAA2B;AAElC,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,QAAwB,KAAK;AAC3E,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,SAAS,QAAQ,2BAA2B;AACrD,OAAO,eAAe;AAEtB,WACaC,YAAY,GAAAC,SAAA,EADxBL,aAAa,CAAC,gBAAgB,CAAC,aAAAM,WAAA,EAAAC,WAAA;EAAhC,MACaH,YAAY,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAyD7C;EAAC;IAAAI,CAAA,EAzDYN,YAAY;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACtBZ,QAAQ,CAAC;QAAEa,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAY,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAG3DZ,QAAQ,CAAC;QAAEa,IAAI,EAAEK;MAAO,CAAC,CAAC;MAAAF,GAAA;MAAAC,KAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAG1BZ,QAAQ,CAAC;QAAEa,IAAI,EAAEK;MAAO,CAAC,CAAC;MAAAF,GAAA;MAAAC,KAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAI1BZ,QAAQ,CAAC;QAAEa,IAAI,EAAEK,MAAM;QAAEC,SAAS,EAAE;MAAgB,CAAC,CAAC;MAAAH,GAAA;MAAAC,KAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAGtDZ,QAAQ,CAAC;QAAEa,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAE,GAAA;MAAAC,MAAA;QAAA,OAAa,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAE7CX,KAAK,CAAC,iBAAiB,EAAE,IAAI,CAAC;MAAAe,GAAA;MAAAC,KAAA;IAAA;MAAAN,IAAA;MAAAK,GAAA;MAAAC,KAAA;MAb/B;;MAGA;;MAGA;MACA;;MAQA,SAAAG,MAAA,EAAwB;QAAA,IAAAC,aAAA;QACtB,CAAAA,aAAA,OAAI,CAACC,OAAO,cAAAD,aAAA,eAAZA,aAAA,CAAcD,KAAK,CAAC,CAAC;MACvB;IAAC;MAAAT,IAAA;MAAAY,MAAA;MAAAP,GAAA;MAAAC,MAAA;QAAA,OAE0C;UACzCO,IAAI,EAAE,MAAM;UACZC,cAAc,EAAE;QAClB,CAAC;MAAA;IAAA;MAAAd,IAAA;MAAAK,GAAA;MAAAC,KAAA,EAED,SAAAS,OAAA,EAAmC;QACjC,OAAO7B,IAAK;AAChB;AACA,qBAAqBK,SAAS,CAAC,IAAI,CAACyB,KAAK,CAAE;AAC3C,gBAAgBzB,SAAS,CAAC,IAAI,CAAC0B,SAAS,GAAGC,SAAS,GAAG,IAAI,CAACF,KAAK,CAAE;AACnE,wBAAwBzB,SAAS,CAAC,IAAI,CAAC4B,YAAY,CAAE;AACrD,oBAAoB,IAAI,CAACC,QAAS;AAClC;AACA,UAAU,IAAI,CAACC,IAAI,GACPnC,IAAK,sBAAqB,IAAI,CAACmC,IAAK,iBAAgB,GACpDnC,IAAK,eAAe;AAChC;AACA,KAAK;MACH;IAAC;MAAAc,IAAA;MAAAY,MAAA;MAAAP,GAAA;MAAAC,KAAA,EAED,SAAAgB,OAAA,EAAoC;QAClC,OAAOrC,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAxD+BE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}