{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return node.localName === 'slot';\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport var FlattenedNodesObserver = /*#__PURE__*/function () {\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  function FlattenedNodesObserver(target, callback) {\n    var _this = this;\n    _classCallCheck(this, FlattenedNodesObserver);\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = function () {\n      _this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  _createClass(FlattenedNodesObserver, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n      if (isSlot(this._target)) {\n        this._listenSlots([this._target]);\n      } else if (wrap(this._target).children) {\n        this._listenSlots( /** @type {!NodeList<!Node>} */wrap(this._target).children);\n        if (window.ShadyDOM) {\n          this._shadyChildrenObserver = window.ShadyDOM.observeChildren(this._target, function (mutations) {\n            _this2._processMutations(mutations);\n          });\n        } else {\n          this._nativeChildrenObserver = new MutationObserver(function (mutations) {\n            _this2._processMutations(mutations);\n          });\n          this._nativeChildrenObserver.observe(this._target, {\n            childList: true\n          });\n        }\n      }\n      this._connected = true;\n    }\n\n    /**\n     * Deactivates the flattened nodes observer. After calling this method\n     * the observer callback will not be called when changes to flattened nodes\n     * occur. The `connect` method may be subsequently called to reactivate\n     * the observer.\n     *\n     * @return {void}\n     * @override\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (isSlot(this._target)) {\n        this._unlistenSlots([this._target]);\n      } else if (wrap(this._target).children) {\n        this._unlistenSlots( /** @type {!NodeList<!Node>} */wrap(this._target).children);\n        if (window.ShadyDOM && this._shadyChildrenObserver) {\n          window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n          this._shadyChildrenObserver = null;\n        } else if (this._nativeChildrenObserver) {\n          this._nativeChildrenObserver.disconnect();\n          this._nativeChildrenObserver = null;\n        }\n      }\n      this._connected = false;\n    }\n\n    /**\n     * @return {void}\n     * @private\n     */\n  }, {\n    key: \"_schedule\",\n    value: function _schedule() {\n      var _this3 = this;\n      if (!this._scheduled) {\n        this._scheduled = true;\n        microTask.run(function () {\n          return _this3.flush();\n        });\n      }\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n     * @return {void}\n     * @private\n     */\n  }, {\n    key: \"_processMutations\",\n    value: function _processMutations(mutations) {\n      this._processSlotMutations(mutations);\n      this.flush();\n    }\n\n    /**\n     * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n     * @return {void}\n     * @private\n     */\n  }, {\n    key: \"_processSlotMutations\",\n    value: function _processSlotMutations(mutations) {\n      if (mutations) {\n        for (var i = 0; i < mutations.length; i++) {\n          var mutation = mutations[i];\n          if (mutation.addedNodes) {\n            this._listenSlots(mutation.addedNodes);\n          }\n          if (mutation.removedNodes) {\n            this._unlistenSlots(mutation.removedNodes);\n          }\n        }\n      }\n    }\n\n    /**\n     * Flushes the observer causing any pending changes to be immediately\n     * delivered the observer callback. By default these changes are delivered\n     * asynchronously at the next microtask checkpoint.\n     *\n     * @return {boolean} Returns true if any pending changes caused the observer\n     * callback to run.\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (!this._connected) {\n        return false;\n      }\n      if (window.ShadyDOM) {\n        ShadyDOM.flush();\n      }\n      if (this._nativeChildrenObserver) {\n        this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n      } else if (this._shadyChildrenObserver) {\n        this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n      }\n      this._scheduled = false;\n      var info = {\n        target: this._target,\n        addedNodes: [],\n        removedNodes: []\n      };\n      var newNodes = this.constructor.getFlattenedNodes(this._target);\n      var splices = calculateSplices(newNodes, this._effectiveNodes);\n      // process removals\n      for (var i = 0, s; i < splices.length && (s = splices[i]); i++) {\n        for (var j = 0, n; j < s.removed.length && (n = s.removed[j]); j++) {\n          info.removedNodes.push(n);\n        }\n      }\n      // process adds\n      for (var _i = 0, _s; _i < splices.length && (_s = splices[_i]); _i++) {\n        for (var _j = _s.index; _j < _s.index + _s.addedCount; _j++) {\n          info.addedNodes.push(newNodes[_j]);\n        }\n      }\n      // update cache\n      this._effectiveNodes = newNodes;\n      var didFlush = false;\n      if (info.addedNodes.length || info.removedNodes.length) {\n        didFlush = true;\n        this.callback.call(this._target, info);\n      }\n      return didFlush;\n    }\n\n    /**\n     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n     * @return {void}\n     * @private\n     */\n  }, {\n    key: \"_listenSlots\",\n    value: function _listenSlots(nodeList) {\n      for (var i = 0; i < nodeList.length; i++) {\n        var n = nodeList[i];\n        if (isSlot(n)) {\n          n.addEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n\n    /**\n     * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n     * @return {void}\n     * @private\n     */\n  }, {\n    key: \"_unlistenSlots\",\n    value: function _unlistenSlots(nodeList) {\n      for (var i = 0; i < nodeList.length; i++) {\n        var n = nodeList[i];\n        if (isSlot(n)) {\n          n.removeEventListener('slotchange', this._boundSchedule);\n        }\n      }\n    }\n  }], [{\n    key: \"getFlattenedNodes\",\n    value:\n    /**\n     * Returns the list of flattened nodes for the given `node`.\n     * This list consists of a node's children and, for any children\n     * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n     * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n     * and the `<slot>` has one `<div>` assigned to it, then the flattened\n     * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n     * `<slot>` elements assigned to it, these are flattened as well.\n     *\n     * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n     *      return the list of flattened nodes.\n     * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n     * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n     */\n    // eslint-disable-next-line\n    function getFlattenedNodes(node) {\n      var wrapped = wrap(node);\n      if (isSlot(node)) {\n        node = /** @type {!HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n        return wrapped.assignedNodes({\n          flatten: true\n        });\n      } else {\n        return Array.from(wrapped.childNodes).map(function (node) {\n          if (isSlot(node)) {\n            node = /** @type {!HTMLSlotElement} */node; // eslint-disable-line no-self-assign\n            return wrap(node).assignedNodes({\n              flatten: true\n            });\n          } else {\n            return [node];\n          }\n        }).reduce(function (a, b) {\n          return a.concat(b);\n        }, []);\n      }\n    }\n  }]);\n  return FlattenedNodesObserver;\n}();","map":{"version":3,"names":["calculateSplices","microTask","wrap","isSlot","node","localName","FlattenedNodesObserver","target","callback","_this","_classCallCheck","_shadyChildrenObserver","_nativeChildrenObserver","_connected","_target","_effectiveNodes","_observer","_scheduled","_boundSchedule","_schedule","connect","_createClass","key","value","_this2","_listenSlots","children","window","ShadyDOM","observeChildren","mutations","_processMutations","MutationObserver","observe","childList","disconnect","_unlistenSlots","unobserveChildren","_this3","run","flush","_processSlotMutations","i","length","mutation","addedNodes","removedNodes","takeRecords","info","newNodes","constructor","getFlattenedNodes","splices","s","j","n","removed","push","index","addedCount","didFlush","call","nodeList","addEventListener","removeEventListener","wrapped","assignedNodes","flatten","Array","from","childNodes","map","reduce","a","b","concat"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/utils/flattened-nodes-observer.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\nimport { calculateSplices } from './array-splice.js';\nimport { microTask } from './async.js';\nimport { wrap } from './wrap.js';\n\n/**\n * Returns true if `node` is a slot element\n * @param {!Node} node Node to test.\n * @return {boolean} Returns true if the given `node` is a slot\n * @private\n */\nfunction isSlot(node) {\n  return (node.localName === 'slot');\n}\n\n/**\n * Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`. The list of flattened nodes consists\n * of a node's children and, for any children that are `<slot>` elements,\n * the expanded flattened list of `assignedNodes`.\n * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n * and the `<slot>` has one `<div>` assigned to it, then the flattened\n * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n * `<slot>` elements assigned to it, these are flattened as well.\n *\n * The provided `callback` is called whenever any change to this list\n * of flattened nodes occurs, where an addition or removal of a node is\n * considered a change. The `callback` is called with one argument, an object\n * containing an array of any `addedNodes` and `removedNodes`.\n *\n * Note: the callback is called asynchronous to any changes\n * at a microtask checkpoint. This is because observation is performed using\n * `MutationObserver` and the `<slot>` element's `slotchange` event which\n * are asynchronous.\n *\n * An example:\n * ```js\n * class TestSelfObserve extends PolymerElement {\n *   static get is() { return 'test-self-observe';}\n *   connectedCallback() {\n *     super.connectedCallback();\n *     this._observer = new FlattenedNodesObserver(this, (info) => {\n *       this.info = info;\n *     });\n *   }\n *   disconnectedCallback() {\n *     super.disconnectedCallback();\n *     this._observer.disconnect();\n *   }\n * }\n * customElements.define(TestSelfObserve.is, TestSelfObserve);\n * ```\n *\n * @summary Class that listens for changes (additions or removals) to\n * \"flattened nodes\" on a given `node`.\n * @implements {PolymerDomApi.ObserveHandle}\n */\nexport let FlattenedNodesObserver = class {\n\n  /**\n   * Returns the list of flattened nodes for the given `node`.\n   * This list consists of a node's children and, for any children\n   * that are `<slot>` elements, the expanded flattened list of `assignedNodes`.\n   * For example, if the observed node has children `<a></a><slot></slot><b></b>`\n   * and the `<slot>` has one `<div>` assigned to it, then the flattened\n   * nodes list is `<a></a><div></div><b></b>`. If the `<slot>` has other\n   * `<slot>` elements assigned to it, these are flattened as well.\n   *\n   * @param {!HTMLElement|!HTMLSlotElement} node The node for which to\n   *      return the list of flattened nodes.\n   * @return {!Array<!Node>} The list of flattened nodes for the given `node`.\n   * @nocollapse See https://github.com/google/closure-compiler/issues/2763\n   */\n  // eslint-disable-next-line\n  static getFlattenedNodes(node) {\n    const wrapped = wrap(node);\n    if (isSlot(node)) {\n      node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n      return wrapped.assignedNodes({flatten: true});\n    } else {\n      return Array.from(wrapped.childNodes).map((node) => {\n        if (isSlot(node)) {\n          node = /** @type {!HTMLSlotElement} */(node); // eslint-disable-line no-self-assign\n          return wrap(node).assignedNodes({flatten: true});\n        } else {\n          return [node];\n        }\n      }).reduce((a, b) => a.concat(b), []);\n    }\n  }\n\n  /**\n   * @param {!HTMLElement} target Node on which to listen for changes.\n   * @param {?function(this: Element, { target: !HTMLElement, addedNodes: !Array<!Element>, removedNodes: !Array<!Element> }):void} callback Function called when there are additions\n   * or removals from the target's list of flattened nodes.\n   */\n  // eslint-disable-next-line\n  constructor(target, callback) {\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._shadyChildrenObserver = null;\n    /**\n     * @type {MutationObserver}\n     * @private\n     */\n    this._nativeChildrenObserver = null;\n    this._connected = false;\n    /**\n     * @type {!HTMLElement}\n     * @private\n     */\n    this._target = target;\n    this.callback = callback;\n    this._effectiveNodes = [];\n    this._observer = null;\n    this._scheduled = false;\n    /**\n     * @type {function()}\n     * @private\n     */\n    this._boundSchedule = () => {\n      this._schedule();\n    };\n    this.connect();\n    this._schedule();\n  }\n\n  /**\n   * Activates an observer. This method is automatically called when\n   * a `FlattenedNodesObserver` is created. It should only be called to\n   * re-activate an observer that has been deactivated via the `disconnect` method.\n   *\n   * @return {void}\n   */\n  connect() {\n    if (isSlot(this._target)) {\n      this._listenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._listenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM) {\n        this._shadyChildrenObserver =\n          window.ShadyDOM.observeChildren(this._target, (mutations) => {\n            this._processMutations(mutations);\n          });\n      } else {\n        this._nativeChildrenObserver =\n          new MutationObserver((mutations) => {\n            this._processMutations(mutations);\n          });\n        this._nativeChildrenObserver.observe(this._target, {childList: true});\n      }\n    }\n    this._connected = true;\n  }\n\n  /**\n   * Deactivates the flattened nodes observer. After calling this method\n   * the observer callback will not be called when changes to flattened nodes\n   * occur. The `connect` method may be subsequently called to reactivate\n   * the observer.\n   *\n   * @return {void}\n   * @override\n   */\n  disconnect() {\n    if (isSlot(this._target)) {\n      this._unlistenSlots([this._target]);\n    } else if (wrap(this._target).children) {\n      this._unlistenSlots(\n          /** @type {!NodeList<!Node>} */ (wrap(this._target).children));\n      if (window.ShadyDOM && this._shadyChildrenObserver) {\n        window.ShadyDOM.unobserveChildren(this._shadyChildrenObserver);\n        this._shadyChildrenObserver = null;\n      } else if (this._nativeChildrenObserver) {\n        this._nativeChildrenObserver.disconnect();\n        this._nativeChildrenObserver = null;\n      }\n    }\n    this._connected = false;\n  }\n\n  /**\n   * @return {void}\n   * @private\n   */\n  _schedule() {\n    if (!this._scheduled) {\n      this._scheduled = true;\n      microTask.run(() => this.flush());\n    }\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processMutations(mutations) {\n    this._processSlotMutations(mutations);\n    this.flush();\n  }\n\n  /**\n   * @param {Array<MutationRecord>} mutations Mutations signaled by the mutation observer\n   * @return {void}\n   * @private\n   */\n  _processSlotMutations(mutations) {\n    if (mutations) {\n      for (let i=0; i < mutations.length; i++) {\n        let mutation = mutations[i];\n        if (mutation.addedNodes) {\n          this._listenSlots(mutation.addedNodes);\n        }\n        if (mutation.removedNodes) {\n          this._unlistenSlots(mutation.removedNodes);\n        }\n      }\n    }\n  }\n\n  /**\n   * Flushes the observer causing any pending changes to be immediately\n   * delivered the observer callback. By default these changes are delivered\n   * asynchronously at the next microtask checkpoint.\n   *\n   * @return {boolean} Returns true if any pending changes caused the observer\n   * callback to run.\n   */\n  flush() {\n    if (!this._connected) {\n      return false;\n    }\n    if (window.ShadyDOM) {\n      ShadyDOM.flush();\n    }\n    if (this._nativeChildrenObserver) {\n      this._processSlotMutations(this._nativeChildrenObserver.takeRecords());\n    } else if (this._shadyChildrenObserver) {\n      this._processSlotMutations(this._shadyChildrenObserver.takeRecords());\n    }\n    this._scheduled = false;\n    let info = {\n      target: this._target,\n      addedNodes: [],\n      removedNodes: []\n    };\n    let newNodes = this.constructor.getFlattenedNodes(this._target);\n    let splices = calculateSplices(newNodes,\n      this._effectiveNodes);\n    // process removals\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n        info.removedNodes.push(n);\n      }\n    }\n    // process adds\n    for (let i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n      for (let j=s.index; j < s.index + s.addedCount; j++) {\n        info.addedNodes.push(newNodes[j]);\n      }\n    }\n    // update cache\n    this._effectiveNodes = newNodes;\n    let didFlush = false;\n    if (info.addedNodes.length || info.removedNodes.length) {\n      didFlush = true;\n      this.callback.call(this._target, info);\n    }\n    return didFlush;\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _listenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.addEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n  /**\n   * @param {!Array<!Node>|!NodeList<!Node>} nodeList Nodes that could change\n   * @return {void}\n   * @private\n   */\n  _unlistenSlots(nodeList) {\n    for (let i=0; i < nodeList.length; i++) {\n      let n = nodeList[i];\n      if (isSlot(n)) {\n        n.removeEventListener('slotchange', this._boundSchedule);\n      }\n    }\n  }\n\n};"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,WAAW;AAElB,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,IAAI,QAAQ,WAAW;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,IAAI,EAAE;EACpB,OAAQA,IAAI,CAACC,SAAS,KAAK,MAAM;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,sBAAsB;EAkC/B;AACF;AACA;AACA;AACA;EACE;EACA,SAAAA,uBAAYC,MAAM,EAAEC,QAAQ,EAAE;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAJ,sBAAA;IAC5B;AACJ;AACA;AACA;IACI,IAAI,CAACK,sBAAsB,GAAG,IAAI;IAClC;AACJ;AACA;AACA;IACI,IAAI,CAACC,uBAAuB,GAAG,IAAI;IACnC,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,OAAO,GAAGP,MAAM;IACrB,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACO,eAAe,GAAG,EAAE;IACzB,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAACC,UAAU,GAAG,KAAK;IACvB;AACJ;AACA;AACA;IACI,IAAI,CAACC,cAAc,GAAG,YAAM;MAC1BT,KAAI,CAACU,SAAS,CAAC,CAAC;IAClB,CAAC;IACD,IAAI,CAACC,OAAO,CAAC,CAAC;IACd,IAAI,CAACD,SAAS,CAAC,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANEE,YAAA,CAAAf,sBAAA;IAAAgB,GAAA;IAAAC,KAAA,EAOA,SAAAH,QAAA,EAAU;M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"},"metadata":{},"sourceType":"module","externalDependencies":[]}