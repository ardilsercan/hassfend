{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { css, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { afterNextRender } from \"../common/util/render-status\";\nimport { getValueInPercentage, normalize } from \"../util/calculate\";\nvar getAngle = function getAngle(value, min, max) {\n  var percentage = getValueInPercentage(normalize(value, min, max), min, max);\n  return percentage * 180 / 100;\n};\nexport var HaGauge = _decorate([customElement(\"ha-gauge\")], function (_initialize, _LitElement) {\n  var HaGauge = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaGauge, _LitElement2);\n    function HaGauge() {\n      var _this;\n      _classCallCheck(this, HaGauge);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaGauge, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaGauge);\n  }(_LitElement);\n  return {\n    F: HaGauge,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"min\",\n      value: function value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"max\",\n      value: function value() {\n        return 100;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"value\",\n      value: function value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"formatOptions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: String\n      })],\n      key: \"valueText\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"locale\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"needle\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"levels\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value: function value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_angle\",\n      value: function value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_updated\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_segment_label\",\n      value: function value() {\n        return \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProperties) {\n        var _this2 = this;\n        _get(_getPrototypeOf(HaGauge.prototype), \"firstUpdated\", this).call(this, changedProperties);\n        // Wait for the first render for the initial animation to work\n        afterNextRender(function () {\n          _this2._updated = true;\n          _this2._angle = getAngle(_this2.value, _this2.min, _this2.max);\n          _this2._segment_label = _this2.getSegmentLabel();\n          _this2._rescale_svg();\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        _get(_getPrototypeOf(HaGauge.prototype), \"updated\", this).call(this, changedProperties);\n        if (!this._updated || !changedProperties.has(\"value\") && !changedProperties.has(\"label\") && !changedProperties.has(\"_segment_label\")) {\n          return;\n        }\n        this._angle = getAngle(this.value, this.min, this.max);\n        this._segment_label = this.getSegmentLabel();\n        this._rescale_svg();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n        return svg(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <svg viewBox=\\\"-50 -50 100 50\\\" class=\\\"gauge\\\">\\n        \", \"\\n\\n        \", \"\\n        \", \"\\n        </path>\\n      </svg>\\n      <svg class=\\\"text\\\">\\n        <text class=\\\"value-text\\\">\\n          \", \"\", \"\\n        </text>\\n      </svg>\"])), !this.needle || !this.levels ? svg(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"<path\\n          class=\\\"dial\\\"\\n          d=\\\"M -40 0 A 40 40 0 0 1 40 0\\\"\\n        ></path>\"]))) : \"\", this.levels ? this.levels.sort(function (a, b) {\n          return a.level - b.level;\n        }).map(function (level, idx) {\n          var firstPath;\n          if (idx === 0 && level.level !== _this3.min) {\n            var _angle = getAngle(_this3.min, _this3.min, _this3.max);\n            firstPath = svg(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"<path\\n                        stroke=\\\"var(--info-color)\\\"\\n                        class=\\\"level\\\"\\n                        d=\\\"M\\n                          \", \"\\n                          \", \"\\n                         A 40 40 0 0 1 40 0\\n                        \\\"\\n                      ></path>\"])), 0 - 40 * Math.cos(_angle * Math.PI / 180), 0 - 40 * Math.sin(_angle * Math.PI / 180));\n          }\n          var angle = getAngle(level.level, _this3.min, _this3.max);\n          return svg(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"<path\\n                      stroke=\\\"\", \"\\\"\\n                      class=\\\"level\\\"\\n                      d=\\\"M\\n                        \", \"\\n                        \", \"\\n                       A 40 40 0 0 1 40 0\\n                      \\\"\\n                    ></path>\"])), firstPath, level.stroke, 0 - 40 * Math.cos(angle * Math.PI / 180), 0 - 40 * Math.sin(angle * Math.PI / 180));\n        }) : \"\", this.needle ? svg(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"<path\\n                class=\\\"needle\\\"\\n                d=\\\"M -25 -2.5 L -47.5 0 L -25 2.5 z\\\"\\n                style=\", \"\\n              >\\n              \"])), styleMap({\n          transform: \"rotate(\".concat(this._angle, \"deg)\")\n        })) : svg(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"<path\\n                class=\\\"value\\\"\\n                d=\\\"M -40 0 A 40 40 0 1 0 40 0\\\"\\n                style=\", \"\\n              >\"])), styleMap({\n          transform: \"rotate(\".concat(this._angle, \"deg)\")\n        })), this._segment_label ? this._segment_label : this.valueText || formatNumber(this.value, this.locale, this.formatOptions), this._segment_label ? \"\" : this.label === \"%\" ? blankBeforePercent(this.locale) + \"%\" : \" \".concat(this.label));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_rescale_svg\",\n      value: function _rescale_svg() {\n        // Set the viewbox of the SVG containing the value to perfectly\n        // fit the text\n        // That way it will auto-scale correctly\n        var svgRoot = this.shadowRoot.querySelector(\".text\");\n        var box = svgRoot.querySelector(\"text\").getBBox();\n        svgRoot.setAttribute(\"viewBox\", \"\".concat(box.x, \" \").concat(box.y, \" \").concat(box.width, \" \").concat(box.height));\n      }\n    }, {\n      kind: \"method\",\n      key: \"getSegmentLabel\",\n      value: function getSegmentLabel() {\n        if (this.levels) {\n          this.levels.sort(function (a, b) {\n            return a.level - b.level;\n          });\n          for (var i = this.levels.length - 1; i >= 0; i--) {\n            if (this.value >= this.levels[i].level) {\n              return this.levels[i].label;\n            }\n          }\n        }\n        return \"\";\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n      :host {\\n        position: relative;\\n      }\\n      .dial {\\n        fill: none;\\n        stroke: var(--primary-background-color);\\n        stroke-width: 15;\\n      }\\n      .value {\\n        fill: none;\\n        stroke-width: 15;\\n        stroke: var(--gauge-color);\\n        transition: all 1s ease 0s;\\n      }\\n      .needle {\\n        fill: var(--primary-text-color);\\n        transition: all 1s ease 0s;\\n      }\\n      .level {\\n        fill: none;\\n        stroke-width: 15;\\n      }\\n      .gauge {\\n        display: block;\\n      }\\n      .text {\\n        position: absolute;\\n        max-height: 40%;\\n        max-width: 55%;\\n        left: 50%;\\n        bottom: -6%;\\n        transform: translate(-50%, 0%);\\n      }\\n      .value-text {\\n        font-size: 50px;\\n        fill: var(--primary-text-color);\\n        text-anchor: middle;\\n        direction: ltr;\\n      }\\n    \"])));\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","LitElement","svg","customElement","property","state","styleMap","formatNumber","blankBeforePercent","afterNextRender","getValueInPercentage","normalize","getAngle","value","min","max","percentage","HaGauge","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","type","Number","key","attribute","String","Boolean","firstUpdated","changedProperties","_this2","_get","_getPrototypeOf","prototype","call","_updated","_angle","_segment_label","getSegmentLabel","_rescale_svg","updated","has","render","_this3","_templateObject","_taggedTemplateLiteral","needle","levels","_templateObject2","sort","a","b","level","map","idx","firstPath","angle","_templateObject3","Math","cos","PI","sin","_templateObject4","stroke","_templateObject5","transform","_templateObject6","valueText","locale","formatOptions","label","svgRoot","shadowRoot","querySelector","box","getBBox","setAttribute","x","y","width","height","i","static","styles","_templateObject7"],"sources":["/workspaces/frontend/src/components/ha-gauge.ts"],"sourcesContent":["import { css, LitElement, PropertyValues, svg, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforePercent } from \"../common/translations/blank_before_percent\";\nimport { afterNextRender } from \"../common/util/render-status\";\nimport { FrontendLocaleData } from \"../data/translation\";\nimport { getValueInPercentage, normalize } from \"../util/calculate\";\n\nconst getAngle = (value: number, min: number, max: number) => {\n  const percentage = getValueInPercentage(normalize(value, min, max), min, max);\n  return (percentage * 180) / 100;\n};\n\nexport interface LevelDefinition {\n  level: number;\n  stroke: string;\n  label?: string;\n}\n\n@customElement(\"ha-gauge\")\nexport class HaGauge extends LitElement {\n  @property({ type: Number }) public min = 0;\n\n  @property({ type: Number }) public max = 100;\n\n  @property({ type: Number }) public value = 0;\n\n  @property({ attribute: false })\n  public formatOptions?: Intl.NumberFormatOptions;\n\n  @property({ type: String }) public valueText?: string;\n\n  @property({ attribute: false }) public locale!: FrontendLocaleData;\n\n  @property({ type: Boolean }) public needle = false;\n\n  @property({ type: Array }) public levels?: LevelDefinition[];\n\n  @property() public label = \"\";\n\n  @state() private _angle = 0;\n\n  @state() private _updated = false;\n\n  @state() private _segment_label? = \"\";\n\n  protected firstUpdated(changedProperties: PropertyValues) {\n    super.firstUpdated(changedProperties);\n    // Wait for the first render for the initial animation to work\n    afterNextRender(() => {\n      this._updated = true;\n      this._angle = getAngle(this.value, this.min, this.max);\n      this._segment_label = this.getSegmentLabel();\n      this._rescale_svg();\n    });\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (\n      !this._updated ||\n      (!changedProperties.has(\"value\") &&\n        !changedProperties.has(\"label\") &&\n        !changedProperties.has(\"_segment_label\"))\n    ) {\n      return;\n    }\n    this._angle = getAngle(this.value, this.min, this.max);\n    this._segment_label = this.getSegmentLabel();\n    this._rescale_svg();\n  }\n\n  protected render() {\n    return svg`\n      <svg viewBox=\"-50 -50 100 50\" class=\"gauge\">\n        ${\n          !this.needle || !this.levels\n            ? svg`<path\n          class=\"dial\"\n          d=\"M -40 0 A 40 40 0 0 1 40 0\"\n        ></path>`\n            : \"\"\n        }\n\n        ${\n          this.levels\n            ? this.levels\n                .sort((a, b) => a.level - b.level)\n                .map((level, idx) => {\n                  let firstPath: TemplateResult | undefined;\n                  if (idx === 0 && level.level !== this.min) {\n                    const angle = getAngle(this.min, this.min, this.max);\n                    firstPath = svg`<path\n                        stroke=\"var(--info-color)\"\n                        class=\"level\"\n                        d=\"M\n                          ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                          ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                         A 40 40 0 0 1 40 0\n                        \"\n                      ></path>`;\n                  }\n                  const angle = getAngle(level.level, this.min, this.max);\n                  return svg`${firstPath}<path\n                      stroke=\"${level.stroke}\"\n                      class=\"level\"\n                      d=\"M\n                        ${0 - 40 * Math.cos((angle * Math.PI) / 180)}\n                        ${0 - 40 * Math.sin((angle * Math.PI) / 180)}\n                       A 40 40 0 0 1 40 0\n                      \"\n                    ></path>`;\n                })\n            : \"\"\n        }\n        ${\n          this.needle\n            ? svg`<path\n                class=\"needle\"\n                d=\"M -25 -2.5 L -47.5 0 L -25 2.5 z\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >\n              `\n            : svg`<path\n                class=\"value\"\n                d=\"M -40 0 A 40 40 0 1 0 40 0\"\n                style=${styleMap({ transform: `rotate(${this._angle}deg)` })}\n              >`\n        }\n        </path>\n      </svg>\n      <svg class=\"text\">\n        <text class=\"value-text\">\n          ${\n            this._segment_label\n              ? this._segment_label\n              : this.valueText ||\n                formatNumber(this.value, this.locale, this.formatOptions)\n          }${\n            this._segment_label\n              ? \"\"\n              : this.label === \"%\"\n                ? blankBeforePercent(this.locale) + \"%\"\n                : ` ${this.label}`\n          }\n        </text>\n      </svg>`;\n  }\n\n  private _rescale_svg() {\n    // Set the viewbox of the SVG containing the value to perfectly\n    // fit the text\n    // That way it will auto-scale correctly\n    const svgRoot = this.shadowRoot!.querySelector(\".text\")!;\n    const box = svgRoot.querySelector(\"text\")!.getBBox()!;\n    svgRoot.setAttribute(\n      \"viewBox\",\n      `${box.x} ${box!.y} ${box.width} ${box.height}`\n    );\n  }\n\n  private getSegmentLabel() {\n    if (this.levels) {\n      this.levels.sort((a, b) => a.level - b.level);\n      for (let i = this.levels.length - 1; i >= 0; i--) {\n        if (this.value >= this.levels[i].level) {\n          return this.levels[i].label;\n        }\n      }\n    }\n    return \"\";\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n      }\n      .dial {\n        fill: none;\n        stroke: var(--primary-background-color);\n        stroke-width: 15;\n      }\n      .value {\n        fill: none;\n        stroke-width: 15;\n        stroke: var(--gauge-color);\n        transition: all 1s ease 0s;\n      }\n      .needle {\n        fill: var(--primary-text-color);\n        transition: all 1s ease 0s;\n      }\n      .level {\n        fill: none;\n        stroke-width: 15;\n      }\n      .gauge {\n        display: block;\n      }\n      .text {\n        position: absolute;\n        max-height: 40%;\n        max-width: 55%;\n        left: 50%;\n        bottom: -6%;\n        transform: translate(-50%, 0%);\n      }\n      .value-text {\n        font-size: 50px;\n        fill: var(--primary-text-color);\n        text-anchor: middle;\n        direction: ltr;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-gauge\": HaGauge;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}