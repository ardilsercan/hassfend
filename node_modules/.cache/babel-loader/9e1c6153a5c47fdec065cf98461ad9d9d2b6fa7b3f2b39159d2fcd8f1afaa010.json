{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the Polymer html\n * template tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n *\n * @type {!TrustedTypePolicy|undefined}\n */\nvar policy = window.trustedTypes && trustedTypes.createPolicy('polymer-html-literal', {\n  createHTML: function createHTML(s) {\n    return s;\n  }\n});\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nvar LiteralString = /*#__PURE__*/function () {\n  /**\n   * @param {!ITemplateArray} strings Constant parts of tagged template literal\n   * @param {!Array<*>} values Variable parts of tagged template literal\n   */\n  function LiteralString(strings, values) {\n    _classCallCheck(this, LiteralString);\n    assertValidTemplateStringParameters(strings, values);\n    var string = values.reduce(function (acc, v, idx) {\n      return acc + literalValue(v) + strings[idx + 1];\n    }, strings[0]);\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  _createClass(LiteralString, [{\n    key: \"toString\",\n    value: function toString() {\n      return this.value;\n    }\n  }]);\n  return LiteralString;\n}();\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */value.value;\n  } else {\n    throw new Error(\"non-literal value passed to Polymer's htmlLiteral function: \".concat(value));\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    // This might be an mXSS risk â€“ mainly in the case where this template\n    // contains untrusted content that was believed to be sanitized.\n    // However we can't just use the XMLSerializer here because it misencodes\n    // `>` characters inside style tags.\n    // For an example of an actual case that hit this encoding issue,\n    // see b/198592167\n    return /** @type {!HTMLTemplateElement } */value.innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\"non-template value passed to Polymer's html function: \".concat(value));\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport var html = function html(strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  assertValidTemplateStringParameters(strings, values);\n  var template = /** @type {!HTMLTemplateElement} */document.createElement('template');\n  var value = values.reduce(function (acc, v, idx) {\n    return acc + htmlValue(v) + strings[idx + 1];\n  }, strings[0]);\n  if (policy) {\n    value = policy.createHTML(value);\n  }\n  template.innerHTML = value;\n  return template;\n};\n\n/**\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {!Array<*>} values Array of values from quasis\n */\nvar assertValidTemplateStringParameters = function assertValidTemplateStringParameters(strings, values) {\n  // Note: if/when https://github.com/tc39/proposal-array-is-template-object\n  // is standardized, use that instead when available, as it can perform an\n  // unforgable check (though of course, the function itself can be forged).\n  if (!Array.isArray(strings) || !Array.isArray(strings.raw) || values.length !== strings.length - 1) {\n    // This is either caused by a browser bug, a compiler bug, or someone\n    // calling the html template tag function as a regular function.\n    //\n    throw new TypeError('Invalid call to the html template tag');\n  }\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport var htmlLiteral = function htmlLiteral(strings) {\n  for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    values[_key2 - 1] = arguments[_key2];\n  }\n  return new LiteralString(strings, values);\n};","map":{"version":3,"names":["policy","window","trustedTypes","createPolicy","createHTML","s","LiteralString","strings","values","_classCallCheck","assertValidTemplateStringParameters","string","reduce","acc","v","idx","literalValue","value","toString","_createClass","key","Error","concat","htmlValue","HTMLTemplateElement","innerHTML","html","_len","arguments","length","Array","_key","template","document","createElement","isArray","raw","TypeError","htmlLiteral","_len2","_key2"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/utils/html-tag.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport './boot.js';\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the Polymer html\n * template tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n *\n * @type {!TrustedTypePolicy|undefined}\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('polymer-html-literal', {createHTML: (s) => s});\n\n/**\n * Class representing a static string value which can be used to filter\n * strings by asseting that they have been created via this class. The\n * `value` property returns the string passed to the constructor.\n */\nclass LiteralString {\n  /**\n   * @param {!ITemplateArray} strings Constant parts of tagged template literal\n   * @param {!Array<*>} values Variable parts of tagged template literal\n   */\n  constructor(strings, values) {\n    assertValidTemplateStringParameters(strings, values);\n    const string = values.reduce(\n        (acc, v, idx) => acc + literalValue(v) + strings[idx + 1], strings[0]);\n    /** @type {string} */\n    this.value = string.toString();\n  }\n  /**\n   * @return {string} LiteralString string value\n   * @override\n   */\n  toString() {\n    return this.value;\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction literalValue(value) {\n  if (value instanceof LiteralString) {\n    return /** @type {!LiteralString} */(value).value;\n  } else {\n    throw new Error(\n        `non-literal value passed to Polymer's htmlLiteral function: ${value}`\n    );\n  }\n}\n\n/**\n * @param {*} value Object to stringify into HTML\n * @return {string} HTML stringified form of `obj`\n */\nfunction htmlValue(value) {\n  if (value instanceof HTMLTemplateElement) {\n    // This might be an mXSS risk â€“ mainly in the case where this template\n    // contains untrusted content that was believed to be sanitized.\n    // However we can't just use the XMLSerializer here because it misencodes\n    // `>` characters inside style tags.\n    // For an example of an actual case that hit this encoding issue,\n    // see b/198592167\n    return /** @type {!HTMLTemplateElement } */(value).innerHTML;\n  } else if (value instanceof LiteralString) {\n    return literalValue(value);\n  } else {\n    throw new Error(\n        `non-template value passed to Polymer's html function: ${value}`);\n  }\n}\n\n/**\n * A template literal tag that creates an HTML <template> element from the\n * contents of the string.\n *\n * This allows you to write a Polymer Template in JavaScript.\n *\n * Templates can be composed by interpolating `HTMLTemplateElement`s in\n * expressions in the JavaScript template literal. The nested template's\n * `innerHTML` is included in the containing template.  The only other\n * values allowed in expressions are those returned from `htmlLiteral`\n * which ensures only literal values from JS source ever reach the HTML, to\n * guard against XSS risks.\n *\n * All other values are disallowed in expressions to help prevent XSS\n * attacks; however, `htmlLiteral` can be used to compose static\n * string values into templates. This is useful to compose strings into\n * places that do not accept html, like the css text of a `style`\n * element.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>:host{ content:\"...\" }</style>\n *         <div class=\"shadowed\">${this.partialTemplate}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get partialTemplate() { return html`<span>Partial!</span>`; }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!HTMLTemplateElement} Constructed HTMLTemplateElement\n */\nexport const html = function html(strings, ...values) {\n  assertValidTemplateStringParameters(strings, values);\n  const template =\n      /** @type {!HTMLTemplateElement} */ (document.createElement('template'));\n  let value = values.reduce(\n      (acc, v, idx) => acc + htmlValue(v) + strings[idx + 1], strings[0]);\n  if (policy) {\n    value = policy.createHTML(value);\n  }\n  template.innerHTML = value;\n  return template;\n};\n\n/**\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {!Array<*>} values Array of values from quasis\n */\nconst assertValidTemplateStringParameters = (strings, values) => {\n  // Note: if/when https://github.com/tc39/proposal-array-is-template-object\n  // is standardized, use that instead when available, as it can perform an\n  // unforgable check (though of course, the function itself can be forged).\n  if (!Array.isArray(strings) || !Array.isArray(strings.raw) ||\n      (values.length !== strings.length - 1)) {\n    // This is either caused by a browser bug, a compiler bug, or someone\n    // calling the html template tag function as a regular function.\n    //\n    throw new TypeError('Invalid call to the html template tag');\n  }\n};\n\n/**\n * An html literal tag that can be used with `html` to compose.\n * a literal string.\n *\n * Example:\n *\n *     static get template() {\n *       return html`\n *         <style>\n *           :host { display: block; }\n *           ${this.styleTemplate()}\n *         </style>\n *         <div class=\"shadowed\">${staticValue}</div>\n *         ${super.template}\n *       `;\n *     }\n *     static get styleTemplate() {\n *        return htmlLiteral`.shadowed { background: gray; }`;\n *     }\n *\n * @param {!ITemplateArray} strings Constant parts of tagged template literal\n * @param {...*} values Variable parts of tagged template literal\n * @return {!LiteralString} Constructed literal string\n */\nexport const htmlLiteral = function(strings, ...values) {\n  return new LiteralString(strings, values);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}