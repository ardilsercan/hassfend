{"ast":null,"code":"import { wrap } from \"comlink\";\nlet worker;\nexport const renderMarkdown = async (content, markedOptions, hassOptions) => {\n  if (!worker) {\n    worker = wrap(new Worker( /* webpackChunkName: \"markdown-worker\" */\n    new URL(\"./markdown-worker\", import.meta.url)));\n  }\n  return worker.renderMarkdown(content, markedOptions, hassOptions);\n};","map":{"version":3,"names":["wrap","worker","renderMarkdown","content","markedOptions","hassOptions","Worker","URL","import","meta","url"],"sources":["/workspaces/frontend/src/resources/render-markdown.ts"],"sourcesContent":["import { Remote, wrap } from \"comlink\";\nimport type { Api } from \"./markdown-worker\";\n\ntype RenderMarkdownType = Api[\"renderMarkdown\"];\ntype RenderMarkdownParamTypes = Parameters<RenderMarkdownType>;\n\nlet worker: Remote<Api> | undefined;\n\nexport const renderMarkdown = async (\n  content: RenderMarkdownParamTypes[0],\n  markedOptions: RenderMarkdownParamTypes[1],\n  hassOptions?: RenderMarkdownParamTypes[2]\n): Promise<ReturnType<RenderMarkdownType>> => {\n  if (!worker) {\n    worker = wrap(\n      new Worker(\n        /* webpackChunkName: \"markdown-worker\" */\n        new URL(\"./markdown-worker\", import.meta.url)\n      )\n    );\n  }\n  return worker.renderMarkdown(content, markedOptions, hassOptions);\n};\n"],"mappings":"AAAA,SAAiBA,IAAI,QAAQ,SAAS;AAMtC,IAAIC,MAA+B;AAEnC,OAAO,MAAMC,cAAc,GAAG,MAAAA,CAC5BC,OAAoC,EACpCC,aAA0C,EAC1CC,WAAyC,KACG;EAC5C,IAAI,CAACJ,MAAM,EAAE;IACXA,MAAM,GAAGD,IAAI,CACX,IAAIM,MAAM,EACR;IACA,IAAIC,GAAG,CAAC,mBAAmB,EAAEC,MAAM,CAACC,IAAI,CAACC,GAAG,CAC9C,CACF,CAAC;EACH;EACA,OAAOT,MAAM,CAACC,cAAc,CAACC,OAAO,EAAEC,aAAa,EAAEC,WAAW,CAAC;AACnE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}