{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/chips/ha-assist-chip\";\nimport \"../../../../components/chips/ha-chip-set\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport { showScriptEditor } from \"../../../../data/script\";\nimport { buttonLinkStyle } from \"../../../../resources/styles\";\nexport let HaDeviceAutomationCard = _decorate(null, function (_initialize, _LitElement) {\n  class HaDeviceAutomationCard extends _LitElement {\n    constructor(localizeDeviceAutomation) {\n      super();\n      this.headerKey = void 0;\n      this.type = void 0;\n      _initialize(this);\n      this._localizeDeviceAutomation = localizeDeviceAutomation;\n    }\n  }\n  return {\n    F: HaDeviceAutomationCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"deviceId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"script\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"automations\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"entityReg\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_showSecondary\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_localizeDeviceAutomation\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        if (changedProps.has(\"deviceId\") || changedProps.has(\"automations\")) {\n          return true;\n        }\n        const oldHass = changedProps.get(\"hass\");\n        if (!oldHass || oldHass.language !== this.hass.language) {\n          return true;\n        }\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (this.automations.length === 0 || !this.entityReg) {\n          return nothing;\n        }\n        const automations = this._showSecondary ? this.automations : this.automations.filter(automation => {\n          var _automation$metadata;\n          return ((_automation$metadata = automation.metadata) === null || _automation$metadata === void 0 ? void 0 : _automation$metadata.secondary) === false;\n        });\n        return html`\n      <h3>${this.hass.localize(this.headerKey)}</h3>\n      <div class=\"content\">\n        <ha-chip-set>\n          ${automations.map((automation, idx) => {\n          var _automation$metadata2;\n          return html`\n              <ha-assist-chip\n                filled\n                .index=${idx}\n                @click=${this._handleAutomationClicked}\n                class=${(_automation$metadata2 = automation.metadata) !== null && _automation$metadata2 !== void 0 && _automation$metadata2.secondary ? \"secondary\" : \"\"}\n                .label=${this._localizeDeviceAutomation(this.hass, this.entityReg, automation)}\n              >\n              </ha-assist-chip>\n            `;\n        })}\n        </ha-chip-set>\n        ${!this._showSecondary && automations.length < this.automations.length ? html`<button class=\"link\" @click=${this._toggleSecondary}>\n              Show ${this.automations.length - automations.length} more...\n            </button>` : \"\"}\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleSecondary\",\n      value: function _toggleSecondary() {\n        this._showSecondary = !this._showSecondary;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAutomationClicked\",\n      value: function _handleAutomationClicked(ev) {\n        const automation = {\n          ...this.automations[ev.currentTarget.index]\n        };\n        if (!automation) {\n          return;\n        }\n        delete automation.metadata;\n        if (this.script) {\n          showScriptEditor({\n            sequence: [automation]\n          });\n          fireEvent(this, \"entry-selected\");\n          return;\n        }\n        const data = {};\n        data[this.type] = [automation];\n        showAutomationEditor(data);\n        fireEvent(this, \"entry-selected\");\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return [buttonLinkStyle, css`\n      h3 {\n        color: var(--primary-text-color);\n      }\n      .secondary {\n        --ha-assist-chip-filled-container-color: rgba(\n          var(--rgb-primary-text-color),\n          0.07\n        );\n      }\n      button.link {\n        color: var(--primary-color);\n      }\n    `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","property","state","fireEvent","showAutomationEditor","showScriptEditor","buttonLinkStyle","HaDeviceAutomationCard","_decorate","_initialize","_LitElement","constructor","localizeDeviceAutomation","headerKey","type","_localizeDeviceAutomation","F","d","kind","decorators","attribute","key","value","Boolean","shouldUpdate","changedProps","has","oldHass","get","language","hass","render","automations","length","entityReg","_showSecondary","filter","automation","_automation$metadata","metadata","secondary","localize","map","idx","_automation$metadata2","_handleAutomationClicked","_toggleSecondary","ev","currentTarget","index","script","sequence","data","static"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/devices/device-detail/ha-device-automation-card.ts"],"sourcesContent":["import { css, html, LitElement, nothing } from \"lit\";\nimport { property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/chips/ha-assist-chip\";\nimport \"../../../../components/chips/ha-chip-set\";\nimport { showAutomationEditor } from \"../../../../data/automation\";\nimport {\n  DeviceAction,\n  DeviceAutomation,\n} from \"../../../../data/device_automation\";\nimport { EntityRegistryEntry } from \"../../../../data/entity_registry\";\nimport { showScriptEditor } from \"../../../../data/script\";\nimport { buttonLinkStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"entry-selected\": undefined;\n  }\n}\n\nexport abstract class HaDeviceAutomationCard<\n  T extends DeviceAutomation,\n> extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public deviceId?: string;\n\n  @property({ type: Boolean }) public script = false;\n\n  @property({ attribute: false }) public automations: T[] = [];\n\n  @property({ attribute: false }) entityReg?: EntityRegistryEntry[];\n\n  @state() public _showSecondary = false;\n\n  abstract headerKey: Parameters<typeof this.hass.localize>[0];\n\n  abstract type: \"action\" | \"condition\" | \"trigger\";\n\n  private _localizeDeviceAutomation: (\n    hass: HomeAssistant,\n    entityRegistry: EntityRegistryEntry[],\n    automation: T\n  ) => string;\n\n  constructor(\n    localizeDeviceAutomation: HaDeviceAutomationCard<T>[\"_localizeDeviceAutomation\"]\n  ) {\n    super();\n    this._localizeDeviceAutomation = localizeDeviceAutomation;\n  }\n\n  protected shouldUpdate(changedProps): boolean {\n    if (changedProps.has(\"deviceId\") || changedProps.has(\"automations\")) {\n      return true;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (!oldHass || oldHass.language !== this.hass.language) {\n      return true;\n    }\n    return false;\n  }\n\n  protected render() {\n    if (this.automations.length === 0 || !this.entityReg) {\n      return nothing;\n    }\n    const automations = this._showSecondary\n      ? this.automations\n      : this.automations.filter(\n          (automation) => automation.metadata?.secondary === false\n        );\n    return html`\n      <h3>${this.hass.localize(this.headerKey)}</h3>\n      <div class=\"content\">\n        <ha-chip-set>\n          ${automations.map(\n            (automation, idx) => html`\n              <ha-assist-chip\n                filled\n                .index=${idx}\n                @click=${this._handleAutomationClicked}\n                class=${automation.metadata?.secondary ? \"secondary\" : \"\"}\n                .label=${this._localizeDeviceAutomation(\n                  this.hass,\n                  this.entityReg!,\n                  automation\n                )}\n              >\n              </ha-assist-chip>\n            `\n          )}\n        </ha-chip-set>\n        ${!this._showSecondary && automations.length < this.automations.length\n          ? html`<button class=\"link\" @click=${this._toggleSecondary}>\n              Show ${this.automations.length - automations.length} more...\n            </button>`\n          : \"\"}\n      </div>\n    `;\n  }\n\n  private _toggleSecondary() {\n    this._showSecondary = !this._showSecondary;\n  }\n\n  private _handleAutomationClicked(ev: CustomEvent) {\n    const automation = { ...this.automations[(ev.currentTarget as any).index] };\n    if (!automation) {\n      return;\n    }\n    delete automation.metadata;\n    if (this.script) {\n      showScriptEditor({ sequence: [automation as DeviceAction] });\n      fireEvent(this, \"entry-selected\");\n      return;\n    }\n    const data = {};\n    data[this.type] = [automation];\n    showAutomationEditor(data);\n    fireEvent(this, \"entry-selected\");\n  }\n\n  static styles = [\n    buttonLinkStyle,\n    css`\n      h3 {\n        color: var(--primary-text-color);\n      }\n      .secondary {\n        --ha-assist-chip-filled-container-color: rgba(\n          var(--rgb-primary-text-color),\n          0.07\n        );\n      }\n      button.link {\n        color: var(--primary-color);\n      }\n    `,\n  ];\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}