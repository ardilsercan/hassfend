{"ast":null,"code":"import { fireEvent } from \"../../../common/dom/fire_event\";\nimport { isCustomType, stripCustomPrefix } from \"../../../data/lovelace_custom_cards\";\nconst TIMEOUT = 2000;\nexport const createErrorCardElement = config => {\n  const el = document.createElement(\"hui-error-card\");\n  if (customElements.get(\"hui-error-card\")) {\n    el.setConfig(config);\n  } else {\n    import(\"../cards/hui-error-card\");\n    customElements.whenDefined(\"hui-error-card\").then(() => {\n      customElements.upgrade(el);\n      el.setConfig(config);\n    });\n  }\n  return el;\n};\nexport const createErrorCardConfig = (error, origConfig) => ({\n  type: \"error\",\n  error,\n  origConfig\n});\nconst _createElement = (tag, config) => {\n  const element = document.createElement(tag);\n  // @ts-ignore\n  element.setConfig(config);\n  return element;\n};\nconst _createErrorElement = (error, config) => createErrorCardElement(createErrorCardConfig(error, config));\nconst _customCreate = (tag, config) => {\n  if (customElements.get(tag)) {\n    return _createElement(tag, config);\n  }\n  const element = _createErrorElement(`Custom element doesn't exist: ${tag}.`, config);\n  // Custom elements are required to have a - in the name\n  if (!tag.includes(\"-\")) {\n    return element;\n  }\n  element.style.display = \"None\";\n  const timer = window.setTimeout(() => {\n    element.style.display = \"\";\n  }, TIMEOUT);\n  customElements.whenDefined(tag).then(() => {\n    clearTimeout(timer);\n    fireEvent(element, \"ll-rebuild\");\n  });\n  return element;\n};\nconst _lazyCreate = (tag, config) => {\n  if (customElements.get(tag)) {\n    return _createElement(tag, config);\n  }\n  const element = document.createElement(tag);\n  customElements.whenDefined(tag).then(() => {\n    try {\n      customElements.upgrade(element);\n      // @ts-ignore\n      element.setConfig(config);\n    } catch (err) {\n      // We let it rebuild and the error wil be handled by _createElement\n      fireEvent(element, \"ll-rebuild\");\n    }\n  });\n  return element;\n};\nconst _getCustomTag = type => isCustomType(type) ? stripCustomPrefix(type) : undefined;\nexport const createLovelaceElement = (tagSuffix, config, alwaysLoadTypes, lazyLoadTypes, domainTypes, defaultType) => {\n  try {\n    return tryCreateLovelaceElement(tagSuffix, config, alwaysLoadTypes, lazyLoadTypes, domainTypes, defaultType);\n  } catch (err) {\n    // eslint-disable-next-line\n    console.error(tagSuffix, config.type, err);\n    return _createErrorElement(err.message, config);\n  }\n};\nexport const tryCreateLovelaceElement = (tagSuffix, config, alwaysLoadTypes, lazyLoadTypes, domainTypes, defaultType) => {\n  if (!config || typeof config !== \"object\") {\n    throw new Error(\"Config is not an object\");\n  }\n  if (!config.type && !defaultType && (\n  // If domain types is given, we can derive a type from \"entity\"\n  !domainTypes || !(\"entity\" in config))) {\n    throw new Error(\"No card type configured\");\n  }\n  const customTag = config.type ? _getCustomTag(config.type) : undefined;\n  if (customTag) {\n    return _customCreate(customTag, config);\n  }\n  let type;\n\n  // config.type has priority over config.entity, but defaultType has not.\n  // @ts-ignore\n  if (domainTypes && !config.type && config.entity) {\n    // @ts-ignore\n    const domain = config.entity.split(\".\", 1)[0];\n    type = `${domainTypes[domain] || domainTypes._domain_not_found}-entity`;\n  } else {\n    type = config.type || defaultType;\n  }\n  if (type === undefined) {\n    throw new Error(\"No type specified\");\n  }\n  const tag = `hui-${type}-${tagSuffix}`;\n  if (lazyLoadTypes && type in lazyLoadTypes) {\n    lazyLoadTypes[type]();\n    return _lazyCreate(tag, config);\n  }\n  if (alwaysLoadTypes && alwaysLoadTypes.has(type)) {\n    return _createElement(tag, config);\n  }\n  throw new Error(`Unknown type encountered: ${type}`);\n};\nexport const getLovelaceElementClass = async (type, tagSuffix, alwaysLoadTypes, lazyLoadTypes) => {\n  const customTag = _getCustomTag(type);\n  if (customTag) {\n    const customCls = customElements.get(customTag);\n    if (customCls) {\n      return customCls;\n    }\n\n    // Custom elements are required to have a - in the name\n    if (!customTag.includes(\"-\")) {\n      throw new Error(`Custom element not found: ${customTag}`);\n    }\n    return new Promise((resolve, reject) => {\n      // We will give custom components up to TIMEOUT seconds to get defined\n      setTimeout(() => reject(new Error(`Custom element not found: ${customTag}`)), TIMEOUT);\n      customElements.whenDefined(customTag).then(() => resolve(customElements.get(customTag)));\n    });\n  }\n  const tag = `hui-${type}-${tagSuffix}`;\n  const cls = customElements.get(tag);\n  if (alwaysLoadTypes && alwaysLoadTypes.has(type)) {\n    return cls;\n  }\n  if (lazyLoadTypes && type in lazyLoadTypes) {\n    return cls || lazyLoadTypes[type]().then(() => customElements.get(tag));\n  }\n  throw new Error(`Unknown type: ${type}`);\n};","map":{"version":3,"names":["fireEvent","isCustomType","stripCustomPrefix","TIMEOUT","createErrorCardElement","config","el","document","createElement","customElements","get","setConfig","whenDefined","then","upgrade","createErrorCardConfig","error","origConfig","type","_createElement","tag","element","_createErrorElement","_customCreate","includes","style","display","timer","window","setTimeout","clearTimeout","_lazyCreate","err","_getCustomTag","undefined","createLovelaceElement","tagSuffix","alwaysLoadTypes","lazyLoadTypes","domainTypes","defaultType","tryCreateLovelaceElement","console","message","Error","customTag","entity","domain","split","_domain_not_found","has","getLovelaceElementClass","customCls","Promise","resolve","reject","cls"],"sources":["/workspaces/frontend/src/panels/lovelace/create-element/create-element-base.ts"],"sourcesContent":["import { fireEvent } from \"../../../common/dom/fire_event\";\nimport { LovelaceViewElement } from \"../../../data/lovelace\";\nimport { LovelaceBadgeConfig } from \"../../../data/lovelace/config/badge\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport { LovelaceViewConfig } from \"../../../data/lovelace/config/view\";\nimport {\n  isCustomType,\n  stripCustomPrefix,\n} from \"../../../data/lovelace_custom_cards\";\nimport type { HuiErrorCard } from \"../cards/hui-error-card\";\nimport type { ErrorCardConfig } from \"../cards/types\";\nimport { LovelaceElement, LovelaceElementConfig } from \"../elements/types\";\nimport { LovelaceRow, LovelaceRowConfig } from \"../entity-rows/types\";\nimport { LovelaceHeaderFooterConfig } from \"../header-footer/types\";\nimport { LovelaceCardFeatureConfig } from \"../card-features/types\";\nimport {\n  LovelaceBadge,\n  LovelaceCard,\n  LovelaceCardConstructor,\n  LovelaceHeaderFooter,\n  LovelaceHeaderFooterConstructor,\n  LovelaceRowConstructor,\n  LovelaceCardFeature,\n  LovelaceCardFeatureConstructor,\n} from \"../types\";\n\nconst TIMEOUT = 2000;\n\ninterface CreateElementConfigTypes {\n  card: {\n    config: LovelaceCardConfig;\n    element: LovelaceCard;\n    constructor: LovelaceCardConstructor;\n  };\n  badge: {\n    config: LovelaceBadgeConfig;\n    element: LovelaceBadge;\n    constructor: unknown;\n  };\n  element: {\n    config: LovelaceElementConfig;\n    element: LovelaceElement;\n    constructor: unknown;\n  };\n  row: {\n    config: LovelaceRowConfig;\n    element: LovelaceRow;\n    constructor: LovelaceRowConstructor;\n  };\n  \"header-footer\": {\n    config: LovelaceHeaderFooterConfig;\n    element: LovelaceHeaderFooter;\n    constructor: LovelaceHeaderFooterConstructor;\n  };\n  view: {\n    config: LovelaceViewConfig;\n    element: LovelaceViewElement;\n    constructor: unknown;\n  };\n  \"card-feature\": {\n    config: LovelaceCardFeatureConfig;\n    element: LovelaceCardFeature;\n    constructor: LovelaceCardFeatureConstructor;\n  };\n}\n\nexport const createErrorCardElement = (config: ErrorCardConfig) => {\n  const el = document.createElement(\"hui-error-card\");\n  if (customElements.get(\"hui-error-card\")) {\n    el.setConfig(config);\n  } else {\n    import(\"../cards/hui-error-card\");\n    customElements.whenDefined(\"hui-error-card\").then(() => {\n      customElements.upgrade(el);\n      el.setConfig(config);\n    });\n  }\n  return el;\n};\n\nexport const createErrorCardConfig = (error, origConfig) => ({\n  type: \"error\",\n  error,\n  origConfig,\n});\n\nconst _createElement = <T extends keyof CreateElementConfigTypes>(\n  tag: string,\n  config: CreateElementConfigTypes[T][\"config\"]\n): CreateElementConfigTypes[T][\"element\"] | HuiErrorCard => {\n  const element = document.createElement(\n    tag\n  ) as CreateElementConfigTypes[T][\"element\"];\n  // @ts-ignore\n  element.setConfig(config);\n  return element;\n};\n\nconst _createErrorElement = <T extends keyof CreateElementConfigTypes>(\n  error: string,\n  config: CreateElementConfigTypes[T][\"config\"]\n): HuiErrorCard => createErrorCardElement(createErrorCardConfig(error, config));\n\nconst _customCreate = <T extends keyof CreateElementConfigTypes>(\n  tag: string,\n  config: CreateElementConfigTypes[T][\"config\"]\n) => {\n  if (customElements.get(tag)) {\n    return _createElement(tag, config);\n  }\n\n  const element = _createErrorElement(\n    `Custom element doesn't exist: ${tag}.`,\n    config\n  );\n  // Custom elements are required to have a - in the name\n  if (!tag.includes(\"-\")) {\n    return element;\n  }\n  element.style.display = \"None\";\n  const timer = window.setTimeout(() => {\n    element.style.display = \"\";\n  }, TIMEOUT);\n\n  customElements.whenDefined(tag).then(() => {\n    clearTimeout(timer);\n    fireEvent(element, \"ll-rebuild\");\n  });\n\n  return element;\n};\n\nconst _lazyCreate = <T extends keyof CreateElementConfigTypes>(\n  tag: string,\n  config: CreateElementConfigTypes[T][\"config\"]\n) => {\n  if (customElements.get(tag)) {\n    return _createElement(tag, config);\n  }\n  const element = document.createElement(\n    tag\n  ) as CreateElementConfigTypes[T][\"element\"];\n  customElements.whenDefined(tag).then(() => {\n    try {\n      customElements.upgrade(element);\n      // @ts-ignore\n      element.setConfig(config);\n    } catch (err: any) {\n      // We let it rebuild and the error wil be handled by _createElement\n      fireEvent(element, \"ll-rebuild\");\n    }\n  });\n  return element;\n};\n\nconst _getCustomTag = (type: string) =>\n  isCustomType(type) ? stripCustomPrefix(type) : undefined;\n\nexport const createLovelaceElement = <T extends keyof CreateElementConfigTypes>(\n  tagSuffix: T,\n  config: CreateElementConfigTypes[T][\"config\"],\n  alwaysLoadTypes?: Set<string>,\n  lazyLoadTypes?: { [domain: string]: () => Promise<unknown> },\n  // Allow looking at \"entity\" in config and mapping that to a type\n  domainTypes?: { _domain_not_found: string; [domain: string]: string },\n  // Default type if no type given. If given, entity types will not work.\n  defaultType?: string\n): CreateElementConfigTypes[T][\"element\"] | HuiErrorCard => {\n  try {\n    return tryCreateLovelaceElement(\n      tagSuffix,\n      config,\n      alwaysLoadTypes,\n      lazyLoadTypes,\n      domainTypes,\n      defaultType\n    );\n  } catch (err: any) {\n    // eslint-disable-next-line\n    console.error(tagSuffix, config.type, err);\n    return _createErrorElement(err.message, config);\n  }\n};\n\nexport const tryCreateLovelaceElement = <\n  T extends keyof CreateElementConfigTypes,\n>(\n  tagSuffix: T,\n  config: CreateElementConfigTypes[T][\"config\"],\n  alwaysLoadTypes?: Set<string>,\n  lazyLoadTypes?: { [domain: string]: () => Promise<unknown> },\n  // Allow looking at \"entity\" in config and mapping that to a type\n  domainTypes?: { _domain_not_found: string; [domain: string]: string },\n  // Default type if no type given. If given, entity types will not work.\n  defaultType?: string\n): CreateElementConfigTypes[T][\"element\"] | HuiErrorCard => {\n  if (!config || typeof config !== \"object\") {\n    throw new Error(\"Config is not an object\");\n  }\n\n  if (\n    !config.type &&\n    !defaultType &&\n    // If domain types is given, we can derive a type from \"entity\"\n    (!domainTypes || !(\"entity\" in config))\n  ) {\n    throw new Error(\"No card type configured\");\n  }\n\n  const customTag = config.type ? _getCustomTag(config.type) : undefined;\n\n  if (customTag) {\n    return _customCreate(customTag, config);\n  }\n\n  let type: string | undefined;\n\n  // config.type has priority over config.entity, but defaultType has not.\n  // @ts-ignore\n  if (domainTypes && !config.type && config.entity) {\n    // @ts-ignore\n    const domain = config.entity.split(\".\", 1)[0];\n    type = `${domainTypes![domain] || domainTypes!._domain_not_found}-entity`;\n  } else {\n    type = config.type || defaultType;\n  }\n\n  if (type === undefined) {\n    throw new Error(\"No type specified\");\n  }\n\n  const tag = `hui-${type}-${tagSuffix}`;\n\n  if (lazyLoadTypes && type in lazyLoadTypes) {\n    lazyLoadTypes[type]();\n    return _lazyCreate(tag, config);\n  }\n\n  if (alwaysLoadTypes && alwaysLoadTypes.has(type)) {\n    return _createElement(tag, config);\n  }\n\n  throw new Error(`Unknown type encountered: ${type}`);\n};\n\nexport const getLovelaceElementClass = async <\n  T extends keyof CreateElementConfigTypes,\n>(\n  type: string,\n  tagSuffix: T,\n  alwaysLoadTypes?: Set<string>,\n  lazyLoadTypes?: { [domain: string]: () => Promise<unknown> }\n): Promise<CreateElementConfigTypes[T][\"constructor\"]> => {\n  const customTag = _getCustomTag(type);\n\n  if (customTag) {\n    const customCls = customElements.get(customTag);\n    if (customCls) {\n      return customCls;\n    }\n\n    // Custom elements are required to have a - in the name\n    if (!customTag.includes(\"-\")) {\n      throw new Error(`Custom element not found: ${customTag}`);\n    }\n\n    return new Promise((resolve, reject) => {\n      // We will give custom components up to TIMEOUT seconds to get defined\n      setTimeout(\n        () => reject(new Error(`Custom element not found: ${customTag}`)),\n        TIMEOUT\n      );\n\n      customElements\n        .whenDefined(customTag)\n        .then(() => resolve(customElements.get(customTag)));\n    });\n  }\n\n  const tag = `hui-${type}-${tagSuffix}`;\n  const cls = customElements.get(tag);\n\n  if (alwaysLoadTypes && alwaysLoadTypes.has(type)) {\n    return cls;\n  }\n\n  if (lazyLoadTypes && type in lazyLoadTypes) {\n    return cls || lazyLoadTypes[type]().then(() => customElements.get(tag));\n  }\n\n  throw new Error(`Unknown type: ${type}`);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}