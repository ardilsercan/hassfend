{"ast":null,"code":"export const generateImageThumbnailUrl = (mediaId, size) => `/api/image/serve/${mediaId}/${size}x${size}`;\nexport const fetchImages = hass => hass.callWS({\n  type: \"image/list\"\n});\nexport const createImage = async (hass, file) => {\n  const fd = new FormData();\n  fd.append(\"file\", file);\n  const resp = await hass.fetchWithAuth(\"/api/image/upload\", {\n    method: \"POST\",\n    body: fd\n  });\n  if (resp.status === 413) {\n    throw new Error(`Uploaded image is too large (${file.name})`);\n  } else if (resp.status !== 200) {\n    throw new Error(\"Unknown error\");\n  }\n  return resp.json();\n};\nexport const updateImage = (hass, id, updates) => hass.callWS({\n  type: \"image/update\",\n  media_id: id,\n  ...updates\n});\nexport const deleteImage = (hass, id) => hass.callWS({\n  type: \"image/delete\",\n  media_id: id\n});","map":{"version":3,"names":["generateImageThumbnailUrl","mediaId","size","fetchImages","hass","callWS","type","createImage","file","fd","FormData","append","resp","fetchWithAuth","method","body","status","Error","name","json","updateImage","id","updates","media_id","deleteImage"],"sources":["/workspaces/frontend/src/data/image_upload.ts"],"sourcesContent":["import { HomeAssistant } from \"../types\";\n\ninterface Image {\n  filesize: number;\n  name: string;\n  uploaded_at: string; // isoformat date\n  content_type: string;\n  id: string;\n}\n\nexport interface ImageMutableParams {\n  name: string;\n}\n\nexport const generateImageThumbnailUrl = (mediaId: string, size: number) =>\n  `/api/image/serve/${mediaId}/${size}x${size}`;\n\nexport const fetchImages = (hass: HomeAssistant) =>\n  hass.callWS<Image[]>({ type: \"image/list\" });\n\nexport const createImage = async (\n  hass: HomeAssistant,\n  file: File\n): Promise<Image> => {\n  const fd = new FormData();\n  fd.append(\"file\", file);\n  const resp = await hass.fetchWithAuth(\"/api/image/upload\", {\n    method: \"POST\",\n    body: fd,\n  });\n  if (resp.status === 413) {\n    throw new Error(`Uploaded image is too large (${file.name})`);\n  } else if (resp.status !== 200) {\n    throw new Error(\"Unknown error\");\n  }\n  return resp.json();\n};\n\nexport const updateImage = (\n  hass: HomeAssistant,\n  id: string,\n  updates: Partial<ImageMutableParams>\n) =>\n  hass.callWS<Image>({\n    type: \"image/update\",\n    media_id: id,\n    ...updates,\n  });\n\nexport const deleteImage = (hass: HomeAssistant, id: string) =>\n  hass.callWS({\n    type: \"image/delete\",\n    media_id: id,\n  });\n"],"mappings":"AAcA,OAAO,MAAMA,yBAAyB,GAAGA,CAACC,OAAe,EAAEC,IAAY,KACpE,oBAAmBD,OAAQ,IAAGC,IAAK,IAAGA,IAAK,EAAC;AAE/C,OAAO,MAAMC,WAAW,GAAIC,IAAmB,IAC7CA,IAAI,CAACC,MAAM,CAAU;EAAEC,IAAI,EAAE;AAAa,CAAC,CAAC;AAE9C,OAAO,MAAMC,WAAW,GAAG,MAAAA,CACzBH,IAAmB,EACnBI,IAAU,KACS;EACnB,MAAMC,EAAE,GAAG,IAAIC,QAAQ,CAAC,CAAC;EACzBD,EAAE,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;EACvB,MAAMI,IAAI,GAAG,MAAMR,IAAI,CAACS,aAAa,CAAC,mBAAmB,EAAE;IACzDC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEN;EACR,CAAC,CAAC;EACF,IAAIG,IAAI,CAACI,MAAM,KAAK,GAAG,EAAE;IACvB,MAAM,IAAIC,KAAK,CAAE,gCAA+BT,IAAI,CAACU,IAAK,GAAE,CAAC;EAC/D,CAAC,MAAM,IAAIN,IAAI,CAACI,MAAM,KAAK,GAAG,EAAE;IAC9B,MAAM,IAAIC,KAAK,CAAC,eAAe,CAAC;EAClC;EACA,OAAOL,IAAI,CAACO,IAAI,CAAC,CAAC;AACpB,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CACzBhB,IAAmB,EACnBiB,EAAU,EACVC,OAAoC,KAEpClB,IAAI,CAACC,MAAM,CAAQ;EACjBC,IAAI,EAAE,cAAc;EACpBiB,QAAQ,EAAEF,EAAE;EACZ,GAAGC;AACL,CAAC,CAAC;AAEJ,OAAO,MAAME,WAAW,GAAGA,CAACpB,IAAmB,EAAEiB,EAAU,KACzDjB,IAAI,CAACC,MAAM,CAAC;EACVC,IAAI,EAAE,cAAc;EACpBiB,QAAQ,EAAEF;AACZ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}