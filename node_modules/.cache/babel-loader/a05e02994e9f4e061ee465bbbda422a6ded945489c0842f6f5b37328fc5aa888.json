{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { getMatterNodeDiagnostics } from \"../../../../../../data/matter\";\nimport \"@material/mwc-list\";\nimport \"../../../../../../components/ha-list-item\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nexport var HaDeviceInfoMatter = _decorate([customElement(\"ha-device-info-matter\")], function (_initialize, _SubscribeMixin) {\n  var HaDeviceInfoMatter = /*#__PURE__*/function (_SubscribeMixin2) {\n    _inherits(HaDeviceInfoMatter, _SubscribeMixin2);\n    function HaDeviceInfoMatter() {\n      var _this;\n      _classCallCheck(this, HaDeviceInfoMatter);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaDeviceInfoMatter, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaDeviceInfoMatter);\n  }(_SubscribeMixin);\n  return {\n    F: HaDeviceInfoMatter,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"device\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_nodeDiagnostics\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProperties) {\n        _get(_getPrototypeOf(HaDeviceInfoMatter.prototype), \"willUpdate\", this).call(this, changedProperties);\n        if (changedProperties.has(\"device\")) {\n          this._fetchNodeDetails();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchNodeDetails\",\n      value: function () {\n        var _fetchNodeDetails2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (this.device) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                if (!(this.device.via_device_id !== null)) {\n                  _context.next = 4;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 4:\n                _context.prev = 4;\n                _context.next = 7;\n                return getMatterNodeDiagnostics(this.hass, this.device.id);\n              case 7:\n                this._nodeDiagnostics = _context.sent;\n                _context.next = 13;\n                break;\n              case 10:\n                _context.prev = 10;\n                _context.t0 = _context[\"catch\"](4);\n                this._nodeDiagnostics = undefined;\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this, [[4, 10]]);\n        }));\n        function _fetchNodeDetails() {\n          return _fetchNodeDetails2.apply(this, arguments);\n        }\n        return _fetchNodeDetails;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._nodeDiagnostics) {\n          return nothing;\n        }\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-expansion-panel\\n        .header=\", \"\\n      >\\n        <div class=\\\"row\\\">\\n          <span class=\\\"name\\\"\\n            >\", \":</span\\n          >\\n          <span class=\\\"value\\\">\", \"</span>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <span class=\\\"name\\\"\\n            >\", \":</span\\n          >\\n          <span class=\\\"value\\\"\\n            >\", \"</span\\n          >\\n        </div>\\n        <div class=\\\"row\\\">\\n          <span class=\\\"name\\\"\\n            >\", \":</span\\n          >\\n          <span class=\\\"value\\\"\\n            >\", \"</span\\n          >\\n        </div>\\n        \", \"\\n        \", \"\\n\\n        <div class=\\\"row\\\">\\n          <span class=\\\"name\\\"\\n            >\", \":</span\\n          >\\n          <span class=\\\"value\\\"\\n            >\", \"</span\\n          >\\n        </div>\\n      </ha-expansion-panel>\\n    \"])), this.hass.localize(\"ui.panel.config.matter.device_info.device_info\"), this.hass.localize(\"ui.panel.config.matter.device_info.node_id\"), this._nodeDiagnostics.node_id, this.hass.localize(\"ui.panel.config.matter.device_info.network_type\"), this.hass.localize(\"ui.panel.config.matter.network_type.\".concat(this._nodeDiagnostics.network_type)), this.hass.localize(\"ui.panel.config.matter.device_info.node_type\"), this.hass.localize(\"ui.panel.config.matter.node_type.\".concat(this._nodeDiagnostics.node_type)), this._nodeDiagnostics.network_name ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n              <div class=\\\"row\\\">\\n                <span class=\\\"name\\\"\\n                  >\", \":</span\\n                >\\n                <span class=\\\"value\\\">\", \"</span>\\n              </div>\\n            \"])), this.hass.localize(\"ui.panel.config.matter.device_info.network_name\"), this._nodeDiagnostics.network_name) : nothing, this._nodeDiagnostics.mac_address ? html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n              <div class=\\\"row\\\">\\n                <span class=\\\"name\\\"\\n                  >\", \":</span\\n                >\\n                <span class=\\\"value\\\">\", \"</span>\\n              </div>\\n            \"])), this.hass.localize(\"ui.panel.config.matter.device_info.mac_address\"), this._nodeDiagnostics.mac_address) : nothing, this.hass.localize(\"ui.panel.config.matter.device_info.ip_adresses\"), this._nodeDiagnostics.ip_adresses.map(function (ip) {\n          return html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\", \"<br />\"])), ip);\n        }));\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n        h4 {\\n          margin-bottom: 4px;\\n        }\\n        div {\\n          word-break: break-all;\\n          margin-top: 2px;\\n        }\\n        .row {\\n          display: flex;\\n          justify-content: space-between;\\n          padding-bottom: 4px;\\n        }\\n        .value {\\n          text-align: right;\\n        }\\n        ha-expansion-panel {\\n          margin: 8px -16px 0;\\n          --expansion-panel-summary-padding: 0 16px;\\n          --expansion-panel-content-padding: 0 16px;\\n          --ha-card-border-radius: 0px;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","getMatterNodeDiagnostics","SubscribeMixin","haStyle","HaDeviceInfoMatter","_decorate","_initialize","_SubscribeMixin","_SubscribeMixin2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","willUpdate","changedProperties","_get","_getPrototypeOf","prototype","call","has","_fetchNodeDetails","_fetchNodeDetails2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","device","abrupt","via_device_id","hass","id","_nodeDiagnostics","sent","t0","undefined","stop","apply","render","_templateObject","_taggedTemplateLiteral","localize","node_id","network_type","node_type","network_name","_templateObject2","mac_address","_templateObject3","ip_adresses","map","ip","_templateObject4","static","styles","_templateObject5"],"sources":["/workspaces/frontend/src/panels/config/devices/device-detail/integration-elements/matter/ha-device-info-matter.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport \"../../../../../../components/ha-expansion-panel\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport {\n  getMatterNodeDiagnostics,\n  MatterNodeDiagnostics,\n} from \"../../../../../../data/matter\";\nimport \"@material/mwc-list\";\nimport \"../../../../../../components/ha-list-item\";\nimport { SubscribeMixin } from \"../../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../../types\";\n\n@customElement(\"ha-device-info-matter\")\nexport class HaDeviceInfoMatter extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public device!: DeviceRegistryEntry;\n\n  @state() private _nodeDiagnostics?: MatterNodeDiagnostics;\n\n  public willUpdate(changedProperties: PropertyValues) {\n    super.willUpdate(changedProperties);\n    if (changedProperties.has(\"device\")) {\n      this._fetchNodeDetails();\n    }\n  }\n\n  private async _fetchNodeDetails() {\n    if (!this.device) {\n      return;\n    }\n\n    if (this.device.via_device_id !== null) {\n      // only show device details for top level nodes (so not bridged)\n      return;\n    }\n\n    try {\n      this._nodeDiagnostics = await getMatterNodeDiagnostics(\n        this.hass,\n        this.device.id\n      );\n    } catch (err: any) {\n      this._nodeDiagnostics = undefined;\n    }\n  }\n\n  protected render() {\n    if (!this._nodeDiagnostics) {\n      return nothing;\n    }\n    return html`\n      <ha-expansion-panel\n        .header=${this.hass.localize(\n          \"ui.panel.config.matter.device_info.device_info\"\n        )}\n      >\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.node_id\"\n            )}:</span\n          >\n          <span class=\"value\">${this._nodeDiagnostics.node_id}</span>\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.network_type\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(\n              `ui.panel.config.matter.network_type.${this._nodeDiagnostics.network_type}`\n            )}</span\n          >\n        </div>\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.node_type\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this.hass.localize(\n              `ui.panel.config.matter.node_type.${this._nodeDiagnostics.node_type}`\n            )}</span\n          >\n        </div>\n        ${this._nodeDiagnostics.network_name\n          ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.matter.device_info.network_name\"\n                  )}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.network_name}</span>\n              </div>\n            `\n          : nothing}\n        ${this._nodeDiagnostics.mac_address\n          ? html`\n              <div class=\"row\">\n                <span class=\"name\"\n                  >${this.hass.localize(\n                    \"ui.panel.config.matter.device_info.mac_address\"\n                  )}:</span\n                >\n                <span class=\"value\">${this._nodeDiagnostics.mac_address}</span>\n              </div>\n            `\n          : nothing}\n\n        <div class=\"row\">\n          <span class=\"name\"\n            >${this.hass.localize(\n              \"ui.panel.config.matter.device_info.ip_adresses\"\n            )}:</span\n          >\n          <span class=\"value\"\n            >${this._nodeDiagnostics.ip_adresses.map(\n              (ip) => html`${ip}<br />`\n            )}</span\n          >\n        </div>\n      </ha-expansion-panel>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        h4 {\n          margin-bottom: 4px;\n        }\n        div {\n          word-break: break-all;\n          margin-top: 2px;\n        }\n        .row {\n          display: flex;\n          justify-content: space-between;\n          padding-bottom: 4px;\n        }\n        .value {\n          text-align: right;\n        }\n        ha-expansion-panel {\n          margin: 8px -16px 0;\n          --expansion-panel-summary-padding: 0 16px;\n          --expansion-panel-content-padding: 0 16px;\n          --ha-card-border-radius: 0px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-device-info-matter\": HaDeviceInfoMatter;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}