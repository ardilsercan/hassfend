{"ast":null,"code":"import { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { splitByGroups } from \"../../../common/entity/split_by_groups\";\nimport { stripPrefixFromEntityName } from \"../../../common/entity/strip_prefix_from_entity_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { domainToName } from \"../../../data/integration\";\nimport { computeUserInitials } from \"../../../data/user\";\nimport { HELPER_DOMAINS } from \"../../config/helpers/const\";\nimport { areaCompare } from \"../../../data/area_registry\";\nconst HIDE_DOMAIN = new Set([\"automation\", \"configurator\", \"device_tracker\", \"geo_location\", \"persistent_notification\", \"script\", \"sun\", \"zone\", \"event\", \"tts\", \"stt\", \"todo\"]);\nconst HIDE_PLATFORM = new Set([\"mobile_app\"]);\nconst splitByAreaDevice = (areaEntries, deviceEntries, entityEntries, entities) => {\n  const allEntities = {\n    ...entities\n  };\n  const areasWithEntities = {};\n  const devicesWithEntities = {};\n  for (const entity of Object.values(entityEntries)) {\n    var _deviceEntries$entity;\n    const areaId = entity.area_id || entity.device_id && ((_deviceEntries$entity = deviceEntries[entity.device_id]) === null || _deviceEntries$entity === void 0 ? void 0 : _deviceEntries$entity.area_id);\n    if (areaId && areaId in areaEntries && entity.entity_id in allEntities) {\n      if (!(areaId in areasWithEntities)) {\n        areasWithEntities[areaId] = [];\n      }\n      areasWithEntities[areaId].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    } else if (entity.device_id && entity.device_id in deviceEntries && entity.entity_id in allEntities) {\n      if (!(entity.device_id in devicesWithEntities)) {\n        devicesWithEntities[entity.device_id] = [];\n      }\n      devicesWithEntities[entity.device_id].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    }\n  }\n  for (const [deviceId, deviceEntities] of Object.entries(devicesWithEntities)) {\n    if (deviceEntities.length === 1) {\n      allEntities[deviceEntities[0].entity_id] = deviceEntities[0];\n      delete devicesWithEntities[deviceId];\n    }\n  }\n  return {\n    areasWithEntities,\n    devicesWithEntities,\n    otherEntities: allEntities\n  };\n};\nexport const computeCards = (states, entityIds, entityCardOptions, renderFooterEntities = true) => {\n  const cards = [];\n\n  // For entity card\n  const entitiesConf = [];\n  const titlePrefix = entityCardOptions.title ? entityCardOptions.title.toLowerCase() : undefined;\n  const footerEntities = [];\n  for (const entityId of entityIds) {\n    const stateObj = states[entityId];\n    const domain = computeDomain(entityId);\n    if (domain === \"alarm_control_panel\") {\n      const cardConfig = {\n        type: \"alarm-panel\",\n        entity: entityId\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"camera\") {\n      const cardConfig = {\n        type: \"picture-entity\",\n        entity: entityId\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"image\") {\n      const cardConfig = {\n        type: \"picture\",\n        image_entity: entityId\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"climate\") {\n      var _states$entityId$attr, _states$entityId, _states$entityId2;\n      const cardConfig = {\n        type: \"thermostat\",\n        entity: entityId,\n        features: ((_states$entityId$attr = (_states$entityId = states[entityId]) === null || _states$entityId === void 0 || (_states$entityId = _states$entityId.attributes) === null || _states$entityId === void 0 || (_states$entityId = _states$entityId.hvac_modes) === null || _states$entityId === void 0 ? void 0 : _states$entityId.length) !== null && _states$entityId$attr !== void 0 ? _states$entityId$attr : 0) > 1 ? [{\n          type: \"climate-hvac-modes\",\n          hvac_modes: (_states$entityId2 = states[entityId]) === null || _states$entityId2 === void 0 || (_states$entityId2 = _states$entityId2.attributes) === null || _states$entityId2 === void 0 ? void 0 : _states$entityId2.hvac_modes\n        }] : undefined\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"humidifier\") {\n      const cardConfig = {\n        type: \"humidifier\",\n        entity: entityId,\n        features: [{\n          type: \"humidifier-toggle\"\n        }]\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"media_player\") {\n      const cardConfig = {\n        type: \"media-control\",\n        entity: entityId\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"plant\") {\n      const cardConfig = {\n        type: \"plant-status\",\n        entity: entityId\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"weather\") {\n      const cardConfig = {\n        type: \"weather-forecast\",\n        entity: entityId,\n        show_forecast: false\n      };\n      cards.push(cardConfig);\n    } else if (renderFooterEntities && (domain === \"scene\" || domain === \"script\")) {\n      const conf = {\n        entity: entityId,\n        show_icon: true,\n        show_name: true\n      };\n      let name;\n      if (titlePrefix && stateObj && (\n      // eslint-disable-next-line no-cond-assign\n      name = stripPrefixFromEntityName(computeStateName(stateObj), titlePrefix))) {\n        conf.name = name;\n      }\n      footerEntities.push(conf);\n    } else {\n      let name;\n      const entityConf = titlePrefix && stateObj && (\n      // eslint-disable-next-line no-cond-assign\n      name = stripPrefixFromEntityName(computeStateName(stateObj), titlePrefix)) ? {\n        entity: entityId,\n        name\n      } : entityId;\n      entitiesConf.push(entityConf);\n    }\n  }\n  entitiesConf.sort((a, b) => {\n    const entityIdA = typeof a === \"string\" ? a : a.entity;\n    const entityIdB = typeof b === \"string\" ? b : b.entity;\n    const categoryA = SENSOR_ENTITIES.includes(computeDomain(entityIdA)) ? \"sensor\" : \"control\";\n    const categoryB = SENSOR_ENTITIES.includes(computeDomain(entityIdB)) ? \"sensor\" : \"control\";\n    if (categoryA !== categoryB) {\n      return categoryA === \"sensor\" ? 1 : -1;\n    }\n    return stringCompare(typeof a === \"string\" ? states[a] ? computeStateName(states[a]) : \"\" : a.name || \"\", typeof b === \"string\" ? states[b] ? computeStateName(states[b]) : \"\" : b.name || \"\");\n  });\n\n  // If we ended up with footer entities but no normal entities,\n  // render the footer entities as normal entities.\n  if (entitiesConf.length === 0 && footerEntities.length > 0) {\n    return computeCards(states, entityIds, entityCardOptions, false);\n  }\n  if (entitiesConf.length > 0 || footerEntities.length > 0) {\n    const card = {\n      type: \"entities\",\n      entities: entitiesConf,\n      ...entityCardOptions\n    };\n    if (footerEntities.length > 0) {\n      card.footer = {\n        type: \"buttons\",\n        entities: footerEntities\n      };\n    }\n    cards.unshift(card);\n  }\n  if (cards.length < 2) {\n    return cards;\n  }\n  return [{\n    type: \"grid\",\n    square: false,\n    columns: 1,\n    cards\n  }];\n};\nconst computeDefaultViewStates = (entities, entityEntries) => {\n  const states = {};\n  const hiddenEntities = new Set(Object.values(entityEntries).filter(entry => entry.entity_category || entry.platform && HIDE_PLATFORM.has(entry.platform) || entry.hidden).map(entry => entry.entity_id));\n  for (const entityId of Object.keys(entities)) {\n    const stateObj = entities[entityId];\n    if (!HIDE_DOMAIN.has(computeStateDomain(stateObj)) && !hiddenEntities.has(stateObj.entity_id)) {\n      states[entityId] = entities[entityId];\n    }\n  }\n  return states;\n};\nexport const generateViewConfig = (localize, path, title, icon, entities) => {\n  const ungroupedEntitites = {};\n\n  // Organize ungrouped entities in ungrouped things\n  for (const entityId of Object.keys(entities)) {\n    const state = entities[entityId];\n    const domain = computeStateDomain(state);\n    if (!(domain in ungroupedEntitites)) {\n      ungroupedEntitites[domain] = [];\n    }\n    ungroupedEntitites[domain].push(state.entity_id);\n  }\n  const cards = [];\n  if (\"person\" in ungroupedEntitites) {\n    const personCards = [];\n    if (ungroupedEntitites.person.length === 1) {\n      cards.push({\n        type: \"entities\",\n        entities: ungroupedEntitites.person\n      });\n    } else {\n      let backgroundColor;\n      let foregroundColor = \"\";\n      for (const personEntityId of ungroupedEntitites.person) {\n        const stateObj = entities[personEntityId];\n        let image = stateObj.attributes.entity_picture;\n        if (!image) {\n          if (backgroundColor === undefined) {\n            const computedStyle = getComputedStyle(document.body);\n            backgroundColor = encodeURIComponent(computedStyle.getPropertyValue(\"--light-primary-color\").trim());\n            foregroundColor = encodeURIComponent((computedStyle.getPropertyValue(\"--text-light-primary-color\") || computedStyle.getPropertyValue(\"--primary-text-color\")).trim());\n          }\n          const initials = computeUserInitials(stateObj.attributes.friendly_name || \"\");\n          image = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' width='50' height='50' style='background-color:${backgroundColor}'%3E%3Cg%3E%3Ctext font-family='roboto' x='50%25' y='50%25' text-anchor='middle' stroke='${foregroundColor}' font-size='1.3em' dy='.3em'%3E${initials}%3C/text%3E%3C/g%3E%3C/svg%3E`;\n        }\n        personCards.push({\n          type: \"picture-entity\",\n          entity: personEntityId,\n          aspect_ratio: \"1\",\n          show_name: false,\n          image\n        });\n      }\n      cards.push({\n        type: \"grid\",\n        square: true,\n        columns: 3,\n        cards: personCards\n      });\n    }\n    delete ungroupedEntitites.person;\n  }\n\n  // Group helper entities in a single card\n  const helperEntities = [];\n  for (const domain of HELPER_DOMAINS) {\n    if (!(domain in ungroupedEntitites)) {\n      continue;\n    }\n    helperEntities.push(...ungroupedEntitites[domain]);\n    delete ungroupedEntitites[domain];\n  }\n\n  // Prepare translations for cards\n  const domainTranslations = {};\n  for (const domain of Object.keys(ungroupedEntitites)) {\n    domainTranslations[domain] = domainToName(localize, domain);\n  }\n  if (helperEntities.length) {\n    ungroupedEntitites._helpers = helperEntities;\n    domainTranslations._helpers = localize(\"ui.panel.lovelace.strategy.original-states.helpers\");\n  }\n  Object.keys(ungroupedEntitites).sort((domain1, domain2) => stringCompare(domainTranslations[domain1], domainTranslations[domain2])).forEach(domain => {\n    cards.push(...computeCards(entities, ungroupedEntitites[domain].sort((a, b) => stringCompare(computeStateName(entities[a]), computeStateName(entities[b]))), {\n      title: domainTranslations[domain]\n    }));\n  });\n  const view = {\n    path,\n    title,\n    cards\n  };\n  if (icon) {\n    view.icon = icon;\n  }\n  return view;\n};\nexport const generateDefaultViewConfig = (areaEntries, deviceEntries, entityEntries, entities, localize, energyPrefs, areasPrefs, hideEntitiesWithoutAreas, hideEnergy) => {\n  const states = computeDefaultViewStates(entities, entityEntries);\n  const path = \"default_view\";\n  const title = \"Home\";\n  const icon = undefined;\n\n  // In the case of a default view, we want to use the group order attribute\n  const groupOrders = {};\n  for (const entityId of Object.keys(states)) {\n    const stateObj = states[entityId];\n    if (stateObj.attributes.order) {\n      groupOrders[entityId] = stateObj.attributes.order;\n    }\n  }\n  const splittedByAreaDevice = splitByAreaDevice(areaEntries, deviceEntries, entityEntries, states);\n  if (areasPrefs !== null && areasPrefs !== void 0 && areasPrefs.hidden) {\n    for (const area of areasPrefs.hidden) {\n      delete splittedByAreaDevice.areasWithEntities[area];\n    }\n  }\n  if (hideEntitiesWithoutAreas) {\n    splittedByAreaDevice.devicesWithEntities = {};\n    splittedByAreaDevice.otherEntities = {};\n  }\n  const splittedByGroups = splitByGroups(splittedByAreaDevice.otherEntities);\n  splittedByGroups.groups.sort((gr1, gr2) => groupOrders[gr1.entity_id] - groupOrders[gr2.entity_id]);\n  const groupCards = [];\n  for (const groupEntity of splittedByGroups.groups) {\n    groupCards.push(...computeCards(entities, groupEntity.attributes.entity_id, {\n      title: computeStateName(groupEntity),\n      show_header_toggle: groupEntity.attributes.control !== \"hidden\"\n    }));\n  }\n  const config = generateViewConfig(localize, path, title, icon, splittedByGroups.ungrouped);\n  const areaCards = [];\n  const sortedAreas = Object.keys(splittedByAreaDevice.areasWithEntities).sort(areaCompare(areaEntries, areasPrefs === null || areasPrefs === void 0 ? void 0 : areasPrefs.order));\n  for (const areaId of sortedAreas) {\n    const areaEntities = splittedByAreaDevice.areasWithEntities[areaId];\n    const area = areaEntries[areaId];\n    areaCards.push(...computeCards(entities, areaEntities.map(entity => entity.entity_id), {\n      title: area.name\n    }));\n  }\n  const deviceCards = [];\n  const sortedDevices = Object.entries(splittedByAreaDevice.devicesWithEntities).sort((a, b) => {\n    const deviceA = deviceEntries[a[0]];\n    const deviceB = deviceEntries[b[0]];\n    return stringCompare(deviceA.name_by_user || deviceA.name || \"\", deviceB.name_by_user || deviceB.name || \"\");\n  });\n  for (const [deviceId, deviceEntities] of sortedDevices) {\n    const device = deviceEntries[deviceId];\n    deviceCards.push(...computeCards(entities, deviceEntities.map(entity => entity.entity_id), {\n      title: device.name_by_user || device.name || localize(\"ui.panel.config.devices.unnamed_device\", {\n        type: localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n      })\n    }));\n  }\n  let energyCard;\n  if (energyPrefs && !hideEnergy) {\n    // Distribution card requires the grid to be configured\n    const grid = energyPrefs.energy_sources.find(source => source.type === \"grid\");\n    if (grid && grid.flow_from.length > 0) {\n      energyCard = {\n        title: localize(\"ui.panel.lovelace.cards.energy.energy_distribution.title_today\"),\n        type: \"energy-distribution\",\n        link_dashboard: true\n      };\n    }\n  }\n  config.cards.unshift(...areaCards, ...groupCards, ...(energyCard ? [energyCard] : []));\n  config.cards.push(...deviceCards);\n  return config;\n};","map":{"version":3,"names":["SENSOR_ENTITIES","computeDomain","computeStateDomain","computeStateName","splitByGroups","stripPrefixFromEntityName","stringCompare","domainToName","computeUserInitials","HELPER_DOMAINS","areaCompare","HIDE_DOMAIN","Set","HIDE_PLATFORM","splitByAreaDevice","areaEntries","deviceEntries","entityEntries","entities","allEntities","areasWithEntities","devicesWithEntities","entity","Object","values","_deviceEntries$entity","areaId","area_id","device_id","entity_id","push","deviceId","deviceEntities","entries","length","otherEntities","computeCards","states","entityIds","entityCardOptions","renderFooterEntities","cards","entitiesConf","titlePrefix","title","toLowerCase","undefined","footerEntities","entityId","stateObj","domain","cardConfig","type","image_entity","_states$entityId$attr","_states$entityId","_states$entityId2","features","attributes","hvac_modes","show_forecast","conf","show_icon","show_name","name","entityConf","sort","a","b","entityIdA","entityIdB","categoryA","includes","categoryB","card","footer","unshift","square","columns","computeDefaultViewStates","hiddenEntities","filter","entry","entity_category","platform","has","hidden","map","keys","generateViewConfig","localize","path","icon","ungroupedEntitites","state","personCards","person","backgroundColor","foregroundColor","personEntityId","image","entity_picture","computedStyle","getComputedStyle","document","body","encodeURIComponent","getPropertyValue","trim","initials","friendly_name","aspect_ratio","helperEntities","domainTranslations","_helpers","domain1","domain2","forEach","view","generateDefaultViewConfig","energyPrefs","areasPrefs","hideEntitiesWithoutAreas","hideEnergy","groupOrders","order","splittedByAreaDevice","area","splittedByGroups","groups","gr1","gr2","groupCards","groupEntity","show_header_toggle","control","config","ungrouped","areaCards","sortedAreas","areaEntities","deviceCards","sortedDevices","deviceA","deviceB","name_by_user","device","entry_type","energyCard","grid","energy_sources","find","source","flow_from","link_dashboard"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/common/generate-lovelace-config.ts"],"sourcesContent":["import { HassEntities, HassEntity } from \"home-assistant-js-websocket\";\nimport { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { splitByGroups } from \"../../../common/entity/split_by_groups\";\nimport { stripPrefixFromEntityName } from \"../../../common/entity/strip_prefix_from_entity_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport type { AreaFilterValue } from \"../../../components/ha-area-filter\";\nimport {\n  EnergyPreferences,\n  GridSourceTypeEnergyPreference,\n} from \"../../../data/energy\";\nimport { domainToName } from \"../../../data/integration\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport { LovelaceViewConfig } from \"../../../data/lovelace/config/view\";\nimport { computeUserInitials } from \"../../../data/user\";\nimport { HomeAssistant } from \"../../../types\";\nimport { HELPER_DOMAINS } from \"../../config/helpers/const\";\nimport {\n  AlarmPanelCardConfig,\n  EntitiesCardConfig,\n  HumidifierCardConfig,\n  PictureCardConfig,\n  PictureEntityCardConfig,\n  ThermostatCardConfig,\n} from \"../cards/types\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { ButtonsHeaderFooterConfig } from \"../header-footer/types\";\nimport { areaCompare } from \"../../../data/area_registry\";\n\nconst HIDE_DOMAIN = new Set([\n  \"automation\",\n  \"configurator\",\n  \"device_tracker\",\n  \"geo_location\",\n  \"persistent_notification\",\n  \"script\",\n  \"sun\",\n  \"zone\",\n  \"event\",\n  \"tts\",\n  \"stt\",\n  \"todo\",\n]);\n\nconst HIDE_PLATFORM = new Set([\"mobile_app\"]);\n\ninterface SplittedByAreaDevice {\n  areasWithEntities: { [areaId: string]: HassEntity[] };\n  devicesWithEntities: { [deviceId: string]: HassEntity[] };\n  otherEntities: HassEntities;\n}\n\nconst splitByAreaDevice = (\n  areaEntries: HomeAssistant[\"areas\"],\n  deviceEntries: HomeAssistant[\"devices\"],\n  entityEntries: HomeAssistant[\"entities\"],\n  entities: HassEntities\n): SplittedByAreaDevice => {\n  const allEntities = { ...entities };\n  const areasWithEntities: SplittedByAreaDevice[\"areasWithEntities\"] = {};\n  const devicesWithEntities: SplittedByAreaDevice[\"devicesWithEntities\"] = {};\n\n  for (const entity of Object.values(entityEntries)) {\n    const areaId =\n      entity.area_id ||\n      (entity.device_id && deviceEntries[entity.device_id]?.area_id);\n    if (areaId && areaId in areaEntries && entity.entity_id in allEntities) {\n      if (!(areaId in areasWithEntities)) {\n        areasWithEntities[areaId] = [];\n      }\n      areasWithEntities[areaId].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    } else if (\n      entity.device_id &&\n      entity.device_id in deviceEntries &&\n      entity.entity_id in allEntities\n    ) {\n      if (!(entity.device_id in devicesWithEntities)) {\n        devicesWithEntities[entity.device_id] = [];\n      }\n      devicesWithEntities[entity.device_id].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    }\n  }\n  for (const [deviceId, deviceEntities] of Object.entries(\n    devicesWithEntities\n  )) {\n    if (deviceEntities.length === 1) {\n      allEntities[deviceEntities[0].entity_id] = deviceEntities[0];\n      delete devicesWithEntities[deviceId];\n    }\n  }\n  return {\n    areasWithEntities,\n    devicesWithEntities,\n    otherEntities: allEntities,\n  };\n};\n\nexport const computeCards = (\n  states: HassEntities,\n  entityIds: string[],\n  entityCardOptions: Partial<EntitiesCardConfig>,\n  renderFooterEntities = true\n): LovelaceCardConfig[] => {\n  const cards: LovelaceCardConfig[] = [];\n\n  // For entity card\n  const entitiesConf: Array<string | EntityConfig> = [];\n\n  const titlePrefix = entityCardOptions.title\n    ? entityCardOptions.title.toLowerCase()\n    : undefined;\n\n  const footerEntities: ButtonsHeaderFooterConfig[\"entities\"] = [];\n\n  for (const entityId of entityIds) {\n    const stateObj = states[entityId];\n    const domain = computeDomain(entityId);\n\n    if (domain === \"alarm_control_panel\") {\n      const cardConfig: AlarmPanelCardConfig = {\n        type: \"alarm-panel\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"camera\") {\n      const cardConfig: PictureEntityCardConfig = {\n        type: \"picture-entity\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"image\") {\n      const cardConfig: PictureCardConfig = {\n        type: \"picture\",\n        image_entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"climate\") {\n      const cardConfig: ThermostatCardConfig = {\n        type: \"thermostat\",\n        entity: entityId,\n        features:\n          (states[entityId]?.attributes?.hvac_modes?.length ?? 0) > 1\n            ? [\n                {\n                  type: \"climate-hvac-modes\",\n                  hvac_modes: states[entityId]?.attributes?.hvac_modes,\n                },\n              ]\n            : undefined,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"humidifier\") {\n      const cardConfig: HumidifierCardConfig = {\n        type: \"humidifier\",\n        entity: entityId,\n        features: [\n          {\n            type: \"humidifier-toggle\",\n          },\n        ],\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"media_player\") {\n      const cardConfig = {\n        type: \"media-control\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"plant\") {\n      const cardConfig = {\n        type: \"plant-status\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"weather\") {\n      const cardConfig = {\n        type: \"weather-forecast\",\n        entity: entityId,\n        show_forecast: false,\n      };\n      cards.push(cardConfig);\n    } else if (\n      renderFooterEntities &&\n      (domain === \"scene\" || domain === \"script\")\n    ) {\n      const conf: (typeof footerEntities)[0] = {\n        entity: entityId,\n        show_icon: true,\n        show_name: true,\n      };\n      let name: string | undefined;\n      if (\n        titlePrefix &&\n        stateObj &&\n        // eslint-disable-next-line no-cond-assign\n        (name = stripPrefixFromEntityName(\n          computeStateName(stateObj),\n          titlePrefix\n        ))\n      ) {\n        conf.name = name;\n      }\n      footerEntities.push(conf);\n    } else {\n      let name: string | undefined;\n      const entityConf =\n        titlePrefix &&\n        stateObj &&\n        // eslint-disable-next-line no-cond-assign\n        (name = stripPrefixFromEntityName(\n          computeStateName(stateObj),\n          titlePrefix\n        ))\n          ? {\n              entity: entityId,\n              name,\n            }\n          : entityId;\n\n      entitiesConf.push(entityConf);\n    }\n  }\n\n  entitiesConf.sort((a, b) => {\n    const entityIdA = typeof a === \"string\" ? a : a.entity;\n    const entityIdB = typeof b === \"string\" ? b : b.entity;\n\n    const categoryA = SENSOR_ENTITIES.includes(computeDomain(entityIdA))\n      ? \"sensor\"\n      : \"control\";\n    const categoryB = SENSOR_ENTITIES.includes(computeDomain(entityIdB))\n      ? \"sensor\"\n      : \"control\";\n\n    if (categoryA !== categoryB) {\n      return categoryA === \"sensor\" ? 1 : -1;\n    }\n\n    return stringCompare(\n      typeof a === \"string\"\n        ? states[a]\n          ? computeStateName(states[a])\n          : \"\"\n        : a.name || \"\",\n      typeof b === \"string\"\n        ? states[b]\n          ? computeStateName(states[b])\n          : \"\"\n        : b.name || \"\"\n    );\n  });\n\n  // If we ended up with footer entities but no normal entities,\n  // render the footer entities as normal entities.\n  if (entitiesConf.length === 0 && footerEntities.length > 0) {\n    return computeCards(states, entityIds, entityCardOptions, false);\n  }\n\n  if (entitiesConf.length > 0 || footerEntities.length > 0) {\n    const card: EntitiesCardConfig = {\n      type: \"entities\",\n      entities: entitiesConf,\n      ...entityCardOptions,\n    };\n    if (footerEntities.length > 0) {\n      card.footer = {\n        type: \"buttons\",\n        entities: footerEntities,\n      } as ButtonsHeaderFooterConfig;\n    }\n    cards.unshift(card);\n  }\n\n  if (cards.length < 2) {\n    return cards;\n  }\n\n  return [\n    {\n      type: \"grid\",\n      square: false,\n      columns: 1,\n      cards,\n    },\n  ];\n};\n\nconst computeDefaultViewStates = (\n  entities: HassEntities,\n  entityEntries: HomeAssistant[\"entities\"]\n): HassEntities => {\n  const states = {};\n  const hiddenEntities = new Set(\n    Object.values(entityEntries)\n      .filter(\n        (entry) =>\n          entry.entity_category ||\n          (entry.platform && HIDE_PLATFORM.has(entry.platform)) ||\n          entry.hidden\n      )\n      .map((entry) => entry.entity_id)\n  );\n\n  for (const entityId of Object.keys(entities)) {\n    const stateObj = entities[entityId];\n    if (\n      !HIDE_DOMAIN.has(computeStateDomain(stateObj)) &&\n      !hiddenEntities.has(stateObj.entity_id)\n    ) {\n      states[entityId] = entities[entityId];\n    }\n  }\n  return states;\n};\n\nexport const generateViewConfig = (\n  localize: LocalizeFunc,\n  path: string,\n  title: string | undefined,\n  icon: string | undefined,\n  entities: HassEntities\n): LovelaceViewConfig => {\n  const ungroupedEntitites: { [domain: string]: string[] } = {};\n\n  // Organize ungrouped entities in ungrouped things\n  for (const entityId of Object.keys(entities)) {\n    const state = entities[entityId];\n    const domain = computeStateDomain(state);\n\n    if (!(domain in ungroupedEntitites)) {\n      ungroupedEntitites[domain] = [];\n    }\n\n    ungroupedEntitites[domain].push(state.entity_id);\n  }\n\n  const cards: LovelaceCardConfig[] = [];\n\n  if (\"person\" in ungroupedEntitites) {\n    const personCards: LovelaceCardConfig[] = [];\n\n    if (ungroupedEntitites.person.length === 1) {\n      cards.push({\n        type: \"entities\",\n        entities: ungroupedEntitites.person,\n      });\n    } else {\n      let backgroundColor: string | undefined;\n      let foregroundColor = \"\";\n\n      for (const personEntityId of ungroupedEntitites.person) {\n        const stateObj = entities[personEntityId];\n\n        let image = stateObj.attributes.entity_picture;\n\n        if (!image) {\n          if (backgroundColor === undefined) {\n            const computedStyle = getComputedStyle(document.body);\n            backgroundColor = encodeURIComponent(\n              computedStyle.getPropertyValue(\"--light-primary-color\").trim()\n            );\n            foregroundColor = encodeURIComponent(\n              (\n                computedStyle.getPropertyValue(\"--text-light-primary-color\") ||\n                computedStyle.getPropertyValue(\"--primary-text-color\")\n              ).trim()\n            );\n          }\n          const initials = computeUserInitials(\n            stateObj.attributes.friendly_name || \"\"\n          );\n          image = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' width='50' height='50' style='background-color:${backgroundColor}'%3E%3Cg%3E%3Ctext font-family='roboto' x='50%25' y='50%25' text-anchor='middle' stroke='${foregroundColor}' font-size='1.3em' dy='.3em'%3E${initials}%3C/text%3E%3C/g%3E%3C/svg%3E`;\n        }\n\n        personCards.push({\n          type: \"picture-entity\",\n          entity: personEntityId,\n          aspect_ratio: \"1\",\n          show_name: false,\n          image,\n        });\n      }\n\n      cards.push({\n        type: \"grid\",\n        square: true,\n        columns: 3,\n        cards: personCards,\n      });\n    }\n\n    delete ungroupedEntitites.person;\n  }\n\n  // Group helper entities in a single card\n  const helperEntities: string[] = [];\n\n  for (const domain of HELPER_DOMAINS) {\n    if (!(domain in ungroupedEntitites)) {\n      continue;\n    }\n    helperEntities.push(...ungroupedEntitites[domain]);\n    delete ungroupedEntitites[domain];\n  }\n\n  // Prepare translations for cards\n  const domainTranslations: Record<string, string> = {};\n\n  for (const domain of Object.keys(ungroupedEntitites)) {\n    domainTranslations[domain] = domainToName(localize, domain);\n  }\n\n  if (helperEntities.length) {\n    ungroupedEntitites._helpers = helperEntities;\n    domainTranslations._helpers = localize(\n      \"ui.panel.lovelace.strategy.original-states.helpers\"\n    );\n  }\n\n  Object.keys(ungroupedEntitites)\n    .sort((domain1, domain2) =>\n      stringCompare(domainTranslations[domain1], domainTranslations[domain2])\n    )\n    .forEach((domain) => {\n      cards.push(\n        ...computeCards(\n          entities,\n          ungroupedEntitites[domain].sort((a, b) =>\n            stringCompare(\n              computeStateName(entities[a]),\n              computeStateName(entities[b])\n            )\n          ),\n          {\n            title: domainTranslations[domain],\n          }\n        )\n      );\n    });\n\n  const view: LovelaceViewConfig = {\n    path,\n    title,\n    cards,\n  };\n\n  if (icon) {\n    view.icon = icon;\n  }\n\n  return view;\n};\n\nexport const generateDefaultViewConfig = (\n  areaEntries: HomeAssistant[\"areas\"],\n  deviceEntries: HomeAssistant[\"devices\"],\n  entityEntries: HomeAssistant[\"entities\"],\n  entities: HassEntities,\n  localize: LocalizeFunc,\n  energyPrefs?: EnergyPreferences,\n  areasPrefs?: AreaFilterValue,\n  hideEntitiesWithoutAreas?: boolean,\n  hideEnergy?: boolean\n): LovelaceViewConfig => {\n  const states = computeDefaultViewStates(entities, entityEntries);\n  const path = \"default_view\";\n  const title = \"Home\";\n  const icon = undefined;\n\n  // In the case of a default view, we want to use the group order attribute\n  const groupOrders = {};\n  for (const entityId of Object.keys(states)) {\n    const stateObj = states[entityId];\n    if (stateObj.attributes.order) {\n      groupOrders[entityId] = stateObj.attributes.order;\n    }\n  }\n\n  const splittedByAreaDevice = splitByAreaDevice(\n    areaEntries,\n    deviceEntries,\n    entityEntries,\n    states\n  );\n\n  if (areasPrefs?.hidden) {\n    for (const area of areasPrefs.hidden) {\n      delete splittedByAreaDevice.areasWithEntities[area];\n    }\n  }\n\n  if (hideEntitiesWithoutAreas) {\n    splittedByAreaDevice.devicesWithEntities = {};\n    splittedByAreaDevice.otherEntities = {};\n  }\n\n  const splittedByGroups = splitByGroups(splittedByAreaDevice.otherEntities);\n  splittedByGroups.groups.sort(\n    (gr1, gr2) => groupOrders[gr1.entity_id] - groupOrders[gr2.entity_id]\n  );\n\n  const groupCards: LovelaceCardConfig[] = [];\n\n  for (const groupEntity of splittedByGroups.groups) {\n    groupCards.push(\n      ...computeCards(entities, groupEntity.attributes.entity_id, {\n        title: computeStateName(groupEntity),\n        show_header_toggle: groupEntity.attributes.control !== \"hidden\",\n      })\n    );\n  }\n\n  const config = generateViewConfig(\n    localize,\n    path,\n    title,\n    icon,\n    splittedByGroups.ungrouped\n  );\n\n  const areaCards: LovelaceCardConfig[] = [];\n\n  const sortedAreas = Object.keys(splittedByAreaDevice.areasWithEntities).sort(\n    areaCompare(areaEntries, areasPrefs?.order)\n  );\n\n  for (const areaId of sortedAreas) {\n    const areaEntities = splittedByAreaDevice.areasWithEntities[areaId];\n    const area = areaEntries[areaId];\n    areaCards.push(\n      ...computeCards(\n        entities,\n        areaEntities.map((entity) => entity.entity_id),\n        {\n          title: area.name,\n        }\n      )\n    );\n  }\n\n  const deviceCards: LovelaceCardConfig[] = [];\n\n  const sortedDevices = Object.entries(\n    splittedByAreaDevice.devicesWithEntities\n  ).sort((a, b) => {\n    const deviceA = deviceEntries[a[0]];\n    const deviceB = deviceEntries[b[0]];\n    return stringCompare(\n      deviceA.name_by_user || deviceA.name || \"\",\n      deviceB.name_by_user || deviceB.name || \"\"\n    );\n  });\n\n  for (const [deviceId, deviceEntities] of sortedDevices) {\n    const device = deviceEntries[deviceId];\n    deviceCards.push(\n      ...computeCards(\n        entities,\n        deviceEntities.map((entity) => entity.entity_id),\n        {\n          title:\n            device.name_by_user ||\n            device.name ||\n            localize(\"ui.panel.config.devices.unnamed_device\", {\n              type: localize(\n                `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n              ),\n            }),\n        }\n      )\n    );\n  }\n\n  let energyCard: LovelaceCardConfig | undefined;\n\n  if (energyPrefs && !hideEnergy) {\n    // Distribution card requires the grid to be configured\n    const grid = energyPrefs.energy_sources.find(\n      (source) => source.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n\n    if (grid && grid.flow_from.length > 0) {\n      energyCard = {\n        title: localize(\n          \"ui.panel.lovelace.cards.energy.energy_distribution.title_today\"\n        ),\n        type: \"energy-distribution\",\n        link_dashboard: true,\n      };\n    }\n  }\n\n  config.cards!.unshift(\n    ...areaCards,\n    ...groupCards,\n    ...(energyCard ? [energyCard] : [])\n  );\n\n  config.cards!.push(...deviceCards);\n\n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}