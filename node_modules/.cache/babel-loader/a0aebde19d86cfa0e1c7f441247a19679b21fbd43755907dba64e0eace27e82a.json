{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list/mwc-list\";\nconst mdiContentDuplicate = \"M11,17H4A2,2 0 0,1 2,15V3A2,2 0 0,1 4,1H16V3H4V15H11V13L15,16L11,19V17M19,21V7H8V13H6V7A2,2 0 0,1 8,5H19A2,2 0 0,1 21,7V21A2,2 0 0,1 19,23H8A2,2 0 0,1 6,21V19H8V21H19Z\";\nconst mdiContentSave = \"M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/device/ha-device-picker\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport { computeDeviceName, subscribeDeviceRegistry } from \"../../../data/device_registry\";\nimport { subscribeEntityRegistry, updateEntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { activateScene, applyScene, deleteScene, getSceneConfig, getSceneEditorInitData, saveScene, SCENE_IGNORED_DOMAINS, showSceneEditor } from \"../../../data/scene\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\nexport let HaSceneEditor = _decorate([customElement(\"ha-scene-editor\")], function (_initialize, _SubscribeMixin) {\n  class HaSceneEditor extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaSceneEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"sceneId\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"scenes\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"showAdvanced\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_dirty\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_errors\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entities\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_single_entities\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_devices\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceRegistryEntries\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entityRegistryEntries\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_scene\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_storedStates\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_unsubscribeEvents\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_deviceEntityLookup\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_activateContextId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_saving\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_updatedAreaId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_scenesSet\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_getRegistryAreaId\",\n      value() {\n        return memoizeOne((entries, entity_id) => {\n          const entry = entries.find(ent => ent.entity_id === entity_id);\n          return entry ? entry.area_id : null;\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getEntitiesDevices\",\n      value() {\n        return memoizeOne((entities, devices, deviceEntityLookup, deviceRegs) => {\n          const outputDevices = [];\n          if (devices.length) {\n            const deviceLookup = {};\n            for (const device of deviceRegs) {\n              deviceLookup[device.id] = device;\n            }\n            devices.forEach(deviceId => {\n              const device = deviceLookup[deviceId];\n              const deviceEntities = deviceEntityLookup[deviceId] || [];\n              outputDevices.push({\n                name: computeDeviceName(device, this.hass, this._deviceEntityLookup[device.id]),\n                id: device.id,\n                entities: deviceEntities\n              });\n            });\n          }\n          const outputEntities = [];\n          entities.forEach(entity => {\n            if (!outputDevices.find(device => device.entities.includes(entity))) {\n              outputEntities.push(entity);\n            }\n          });\n          return {\n            devices: outputDevices,\n            entities: outputEntities\n          };\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value:\n      // undefined means not set in this session\n      // null means picked nothing.\n\n      // Callback to be called when scene is set.\n\n      function disconnectedCallback() {\n        _get(_getPrototypeOf(HaSceneEditor.prototype), \"disconnectedCallback\", this).call(this);\n        if (this._unsubscribeEvents) {\n          this._unsubscribeEvents();\n          this._unsubscribeEvents = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        return [subscribeEntityRegistry(this.hass.connection, entries => {\n          this._entityRegistryEntries = entries;\n        }), subscribeDeviceRegistry(this.hass.connection, entries => {\n          this._deviceRegistryEntries = entries;\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass) {\n          return nothing;\n        }\n        const {\n          devices,\n          entities\n        } = this._getEntitiesDevices(this._entities, this._devices, this._deviceEntityLookup, this._deviceRegistryEntries);\n        return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${this._scene ? computeStateName(this._scene) : this.hass.localize(\"ui.panel.config.scene.editor.default_name\")}\n      >\n        <ha-button-menu\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <ha-list-item .disabled=${!this.sceneId} graphic=\"icon\">\n            ${this.hass.localize(\"ui.panel.config.scene.picker.duplicate_scene\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </ha-list-item>\n\n          <ha-list-item\n            .disabled=${!this.sceneId}\n            class=${classMap({\n          warning: Boolean(this.sceneId)\n        })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\"ui.panel.config.scene.picker.delete_scene\")}\n            <ha-svg-icon\n              class=${classMap({\n          warning: Boolean(this.sceneId)\n        })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </ha-list-item>\n        </ha-button-menu>\n        ${this._errors ? html` <div class=\"errors\">${this._errors}</div> ` : \"\"}\n        <div\n          id=\"root\"\n          class=${classMap({\n          rtl: computeRTL(this.hass)\n        })}\n        >\n          ${this._config ? html`\n                <div\n                  class=${classMap({\n          container: true,\n          narrow: !this.isWide\n        })}\n                >\n                  <ha-card outlined>\n                    <div class=\"card-content\">\n                      <ha-textfield\n                        .value=${this._config.name}\n                        .name=${\"name\"}\n                        @change=${this._valueChanged}\n                        .label=${this.hass.localize(\"ui.panel.config.scene.editor.name\")}\n                      ></ha-textfield>\n                      <ha-icon-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\"ui.panel.config.scene.editor.icon\")}\n                        .name=${\"icon\"}\n                        .value=${this._config.icon}\n                        @value-changed=${this._valueChanged}\n                      >\n                      </ha-icon-picker>\n                      <ha-area-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\"ui.panel.config.scene.editor.area\")}\n                        .name=${\"area\"}\n                        .value=${this._sceneAreaIdWithUpdates || \"\"}\n                        @value-changed=${this._areaChanged}\n                      >\n                      </ha-area-picker>\n                    </div>\n                  </ha-card>\n                </div>\n\n                <ha-config-section vertical .isWide=${this.isWide}>\n                  <div slot=\"header\">\n                    ${this.hass.localize(\"ui.panel.config.scene.editor.devices.header\")}\n                  </div>\n                  <div slot=\"introduction\">\n                    ${this.hass.localize(\"ui.panel.config.scene.editor.devices.introduction\")}\n                  </div>\n\n                  ${devices.map(device => html`\n                      <ha-card outlined>\n                        <h1 class=\"card-header\">\n                          ${device.name}\n                          <ha-icon-button\n                            .path=${mdiDelete}\n                            .label=${this.hass.localize(\"ui.panel.config.scene.editor.devices.delete\")}\n                            .device=${device.id}\n                            @click=${this._deleteDevice}\n                          ></ha-icon-button>\n                        </h1>\n                        <mwc-list>\n                          ${device.entities.map(entityId => {\n          const entityStateObj = this.hass.states[entityId];\n          if (!entityStateObj) {\n            return nothing;\n          }\n          return html`\n                              <ha-list-item\n                                hasMeta\n                                graphic=\"icon\"\n                                .entityId=${entityId}\n                                @click=${this._showMoreInfo}\n                              >\n                                <state-badge\n                                  .hass=${this.hass}\n                                  .stateObj=${entityStateObj}\n                                  slot=\"graphic\"\n                                ></state-badge>\n                                ${computeStateName(entityStateObj)}\n                              </ha-list-item>\n                            `;\n        })}\n                        </mwc-list>\n                      </ha-card>\n                    `)}\n\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\"ui.panel.config.scene.editor.devices.add\")}\n                  >\n                    <div class=\"card-content\">\n                      <ha-device-picker\n                        @value-changed=${this._devicePicked}\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\"ui.panel.config.scene.editor.devices.add\")}\n                      ></ha-device-picker>\n                    </div>\n                  </ha-card>\n                </ha-config-section>\n\n                ${this.showAdvanced ? html`\n                      <ha-config-section vertical .isWide=${this.isWide}>\n                        <div slot=\"header\">\n                          ${this.hass.localize(\"ui.panel.config.scene.editor.entities.header\")}\n                        </div>\n                        <div slot=\"introduction\">\n                          ${this.hass.localize(\"ui.panel.config.scene.editor.entities.introduction\")}\n                        </div>\n                        ${entities.length ? html`\n                              <ha-card\n                                outlined\n                                class=\"entities\"\n                                .header=${this.hass.localize(\"ui.panel.config.scene.editor.entities.without_device\")}\n                              >\n                                <mwc-list>\n                                  ${entities.map(entityId => {\n          const entityStateObj = this.hass.states[entityId];\n          if (!entityStateObj) {\n            return nothing;\n          }\n          return html`\n                                      <ha-list-item\n                                        hasMeta\n                                        graphic=\"icon\"\n                                        .entityId=${entityId}\n                                        @click=${this._showMoreInfo}\n                                      >\n                                        <state-badge\n                                          .hass=${this.hass}\n                                          .stateObj=${entityStateObj}\n                                          slot=\"graphic\"\n                                        ></state-badge>\n                                        ${computeStateName(entityStateObj)}\n                                        <div slot=\"meta\">\n                                          <ha-icon-button\n                                            .path=${mdiDelete}\n                                            .entityId=${entityId}\n                                            .label=${this.hass.localize(\"ui.panel.config.scene.editor.entities.delete\")}\n                                            @click=${this._deleteEntity}\n                                          ></ha-icon-button>\n                                        </div>\n                                      </ha-list-item>\n                                    `;\n        })}\n                                </mwc-list>\n                              </ha-card>\n                            ` : \"\"}\n\n                        <ha-card\n                          outlined\n                          header=${this.hass.localize(\"ui.panel.config.scene.editor.entities.add\")}\n                        >\n                          <div class=\"card-content\">\n                            <ha-entity-picker\n                              @value-changed=${this._entityPicked}\n                              .excludeDomains=${SCENE_IGNORED_DOMAINS}\n                              .hass=${this.hass}\n                              label=${this.hass.localize(\"ui.panel.config.scene.editor.entities.add\")}\n                            ></ha-entity-picker>\n                          </div>\n                        </ha-card>\n                      </ha-config-section>\n                    ` : \"\"}\n              ` : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.scene.editor.save\")}\n          extended\n          .disabled=${this._saving}\n          @click=${this._saveScene}\n          class=${classMap({\n          dirty: this._dirty,\n          saving: this._saving\n        })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HaSceneEditor.prototype), \"updated\", this).call(this, changedProps);\n        const oldscene = changedProps.get(\"sceneId\");\n        if (changedProps.has(\"sceneId\") && this.sceneId && this.hass && (\n        // Only refresh config if we picked a new scene. If same ID, don't fetch it.\n        !oldscene || oldscene !== this.sceneId)) {\n          this._loadConfig();\n        }\n        if (changedProps.has(\"sceneId\") && !this.sceneId && this.hass) {\n          this._dirty = false;\n          const initData = getSceneEditorInitData();\n          this._config = {\n            name: this.hass.localize(\"ui.panel.config.scene.editor.default_name\"),\n            entities: {},\n            ...(initData === null || initData === void 0 ? void 0 : initData.config)\n          };\n          this._initEntities(this._config);\n          if (initData !== null && initData !== void 0 && initData.areaId) {\n            this._updatedAreaId = initData.areaId;\n          }\n          this._dirty = initData !== undefined && (initData.areaId !== undefined || initData.config !== undefined);\n        }\n        if (changedProps.has(\"_entityRegistryEntries\")) {\n          this._deviceEntityLookup = {};\n          for (const entity of this._entityRegistryEntries) {\n            if (!entity.device_id || entity.entity_category || entity.hidden_by || SCENE_IGNORED_DOMAINS.includes(computeDomain(entity.entity_id))) {\n              continue;\n            }\n            if (!(entity.device_id in this._deviceEntityLookup)) {\n              this._deviceEntityLookup[entity.device_id] = [];\n            }\n            this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n            if (this._entities.includes(entity.entity_id) && !this._single_entities.includes(entity.device_id) && !this._devices.includes(entity.device_id)) {\n              this._devices = [...this._devices, entity.device_id];\n            }\n          }\n        }\n        if (changedProps.has(\"scenes\") && this.sceneId && this._config && !this._scene) {\n          this._setScene();\n        }\n        if (this._scenesSet && changedProps.has(\"scenes\")) {\n          this._scenesSet();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleMenuAction\",\n      value: async function _handleMenuAction(ev) {\n        switch (ev.detail.index) {\n          case 0:\n            this._duplicate();\n            break;\n          case 1:\n            this._deleteTapped();\n            break;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setScene\",\n      value: async function _setScene() {\n        const scene = this.scenes.find(entity => entity.attributes.id === this.sceneId);\n        if (!scene) {\n          return;\n        }\n        this._scene = scene;\n        const {\n          context\n        } = await activateScene(this.hass, this._scene.entity_id);\n        this._activateContextId = context.id;\n        this._unsubscribeEvents = await this.hass.connection.subscribeEvents(event => this._stateChanged(event), \"state_changed\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showMoreInfo\",\n      value: function _showMoreInfo(ev) {\n        const entityId = ev.currentTarget.entityId;\n        fireEvent(this, \"hass-more-info\", {\n          entityId\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_loadConfig\",\n      value: async function _loadConfig() {\n        let config;\n        try {\n          config = await getSceneConfig(this.hass, this.sceneId);\n        } catch (err) {\n          await showAlertDialog(this, {\n            text: err.status_code === 404 ? this.hass.localize(\"ui.panel.config.scene.editor.load_error_not_editable\") : this.hass.localize(\"ui.panel.config.scene.editor.load_error_unknown\", {\n              err_no: err.status_code\n            })\n          });\n          history.back();\n          return;\n        }\n        if (!config.entities) {\n          config.entities = {};\n        }\n        this._initEntities(config);\n        this._setScene();\n        this._dirty = false;\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_initEntities\",\n      value: function _initEntities(config) {\n        this._entities = Object.keys(config.entities);\n        this._entities.forEach(entity => this._storeState(entity));\n        this._single_entities = [];\n        const filteredEntityReg = this._entityRegistryEntries.filter(entityReg => this._entities.includes(entityReg.entity_id));\n        const newDevices = [];\n        if (config.metadata) {\n          Object.keys(config.entities).forEach(entity => {\n            var _entity;\n            if (!this._single_entities.includes(entity) && (_entity = config.metadata[entity]) !== null && _entity !== void 0 && _entity.entity_only) {\n              this._single_entities.push(entity);\n            }\n          });\n        }\n        for (const entityReg of filteredEntityReg) {\n          var _config$metadata;\n          if (!entityReg.device_id) {\n            continue;\n          }\n          const entityMetaData = (_config$metadata = config.metadata) === null || _config$metadata === void 0 ? void 0 : _config$metadata[entityReg.entity_id];\n          if (!newDevices.includes(entityReg.device_id) && !(entityMetaData !== null && entityMetaData !== void 0 && entityMetaData.entity_only)) {\n            newDevices.push(entityReg.device_id);\n          }\n        }\n        this._devices = newDevices;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_entityPicked\",\n      value: function _entityPicked(ev) {\n        const entityId = ev.detail.value;\n        ev.target.value = \"\";\n        if (this._entities.includes(entityId)) {\n          return;\n        }\n        this._entities = [...this._entities, entityId];\n        this._single_entities.push(entityId);\n        this._storeState(entityId);\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteEntity\",\n      value: function _deleteEntity(ev) {\n        ev.stopPropagation();\n        const deleteEntityId = ev.target.entityId;\n        this._entities = this._entities.filter(entityId => entityId !== deleteEntityId);\n        this._single_entities = this._single_entities.filter(entityId => entityId !== deleteEntityId);\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_pickDevice\",\n      value: function _pickDevice(device_id) {\n        if (this._devices.includes(device_id)) {\n          return;\n        }\n        this._devices = [...this._devices, device_id];\n        const deviceEntities = this._deviceEntityLookup[device_id];\n        if (!deviceEntities) {\n          return;\n        }\n        this._entities = [...this._entities, ...deviceEntities];\n        deviceEntities.forEach(entityId => {\n          this._storeState(entityId);\n        });\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_devicePicked\",\n      value: function _devicePicked(ev) {\n        const device = ev.detail.value;\n        ev.target.value = \"\";\n        this._pickDevice(device);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteDevice\",\n      value: function _deleteDevice(ev) {\n        const deviceId = ev.target.device;\n        this._devices = this._devices.filter(device => device !== deviceId);\n        const deviceEntities = this._deviceEntityLookup[deviceId];\n        if (!deviceEntities) {\n          return;\n        }\n        this._entities = this._entities.filter(entityId => !deviceEntities.includes(entityId));\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        var _detail$value, _detail;\n        ev.stopPropagation();\n        const target = ev.target;\n        const name = target.name;\n        if (!name) {\n          return;\n        }\n        let newVal = (_detail$value = (_detail = ev.detail) === null || _detail === void 0 ? void 0 : _detail.value) !== null && _detail$value !== void 0 ? _detail$value : target.value;\n        if (target.type === \"number\") {\n          newVal = Number(newVal);\n        }\n        if ((this._config[name] || \"\") === newVal) {\n          return;\n        }\n        if (!newVal) {\n          delete this._config[name];\n          this._config = {\n            ...this._config\n          };\n        } else {\n          this._config = {\n            ...this._config,\n            [name]: newVal\n          };\n        }\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_areaChanged\",\n      value: function _areaChanged(ev) {\n        const newValue = ev.detail.value === \"\" ? null : ev.detail.value;\n        if (newValue === (this._sceneAreaIdWithUpdates || \"\")) {\n          return;\n        }\n        if (newValue === this._sceneAreaIdCurrent) {\n          this._updatedAreaId = undefined;\n        } else {\n          this._updatedAreaId = newValue;\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_stateChanged\",\n      value: function _stateChanged(event) {\n        if (event.context.id !== this._activateContextId && this._entities.includes(event.data.entity_id)) {\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_backTapped\",\n      value() {\n        return async () => {\n          const result = await this.confirmUnsavedChanged();\n          if (result) {\n            this._goBack();\n          }\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_goBack\",\n      value: function _goBack() {\n        applyScene(this.hass, this._storedStates);\n        afterNextRender(() => history.back());\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteTapped\",\n      value: function _deleteTapped() {\n        var _this$_config;\n        showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.scene.picker.delete_confirm_title\"),\n          text: this.hass.localize(\"ui.panel.config.scene.picker.delete_confirm_text\", {\n            name: (_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.name\n          }),\n          confirmText: this.hass.localize(\"ui.common.delete\"),\n          dismissText: this.hass.localize(\"ui.common.cancel\"),\n          confirm: () => this._delete(),\n          destructive: true\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_delete\",\n      value: async function _delete() {\n        await deleteScene(this.hass, this.sceneId);\n        applyScene(this.hass, this._storedStates);\n        history.back();\n      }\n    }, {\n      kind: \"method\",\n      key: \"confirmUnsavedChanged\",\n      value: async function confirmUnsavedChanged() {\n        if (this._dirty) {\n          return showConfirmationDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.scene.editor.unsaved_confirm_title\"),\n            text: this.hass.localize(\"ui.panel.config.scene.editor.unsaved_confirm_text\"),\n            confirmText: this.hass.localize(\"ui.common.leave\"),\n            dismissText: this.hass.localize(\"ui.common.stay\"),\n            destructive: true\n          });\n        }\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_duplicate\",\n      value: async function _duplicate() {\n        const result = await this.confirmUnsavedChanged();\n        if (result) {\n          var _this$_config2;\n          showSceneEditor({\n            ...this._config,\n            id: undefined,\n            name: `${(_this$_config2 = this._config) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.name} (${this.hass.localize(\"ui.panel.config.scene.picker.duplicate\")})`\n          }, this._sceneAreaIdCurrent || undefined);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateMetaData\",\n      value: function _calculateMetaData() {\n        const output = {};\n        for (const entityId of this._single_entities) {\n          const entityState = this._getCurrentState(entityId);\n          if (!entityState) {\n            continue;\n          }\n          output[entityId] = {\n            entity_only: true\n          };\n        }\n        return output;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_calculateStates\",\n      value: function _calculateStates() {\n        const output = {};\n        this._entities.forEach(entityId => {\n          const entityState = this._getCurrentState(entityId);\n          if (entityState) {\n            output[entityId] = entityState;\n          }\n        });\n        return output;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_storeState\",\n      value: function _storeState(entityId) {\n        if (entityId in this._storedStates) {\n          return;\n        }\n        const entityState = this._getCurrentState(entityId);\n        if (!entityState) {\n          return;\n        }\n        this._storedStates[entityId] = entityState;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getCurrentState\",\n      value: function _getCurrentState(entityId) {\n        const stateObj = this.hass.states[entityId];\n        if (!stateObj) {\n          return undefined;\n        }\n        return {\n          ...stateObj.attributes,\n          state: stateObj.state\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_saveScene\",\n      value: async function _saveScene() {\n        const id = !this.sceneId ? \"\" + Date.now() : this.sceneId;\n        this._config = {\n          ...this._config,\n          entities: this._calculateStates(),\n          metadata: this._calculateMetaData()\n        };\n        try {\n          this._saving = true;\n          await saveScene(this.hass, id, this._config);\n          if (this._updatedAreaId !== undefined) {\n            let scene = this._scene || this.scenes.find(entity => entity.attributes.id === id);\n            if (!scene) {\n              try {\n                await new Promise((resolve, reject) => {\n                  setTimeout(reject, 3000);\n                  this._scenesSet = resolve;\n                });\n                scene = this.scenes.find(entity => entity.attributes.id === id);\n              } catch (err) {\n                // We do nothing.\n              } finally {\n                this._scenesSet = undefined;\n              }\n            }\n            if (scene) {\n              await updateEntityRegistryEntry(this.hass, scene.entity_id, {\n                area_id: this._updatedAreaId\n              });\n            }\n            this._updatedAreaId = undefined;\n          }\n          this._dirty = false;\n          if (!this.sceneId) {\n            navigate(`/config/scene/edit/${id}`, {\n              replace: true\n            });\n          }\n        } catch (err) {\n          this._errors = err.body.message || err.message;\n          showToast(this, {\n            message: err.body.message || err.message\n          });\n          throw err;\n        } finally {\n          this._saving = false;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleKeyboardSave\",\n      value: function handleKeyboardSave() {\n        this._saveScene();\n      }\n    }, {\n      kind: \"get\",\n      key: \"_sceneAreaIdWithUpdates\",\n      value: function _sceneAreaIdWithUpdates() {\n        return this._updatedAreaId !== undefined ? this._updatedAreaId : this._sceneAreaIdCurrent;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_sceneAreaIdCurrent\",\n      value: function _sceneAreaIdCurrent() {\n        return this._scene ? this._getRegistryAreaId(this._entityRegistryEntries, this._scene.entity_id) : undefined;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        ha-card {\n          overflow: hidden;\n        }\n        .container {\n          padding: 28px 20px 0;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n        .narrow.container {\n          max-width: 640px;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        ha-config-section:last-child {\n          padding-bottom: 20px;\n        }\n        ha-card ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n        .card-header > ha-icon-button {\n          float: right;\n          position: relative;\n          top: -8px;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        ha-fab.saving {\n          opacity: var(--light-disabled-opacity);\n        }\n        ha-icon-picker,\n        ha-area-picker,\n        ha-entity-picker {\n          display: block;\n          margin-top: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        div[slot=\"meta\"] {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n      `];\n      }\n    }]\n  };\n}, SubscribeMixin(KeyboardShortcutMixin(LitElement)));","map":{"version":3,"names":["mdiContentDuplicate","mdiContentSave","mdiDelete","mdiDotsVertical","css","html","LitElement","nothing","customElement","property","state","classMap","memoizeOne","fireEvent","computeDomain","computeStateName","navigate","computeRTL","afterNextRender","computeDeviceName","subscribeDeviceRegistry","subscribeEntityRegistry","updateEntityRegistryEntry","activateScene","applyScene","deleteScene","getSceneConfig","getSceneEditorInitData","saveScene","SCENE_IGNORED_DOMAINS","showSceneEditor","showAlertDialog","showConfirmationDialog","KeyboardShortcutMixin","SubscribeMixin","haStyle","showToast","HaSceneEditor","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","entries","entity_id","entry","find","ent","area_id","entities","devices","deviceEntityLookup","deviceRegs","outputDevices","length","deviceLookup","device","id","forEach","deviceId","deviceEntities","push","name","hass","_deviceEntityLookup","outputEntities","entity","includes","disconnectedCallback","_get","_getPrototypeOf","prototype","call","_unsubscribeEvents","undefined","hassSubscribe","connection","_entityRegistryEntries","_deviceRegistryEntries","render","_getEntitiesDevices","_entities","_devices","narrow","route","_backTapped","_scene","localize","_handleMenuAction","sceneId","warning","_errors","rtl","_config","container","isWide","_valueChanged","icon","_sceneAreaIdWithUpdates","_areaChanged","map","_deleteDevice","entityId","entityStateObj","states","_showMoreInfo","_devicePicked","showAdvanced","_deleteEntity","_entityPicked","_saving","_saveScene","dirty","_dirty","saving","updated","changedProps","oldscene","get","has","_loadConfig","initData","config","_initEntities","areaId","_updatedAreaId","device_id","entity_category","hidden_by","_single_entities","_setScene","_scenesSet","ev","detail","index","_duplicate","_deleteTapped","scene","scenes","attributes","context","_activateContextId","subscribeEvents","event","_stateChanged","currentTarget","err","text","status_code","err_no","history","back","Object","keys","_storeState","filteredEntityReg","filter","entityReg","newDevices","metadata","_entity","entity_only","_config$metadata","entityMetaData","target","stopPropagation","deleteEntityId","_pickDevice","_detail$value","_detail","newVal","Number","newValue","_sceneAreaIdCurrent","data","result","confirmUnsavedChanged","_goBack","_storedStates","_this$_config","title","confirmText","dismissText","confirm","_delete","destructive","_this$_config2","_calculateMetaData","output","entityState","_getCurrentState","_calculateStates","stateObj","Date","now","Promise","resolve","reject","setTimeout","replace","body","message","handleKeyboardSave","_getRegistryAreaId","static","styles"],"sources":["/workspaces/frontend/src/panels/config/scene/ha-scene-editor.ts"],"sourcesContent":["import { ActionDetail } from \"@material/mwc-list/mwc-list-foundation\";\nimport \"@material/mwc-list/mwc-list\";\nimport {\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n} from \"@mdi/js\";\nimport { HassEvent } from \"home-assistant-js-websocket\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { navigate } from \"../../../common/navigate\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/device/ha-device-picker\";\nimport \"../../../components/entity/ha-entities-picker\";\nimport \"../../../components/ha-area-picker\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-picker\";\nimport \"../../../components/ha-list-item\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-textfield\";\nimport {\n  computeDeviceName,\n  DeviceRegistryEntry,\n  subscribeDeviceRegistry,\n} from \"../../../data/device_registry\";\nimport {\n  EntityRegistryEntry,\n  subscribeEntityRegistry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport {\n  activateScene,\n  applyScene,\n  deleteScene,\n  getSceneConfig,\n  getSceneEditorInitData,\n  saveScene,\n  SceneConfig,\n  SceneEntities,\n  SceneEntity,\n  SceneMetaData,\n  SCENE_IGNORED_DOMAINS,\n  showSceneEditor,\n} from \"../../../data/scene\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { HomeAssistant, Route } from \"../../../types\";\nimport { showToast } from \"../../../util/toast\";\nimport \"../ha-config-section\";\n\ninterface DeviceEntities {\n  id: string;\n  name: string;\n  entities: string[];\n}\n\ninterface DeviceEntitiesLookup {\n  [deviceId: string]: string[];\n}\n\n@customElement(\"ha-scene-editor\")\nexport class HaSceneEditor extends SubscribeMixin(\n  KeyboardShortcutMixin(LitElement)\n) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property() public sceneId: string | null = null;\n\n  @property({ attribute: false }) public scenes!: SceneEntity[];\n\n  @property({ type: Boolean }) public showAdvanced = false;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _config?: SceneConfig;\n\n  @state() private _entities: string[] = [];\n\n  private _single_entities: string[] = [];\n\n  @state() private _devices: string[] = [];\n\n  @state()\n  private _deviceRegistryEntries: DeviceRegistryEntry[] = [];\n\n  @state()\n  private _entityRegistryEntries: EntityRegistryEntry[] = [];\n\n  @state() private _scene?: SceneEntity;\n\n  private _storedStates: SceneEntities = {};\n\n  private _unsubscribeEvents?: () => void;\n\n  private _deviceEntityLookup: DeviceEntitiesLookup = {};\n\n  private _activateContextId?: string;\n\n  @state() private _saving = false;\n\n  // undefined means not set in this session\n  // null means picked nothing.\n  @state() private _updatedAreaId?: string | null;\n\n  // Callback to be called when scene is set.\n  private _scenesSet?: () => void;\n\n  private _getRegistryAreaId = memoizeOne(\n    (entries: EntityRegistryEntry[], entity_id: string) => {\n      const entry = entries.find((ent) => ent.entity_id === entity_id);\n      return entry ? entry.area_id : null;\n    }\n  );\n\n  private _getEntitiesDevices = memoizeOne(\n    (\n      entities: string[],\n      devices: string[],\n      deviceEntityLookup: DeviceEntitiesLookup,\n      deviceRegs: DeviceRegistryEntry[]\n    ) => {\n      const outputDevices: DeviceEntities[] = [];\n\n      if (devices.length) {\n        const deviceLookup: { [deviceId: string]: DeviceRegistryEntry } = {};\n        for (const device of deviceRegs) {\n          deviceLookup[device.id] = device;\n        }\n\n        devices.forEach((deviceId) => {\n          const device = deviceLookup[deviceId];\n          const deviceEntities: string[] = deviceEntityLookup[deviceId] || [];\n          outputDevices.push({\n            name: computeDeviceName(\n              device,\n              this.hass,\n              this._deviceEntityLookup[device.id]\n            ),\n            id: device.id,\n            entities: deviceEntities,\n          });\n        });\n      }\n\n      const outputEntities: string[] = [];\n\n      entities.forEach((entity) => {\n        if (!outputDevices.find((device) => device.entities.includes(entity))) {\n          outputEntities.push(entity);\n        }\n      });\n\n      return { devices: outputDevices, entities: outputEntities };\n    }\n  );\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    if (this._unsubscribeEvents) {\n      this._unsubscribeEvents();\n      this._unsubscribeEvents = undefined;\n    }\n  }\n\n  public hassSubscribe() {\n    return [\n      subscribeEntityRegistry(this.hass.connection, (entries) => {\n        this._entityRegistryEntries = entries;\n      }),\n      subscribeDeviceRegistry(this.hass.connection, (entries) => {\n        this._deviceRegistryEntries = entries;\n      }),\n    ];\n  }\n\n  protected render() {\n    if (!this.hass) {\n      return nothing;\n    }\n    const { devices, entities } = this._getEntitiesDevices(\n      this._entities,\n      this._devices,\n      this._deviceEntityLookup,\n      this._deviceRegistryEntries\n    );\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${this._scene\n          ? computeStateName(this._scene)\n          : this.hass.localize(\"ui.panel.config.scene.editor.default_name\")}\n      >\n        <ha-button-menu\n          slot=\"toolbar-icon\"\n          @action=${this._handleMenuAction}\n          activatable\n        >\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <ha-list-item .disabled=${!this.sceneId} graphic=\"icon\">\n            ${this.hass.localize(\n              \"ui.panel.config.scene.picker.duplicate_scene\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </ha-list-item>\n\n          <ha-list-item\n            .disabled=${!this.sceneId}\n            class=${classMap({ warning: Boolean(this.sceneId) })}\n            graphic=\"icon\"\n          >\n            ${this.hass.localize(\"ui.panel.config.scene.picker.delete_scene\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.sceneId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </ha-list-item>\n        </ha-button-menu>\n        ${this._errors ? html` <div class=\"errors\">${this._errors}</div> ` : \"\"}\n        <div\n          id=\"root\"\n          class=${classMap({\n            rtl: computeRTL(this.hass),\n          })}\n        >\n          ${this._config\n            ? html`\n                <div\n                  class=${classMap({\n                    container: true,\n                    narrow: !this.isWide,\n                  })}\n                >\n                  <ha-card outlined>\n                    <div class=\"card-content\">\n                      <ha-textfield\n                        .value=${this._config.name}\n                        .name=${\"name\"}\n                        @change=${this._valueChanged}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.name\"\n                        )}\n                      ></ha-textfield>\n                      <ha-icon-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.icon\"\n                        )}\n                        .name=${\"icon\"}\n                        .value=${this._config.icon}\n                        @value-changed=${this._valueChanged}\n                      >\n                      </ha-icon-picker>\n                      <ha-area-picker\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.area\"\n                        )}\n                        .name=${\"area\"}\n                        .value=${this._sceneAreaIdWithUpdates || \"\"}\n                        @value-changed=${this._areaChanged}\n                      >\n                      </ha-area-picker>\n                    </div>\n                  </ha-card>\n                </div>\n\n                <ha-config-section vertical .isWide=${this.isWide}>\n                  <div slot=\"header\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.header\"\n                    )}\n                  </div>\n                  <div slot=\"introduction\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.introduction\"\n                    )}\n                  </div>\n\n                  ${devices.map(\n                    (device) => html`\n                      <ha-card outlined>\n                        <h1 class=\"card-header\">\n                          ${device.name}\n                          <ha-icon-button\n                            .path=${mdiDelete}\n                            .label=${this.hass.localize(\n                              \"ui.panel.config.scene.editor.devices.delete\"\n                            )}\n                            .device=${device.id}\n                            @click=${this._deleteDevice}\n                          ></ha-icon-button>\n                        </h1>\n                        <mwc-list>\n                          ${device.entities.map((entityId) => {\n                            const entityStateObj = this.hass.states[entityId];\n                            if (!entityStateObj) {\n                              return nothing;\n                            }\n                            return html`\n                              <ha-list-item\n                                hasMeta\n                                graphic=\"icon\"\n                                .entityId=${entityId}\n                                @click=${this._showMoreInfo}\n                              >\n                                <state-badge\n                                  .hass=${this.hass}\n                                  .stateObj=${entityStateObj}\n                                  slot=\"graphic\"\n                                ></state-badge>\n                                ${computeStateName(entityStateObj)}\n                              </ha-list-item>\n                            `;\n                          })}\n                        </mwc-list>\n                      </ha-card>\n                    `\n                  )}\n\n                  <ha-card\n                    outlined\n                    .header=${this.hass.localize(\n                      \"ui.panel.config.scene.editor.devices.add\"\n                    )}\n                  >\n                    <div class=\"card-content\">\n                      <ha-device-picker\n                        @value-changed=${this._devicePicked}\n                        .hass=${this.hass}\n                        .label=${this.hass.localize(\n                          \"ui.panel.config.scene.editor.devices.add\"\n                        )}\n                      ></ha-device-picker>\n                    </div>\n                  </ha-card>\n                </ha-config-section>\n\n                ${this.showAdvanced\n                  ? html`\n                      <ha-config-section vertical .isWide=${this.isWide}>\n                        <div slot=\"header\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.header\"\n                          )}\n                        </div>\n                        <div slot=\"introduction\">\n                          ${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.introduction\"\n                          )}\n                        </div>\n                        ${entities.length\n                          ? html`\n                              <ha-card\n                                outlined\n                                class=\"entities\"\n                                .header=${this.hass.localize(\n                                  \"ui.panel.config.scene.editor.entities.without_device\"\n                                )}\n                              >\n                                <mwc-list>\n                                  ${entities.map((entityId) => {\n                                    const entityStateObj =\n                                      this.hass.states[entityId];\n                                    if (!entityStateObj) {\n                                      return nothing;\n                                    }\n                                    return html`\n                                      <ha-list-item\n                                        hasMeta\n                                        graphic=\"icon\"\n                                        .entityId=${entityId}\n                                        @click=${this._showMoreInfo}\n                                      >\n                                        <state-badge\n                                          .hass=${this.hass}\n                                          .stateObj=${entityStateObj}\n                                          slot=\"graphic\"\n                                        ></state-badge>\n                                        ${computeStateName(entityStateObj)}\n                                        <div slot=\"meta\">\n                                          <ha-icon-button\n                                            .path=${mdiDelete}\n                                            .entityId=${entityId}\n                                            .label=${this.hass.localize(\n                                              \"ui.panel.config.scene.editor.entities.delete\"\n                                            )}\n                                            @click=${this._deleteEntity}\n                                          ></ha-icon-button>\n                                        </div>\n                                      </ha-list-item>\n                                    `;\n                                  })}\n                                </mwc-list>\n                              </ha-card>\n                            `\n                          : \"\"}\n\n                        <ha-card\n                          outlined\n                          header=${this.hass.localize(\n                            \"ui.panel.config.scene.editor.entities.add\"\n                          )}\n                        >\n                          <div class=\"card-content\">\n                            <ha-entity-picker\n                              @value-changed=${this._entityPicked}\n                              .excludeDomains=${SCENE_IGNORED_DOMAINS}\n                              .hass=${this.hass}\n                              label=${this.hass.localize(\n                                \"ui.panel.config.scene.editor.entities.add\"\n                              )}\n                            ></ha-entity-picker>\n                          </div>\n                        </ha-card>\n                      </ha-config-section>\n                    `\n                  : \"\"}\n              `\n            : \"\"}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.scene.editor.save\")}\n          extended\n          .disabled=${this._saving}\n          @click=${this._saveScene}\n          class=${classMap({ dirty: this._dirty, saving: this._saving })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldscene = changedProps.get(\"sceneId\");\n\n    if (\n      changedProps.has(\"sceneId\") &&\n      this.sceneId &&\n      this.hass &&\n      // Only refresh config if we picked a new scene. If same ID, don't fetch it.\n      (!oldscene || oldscene !== this.sceneId)\n    ) {\n      this._loadConfig();\n    }\n\n    if (changedProps.has(\"sceneId\") && !this.sceneId && this.hass) {\n      this._dirty = false;\n      const initData = getSceneEditorInitData();\n      this._config = {\n        name: this.hass.localize(\"ui.panel.config.scene.editor.default_name\"),\n        entities: {},\n        ...initData?.config,\n      };\n      this._initEntities(this._config);\n      if (initData?.areaId) {\n        this._updatedAreaId = initData.areaId;\n      }\n      this._dirty =\n        initData !== undefined &&\n        (initData.areaId !== undefined || initData.config !== undefined);\n    }\n\n    if (changedProps.has(\"_entityRegistryEntries\")) {\n      this._deviceEntityLookup = {};\n      for (const entity of this._entityRegistryEntries) {\n        if (\n          !entity.device_id ||\n          entity.entity_category ||\n          entity.hidden_by ||\n          SCENE_IGNORED_DOMAINS.includes(computeDomain(entity.entity_id))\n        ) {\n          continue;\n        }\n        if (!(entity.device_id in this._deviceEntityLookup)) {\n          this._deviceEntityLookup[entity.device_id] = [];\n        }\n        this._deviceEntityLookup[entity.device_id].push(entity.entity_id);\n        if (\n          this._entities.includes(entity.entity_id) &&\n          !this._single_entities.includes(entity.device_id) &&\n          !this._devices.includes(entity.device_id)\n        ) {\n          this._devices = [...this._devices, entity.device_id];\n        }\n      }\n    }\n    if (\n      changedProps.has(\"scenes\") &&\n      this.sceneId &&\n      this._config &&\n      !this._scene\n    ) {\n      this._setScene();\n    }\n    if (this._scenesSet && changedProps.has(\"scenes\")) {\n      this._scenesSet();\n    }\n  }\n\n  private async _handleMenuAction(ev: CustomEvent<ActionDetail>) {\n    switch (ev.detail.index) {\n      case 0:\n        this._duplicate();\n        break;\n      case 1:\n        this._deleteTapped();\n        break;\n    }\n  }\n\n  private async _setScene() {\n    const scene = this.scenes.find(\n      (entity: SceneEntity) => entity.attributes.id === this.sceneId\n    );\n    if (!scene) {\n      return;\n    }\n    this._scene = scene;\n    const { context } = await activateScene(this.hass, this._scene.entity_id);\n    this._activateContextId = context.id;\n    this._unsubscribeEvents =\n      await this.hass!.connection.subscribeEvents<HassEvent>(\n        (event) => this._stateChanged(event),\n        \"state_changed\"\n      );\n  }\n\n  private _showMoreInfo(ev: Event) {\n    const entityId = (ev.currentTarget as any).entityId;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _loadConfig() {\n    let config: SceneConfig;\n    try {\n      config = await getSceneConfig(this.hass, this.sceneId!);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        text:\n          err.status_code === 404\n            ? this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_not_editable\"\n              )\n            : this.hass.localize(\n                \"ui.panel.config.scene.editor.load_error_unknown\",\n                { err_no: err.status_code }\n              ),\n      });\n      history.back();\n      return;\n    }\n\n    if (!config.entities) {\n      config.entities = {};\n    }\n\n    this._initEntities(config);\n\n    this._setScene();\n\n    this._dirty = false;\n    this._config = config;\n  }\n\n  private _initEntities(config: SceneConfig) {\n    this._entities = Object.keys(config.entities);\n    this._entities.forEach((entity) => this._storeState(entity));\n    this._single_entities = [];\n\n    const filteredEntityReg = this._entityRegistryEntries.filter((entityReg) =>\n      this._entities.includes(entityReg.entity_id)\n    );\n    const newDevices: string[] = [];\n\n    if (config.metadata) {\n      Object.keys(config.entities).forEach((entity) => {\n        if (\n          !this._single_entities.includes(entity) &&\n          config.metadata![entity]?.entity_only\n        ) {\n          this._single_entities.push(entity);\n        }\n      });\n    }\n\n    for (const entityReg of filteredEntityReg) {\n      if (!entityReg.device_id) {\n        continue;\n      }\n      const entityMetaData = config.metadata?.[entityReg.entity_id];\n      if (\n        !newDevices.includes(entityReg.device_id) &&\n        !entityMetaData?.entity_only\n      ) {\n        newDevices.push(entityReg.device_id);\n      }\n    }\n\n    this._devices = newDevices;\n  }\n\n  private _entityPicked(ev: CustomEvent) {\n    const entityId = ev.detail.value;\n    (ev.target as any).value = \"\";\n    if (this._entities.includes(entityId)) {\n      return;\n    }\n    this._entities = [...this._entities, entityId];\n    this._single_entities.push(entityId);\n    this._storeState(entityId);\n    this._dirty = true;\n  }\n\n  private _deleteEntity(ev: Event) {\n    ev.stopPropagation();\n    const deleteEntityId = (ev.target as any).entityId;\n    this._entities = this._entities.filter(\n      (entityId) => entityId !== deleteEntityId\n    );\n    this._single_entities = this._single_entities.filter(\n      (entityId) => entityId !== deleteEntityId\n    );\n    this._dirty = true;\n  }\n\n  private _pickDevice(device_id: string) {\n    if (this._devices.includes(device_id)) {\n      return;\n    }\n    this._devices = [...this._devices, device_id];\n    const deviceEntities = this._deviceEntityLookup[device_id];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = [...this._entities, ...deviceEntities];\n    deviceEntities.forEach((entityId) => {\n      this._storeState(entityId);\n    });\n    this._dirty = true;\n  }\n\n  private _devicePicked(ev: CustomEvent) {\n    const device = ev.detail.value;\n    (ev.target as any).value = \"\";\n    this._pickDevice(device);\n  }\n\n  private _deleteDevice(ev: Event) {\n    const deviceId = (ev.target as any).device;\n    this._devices = this._devices.filter((device) => device !== deviceId);\n    const deviceEntities = this._deviceEntityLookup[deviceId];\n    if (!deviceEntities) {\n      return;\n    }\n    this._entities = this._entities.filter(\n      (entityId) => !deviceEntities.includes(entityId)\n    );\n    this._dirty = true;\n  }\n\n  private _valueChanged(ev: Event) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    const name = target.name;\n    if (!name) {\n      return;\n    }\n    let newVal = (ev as CustomEvent).detail?.value ?? target.value;\n    if (target.type === \"number\") {\n      newVal = Number(newVal);\n    }\n    if ((this._config![name] || \"\") === newVal) {\n      return;\n    }\n    if (!newVal) {\n      delete this._config![name];\n      this._config = { ...this._config! };\n    } else {\n      this._config = { ...this._config!, [name]: newVal };\n    }\n    this._dirty = true;\n  }\n\n  private _areaChanged(ev: CustomEvent) {\n    const newValue = ev.detail.value === \"\" ? null : ev.detail.value;\n\n    if (newValue === (this._sceneAreaIdWithUpdates || \"\")) {\n      return;\n    }\n\n    if (newValue === this._sceneAreaIdCurrent) {\n      this._updatedAreaId = undefined;\n    } else {\n      this._updatedAreaId = newValue;\n      this._dirty = true;\n    }\n  }\n\n  private _stateChanged(event: HassEvent) {\n    if (\n      event.context.id !== this._activateContextId &&\n      this._entities.includes(event.data.entity_id)\n    ) {\n      this._dirty = true;\n    }\n  }\n\n  private _backTapped = async (): Promise<void> => {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      this._goBack();\n    }\n  };\n\n  private _goBack(): void {\n    applyScene(this.hass, this._storedStates);\n    afterNextRender(() => history.back());\n  }\n\n  private _deleteTapped(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        \"ui.panel.config.scene.picker.delete_confirm_title\"\n      ),\n      text: this.hass!.localize(\n        \"ui.panel.config.scene.picker.delete_confirm_text\",\n        { name: this._config?.name }\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n      destructive: true,\n    });\n  }\n\n  private async _delete(): Promise<void> {\n    await deleteScene(this.hass, this.sceneId!);\n    applyScene(this.hass, this._storedStates);\n    history.back();\n  }\n\n  private async confirmUnsavedChanged(): Promise<boolean> {\n    if (this._dirty) {\n      return showConfirmationDialog(this, {\n        title: this.hass!.localize(\n          \"ui.panel.config.scene.editor.unsaved_confirm_title\"\n        ),\n        text: this.hass!.localize(\n          \"ui.panel.config.scene.editor.unsaved_confirm_text\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        destructive: true,\n      });\n    }\n    return true;\n  }\n\n  private async _duplicate() {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      showSceneEditor(\n        {\n          ...this._config,\n          id: undefined,\n          name: `${this._config?.name} (${this.hass.localize(\n            \"ui.panel.config.scene.picker.duplicate\"\n          )})`,\n        },\n        this._sceneAreaIdCurrent || undefined\n      );\n    }\n  }\n\n  private _calculateMetaData(): SceneMetaData {\n    const output: SceneMetaData = {};\n\n    for (const entityId of this._single_entities) {\n      const entityState = this._getCurrentState(entityId);\n\n      if (!entityState) {\n        continue;\n      }\n\n      output[entityId] = {\n        entity_only: true,\n      };\n    }\n\n    return output;\n  }\n\n  private _calculateStates(): SceneEntities {\n    const output: SceneEntities = {};\n    this._entities.forEach((entityId) => {\n      const entityState = this._getCurrentState(entityId);\n      if (entityState) {\n        output[entityId] = entityState;\n      }\n    });\n    return output;\n  }\n\n  private _storeState(entityId: string): void {\n    if (entityId in this._storedStates) {\n      return;\n    }\n    const entityState = this._getCurrentState(entityId);\n    if (!entityState) {\n      return;\n    }\n    this._storedStates[entityId] = entityState;\n  }\n\n  private _getCurrentState(entityId: string) {\n    const stateObj = this.hass.states[entityId];\n    if (!stateObj) {\n      return undefined;\n    }\n    return { ...stateObj.attributes, state: stateObj.state };\n  }\n\n  private async _saveScene(): Promise<void> {\n    const id = !this.sceneId ? \"\" + Date.now() : this.sceneId!;\n    this._config = {\n      ...this._config!,\n      entities: this._calculateStates(),\n      metadata: this._calculateMetaData(),\n    };\n    try {\n      this._saving = true;\n      await saveScene(this.hass, id, this._config);\n\n      if (this._updatedAreaId !== undefined) {\n        let scene =\n          this._scene ||\n          this.scenes.find(\n            (entity: SceneEntity) => entity.attributes.id === id\n          );\n\n        if (!scene) {\n          try {\n            await new Promise<void>((resolve, reject) => {\n              setTimeout(reject, 3000);\n              this._scenesSet = resolve;\n            });\n            scene = this.scenes.find(\n              (entity: SceneEntity) => entity.attributes.id === id\n            );\n          } catch (err) {\n            // We do nothing.\n          } finally {\n            this._scenesSet = undefined;\n          }\n        }\n\n        if (scene) {\n          await updateEntityRegistryEntry(this.hass, scene.entity_id, {\n            area_id: this._updatedAreaId,\n          });\n        }\n\n        this._updatedAreaId = undefined;\n      }\n\n      this._dirty = false;\n\n      if (!this.sceneId) {\n        navigate(`/config/scene/edit/${id}`, { replace: true });\n      }\n    } catch (err: any) {\n      this._errors = err.body.message || err.message;\n      showToast(this, {\n        message: err.body.message || err.message,\n      });\n      throw err;\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScene();\n  }\n\n  private get _sceneAreaIdWithUpdates(): string | undefined | null {\n    return this._updatedAreaId !== undefined\n      ? this._updatedAreaId\n      : this._sceneAreaIdCurrent;\n  }\n\n  private get _sceneAreaIdCurrent(): string | undefined | null {\n    return this._scene\n      ? this._getRegistryAreaId(\n          this._entityRegistryEntries,\n          this._scene.entity_id\n        )\n      : undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        .container {\n          padding: 28px 20px 0;\n          max-width: 1040px;\n          margin: 0 auto;\n        }\n        .narrow.container {\n          max-width: 640px;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        ha-config-section:last-child {\n          padding-bottom: 20px;\n        }\n        ha-card ha-icon-button {\n          color: var(--secondary-text-color);\n        }\n        .card-header > ha-icon-button {\n          float: right;\n          position: relative;\n          top: -8px;\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        ha-fab.saving {\n          opacity: var(--light-disabled-opacity);\n        }\n        ha-icon-picker,\n        ha-area-picker,\n        ha-entity-picker {\n          display: block;\n          margin-top: 8px;\n        }\n        ha-textfield {\n          display: block;\n        }\n        div[slot=\"meta\"] {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-scene-editor\": HaSceneEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}