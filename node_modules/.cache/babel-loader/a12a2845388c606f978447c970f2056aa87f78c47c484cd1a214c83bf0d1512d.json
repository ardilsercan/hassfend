{"ast":null,"code":"import { STATE_NOT_RUNNING, STATE_RUNNING, STATE_STARTING } from \"home-assistant-js-websocket\";\nimport { subscribeBootstrapIntegrations } from \"../data/bootstrap_integrations\";\nimport { domainToName } from \"../data/integration\";\nimport { showToast } from \"../util/toast\";\nimport { navigate } from \"../common/navigate\";\nexport default (superClass => class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this._subscribedBootstrapIntegrations = void 0;\n    this._disconnectedTimeout = void 0;\n  }\n  firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    // Need to load in advance because when disconnected, can't dynamically load code.\n    setTimeout(() => import(\"../managers/notification-manager\"), 5000);\n  }\n  updated(changedProperties) {\n    var _oldHass$config, _oldHass$config2, _oldHass$config3;\n    super.updated(changedProperties);\n    const oldHass = changedProperties.get(\"hass\");\n    if (!changedProperties.has(\"hass\") || !this.hass.config) {\n      return;\n    }\n    if ((oldHass === null || oldHass === void 0 || (_oldHass$config = oldHass.config) === null || _oldHass$config === void 0 ? void 0 : _oldHass$config.state) !== this.hass.config.state) {\n      if (this.hass.config.state === STATE_NOT_RUNNING) {\n        showToast(this, {\n          message: this.hass.localize(\"ui.notification_toast.starting\") || \"Indexline Technology is starting, not everything will be available until it is finished.\",\n          duration: 0,\n          dismissable: false,\n          action: {\n            text: this.hass.localize(\"ui.notification_toast.dismiss\") || \"Dismiss\",\n            action: () => {\n              this._unsubscribeBootstrapIntegrations();\n            }\n          }\n        });\n        this._subscribeBootstrapIntegrations();\n      } else if (oldHass !== null && oldHass !== void 0 && oldHass.config && oldHass.config.state === STATE_NOT_RUNNING && (this.hass.config.state === STATE_STARTING || this.hass.config.state === STATE_RUNNING)) {\n        this._unsubscribeBootstrapIntegrations();\n        showToast(this, {\n          message: this.hass.localize(\"ui.notification_toast.started\"),\n          duration: 5000\n        });\n      }\n    }\n    if (this.hass.config.safe_mode && (oldHass === null || oldHass === void 0 || (_oldHass$config2 = oldHass.config) === null || _oldHass$config2 === void 0 ? void 0 : _oldHass$config2.safe_mode) !== this.hass.config.safe_mode) {\n      import(\"../dialogs/generic/show-dialog-box\").then(({\n        showAlertDialog\n      }) => {\n        showAlertDialog(this, {\n          title: this.hass.localize(\"ui.dialogs.safe_mode.title\") || \"Safe mode\",\n          text: this.hass.localize(\"ui.dialogs.safe_mode.text\") || \"Indexline Technology is running in safe mode, custom integrations and modules are not available. Restart Indexline Technology to exit safe mode.\"\n        });\n      });\n    }\n    if (this.hass.config.recovery_mode && (oldHass === null || oldHass === void 0 || (_oldHass$config3 = oldHass.config) === null || _oldHass$config3 === void 0 ? void 0 : _oldHass$config3.recovery_mode) !== this.hass.config.recovery_mode) {\n      navigate(\"/\");\n    }\n  }\n  hassReconnected() {\n    super.hassReconnected();\n    if (this._disconnectedTimeout) {\n      clearTimeout(this._disconnectedTimeout);\n      this._disconnectedTimeout = undefined;\n      return;\n    }\n    showToast(this, {\n      message: \"\",\n      duration: 1\n    });\n  }\n  hassDisconnected() {\n    super.hassDisconnected();\n    this._disconnectedTimeout = window.setTimeout(() => {\n      this._disconnectedTimeout = undefined;\n      showToast(this, {\n        message: this.hass.localize(\"ui.notification_toast.connection_lost\"),\n        duration: 0,\n        dismissable: false\n      });\n    }, 1000);\n  }\n  _handleMessage(message) {\n    if (this.hass.config.state !== STATE_NOT_RUNNING) {\n      return;\n    }\n    if (Object.keys(message).length === 0) {\n      showToast(this, {\n        message: this.hass.localize(\"ui.notification_toast.wrapping_up_startup\") || `Wrapping up startup, not everything will be available until it is finished.`,\n        duration: 0,\n        dismissable: false,\n        action: {\n          text: this.hass.localize(\"ui.notification_toast.dismiss\") || \"Dismiss\",\n          action: () => {\n            this._unsubscribeBootstrapIntegrations();\n          }\n        }\n      });\n      return;\n    }\n\n    // Show the integration that has been starting for the longest time\n    const integration = Object.entries(message).sort(([, a], [, b]) => b - a)[0][0];\n    showToast(this, {\n      message: this.hass.localize(\"ui.notification_toast.integration_starting\", {\n        integration: domainToName(this.hass.localize, integration)\n      }) || `Starting ${integration}, not everything will be available until it is finished.`,\n      duration: 0,\n      dismissable: false,\n      action: {\n        text: this.hass.localize(\"ui.notification_toast.dismiss\") || \"Dismiss\",\n        action: () => {\n          this._unsubscribeBootstrapIntegrations();\n        }\n      }\n    });\n  }\n  _unsubscribeBootstrapIntegrations() {\n    if (this._subscribedBootstrapIntegrations) {\n      this._subscribedBootstrapIntegrations.then(unsub => unsub());\n      this._subscribedBootstrapIntegrations = undefined;\n    }\n  }\n  _subscribeBootstrapIntegrations() {\n    if (!this.hass) {\n      return;\n    }\n    this._subscribedBootstrapIntegrations = subscribeBootstrapIntegrations(this.hass, message => {\n      this._handleMessage(message);\n    });\n  }\n});","map":{"version":3,"names":["STATE_NOT_RUNNING","STATE_RUNNING","STATE_STARTING","subscribeBootstrapIntegrations","domainToName","showToast","navigate","superClass","constructor","args","_subscribedBootstrapIntegrations","_disconnectedTimeout","firstUpdated","changedProps","setTimeout","updated","changedProperties","_oldHass$config","_oldHass$config2","_oldHass$config3","oldHass","get","has","hass","config","state","message","localize","duration","dismissable","action","text","_unsubscribeBootstrapIntegrations","_subscribeBootstrapIntegrations","safe_mode","then","showAlertDialog","title","recovery_mode","hassReconnected","clearTimeout","undefined","hassDisconnected","window","_handleMessage","Object","keys","length","integration","entries","sort","a","b","unsub"],"sources":["/workspaces/frontend/src/state/disconnect-toast-mixin.ts"],"sourcesContent":["import {\n  STATE_NOT_RUNNING,\n  STATE_RUNNING,\n  STATE_STARTING,\n  UnsubscribeFunc,\n} from \"home-assistant-js-websocket\";\nimport {\n  BootstrapIntegrationsTimings,\n  subscribeBootstrapIntegrations,\n} from \"../data/bootstrap_integrations\";\nimport { domainToName } from \"../data/integration\";\nimport { Constructor } from \"../types\";\nimport { showToast } from \"../util/toast\";\nimport { HassBaseEl } from \"./hass-base-mixin\";\nimport { navigate } from \"../common/navigate\";\n\nexport default <T extends Constructor<HassBaseEl>>(superClass: T) =>\n  class extends superClass {\n    private _subscribedBootstrapIntegrations?: Promise<UnsubscribeFunc>;\n\n    private _disconnectedTimeout?: number;\n\n    protected firstUpdated(changedProps) {\n      super.firstUpdated(changedProps);\n      // Need to load in advance because when disconnected, can't dynamically load code.\n      setTimeout(() => import(\"../managers/notification-manager\"), 5000);\n    }\n\n    updated(changedProperties) {\n      super.updated(changedProperties);\n      const oldHass = changedProperties.get(\"hass\");\n      if (!changedProperties.has(\"hass\") || !this.hass!.config) {\n        return;\n      }\n      if (oldHass?.config?.state !== this.hass!.config.state) {\n        if (this.hass!.config.state === STATE_NOT_RUNNING) {\n          showToast(this, {\n            message:\n              this.hass!.localize(\"ui.notification_toast.starting\") ||\n              \"Indexline Technology is starting, not everything will be available until it is finished.\",\n            duration: 0,\n            dismissable: false,\n            action: {\n              text:\n                this.hass!.localize(\"ui.notification_toast.dismiss\") ||\n                \"Dismiss\",\n              action: () => {\n                this._unsubscribeBootstrapIntegrations();\n              },\n            },\n          });\n          this._subscribeBootstrapIntegrations();\n        } else if (\n          oldHass?.config &&\n          oldHass.config.state === STATE_NOT_RUNNING &&\n          (this.hass!.config.state === STATE_STARTING ||\n            this.hass!.config.state === STATE_RUNNING)\n        ) {\n          this._unsubscribeBootstrapIntegrations();\n          showToast(this, {\n            message: this.hass!.localize(\"ui.notification_toast.started\"),\n            duration: 5000,\n          });\n        }\n      }\n      if (\n        this.hass!.config.safe_mode &&\n        oldHass?.config?.safe_mode !== this.hass!.config.safe_mode\n      ) {\n        import(\"../dialogs/generic/show-dialog-box\").then(\n          ({ showAlertDialog }) => {\n            showAlertDialog(this, {\n              title:\n                this.hass!.localize(\"ui.dialogs.safe_mode.title\") ||\n                \"Safe mode\",\n              text:\n                this.hass!.localize(\"ui.dialogs.safe_mode.text\") ||\n                \"Indexline Technology is running in safe mode, custom integrations and modules are not available. Restart Indexline Technology to exit safe mode.\",\n            });\n          }\n        );\n      }\n      if (\n        this.hass!.config.recovery_mode &&\n        oldHass?.config?.recovery_mode !== this.hass!.config.recovery_mode\n      ) {\n        navigate(\"/\");\n      }\n    }\n\n    protected hassReconnected() {\n      super.hassReconnected();\n      if (this._disconnectedTimeout) {\n        clearTimeout(this._disconnectedTimeout);\n        this._disconnectedTimeout = undefined;\n        return;\n      }\n      showToast(this, {\n        message: \"\",\n        duration: 1,\n      });\n    }\n\n    protected hassDisconnected() {\n      super.hassDisconnected();\n\n      this._disconnectedTimeout = window.setTimeout(() => {\n        this._disconnectedTimeout = undefined;\n        showToast(this, {\n          message: this.hass!.localize(\"ui.notification_toast.connection_lost\"),\n          duration: 0,\n          dismissable: false,\n        });\n      }, 1000);\n    }\n\n    private _handleMessage(message: BootstrapIntegrationsTimings): void {\n      if (this.hass!.config.state !== STATE_NOT_RUNNING) {\n        return;\n      }\n\n      if (Object.keys(message).length === 0) {\n        showToast(this, {\n          message:\n            this.hass!.localize(\"ui.notification_toast.wrapping_up_startup\") ||\n            `Wrapping up startup, not everything will be available until it is finished.`,\n          duration: 0,\n          dismissable: false,\n          action: {\n            text:\n              this.hass!.localize(\"ui.notification_toast.dismiss\") || \"Dismiss\",\n            action: () => {\n              this._unsubscribeBootstrapIntegrations();\n            },\n          },\n        });\n        return;\n      }\n\n      // Show the integration that has been starting for the longest time\n      const integration = Object.entries(message).sort(\n        ([, a], [, b]) => b - a\n      )[0][0];\n\n      showToast(this, {\n        message:\n          this.hass!.localize(\"ui.notification_toast.integration_starting\", {\n            integration: domainToName(this.hass!.localize, integration),\n          }) ||\n          `Starting ${integration}, not everything will be available until it is finished.`,\n        duration: 0,\n        dismissable: false,\n        action: {\n          text:\n            this.hass!.localize(\"ui.notification_toast.dismiss\") || \"Dismiss\",\n          action: () => {\n            this._unsubscribeBootstrapIntegrations();\n          },\n        },\n      });\n    }\n\n    private _unsubscribeBootstrapIntegrations() {\n      if (this._subscribedBootstrapIntegrations) {\n        this._subscribedBootstrapIntegrations.then((unsub) => unsub());\n        this._subscribedBootstrapIntegrations = undefined;\n      }\n    }\n\n    private _subscribeBootstrapIntegrations() {\n      if (!this.hass) {\n        return;\n      }\n      this._subscribedBootstrapIntegrations = subscribeBootstrapIntegrations(\n        this.hass!,\n        (message) => {\n          this._handleMessage(message);\n        }\n      );\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}