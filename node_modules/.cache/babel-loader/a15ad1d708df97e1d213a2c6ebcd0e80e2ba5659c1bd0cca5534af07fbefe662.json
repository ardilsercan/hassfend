{"ast":null,"code":"export const createDurationData = duration => {\n  if (duration === undefined) {\n    return undefined;\n  }\n  if (typeof duration !== \"object\") {\n    if (typeof duration === \"string\" || isNaN(duration)) {\n      const parts = (duration === null || duration === void 0 ? void 0 : duration.toString().split(\":\")) || [];\n      if (parts.length === 1) {\n        return {\n          seconds: Number(parts[0])\n        };\n      }\n      if (parts.length > 3) {\n        return undefined;\n      }\n      const seconds = Number(parts[2]) || 0;\n      const seconds_whole = Math.floor(seconds);\n      return {\n        hours: Number(parts[0]) || 0,\n        minutes: Number(parts[1]) || 0,\n        seconds: seconds_whole,\n        milliseconds: Math.floor((seconds - seconds_whole) * 1000)\n      };\n    }\n    return {\n      seconds: duration\n    };\n  }\n  if (!(\"days\" in duration)) {\n    return duration;\n  }\n  const {\n    days,\n    minutes,\n    seconds,\n    milliseconds\n  } = duration;\n  let hours = duration.hours || 0;\n  hours = (hours || 0) + (days || 0) * 24;\n  return {\n    hours,\n    minutes,\n    seconds,\n    milliseconds\n  };\n};","map":{"version":3,"names":["createDurationData","duration","undefined","isNaN","parts","toString","split","length","seconds","Number","seconds_whole","Math","floor","hours","minutes","milliseconds","days"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/datetime/create_duration_data.ts"],"sourcesContent":["import type { HaDurationData } from \"../../components/ha-duration-input\";\nimport type { ForDict } from \"../../data/automation\";\n\nexport const createDurationData = (\n  duration: string | number | ForDict | undefined\n): HaDurationData | undefined => {\n  if (duration === undefined) {\n    return undefined;\n  }\n  if (typeof duration !== \"object\") {\n    if (typeof duration === \"string\" || isNaN(duration)) {\n      const parts = duration?.toString().split(\":\") || [];\n      if (parts.length === 1) {\n        return { seconds: Number(parts[0]) };\n      }\n      if (parts.length > 3) {\n        return undefined;\n      }\n      const seconds = Number(parts[2]) || 0;\n      const seconds_whole = Math.floor(seconds);\n      return {\n        hours: Number(parts[0]) || 0,\n        minutes: Number(parts[1]) || 0,\n        seconds: seconds_whole,\n        milliseconds: Math.floor((seconds - seconds_whole) * 1000),\n      };\n    }\n    return { seconds: duration };\n  }\n  if (!(\"days\" in duration)) {\n    return duration;\n  }\n  const { days, minutes, seconds, milliseconds } = duration;\n  let hours = duration.hours || 0;\n  hours = (hours || 0) + (days || 0) * 24;\n  return {\n    hours,\n    minutes,\n    seconds,\n    milliseconds,\n  };\n};\n"],"mappings":"AAGA,OAAO,MAAMA,kBAAkB,GAC7BC,QAA+C,IAChB;EAC/B,IAAIA,QAAQ,KAAKC,SAAS,EAAE;IAC1B,OAAOA,SAAS;EAClB;EACA,IAAI,OAAOD,QAAQ,KAAK,QAAQ,EAAE;IAChC,IAAI,OAAOA,QAAQ,KAAK,QAAQ,IAAIE,KAAK,CAACF,QAAQ,CAAC,EAAE;MACnD,MAAMG,KAAK,GAAG,CAAAH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEI,QAAQ,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,KAAI,EAAE;MACnD,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO;UAAEC,OAAO,EAAEC,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC;QAAE,CAAC;MACtC;MACA,IAAIA,KAAK,CAACG,MAAM,GAAG,CAAC,EAAE;QACpB,OAAOL,SAAS;MAClB;MACA,MAAMM,OAAO,GAAGC,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;MACrC,MAAMM,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACJ,OAAO,CAAC;MACzC,OAAO;QACLK,KAAK,EAAEJ,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC5BU,OAAO,EAAEL,MAAM,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAC9BI,OAAO,EAAEE,aAAa;QACtBK,YAAY,EAAEJ,IAAI,CAACC,KAAK,CAAC,CAACJ,OAAO,GAAGE,aAAa,IAAI,IAAI;MAC3D,CAAC;IACH;IACA,OAAO;MAAEF,OAAO,EAAEP;IAAS,CAAC;EAC9B;EACA,IAAI,EAAE,MAAM,IAAIA,QAAQ,CAAC,EAAE;IACzB,OAAOA,QAAQ;EACjB;EACA,MAAM;IAAEe,IAAI;IAAEF,OAAO;IAAEN,OAAO;IAAEO;EAAa,CAAC,GAAGd,QAAQ;EACzD,IAAIY,KAAK,GAAGZ,QAAQ,CAACY,KAAK,IAAI,CAAC;EAC/BA,KAAK,GAAG,CAACA,KAAK,IAAI,CAAC,IAAI,CAACG,IAAI,IAAI,CAAC,IAAI,EAAE;EACvC,OAAO;IACLH,KAAK;IACLC,OAAO;IACPN,OAAO;IACPO;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}