{"ast":null,"code":"export const getIntegrationDescriptions = hass => hass.callWS({\n  type: \"integration/descriptions\"\n});\nexport const findIntegration = (integrations, domain) => {\n  if (!integrations) {\n    return undefined;\n  }\n  if (domain in integrations) {\n    const integration = integrations[domain];\n    if (\"integration_type\" in integration) {\n      return integration;\n    }\n  }\n  for (const integration of Object.values(integrations)) {\n    if (\"integrations\" in integration && integration.integrations && domain in integration.integrations) {\n      return integration.integrations[domain];\n    }\n  }\n  return undefined;\n};","map":{"version":3,"names":["getIntegrationDescriptions","hass","callWS","type","findIntegration","integrations","domain","undefined","integration","Object","values"],"sources":["/workspaces/frontend/src/data/integrations.ts"],"sourcesContent":["import { HomeAssistant } from \"../types\";\nimport { IntegrationType } from \"./integration\";\n\nexport type IotStandards = \"zwave\" | \"zigbee\" | \"homekit\" | \"matter\";\n\nexport interface Integration {\n  integration_type: IntegrationType;\n  name?: string;\n  config_flow?: boolean;\n  iot_standards?: IotStandards[];\n  iot_class?: string;\n  supported_by?: string;\n  is_built_in?: boolean;\n}\n\nexport interface Integrations {\n  [domain: string]: Integration;\n}\n\nexport interface Brand {\n  name?: string;\n  integrations?: Integrations;\n  iot_standards?: IotStandards[];\n  is_built_in?: boolean;\n}\n\nexport interface Brands {\n  [domain: string]: Integration | Brand;\n}\n\nexport interface IntegrationDescriptions {\n  core: {\n    integration: Brands;\n    helper: Integrations;\n    translated_name: string[];\n  };\n  custom: {\n    integration: Brands;\n    helper: Integrations;\n  };\n}\n\nexport const getIntegrationDescriptions = (\n  hass: HomeAssistant\n): Promise<IntegrationDescriptions> =>\n  hass.callWS<IntegrationDescriptions>({\n    type: \"integration/descriptions\",\n  });\n\nexport const findIntegration = (\n  integrations: Brands | undefined,\n  domain: string\n): Integration | undefined => {\n  if (!integrations) {\n    return undefined;\n  }\n  if (domain in integrations) {\n    const integration = integrations[domain];\n    if (\"integration_type\" in integration) {\n      return integration;\n    }\n  }\n  for (const integration of Object.values(integrations)) {\n    if (\n      \"integrations\" in integration &&\n      integration.integrations &&\n      domain in integration.integrations\n    ) {\n      return integration.integrations[domain];\n    }\n  }\n  return undefined;\n};\n"],"mappings":"AA0CA,OAAO,MAAMA,0BAA0B,GACrCC,IAAmB,IAEnBA,IAAI,CAACC,MAAM,CAA0B;EACnCC,IAAI,EAAE;AACR,CAAC,CAAC;AAEJ,OAAO,MAAMC,eAAe,GAAGA,CAC7BC,YAAgC,EAChCC,MAAc,KACc;EAC5B,IAAI,CAACD,YAAY,EAAE;IACjB,OAAOE,SAAS;EAClB;EACA,IAAID,MAAM,IAAID,YAAY,EAAE;IAC1B,MAAMG,WAAW,GAAGH,YAAY,CAACC,MAAM,CAAC;IACxC,IAAI,kBAAkB,IAAIE,WAAW,EAAE;MACrC,OAAOA,WAAW;IACpB;EACF;EACA,KAAK,MAAMA,WAAW,IAAIC,MAAM,CAACC,MAAM,CAACL,YAAY,CAAC,EAAE;IACrD,IACE,cAAc,IAAIG,WAAW,IAC7BA,WAAW,CAACH,YAAY,IACxBC,MAAM,IAAIE,WAAW,CAACH,YAAY,EAClC;MACA,OAAOG,WAAW,CAACH,YAAY,CAACC,MAAM,CAAC;IACzC;EACF;EACA,OAAOC,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}