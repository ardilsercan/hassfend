{"ast":null,"code":"import { shouldPolyfill as shouldPolyfillDateTimeFormat } from \"@formatjs/intl-datetimeformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillDisplayNames } from \"@formatjs/intl-displaynames/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillGetCanonicalLocales } from \"@formatjs/intl-getcanonicallocales/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillListFormat } from \"@formatjs/intl-listformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillLocale } from \"@formatjs/intl-locale/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillNumberFormat } from \"@formatjs/intl-numberformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillPluralRules } from \"@formatjs/intl-pluralrules/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillRelativeTimeFormat } from \"@formatjs/intl-relativetimeformat/should-polyfill\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport { polyfillLocaleData, polyfillTimeZoneData } from \"./locale-data-polyfill\";\nconst polyfillIntl = async () => {\n  const locale = getLocalLanguage();\n  const polyfills = [];\n  if (shouldPolyfillGetCanonicalLocales()) {\n    await import(\"@formatjs/intl-getcanonicallocales/polyfill-force\");\n  }\n  if (shouldPolyfillLocale()) {\n    await import(\"@formatjs/intl-locale/polyfill-force\");\n  }\n  if (shouldPolyfillDateTimeFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-datetimeformat/polyfill-force\").then(() => polyfillTimeZoneData()));\n  }\n  if (shouldPolyfillDisplayNames(locale)) {\n    polyfills.push(import(\"@formatjs/intl-displaynames/polyfill-force\"));\n  }\n  if (shouldPolyfillListFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-listformat/polyfill-force\"));\n  }\n  if (shouldPolyfillNumberFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-numberformat/polyfill-force\"));\n  }\n  if (shouldPolyfillPluralRules(locale)) {\n    polyfills.push(import(\"@formatjs/intl-pluralrules/polyfill-force\").then(\n    // Locale data for plural rules breaks current JSON conversions as it includes functions,\n    // so only import English to avoid huge bundles\n    // TODo: Setup JS imports instead of JSON fetches\n    () => import(\"@formatjs/intl-pluralrules/locale-data/en\")));\n  }\n  if (shouldPolyfillRelativeTimeFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-relativetimeformat/polyfill-force\"));\n  }\n  if (polyfills.length === 0) {\n    return;\n  }\n  await Promise.all(polyfills).then(() =>\n  // Load the default language\n  polyfillLocaleData(locale));\n};\nawait polyfillIntl();","map":{"version":3,"names":["shouldPolyfill","shouldPolyfillDateTimeFormat","shouldPolyfillDisplayNames","shouldPolyfillGetCanonicalLocales","shouldPolyfillListFormat","shouldPolyfillLocale","shouldPolyfillNumberFormat","shouldPolyfillPluralRules","shouldPolyfillRelativeTimeFormat","getLocalLanguage","polyfillLocaleData","polyfillTimeZoneData","polyfillIntl","locale","polyfills","push","then","length","Promise","all"],"sources":["/workspaces/frontend/src/resources/intl-polyfill.ts"],"sourcesContent":["import { shouldPolyfill as shouldPolyfillDateTimeFormat } from \"@formatjs/intl-datetimeformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillDisplayNames } from \"@formatjs/intl-displaynames/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillGetCanonicalLocales } from \"@formatjs/intl-getcanonicallocales/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillListFormat } from \"@formatjs/intl-listformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillLocale } from \"@formatjs/intl-locale/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillNumberFormat } from \"@formatjs/intl-numberformat/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillPluralRules } from \"@formatjs/intl-pluralrules/should-polyfill\";\nimport { shouldPolyfill as shouldPolyfillRelativeTimeFormat } from \"@formatjs/intl-relativetimeformat/should-polyfill\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport {\n  polyfillLocaleData,\n  polyfillTimeZoneData,\n} from \"./locale-data-polyfill\";\n\nconst polyfillIntl = async () => {\n  const locale = getLocalLanguage();\n  const polyfills: Promise<unknown>[] = [];\n  if (shouldPolyfillGetCanonicalLocales()) {\n    await import(\"@formatjs/intl-getcanonicallocales/polyfill-force\");\n  }\n  if (shouldPolyfillLocale()) {\n    await import(\"@formatjs/intl-locale/polyfill-force\");\n  }\n  if (shouldPolyfillDateTimeFormat(locale)) {\n    polyfills.push(\n      import(\"@formatjs/intl-datetimeformat/polyfill-force\").then(() =>\n        polyfillTimeZoneData()\n      )\n    );\n  }\n  if (shouldPolyfillDisplayNames(locale)) {\n    polyfills.push(import(\"@formatjs/intl-displaynames/polyfill-force\"));\n  }\n  if (shouldPolyfillListFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-listformat/polyfill-force\"));\n  }\n  if (shouldPolyfillNumberFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-numberformat/polyfill-force\"));\n  }\n  if (shouldPolyfillPluralRules(locale)) {\n    polyfills.push(\n      import(\"@formatjs/intl-pluralrules/polyfill-force\").then(\n        // Locale data for plural rules breaks current JSON conversions as it includes functions,\n        // so only import English to avoid huge bundles\n        // TODo: Setup JS imports instead of JSON fetches\n        () => import(\"@formatjs/intl-pluralrules/locale-data/en\")\n      )\n    );\n  }\n  if (shouldPolyfillRelativeTimeFormat(locale)) {\n    polyfills.push(import(\"@formatjs/intl-relativetimeformat/polyfill-force\"));\n  }\n  if (polyfills.length === 0) {\n    return;\n  }\n  await Promise.all(polyfills).then(() =>\n    // Load the default language\n    polyfillLocaleData(locale)\n  );\n};\n\nawait polyfillIntl();\n"],"mappings":"AAAA,SAASA,cAAc,IAAIC,4BAA4B,QAAQ,+CAA+C;AAC9G,SAASD,cAAc,IAAIE,0BAA0B,QAAQ,6CAA6C;AAC1G,SAASF,cAAc,IAAIG,iCAAiC,QAAQ,oDAAoD;AACxH,SAASH,cAAc,IAAII,wBAAwB,QAAQ,2CAA2C;AACtG,SAASJ,cAAc,IAAIK,oBAAoB,QAAQ,uCAAuC;AAC9F,SAASL,cAAc,IAAIM,0BAA0B,QAAQ,6CAA6C;AAC1G,SAASN,cAAc,IAAIO,yBAAyB,QAAQ,4CAA4C;AACxG,SAASP,cAAc,IAAIQ,gCAAgC,QAAQ,mDAAmD;AACtH,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SACEC,kBAAkB,EAClBC,oBAAoB,QACf,wBAAwB;AAE/B,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,MAAM,GAAGJ,gBAAgB,CAAC,CAAC;EACjC,MAAMK,SAA6B,GAAG,EAAE;EACxC,IAAIX,iCAAiC,CAAC,CAAC,EAAE;IACvC,MAAM,MAAM,CAAC,mDAAmD,CAAC;EACnE;EACA,IAAIE,oBAAoB,CAAC,CAAC,EAAE;IAC1B,MAAM,MAAM,CAAC,sCAAsC,CAAC;EACtD;EACA,IAAIJ,4BAA4B,CAACY,MAAM,CAAC,EAAE;IACxCC,SAAS,CAACC,IAAI,CACZ,MAAM,CAAC,8CAA8C,CAAC,CAACC,IAAI,CAAC,MAC1DL,oBAAoB,CAAC,CACvB,CACF,CAAC;EACH;EACA,IAAIT,0BAA0B,CAACW,MAAM,CAAC,EAAE;IACtCC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAC;EACtE;EACA,IAAIX,wBAAwB,CAACS,MAAM,CAAC,EAAE;IACpCC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAC,0CAA0C,CAAC,CAAC;EACpE;EACA,IAAIT,0BAA0B,CAACO,MAAM,CAAC,EAAE;IACtCC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAC,4CAA4C,CAAC,CAAC;EACtE;EACA,IAAIR,yBAAyB,CAACM,MAAM,CAAC,EAAE;IACrCC,SAAS,CAACC,IAAI,CACZ,MAAM,CAAC,2CAA2C,CAAC,CAACC,IAAI;IACtD;IACA;IACA;IACA,MAAM,MAAM,CAAC,2CAA2C,CAC1D,CACF,CAAC;EACH;EACA,IAAIR,gCAAgC,CAACK,MAAM,CAAC,EAAE;IAC5CC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAC,kDAAkD,CAAC,CAAC;EAC5E;EACA,IAAID,SAAS,CAACG,MAAM,KAAK,CAAC,EAAE;IAC1B;EACF;EACA,MAAMC,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC,CAACE,IAAI,CAAC;EAChC;EACAN,kBAAkB,CAACG,MAAM,CAC3B,CAAC;AACH,CAAC;AAED,MAAMD,YAAY,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}