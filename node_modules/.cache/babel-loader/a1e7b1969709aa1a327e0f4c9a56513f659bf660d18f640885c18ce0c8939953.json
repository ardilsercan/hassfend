{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport \"../../../components/buttons/ha-call-service-button\";\nexport let HuiServiceButtonElement = _decorate([customElement(\"hui-service-button-element\")], function (_initialize, _LitElement) {\n  class HuiServiceButtonElement extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiServiceButtonElement,\n    d: [{\n      kind: \"field\",\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_domain\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_service\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config || !config.service) {\n          throw Error(\"Service required\");\n        }\n        [this._domain, this._service] = config.service.split(\".\", 2);\n        if (!this._domain) {\n          throw Error(\"Service does not have a service domain\");\n        }\n        if (!this._service) {\n          throw Error(\"Service does not have a service name\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._config || !this.hass) {\n          return nothing;\n        }\n        return html`\n      <ha-call-service-button\n        .hass=${this.hass}\n        .domain=${this._domain}\n        .service=${this._service}\n        .serviceData=${this._config.service_data}\n        >${this._config.title}</ha-call-service-button\n      >\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-call-service-button {\n        color: var(--primary-color);\n        white-space: nowrap;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","state","HuiServiceButtonElement","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","value","decorators","setConfig","config","service","Error","_domain","_service","split","_config","render","hass","service_data","title","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/elements/hui-service-button-element.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport \"../../../components/buttons/ha-call-service-button\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceElement, ServiceButtonElementConfig } from \"./types\";\n\n@customElement(\"hui-service-button-element\")\nexport class HuiServiceButtonElement\n  extends LitElement\n  implements LovelaceElement\n{\n  public hass?: HomeAssistant;\n\n  @state() private _config?: ServiceButtonElementConfig;\n\n  private _domain?: string;\n\n  private _service?: string;\n\n  public setConfig(config: ServiceButtonElementConfig): void {\n    if (!config || !config.service) {\n      throw Error(\"Service required\");\n    }\n\n    [this._domain, this._service] = config.service.split(\".\", 2);\n\n    if (!this._domain) {\n      throw Error(\"Service does not have a service domain\");\n    }\n\n    if (!this._service) {\n      throw Error(\"Service does not have a service name\");\n    }\n\n    this._config = config;\n  }\n\n  protected render() {\n    if (!this._config || !this.hass) {\n      return nothing;\n    }\n\n    return html`\n      <ha-call-service-button\n        .hass=${this.hass}\n        .domain=${this._domain}\n        .service=${this._service}\n        .serviceData=${this._config.service_data}\n        >${this._config.title}</ha-call-service-button\n      >\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-call-service-button {\n        color: var(--primary-color);\n        white-space: nowrap;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-service-button-element\": HuiServiceButtonElement;\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,KAAK,QAAQ,gBAAgB;AACrD,OAAO,oDAAoD;AAI3D,WACaC,uBAAuB,GAAAC,SAAA,EADnCH,aAAa,CAAC,4BAA4B,CAAC,aAAAI,WAAA,EAAAC,WAAA;EAA5C,MACaH,uBAAuB,SAAAG,WAAA,CAGpC;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAmDA;EAAC;IAAAI,CAAA,EAtDYN,uBAAuB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAG,UAAA,GAMjCZ,KAAK,CAAC,CAAC;MAAAU,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAMR,SAAAE,UAAiBC,MAAkC,EAAQ;QACzD,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,OAAO,EAAE;UAC9B,MAAMC,KAAK,CAAC,kBAAkB,CAAC;QACjC;QAEA,CAAC,IAAI,CAACC,OAAO,EAAE,IAAI,CAACC,QAAQ,CAAC,GAAGJ,MAAM,CAACC,OAAO,CAACI,KAAK,CAAC,GAAG,EAAE,CAAC,CAAC;QAE5D,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;UACjB,MAAMD,KAAK,CAAC,wCAAwC,CAAC;QACvD;QAEA,IAAI,CAAC,IAAI,CAACE,QAAQ,EAAE;UAClB,MAAMF,KAAK,CAAC,sCAAsC,CAAC;QACrD;QAEA,IAAI,CAACI,OAAO,GAAGN,MAAM;MACvB;IAAC;MAAAL,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAED,SAAAU,OAAA,EAAmB;QACjB,IAAI,CAAC,IAAI,CAACD,OAAO,IAAI,CAAC,IAAI,CAACE,IAAI,EAAE;UAC/B,OAAOxB,OAAO;QAChB;QAEA,OAAOF,IAAK;AAChB;AACA,gBAAgB,IAAI,CAAC0B,IAAK;AAC1B,kBAAkB,IAAI,CAACL,OAAQ;AAC/B,mBAAmB,IAAI,CAACC,QAAS;AACjC,uBAAuB,IAAI,CAACE,OAAO,CAACG,YAAa;AACjD,WAAW,IAAI,CAACH,OAAO,CAACI,KAAM;AAC9B;AACA,KAAK;MACH;IAAC;MAAAf,IAAA;MAAAgB,MAAA;MAAAf,GAAA;MAAAC,KAAA,EAED,SAAAe,OAAA,EAAoC;QAClC,OAAO/B,GAAI;AACf;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GApDOE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}