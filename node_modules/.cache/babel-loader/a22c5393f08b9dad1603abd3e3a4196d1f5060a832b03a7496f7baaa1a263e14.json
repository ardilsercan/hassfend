{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiGestureTap = \"M10,9A1,1 0 0,1 11,8A1,1 0 0,1 12,9V13.47L13.21,13.6L18.15,15.79C18.68,16.03 19,16.56 19,17.14V21.5C18.97,22.32 18.32,22.97 17.5,23H11C10.62,23 10.26,22.85 10,22.57L5.1,18.37L5.84,17.6C6.03,17.39 6.3,17.28 6.58,17.28H6.8L10,19V9M11,5A4,4 0 0,1 15,9C15,10.5 14.2,11.77 13,12.46V11.24C13.61,10.69 14,9.89 14,9A3,3 0 0,0 11,6A3,3 0 0,0 8,9C8,9.89 8.39,10.69 9,11.24V12.46C7.8,11.77 7,10.5 7,9A4,4 0 0,1 11,5Z\";\nconst mdiPalette = \"M17.5,12A1.5,1.5 0 0,1 16,10.5A1.5,1.5 0 0,1 17.5,9A1.5,1.5 0 0,1 19,10.5A1.5,1.5 0 0,1 17.5,12M14.5,8A1.5,1.5 0 0,1 13,6.5A1.5,1.5 0 0,1 14.5,5A1.5,1.5 0 0,1 16,6.5A1.5,1.5 0 0,1 14.5,8M9.5,8A1.5,1.5 0 0,1 8,6.5A1.5,1.5 0 0,1 9.5,5A1.5,1.5 0 0,1 11,6.5A1.5,1.5 0 0,1 9.5,8M6.5,12A1.5,1.5 0 0,1 5,10.5A1.5,1.5 0 0,1 6.5,9A1.5,1.5 0 0,1 8,10.5A1.5,1.5 0 0,1 6.5,12M12,3A9,9 0 0,0 3,12A9,9 0 0,0 12,21A1.5,1.5 0 0,0 13.5,19.5C13.5,19.11 13.35,18.76 13.11,18.5C12.88,18.23 12.73,17.88 12.73,17.5A1.5,1.5 0 0,1 14.23,16H16A5,5 0 0,0 21,11C21,6.58 16.97,3 12,3Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { any, array, assert, assign, boolean, object, optional, string, union } from \"superstruct\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { getEntityDefaultTileIconAction } from \"../../cards/hui-tile-card\";\nimport \"../hui-sub-element-editor\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport \"./hui-card-features-editor\";\nconst HIDDEN_ATTRIBUTES = [\"access_token\", \"available_modes\", \"code_arm_required\", \"code_format\", \"color_modes\", \"device_class\", \"editable\", \"effect_list\", \"entity_id\", \"entity_picture\", \"event_types\", \"fan_modes\", \"fan_speed_list\", \"friendly_name\", \"frontend_stream_type\", \"has_date\", \"has_time\", \"hvac_modes\", \"icon\", \"id\", \"max_color_temp_kelvin\", \"max_mireds\", \"max_temp\", \"max\", \"min_color_temp_kelvin\", \"min_mireds\", \"min_temp\", \"min\", \"mode\", \"operation_list\", \"options\", \"percentage_step\", \"precipitation_unit\", \"preset_modes\", \"pressure_unit\", \"sound_mode_list\", \"source_list\", \"state_class\", \"step\", \"supported_color_modes\", \"supported_features\", \"swing_modes\", \"target_temp_step\", \"temperature_unit\", \"token\", \"unit_of_measurement\", \"visibility_unit\", \"wind_speed_unit\", \"battery_icon\", \"battery_level\"];\nconst cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  entity: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  hide_state: optional(boolean()),\n  state_content: optional(union([string(), array(string())])),\n  color: optional(string()),\n  show_entity_picture: optional(boolean()),\n  vertical: optional(boolean()),\n  tap_action: optional(actionConfigStruct),\n  icon_tap_action: optional(actionConfigStruct),\n  features: optional(array(any()))\n}));\nexport let HuiTileCardEditor = _decorate([customElement(\"hui-tile-card-editor\")], function (_initialize, _LitElement) {\n  class HuiTileCardEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiTileCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_subElementEditorConfig\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne((localize, formatEntityAttributeName, entityId, stateObj, hideState) => {\n          var _stateObj$attributes;\n          return [{\n            name: \"entity\",\n            selector: {\n              entity: {}\n            }\n          }, {\n            name: \"\",\n            type: \"expandable\",\n            iconPath: mdiPalette,\n            title: localize(`ui.panel.lovelace.editor.card.tile.appearance`),\n            schema: [{\n              name: \"\",\n              type: \"grid\",\n              schema: [{\n                name: \"name\",\n                selector: {\n                  text: {}\n                }\n              }, {\n                name: \"icon\",\n                selector: {\n                  icon: {}\n                },\n                context: {\n                  icon_entity: \"entity\"\n                }\n              }, {\n                name: \"color\",\n                selector: {\n                  ui_color: {}\n                }\n              }, {\n                name: \"show_entity_picture\",\n                selector: {\n                  boolean: {}\n                }\n              }, {\n                name: \"vertical\",\n                selector: {\n                  boolean: {}\n                }\n              }, {\n                name: \"hide_state\",\n                selector: {\n                  boolean: {}\n                }\n              }]\n            }, ...(!hideState ? [{\n              name: \"state_content\",\n              selector: {\n                select: {\n                  mode: \"dropdown\",\n                  reorder: true,\n                  custom_value: true,\n                  multiple: true,\n                  options: [{\n                    label: localize(`ui.panel.lovelace.editor.card.tile.state_content_options.state`),\n                    value: \"state\"\n                  }, {\n                    label: localize(`ui.panel.lovelace.editor.card.tile.state_content_options.last-changed`),\n                    value: \"last-changed\"\n                  }, ...Object.keys((_stateObj$attributes = stateObj === null || stateObj === void 0 ? void 0 : stateObj.attributes) !== null && _stateObj$attributes !== void 0 ? _stateObj$attributes : {}).filter(a => !HIDDEN_ATTRIBUTES.includes(a)).map(attribute => ({\n                    value: attribute,\n                    label: formatEntityAttributeName(stateObj, attribute)\n                  }))]\n                }\n              }\n            }] : [])]\n          }, {\n            name: \"\",\n            type: \"expandable\",\n            title: localize(`ui.panel.lovelace.editor.card.tile.actions`),\n            iconPath: mdiGestureTap,\n            schema: [{\n              name: \"tap_action\",\n              selector: {\n                ui_action: {\n                  default_action: \"more-info\"\n                }\n              }\n            }, {\n              name: \"icon_tap_action\",\n              selector: {\n                ui_action: {\n                  default_action: entityId ? getEntityDefaultTileIconAction(entityId) : \"more-info\"\n                }\n              }\n            }]\n          }];\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_context\",\n      value() {\n        return memoizeOne(entity_id => ({\n          entity_id\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_config$hide_st, _features;\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        const stateObj = this._config.entity ? this.hass.states[this._config.entity] : undefined;\n        const schema = this._schema(this.hass.localize, this.hass.formatEntityAttributeName, this._config.entity, stateObj, (_this$_config$hide_st = this._config.hide_state) !== null && _this$_config$hide_st !== void 0 ? _this$_config$hide_st : false);\n        if (this._subElementEditorConfig) {\n          return html`\n        <hui-sub-element-editor\n          .hass=${this.hass}\n          .config=${this._subElementEditorConfig}\n          .context=${this._context(this._config.entity)}\n          @go-back=${this._goBack}\n          @config-changed=${this.subElementChanged}\n        >\n        </hui-sub-element-editor>\n      `;\n        }\n        const data = {\n          ...this._config,\n          state_content: ensureArray(this._config.state_content)\n        };\n        return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <hui-card-features-editor\n        .hass=${this.hass}\n        .stateObj=${stateObj}\n        .features=${(_features = this._config.features) !== null && _features !== void 0 ? _features : []}\n        @features-changed=${this._featuresChanged}\n        @edit-detail-element=${this._editDetailElement}\n      ></hui-card-features-editor>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        ev.stopPropagation();\n        if (!this._config || !this.hass) {\n          return;\n        }\n        const newConfig = ev.detail.value;\n        const config = {\n          features: this._config.features,\n          ...newConfig\n        };\n        if (config.hide_state) {\n          delete config.state_content;\n        }\n        if (config.state_content) {\n          if (config.state_content.length === 0) {\n            delete config.state_content;\n          } else if (config.state_content.length === 1) {\n            config.state_content = config.state_content[0];\n          }\n        }\n        fireEvent(this, \"config-changed\", {\n          config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_featuresChanged\",\n      value: function _featuresChanged(ev) {\n        ev.stopPropagation();\n        if (!this._config || !this.hass) {\n          return;\n        }\n        const features = ev.detail.features;\n        const config = {\n          ...this._config,\n          features\n        };\n        if (features.length === 0) {\n          delete config.features;\n        }\n        fireEvent(this, \"config-changed\", {\n          config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"subElementChanged\",\n      value: function subElementChanged(ev) {\n        ev.stopPropagation();\n        if (!this._config || !this.hass) {\n          return;\n        }\n        const value = ev.detail.config;\n        const newConfigFeatures = this._config.features ? [...this._config.features] : [];\n        if (!value) {\n          newConfigFeatures.splice(this._subElementEditorConfig.index, 1);\n          this._goBack();\n        } else {\n          newConfigFeatures[this._subElementEditorConfig.index] = value;\n        }\n        this._config = {\n          ...this._config,\n          features: newConfigFeatures\n        };\n        this._subElementEditorConfig = {\n          ...this._subElementEditorConfig,\n          elementConfig: value\n        };\n        fireEvent(this, \"config-changed\", {\n          config: this._config\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_editDetailElement\",\n      value: function _editDetailElement(ev) {\n        this._subElementEditorConfig = ev.detail.subElementConfig;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_goBack\",\n      value: function _goBack() {\n        this._subElementEditorConfig = undefined;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"color\":\n            case \"icon_tap_action\":\n            case \"show_entity_picture\":\n            case \"vertical\":\n            case \"hide_state\":\n            case \"state_content\":\n              return this.hass.localize(`ui.panel.lovelace.editor.card.tile.${schema.name}`);\n            default:\n              return this.hass.localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\n          }\n        };\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [configElementStyle, css`\n        .container {\n          display: flex;\n          flex-direction: column;\n        }\n        ha-form {\n          display: block;\n          margin-bottom: 24px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","state","memoizeOne","any","array","assert","assign","boolean","object","optional","string","union","ensureArray","fireEvent","getEntityDefaultTileIconAction","actionConfigStruct","baseLovelaceCardConfig","configElementStyle","HIDDEN_ATTRIBUTES","cardConfigStruct","entity","name","icon","hide_state","state_content","color","show_entity_picture","vertical","tap_action","icon_tap_action","features","HuiTileCardEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","localize","formatEntityAttributeName","entityId","stateObj","hideState","_stateObj$attributes","selector","type","iconPath","mdiPalette","title","schema","text","context","icon_entity","ui_color","select","mode","reorder","custom_value","multiple","options","label","Object","keys","attributes","filter","a","includes","map","mdiGestureTap","ui_action","default_action","entity_id","render","_this$_config$hide_st","_features","hass","states","undefined","_schema","_subElementEditorConfig","_context","_goBack","subElementChanged","data","_computeLabelCallback","_valueChanged","_featuresChanged","_editDetailElement","ev","stopPropagation","newConfig","detail","length","newConfigFeatures","splice","index","elementConfig","subElementConfig","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/editor/config-elements/hui-tile-card-editor.ts"],"sourcesContent":["import { mdiGestureTap, mdiPalette } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  any,\n  array,\n  assert,\n  assign,\n  boolean,\n  object,\n  optional,\n  string,\n  union,\n} from \"superstruct\";\nimport { ensureArray } from \"../../../../common/array/ensure-array\";\nimport { HASSDomEvent, fireEvent } from \"../../../../common/dom/fire_event\";\nimport { formatEntityAttributeNameFunc } from \"../../../../common/translations/entity-state\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type {\n  HaFormSchema,\n  SchemaUnion,\n} from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport {\n  LovelaceCardFeatureConfig,\n  LovelaceCardFeatureContext,\n} from \"../../card-features/types\";\nimport { getEntityDefaultTileIconAction } from \"../../cards/hui-tile-card\";\nimport type { TileCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport \"../hui-sub-element-editor\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { EditSubElementEvent, SubElementEditorConfig } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport \"./hui-card-features-editor\";\n\nconst HIDDEN_ATTRIBUTES = [\n  \"access_token\",\n  \"available_modes\",\n  \"code_arm_required\",\n  \"code_format\",\n  \"color_modes\",\n  \"device_class\",\n  \"editable\",\n  \"effect_list\",\n  \"entity_id\",\n  \"entity_picture\",\n  \"event_types\",\n  \"fan_modes\",\n  \"fan_speed_list\",\n  \"friendly_name\",\n  \"frontend_stream_type\",\n  \"has_date\",\n  \"has_time\",\n  \"hvac_modes\",\n  \"icon\",\n  \"id\",\n  \"max_color_temp_kelvin\",\n  \"max_mireds\",\n  \"max_temp\",\n  \"max\",\n  \"min_color_temp_kelvin\",\n  \"min_mireds\",\n  \"min_temp\",\n  \"min\",\n  \"mode\",\n  \"operation_list\",\n  \"options\",\n  \"percentage_step\",\n  \"precipitation_unit\",\n  \"preset_modes\",\n  \"pressure_unit\",\n  \"sound_mode_list\",\n  \"source_list\",\n  \"state_class\",\n  \"step\",\n  \"supported_color_modes\",\n  \"supported_features\",\n  \"swing_modes\",\n  \"target_temp_step\",\n  \"temperature_unit\",\n  \"token\",\n  \"unit_of_measurement\",\n  \"visibility_unit\",\n  \"wind_speed_unit\",\n  \"battery_icon\",\n  \"battery_level\",\n];\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    hide_state: optional(boolean()),\n    state_content: optional(union([string(), array(string())])),\n    color: optional(string()),\n    show_entity_picture: optional(boolean()),\n    vertical: optional(boolean()),\n    tap_action: optional(actionConfigStruct),\n    icon_tap_action: optional(actionConfigStruct),\n    features: optional(array(any())),\n  })\n);\n\n@customElement(\"hui-tile-card-editor\")\nexport class HuiTileCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: TileCardConfig;\n\n  @state() private _subElementEditorConfig?: SubElementEditorConfig;\n\n  public setConfig(config: TileCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      formatEntityAttributeName: formatEntityAttributeNameFunc,\n      entityId: string | undefined,\n      stateObj: HassEntity | undefined,\n      hideState: boolean\n    ) =>\n      [\n        { name: \"entity\", selector: { entity: {} } },\n        {\n          name: \"\",\n          type: \"expandable\",\n          iconPath: mdiPalette,\n          title: localize(`ui.panel.lovelace.editor.card.tile.appearance`),\n          schema: [\n            {\n              name: \"\",\n              type: \"grid\",\n              schema: [\n                { name: \"name\", selector: { text: {} } },\n                {\n                  name: \"icon\",\n                  selector: {\n                    icon: {},\n                  },\n                  context: { icon_entity: \"entity\" },\n                },\n                {\n                  name: \"color\",\n                  selector: {\n                    ui_color: {},\n                  },\n                },\n                {\n                  name: \"show_entity_picture\",\n                  selector: {\n                    boolean: {},\n                  },\n                },\n                {\n                  name: \"vertical\",\n                  selector: {\n                    boolean: {},\n                  },\n                },\n                {\n                  name: \"hide_state\",\n                  selector: {\n                    boolean: {},\n                  },\n                },\n              ],\n            },\n            ...(!hideState\n              ? ([\n                  {\n                    name: \"state_content\",\n                    selector: {\n                      select: {\n                        mode: \"dropdown\",\n                        reorder: true,\n                        custom_value: true,\n                        multiple: true,\n                        options: [\n                          {\n                            label: localize(\n                              `ui.panel.lovelace.editor.card.tile.state_content_options.state`\n                            ),\n                            value: \"state\",\n                          },\n                          {\n                            label: localize(\n                              `ui.panel.lovelace.editor.card.tile.state_content_options.last-changed`\n                            ),\n                            value: \"last-changed\",\n                          },\n                          ...Object.keys(stateObj?.attributes ?? {})\n                            .filter((a) => !HIDDEN_ATTRIBUTES.includes(a))\n                            .map((attribute) => ({\n                              value: attribute,\n                              label: formatEntityAttributeName(\n                                stateObj!,\n                                attribute\n                              ),\n                            })),\n                        ],\n                      },\n                    },\n                  },\n                ] as const satisfies readonly HaFormSchema[])\n              : []),\n          ],\n        },\n        {\n          name: \"\",\n          type: \"expandable\",\n          title: localize(`ui.panel.lovelace.editor.card.tile.actions`),\n          iconPath: mdiGestureTap,\n          schema: [\n            {\n              name: \"tap_action\",\n              selector: {\n                ui_action: {\n                  default_action: \"more-info\",\n                },\n              },\n            },\n            {\n              name: \"icon_tap_action\",\n              selector: {\n                ui_action: {\n                  default_action: entityId\n                    ? getEntityDefaultTileIconAction(entityId)\n                    : \"more-info\",\n                },\n              },\n            },\n          ],\n        },\n      ] as const satisfies readonly HaFormSchema[]\n  );\n\n  private _context = memoizeOne(\n    (entity_id?: string): LovelaceCardFeatureContext => ({ entity_id })\n  );\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n\n    const stateObj = this._config.entity\n      ? this.hass.states[this._config.entity]\n      : undefined;\n\n    const schema = this._schema(\n      this.hass!.localize,\n      this.hass.formatEntityAttributeName,\n      this._config.entity,\n      stateObj,\n      this._config.hide_state ?? false\n    );\n\n    if (this._subElementEditorConfig) {\n      return html`\n        <hui-sub-element-editor\n          .hass=${this.hass}\n          .config=${this._subElementEditorConfig}\n          .context=${this._context(this._config.entity)}\n          @go-back=${this._goBack}\n          @config-changed=${this.subElementChanged}\n        >\n        </hui-sub-element-editor>\n      `;\n    }\n\n    const data = {\n      ...this._config,\n      state_content: ensureArray(this._config.state_content),\n    };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n      <hui-card-features-editor\n        .hass=${this.hass}\n        .stateObj=${stateObj}\n        .features=${this._config!.features ?? []}\n        @features-changed=${this._featuresChanged}\n        @edit-detail-element=${this._editDetailElement}\n      ></hui-card-features-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const newConfig = ev.detail.value as TileCardConfig;\n\n    const config: TileCardConfig = {\n      features: this._config.features,\n      ...newConfig,\n    };\n\n    if (config.hide_state) {\n      delete config.state_content;\n    }\n\n    if (config.state_content) {\n      if (config.state_content.length === 0) {\n        delete config.state_content;\n      } else if (config.state_content.length === 1) {\n        config.state_content = config.state_content[0];\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _featuresChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const features = ev.detail.features as LovelaceCardFeatureConfig[];\n    const config: TileCardConfig = {\n      ...this._config,\n      features,\n    };\n\n    if (features.length === 0) {\n      delete config.features;\n    }\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private subElementChanged(ev: CustomEvent): void {\n    ev.stopPropagation();\n    if (!this._config || !this.hass) {\n      return;\n    }\n\n    const value = ev.detail.config;\n\n    const newConfigFeatures = this._config!.features\n      ? [...this._config!.features]\n      : [];\n\n    if (!value) {\n      newConfigFeatures.splice(this._subElementEditorConfig!.index!, 1);\n      this._goBack();\n    } else {\n      newConfigFeatures[this._subElementEditorConfig!.index!] = value;\n    }\n\n    this._config = { ...this._config!, features: newConfigFeatures };\n\n    this._subElementEditorConfig = {\n      ...this._subElementEditorConfig!,\n      elementConfig: value,\n    };\n\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _editDetailElement(ev: HASSDomEvent<EditSubElementEvent>): void {\n    this._subElementEditorConfig = ev.detail.subElementConfig;\n  }\n\n  private _goBack(): void {\n    this._subElementEditorConfig = undefined;\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"color\":\n      case \"icon_tap_action\":\n      case \"show_entity_picture\":\n      case \"vertical\":\n      case \"hide_state\":\n      case \"state_content\":\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.tile.${schema.name}`\n        );\n\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static get styles() {\n    return [\n      configElementStyle,\n      css`\n        .container {\n          display: flex;\n          flex-direction: column;\n        }\n        ha-form {\n          display: block;\n          margin-bottom: 24px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-tile-card-editor\": HuiTileCardEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}