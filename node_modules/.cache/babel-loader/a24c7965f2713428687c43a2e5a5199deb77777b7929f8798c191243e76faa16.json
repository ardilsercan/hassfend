{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { CoverEntityFeature } from \"../../../data/cover\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\nimport { generateTiltSliderTrackBackgroundGradient } from \"../../../state-control/cover/ha-state-control-cover-tilt-position\";\nconst GRADIENT = generateTiltSliderTrackBackgroundGradient();\nexport const supportsCoverTiltPositionCardFeature = stateObj => {\n  const domain = computeDomain(stateObj.entity_id);\n  return domain === \"cover\" && supportsFeature(stateObj, CoverEntityFeature.SET_TILT_POSITION);\n};\nlet HuiCoverTiltPositionCardFeature = _decorate([customElement(\"hui-cover-tilt-position-card-feature\")], function (_initialize, _LitElement) {\n  class HuiCoverTiltPositionCardFeature extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiCoverTiltPositionCardFeature,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"color\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig() {\n        return {\n          type: \"cover-tilt-position\"\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config) {\n          throw new Error(\"Invalid configuration\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$stateObj$attrib;\n        if (!this._config || !this.hass || !this.stateObj || !supportsCoverTiltPositionCardFeature(this.stateObj)) {\n          return nothing;\n        }\n        const percentage = (_this$stateObj$attrib = this.stateObj.attributes.current_tilt_position) !== null && _this$stateObj$attrib !== void 0 ? _this$stateObj$attrib : 0;\n        const value = Math.max(Math.round(percentage), 0);\n        const openColor = stateColorCss(this.stateObj, \"open\");\n        const color = this.color ? computeCssColor(this.color) : stateColorCss(this.stateObj);\n        const style = {\n          \"--color\": color,\n          // Use open color for inactive state to avoid grey slider that looks disabled\n          \"--state-cover-inactive-color\": openColor\n        };\n        return html`\n      <div class=\"container\" style=${styleMap(style)}>\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          mode=\"cursor\"\n          inverted\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"current_tilt_position\")}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_tilt_position}\n          .locale=${this.hass.locale}\n        >\n          <div slot=\"background\" class=\"gradient\"></div\n        ></ha-control-slider>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.hass.callService(\"cover\", \"set_cover_tilt_position\", {\n          entity_id: this.stateObj.entity_id,\n          tilt_position: value\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-slider {\n        /* Force inactive state to be colored for the slider */\n        --control-slider-color: var(--color);\n        --control-slider-background: var(--color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n      .gradient {\n        background: -webkit-linear-gradient(left, ${GRADIENT});\n        opacity: 0.6;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","styleMap","computeCssColor","computeAttributeNameDisplay","computeDomain","stateColorCss","supportsFeature","CoverEntityFeature","UNAVAILABLE","DOMAIN_ATTRIBUTES_UNITS","generateTiltSliderTrackBackgroundGradient","GRADIENT","supportsCoverTiltPositionCardFeature","stateObj","domain","entity_id","SET_TILT_POSITION","HuiCoverTiltPositionCardFeature","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","static","getStubConfig","type","setConfig","config","Error","_config","render","_this$stateObj$attrib","hass","percentage","attributes","current_tilt_position","Math","max","round","openColor","color","style","_valueChanged","localize","entities","cover","locale","ev","detail","isNaN","callService","tilt_position","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/card-features/hui-cover-tilt-position-card-feature.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { CoverEntity, CoverEntityFeature } from \"../../../data/cover\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\nimport { generateTiltSliderTrackBackgroundGradient } from \"../../../state-control/cover/ha-state-control-cover-tilt-position\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCardFeature } from \"../types\";\nimport { CoverTiltPositionCardFeatureConfig } from \"./types\";\n\nconst GRADIENT = generateTiltSliderTrackBackgroundGradient();\n\nexport const supportsCoverTiltPositionCardFeature = (stateObj: HassEntity) => {\n  const domain = computeDomain(stateObj.entity_id);\n  return (\n    domain === \"cover\" &&\n    supportsFeature(stateObj, CoverEntityFeature.SET_TILT_POSITION)\n  );\n};\n\n@customElement(\"hui-cover-tilt-position-card-feature\")\nclass HuiCoverTiltPositionCardFeature\n  extends LitElement\n  implements LovelaceCardFeature\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: CoverEntity;\n\n  @property({ attribute: false }) public color?: string;\n\n  @state() private _config?: CoverTiltPositionCardFeatureConfig;\n\n  static getStubConfig(): CoverTiltPositionCardFeatureConfig {\n    return {\n      type: \"cover-tilt-position\",\n    };\n  }\n\n  public setConfig(config: CoverTiltPositionCardFeatureConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected render() {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this.stateObj ||\n      !supportsCoverTiltPositionCardFeature(this.stateObj)\n    ) {\n      return nothing;\n    }\n\n    const percentage = this.stateObj.attributes.current_tilt_position ?? 0;\n\n    const value = Math.max(Math.round(percentage), 0);\n\n    const openColor = stateColorCss(this.stateObj, \"open\");\n\n    const color = this.color\n      ? computeCssColor(this.color)\n      : stateColorCss(this.stateObj);\n\n    const style = {\n      \"--color\": color,\n      // Use open color for inactive state to avoid grey slider that looks disabled\n      \"--state-cover-inactive-color\": openColor,\n    };\n\n    return html`\n      <div class=\"container\" style=${styleMap(style)}>\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          mode=\"cursor\"\n          inverted\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(\n            this.hass.localize,\n            this.stateObj,\n            this.hass.entities,\n            \"current_tilt_position\"\n          )}\n          .disabled=${this.stateObj!.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_tilt_position}\n          .locale=${this.hass.locale}\n        >\n          <div slot=\"background\" class=\"gradient\"></div\n        ></ha-control-slider>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass!.callService(\"cover\", \"set_cover_tilt_position\", {\n      entity_id: this.stateObj!.entity_id,\n      tilt_position: value,\n    });\n  }\n\n  static get styles() {\n    return css`\n      ha-control-slider {\n        /* Force inactive state to be colored for the slider */\n        --control-slider-color: var(--color);\n        --control-slider-background: var(--color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n      .gradient {\n        background: -webkit-linear-gradient(left, ${GRADIENT});\n        opacity: 0.6;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-cover-tilt-position-card-feature\": HuiCoverTiltPositionCardFeature;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}