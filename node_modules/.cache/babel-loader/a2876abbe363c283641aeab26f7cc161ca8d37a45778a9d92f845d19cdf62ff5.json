{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array-buffer.slice.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.typed-array.int16-array.js\";\nimport \"core-js/modules/es.typed-array.uint8-array.js\";\nimport \"core-js/modules/es.typed-array.at.js\";\nimport \"core-js/modules/es.typed-array.copy-within.js\";\nimport \"core-js/modules/es.typed-array.every.js\";\nimport \"core-js/modules/es.typed-array.fill.js\";\nimport \"core-js/modules/es.typed-array.filter.js\";\nimport \"core-js/modules/es.typed-array.find.js\";\nimport \"core-js/modules/es.typed-array.find-index.js\";\nimport \"core-js/modules/es.typed-array.find-last.js\";\nimport \"core-js/modules/es.typed-array.find-last-index.js\";\nimport \"core-js/modules/es.typed-array.for-each.js\";\nimport \"core-js/modules/es.typed-array.includes.js\";\nimport \"core-js/modules/es.typed-array.index-of.js\";\nimport \"core-js/modules/es.typed-array.iterator.js\";\nimport \"core-js/modules/es.typed-array.join.js\";\nimport \"core-js/modules/es.typed-array.last-index-of.js\";\nimport \"core-js/modules/es.typed-array.map.js\";\nimport \"core-js/modules/es.typed-array.reduce.js\";\nimport \"core-js/modules/es.typed-array.reduce-right.js\";\nimport \"core-js/modules/es.typed-array.reverse.js\";\nimport \"core-js/modules/es.typed-array.set.js\";\nimport \"core-js/modules/es.typed-array.slice.js\";\nimport \"core-js/modules/es.typed-array.some.js\";\nimport \"core-js/modules/es.typed-array.sort.js\";\nimport \"core-js/modules/es.typed-array.subarray.js\";\nimport \"core-js/modules/es.typed-array.to-locale-string.js\";\nimport \"core-js/modules/es.typed-array.to-reversed.js\";\nimport \"core-js/modules/es.typed-array.to-sorted.js\";\nimport \"core-js/modules/es.typed-array.to-string.js\";\nimport \"core-js/modules/es.typed-array.with.js\";\nimport \"core-js/modules/esnext.array-buffer.detached.js\";\nimport \"core-js/modules/esnext.array-buffer.transfer.js\";\nimport \"core-js/modules/esnext.array-buffer.transfer-to-fixed-length.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { extractSearchParam } from \"../../../../common/url/search-params\";\nimport \"../../../../components/ha-assist-pipeline-picker\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-textfield\";\nimport { runDebugAssistPipeline } from \"../../../../data/assist_pipeline\";\nimport { showAlertDialog, showPromptDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { AudioRecorder } from \"../../../../util/audio-recorder\";\nimport { fileDownload } from \"../../../../util/file_download\";\nimport \"./assist-render-pipeline-run\";\nexport var AssistPipelineRunDebug = _decorate([customElement(\"assist-pipeline-run-debug\")], function (_initialize, _LitElement) {\n  var AssistPipelineRunDebug = /*#__PURE__*/function (_LitElement2) {\n    _inherits(AssistPipelineRunDebug, _LitElement2);\n    function AssistPipelineRunDebug() {\n      var _this;\n      _classCallCheck(this, AssistPipelineRunDebug);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, AssistPipelineRunDebug, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(AssistPipelineRunDebug);\n  }(_LitElement);\n  return {\n    F: AssistPipelineRunDebug,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_pipelineRuns\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"#continue-conversation\")],\n      key: \"_continueConversationCheckbox\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"#continue-conversation-text\")],\n      key: \"_continueConversationTextField\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_audioBuffer\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_finished\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_pipelineId\",\n      value: function value() {\n        return extractSearchParam(\"pipeline\") || undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <hass-subpage\\n        .narrow=\", \"\\n        .hass=\", \"\\n        header=\\\"Assist Pipeline\\\"\\n      >\\n        \", \"\\n\\n        <div class=\\\"content\\\">\\n          <div class=\\\"start-row\\\">\\n            \", \"\\n          </div>\\n\\n          \", \"\\n        </div>\\n      </hass-subpage>\\n    \"])), this.narrow, this.hass, this._pipelineRuns.length > 0 ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n              <ha-button\\n                slot=\\\"toolbar-icon\\\"\\n                @click=\", \"\\n                .disabled=\", \"\\n              >\\n                Clear\\n              </ha-button>\\n              <ha-button\\n                slot=\\\"toolbar-icon\\\"\\n                @click=\", \"\\n              >\\n                Download\\n              </ha-button>\\n            \"])), this._clearConversation, !this._finished, this._downloadConversation) : \"\", this._pipelineRuns.length === 0 ? html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                  <ha-assist-pipeline-picker\\n                    .hass=\", \"\\n                    .value=\", \"\\n                    @value-changed=\", \"\\n                  ></ha-assist-pipeline-picker>\\n                  <div class=\\\"start-buttons\\\">\\n                    <ha-button raised @click=\", \">\\n                      Run Text Pipeline\\n                    </ha-button>\\n                    <ha-button\\n                      raised\\n                      @click=\", \"\\n                      .disabled=\", \"\\n                    >\\n                      Run Audio Pipeline\\n                    </ha-button>\\n                    <ha-button\\n                      raised\\n                      @click=\", \"\\n                      .disabled=\", \"\\n                    >\\n                      Run Audio Pipeline with Wake Word detection\\n                    </ha-button>\\n                  </div>\\n                \"])), this.hass, this._pipelineId, this._pipelinePicked, this._runTextPipeline, this._runAudioPipeline, !window.isSecureContext ||\n        // @ts-ignore-next-line\n        !(window.AudioContext || window.webkitAudioContext), this._runAudioWakeWordPipeline, !window.isSecureContext ||\n        // @ts-ignore-next-line\n        !(window.AudioContext || window.webkitAudioContext)) : this._pipelineRuns[0].init_options.start_stage === \"intent\" ? html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n                    <ha-textfield\\n                      id=\\\"continue-conversation-text\\\"\\n                      label=\\\"Response\\\"\\n                      .disabled=\", \"\\n                      @keydown=\", \"\\n                    ></ha-textfield>\\n                    <ha-button\\n                      @click=\", \"\\n                      .disabled=\", \"\\n                    >\\n                      Send\\n                    </ha-button>\\n                  \"])), !this._finished, this._handleContinueKeyDown, this._runTextPipeline, !this._finished) : this._finished ? this._pipelineRuns[0].init_options.start_stage === \"wake_word\" ? html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n                        <ha-button @click=\", \">\\n                          Continue listening for wake word\\n                        </ha-button>\\n                      \"])), this._runAudioWakeWordPipeline) : html(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"<ha-button @click=\", \">\\n                        Continue talking\\n                      </ha-button>\"])), this._runAudioPipeline) : html(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n                      <ha-formfield label=\\\"Continue conversation\\\">\\n                        <ha-checkbox\\n                          id=\\\"continue-conversation\\\"\\n                          checked\\n                        ></ha-checkbox>\\n                      </ha-formfield>\\n                    \"]))), this._pipelineRuns.map(function (run) {\n          return run === null ? \"\" : html(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"\\n                  <assist-render-pipeline-run\\n                    .hass=\", \"\\n                    .pipelineRun=\", \"\\n                  ></assist-render-pipeline-run>\\n                \"])), _this2.hass, run);\n        }));\n      }\n    }, {\n      kind: \"get\",\n      key: \"conversationId\",\n      value: function conversationId() {\n        var _this$_pipelineRuns$;\n        return this._pipelineRuns.length === 0 ? null : ((_this$_pipelineRuns$ = this._pipelineRuns[0].intent) === null || _this$_pipelineRuns$ === void 0 || (_this$_pipelineRuns$ = _this$_pipelineRuns$.intent_output) === null || _this$_pipelineRuns$ === void 0 ? void 0 : _this$_pipelineRuns$.conversation_id) || null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_runTextPipeline\",\n      value: function () {\n        var _runTextPipeline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _this3 = this;\n          var textfield, text;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                textfield = this._continueConversationTextField;\n                if (!textfield) {\n                  _context.next = 5;\n                  break;\n                }\n                text = textfield.value;\n                _context.next = 8;\n                break;\n              case 5:\n                _context.next = 7;\n                return showPromptDialog(this, {\n                  title: \"Input text\",\n                  confirmText: \"Run\"\n                });\n              case 7:\n                text = _context.sent;\n              case 8:\n                if (text) {\n                  _context.next = 10;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 10:\n                _context.next = 12;\n                return this._doRunPipeline(function (run) {\n                  if ([\"done\", \"error\"].includes(run.stage)) {\n                    _this3._finished = true;\n                    if (textfield) {\n                      textfield.value = \"\";\n                    }\n                  }\n                }, {\n                  start_stage: \"intent\",\n                  end_stage: \"intent\",\n                  input: {\n                    text: text\n                  }\n                });\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _runTextPipeline() {\n          return _runTextPipeline2.apply(this, arguments);\n        }\n        return _runTextPipeline;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_runAudioWakeWordPipeline\",\n      value: function () {\n        var _runAudioWakeWordPipeline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          var _this4 = this;\n          var audioRecorder, run, _stopRecording;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                audioRecorder = new AudioRecorder(function (data) {\n                  if (_this4._audioBuffer) {\n                    _this4._audioBuffer.push(data);\n                  } else {\n                    _this4._sendAudioChunk(data);\n                  }\n                });\n                this._audioBuffer = [];\n                _context2.next = 4;\n                return audioRecorder.start();\n              case 4:\n                _stopRecording = function stopRecording() {\n                  var _run;\n                  _stopRecording = undefined;\n                  audioRecorder.close();\n                  // We're currently STTing, so finish audio\n                  if (((_run = run) === null || _run === void 0 ? void 0 : _run.stage) === \"stt\" && run.stt.done === false) {\n                    if (_this4._audioBuffer) {\n                      var _iterator = _createForOfIteratorHelper(_this4._audioBuffer),\n                        _step;\n                      try {\n                        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                          var chunk = _step.value;\n                          _this4._sendAudioChunk(chunk);\n                        }\n                      } catch (err) {\n                        _iterator.e(err);\n                      } finally {\n                        _iterator.f();\n                      }\n                    }\n                    // Send empty message to indicate we're done streaming.\n                    _this4._sendAudioChunk(new Int16Array());\n                  }\n                  _this4._audioBuffer = undefined;\n                };\n                _context2.next = 7;\n                return this._doRunPipeline(function (updatedRun) {\n                  run = updatedRun;\n\n                  // When we start wake work stage, the WS has a binary handler\n                  if (updatedRun.stage === \"wake_word\" && _this4._audioBuffer) {\n                    // Send the buffer over the WS to the Wake Word / STT engine.\n                    var _iterator2 = _createForOfIteratorHelper(_this4._audioBuffer),\n                      _step2;\n                    try {\n                      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                        var buffer = _step2.value;\n                        _this4._sendAudioChunk(buffer);\n                      }\n                    } catch (err) {\n                      _iterator2.e(err);\n                    } finally {\n                      _iterator2.f();\n                    }\n                    _this4._audioBuffer = undefined;\n                  }\n\n                  // Stop recording if the server is done with STT stage\n                  if (![\"ready\", \"wake_word\", \"stt\"].includes(updatedRun.stage) && _stopRecording) {\n                    _stopRecording();\n                  }\n\n                  // Play audio when we're done.\n                  if (updatedRun.stage === \"done\" && !updatedRun.error) {\n                    var url = updatedRun.tts.tts_output.url;\n                    var audio = new Audio(url);\n                    audio.addEventListener(\"ended\", function () {\n                      if (_this4.isConnected && _this4._continueConversationCheckbox.checked) {\n                        _this4._runAudioWakeWordPipeline();\n                      } else {\n                        _this4._finished = true;\n                      }\n                    });\n                    audio.play();\n                  } else if (updatedRun.stage === \"done\" && updatedRun.error || updatedRun.stage === \"error\") {\n                    _this4._finished = true;\n                  }\n                }, {\n                  start_stage: \"wake_word\",\n                  end_stage: \"tts\",\n                  input: {\n                    sample_rate: audioRecorder.sampleRate\n                  }\n                });\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _runAudioWakeWordPipeline() {\n          return _runAudioWakeWordPipeline2.apply(this, arguments);\n        }\n        return _runAudioWakeWordPipeline;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_runAudioPipeline\",\n      value: function () {\n        var _runAudioPipeline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var _this5 = this;\n          var audioRecorder, run, _stopRecording2;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) switch (_context3.prev = _context3.next) {\n              case 0:\n                audioRecorder = new AudioRecorder(function (data) {\n                  if (_this5._audioBuffer) {\n                    _this5._audioBuffer.push(data);\n                  } else {\n                    _this5._sendAudioChunk(data);\n                  }\n                });\n                this._audioBuffer = [];\n                _context3.next = 4;\n                return audioRecorder.start();\n              case 4:\n                _stopRecording2 = function stopRecording() {\n                  var _run2;\n                  _stopRecording2 = undefined;\n                  audioRecorder.close();\n                  // We're currently STTing, so finish audio\n                  if (((_run2 = run) === null || _run2 === void 0 ? void 0 : _run2.stage) === \"stt\" && run.stt.done === false) {\n                    if (_this5._audioBuffer) {\n                      var _iterator3 = _createForOfIteratorHelper(_this5._audioBuffer),\n                        _step3;\n                      try {\n                        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                          var chunk = _step3.value;\n                          _this5._sendAudioChunk(chunk);\n                        }\n                      } catch (err) {\n                        _iterator3.e(err);\n                      } finally {\n                        _iterator3.f();\n                      }\n                    }\n                    // Send empty message to indicate we're done streaming.\n                    _this5._sendAudioChunk(new Int16Array());\n                  }\n                  _this5._audioBuffer = undefined;\n                };\n                _context3.next = 7;\n                return this._doRunPipeline(function (updatedRun) {\n                  run = updatedRun;\n\n                  // When we start STT stage, the WS has a binary handler\n                  if (updatedRun.stage === \"stt\" && _this5._audioBuffer) {\n                    // Send the buffer over the WS to the STT engine.\n                    var _iterator4 = _createForOfIteratorHelper(_this5._audioBuffer),\n                      _step4;\n                    try {\n                      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                        var buffer = _step4.value;\n                        _this5._sendAudioChunk(buffer);\n                      }\n                    } catch (err) {\n                      _iterator4.e(err);\n                    } finally {\n                      _iterator4.f();\n                    }\n                    _this5._audioBuffer = undefined;\n                  }\n\n                  // Stop recording if the server is done with STT stage\n                  if (![\"ready\", \"stt\"].includes(updatedRun.stage) && _stopRecording2) {\n                    _stopRecording2();\n                  }\n\n                  // Play audio when we're done.\n                  if (updatedRun.stage === \"done\") {\n                    var url = updatedRun.tts.tts_output.url;\n                    var audio = new Audio(url);\n                    audio.addEventListener(\"ended\", function () {\n                      if (_this5.isConnected && _this5._continueConversationCheckbox.checked) {\n                        _this5._runAudioPipeline();\n                      } else {\n                        _this5._finished = true;\n                      }\n                    });\n                    audio.play();\n                  } else if (updatedRun.stage === \"error\") {\n                    _this5._finished = true;\n                  }\n                }, {\n                  start_stage: \"stt\",\n                  end_stage: \"tts\",\n                  input: {\n                    sample_rate: audioRecorder.sampleRate\n                  }\n                });\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }, _callee3, this);\n        }));\n        function _runAudioPipeline() {\n          return _runAudioPipeline2.apply(this, arguments);\n        }\n        return _runAudioPipeline;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_doRunPipeline\",\n      value: function () {\n        var _doRunPipeline2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(callback, options) {\n          var _this6 = this;\n          var added;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) switch (_context4.prev = _context4.next) {\n              case 0:\n                this._finished = false;\n                added = false;\n                _context4.prev = 2;\n                _context4.next = 5;\n                return runDebugAssistPipeline(this.hass, function (updatedRun) {\n                  if (added) {\n                    _this6._pipelineRuns = [updatedRun].concat(_toConsumableArray(_this6._pipelineRuns.slice(1)));\n                  } else {\n                    _this6._pipelineRuns = [updatedRun].concat(_toConsumableArray(_this6._pipelineRuns));\n                    added = true;\n                  }\n                  callback(updatedRun);\n                }, Object.assign(Object.assign({}, options), {}, {\n                  pipeline: this._pipelineId,\n                  conversation_id: this.conversationId\n                }));\n              case 5:\n                _context4.next = 11;\n                break;\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](2);\n                _context4.next = 11;\n                return showAlertDialog(this, {\n                  title: \"Error starting pipeline\",\n                  text: _context4.t0.message || _context4.t0\n                });\n              case 11:\n              case \"end\":\n                return _context4.stop();\n            }\n          }, _callee4, this, [[2, 7]]);\n        }));\n        function _doRunPipeline(_x, _x2) {\n          return _doRunPipeline2.apply(this, arguments);\n        }\n        return _doRunPipeline;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_sendAudioChunk\",\n      value: function _sendAudioChunk(chunk) {\n        this.hass.connection.socket.binaryType = \"arraybuffer\";\n        // Turn into 8 bit so we can prefix our handler ID.\n        var data = new Uint8Array(1 + chunk.length * 2);\n        data[0] = this._pipelineRuns[0].run.runner_data.stt_binary_handler_id;\n        data.set(new Uint8Array(chunk.buffer), 1);\n        this.hass.connection.socket.send(data);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleContinueKeyDown\",\n      value: function _handleContinueKeyDown(ev) {\n        if (ev.key === \"Enter\") {\n          this._runTextPipeline();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_clearConversation\",\n      value: function _clearConversation() {\n        this._pipelineRuns = [];\n      }\n    }, {\n      kind: \"method\",\n      key: \"_downloadConversation\",\n      value: function _downloadConversation() {\n        fileDownload(\"data:text/plain;charset=utf-8,\".concat(encodeURIComponent(JSON.stringify(this._pipelineRuns, null, 2))), \"conversation.json\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_pipelinePicked\",\n      value: function _pipelinePicked(ev) {\n        this._pipelineId = ev.detail.value;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value: function value() {\n        return [haStyle, css(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"\\n      .content {\\n        padding: 24px 0 32px;\\n        max-width: 600px;\\n        margin: 0 auto;\\n        direction: ltr;\\n      }\\n      .start-buttons {\\n        display: flex;\\n        flex-wrap: wrap;\\n        gap: 8px;\\n        align-items: center;\\n        justify-content: center;\\n      }\\n      .start-row {\\n        display: flex;\\n        justify-content: space-around;\\n        align-items: center;\\n        flex-wrap: wrap;\\n        margin: 0 16px 16px;\\n        direction: var(--direction);\\n      }\\n      ha-assist-pipeline-picker {\\n        display: block;\\n        width: 100%;\\n        margin-bottom: 16px;\\n      }\\n      .start-row ha-textfield {\\n        flex: 1;\\n      }\\n      assist-render-pipeline-run {\\n        padding-top: 16px;\\n      }\\n      assist-render-pipeline-run + assist-render-pipeline-run {\\n        border-top: 1px solid var(--divider-color);\\n      }\\n    \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","query","state","extractSearchParam","runDebugAssistPipeline","showAlertDialog","showPromptDialog","haStyle","AudioRecorder","fileDownload","AssistPipelineRunDebug","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","type","Boolean","undefined","render","_this2","_templateObject","_taggedTemplateLiteral","narrow","hass","_pipelineRuns","_templateObject2","_clearConversation","_finished","_downloadConversation","_templateObject3","_pipelineId","_pipelinePicked","_runTextPipeline","_runAudioPipeline","window","isSecureContext","AudioContext","webkitAudioContext","_runAudioWakeWordPipeline","init_options","start_stage","_templateObject4","_handleContinueKeyDown","_templateObject5","_templateObject6","_templateObject7","map","run","_templateObject8","conversationId","_this$_pipelineRuns$","intent","intent_output","conversation_id","_runTextPipeline2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this3","textfield","text","wrap","_callee$","_context","prev","next","_continueConversationTextField","title","confirmText","sent","abrupt","_doRunPipeline","includes","stage","end_stage","input","stop","apply","_runAudioWakeWordPipeline2","_callee2","_this4","audioRecorder","_stopRecording","_callee2$","_context2","data","_audioBuffer","push","_sendAudioChunk","start","stopRecording","_run","close","stt","done","_iterator","_createForOfIteratorHelper","_step","s","n","chunk","err","e","f","Int16Array","updatedRun","_iterator2","_step2","buffer","error","url","tts","tts_output","audio","Audio","addEventListener","isConnected","_continueConversationCheckbox","checked","play","sample_rate","sampleRate","_runAudioPipeline2","_callee3","_this5","_stopRecording2","_callee3$","_context3","_run2","_iterator3","_step3","_iterator4","_step4","_doRunPipeline2","_callee4","callback","options","_this6","added","_callee4$","_context4","_toConsumableArray","slice","Object","assign","pipeline","t0","message","_x","_x2","connection","socket","binaryType","Uint8Array","runner_data","stt_binary_handler_id","set","send","ev","encodeURIComponent","JSON","stringify","detail","static","_templateObject9"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/voice-assistants/debug/assist-pipeline-run-debug.ts"],"sourcesContent":["import { css, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { extractSearchParam } from \"../../../../common/url/search-params\";\nimport \"../../../../components/ha-assist-pipeline-picker\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-checkbox\";\nimport type { HaCheckbox } from \"../../../../components/ha-checkbox\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-textfield\";\nimport type { HaTextField } from \"../../../../components/ha-textfield\";\nimport {\n  PipelineRun,\n  PipelineRunOptions,\n  runDebugAssistPipeline,\n} from \"../../../../data/assist_pipeline\";\nimport {\n  showAlertDialog,\n  showPromptDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { AudioRecorder } from \"../../../../util/audio-recorder\";\nimport { fileDownload } from \"../../../../util/file_download\";\nimport \"./assist-render-pipeline-run\";\n\n@customElement(\"assist-pipeline-run-debug\")\nexport class AssistPipelineRunDebug extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _pipelineRuns: PipelineRun[] = [];\n\n  @query(\"#continue-conversation\")\n  private _continueConversationCheckbox!: HaCheckbox;\n\n  @query(\"#continue-conversation-text\")\n  private _continueConversationTextField?: HaTextField;\n\n  private _audioBuffer?: Int16Array[];\n\n  @state() private _finished = false;\n\n  @state() private _pipelineId?: string =\n    extractSearchParam(\"pipeline\") || undefined;\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-subpage\n        .narrow=${this.narrow}\n        .hass=${this.hass}\n        header=\"Assist Pipeline\"\n      >\n        ${this._pipelineRuns.length > 0\n          ? html`\n              <ha-button\n                slot=\"toolbar-icon\"\n                @click=${this._clearConversation}\n                .disabled=${!this._finished}\n              >\n                Clear\n              </ha-button>\n              <ha-button\n                slot=\"toolbar-icon\"\n                @click=${this._downloadConversation}\n              >\n                Download\n              </ha-button>\n            `\n          : \"\"}\n\n        <div class=\"content\">\n          <div class=\"start-row\">\n            ${this._pipelineRuns.length === 0\n              ? html`\n                  <ha-assist-pipeline-picker\n                    .hass=${this.hass}\n                    .value=${this._pipelineId}\n                    @value-changed=${this._pipelinePicked}\n                  ></ha-assist-pipeline-picker>\n                  <div class=\"start-buttons\">\n                    <ha-button raised @click=${this._runTextPipeline}>\n                      Run Text Pipeline\n                    </ha-button>\n                    <ha-button\n                      raised\n                      @click=${this._runAudioPipeline}\n                      .disabled=${!window.isSecureContext ||\n                      // @ts-ignore-next-line\n                      !(window.AudioContext || window.webkitAudioContext)}\n                    >\n                      Run Audio Pipeline\n                    </ha-button>\n                    <ha-button\n                      raised\n                      @click=${this._runAudioWakeWordPipeline}\n                      .disabled=${!window.isSecureContext ||\n                      // @ts-ignore-next-line\n                      !(window.AudioContext || window.webkitAudioContext)}\n                    >\n                      Run Audio Pipeline with Wake Word detection\n                    </ha-button>\n                  </div>\n                `\n              : this._pipelineRuns[0].init_options!.start_stage === \"intent\"\n                ? html`\n                    <ha-textfield\n                      id=\"continue-conversation-text\"\n                      label=\"Response\"\n                      .disabled=${!this._finished}\n                      @keydown=${this._handleContinueKeyDown}\n                    ></ha-textfield>\n                    <ha-button\n                      @click=${this._runTextPipeline}\n                      .disabled=${!this._finished}\n                    >\n                      Send\n                    </ha-button>\n                  `\n                : this._finished\n                  ? this._pipelineRuns[0].init_options!.start_stage ===\n                    \"wake_word\"\n                    ? html`\n                        <ha-button @click=${this._runAudioWakeWordPipeline}>\n                          Continue listening for wake word\n                        </ha-button>\n                      `\n                    : html`<ha-button @click=${this._runAudioPipeline}>\n                        Continue talking\n                      </ha-button>`\n                  : html`\n                      <ha-formfield label=\"Continue conversation\">\n                        <ha-checkbox\n                          id=\"continue-conversation\"\n                          checked\n                        ></ha-checkbox>\n                      </ha-formfield>\n                    `}\n          </div>\n\n          ${this._pipelineRuns.map((run) =>\n            run === null\n              ? \"\"\n              : html`\n                  <assist-render-pipeline-run\n                    .hass=${this.hass}\n                    .pipelineRun=${run}\n                  ></assist-render-pipeline-run>\n                `\n          )}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  private get conversationId(): string | null {\n    return this._pipelineRuns.length === 0\n      ? null\n      : this._pipelineRuns[0].intent?.intent_output?.conversation_id || null;\n  }\n\n  private async _runTextPipeline() {\n    const textfield = this._continueConversationTextField;\n\n    let text: string | null;\n\n    if (textfield) {\n      text = textfield.value;\n    } else {\n      text = await showPromptDialog(this, {\n        title: \"Input text\",\n        confirmText: \"Run\",\n      });\n    }\n\n    if (!text) {\n      return;\n    }\n\n    await this._doRunPipeline(\n      (run) => {\n        if ([\"done\", \"error\"].includes(run.stage)) {\n          this._finished = true;\n          if (textfield) {\n            textfield.value = \"\";\n          }\n        }\n      },\n      {\n        start_stage: \"intent\",\n        end_stage: \"intent\",\n        input: { text },\n      }\n    );\n  }\n\n  private async _runAudioWakeWordPipeline() {\n    const audioRecorder = new AudioRecorder((data) => {\n      if (this._audioBuffer) {\n        this._audioBuffer.push(data);\n      } else {\n        this._sendAudioChunk(data);\n      }\n    });\n\n    this._audioBuffer = [];\n    await audioRecorder.start();\n\n    let run: PipelineRun | undefined;\n\n    let stopRecording: (() => void) | undefined = () => {\n      stopRecording = undefined;\n      audioRecorder.close();\n      // We're currently STTing, so finish audio\n      if (run?.stage === \"stt\" && run.stt!.done === false) {\n        if (this._audioBuffer) {\n          for (const chunk of this._audioBuffer) {\n            this._sendAudioChunk(chunk);\n          }\n        }\n        // Send empty message to indicate we're done streaming.\n        this._sendAudioChunk(new Int16Array());\n      }\n      this._audioBuffer = undefined;\n    };\n\n    await this._doRunPipeline(\n      (updatedRun) => {\n        run = updatedRun;\n\n        // When we start wake work stage, the WS has a binary handler\n        if (updatedRun.stage === \"wake_word\" && this._audioBuffer) {\n          // Send the buffer over the WS to the Wake Word / STT engine.\n          for (const buffer of this._audioBuffer) {\n            this._sendAudioChunk(buffer);\n          }\n          this._audioBuffer = undefined;\n        }\n\n        // Stop recording if the server is done with STT stage\n        if (\n          ![\"ready\", \"wake_word\", \"stt\"].includes(updatedRun.stage) &&\n          stopRecording\n        ) {\n          stopRecording();\n        }\n\n        // Play audio when we're done.\n        if (updatedRun.stage === \"done\" && !updatedRun.error) {\n          const url = updatedRun.tts!.tts_output!.url;\n          const audio = new Audio(url);\n          audio.addEventListener(\"ended\", () => {\n            if (\n              this.isConnected &&\n              this._continueConversationCheckbox.checked\n            ) {\n              this._runAudioWakeWordPipeline();\n            } else {\n              this._finished = true;\n            }\n          });\n          audio.play();\n        } else if (\n          (updatedRun.stage === \"done\" && updatedRun.error) ||\n          updatedRun.stage === \"error\"\n        ) {\n          this._finished = true;\n        }\n      },\n      {\n        start_stage: \"wake_word\",\n        end_stage: \"tts\",\n        input: {\n          sample_rate: audioRecorder.sampleRate!,\n        },\n      }\n    );\n  }\n\n  private async _runAudioPipeline() {\n    const audioRecorder = new AudioRecorder((data) => {\n      if (this._audioBuffer) {\n        this._audioBuffer.push(data);\n      } else {\n        this._sendAudioChunk(data);\n      }\n    });\n\n    this._audioBuffer = [];\n    await audioRecorder.start();\n\n    let run: PipelineRun | undefined;\n\n    let stopRecording: (() => void) | undefined = () => {\n      stopRecording = undefined;\n      audioRecorder.close();\n      // We're currently STTing, so finish audio\n      if (run?.stage === \"stt\" && run.stt!.done === false) {\n        if (this._audioBuffer) {\n          for (const chunk of this._audioBuffer) {\n            this._sendAudioChunk(chunk);\n          }\n        }\n        // Send empty message to indicate we're done streaming.\n        this._sendAudioChunk(new Int16Array());\n      }\n      this._audioBuffer = undefined;\n    };\n\n    await this._doRunPipeline(\n      (updatedRun) => {\n        run = updatedRun;\n\n        // When we start STT stage, the WS has a binary handler\n        if (updatedRun.stage === \"stt\" && this._audioBuffer) {\n          // Send the buffer over the WS to the STT engine.\n          for (const buffer of this._audioBuffer) {\n            this._sendAudioChunk(buffer);\n          }\n          this._audioBuffer = undefined;\n        }\n\n        // Stop recording if the server is done with STT stage\n        if (![\"ready\", \"stt\"].includes(updatedRun.stage) && stopRecording) {\n          stopRecording();\n        }\n\n        // Play audio when we're done.\n        if (updatedRun.stage === \"done\") {\n          const url = updatedRun.tts!.tts_output!.url;\n          const audio = new Audio(url);\n          audio.addEventListener(\"ended\", () => {\n            if (\n              this.isConnected &&\n              this._continueConversationCheckbox.checked\n            ) {\n              this._runAudioPipeline();\n            } else {\n              this._finished = true;\n            }\n          });\n          audio.play();\n        } else if (updatedRun.stage === \"error\") {\n          this._finished = true;\n        }\n      },\n      {\n        start_stage: \"stt\",\n        end_stage: \"tts\",\n        input: {\n          sample_rate: audioRecorder.sampleRate!,\n        },\n      }\n    );\n  }\n\n  private async _doRunPipeline(\n    callback: (event: PipelineRun) => void,\n    options: PipelineRunOptions\n  ) {\n    this._finished = false;\n    let added = false;\n    try {\n      await runDebugAssistPipeline(\n        this.hass,\n        (updatedRun) => {\n          if (added) {\n            this._pipelineRuns = [updatedRun, ...this._pipelineRuns.slice(1)];\n          } else {\n            this._pipelineRuns = [updatedRun, ...this._pipelineRuns];\n            added = true;\n          }\n          callback(updatedRun);\n        },\n        {\n          ...options,\n          pipeline: this._pipelineId,\n          conversation_id: this.conversationId,\n        }\n      );\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: \"Error starting pipeline\",\n        text: err.message || err,\n      });\n    }\n  }\n\n  private _sendAudioChunk(chunk: Int16Array) {\n    this.hass.connection.socket!.binaryType = \"arraybuffer\";\n    // Turn into 8 bit so we can prefix our handler ID.\n    const data = new Uint8Array(1 + chunk.length * 2);\n    data[0] = this._pipelineRuns[0].run.runner_data.stt_binary_handler_id!;\n    data.set(new Uint8Array(chunk.buffer), 1);\n\n    this.hass.connection.socket!.send(data);\n  }\n\n  private _handleContinueKeyDown(ev) {\n    if (ev.key === \"Enter\") {\n      this._runTextPipeline();\n    }\n  }\n\n  private _clearConversation() {\n    this._pipelineRuns = [];\n  }\n\n  private _downloadConversation() {\n    fileDownload(\n      `data:text/plain;charset=utf-8,${encodeURIComponent(\n        JSON.stringify(this._pipelineRuns, null, 2)\n      )}`,\n      `conversation.json`\n    );\n  }\n\n  private _pipelinePicked(ev) {\n    this._pipelineId = ev.detail.value;\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 24px 0 32px;\n        max-width: 600px;\n        margin: 0 auto;\n        direction: ltr;\n      }\n      .start-buttons {\n        display: flex;\n        flex-wrap: wrap;\n        gap: 8px;\n        align-items: center;\n        justify-content: center;\n      }\n      .start-row {\n        display: flex;\n        justify-content: space-around;\n        align-items: center;\n        flex-wrap: wrap;\n        margin: 0 16px 16px;\n        direction: var(--direction);\n      }\n      ha-assist-pipeline-picker {\n        display: block;\n        width: 100%;\n        margin-bottom: 16px;\n      }\n      .start-row ha-textfield {\n        flex: 1;\n      }\n      assist-render-pipeline-run {\n        padding-top: 16px;\n      }\n      assist-render-pipeline-run + assist-render-pipeline-run {\n        border-top: 1px solid var(--divider-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"assist-pipeline-run-debug\": AssistPipelineRunDebug;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}