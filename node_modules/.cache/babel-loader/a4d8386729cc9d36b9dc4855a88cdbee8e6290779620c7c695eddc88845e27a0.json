{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { ARIA_PROPERTIES, ariaPropertyToAttribute } from './aria.js';\n/**\n * Sets up a `ReactiveElement` constructor to enable updates when delegating\n * aria attributes. Elements may bind `this.aria*` properties to `aria-*`\n * attributes in their render functions.\n *\n * This function will:\n * - Call `requestUpdate()` when an aria attribute changes.\n * - Add `role=\"presentation\"` to the host.\n *\n * NOTE: The following features are not currently supported:\n * - Delegating IDREF attributes (ex: `aria-labelledby`, `aria-controls`)\n * - Delegating the `role` attribute\n *\n * @example\n * class XButton extends LitElement {\n *   static {\n *     requestUpdateOnAriaChange(XButton);\n *   }\n *\n *   protected override render() {\n *     return html`\n *       <button aria-label=${this.ariaLabel || nothing}>\n *         <slot></slot>\n *       </button>\n *     `;\n *   }\n * }\n *\n * @param ctor The `ReactiveElement` constructor to patch.\n */\nexport function requestUpdateOnAriaChange(ctor) {\n  for (const ariaProperty of ARIA_PROPERTIES) {\n    ctor.createProperty(ariaProperty, {\n      attribute: ariaPropertyToAttribute(ariaProperty),\n      reflect: true\n    });\n  }\n  ctor.addInitializer(element => {\n    const controller = {\n      hostConnected() {\n        element.setAttribute('role', 'presentation');\n      }\n    };\n    element.addController(controller);\n  });\n}","map":{"version":3,"names":["ARIA_PROPERTIES","ariaPropertyToAttribute","requestUpdateOnAriaChange","ctor","ariaProperty","createProperty","attribute","reflect","addInitializer","element","controller","hostConnected","setAttribute","addController"],"sources":["delegate.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {ReactiveElement} from 'lit';\n\nimport {ARIA_PROPERTIES, ariaPropertyToAttribute} from './aria.js';\n\n/**\n * Sets up a `ReactiveElement` constructor to enable updates when delegating\n * aria attributes. Elements may bind `this.aria*` properties to `aria-*`\n * attributes in their render functions.\n *\n * This function will:\n * - Call `requestUpdate()` when an aria attribute changes.\n * - Add `role=\"presentation\"` to the host.\n *\n * NOTE: The following features are not currently supported:\n * - Delegating IDREF attributes (ex: `aria-labelledby`, `aria-controls`)\n * - Delegating the `role` attribute\n *\n * @example\n * class XButton extends LitElement {\n *   static {\n *     requestUpdateOnAriaChange(XButton);\n *   }\n *\n *   protected override render() {\n *     return html`\n *       <button aria-label=${this.ariaLabel || nothing}>\n *         <slot></slot>\n *       </button>\n *     `;\n *   }\n * }\n *\n * @param ctor The `ReactiveElement` constructor to patch.\n */\nexport function requestUpdateOnAriaChange(ctor: typeof ReactiveElement) {\n  for (const ariaProperty of ARIA_PROPERTIES) {\n    ctor.createProperty(ariaProperty, {\n      attribute: ariaPropertyToAttribute(ariaProperty),\n      reflect: true,\n    });\n  }\n\n  ctor.addInitializer((element) => {\n    const controller = {\n      hostConnected() {\n        element.setAttribute('role', 'presentation');\n      },\n    };\n\n    element.addController(controller);\n  });\n}\n"],"mappings":"AAAA;;;;;AAQA,SAAQA,eAAe,EAAEC,uBAAuB,QAAO,WAAW;AAElE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,OAAM,SAAUC,yBAAyBA,CAACC,IAA4B;EACpE,KAAK,MAAMC,YAAY,IAAIJ,eAAe,EAAE;IAC1CG,IAAI,CAACE,cAAc,CAACD,YAAY,EAAE;MAChCE,SAAS,EAAEL,uBAAuB,CAACG,YAAY,CAAC;MAChDG,OAAO,EAAE;KACV,CAAC;;EAGJJ,IAAI,CAACK,cAAc,CAAEC,OAAO,IAAI;IAC9B,MAAMC,UAAU,GAAG;MACjBC,aAAaA,CAAA;QACXF,OAAO,CAACG,YAAY,CAAC,MAAM,EAAE,cAAc,CAAC;MAC9C;KACD;IAEDH,OAAO,CAACI,aAAa,CAACH,UAAU,CAAC;EACnC,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}