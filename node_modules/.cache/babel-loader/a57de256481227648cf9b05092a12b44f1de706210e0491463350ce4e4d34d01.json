{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list/mwc-list-item\";\nconst mdiCheck = \"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\";\nconst mdiContentDuplicate = \"M11,17H4A2,2 0 0,1 2,15V3A2,2 0 0,1 4,1H16V3H4V15H11V13L15,16L11,19V17M19,21V7H8V13H6V7A2,2 0 0,1 8,5H19A2,2 0 0,1 21,7V21A2,2 0 0,1 19,23H8A2,2 0 0,1 6,21V19H8V21H19Z\";\nconst mdiContentSave = \"M15,9H5V5H15M12,19A3,3 0 0,1 9,16A3,3 0 0,1 12,13A3,3 0 0,1 15,16A3,3 0 0,1 12,19M17,3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V7L17,3Z\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nconst mdiFormTextbox = \"M17,7H22V17H17V19A1,1 0 0,0 18,20H20V22H17.5C16.95,22 16,21.55 16,21C16,21.55 15.05,22 14.5,22H12V20H14A1,1 0 0,0 15,19V5A1,1 0 0,0 14,4H12V2H14.5C15.05,2 16,2.45 16,3C16,2.45 16.95,2 17.5,2H20V4H18A1,1 0 0,0 17,5V7M2,7H13V9H4V15H13V17H2V7M20,15V9H17V15H20Z\";\nconst mdiInformationOutline = \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\";\nconst mdiPlay = \"M8,5.14V19.14L19,12.14L8,5.14Z\";\nconst mdiTransitConnection = \"M15,12C15,10.7 14.16,9.6 13,9.18V6.82C14.16,6.4 15,5.3 15,4A3,3 0 0,0 12,1A3,3 0 0,0 9,4C9,5.3 9.84,6.4 11,6.82V9.19C9.84,9.6 9,10.7 9,12C9,13.3 9.84,14.4 11,14.82V17.18C9.84,17.6 9,18.7 9,20A3,3 0 0,0 12,23A3,3 0 0,0 15,20C15,18.7 14.16,17.6 13,17.18V14.82C14.16,14.4 15,13.3 15,12M12,3A1,1 0 0,1 13,4A1,1 0 0,1 12,5A1,1 0 0,1 11,4A1,1 0 0,1 12,3M12,21A1,1 0 0,1 11,20A1,1 0 0,1 12,19A1,1 0 0,1 13,20A1,1 0 0,1 12,21Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport { validateConfig } from \"../../../data/config\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { MODES, deleteScript, fetchScriptFileConfig, getScriptEditorInitData, getScriptStateConfig, isMaxMode, showScriptEditor, triggerScript } from \"../../../data/script\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"./blueprint-script-editor\";\nimport \"./manual-script-editor\";\nexport let HaScriptEditor = _decorate(null, function (_initialize, _KeyboardShortcutMixi) {\n  class HaScriptEditor extends _KeyboardShortcutMixi {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaScriptEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"scriptId\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"entityId\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"entityRegistry\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_entityId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_idError\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_dirty\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_errors\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_mode\",\n      value() {\n        return \"gui\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_readOnly\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"manual-script-editor\")],\n      key: \"_manualEditor\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_validationErrors\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne((hasID, useBluePrint, currentMode) => [{\n          name: \"alias\",\n          selector: {\n            text: {\n              type: \"text\"\n            }\n          }\n        }, {\n          name: \"icon\",\n          selector: {\n            icon: {}\n          }\n        }, ...(!hasID ? [{\n          name: \"id\",\n          selector: {\n            text: {\n              prefix: \"script.\"\n            }\n          }\n        }] : []), ...(!useBluePrint ? [{\n          name: \"mode\",\n          selector: {\n            select: {\n              mode: \"dropdown\",\n              options: MODES.map(mode => ({\n                label: this.hass.localize(`ui.panel.config.script.editor.modes.${mode}`),\n                value: mode\n              }))\n            }\n          }\n        }] : []), ...(currentMode && isMaxMode(currentMode) ? [{\n          name: \"max\",\n          required: true,\n          selector: {\n            number: {\n              mode: \"box\",\n              min: 1,\n              max: Infinity\n            }\n          }\n        }] : [])]);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_config;\n        if (!this._config) {\n          return nothing;\n        }\n        const stateObj = this._entityId ? this.hass.states[this._entityId] : undefined;\n        const useBlueprint = (\"use_blueprint\" in this._config);\n        const schema = this._schema(!!this.scriptId, useBlueprint, this._config.mode);\n        const data = {\n          ...(!this._config.mode && !useBlueprint && {\n            mode: MODES[0]\n          }),\n          icon: undefined,\n          max: this._config.mode && isMaxMode(this._config.mode) ? 10 : undefined,\n          ...this._config,\n          id: this._entityId\n        };\n        return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${!((_this$_config = this._config) !== null && _this$_config !== void 0 && _this$_config.alias) ? \"\" : this._config.alias}\n      >\n        ${this.scriptId && !this.narrow ? html`\n              <mwc-button @click=${this._showTrace} slot=\"toolbar-icon\">\n                ${this.hass.localize(\"ui.panel.config.script.editor.show_trace\")}\n              </mwc-button>\n            ` : \"\"}\n        <ha-button-menu slot=\"toolbar-icon\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptId}\n            @click=${this._showInfo}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.editor.show_info\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiInformationOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptId}\n            @click=${this._runScript}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.run_script\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiPlay}></ha-svg-icon>\n          </mwc-list-item>\n\n          ${!useBlueprint && !(\"fields\" in this._config) ? html`\n                <mwc-list-item graphic=\"icon\" @click=${this._addFields}>\n                  ${this.hass.localize(\"ui.panel.config.script.editor.field.add_fields\")}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiFormTextbox}\n                  ></ha-svg-icon>\n                </mwc-list-item>\n              ` : nothing}\n          ${this.scriptId && this.narrow ? html`\n                <a href=\"/config/script/trace/${this.scriptId}\">\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\"ui.panel.config.script.editor.show_trace\")}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiTransitConnection}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </a>\n              ` : \"\"}\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item graphic=\"icon\" @click=${this._switchUiMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\" ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                ` : ``}\n          </mwc-list-item>\n          <mwc-list-item graphic=\"icon\" @click=${this._switchYamlMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\" ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                ` : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            .disabled=${!this._readOnly && !this.scriptId}\n            graphic=\"icon\"\n            @click=${this._duplicate}\n          >\n            ${this.hass.localize(this._readOnly ? \"ui.panel.config.script.editor.migrate\" : \"ui.panel.config.script.editor.duplicate\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${this._readOnly || !this.scriptId}\n            class=${classMap({\n          warning: Boolean(this.scriptId)\n        })}\n            graphic=\"icon\"\n            @click=${this._deleteConfirm}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.delete\")}\n            <ha-svg-icon\n              class=${classMap({\n          warning: Boolean(this.scriptId)\n        })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n        <div\n          class=\"content ${classMap({\n          \"yaml-mode\": this._mode === \"yaml\"\n        })}\"\n        >\n          ${this._errors || (stateObj === null || stateObj === void 0 ? void 0 : stateObj.state) === UNAVAILABLE ? html`\n                <ha-alert\n                  alert-type=\"error\"\n                  .title=${(stateObj === null || stateObj === void 0 ? void 0 : stateObj.state) === UNAVAILABLE ? this.hass.localize(\"ui.panel.config.script.editor.unavailable\") : undefined}\n                >\n                  ${this._errors || this._validationErrors}\n                </ha-alert>\n              ` : \"\"}\n          ${this._readOnly ? html`<ha-alert alert-type=\"warning\">\n                ${this.hass.localize(\"ui.panel.config.script.editor.read_only\")}\n                <mwc-button slot=\"action\" @click=${this._duplicate}>\n                  ${this.hass.localize(\"ui.panel.config.script.editor.migrate\")}\n                </mwc-button>\n              </ha-alert>` : \"\"}\n          ${this._mode === \"gui\" ? html`\n                <div\n                  class=${classMap({\n          rtl: computeRTL(this.hass)\n        })}\n                >\n                  ${this._config ? html`\n                        <div class=\"config-container\">\n                          <ha-card outlined>\n                            <div class=\"card-content\">\n                              <ha-form\n                                .schema=${schema}\n                                .data=${data}\n                                .hass=${this.hass}\n                                .disabled=${this._readOnly}\n                                .computeLabel=${this._computeLabelCallback}\n                                .computeHelper=${this._computeHelperCallback}\n                                @value-changed=${this._valueChanged}\n                              ></ha-form>\n                            </div>\n                          </ha-card>\n                        </div>\n\n                        ${useBlueprint ? html`\n                              <blueprint-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                .disabled=${this._readOnly}\n                                @duplicate=${this._duplicate}\n                                @value-changed=${this._configChanged}\n                              ></blueprint-script-editor>\n                            ` : html`\n                              <manual-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                .disabled=${this._readOnly}\n                                @duplicate=${this._duplicate}\n                                @value-changed=${this._configChanged}\n                              ></manual-script-editor>\n                            `}\n                      ` : \"\"}\n                </div>\n              ` : this._mode === \"yaml\" ? html` <ha-yaml-editor\n                  copyClipboard\n                  .hass=${this.hass}\n                  .defaultValue=${this._preprocessYaml()}\n                  .readOnly=${this._readOnly}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>` : nothing}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\"ui.panel.config.script.editor.save_script\")}\n          extended\n          @click=${this._saveScript}\n          class=${classMap({\n          dirty: this._dirty\n        })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HaScriptEditor.prototype), \"updated\", this).call(this, changedProps);\n        const oldScript = changedProps.get(\"scriptId\");\n        if (changedProps.has(\"scriptId\") && this.scriptId && !this.entityId && this.hass && (\n        // Only refresh config if we picked a new script. If same ID, don't fetch it.\n        !oldScript || oldScript !== this.scriptId)) {\n          fetchScriptFileConfig(this.hass, this.scriptId).then(config => {\n            this._dirty = false;\n            this._readOnly = false;\n            this._config = this._normalizeConfig(config);\n            const entity = this.entityRegistry.find(ent => ent.platform === \"script\" && ent.unique_id === this.scriptId);\n            this._entityId = entity === null || entity === void 0 ? void 0 : entity.entity_id;\n            this._checkValidation();\n          }, resp => {\n            const entity = this.entityRegistry.find(ent => ent.platform === \"script\" && ent.unique_id === this.scriptId);\n            if (entity) {\n              navigate(`/config/script/show/${entity.entity_id}`, {\n                replace: true\n              });\n              return;\n            }\n            alert(resp.status_code === 404 ? this.hass.localize(\"ui.panel.config.script.editor.load_error_not_editable\") : this.hass.localize(\"ui.panel.config.script.editor.load_error_unknown\", {\n              err_no: resp.status_code || resp.code\n            }));\n            history.back();\n          });\n        }\n        if (changedProps.has(\"scriptId\") && !this.scriptId && this.hass) {\n          const initData = getScriptEditorInitData();\n          this._dirty = !!initData;\n          const baseConfig = {\n            alias: this.hass.localize(\"ui.panel.config.script.editor.default_name\")\n          };\n          if (!initData || !(\"use_blueprint\" in initData)) {\n            baseConfig.sequence = [];\n          }\n          this._config = {\n            ...baseConfig,\n            ...initData\n          };\n          this._readOnly = false;\n        }\n        if (changedProps.has(\"entityId\") && this.entityId) {\n          getScriptStateConfig(this.hass, this.entityId).then(c => {\n            this._config = this._normalizeConfig(c.config);\n            this._checkValidation();\n          });\n          const regEntry = this.entityRegistry.find(ent => ent.entity_id === this.entityId);\n          if (regEntry !== null && regEntry !== void 0 && regEntry.unique_id) {\n            this.scriptId = regEntry.unique_id;\n          }\n          this._entityId = this.entityId;\n          this._dirty = false;\n          this._readOnly = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_normalizeConfig\",\n      value: function _normalizeConfig(config) {\n        // Normalize data: ensure sequence is a list\n        // Happens when people copy paste their scripts into the config\n        const value = config.sequence;\n        if (value && !Array.isArray(value)) {\n          config.sequence = [value];\n        }\n        return config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_checkValidation\",\n      value: async function _checkValidation() {\n        this._validationErrors = undefined;\n        if (!this._entityId || !this._config) {\n          return;\n        }\n        const stateObj = this.hass.states[this._entityId];\n        if ((stateObj === null || stateObj === void 0 ? void 0 : stateObj.state) !== UNAVAILABLE) {\n          return;\n        }\n        const validation = await validateConfig(this.hass, {\n          action: this._config.sequence\n        });\n        this._validationErrors = Object.entries(validation).map(([key, value]) => value.valid ? \"\" : html`${this.hass.localize(`ui.panel.config.automation.editor.${key}s.name`)}:\n            ${value.error}<br />`);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value() {\n        return (schema, data) => {\n          switch (schema.name) {\n            case \"mode\":\n              return this.hass.localize(\"ui.panel.config.script.editor.modes.label\");\n            case \"max\":\n              // Mode must be one of max modes per schema definition above\n              return this.hass.localize(`ui.panel.config.script.editor.max.${data.mode}`);\n            default:\n              return this.hass.localize(`ui.panel.config.script.editor.${schema.name}`);\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeHelperCallback\",\n      value() {\n        return schema => {\n          if (schema.name === \"mode\") {\n            return html`\n        <a\n          style=\"color: var(--secondary-text-color)\"\n          href=${documentationUrl(this.hass, \"/integrations/script/#script-modes\")}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >${this.hass.localize(\"ui.panel.config.script.editor.modes.learn_more\")}</a\n        >\n      `;\n          }\n          return undefined;\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showInfo\",\n      value: async function _showInfo() {\n        if (!this.scriptId) {\n          return;\n        }\n        const entity = this.entityRegistry.find(entry => entry.unique_id === this.scriptId);\n        if (!entity) {\n          return;\n        }\n        fireEvent(this, \"hass-more-info\", {\n          entityId: entity.entity_id\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showTrace\",\n      value: async function _showTrace() {\n        if (this.scriptId) {\n          const result = await this.confirmUnsavedChanged();\n          if (result) {\n            navigate(`/config/script/trace/${this.scriptId}`);\n          }\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_runScript\",\n      value: async function _runScript(ev) {\n        ev.stopPropagation();\n        await triggerScript(this.hass, this.scriptId);\n        showToast(this, {\n          message: this.hass.localize(\"ui.notification_toast.triggered\", {\n            name: this._config.alias\n          })\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeEntityIdFromAlias\",\n      value: function _computeEntityIdFromAlias(alias) {\n        const aliasSlugify = slugify(alias);\n        let id = aliasSlugify;\n        let i = 2;\n        while (this.hass.states[`script.${id}`]) {\n          id = `${aliasSlugify}_${i}`;\n          i++;\n        }\n        return id;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setEntityId\",\n      value: function _setEntityId(id) {\n        this._entityId = id;\n        if (this.hass.states[`script.${this._entityId}`]) {\n          this._idError = true;\n        } else {\n          this._idError = false;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updateEntityId\",\n      value: function updateEntityId(newId, newAlias) {\n        var _this$_config$alias, _this$_config2, _this$_entityId;\n        const currentAlias = (_this$_config$alias = (_this$_config2 = this._config) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.alias) !== null && _this$_config$alias !== void 0 ? _this$_config$alias : \"\";\n        const currentEntityId = (_this$_entityId = this._entityId) !== null && _this$_entityId !== void 0 ? _this$_entityId : \"\";\n        if (newId !== this._entityId) {\n          this._setEntityId(newId || undefined);\n          return;\n        }\n        const currentComputedEntity = this._computeEntityIdFromAlias(currentAlias);\n        if (currentComputedEntity === currentEntityId || !this._entityId) {\n          const newComputedId = newAlias ? this._computeEntityIdFromAlias(newAlias) : undefined;\n          this._setEntityId(newComputedId);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addFields\",\n      value: function _addFields() {\n        var _this$_manualEditor;\n        if (\"fields\" in this._config) {\n          return;\n        }\n        (_this$_manualEditor = this._manualEditor) === null || _this$_manualEditor === void 0 || _this$_manualEditor.addFields();\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        var _values$alias;\n        ev.stopPropagation();\n        if (this._readOnly) {\n          return;\n        }\n        this._errors = undefined;\n        const values = ev.detail.value;\n        let changed = false;\n        const newValues = {\n          alias: (_values$alias = values.alias) !== null && _values$alias !== void 0 ? _values$alias : \"\",\n          icon: values.icon,\n          mode: values.mode,\n          max: isMaxMode(values.mode) ? values.max : undefined\n        };\n        if (!this.scriptId) {\n          this.updateEntityId(values.id, values.alias);\n        }\n        for (const key of Object.keys(newValues)) {\n          const value = newValues[key];\n          if (value === this._config[key]) {\n            continue;\n          }\n          if (value === undefined) {\n            const newConfig = {\n              ...this._config\n            };\n            delete newConfig[key];\n            this._config = newConfig;\n          } else {\n            this._config = {\n              ...this._config,\n              [key]: value\n            };\n          }\n          changed = true;\n        }\n        if (changed) {\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_configChanged\",\n      value: function _configChanged(ev) {\n        this._config = ev.detail.value;\n        this._errors = undefined;\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_preprocessYaml\",\n      value: function _preprocessYaml() {\n        return this._config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_yamlChanged\",\n      value: function _yamlChanged(ev) {\n        ev.stopPropagation();\n        if (!ev.detail.isValid) {\n          return;\n        }\n        this._config = ev.detail.value;\n        this._errors = undefined;\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"confirmUnsavedChanged\",\n      value: async function confirmUnsavedChanged() {\n        if (this._dirty) {\n          return showConfirmationDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.automation.editor.unsaved_confirm_title\"),\n            text: this.hass.localize(\"ui.panel.config.automation.editor.unsaved_confirm_text\"),\n            confirmText: this.hass.localize(\"ui.common.leave\"),\n            dismissText: this.hass.localize(\"ui.common.stay\"),\n            destructive: true\n          });\n        }\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_backTapped\",\n      value() {\n        return async () => {\n          const result = await this.confirmUnsavedChanged();\n          if (result) {\n            afterNextRender(() => history.back());\n          }\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_duplicate\",\n      value: async function _duplicate() {\n        const result = this._readOnly ? await showConfirmationDialog(this, {\n          title: \"Migrate script?\",\n          text: \"You can migrate this script, so it can be edited from the UI. After it is migrated and you have saved it, you will have to manually delete your old script from your configuration. Do you want to migrate this script?\"\n        }) : await this.confirmUnsavedChanged();\n        if (result) {\n          var _this$_config3, _this$_config4;\n          this._entityId = undefined;\n          showScriptEditor({\n            ...this._config,\n            alias: this._readOnly ? (_this$_config3 = this._config) === null || _this$_config3 === void 0 ? void 0 : _this$_config3.alias : `${(_this$_config4 = this._config) === null || _this$_config4 === void 0 ? void 0 : _this$_config4.alias} (${this.hass.localize(\"ui.panel.config.script.picker.duplicate\")})`\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteConfirm\",\n      value: async function _deleteConfirm() {\n        var _this$_config5;\n        showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.script.editor.delete_confirm_title\"),\n          text: this.hass.localize(\"ui.panel.config.script.editor.delete_confirm_text\", {\n            name: (_this$_config5 = this._config) === null || _this$_config5 === void 0 ? void 0 : _this$_config5.alias\n          }),\n          confirmText: this.hass.localize(\"ui.common.delete\"),\n          dismissText: this.hass.localize(\"ui.common.cancel\"),\n          confirm: () => this._delete(),\n          destructive: true\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_delete\",\n      value: async function _delete() {\n        await deleteScript(this.hass, this.scriptId);\n        history.back();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_switchUiMode\",\n      value: function _switchUiMode() {\n        this._mode = \"gui\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_switchYamlMode\",\n      value: function _switchYamlMode() {\n        this._mode = \"yaml\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_saveScript\",\n      value: async function _saveScript() {\n        if (this._idError) {\n          showToast(this, {\n            message: this.hass.localize(\"ui.panel.config.script.editor.id_already_exists_save_error\"),\n            dismissable: false,\n            duration: 0,\n            action: {\n              action: () => {},\n              text: this.hass.localize(\"ui.dialogs.generic.ok\")\n            }\n          });\n          return;\n        }\n        const id = this.scriptId || this._entityId || Date.now();\n        try {\n          await this.hass.callApi(\"POST\", \"config/script/config/\" + id, this._config);\n        } catch (errors) {\n          this._errors = errors.body.message || errors.error || errors.body;\n          showToast(this, {\n            message: errors.body.message || errors.error || errors.body\n          });\n          throw errors;\n        }\n        this._dirty = false;\n        if (!this.scriptId) {\n          navigate(`/config/script/edit/${id}`, {\n            replace: true\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleKeyboardSave\",\n      value: function handleKeyboardSave() {\n        this._saveScript();\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        ha-card {\n          overflow: hidden;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        .config-container,\n        manual-script-editor,\n        blueprint-script-editor {\n          margin: 0 auto;\n          max-width: 1040px;\n          padding: 28px 20px 0;\n        }\n        .config-container ha-alert {\n          margin-bottom: 16px;\n          display: block;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --actions-border-radius: 0;\n          --code-mirror-height: 100%;\n          min-height: 0;\n          display: flex;\n          flex-direction: column;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        .header {\n          display: flex;\n          margin: 16px 0;\n          align-items: center;\n        }\n        .header .name {\n          font-size: 20px;\n          font-weight: 400;\n          flex: 1;\n        }\n        .header a {\n          color: var(--secondary-text-color);\n        }\n        ha-button-menu a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n      `];\n      }\n    }]\n  };\n}, KeyboardShortcutMixin(LitElement));\ncustomElements.define(\"ha-script-editor\", HaScriptEditor);","map":{"version":3,"names":["mdiCheck","mdiContentDuplicate","mdiContentSave","mdiDelete","mdiDotsVertical","mdiFormTextbox","mdiInformationOutline","mdiPlay","mdiTransitConnection","LitElement","css","html","nothing","property","query","state","classMap","memoizeOne","fireEvent","navigate","slugify","computeRTL","afterNextRender","validateConfig","UNAVAILABLE","MODES","deleteScript","fetchScriptFileConfig","getScriptEditorInitData","getScriptStateConfig","isMaxMode","showScriptEditor","triggerScript","showConfirmationDialog","KeyboardShortcutMixin","haStyle","documentationUrl","showToast","HaScriptEditor","_decorate","_initialize","_KeyboardShortcutMixi","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","hasID","useBluePrint","currentMode","name","selector","text","icon","prefix","select","mode","options","map","label","hass","localize","required","number","min","max","Infinity","render","_this$_config","_config","stateObj","_entityId","states","undefined","useBlueprint","schema","_schema","scriptId","data","id","narrow","route","_backTapped","alias","_showTrace","_showInfo","_runScript","_addFields","_switchUiMode","_mode","_switchYamlMode","_readOnly","_duplicate","warning","_deleteConfirm","_errors","_validationErrors","rtl","_computeLabelCallback","_computeHelperCallback","_valueChanged","isWide","_configChanged","_preprocessYaml","_yamlChanged","_saveScript","dirty","_dirty","updated","changedProps","_get","_getPrototypeOf","prototype","call","oldScript","get","has","entityId","then","config","_normalizeConfig","entity","entityRegistry","find","ent","platform","unique_id","entity_id","_checkValidation","resp","replace","alert","status_code","err_no","code","history","back","initData","baseConfig","sequence","c","regEntry","Array","isArray","validation","action","Object","entries","valid","error","entry","result","confirmUnsavedChanged","ev","stopPropagation","message","_computeEntityIdFromAlias","aliasSlugify","i","_setEntityId","_idError","updateEntityId","newId","newAlias","_this$_config$alias","_this$_config2","_this$_entityId","currentAlias","currentEntityId","currentComputedEntity","newComputedId","_this$_manualEditor","_manualEditor","addFields","_values$alias","values","detail","changed","newValues","keys","newConfig","isValid","title","confirmText","dismissText","destructive","_this$_config3","_this$_config4","_this$_config5","confirm","_delete","dismissable","duration","Date","now","callApi","errors","body","handleKeyboardSave","static","styles","customElements","define"],"sources":["/workspaces/frontend/src/panels/config/script/ha-script-editor.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCheck,\n  mdiContentDuplicate,\n  mdiContentSave,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiFormTextbox,\n  mdiInformationOutline,\n  mdiPlay,\n  mdiTransitConnection,\n} from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { navigate } from \"../../../common/navigate\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { computeRTL } from \"../../../common/util/compute_rtl\";\nimport { afterNextRender } from \"../../../common/util/render-status\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-fab\";\nimport type {\n  HaFormDataContainer,\n  SchemaUnion,\n} from \"../../../components/ha-form/types\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/ha-yaml-editor\";\nimport { validateConfig } from \"../../../data/config\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { EntityRegistryEntry } from \"../../../data/entity_registry\";\nimport {\n  MODES,\n  MODES_MAX,\n  ScriptConfig,\n  deleteScript,\n  fetchScriptFileConfig,\n  getScriptEditorInitData,\n  getScriptStateConfig,\n  isMaxMode,\n  showScriptEditor,\n  triggerScript,\n} from \"../../../data/script\";\nimport { showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-subpage\";\nimport { KeyboardShortcutMixin } from \"../../../mixins/keyboard-shortcut-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { Entries, HomeAssistant, Route } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { showToast } from \"../../../util/toast\";\nimport \"./blueprint-script-editor\";\nimport \"./manual-script-editor\";\nimport type { HaManualScriptEditor } from \"./manual-script-editor\";\n\nexport class HaScriptEditor extends KeyboardShortcutMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public scriptId: string | null = null;\n\n  @property() public entityId: string | null = null;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public entityRegistry!: EntityRegistryEntry[];\n\n  @state() private _config?: ScriptConfig;\n\n  @state() private _entityId?: string;\n\n  @state() private _idError = false;\n\n  @state() private _dirty = false;\n\n  @state() private _errors?: string;\n\n  @state() private _mode: \"gui\" | \"yaml\" = \"gui\";\n\n  @state() private _readOnly = false;\n\n  @query(\"manual-script-editor\")\n  private _manualEditor?: HaManualScriptEditor;\n\n  @state() private _validationErrors?: (string | TemplateResult)[];\n\n  private _schema = memoizeOne(\n    (\n      hasID: boolean,\n      useBluePrint?: boolean,\n      currentMode?: (typeof MODES)[number]\n    ) =>\n      [\n        {\n          name: \"alias\",\n          selector: {\n            text: {\n              type: \"text\",\n            },\n          },\n        },\n        {\n          name: \"icon\",\n          selector: {\n            icon: {},\n          },\n        },\n        ...(!hasID\n          ? ([\n              {\n                name: \"id\",\n                selector: {\n                  text: {\n                    prefix: \"script.\",\n                  },\n                },\n              },\n            ] as const)\n          : []),\n        ...(!useBluePrint\n          ? ([\n              {\n                name: \"mode\",\n                selector: {\n                  select: {\n                    mode: \"dropdown\",\n                    options: MODES.map((mode) => ({\n                      label: this.hass.localize(\n                        `ui.panel.config.script.editor.modes.${mode}`\n                      ),\n                      value: mode,\n                    })),\n                  },\n                },\n              },\n            ] as const)\n          : []),\n        ...(currentMode && isMaxMode(currentMode)\n          ? ([\n              {\n                name: \"max\",\n                required: true,\n                selector: {\n                  number: { mode: \"box\", min: 1, max: Infinity },\n                },\n              },\n            ] as const)\n          : []),\n      ] as const\n  );\n\n  protected render() {\n    if (!this._config) {\n      return nothing;\n    }\n\n    const stateObj = this._entityId\n      ? this.hass.states[this._entityId]\n      : undefined;\n\n    const useBlueprint = \"use_blueprint\" in this._config;\n\n    const schema = this._schema(\n      !!this.scriptId,\n      useBlueprint,\n      this._config.mode\n    );\n\n    const data = {\n      ...(!this._config.mode && !useBlueprint && { mode: MODES[0] }),\n      icon: undefined,\n      max: this._config.mode && isMaxMode(this._config.mode) ? 10 : undefined,\n      ...this._config,\n      id: this._entityId,\n    };\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .backCallback=${this._backTapped}\n        .header=${!this._config?.alias ? \"\" : this._config.alias}\n      >\n        ${this.scriptId && !this.narrow\n          ? html`\n              <mwc-button @click=${this._showTrace} slot=\"toolbar-icon\">\n                ${this.hass.localize(\n                  \"ui.panel.config.script.editor.show_trace\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <ha-button-menu slot=\"toolbar-icon\">\n          <ha-icon-button\n            slot=\"trigger\"\n            .label=${this.hass.localize(\"ui.common.menu\")}\n            .path=${mdiDotsVertical}\n          ></ha-icon-button>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptId}\n            @click=${this._showInfo}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.editor.show_info\")}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiInformationOutline}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            graphic=\"icon\"\n            .disabled=${!this.scriptId}\n            @click=${this._runScript}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.run_script\")}\n            <ha-svg-icon slot=\"graphic\" .path=${mdiPlay}></ha-svg-icon>\n          </mwc-list-item>\n\n          ${!useBlueprint && !(\"fields\" in this._config)\n            ? html`\n                <mwc-list-item graphic=\"icon\" @click=${this._addFields}>\n                  ${this.hass.localize(\n                    \"ui.panel.config.script.editor.field.add_fields\"\n                  )}\n                  <ha-svg-icon\n                    slot=\"graphic\"\n                    .path=${mdiFormTextbox}\n                  ></ha-svg-icon>\n                </mwc-list-item>\n              `\n            : nothing}\n          ${this.scriptId && this.narrow\n            ? html`\n                <a href=\"/config/script/trace/${this.scriptId}\">\n                  <mwc-list-item graphic=\"icon\">\n                    ${this.hass.localize(\n                      \"ui.panel.config.script.editor.show_trace\"\n                    )}\n                    <ha-svg-icon\n                      slot=\"graphic\"\n                      .path=${mdiTransitConnection}\n                    ></ha-svg-icon>\n                  </mwc-list-item>\n                </a>\n              `\n            : \"\"}\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item graphic=\"icon\" @click=${this._switchUiMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_ui\")}\n            ${this._mode === \"gui\"\n              ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                `\n              : ``}\n          </mwc-list-item>\n          <mwc-list-item graphic=\"icon\" @click=${this._switchYamlMode}>\n            ${this.hass.localize(\"ui.panel.config.automation.editor.edit_yaml\")}\n            ${this._mode === \"yaml\"\n              ? html`\n                  <ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>\n                `\n              : ``}\n          </mwc-list-item>\n\n          <li divider role=\"separator\"></li>\n\n          <mwc-list-item\n            .disabled=${!this._readOnly && !this.scriptId}\n            graphic=\"icon\"\n            @click=${this._duplicate}\n          >\n            ${this.hass.localize(\n              this._readOnly\n                ? \"ui.panel.config.script.editor.migrate\"\n                : \"ui.panel.config.script.editor.duplicate\"\n            )}\n            <ha-svg-icon\n              slot=\"graphic\"\n              .path=${mdiContentDuplicate}\n            ></ha-svg-icon>\n          </mwc-list-item>\n\n          <mwc-list-item\n            .disabled=${this._readOnly || !this.scriptId}\n            class=${classMap({ warning: Boolean(this.scriptId) })}\n            graphic=\"icon\"\n            @click=${this._deleteConfirm}\n          >\n            ${this.hass.localize(\"ui.panel.config.script.picker.delete\")}\n            <ha-svg-icon\n              class=${classMap({ warning: Boolean(this.scriptId) })}\n              slot=\"graphic\"\n              .path=${mdiDelete}\n            >\n            </ha-svg-icon>\n          </mwc-list-item>\n        </ha-button-menu>\n        <div\n          class=\"content ${classMap({\n            \"yaml-mode\": this._mode === \"yaml\",\n          })}\"\n        >\n          ${this._errors || stateObj?.state === UNAVAILABLE\n            ? html`\n                <ha-alert\n                  alert-type=\"error\"\n                  .title=${stateObj?.state === UNAVAILABLE\n                    ? this.hass.localize(\n                        \"ui.panel.config.script.editor.unavailable\"\n                      )\n                    : undefined}\n                >\n                  ${this._errors || this._validationErrors}\n                </ha-alert>\n              `\n            : \"\"}\n          ${this._readOnly\n            ? html`<ha-alert alert-type=\"warning\">\n                ${this.hass.localize(\"ui.panel.config.script.editor.read_only\")}\n                <mwc-button slot=\"action\" @click=${this._duplicate}>\n                  ${this.hass.localize(\"ui.panel.config.script.editor.migrate\")}\n                </mwc-button>\n              </ha-alert>`\n            : \"\"}\n          ${this._mode === \"gui\"\n            ? html`\n                <div\n                  class=${classMap({\n                    rtl: computeRTL(this.hass),\n                  })}\n                >\n                  ${this._config\n                    ? html`\n                        <div class=\"config-container\">\n                          <ha-card outlined>\n                            <div class=\"card-content\">\n                              <ha-form\n                                .schema=${schema}\n                                .data=${data}\n                                .hass=${this.hass}\n                                .disabled=${this._readOnly}\n                                .computeLabel=${this._computeLabelCallback}\n                                .computeHelper=${this._computeHelperCallback}\n                                @value-changed=${this._valueChanged}\n                              ></ha-form>\n                            </div>\n                          </ha-card>\n                        </div>\n\n                        ${useBlueprint\n                          ? html`\n                              <blueprint-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                .disabled=${this._readOnly}\n                                @duplicate=${this._duplicate}\n                                @value-changed=${this._configChanged}\n                              ></blueprint-script-editor>\n                            `\n                          : html`\n                              <manual-script-editor\n                                .hass=${this.hass}\n                                .narrow=${this.narrow}\n                                .isWide=${this.isWide}\n                                .config=${this._config}\n                                .disabled=${this._readOnly}\n                                @duplicate=${this._duplicate}\n                                @value-changed=${this._configChanged}\n                              ></manual-script-editor>\n                            `}\n                      `\n                    : \"\"}\n                </div>\n              `\n            : this._mode === \"yaml\"\n              ? html` <ha-yaml-editor\n                  copyClipboard\n                  .hass=${this.hass}\n                  .defaultValue=${this._preprocessYaml()}\n                  .readOnly=${this._readOnly}\n                  @value-changed=${this._yamlChanged}\n                ></ha-yaml-editor>`\n              : nothing}\n        </div>\n        <ha-fab\n          slot=\"fab\"\n          .label=${this.hass.localize(\n            \"ui.panel.config.script.editor.save_script\"\n          )}\n          extended\n          @click=${this._saveScript}\n          class=${classMap({\n            dirty: this._dirty,\n          })}\n        >\n          <ha-svg-icon slot=\"icon\" .path=${mdiContentSave}></ha-svg-icon>\n        </ha-fab>\n      </hass-subpage>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    const oldScript = changedProps.get(\"scriptId\");\n    if (\n      changedProps.has(\"scriptId\") &&\n      this.scriptId &&\n      !this.entityId &&\n      this.hass &&\n      // Only refresh config if we picked a new script. If same ID, don't fetch it.\n      (!oldScript || oldScript !== this.scriptId)\n    ) {\n      fetchScriptFileConfig(this.hass, this.scriptId).then(\n        (config) => {\n          this._dirty = false;\n          this._readOnly = false;\n          this._config = this._normalizeConfig(config);\n          const entity = this.entityRegistry.find(\n            (ent) =>\n              ent.platform === \"script\" && ent.unique_id === this.scriptId\n          );\n          this._entityId = entity?.entity_id;\n          this._checkValidation();\n        },\n        (resp) => {\n          const entity = this.entityRegistry.find(\n            (ent) =>\n              ent.platform === \"script\" && ent.unique_id === this.scriptId\n          );\n          if (entity) {\n            navigate(`/config/script/show/${entity.entity_id}`, {\n              replace: true,\n            });\n            return;\n          }\n          alert(\n            resp.status_code === 404\n              ? this.hass.localize(\n                  \"ui.panel.config.script.editor.load_error_not_editable\"\n                )\n              : this.hass.localize(\n                  \"ui.panel.config.script.editor.load_error_unknown\",\n                  { err_no: resp.status_code || resp.code }\n                )\n          );\n          history.back();\n        }\n      );\n    }\n\n    if (changedProps.has(\"scriptId\") && !this.scriptId && this.hass) {\n      const initData = getScriptEditorInitData();\n      this._dirty = !!initData;\n      const baseConfig: Partial<ScriptConfig> = {\n        alias: this.hass.localize(\"ui.panel.config.script.editor.default_name\"),\n      };\n      if (!initData || !(\"use_blueprint\" in initData)) {\n        baseConfig.sequence = [];\n      }\n      this._config = {\n        ...baseConfig,\n        ...initData,\n      } as ScriptConfig;\n      this._readOnly = false;\n    }\n\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      getScriptStateConfig(this.hass, this.entityId).then((c) => {\n        this._config = this._normalizeConfig(c.config);\n        this._checkValidation();\n      });\n      const regEntry = this.entityRegistry.find(\n        (ent) => ent.entity_id === this.entityId\n      );\n      if (regEntry?.unique_id) {\n        this.scriptId = regEntry.unique_id;\n      }\n      this._entityId = this.entityId;\n      this._dirty = false;\n      this._readOnly = true;\n    }\n  }\n\n  private _normalizeConfig(config: ScriptConfig): ScriptConfig {\n    // Normalize data: ensure sequence is a list\n    // Happens when people copy paste their scripts into the config\n    const value = config.sequence;\n    if (value && !Array.isArray(value)) {\n      config.sequence = [value];\n    }\n    return config;\n  }\n\n  private async _checkValidation() {\n    this._validationErrors = undefined;\n    if (!this._entityId || !this._config) {\n      return;\n    }\n    const stateObj = this.hass.states[this._entityId];\n    if (stateObj?.state !== UNAVAILABLE) {\n      return;\n    }\n    const validation = await validateConfig(this.hass, {\n      action: this._config.sequence,\n    });\n    this._validationErrors = (\n      Object.entries(validation) as Entries<typeof validation>\n    ).map(([key, value]) =>\n      value.valid\n        ? \"\"\n        : html`${this.hass.localize(\n              `ui.panel.config.automation.editor.${key}s.name`\n            )}:\n            ${value.error}<br />`\n    );\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>,\n    data: HaFormDataContainer\n  ): string => {\n    switch (schema.name) {\n      case \"mode\":\n        return this.hass.localize(\"ui.panel.config.script.editor.modes.label\");\n      case \"max\":\n        // Mode must be one of max modes per schema definition above\n        return this.hass.localize(\n          `ui.panel.config.script.editor.max.${\n            data.mode as (typeof MODES_MAX)[number]\n          }`\n        );\n      default:\n        return this.hass.localize(\n          `ui.panel.config.script.editor.${schema.name}`\n        );\n    }\n  };\n\n  private _computeHelperCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ): string | undefined | TemplateResult => {\n    if (schema.name === \"mode\") {\n      return html`\n        <a\n          style=\"color: var(--secondary-text-color)\"\n          href=${documentationUrl(\n            this.hass,\n            \"/integrations/script/#script-modes\"\n          )}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n          >${this.hass.localize(\n            \"ui.panel.config.script.editor.modes.learn_more\"\n          )}</a\n        >\n      `;\n    }\n    return undefined;\n  };\n\n  private async _showInfo() {\n    if (!this.scriptId) {\n      return;\n    }\n    const entity = this.entityRegistry.find(\n      (entry) => entry.unique_id === this.scriptId\n    );\n    if (!entity) {\n      return;\n    }\n    fireEvent(this, \"hass-more-info\", { entityId: entity.entity_id });\n  }\n\n  private async _showTrace() {\n    if (this.scriptId) {\n      const result = await this.confirmUnsavedChanged();\n      if (result) {\n        navigate(`/config/script/trace/${this.scriptId}`);\n      }\n    }\n  }\n\n  private async _runScript(ev: CustomEvent) {\n    ev.stopPropagation();\n    await triggerScript(this.hass, this.scriptId!);\n    showToast(this, {\n      message: this.hass.localize(\"ui.notification_toast.triggered\", {\n        name: this._config!.alias,\n      }),\n    });\n  }\n\n  private _computeEntityIdFromAlias(alias: string) {\n    const aliasSlugify = slugify(alias);\n    let id = aliasSlugify;\n    let i = 2;\n    while (this.hass.states[`script.${id}`]) {\n      id = `${aliasSlugify}_${i}`;\n      i++;\n    }\n    return id;\n  }\n\n  private _setEntityId(id?: string) {\n    this._entityId = id;\n    if (this.hass.states[`script.${this._entityId}`]) {\n      this._idError = true;\n    } else {\n      this._idError = false;\n    }\n  }\n\n  private updateEntityId(\n    newId: string | undefined,\n    newAlias: string | undefined\n  ) {\n    const currentAlias = this._config?.alias ?? \"\";\n    const currentEntityId = this._entityId ?? \"\";\n\n    if (newId !== this._entityId) {\n      this._setEntityId(newId || undefined);\n      return;\n    }\n\n    const currentComputedEntity = this._computeEntityIdFromAlias(currentAlias);\n\n    if (currentComputedEntity === currentEntityId || !this._entityId) {\n      const newComputedId = newAlias\n        ? this._computeEntityIdFromAlias(newAlias)\n        : undefined;\n\n      this._setEntityId(newComputedId);\n    }\n  }\n\n  private _addFields() {\n    if (\"fields\" in this._config!) {\n      return;\n    }\n    this._manualEditor?.addFields();\n    this._dirty = true;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (this._readOnly) {\n      return;\n    }\n    this._errors = undefined;\n    const values = ev.detail.value as any;\n\n    let changed = false;\n    const newValues: Omit<ScriptConfig, \"sequence\"> = {\n      alias: values.alias ?? \"\",\n      icon: values.icon,\n      mode: values.mode,\n      max: isMaxMode(values.mode) ? values.max : undefined,\n    };\n\n    if (!this.scriptId) {\n      this.updateEntityId(values.id, values.alias);\n    }\n\n    for (const key of Object.keys(newValues)) {\n      const value = newValues[key];\n\n      if (value === this._config![key]) {\n        continue;\n      }\n      if (value === undefined) {\n        const newConfig = { ...this._config! };\n        delete newConfig![key];\n        this._config = newConfig;\n      } else {\n        this._config = { ...this._config!, [key]: value };\n      }\n      changed = true;\n    }\n\n    if (changed) {\n      this._dirty = true;\n    }\n  }\n\n  private _configChanged(ev) {\n    this._config = ev.detail.value;\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private _preprocessYaml() {\n    return this._config;\n  }\n\n  private _yamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    this._config = ev.detail.value;\n    this._errors = undefined;\n    this._dirty = true;\n  }\n\n  private async confirmUnsavedChanged(): Promise<boolean> {\n    if (this._dirty) {\n      return showConfirmationDialog(this, {\n        title: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm_title\"\n        ),\n        text: this.hass!.localize(\n          \"ui.panel.config.automation.editor.unsaved_confirm_text\"\n        ),\n        confirmText: this.hass!.localize(\"ui.common.leave\"),\n        dismissText: this.hass!.localize(\"ui.common.stay\"),\n        destructive: true,\n      });\n    }\n    return true;\n  }\n\n  private _backTapped = async () => {\n    const result = await this.confirmUnsavedChanged();\n    if (result) {\n      afterNextRender(() => history.back());\n    }\n  };\n\n  private async _duplicate() {\n    const result = this._readOnly\n      ? await showConfirmationDialog(this, {\n          title: \"Migrate script?\",\n          text: \"You can migrate this script, so it can be edited from the UI. After it is migrated and you have saved it, you will have to manually delete your old script from your configuration. Do you want to migrate this script?\",\n        })\n      : await this.confirmUnsavedChanged();\n    if (result) {\n      this._entityId = undefined;\n      showScriptEditor({\n        ...this._config,\n        alias: this._readOnly\n          ? this._config?.alias\n          : `${this._config?.alias} (${this.hass.localize(\n              \"ui.panel.config.script.picker.duplicate\"\n            )})`,\n      });\n    }\n  }\n\n  private async _deleteConfirm() {\n    showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.script.editor.delete_confirm_title\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.script.editor.delete_confirm_text\",\n        { name: this._config?.alias }\n      ),\n      confirmText: this.hass!.localize(\"ui.common.delete\"),\n      dismissText: this.hass!.localize(\"ui.common.cancel\"),\n      confirm: () => this._delete(),\n      destructive: true,\n    });\n  }\n\n  private async _delete() {\n    await deleteScript(this.hass, this.scriptId!);\n    history.back();\n  }\n\n  private _switchUiMode() {\n    this._mode = \"gui\";\n  }\n\n  private _switchYamlMode() {\n    this._mode = \"yaml\";\n  }\n\n  private async _saveScript(): Promise<void> {\n    if (this._idError) {\n      showToast(this, {\n        message: this.hass.localize(\n          \"ui.panel.config.script.editor.id_already_exists_save_error\"\n        ),\n        dismissable: false,\n        duration: 0,\n        action: {\n          action: () => {},\n          text: this.hass.localize(\"ui.dialogs.generic.ok\"),\n        },\n      });\n      return;\n    }\n\n    const id = this.scriptId || this._entityId || Date.now();\n    try {\n      await this.hass!.callApi(\n        \"POST\",\n        \"config/script/config/\" + id,\n        this._config\n      );\n    } catch (errors: any) {\n      this._errors = errors.body.message || errors.error || errors.body;\n      showToast(this, {\n        message: errors.body.message || errors.error || errors.body,\n      });\n      throw errors;\n    }\n\n    this._dirty = false;\n\n    if (!this.scriptId) {\n      navigate(`/config/script/edit/${id}`, { replace: true });\n    }\n  }\n\n  protected handleKeyboardSave() {\n    this._saveScript();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          overflow: hidden;\n        }\n        p {\n          margin-bottom: 0;\n        }\n        .errors {\n          padding: 20px;\n          font-weight: bold;\n          color: var(--error-color);\n        }\n        .yaml-mode {\n          height: 100%;\n          display: flex;\n          flex-direction: column;\n          padding-bottom: 0;\n        }\n        .config-container,\n        manual-script-editor,\n        blueprint-script-editor {\n          margin: 0 auto;\n          max-width: 1040px;\n          padding: 28px 20px 0;\n        }\n        .config-container ha-alert {\n          margin-bottom: 16px;\n          display: block;\n        }\n        ha-yaml-editor {\n          flex-grow: 1;\n          --actions-border-radius: 0;\n          --code-mirror-height: 100%;\n          min-height: 0;\n          display: flex;\n          flex-direction: column;\n        }\n        .yaml-mode ha-card {\n          overflow: initial;\n          --ha-card-border-radius: 0;\n          border-bottom: 1px solid var(--divider-color);\n        }\n        span[slot=\"introduction\"] a {\n          color: var(--primary-color);\n        }\n        ha-fab {\n          position: relative;\n          bottom: calc(-80px - env(safe-area-inset-bottom));\n          transition: bottom 0.3s;\n        }\n        ha-fab.dirty {\n          bottom: 0;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        li[role=\"separator\"] {\n          border-bottom-color: var(--divider-color);\n        }\n        .header {\n          display: flex;\n          margin: 16px 0;\n          align-items: center;\n        }\n        .header .name {\n          font-size: 20px;\n          font-weight: 400;\n          flex: 1;\n        }\n        .header a {\n          color: var(--secondary-text-color);\n        }\n        ha-button-menu a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n      `,\n    ];\n  }\n}\n\ncustomElements.define(\"ha-script-editor\", HaScriptEditor);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-script-editor\": HaScriptEditor;\n  }\n}\n"],"mappings":"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CAAC;QAC1D;MACF;IAAC;MAAA1F,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAA0J,mBAAA,EAA+B;QAC7B,IAAI,CAAC7F,WAAW,CAAC,CAAC;MACpB;IAAC;MAAAjE,IAAA;MAAA+J,MAAA;MAAA5J,GAAA;MAAAC,KAAA,EAED,SAAA4J,OAAA,EAAoC;QAClC,OAAO,CACL3K,OAAO,EACPzB,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GAh2BiCwB,qBAAqB,CAACzB,UAAU,CAAC;AAm2BrEsM,cAAc,CAACC,MAAM,CAAC,kBAAkB,EAAE1K,cAAc,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}