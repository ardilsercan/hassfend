{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { __decorate } from \"tslib\";\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators/property.js';\nimport { virtualize, virtualizerRef, defaultRenderItem, defaultKeyFunction } from './virtualize.js';\nexport class LitVirtualizer extends LitElement {\n  constructor() {\n    super(...arguments);\n    this.items = [];\n    this.renderItem = defaultRenderItem;\n    this.keyFunction = defaultKeyFunction;\n    this.layout = {};\n    this.scroller = false;\n  }\n  createRenderRoot() {\n    return this;\n  }\n  render() {\n    const {\n      items,\n      renderItem,\n      keyFunction,\n      layout,\n      scroller\n    } = this;\n    return html`${virtualize({\n      items,\n      renderItem,\n      keyFunction,\n      layout,\n      scroller\n    })}`;\n  }\n  element(index) {\n    var _this$virtualizerRef;\n    return (_this$virtualizerRef = this[virtualizerRef]) === null || _this$virtualizerRef === void 0 ? void 0 : _this$virtualizerRef.element(index);\n  }\n  get layoutComplete() {\n    var _this$virtualizerRef2;\n    return (_this$virtualizerRef2 = this[virtualizerRef]) === null || _this$virtualizerRef2 === void 0 ? void 0 : _this$virtualizerRef2.layoutComplete;\n  }\n  /**\n   * This scrollToIndex() shim is here to provide backwards compatibility with other 0.x versions of\n   * lit-virtualizer. It is deprecated and will likely be removed in the 1.0.0 release.\n   */\n  scrollToIndex(index, position = 'start') {\n    var _this$element;\n    (_this$element = this.element(index)) === null || _this$element === void 0 || _this$element.scrollIntoView({\n      block: position\n    });\n  }\n}\n__decorate([property({\n  attribute: false\n})], LitVirtualizer.prototype, \"items\", void 0);\n__decorate([property()], LitVirtualizer.prototype, \"renderItem\", void 0);\n__decorate([property()], LitVirtualizer.prototype, \"keyFunction\", void 0);\n__decorate([property({\n  attribute: false\n})], LitVirtualizer.prototype, \"layout\", void 0);\n__decorate([property({\n  reflect: true,\n  type: Boolean\n})], LitVirtualizer.prototype, \"scroller\", void 0);","map":{"version":3,"names":["html","LitElement","property","virtualize","virtualizerRef","defaultRenderItem","defaultKeyFunction","LitVirtualizer","constructor","items","renderItem","keyFunction","layout","scroller","createRenderRoot","render","element","index","_this$virtualizerRef","layoutComplete","_this$virtualizerRef2","scrollToIndex","position","_this$element","scrollIntoView","block","__decorate","attribute","reflect","type","Boolean"],"sources":["src/LitVirtualizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {html, LitElement} from 'lit';\nimport {property} from 'lit/decorators/property.js';\nimport {KeyFn} from 'lit/directives/repeat.js';\nimport {LayoutConfigValue} from './layouts/shared/Layout.js';\nimport {\n  virtualize,\n  virtualizerRef,\n  VirtualizerHostElement,\n  defaultRenderItem,\n  defaultKeyFunction,\n  RenderItemFunction,\n} from './virtualize.js';\n\nexport class LitVirtualizer<T = unknown> extends LitElement {\n  @property({attribute: false})\n  items: T[] = [];\n\n  @property()\n  renderItem: RenderItemFunction<T> = defaultRenderItem;\n\n  @property()\n  keyFunction: KeyFn<T> = defaultKeyFunction;\n\n  @property({attribute: false})\n  layout: LayoutConfigValue = {};\n\n  @property({reflect: true, type: Boolean})\n  scroller = false;\n\n  createRenderRoot() {\n    return this;\n  }\n\n  render() {\n    const {items, renderItem, keyFunction, layout, scroller} = this;\n    return html`${virtualize({\n      items,\n      renderItem,\n      keyFunction,\n      layout,\n      scroller,\n    })}`;\n  }\n\n  element(index: number) {\n    return (this as VirtualizerHostElement)[virtualizerRef]?.element(index);\n  }\n\n  get layoutComplete() {\n    return (this as VirtualizerHostElement)[virtualizerRef]?.layoutComplete;\n  }\n\n  /**\n   * This scrollToIndex() shim is here to provide backwards compatibility with other 0.x versions of\n   * lit-virtualizer. It is deprecated and will likely be removed in the 1.0.0 release.\n   */\n  scrollToIndex(\n    index: number,\n    position: 'start' | 'center' | 'end' | 'nearest' = 'start'\n  ) {\n    this.element(index)?.scrollIntoView({block: position});\n  }\n}\n"],"mappings":"AAAA;;;;;;AAMA,SAAQA,IAAI,EAAEC,UAAU,QAAO,KAAK;AACpC,SAAQC,QAAQ,QAAO,4BAA4B;AAGnD,SACEC,UAAU,EACVC,cAAc,EAEdC,iBAAiB,EACjBC,kBAAkB,QAEb,iBAAiB;AAExB,OAAM,MAAOC,cAA4B,SAAQN,UAAU;EAA3DO,YAAA;;IAEE,KAAAC,KAAK,GAAQ,EAAE;IAGf,KAAAC,UAAU,GAA0BL,iBAAiB;IAGrD,KAAAM,WAAW,GAAaL,kBAAkB;IAG1C,KAAAM,MAAM,GAAsB,EAAE;IAG9B,KAAAC,QAAQ,GAAG,KAAK;EAmClB;EAjCEC,gBAAgBA,CAAA;IACd,OAAO,IAAI;EACb;EAEAC,MAAMA,CAAA;IACJ,MAAM;MAACN,KAAK;MAAEC,UAAU;MAAEC,WAAW;MAAEC,MAAM;MAAEC;IAAQ,CAAC,GAAG,IAAI;IAC/D,OAAOb,IAAI,GAAGG,UAAU,CAAC;MACvBM,KAAK;MACLC,UAAU;MACVC,WAAW;MACXC,MAAM;MACNC;KACD,CAAC,EAAE;EACN;EAEAG,OAAOA,CAACC,KAAa;IAAA,IAAAC,oBAAA;IACnB,QAAAA,oBAAA,GAAQ,IAA+B,CAACd,cAAc,CAAC,cAAAc,oBAAA,uBAA/CA,oBAAA,CAAiDF,OAAO,CAACC,KAAK,CAAC;EACzE;EAEA,IAAIE,cAAcA,CAAA;IAAA,IAAAC,qBAAA;IAChB,QAAAA,qBAAA,GAAQ,IAA+B,CAAChB,cAAc,CAAC,cAAAgB,qBAAA,uBAA/CA,qBAAA,CAAiDD,cAAc;EACzE;EAEA;;;;EAIAE,aAAaA,CACXJ,KAAa,EACbK,QAAA,GAAmD,OAAO;IAAA,IAAAC,aAAA;IAE1D,CAAAA,aAAA,OAAI,CAACP,OAAO,CAACC,KAAK,CAAC,cAAAM,aAAA,eAAnBA,aAAA,CAAqBC,cAAc,CAAC;MAACC,KAAK,EAAEH;IAAQ,CAAC,CAAC;EACxD;;AA9CAI,UAAA,EADCxB,QAAQ,CAAC;EAACyB,SAAS,EAAE;AAAK,CAAC,CAAC,C,4CACb;AAGhBD,UAAA,EADCxB,QAAQ,EAAE,C,iDAC2C;AAGtDwB,UAAA,EADCxB,QAAQ,EAAE,C,kDACgC;AAG3CwB,UAAA,EADCxB,QAAQ,CAAC;EAACyB,SAAS,EAAE;AAAK,CAAC,CAAC,C,6CACE;AAG/BD,UAAA,EADCxB,QAAQ,CAAC;EAAC0B,OAAO,EAAE,IAAI;EAAEC,IAAI,EAAEC;AAAO,CAAC,CAAC,C,+CACxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}