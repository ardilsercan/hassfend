{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { html, isServer } from 'lit';\nimport { Chip } from './chip.js';\nconst ARIA_LABEL_REMOVE = 'aria-label-remove';\n/**\n * A chip component with multiple actions.\n */\nexport class MultiActionChip extends Chip {\n  get ariaLabelRemove() {\n    if (this.hasAttribute(ARIA_LABEL_REMOVE)) {\n      return this.getAttribute(ARIA_LABEL_REMOVE);\n    }\n    const {\n      ariaLabel\n    } = this;\n    return `Remove ${ariaLabel || this.label}`;\n  }\n  set ariaLabelRemove(ariaLabel) {\n    const prev = this.ariaLabelRemove;\n    if (ariaLabel === prev) {\n      return;\n    }\n    if (ariaLabel === null) {\n      this.removeAttribute(ARIA_LABEL_REMOVE);\n    } else {\n      this.setAttribute(ARIA_LABEL_REMOVE, ariaLabel);\n    }\n    this.requestUpdate();\n  }\n  constructor() {\n    super();\n    this.handleTrailingActionFocus = this.handleTrailingActionFocus.bind(this);\n    if (!isServer) {\n      this.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n  }\n  focus(options) {\n    const isFocusable = this.alwaysFocusable || !this.disabled;\n    if (isFocusable && options !== null && options !== void 0 && options.trailing && this.trailingAction) {\n      this.trailingAction.focus(options);\n      return;\n    }\n    super.focus(options);\n  }\n  renderContainerContent() {\n    return html`\n      ${super.renderContainerContent()}\n      ${this.renderTrailingAction(this.handleTrailingActionFocus)}\n    `;\n  }\n  handleKeyDown(event) {\n    var _this$primaryAction, _this$trailingAction;\n    const isLeft = event.key === 'ArrowLeft';\n    const isRight = event.key === 'ArrowRight';\n    // Ignore non-navigation keys.\n    if (!isLeft && !isRight) {\n      return;\n    }\n    if (!this.primaryAction || !this.trailingAction) {\n      // Does not have multiple actions.\n      return;\n    }\n    // Check if moving forwards or backwards\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const forwards = isRtl ? isLeft : isRight;\n    const isPrimaryFocused = (_this$primaryAction = this.primaryAction) === null || _this$primaryAction === void 0 ? void 0 : _this$primaryAction.matches(':focus-within');\n    const isTrailingFocused = (_this$trailingAction = this.trailingAction) === null || _this$trailingAction === void 0 ? void 0 : _this$trailingAction.matches(':focus-within');\n    if (forwards && isTrailingFocused || !forwards && isPrimaryFocused) {\n      // Moving outside of the chip, it will be handled by the chip set.\n      return;\n    }\n    // Prevent default interactions, such as scrolling.\n    event.preventDefault();\n    // Don't let the chip set handle this navigation event.\n    event.stopPropagation();\n    const actionToFocus = forwards ? this.trailingAction : this.primaryAction;\n    actionToFocus.focus();\n  }\n  handleTrailingActionFocus() {\n    const {\n      primaryAction,\n      trailingAction\n    } = this;\n    if (!primaryAction || !trailingAction) {\n      return;\n    }\n    // Temporarily turn off the primary action's focusability. This allows\n    // shift+tab from the trailing action to move to the previous chip rather\n    // than the primary action in the same chip.\n    primaryAction.tabIndex = -1;\n    trailingAction.addEventListener('focusout', () => {\n      primaryAction.tabIndex = 0;\n    }, {\n      once: true\n    });\n  }\n}","map":{"version":3,"names":["html","isServer","Chip","ARIA_LABEL_REMOVE","MultiActionChip","ariaLabelRemove","hasAttribute","getAttribute","ariaLabel","label","prev","removeAttribute","setAttribute","requestUpdate","constructor","handleTrailingActionFocus","bind","addEventListener","handleKeyDown","focus","options","isFocusable","alwaysFocusable","disabled","trailing","trailingAction","renderContainerContent","renderTrailingAction","event","_this$primaryAction","_this$trailingAction","isLeft","key","isRight","primaryAction","isRtl","getComputedStyle","direction","forwards","isPrimaryFocused","matches","isTrailingFocused","preventDefault","stopPropagation","actionToFocus","tabIndex","once"],"sources":["multi-action-chip.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html, isServer} from 'lit';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\n\nimport {Chip} from './chip.js';\n\nconst ARIA_LABEL_REMOVE = 'aria-label-remove';\n\n/**\n * A chip component with multiple actions.\n */\nexport abstract class MultiActionChip extends Chip {\n  get ariaLabelRemove(): string {\n    if (this.hasAttribute(ARIA_LABEL_REMOVE)) {\n      return this.getAttribute(ARIA_LABEL_REMOVE)!;\n    }\n\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return `Remove ${ariaLabel || this.label}`;\n  }\n  set ariaLabelRemove(ariaLabel: string | null) {\n    const prev = this.ariaLabelRemove;\n    if (ariaLabel === prev) {\n      return;\n    }\n\n    if (ariaLabel === null) {\n      this.removeAttribute(ARIA_LABEL_REMOVE);\n    } else {\n      this.setAttribute(ARIA_LABEL_REMOVE, ariaLabel);\n    }\n\n    this.requestUpdate();\n  }\n\n  protected abstract readonly primaryAction: HTMLElement | null;\n  protected abstract readonly trailingAction: HTMLElement | null;\n\n  constructor() {\n    super();\n    this.handleTrailingActionFocus = this.handleTrailingActionFocus.bind(this);\n    if (!isServer) {\n      this.addEventListener('keydown', this.handleKeyDown.bind(this));\n    }\n  }\n\n  override focus(options?: FocusOptions & {trailing?: boolean}) {\n    const isFocusable = this.alwaysFocusable || !this.disabled;\n    if (isFocusable && options?.trailing && this.trailingAction) {\n      this.trailingAction.focus(options);\n      return;\n    }\n\n    super.focus(options as FocusOptions);\n  }\n\n  protected override renderContainerContent() {\n    return html`\n      ${super.renderContainerContent()}\n      ${this.renderTrailingAction(this.handleTrailingActionFocus)}\n    `;\n  }\n\n  protected abstract renderTrailingAction(\n    focusListener: EventListener,\n  ): unknown;\n\n  private handleKeyDown(event: KeyboardEvent) {\n    const isLeft = event.key === 'ArrowLeft';\n    const isRight = event.key === 'ArrowRight';\n    // Ignore non-navigation keys.\n    if (!isLeft && !isRight) {\n      return;\n    }\n\n    if (!this.primaryAction || !this.trailingAction) {\n      // Does not have multiple actions.\n      return;\n    }\n\n    // Check if moving forwards or backwards\n    const isRtl = getComputedStyle(this).direction === 'rtl';\n    const forwards = isRtl ? isLeft : isRight;\n    const isPrimaryFocused = this.primaryAction?.matches(':focus-within');\n    const isTrailingFocused = this.trailingAction?.matches(':focus-within');\n\n    if ((forwards && isTrailingFocused) || (!forwards && isPrimaryFocused)) {\n      // Moving outside of the chip, it will be handled by the chip set.\n      return;\n    }\n\n    // Prevent default interactions, such as scrolling.\n    event.preventDefault();\n    // Don't let the chip set handle this navigation event.\n    event.stopPropagation();\n    const actionToFocus = forwards ? this.trailingAction : this.primaryAction;\n    actionToFocus.focus();\n  }\n\n  private handleTrailingActionFocus() {\n    const {primaryAction, trailingAction} = this;\n    if (!primaryAction || !trailingAction) {\n      return;\n    }\n\n    // Temporarily turn off the primary action's focusability. This allows\n    // shift+tab from the trailing action to move to the previous chip rather\n    // than the primary action in the same chip.\n    primaryAction.tabIndex = -1;\n    trailingAction.addEventListener(\n      'focusout',\n      () => {\n        primaryAction.tabIndex = 0;\n      },\n      {once: true},\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}