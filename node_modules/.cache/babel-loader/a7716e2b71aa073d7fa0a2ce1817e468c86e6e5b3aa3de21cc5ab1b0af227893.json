{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { consume } from \"@lit-labs/context\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport \"@material/mwc-list/mwc-list-item\";\nconst mdiCog = \"M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z\";\nconst mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nconst mdiDownload = \"M5,20H19V18H5M19,9H15V3H9V9H5L12,16L19,9Z\";\nconst mdiOpenInNew = \"M14,3V5H17.59L7.76,14.83L9.17,16.24L19,6.41V10H21V3M19,19H5V5H12V3H5C3.89,3 3,3.9 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V12H19V19Z\";\nconst mdiPencil = \"M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z\";\nconst mdiPlusCircle = \"M17,13H13V17H11V13H7V11H11V7H13V11H17M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { groupBy } from \"../../../common/util/group-by\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-svg-icon\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport { disableConfigEntry, sortConfigEntries } from \"../../../data/config_entries\";\nimport { fullEntitiesContext } from \"../../../data/context\";\nimport { computeDeviceName, removeConfigEntryFromDevice, updateDeviceRegistryEntry } from \"../../../data/device_registry\";\nimport { fetchDiagnosticHandler, getConfigEntryDiagnosticsDownloadUrl, getDeviceDiagnosticsDownloadUrl } from \"../../../data/diagnostics\";\nimport { findBatteryChargingEntity, findBatteryEntity, updateEntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { domainToName } from \"../../../data/integration\";\nimport { showSceneEditor } from \"../../../data/scene\";\nimport { findRelated } from \"../../../data/search\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { fileDownload } from \"../../../util/file_download\";\nimport \"../../logbook/ha-logbook\";\nimport \"../ha-config-section\";\nimport \"./device-detail/ha-device-entities-card\";\nimport \"./device-detail/ha-device-info-card\";\nimport \"./device-detail/ha-device-via-devices-card\";\nimport { showDeviceAutomationDialog } from \"./device-detail/show-dialog-device-automation\";\nimport { loadDeviceRegistryDetailDialog, showDeviceRegistryDetailDialog } from \"./device-registry-detail/show-dialog-device-registry-detail\";\nexport let HaConfigDevicePage = _decorate([customElement(\"ha-config-device-page\")], function (_initialize, _LitElement) {\n  class HaConfigDevicePage extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaConfigDevicePage,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"entries\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"manifests\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"deviceId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"showAdvanced\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_related\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_diagnosticDownloadLinks\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deleteButtons\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceActions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_deviceAlerts\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state(), consume({\n        context: fullEntitiesContext,\n        subscribe: true\n      })],\n      key: \"_entityReg\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_logbookTime\",\n      value() {\n        return {\n          recent: 86400\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_integrations\",\n      value() {\n        return memoizeOne((device, entries, manifests) => {\n          const entryLookup = {};\n          for (const entry of entries) {\n            entryLookup[entry.entry_id] = entry;\n          }\n          const manifestLookup = {};\n          for (const manifest of manifests) {\n            manifestLookup[manifest.domain] = manifest;\n          }\n          const deviceEntries = device.config_entries.filter(entId => entId in entryLookup).map(entry => entryLookup[entry]);\n          return sortConfigEntries(deviceEntries, manifestLookup);\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_entities\",\n      value() {\n        return memoizeOne((deviceId, entities) => entities.filter(entity => entity.device_id === deviceId).map(entity => ({\n          ...entity,\n          stateName: this._computeEntityName(entity)\n        })).sort((ent1, ent2) => stringCompare(ent1.stateName || `zzz${ent1.entity_id}`, ent2.stateName || `zzz${ent2.entity_id}`, this.hass.locale.language)));\n      }\n    }, {\n      kind: \"field\",\n      key: \"_deviceIdInList\",\n      value() {\n        return memoizeOne(deviceId => [deviceId]);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_entityIds\",\n      value() {\n        return memoizeOne(entries => entries.map(entry => entry.entity_id));\n      }\n    }, {\n      kind: \"field\",\n      key: \"_entitiesByCategory\",\n      value() {\n        return memoizeOne(entities => {\n          const result = groupBy(entities, entry => entry.entity_category ? entry.entity_category : computeDomain(entry.entity_id) === \"event\" ? \"event\" : SENSOR_ENTITIES.includes(computeDomain(entry.entity_id)) ? \"sensor\" : \"control\");\n          for (const key of [\"config\", \"control\", \"diagnostic\", \"event\", \"sensor\"]) {\n            if (!(key in result)) {\n              result[key] = [];\n            }\n          }\n          return result;\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_batteryEntity\",\n      value() {\n        return memoizeOne(entities => findBatteryEntity(this.hass, entities));\n      }\n    }, {\n      kind: \"field\",\n      key: \"_batteryChargingEntity\",\n      value() {\n        return memoizeOne(entities => findBatteryChargingEntity(this.hass, entities));\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value:\n      // If a number, it's the request ID so we make sure we don't show older info\n\n      function willUpdate(changedProps) {\n        _get(_getPrototypeOf(HaConfigDevicePage.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"deviceId\") || changedProps.has(\"devices\") || changedProps.has(\"entries\")) {\n          this._diagnosticDownloadLinks = undefined;\n          this._deleteButtons = undefined;\n          this._deviceActions = undefined;\n          this._deviceAlerts = undefined;\n        }\n        if (this._diagnosticDownloadLinks && this._deleteButtons && this._deviceActions && this._deviceAlerts || !this.deviceId || !this.entries) {\n          return;\n        }\n        this._diagnosticDownloadLinks = Math.random();\n        this._deleteButtons = []; // To prevent re-rendering if no delete buttons\n        this._deviceActions = [];\n        this._deviceAlerts = [];\n        this._getDiagnosticButtons(this._diagnosticDownloadLinks);\n        this._getDeleteActions();\n        this._getDeviceActions();\n        this._getDeviceAlerts();\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(HaConfigDevicePage.prototype), \"firstUpdated\", this).call(this, changedProps);\n        loadDeviceRegistryDetailDialog();\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HaConfigDevicePage.prototype), \"updated\", this).call(this, changedProps);\n        if (changedProps.has(\"deviceId\")) {\n          this._findRelated();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_related, _this$_related2, _this$_related3, _this$hass$themes2, _this$_deviceAlerts;\n        if (!this.hass || !this.deviceId) {\n          return nothing;\n        }\n        const device = this.hass.devices[this.deviceId];\n        if (!device) {\n          return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\"ui.panel.config.devices.device_not_found\")}\n        ></hass-error-screen>\n      `;\n        }\n        const deviceName = computeDeviceName(device, this.hass);\n        const integrations = this._integrations(device, this.entries, this.manifests);\n        const entities = this._entities(this.deviceId, this._entityReg);\n        const entitiesByCategory = this._entitiesByCategory(entities);\n        const batteryEntity = this._batteryEntity(entities);\n        const batteryChargingEntity = this._batteryChargingEntity(entities);\n        const battery = batteryEntity ? this.hass.states[batteryEntity.entity_id] : undefined;\n        const batteryDomain = battery ? computeStateDomain(battery) : undefined;\n        const batteryChargingState = batteryChargingEntity ? this.hass.states[batteryChargingEntity.entity_id] : undefined;\n        const area = device.area_id ? this.hass.areas[device.area_id] : undefined;\n        const deviceInfo = integrations.map(integration => {\n          var _this$hass$themes;\n          return html`<a\n          slot=\"actions\"\n          href=${`/config/integrations/integration/${integration.domain}#config_entry=${integration.entry_id}`}\n        >\n          <ha-list-item graphic=\"icon\" hasMeta>\n            <img\n              slot=\"graphic\"\n              alt=${domainToName(this.hass.localize, integration.domain)}\n              src=${brandsUrl({\n            domain: integration.domain,\n            type: \"icon\",\n            darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n          })}\n              crossorigin=\"anonymous\"\n              referrerpolicy=\"no-referrer\"\n            />\n\n            ${domainToName(this.hass.localize, integration.domain)}\n            <ha-icon-next slot=\"meta\"></ha-icon-next>\n          </ha-list-item>\n        </a>`;\n        });\n        const actions = [...(this._deviceActions || [])];\n        if (Array.isArray(this._diagnosticDownloadLinks)) {\n          actions.push(...this._diagnosticDownloadLinks);\n        }\n        if (this._deleteButtons) {\n          actions.push(...this._deleteButtons);\n        }\n\n        // Move all warning actions to the end\n        actions.sort((a, b) => {\n          if (a.classes === \"warning\" && b.classes !== \"warning\") {\n            return 1;\n          }\n          if (a.classes !== \"warning\" && b.classes === \"warning\") {\n            return -1;\n          }\n          return 0;\n        });\n        const firstDeviceAction = actions.shift();\n        if (device.disabled_by) {\n          deviceInfo.push(html`\n        <ha-alert alert-type=\"warning\">\n          ${this.hass.localize(\"ui.panel.config.devices.enabled_cause\", {\n            type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`),\n            cause: this.hass.localize(`ui.panel.config.devices.disabled_by.${device.disabled_by}`)\n          })}\n        </ha-alert>\n        ${device.disabled_by === \"user\" ? html`\n              <div class=\"card-actions\" slot=\"actions\">\n                <mwc-button unelevated @click=${this._enableDevice}>\n                  ${this.hass.localize(\"ui.common.enable\")}\n                </mwc-button>\n              </div>\n            ` : \"\"}\n      `);\n        }\n        this._renderIntegrationInfo(device, integrations, deviceInfo);\n        const automationCard = isComponentLoaded(this.hass, \"automation\") ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\"ui.panel.config.devices.automation.automations_heading\")}\n              <ha-icon-button\n                @click=${this._showAutomationDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by ? this.hass.localize(\"ui.panel.config.devices.automation.create_disable\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        }) : this.hass.localize(\"ui.panel.config.devices.automation.create\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${(_this$_related = this._related) !== null && _this$_related !== void 0 && (_this$_related = _this$_related.automation) !== null && _this$_related !== void 0 && _this$_related.length ? html`\n                  <div class=\"items\">\n                    ${this._related.automation.map(automation => {\n          const entityState = this.hass.states[automation];\n          return entityState ? html`<div>\n                            <a\n                              href=${ifDefined(entityState.attributes.id ? `/config/automation/edit/${entityState.attributes.id}` : undefined)}\n                            >\n                              <paper-item\n                                .automation=${entityState}\n                                .disabled=${!entityState.attributes.id}\n                              >\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                            ${!entityState.attributes.id ? html`\n                                  <simple-tooltip animation-delay=\"0\">\n                                    ${this.hass.localize(\"ui.panel.config.devices.cant_edit\")}\n                                  </simple-tooltip>\n                                ` : \"\"}\n                          </div> ` : \"\";\n        })}\n                  </div>\n                ` : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\"ui.panel.config.devices.add_prompt\", {\n          name: this.hass.localize(\"ui.panel.config.devices.automation.automations\"),\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                  </div>\n                `}\n          </ha-card>\n        ` : \"\";\n        const sceneCard = isComponentLoaded(this.hass, \"scene\") && entities.length ? html`\n            <ha-card outlined>\n              <h1 class=\"card-header\">\n                ${this.hass.localize(\"ui.panel.config.devices.scene.scenes_heading\")}\n\n                <ha-icon-button\n                  @click=${this._createScene}\n                  .disabled=${device.disabled_by}\n                  .label=${device.disabled_by ? this.hass.localize(\"ui.panel.config.devices.scene.create_disable\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        }) : this.hass.localize(\"ui.panel.config.devices.scene.create\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                  .path=${mdiPlusCircle}\n                ></ha-icon-button>\n              </h1>\n              ${(_this$_related2 = this._related) !== null && _this$_related2 !== void 0 && (_this$_related2 = _this$_related2.scene) !== null && _this$_related2 !== void 0 && _this$_related2.length ? html`\n                    <div class=\"items\">\n                      ${this._related.scene.map(scene => {\n          const entityState = this.hass.states[scene];\n          return entityState ? html`\n                              <div>\n                                <a\n                                  href=${ifDefined(entityState.attributes.id ? `/config/scene/edit/${entityState.attributes.id}` : undefined)}\n                                >\n                                  <paper-item\n                                    .scene=${entityState}\n                                    .disabled=${!entityState.attributes.id}\n                                  >\n                                    <paper-item-body>\n                                      ${computeStateName(entityState)}\n                                    </paper-item-body>\n                                    <ha-icon-next></ha-icon-next>\n                                  </paper-item>\n                                </a>\n                                ${!entityState.attributes.id ? html`\n                                      <simple-tooltip animation-delay=\"0\">\n                                        ${this.hass.localize(\"ui.panel.config.devices.cant_edit\")}\n                                      </simple-tooltip>\n                                    ` : \"\"}\n                              </div>\n                            ` : \"\";\n        })}\n                    </div>\n                  ` : html`\n                    <div class=\"card-content\">\n                      ${this.hass.localize(\"ui.panel.config.devices.add_prompt\", {\n          name: this.hass.localize(\"ui.panel.config.devices.scene.scenes\"),\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                    </div>\n                  `}\n            </ha-card>\n          ` : \"\";\n        const scriptCard = isComponentLoaded(this.hass, \"script\") ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\"ui.panel.config.devices.script.scripts_heading\")}\n              <ha-icon-button\n                @click=${this._showScriptDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by ? this.hass.localize(\"ui.panel.config.devices.script.create_disable\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        }) : this.hass.localize(\"ui.panel.config.devices.script.create\", {\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${(_this$_related3 = this._related) !== null && _this$_related3 !== void 0 && (_this$_related3 = _this$_related3.script) !== null && _this$_related3 !== void 0 && _this$_related3.length ? html`\n                  <div class=\"items\">\n                    ${this._related.script.map(script => {\n          const entityState = this.hass.states[script];\n          const entry = this._entityReg.find(e => e.entity_id === script);\n          let url = `/config/script/show/${entityState.entity_id}`;\n          if (entry) {\n            url = `/config/script/edit/${entry.unique_id}`;\n          }\n          return entityState ? html`\n                            <a href=${url}>\n                              <paper-item .script=${script}>\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                          ` : \"\";\n        })}\n                  </div>\n                ` : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\"ui.panel.config.devices.add_prompt\", {\n          name: this.hass.localize(\"ui.panel.config.devices.script.scripts\"),\n          type: this.hass.localize(`ui.panel.config.devices.type.${device.entry_type || \"device\"}`)\n        })}\n                  </div>\n                `}\n          </ha-card>\n        ` : \"\";\n        return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${deviceName}\n      >\n\n                <ha-icon-button\n                  slot=\"toolbar-icon\"\n                  .path=${mdiPencil}\n                  @click=${this._showSettings}\n                  .label=${this.hass.localize(\"ui.panel.config.devices.edit_settings\")}\n                ></ha-icon-button>\n        <div class=\"container\">\n          <div class=\"header fullwidth\">\n            ${area ? html`<div class=\"header-name\">\n                    <a href=\"/config/areas/area/${area.area_id}\"\n                      >${this.hass.localize(\"ui.panel.config.integrations.config_entry.area\", {\n          area: area.name || \"Unnamed Area\"\n        })}</a\n                    >\n                  </div>` : \"\"}\n                <div class=\"header-right\">\n                  ${battery && (batteryDomain === \"binary_sensor\" || !isNaN(battery.state)) ? html`\n                          <div class=\"battery\">\n                            ${batteryDomain === \"sensor\" ? this.hass.formatEntityState(battery) : nothing}\n                            <ha-battery-icon\n                              .hass=${this.hass}\n                              .batteryStateObj=${battery}\n                              .batteryChargingStateObj=${batteryChargingState}\n                            ></ha-battery-icon>\n                          </div>\n                        ` : \"\"}\n                  ${integrations.length ? html`\n                          <img\n                            alt=${domainToName(this.hass.localize, integrations[0].domain)}\n                            src=${brandsUrl({\n          domain: integrations[0].domain,\n          type: \"logo\",\n          darkOptimized: (_this$hass$themes2 = this.hass.themes) === null || _this$hass$themes2 === void 0 ? void 0 : _this$hass$themes2.darkMode\n        })}\n                            crossorigin=\"anonymous\"\n                            referrerpolicy=\"no-referrer\"\n                            @load=${this._onImageLoad}\n                            @error=${this._onImageError}\n                          />\n                        ` : \"\"}\n\n                </div>\n          </div>\n          <div class=\"column\">\n              ${(_this$_deviceAlerts = this._deviceAlerts) !== null && _this$_deviceAlerts !== void 0 && _this$_deviceAlerts.length ? html`\n                      <div>\n                        ${this._deviceAlerts.map(alert => html`\n                            <ha-alert .alertType=${alert.level}>\n                              ${alert.text}\n                            </ha-alert>\n                          `)}\n                      </div>\n                    ` : \"\"}\n              <ha-device-info-card\n                .hass=${this.hass}\n                .device=${device}\n              >\n                ${deviceInfo}\n                ${firstDeviceAction || actions.length ? html`\n                        <div class=\"card-actions\" slot=\"actions\">\n                          <div>\n                            <a\n                              href=${ifDefined(firstDeviceAction.href)}\n                              rel=${ifDefined(firstDeviceAction.target ? \"noreferrer\" : undefined)}\n                              target=${ifDefined(firstDeviceAction.target)}\n                            >\n                              <mwc-button\n                                class=${ifDefined(firstDeviceAction.classes)}\n                                .action=${firstDeviceAction.action}\n                                @click=${this._deviceActionClicked}\n                                graphic=\"icon\"\n                              >\n                                ${firstDeviceAction.label}\n                                ${firstDeviceAction.icon ? html`\n                                      <ha-svg-icon\n                                        class=${ifDefined(firstDeviceAction.classes)}\n                                        .path=${firstDeviceAction.icon}\n                                        slot=\"graphic\"\n                                      ></ha-svg-icon>\n                                    ` : \"\"}\n                                ${firstDeviceAction.trailingIcon ? html`\n                                      <ha-svg-icon\n                                        .path=${firstDeviceAction.trailingIcon}\n                                        slot=\"trailingIcon\"\n                                      ></ha-svg-icon>\n                                    ` : \"\"}\n                              </mwc-button>\n                            </a>\n                          </div>\n\n                          ${actions.length ? html`\n                                <ha-button-menu>\n                                  <ha-icon-button\n                                    slot=\"trigger\"\n                                    .label=${this.hass.localize(\"ui.common.menu\")}\n                                    .path=${mdiDotsVertical}\n                                  ></ha-icon-button>\n                                  ${actions.map(deviceAction => {\n          const listItem = html`<mwc-list-item\n                                      class=${ifDefined(deviceAction.classes)}\n                                      .action=${deviceAction.action}\n                                      @click=${this._deviceActionClicked}\n                                      graphic=\"icon\"\n                                      .hasMeta=${Boolean(deviceAction.trailingIcon)}\n                                    >\n                                      ${deviceAction.label}\n                                      ${deviceAction.icon ? html`\n                                            <ha-svg-icon\n                                              class=${ifDefined(deviceAction.classes)}\n                                              .path=${deviceAction.icon}\n                                              slot=\"graphic\"\n                                            ></ha-svg-icon>\n                                          ` : \"\"}\n                                      ${deviceAction.trailingIcon ? html`\n                                            <ha-svg-icon\n                                              slot=\"meta\"\n                                              .path=${deviceAction.trailingIcon}\n                                            ></ha-svg-icon>\n                                          ` : \"\"}\n                                    </mwc-list-item>`;\n          return deviceAction.href ? html`<a\n                                          href=${deviceAction.href}\n                                          target=${ifDefined(deviceAction.target)}\n                                          rel=${ifDefined(deviceAction.target ? \"noreferrer\" : undefined)}\n                                          >${listItem}\n                                        </a>` : listItem;\n        })}\n                                </ha-button-menu>\n                              ` : \"\"}\n                        </div>\n                      ` : \"\"}\n              </ha-device-info-card>\n            ${!this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n          </div>\n          <div class=\"column\">\n            ${[\"control\", \"sensor\", \"event\", \"config\", \"diagnostic\"].map(category =>\n        // Make sure we render controls if no other cards will be rendered\n        entitiesByCategory[category].length > 0 || entities.length === 0 && category === \"control\" ? html`\n                    <ha-device-entities-card\n                      .hass=${this.hass}\n                      .header=${this.hass.localize(`ui.panel.config.devices.entities.${category}`)}\n                      .deviceName=${deviceName}\n                      .entities=${entitiesByCategory[category]}\n                      .showHidden=${device.disabled_by !== null}\n                    >\n                    </ha-device-entities-card>\n                  ` : \"\")}\n            <ha-device-via-devices-card\n              .hass=${this.hass}\n              .deviceId=${this.deviceId}\n            ></ha-device-via-devices-card>\n          </div>\n          <div class=\"column\">\n            ${this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n            ${isComponentLoaded(this.hass, \"logbook\") ? html`\n                    <ha-card outlined>\n                      <h1 class=\"card-header\">\n                        ${this.hass.localize(\"panel.logbook\")}\n                      </h1>\n                      <ha-logbook\n                        .hass=${this.hass}\n                        .time=${this._logbookTime}\n                        .entityIds=${this._entityIds(entities)}\n                        .deviceIds=${this._deviceIdInList(this.deviceId)}\n                        virtualize\n                        narrow\n                        no-icon\n                      ></ha-logbook>\n                    </ha-card>\n                  ` : \"\"}\n            </div>\n          </div>\n        </ha-config-section>\n      </hass-subpage>    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getDiagnosticButtons\",\n      value: async function _getDiagnosticButtons(requestId) {\n        if (!isComponentLoaded(this.hass, \"diagnostics\")) {\n          return;\n        }\n        const device = this.hass.devices[this.deviceId];\n        if (!device) {\n          return;\n        }\n        let links = await Promise.all(this._integrations(device, this.entries, this.manifests).map(async entry => {\n          if (entry.state !== \"loaded\") {\n            return false;\n          }\n          let info;\n          try {\n            info = await fetchDiagnosticHandler(this.hass, entry.domain);\n          } catch (err) {\n            if (err.code === \"not_found\") {\n              return false;\n            }\n            throw err;\n          }\n          if (!info.handlers.device && !info.handlers.config_entry) {\n            return false;\n          }\n          return {\n            link: info.handlers.device ? getDeviceDiagnosticsDownloadUrl(entry.entry_id, this.deviceId) : getConfigEntryDiagnosticsDownloadUrl(entry.entry_id),\n            domain: entry.domain\n          };\n        }));\n        links = links.filter(Boolean);\n        if (this._diagnosticDownloadLinks !== requestId) {\n          return;\n        }\n        if (links.length > 0) {\n          this._diagnosticDownloadLinks = links.map(link => ({\n            href: link.link,\n            icon: mdiDownload,\n            action: ev => this._signUrl(ev),\n            label: links.length > 1 ? this.hass.localize(`ui.panel.config.devices.download_diagnostics_integration`, {\n              integration: domainToName(this.hass.localize, link.domain)\n            }) : this.hass.localize(`ui.panel.config.devices.download_diagnostics`)\n          }));\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getDeleteActions\",\n      value: function _getDeleteActions() {\n        const device = this.hass.devices[this.deviceId];\n        if (!device) {\n          return;\n        }\n        const buttons = [];\n        this._integrations(device, this.entries, this.manifests).forEach(entry => {\n          if (entry.state !== \"loaded\" || !entry.supports_remove_device) {\n            return;\n          }\n          buttons.push({\n            action: async () => {\n              const confirmed = await showConfirmationDialog(this, {\n                text: this._integrations(device, this.entries, this.manifests).length > 1 ? this.hass.localize(`ui.panel.config.devices.confirm_delete_integration`, {\n                  integration: domainToName(this.hass.localize, entry.domain)\n                }) : this.hass.localize(`ui.panel.config.devices.confirm_delete`)\n              });\n              if (!confirmed) {\n                return;\n              }\n              await removeConfigEntryFromDevice(this.hass, this.deviceId, entry.entry_id);\n            },\n            classes: \"warning\",\n            icon: mdiDelete,\n            label: this._integrations(device, this.entries, this.manifests).length > 1 ? this.hass.localize(`ui.panel.config.devices.delete_device_integration`, {\n              integration: domainToName(this.hass.localize, entry.domain)\n            }) : this.hass.localize(`ui.panel.config.devices.delete_device`)\n          });\n        });\n        if (buttons.length > 0) {\n          this._deleteButtons = buttons;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getDeviceActions\",\n      value: async function _getDeviceActions() {\n        var _device$configuration;\n        const device = this.hass.devices[this.deviceId];\n        if (!device) {\n          return;\n        }\n        const deviceActions = [];\n        const configurationUrlIsHomeAssistant = ((_device$configuration = device.configuration_url) === null || _device$configuration === void 0 ? void 0 : _device$configuration.startsWith(\"homeassistant://\")) || false;\n        const configurationUrl = configurationUrlIsHomeAssistant ? device.configuration_url.replace(\"homeassistant://\", \"/\") : device.configuration_url;\n        if (configurationUrl) {\n          deviceActions.push({\n            href: configurationUrl,\n            target: configurationUrlIsHomeAssistant ? undefined : \"_blank\",\n            icon: mdiCog,\n            label: this.hass.localize(\"ui.panel.config.devices.open_configuration_url\"),\n            trailingIcon: mdiOpenInNew\n          });\n        }\n        const domains = this._integrations(device, this.entries, this.manifests).map(int => int.domain);\n        if (domains.includes(\"mqtt\")) {\n          const mqtt = await import(\"./device-detail/integration-elements/mqtt/device-actions\");\n          const actions = mqtt.getMQTTDeviceActions(this, device);\n          deviceActions.push(...actions);\n        }\n        if (domains.includes(\"zha\")) {\n          const zha = await import(\"./device-detail/integration-elements/zha/device-actions\");\n          const actions = await zha.getZHADeviceActions(this, this.hass, device);\n          deviceActions.push(...actions);\n        }\n        if (domains.includes(\"zwave_js\")) {\n          const zwave = await import(\"./device-detail/integration-elements/zwave_js/device-actions\");\n          const actions = await zwave.getZwaveDeviceActions(this, this.hass, device);\n          deviceActions.push(...actions);\n        }\n        if (domains.includes(\"matter\")) {\n          const matter = await import(\"./device-detail/integration-elements/matter/device-actions\");\n          const actions = await matter.getMatterDeviceActions(this, this.hass, device);\n          deviceActions.push(...actions);\n        }\n        this._deviceActions = deviceActions;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getDeviceAlerts\",\n      value: async function _getDeviceAlerts() {\n        const device = this.hass.devices[this.deviceId];\n        if (!device) {\n          return;\n        }\n        const deviceAlerts = [];\n        const domains = this._integrations(device, this.entries, this.manifests).map(int => int.domain);\n        if (domains.includes(\"zwave_js\")) {\n          const zwave = await import(\"./device-detail/integration-elements/zwave_js/device-alerts\");\n          const alerts = await zwave.getZwaveDeviceAlerts(this.hass, device);\n          deviceAlerts.push(...alerts);\n        }\n        if (deviceAlerts.length) {\n          this._deviceAlerts = deviceAlerts;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeEntityName\",\n      value: function _computeEntityName(entity) {\n        if (entity.name) {\n          return entity.name;\n        }\n        const entityState = this.hass.states[entity.entity_id];\n        return entityState ? computeStateName(entityState) : null;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageLoad\",\n      value: function _onImageLoad(ev) {\n        ev.target.style.display = \"inline-block\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageError\",\n      value: function _onImageError(ev) {\n        ev.target.style.display = \"none\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_findRelated\",\n      value: async function _findRelated() {\n        this._related = await findRelated(this.hass, \"device\", this.deviceId);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createScene\",\n      value: function _createScene() {\n        const entities = {};\n        this._entities(this.deviceId, this._entityReg).forEach(entity => {\n          entities[entity.entity_id] = \"\";\n        });\n        showSceneEditor({\n          entities\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showScriptDialog\",\n      value: function _showScriptDialog() {\n        showDeviceAutomationDialog(this, {\n          device: this.hass.devices[this.deviceId],\n          entityReg: this._entityReg,\n          script: true\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showAutomationDialog\",\n      value: function _showAutomationDialog() {\n        showDeviceAutomationDialog(this, {\n          device: this.hass.devices[this.deviceId],\n          entityReg: this._entityReg,\n          script: false\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderIntegrationInfo\",\n      value: function _renderIntegrationInfo(device, integrations, deviceInfo) {\n        const domains = integrations.map(int => int.domain);\n        if (domains.includes(\"zha\")) {\n          import(\"./device-detail/integration-elements/zha/ha-device-info-zha\");\n          deviceInfo.push(html`\n        <ha-device-info-zha\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zha>\n      `);\n        }\n        if (domains.includes(\"zwave_js\")) {\n          import(\"./device-detail/integration-elements/zwave_js/ha-device-info-zwave_js\");\n          deviceInfo.push(html`\n        <ha-device-info-zwave_js\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zwave_js>\n      `);\n        }\n        if (domains.includes(\"matter\")) {\n          import(\"./device-detail/integration-elements/matter/ha-device-info-matter\");\n          deviceInfo.push(html`\n        <ha-device-info-matter\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-matter>\n      `);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showSettings\",\n      value: async function _showSettings() {\n        const device = this.hass.devices[this.deviceId];\n        showDeviceRegistryDetailDialog(this, {\n          device,\n          updateEntry: async updates => {\n            const oldDeviceName = device.name_by_user || device.name;\n            const newDeviceName = updates.name_by_user;\n            const disabled = updates.disabled_by === \"user\" && device.disabled_by !== \"user\";\n            if (disabled) {\n              for (const cnfg_entry of device.config_entries) {\n                if (!Object.values(this.hass.devices).some(dvc => dvc.id !== device.id && dvc.config_entries.includes(cnfg_entry))) {\n                  const config_entry = this.entries.find(entry => entry.entry_id === cnfg_entry);\n                  if (config_entry && !config_entry.disabled_by && (\n                  // eslint-disable-next-line no-await-in-loop\n                  await showConfirmationDialog(this, {\n                    title: this.hass.localize(\"ui.panel.config.devices.confirm_disable_config_entry\", {\n                      entry_name: config_entry.title\n                    }),\n                    confirmText: this.hass.localize(\"ui.common.yes\"),\n                    dismissText: this.hass.localize(\"ui.common.no\")\n                  }))) {\n                    let result;\n                    try {\n                      // eslint-disable-next-line no-await-in-loop\n                      result = await disableConfigEntry(this.hass, cnfg_entry);\n                    } catch (err) {\n                      showAlertDialog(this, {\n                        title: this.hass.localize(\"ui.panel.config.integrations.config_entry.disable_error\"),\n                        text: err.message\n                      });\n                      return;\n                    }\n                    if (result.require_restart) {\n                      showAlertDialog(this, {\n                        text: this.hass.localize(\"ui.panel.config.integrations.config_entry.disable_restart_confirm\")\n                      });\n                    }\n                    delete updates.disabled_by;\n                  }\n                }\n              }\n            } else if (updates.disabled_by !== null && updates.disabled_by !== \"user\") {\n              delete updates.disabled_by;\n            }\n            try {\n              await updateDeviceRegistryEntry(this.hass, this.deviceId, updates);\n            } catch (err) {\n              showAlertDialog(this, {\n                title: this.hass.localize(\"ui.panel.config.devices.update_device_error\"),\n                text: err.message\n              });\n              return;\n            }\n            if (!oldDeviceName || !newDeviceName || oldDeviceName === newDeviceName) {\n              return;\n            }\n            const entities = this._entities(this.deviceId, this._entityReg);\n            const renameEntityid = this.showAdvanced && (await showConfirmationDialog(this, {\n              title: this.hass.localize(\"ui.panel.config.devices.confirm_rename_entity_ids\"),\n              text: this.hass.localize(\"ui.panel.config.devices.confirm_rename_entity_ids_warning\"),\n              confirmText: this.hass.localize(\"ui.common.rename\"),\n              dismissText: this.hass.localize(\"ui.common.no\"),\n              warning: true\n            }));\n            const updateProms = entities.map(entity => {\n              const name = entity.name || entity.stateName;\n              let newEntityId;\n              let newName;\n              let shouldUpdateName;\n              let shouldUpdateEntityId = false;\n              if (entity.has_entity_name && !entity.name) {\n                shouldUpdateName = false;\n              } else if (entity.has_entity_name && (entity.name === oldDeviceName || entity.name === newDeviceName)) {\n                shouldUpdateName = true;\n                // clear name if it matches the device name and it uses the device name (entity naming)\n                newName = null;\n              } else if (name && name.includes(oldDeviceName)) {\n                shouldUpdateName = true;\n                newName = name.replace(oldDeviceName, newDeviceName);\n              } else {\n                shouldUpdateName = false;\n              }\n              if (renameEntityid) {\n                const oldSearch = slugify(oldDeviceName);\n                if (entity.entity_id.includes(oldSearch)) {\n                  shouldUpdateEntityId = true;\n                  newEntityId = entity.entity_id.replace(oldSearch, slugify(newDeviceName));\n                }\n              }\n              if (newName === undefined && newEntityId === undefined) {\n                return undefined;\n              }\n              return updateEntityRegistryEntry(this.hass, entity.entity_id, {\n                name: shouldUpdateName ? newName : undefined,\n                new_entity_id: shouldUpdateEntityId ? newEntityId : undefined\n              });\n            });\n            await Promise.all(updateProms);\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_enableDevice\",\n      value: async function _enableDevice() {\n        await updateDeviceRegistryEntry(this.hass, this.deviceId, {\n          disabled_by: null\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_signUrl\",\n      value: async function _signUrl(ev) {\n        const anchor = ev.currentTarget.closest(\"a\");\n        const signedUrl = await getSignedPath(this.hass, anchor.getAttribute(\"href\"));\n        fileDownload(signedUrl.path);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deviceActionClicked\",\n      value: function _deviceActionClicked(ev) {\n        if (!ev.currentTarget.action) {\n          return;\n        }\n        ev.preventDefault();\n        ev.currentTarget.action(ev);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n\n        .card-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 12px;\n        }\n\n        .card-header ha-icon-button {\n          margin-right: -8px;\n          margin-inline-end: -8px;\n          margin-inline-start: initial;\n          color: var(--primary-color);\n          height: auto;\n          direction: var(--direction);\n        }\n\n        .device-info {\n          padding: 16px;\n        }\n\n        h1 {\n          margin: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .header-name {\n          display: flex;\n          align-items: center;\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          direction: var(--direction);\n        }\n\n        .column,\n        .fullwidth {\n          padding: 8px;\n          box-sizing: border-box;\n        }\n        .column {\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          width: 100%;\n          flex-grow: 1;\n        }\n\n        .header-right {\n          align-self: center;\n        }\n\n        .header-right img {\n          height: 30px;\n        }\n\n        .header-right {\n          display: flex;\n        }\n\n        .header-right:first-child {\n          width: 100%;\n          justify-content: flex-end;\n        }\n\n        .header-right > *:not(:first-child) {\n          margin-left: 16px;\n          margin-inline-start: 16px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n\n        .battery {\n          align-self: center;\n          align-items: center;\n          display: flex;\n          white-space: nowrap;\n        }\n\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n\n        ha-card a {\n          color: var(--primary-text-color);\n        }\n\n        ha-svg-icon[slot=\"trailingIcon\"] {\n          display: block;\n          width: 18px;\n          height: 18px;\n        }\n\n        ha-svg-icon[slot=\"meta\"] {\n          width: 18px;\n          height: 18px;\n        }\n\n        .items {\n          padding-bottom: 16px;\n        }\n\n        ha-logbook {\n          height: 400px;\n        }\n        :host([narrow]) ha-logbook {\n          height: 235px;\n        }\n\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["consume","mdiCog","mdiDelete","mdiDotsVertical","mdiDownload","mdiOpenInNew","mdiPencil","mdiPlusCircle","LitElement","css","html","nothing","customElement","property","state","ifDefined","memoizeOne","isComponentLoaded","SENSOR_ENTITIES","computeDomain","computeStateDomain","computeStateName","stringCompare","slugify","groupBy","getSignedPath","disableConfigEntry","sortConfigEntries","fullEntitiesContext","computeDeviceName","removeConfigEntryFromDevice","updateDeviceRegistryEntry","fetchDiagnosticHandler","getConfigEntryDiagnosticsDownloadUrl","getDeviceDiagnosticsDownloadUrl","findBatteryChargingEntity","findBatteryEntity","updateEntityRegistryEntry","domainToName","showSceneEditor","findRelated","showAlertDialog","showConfirmationDialog","haStyle","brandsUrl","fileDownload","showDeviceAutomationDialog","loadDeviceRegistryDetailDialog","showDeviceRegistryDetailDialog","HaConfigDevicePage","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","reflect","context","subscribe","recent","device","entries","manifests","entryLookup","entry","entry_id","manifestLookup","manifest","domain","deviceEntries","config_entries","filter","entId","map","deviceId","entities","entity","device_id","stateName","_computeEntityName","sort","ent1","ent2","entity_id","hass","locale","language","result","entity_category","includes","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","has","_diagnosticDownloadLinks","undefined","_deleteButtons","_deviceActions","_deviceAlerts","Math","random","_getDiagnosticButtons","_getDeleteActions","_getDeviceActions","_getDeviceAlerts","firstUpdated","updated","_findRelated","render","_this$_related","_this$_related2","_this$_related3","_this$hass$themes2","_this$_deviceAlerts","devices","localize","deviceName","integrations","_integrations","_entities","_entityReg","entitiesByCategory","_entitiesByCategory","batteryEntity","_batteryEntity","batteryChargingEntity","_batteryChargingEntity","battery","states","batteryDomain","batteryChargingState","area","area_id","areas","deviceInfo","integration","_this$hass$themes","darkOptimized","themes","darkMode","actions","Array","isArray","push","a","b","classes","firstDeviceAction","shift","disabled_by","entry_type","cause","_enableDevice","_renderIntegrationInfo","automationCard","_showAutomationDialog","_related","automation","length","entityState","attributes","id","name","sceneCard","_createScene","scene","scriptCard","_showScriptDialog","script","find","e","url","unique_id","narrow","_showSettings","isNaN","formatEntityState","_onImageLoad","_onImageError","alert","level","text","href","target","action","_deviceActionClicked","label","icon","trailingIcon","deviceAction","listItem","category","_logbookTime","_entityIds","_deviceIdInList","requestId","links","Promise","all","info","err","code","handlers","config_entry","link","ev","_signUrl","buttons","forEach","supports_remove_device","confirmed","_device$configuration","deviceActions","configurationUrlIsHomeAssistant","configuration_url","startsWith","configurationUrl","replace","domains","int","mqtt","getMQTTDeviceActions","zha","getZHADeviceActions","zwave","getZwaveDeviceActions","matter","getMatterDeviceActions","deviceAlerts","alerts","getZwaveDeviceAlerts","style","display","entityReg","updateEntry","updates","oldDeviceName","name_by_user","newDeviceName","disabled","cnfg_entry","Object","values","some","dvc","title","entry_name","confirmText","dismissText","message","require_restart","renameEntityid","showAdvanced","warning","updateProms","newEntityId","newName","shouldUpdateName","shouldUpdateEntityId","has_entity_name","oldSearch","new_entity_id","anchor","currentTarget","closest","signedUrl","getAttribute","path","preventDefault","static","styles"],"sources":["/workspaces/frontend/src/panels/config/devices/ha-config-device-page.ts"],"sourcesContent":["import { consume } from \"@lit-labs/context\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport {\n  mdiCog,\n  mdiDelete,\n  mdiDotsVertical,\n  mdiDownload,\n  mdiOpenInNew,\n  mdiPencil,\n  mdiPlusCircle,\n} from \"@mdi/js\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { slugify } from \"../../../common/string/slugify\";\nimport { groupBy } from \"../../../common/util/group-by\";\nimport \"../../../components/entity/ha-battery-icon\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-button-menu\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/ha-svg-icon\";\nimport { getSignedPath } from \"../../../data/auth\";\nimport {\n  ConfigEntry,\n  DisableConfigEntryResult,\n  disableConfigEntry,\n  sortConfigEntries,\n} from \"../../../data/config_entries\";\nimport { fullEntitiesContext } from \"../../../data/context\";\nimport {\n  DeviceRegistryEntry,\n  computeDeviceName,\n  removeConfigEntryFromDevice,\n  updateDeviceRegistryEntry,\n} from \"../../../data/device_registry\";\nimport {\n  DiagnosticInfo,\n  fetchDiagnosticHandler,\n  getConfigEntryDiagnosticsDownloadUrl,\n  getDeviceDiagnosticsDownloadUrl,\n} from \"../../../data/diagnostics\";\nimport {\n  EntityRegistryEntry,\n  findBatteryChargingEntity,\n  findBatteryEntity,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport { IntegrationManifest, domainToName } from \"../../../data/integration\";\nimport { SceneEntities, showSceneEditor } from \"../../../data/scene\";\nimport { RelatedResult, findRelated } from \"../../../data/search\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../dialogs/generic/show-dialog-box\";\nimport \"../../../layouts/hass-error-screen\";\nimport \"../../../layouts/hass-subpage\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { fileDownload } from \"../../../util/file_download\";\nimport \"../../logbook/ha-logbook\";\nimport \"../ha-config-section\";\nimport \"./device-detail/ha-device-entities-card\";\nimport \"./device-detail/ha-device-info-card\";\nimport \"./device-detail/ha-device-via-devices-card\";\nimport { showDeviceAutomationDialog } from \"./device-detail/show-dialog-device-automation\";\nimport {\n  loadDeviceRegistryDetailDialog,\n  showDeviceRegistryDetailDialog,\n} from \"./device-registry-detail/show-dialog-device-registry-detail\";\n\nexport interface EntityRegistryStateEntry extends EntityRegistryEntry {\n  stateName?: string | null;\n}\n\nexport interface DeviceAction {\n  href?: string;\n  target?: string;\n  action?: (ev: any) => void;\n  label: string;\n  icon?: string;\n  trailingIcon?: string;\n  classes?: string;\n}\n\nexport interface DeviceAlert {\n  level: \"warning\" | \"error\" | \"info\";\n  text: string;\n}\n\n@customElement(\"ha-config-device-page\")\nexport class HaConfigDevicePage extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public entries!: ConfigEntry[];\n\n  @property({ attribute: false }) public manifests!: IntegrationManifest[];\n\n  @property() public deviceId!: string;\n\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ type: Boolean }) public showAdvanced = false;\n\n  @state() private _related?: RelatedResult;\n\n  // If a number, it's the request ID so we make sure we don't show older info\n  @state() private _diagnosticDownloadLinks?: number | DeviceAction[];\n\n  @state() private _deleteButtons?: DeviceAction[];\n\n  @state() private _deviceActions?: DeviceAction[];\n\n  @state() private _deviceAlerts?: DeviceAlert[];\n\n  @state()\n  @consume({ context: fullEntitiesContext, subscribe: true })\n  _entityReg!: EntityRegistryEntry[];\n\n  private _logbookTime = { recent: 86400 };\n\n  private _integrations = memoizeOne(\n    (\n      device: DeviceRegistryEntry,\n      entries: ConfigEntry[],\n      manifests: IntegrationManifest[]\n    ): ConfigEntry[] => {\n      const entryLookup: { [entryId: string]: ConfigEntry } = {};\n      for (const entry of entries) {\n        entryLookup[entry.entry_id] = entry;\n      }\n      const manifestLookup: { [domain: string]: IntegrationManifest } = {};\n      for (const manifest of manifests) {\n        manifestLookup[manifest.domain] = manifest;\n      }\n      const deviceEntries = device.config_entries\n        .filter((entId) => entId in entryLookup)\n        .map((entry) => entryLookup[entry]);\n\n      return sortConfigEntries(deviceEntries, manifestLookup);\n    }\n  );\n\n  private _entities = memoizeOne(\n    (\n      deviceId: string,\n      entities: EntityRegistryEntry[]\n    ): EntityRegistryStateEntry[] =>\n      entities\n        .filter((entity) => entity.device_id === deviceId)\n        .map((entity) => ({\n          ...entity,\n          stateName: this._computeEntityName(entity),\n        }))\n        .sort((ent1, ent2) =>\n          stringCompare(\n            ent1.stateName || `zzz${ent1.entity_id}`,\n            ent2.stateName || `zzz${ent2.entity_id}`,\n            this.hass.locale.language\n          )\n        )\n  );\n\n  private _deviceIdInList = memoizeOne((deviceId: string) => [deviceId]);\n\n  private _entityIds = memoizeOne(\n    (entries: EntityRegistryStateEntry[]): string[] =>\n      entries.map((entry) => entry.entity_id)\n  );\n\n  private _entitiesByCategory = memoizeOne(\n    (entities: EntityRegistryEntry[]) => {\n      const result = groupBy(entities, (entry) =>\n        entry.entity_category\n          ? entry.entity_category\n          : computeDomain(entry.entity_id) === \"event\"\n            ? \"event\"\n            : SENSOR_ENTITIES.includes(computeDomain(entry.entity_id))\n              ? \"sensor\"\n              : \"control\"\n      ) as Record<\n        | \"control\"\n        | \"event\"\n        | \"sensor\"\n        | NonNullable<EntityRegistryEntry[\"entity_category\"]>,\n        EntityRegistryStateEntry[]\n      >;\n      for (const key of [\n        \"config\",\n        \"control\",\n        \"diagnostic\",\n        \"event\",\n        \"sensor\",\n      ]) {\n        if (!(key in result)) {\n          result[key] = [];\n        }\n      }\n\n      return result;\n    }\n  );\n\n  private _batteryEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryEntity(this.hass, entities)\n  );\n\n  private _batteryChargingEntity = memoizeOne(\n    (entities: EntityRegistryEntry[]): EntityRegistryEntry | undefined =>\n      findBatteryChargingEntity(this.hass, entities)\n  );\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n\n    if (\n      changedProps.has(\"deviceId\") ||\n      changedProps.has(\"devices\") ||\n      changedProps.has(\"entries\")\n    ) {\n      this._diagnosticDownloadLinks = undefined;\n      this._deleteButtons = undefined;\n      this._deviceActions = undefined;\n      this._deviceAlerts = undefined;\n    }\n\n    if (\n      (this._diagnosticDownloadLinks &&\n        this._deleteButtons &&\n        this._deviceActions &&\n        this._deviceAlerts) ||\n      !this.deviceId ||\n      !this.entries\n    ) {\n      return;\n    }\n\n    this._diagnosticDownloadLinks = Math.random();\n    this._deleteButtons = []; // To prevent re-rendering if no delete buttons\n    this._deviceActions = [];\n    this._deviceAlerts = [];\n    this._getDiagnosticButtons(this._diagnosticDownloadLinks);\n    this._getDeleteActions();\n    this._getDeviceActions();\n    this._getDeviceAlerts();\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    loadDeviceRegistryDetailDialog();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"deviceId\")) {\n      this._findRelated();\n    }\n  }\n\n  protected render() {\n    if (!this.hass || !this.deviceId) {\n      return nothing;\n    }\n    const device = this.hass.devices[this.deviceId];\n\n    if (!device) {\n      return html`\n        <hass-error-screen\n          .hass=${this.hass}\n          .error=${this.hass.localize(\n            \"ui.panel.config.devices.device_not_found\"\n          )}\n        ></hass-error-screen>\n      `;\n    }\n\n    const deviceName = computeDeviceName(device, this.hass);\n    const integrations = this._integrations(\n      device,\n      this.entries,\n      this.manifests\n    );\n    const entities = this._entities(this.deviceId, this._entityReg);\n    const entitiesByCategory = this._entitiesByCategory(entities);\n    const batteryEntity = this._batteryEntity(entities);\n    const batteryChargingEntity = this._batteryChargingEntity(entities);\n    const battery = batteryEntity\n      ? this.hass.states[batteryEntity.entity_id]\n      : undefined;\n    const batteryDomain = battery ? computeStateDomain(battery) : undefined;\n\n    const batteryChargingState = batteryChargingEntity\n      ? this.hass.states[batteryChargingEntity.entity_id]\n      : undefined;\n    const area = device.area_id ? this.hass.areas[device.area_id] : undefined;\n\n    const deviceInfo: TemplateResult[] = integrations.map(\n      (integration) =>\n        html`<a\n          slot=\"actions\"\n          href=${`/config/integrations/integration/${integration.domain}#config_entry=${integration.entry_id}`}\n        >\n          <ha-list-item graphic=\"icon\" hasMeta>\n            <img\n              slot=\"graphic\"\n              alt=${domainToName(this.hass.localize, integration.domain)}\n              src=${brandsUrl({\n                domain: integration.domain,\n                type: \"icon\",\n                darkOptimized: this.hass.themes?.darkMode,\n              })}\n              crossorigin=\"anonymous\"\n              referrerpolicy=\"no-referrer\"\n            />\n\n            ${domainToName(this.hass.localize, integration.domain)}\n            <ha-icon-next slot=\"meta\"></ha-icon-next>\n          </ha-list-item>\n        </a>`\n    );\n\n    const actions = [...(this._deviceActions || [])];\n    if (Array.isArray(this._diagnosticDownloadLinks)) {\n      actions.push(...this._diagnosticDownloadLinks);\n    }\n    if (this._deleteButtons) {\n      actions.push(...this._deleteButtons);\n    }\n\n    // Move all warning actions to the end\n    actions.sort((a, b) => {\n      if (a.classes === \"warning\" && b.classes !== \"warning\") {\n        return 1;\n      }\n      if (a.classes !== \"warning\" && b.classes === \"warning\") {\n        return -1;\n      }\n      return 0;\n    });\n\n    const firstDeviceAction = actions.shift();\n\n    if (device.disabled_by) {\n      deviceInfo.push(html`\n        <ha-alert alert-type=\"warning\">\n          ${this.hass.localize(\"ui.panel.config.devices.enabled_cause\", {\n            type: this.hass.localize(\n              `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n            ),\n            cause: this.hass.localize(\n              `ui.panel.config.devices.disabled_by.${device.disabled_by}`\n            ),\n          })}\n        </ha-alert>\n        ${device.disabled_by === \"user\"\n          ? html`\n              <div class=\"card-actions\" slot=\"actions\">\n                <mwc-button unelevated @click=${this._enableDevice}>\n                  ${this.hass.localize(\"ui.common.enable\")}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n      `);\n    }\n\n    this._renderIntegrationInfo(device, integrations, deviceInfo);\n\n    const automationCard = isComponentLoaded(this.hass, \"automation\")\n      ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\n                \"ui.panel.config.devices.automation.automations_heading\"\n              )}\n              <ha-icon-button\n                @click=${this._showAutomationDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by\n                  ? this.hass.localize(\n                      \"ui.panel.config.devices.automation.create_disable\",\n                      {\n                        type: this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        ),\n                      }\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.devices.automation.create\",\n                      {\n                        type: this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        ),\n                      }\n                    )}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${this._related?.automation?.length\n              ? html`\n                  <div class=\"items\">\n                    ${this._related.automation.map((automation) => {\n                      const entityState = this.hass.states[automation];\n                      return entityState\n                        ? html`<div>\n                            <a\n                              href=${ifDefined(\n                                entityState.attributes.id\n                                  ? `/config/automation/edit/${entityState.attributes.id}`\n                                  : undefined\n                              )}\n                            >\n                              <paper-item\n                                .automation=${entityState}\n                                .disabled=${!entityState.attributes.id}\n                              >\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                            ${!entityState.attributes.id\n                              ? html`\n                                  <simple-tooltip animation-delay=\"0\">\n                                    ${this.hass.localize(\n                                      \"ui.panel.config.devices.cant_edit\"\n                                    )}\n                                  </simple-tooltip>\n                                `\n                              : \"\"}\n                          </div> `\n                        : \"\";\n                    })}\n                  </div>\n                `\n              : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\"ui.panel.config.devices.add_prompt\", {\n                      name: this.hass.localize(\n                        \"ui.panel.config.devices.automation.automations\"\n                      ),\n                      type: this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      ),\n                    })}\n                  </div>\n                `}\n          </ha-card>\n        `\n      : \"\";\n\n    const sceneCard =\n      isComponentLoaded(this.hass, \"scene\") && entities.length\n        ? html`\n            <ha-card outlined>\n              <h1 class=\"card-header\">\n                ${this.hass.localize(\n                  \"ui.panel.config.devices.scene.scenes_heading\"\n                )}\n\n                <ha-icon-button\n                  @click=${this._createScene}\n                  .disabled=${device.disabled_by}\n                  .label=${device.disabled_by\n                    ? this.hass.localize(\n                        \"ui.panel.config.devices.scene.create_disable\",\n                        {\n                          type: this.hass.localize(\n                            `ui.panel.config.devices.type.${\n                              device.entry_type || \"device\"\n                            }`\n                          ),\n                        }\n                      )\n                    : this.hass.localize(\n                        \"ui.panel.config.devices.scene.create\",\n                        {\n                          type: this.hass.localize(\n                            `ui.panel.config.devices.type.${\n                              device.entry_type || \"device\"\n                            }`\n                          ),\n                        }\n                      )}\n                  .path=${mdiPlusCircle}\n                ></ha-icon-button>\n              </h1>\n              ${this._related?.scene?.length\n                ? html`\n                    <div class=\"items\">\n                      ${this._related.scene.map((scene) => {\n                        const entityState = this.hass.states[scene];\n                        return entityState\n                          ? html`\n                              <div>\n                                <a\n                                  href=${ifDefined(\n                                    entityState.attributes.id\n                                      ? `/config/scene/edit/${entityState.attributes.id}`\n                                      : undefined\n                                  )}\n                                >\n                                  <paper-item\n                                    .scene=${entityState}\n                                    .disabled=${!entityState.attributes.id}\n                                  >\n                                    <paper-item-body>\n                                      ${computeStateName(entityState)}\n                                    </paper-item-body>\n                                    <ha-icon-next></ha-icon-next>\n                                  </paper-item>\n                                </a>\n                                ${!entityState.attributes.id\n                                  ? html`\n                                      <simple-tooltip animation-delay=\"0\">\n                                        ${this.hass.localize(\n                                          \"ui.panel.config.devices.cant_edit\"\n                                        )}\n                                      </simple-tooltip>\n                                    `\n                                  : \"\"}\n                              </div>\n                            `\n                          : \"\";\n                      })}\n                    </div>\n                  `\n                : html`\n                    <div class=\"card-content\">\n                      ${this.hass.localize(\n                        \"ui.panel.config.devices.add_prompt\",\n                        {\n                          name: this.hass.localize(\n                            \"ui.panel.config.devices.scene.scenes\"\n                          ),\n                          type: this.hass.localize(\n                            `ui.panel.config.devices.type.${\n                              device.entry_type || \"device\"\n                            }`\n                          ),\n                        }\n                      )}\n                    </div>\n                  `}\n            </ha-card>\n          `\n        : \"\";\n\n    const scriptCard = isComponentLoaded(this.hass, \"script\")\n      ? html`\n          <ha-card outlined>\n            <h1 class=\"card-header\">\n              ${this.hass.localize(\n                \"ui.panel.config.devices.script.scripts_heading\"\n              )}\n              <ha-icon-button\n                @click=${this._showScriptDialog}\n                .disabled=${device.disabled_by}\n                .label=${device.disabled_by\n                  ? this.hass.localize(\n                      \"ui.panel.config.devices.script.create_disable\",\n                      {\n                        type: this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        ),\n                      }\n                    )\n                  : this.hass.localize(\n                      \"ui.panel.config.devices.script.create\",\n                      {\n                        type: this.hass.localize(\n                          `ui.panel.config.devices.type.${\n                            device.entry_type || \"device\"\n                          }`\n                        ),\n                      }\n                    )}\n                .path=${mdiPlusCircle}\n              ></ha-icon-button>\n            </h1>\n            ${this._related?.script?.length\n              ? html`\n                  <div class=\"items\">\n                    ${this._related.script.map((script) => {\n                      const entityState = this.hass.states[script];\n                      const entry = this._entityReg.find(\n                        (e) => e.entity_id === script\n                      );\n                      let url = `/config/script/show/${entityState.entity_id}`;\n                      if (entry) {\n                        url = `/config/script/edit/${entry.unique_id}`;\n                      }\n                      return entityState\n                        ? html`\n                            <a href=${url}>\n                              <paper-item .script=${script}>\n                                <paper-item-body>\n                                  ${computeStateName(entityState)}\n                                </paper-item-body>\n                                <ha-icon-next></ha-icon-next>\n                              </paper-item>\n                            </a>\n                          `\n                        : \"\";\n                    })}\n                  </div>\n                `\n              : html`\n                  <div class=\"card-content\">\n                    ${this.hass.localize(\"ui.panel.config.devices.add_prompt\", {\n                      name: this.hass.localize(\n                        \"ui.panel.config.devices.script.scripts\"\n                      ),\n                      type: this.hass.localize(\n                        `ui.panel.config.devices.type.${\n                          device.entry_type || \"device\"\n                        }`\n                      ),\n                    })}\n                  </div>\n                `}\n          </ha-card>\n        `\n      : \"\";\n\n    return html`\n      <hass-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .header=${deviceName}\n      >\n\n                <ha-icon-button\n                  slot=\"toolbar-icon\"\n                  .path=${mdiPencil}\n                  @click=${this._showSettings}\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.devices.edit_settings\"\n                  )}\n                ></ha-icon-button>\n        <div class=\"container\">\n          <div class=\"header fullwidth\">\n            ${\n              area\n                ? html`<div class=\"header-name\">\n                    <a href=\"/config/areas/area/${area.area_id}\"\n                      >${this.hass.localize(\n                        \"ui.panel.config.integrations.config_entry.area\",\n                        { area: area.name || \"Unnamed Area\" }\n                      )}</a\n                    >\n                  </div>`\n                : \"\"\n            }\n                <div class=\"header-right\">\n                  ${\n                    battery &&\n                    (batteryDomain === \"binary_sensor\" ||\n                      !isNaN(battery.state as any))\n                      ? html`\n                          <div class=\"battery\">\n                            ${batteryDomain === \"sensor\"\n                              ? this.hass.formatEntityState(battery)\n                              : nothing}\n                            <ha-battery-icon\n                              .hass=${this.hass}\n                              .batteryStateObj=${battery}\n                              .batteryChargingStateObj=${batteryChargingState}\n                            ></ha-battery-icon>\n                          </div>\n                        `\n                      : \"\"\n                  }\n                  ${\n                    integrations.length\n                      ? html`\n                          <img\n                            alt=${domainToName(\n                              this.hass.localize,\n                              integrations[0].domain\n                            )}\n                            src=${brandsUrl({\n                              domain: integrations[0].domain,\n                              type: \"logo\",\n                              darkOptimized: this.hass.themes?.darkMode,\n                            })}\n                            crossorigin=\"anonymous\"\n                            referrerpolicy=\"no-referrer\"\n                            @load=${this._onImageLoad}\n                            @error=${this._onImageError}\n                          />\n                        `\n                      : \"\"\n                  }\n\n                </div>\n          </div>\n          <div class=\"column\">\n              ${\n                this._deviceAlerts?.length\n                  ? html`\n                      <div>\n                        ${this._deviceAlerts.map(\n                          (alert) => html`\n                            <ha-alert .alertType=${alert.level}>\n                              ${alert.text}\n                            </ha-alert>\n                          `\n                        )}\n                      </div>\n                    `\n                  : \"\"\n              }\n              <ha-device-info-card\n                .hass=${this.hass}\n                .device=${device}\n              >\n                ${deviceInfo}\n                ${\n                  firstDeviceAction || actions.length\n                    ? html`\n                        <div class=\"card-actions\" slot=\"actions\">\n                          <div>\n                            <a\n                              href=${ifDefined(firstDeviceAction!.href)}\n                              rel=${ifDefined(\n                                firstDeviceAction!.target\n                                  ? \"noreferrer\"\n                                  : undefined\n                              )}\n                              target=${ifDefined(firstDeviceAction!.target)}\n                            >\n                              <mwc-button\n                                class=${ifDefined(firstDeviceAction!.classes)}\n                                .action=${firstDeviceAction!.action}\n                                @click=${this._deviceActionClicked}\n                                graphic=\"icon\"\n                              >\n                                ${firstDeviceAction!.label}\n                                ${firstDeviceAction!.icon\n                                  ? html`\n                                      <ha-svg-icon\n                                        class=${ifDefined(\n                                          firstDeviceAction!.classes\n                                        )}\n                                        .path=${firstDeviceAction!.icon}\n                                        slot=\"graphic\"\n                                      ></ha-svg-icon>\n                                    `\n                                  : \"\"}\n                                ${firstDeviceAction!.trailingIcon\n                                  ? html`\n                                      <ha-svg-icon\n                                        .path=${firstDeviceAction!.trailingIcon}\n                                        slot=\"trailingIcon\"\n                                      ></ha-svg-icon>\n                                    `\n                                  : \"\"}\n                              </mwc-button>\n                            </a>\n                          </div>\n\n                          ${actions.length\n                            ? html`\n                                <ha-button-menu>\n                                  <ha-icon-button\n                                    slot=\"trigger\"\n                                    .label=${this.hass.localize(\n                                      \"ui.common.menu\"\n                                    )}\n                                    .path=${mdiDotsVertical}\n                                  ></ha-icon-button>\n                                  ${actions.map((deviceAction) => {\n                                    const listItem = html`<mwc-list-item\n                                      class=${ifDefined(deviceAction.classes)}\n                                      .action=${deviceAction.action}\n                                      @click=${this._deviceActionClicked}\n                                      graphic=\"icon\"\n                                      .hasMeta=${Boolean(\n                                        deviceAction.trailingIcon\n                                      )}\n                                    >\n                                      ${deviceAction.label}\n                                      ${deviceAction.icon\n                                        ? html`\n                                            <ha-svg-icon\n                                              class=${ifDefined(\n                                                deviceAction.classes\n                                              )}\n                                              .path=${deviceAction.icon}\n                                              slot=\"graphic\"\n                                            ></ha-svg-icon>\n                                          `\n                                        : \"\"}\n                                      ${deviceAction.trailingIcon\n                                        ? html`\n                                            <ha-svg-icon\n                                              slot=\"meta\"\n                                              .path=${deviceAction.trailingIcon}\n                                            ></ha-svg-icon>\n                                          `\n                                        : \"\"}\n                                    </mwc-list-item>`;\n                                    return deviceAction.href\n                                      ? html`<a\n                                          href=${deviceAction.href}\n                                          target=${ifDefined(\n                                            deviceAction.target\n                                          )}\n                                          rel=${ifDefined(\n                                            deviceAction.target\n                                              ? \"noreferrer\"\n                                              : undefined\n                                          )}\n                                          >${listItem}\n                                        </a>`\n                                      : listItem;\n                                  })}\n                                </ha-button-menu>\n                              `\n                            : \"\"}\n                        </div>\n                      `\n                    : \"\"\n                }\n              </ha-device-info-card>\n            ${!this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n          </div>\n          <div class=\"column\">\n            ${(\n              [\"control\", \"sensor\", \"event\", \"config\", \"diagnostic\"] as const\n            ).map((category) =>\n              // Make sure we render controls if no other cards will be rendered\n              entitiesByCategory[category].length > 0 ||\n              (entities.length === 0 && category === \"control\")\n                ? html`\n                    <ha-device-entities-card\n                      .hass=${this.hass}\n                      .header=${this.hass.localize(\n                        `ui.panel.config.devices.entities.${category}`\n                      )}\n                      .deviceName=${deviceName}\n                      .entities=${entitiesByCategory[category]}\n                      .showHidden=${device.disabled_by !== null}\n                    >\n                    </ha-device-entities-card>\n                  `\n                : \"\"\n            )}\n            <ha-device-via-devices-card\n              .hass=${this.hass}\n              .deviceId=${this.deviceId}\n            ></ha-device-via-devices-card>\n          </div>\n          <div class=\"column\">\n            ${this.narrow ? [automationCard, sceneCard, scriptCard] : \"\"}\n            ${\n              isComponentLoaded(this.hass, \"logbook\")\n                ? html`\n                    <ha-card outlined>\n                      <h1 class=\"card-header\">\n                        ${this.hass.localize(\"panel.logbook\")}\n                      </h1>\n                      <ha-logbook\n                        .hass=${this.hass}\n                        .time=${this._logbookTime}\n                        .entityIds=${this._entityIds(entities)}\n                        .deviceIds=${this._deviceIdInList(this.deviceId)}\n                        virtualize\n                        narrow\n                        no-icon\n                      ></ha-logbook>\n                    </ha-card>\n                  `\n                : \"\"\n            }\n            </div>\n          </div>\n        </ha-config-section>\n      </hass-subpage>    `;\n  }\n\n  private async _getDiagnosticButtons(requestId: number): Promise<void> {\n    if (!isComponentLoaded(this.hass, \"diagnostics\")) {\n      return;\n    }\n\n    const device = this.hass.devices[this.deviceId];\n\n    if (!device) {\n      return;\n    }\n\n    let links = await Promise.all(\n      this._integrations(device, this.entries, this.manifests).map(\n        async (entry): Promise<boolean | { link: string; domain: string }> => {\n          if (entry.state !== \"loaded\") {\n            return false;\n          }\n          let info: DiagnosticInfo;\n          try {\n            info = await fetchDiagnosticHandler(this.hass, entry.domain);\n          } catch (err: any) {\n            if (err.code === \"not_found\") {\n              return false;\n            }\n            throw err;\n          }\n\n          if (!info.handlers.device && !info.handlers.config_entry) {\n            return false;\n          }\n          return {\n            link: info.handlers.device\n              ? getDeviceDiagnosticsDownloadUrl(entry.entry_id, this.deviceId)\n              : getConfigEntryDiagnosticsDownloadUrl(entry.entry_id),\n            domain: entry.domain,\n          };\n        }\n      )\n    );\n\n    links = links.filter(Boolean);\n\n    if (this._diagnosticDownloadLinks !== requestId) {\n      return;\n    }\n    if (links.length > 0) {\n      this._diagnosticDownloadLinks = (\n        links as { link: string; domain: string }[]\n      ).map((link) => ({\n        href: link.link,\n        icon: mdiDownload,\n        action: (ev) => this._signUrl(ev),\n        label:\n          links.length > 1\n            ? this.hass.localize(\n                `ui.panel.config.devices.download_diagnostics_integration`,\n                {\n                  integration: domainToName(this.hass.localize, link.domain),\n                }\n              )\n            : this.hass.localize(\n                `ui.panel.config.devices.download_diagnostics`\n              ),\n      }));\n    }\n  }\n\n  private _getDeleteActions() {\n    const device = this.hass.devices[this.deviceId];\n\n    if (!device) {\n      return;\n    }\n\n    const buttons: DeviceAction[] = [];\n    this._integrations(device, this.entries, this.manifests).forEach(\n      (entry) => {\n        if (entry.state !== \"loaded\" || !entry.supports_remove_device) {\n          return;\n        }\n        buttons.push({\n          action: async () => {\n            const confirmed = await showConfirmationDialog(this, {\n              text:\n                this._integrations(device, this.entries, this.manifests)\n                  .length > 1\n                  ? this.hass.localize(\n                      `ui.panel.config.devices.confirm_delete_integration`,\n                      {\n                        integration: domainToName(\n                          this.hass.localize,\n                          entry.domain\n                        ),\n                      }\n                    )\n                  : this.hass.localize(\n                      `ui.panel.config.devices.confirm_delete`\n                    ),\n            });\n\n            if (!confirmed) {\n              return;\n            }\n\n            await removeConfigEntryFromDevice(\n              this.hass!,\n              this.deviceId,\n              entry.entry_id\n            );\n          },\n          classes: \"warning\",\n          icon: mdiDelete,\n          label:\n            this._integrations(device, this.entries, this.manifests).length > 1\n              ? this.hass.localize(\n                  `ui.panel.config.devices.delete_device_integration`,\n                  {\n                    integration: domainToName(this.hass.localize, entry.domain),\n                  }\n                )\n              : this.hass.localize(`ui.panel.config.devices.delete_device`),\n        });\n      }\n    );\n\n    if (buttons.length > 0) {\n      this._deleteButtons = buttons;\n    }\n  }\n\n  private async _getDeviceActions() {\n    const device = this.hass.devices[this.deviceId];\n\n    if (!device) {\n      return;\n    }\n\n    const deviceActions: DeviceAction[] = [];\n\n    const configurationUrlIsHomeAssistant =\n      device.configuration_url?.startsWith(\"homeassistant://\") || false;\n\n    const configurationUrl = configurationUrlIsHomeAssistant\n      ? device.configuration_url!.replace(\"homeassistant://\", \"/\")\n      : device.configuration_url;\n\n    if (configurationUrl) {\n      deviceActions.push({\n        href: configurationUrl,\n        target: configurationUrlIsHomeAssistant ? undefined : \"_blank\",\n        icon: mdiCog,\n        label: this.hass.localize(\n          \"ui.panel.config.devices.open_configuration_url\"\n        ),\n        trailingIcon: mdiOpenInNew,\n      });\n    }\n\n    const domains = this._integrations(\n      device,\n      this.entries,\n      this.manifests\n    ).map((int) => int.domain);\n\n    if (domains.includes(\"mqtt\")) {\n      const mqtt = await import(\n        \"./device-detail/integration-elements/mqtt/device-actions\"\n      );\n      const actions = mqtt.getMQTTDeviceActions(this, device);\n      deviceActions.push(...actions);\n    }\n    if (domains.includes(\"zha\")) {\n      const zha = await import(\n        \"./device-detail/integration-elements/zha/device-actions\"\n      );\n      const actions = await zha.getZHADeviceActions(this, this.hass, device);\n      deviceActions.push(...actions);\n    }\n    if (domains.includes(\"zwave_js\")) {\n      const zwave = await import(\n        \"./device-detail/integration-elements/zwave_js/device-actions\"\n      );\n      const actions = await zwave.getZwaveDeviceActions(\n        this,\n        this.hass,\n        device\n      );\n      deviceActions.push(...actions);\n    }\n    if (domains.includes(\"matter\")) {\n      const matter = await import(\n        \"./device-detail/integration-elements/matter/device-actions\"\n      );\n      const actions = await matter.getMatterDeviceActions(\n        this,\n        this.hass,\n        device\n      );\n      deviceActions.push(...actions);\n    }\n\n    this._deviceActions = deviceActions;\n  }\n\n  private async _getDeviceAlerts() {\n    const device = this.hass.devices[this.deviceId];\n\n    if (!device) {\n      return;\n    }\n\n    const deviceAlerts: DeviceAlert[] = [];\n\n    const domains = this._integrations(\n      device,\n      this.entries,\n      this.manifests\n    ).map((int) => int.domain);\n\n    if (domains.includes(\"zwave_js\")) {\n      const zwave = await import(\n        \"./device-detail/integration-elements/zwave_js/device-alerts\"\n      );\n\n      const alerts = await zwave.getZwaveDeviceAlerts(this.hass, device);\n      deviceAlerts.push(...alerts);\n    }\n\n    if (deviceAlerts.length) {\n      this._deviceAlerts = deviceAlerts;\n    }\n  }\n\n  private _computeEntityName(entity: EntityRegistryEntry) {\n    if (entity.name) {\n      return entity.name;\n    }\n    const entityState = this.hass.states[entity.entity_id];\n    return entityState ? computeStateName(entityState) : null;\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"inline-block\";\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private async _findRelated() {\n    this._related = await findRelated(this.hass, \"device\", this.deviceId);\n  }\n\n  private _createScene() {\n    const entities: SceneEntities = {};\n    this._entities(this.deviceId, this._entityReg).forEach((entity) => {\n      entities[entity.entity_id] = \"\";\n    });\n    showSceneEditor({\n      entities,\n    });\n  }\n\n  private _showScriptDialog() {\n    showDeviceAutomationDialog(this, {\n      device: this.hass.devices[this.deviceId],\n      entityReg: this._entityReg,\n      script: true,\n    });\n  }\n\n  private _showAutomationDialog() {\n    showDeviceAutomationDialog(this, {\n      device: this.hass.devices[this.deviceId],\n      entityReg: this._entityReg,\n      script: false,\n    });\n  }\n\n  private _renderIntegrationInfo(\n    device: DeviceRegistryEntry,\n    integrations: ConfigEntry[],\n    deviceInfo: TemplateResult[]\n  ) {\n    const domains = integrations.map((int) => int.domain);\n    if (domains.includes(\"zha\")) {\n      import(\"./device-detail/integration-elements/zha/ha-device-info-zha\");\n      deviceInfo.push(html`\n        <ha-device-info-zha\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zha>\n      `);\n    }\n    if (domains.includes(\"zwave_js\")) {\n      import(\n        \"./device-detail/integration-elements/zwave_js/ha-device-info-zwave_js\"\n      );\n      deviceInfo.push(html`\n        <ha-device-info-zwave_js\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-zwave_js>\n      `);\n    }\n    if (domains.includes(\"matter\")) {\n      import(\n        \"./device-detail/integration-elements/matter/ha-device-info-matter\"\n      );\n      deviceInfo.push(html`\n        <ha-device-info-matter\n          .hass=${this.hass}\n          .device=${device}\n        ></ha-device-info-matter>\n      `);\n    }\n  }\n\n  private async _showSettings() {\n    const device = this.hass.devices[this.deviceId];\n    showDeviceRegistryDetailDialog(this, {\n      device,\n      updateEntry: async (updates) => {\n        const oldDeviceName = device.name_by_user || device.name;\n        const newDeviceName = updates.name_by_user;\n        const disabled =\n          updates.disabled_by === \"user\" && device.disabled_by !== \"user\";\n\n        if (disabled) {\n          for (const cnfg_entry of device.config_entries) {\n            if (\n              !Object.values(this.hass.devices).some(\n                (dvc) =>\n                  dvc.id !== device.id &&\n                  dvc.config_entries.includes(cnfg_entry)\n              )\n            ) {\n              const config_entry = this.entries.find(\n                (entry) => entry.entry_id === cnfg_entry\n              );\n              if (\n                config_entry &&\n                !config_entry.disabled_by &&\n                // eslint-disable-next-line no-await-in-loop\n                (await showConfirmationDialog(this, {\n                  title: this.hass.localize(\n                    \"ui.panel.config.devices.confirm_disable_config_entry\",\n                    { entry_name: config_entry.title }\n                  ),\n                  confirmText: this.hass.localize(\"ui.common.yes\"),\n                  dismissText: this.hass.localize(\"ui.common.no\"),\n                }))\n              ) {\n                let result: DisableConfigEntryResult;\n                try {\n                  // eslint-disable-next-line no-await-in-loop\n                  result = await disableConfigEntry(this.hass, cnfg_entry);\n                } catch (err: any) {\n                  showAlertDialog(this, {\n                    title: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_error\"\n                    ),\n                    text: err.message,\n                  });\n                  return;\n                }\n                if (result.require_restart) {\n                  showAlertDialog(this, {\n                    text: this.hass.localize(\n                      \"ui.panel.config.integrations.config_entry.disable_restart_confirm\"\n                    ),\n                  });\n                }\n                delete updates.disabled_by;\n              }\n            }\n          }\n        } else if (\n          updates.disabled_by !== null &&\n          updates.disabled_by !== \"user\"\n        ) {\n          delete updates.disabled_by;\n        }\n        try {\n          await updateDeviceRegistryEntry(this.hass, this.deviceId, updates);\n        } catch (err: any) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.update_device_error\"\n            ),\n            text: err.message,\n          });\n          return;\n        }\n\n        if (\n          !oldDeviceName ||\n          !newDeviceName ||\n          oldDeviceName === newDeviceName\n        ) {\n          return;\n        }\n        const entities = this._entities(this.deviceId, this._entityReg);\n\n        const renameEntityid =\n          this.showAdvanced &&\n          (await showConfirmationDialog(this, {\n            title: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids\"\n            ),\n            text: this.hass.localize(\n              \"ui.panel.config.devices.confirm_rename_entity_ids_warning\"\n            ),\n            confirmText: this.hass.localize(\"ui.common.rename\"),\n            dismissText: this.hass.localize(\"ui.common.no\"),\n            warning: true,\n          }));\n\n        const updateProms = entities.map((entity) => {\n          const name = entity.name || entity.stateName;\n          let newEntityId: string | undefined;\n          let newName: string | null | undefined;\n\n          let shouldUpdateName: boolean;\n          let shouldUpdateEntityId = false;\n\n          if (entity.has_entity_name && !entity.name) {\n            shouldUpdateName = false;\n          } else if (\n            entity.has_entity_name &&\n            (entity.name === oldDeviceName || entity.name === newDeviceName)\n          ) {\n            shouldUpdateName = true;\n            // clear name if it matches the device name and it uses the device name (entity naming)\n            newName = null;\n          } else if (name && name.includes(oldDeviceName)) {\n            shouldUpdateName = true;\n            newName = name.replace(oldDeviceName, newDeviceName);\n          } else {\n            shouldUpdateName = false;\n          }\n\n          if (renameEntityid) {\n            const oldSearch = slugify(oldDeviceName);\n            if (entity.entity_id.includes(oldSearch)) {\n              shouldUpdateEntityId = true;\n              newEntityId = entity.entity_id.replace(\n                oldSearch,\n                slugify(newDeviceName)\n              );\n            }\n          }\n\n          if (newName === undefined && newEntityId === undefined) {\n            return undefined;\n          }\n\n          return updateEntityRegistryEntry(this.hass!, entity.entity_id, {\n            name: shouldUpdateName ? newName : undefined,\n            new_entity_id: shouldUpdateEntityId ? newEntityId : undefined,\n          });\n        });\n        await Promise.all(updateProms);\n      },\n    });\n  }\n\n  private async _enableDevice(): Promise<void> {\n    await updateDeviceRegistryEntry(this.hass, this.deviceId, {\n      disabled_by: null,\n    });\n  }\n\n  private async _signUrl(ev) {\n    const anchor = ev.currentTarget.closest(\"a\");\n    const signedUrl = await getSignedPath(\n      this.hass,\n      anchor.getAttribute(\"href\")\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private _deviceActionClicked(ev) {\n    if (!ev.currentTarget.action) {\n      return;\n    }\n\n    ev.preventDefault();\n\n    (ev.currentTarget as any).action(ev);\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .container {\n          display: flex;\n          flex-wrap: wrap;\n          margin: auto;\n          max-width: 1000px;\n          margin-top: 32px;\n          margin-bottom: 32px;\n        }\n\n        .card-header {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          padding-bottom: 12px;\n        }\n\n        .card-header ha-icon-button {\n          margin-right: -8px;\n          margin-inline-end: -8px;\n          margin-inline-start: initial;\n          color: var(--primary-color);\n          height: auto;\n          direction: var(--direction);\n        }\n\n        .device-info {\n          padding: 16px;\n        }\n\n        h1 {\n          margin: 0;\n          font-family: var(--paper-font-headline_-_font-family);\n          -webkit-font-smoothing: var(\n            --paper-font-headline_-_-webkit-font-smoothing\n          );\n          font-size: var(--paper-font-headline_-_font-size);\n          font-weight: var(--paper-font-headline_-_font-weight);\n          letter-spacing: var(--paper-font-headline_-_letter-spacing);\n          line-height: var(--paper-font-headline_-_line-height);\n          opacity: var(--dark-primary-opacity);\n        }\n\n        .header {\n          display: flex;\n          justify-content: space-between;\n        }\n\n        .header-name {\n          display: flex;\n          align-items: center;\n          padding-left: 8px;\n          padding-inline-start: 8px;\n          direction: var(--direction);\n        }\n\n        .column,\n        .fullwidth {\n          padding: 8px;\n          box-sizing: border-box;\n        }\n        .column {\n          width: 33%;\n          flex-grow: 1;\n        }\n        .fullwidth {\n          width: 100%;\n          flex-grow: 1;\n        }\n\n        .header-right {\n          align-self: center;\n        }\n\n        .header-right img {\n          height: 30px;\n        }\n\n        .header-right {\n          display: flex;\n        }\n\n        .header-right:first-child {\n          width: 100%;\n          justify-content: flex-end;\n        }\n\n        .header-right > *:not(:first-child) {\n          margin-left: 16px;\n          margin-inline-start: 16px;\n          margin-inline-end: initial;\n          direction: var(--direction);\n        }\n\n        .battery {\n          align-self: center;\n          align-items: center;\n          display: flex;\n          white-space: nowrap;\n        }\n\n        .column > *:not(:first-child) {\n          margin-top: 16px;\n        }\n\n        :host([narrow]) .column {\n          width: 100%;\n        }\n\n        :host([narrow]) .container {\n          margin-top: 0;\n        }\n\n        paper-item {\n          cursor: pointer;\n          font-size: var(--paper-font-body1_-_font-size);\n        }\n\n        a {\n          text-decoration: none;\n          color: var(--primary-color);\n        }\n\n        ha-card a {\n          color: var(--primary-text-color);\n        }\n\n        ha-svg-icon[slot=\"trailingIcon\"] {\n          display: block;\n          width: 18px;\n          height: 18px;\n        }\n\n        ha-svg-icon[slot=\"meta\"] {\n          width: 18px;\n          height: 18px;\n        }\n\n        .items {\n          padding-bottom: 16px;\n        }\n\n        ha-logbook {\n          height: 400px;\n        }\n        :host([narrow]) ha-logbook {\n          height: 235px;\n        }\n\n        .card-actions {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-device-page\": HaConfigDevicePage;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}