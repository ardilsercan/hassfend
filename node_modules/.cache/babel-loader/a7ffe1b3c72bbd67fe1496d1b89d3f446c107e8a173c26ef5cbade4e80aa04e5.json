{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { VirtualKeyboardController } from '@vaadin/field-base/src/virtual-keyboard-controller.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * Checks if the value is supported as an item value in this control.\n *\n * @param {unknown} value\n * @return {boolean}\n */\nfunction isValidValue(value) {\n  return value !== undefined && value !== null;\n}\n\n/**\n * Returns the index of the first item that satisfies the provided testing function\n * ignoring placeholder items.\n *\n * @param {Array<ComboBoxItem | string>} items\n * @param {Function} callback\n * @return {number}\n */\nfunction findItemIndex(items, callback) {\n  return items.findIndex(item => {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    }\n    return callback(item);\n  });\n}\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes ValidateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n * @mixes FocusMixin\n * @mixes OverlayClassMixin\n * @param {function(new:HTMLElement)} subclass\n */\nexport const ComboBoxMixin = subclass => class ComboBoxMixinClass extends OverlayClassMixin(ControllerMixin(ValidateMixin(FocusMixin(KeyboardMixin(InputMixin(DisabledMixin(subclass))))))) {\n  static get properties() {\n    return {\n      /**\n       * True if the dropdown is open, false otherwise.\n       * @type {boolean}\n       */\n      opened: {\n        type: Boolean,\n        notify: true,\n        value: false,\n        reflectToAttribute: true,\n        observer: '_openedChanged'\n      },\n      /**\n       * Set true to prevent the overlay from opening automatically.\n       * @attr {boolean} auto-open-disabled\n       */\n      autoOpenDisabled: {\n        type: Boolean\n      },\n      /**\n       * When present, it specifies that the field is read-only.\n       * @type {boolean}\n       */\n      readonly: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * Custom function for rendering the content of every item.\n       * Receives three arguments:\n       *\n       * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\n       * - `comboBox` The reference to the `<vaadin-combo-box>` element.\n       * - `model` The object with the properties related with the rendered\n       *   item, contains:\n       *   - `model.index` The index of the rendered item.\n       *   - `model.item` The item.\n       * @type {ComboBoxRenderer | undefined}\n       */\n      renderer: Function,\n      /**\n       * A full set of items to filter the visible options from.\n       * The items can be of either `String` or `Object` type.\n       * @type {!Array<!ComboBoxItem | string> | undefined}\n       */\n      items: {\n        type: Array,\n        observer: '_itemsChanged'\n      },\n      /**\n       * If `true`, the user can input a value that is not present in the items list.\n       * `value` property will be set to the input value in this case.\n       * Also, when `value` is set programmatically, the input value will be set\n       * to reflect that value.\n       * @attr {boolean} allow-custom-value\n       * @type {boolean}\n       */\n      allowCustomValue: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * A subset of items, filtered based on the user input. Filtered items\n       * can be assigned directly to omit the internal filtering functionality.\n       * The items can be of either `String` or `Object` type.\n       * @type {!Array<!ComboBoxItem | string> | undefined}\n       */\n      filteredItems: {\n        type: Array,\n        observer: '_filteredItemsChanged'\n      },\n      /**\n       * Used to detect user value changes and fire `change` events.\n       * @private\n       */\n      _lastCommittedValue: String,\n      /**\n       * When set to `true`, \"loading\" attribute is added to host and the overlay element.\n       * @type {boolean}\n       */\n      loading: {\n        type: Boolean,\n        value: false,\n        reflectToAttribute: true\n      },\n      /**\n       * @type {number}\n       * @protected\n       */\n      _focusedIndex: {\n        type: Number,\n        observer: '_focusedIndexChanged',\n        value: -1\n      },\n      /**\n       * Filtering string the user has typed into the input field.\n       * @type {string}\n       */\n      filter: {\n        type: String,\n        value: '',\n        notify: true\n      },\n      /**\n       * The selected item from the `items` array.\n       * @type {ComboBoxItem | string | undefined}\n       */\n      selectedItem: {\n        type: Object,\n        notify: true\n      },\n      /**\n       * Path for label of the item. If `items` is an array of objects, the\n       * `itemLabelPath` is used to fetch the displayed string label for each\n       * item.\n       *\n       * The item label is also used for matching items when processing user\n       * input, i.e., for filtering and selecting items.\n       * @attr {string} item-label-path\n       * @type {string}\n       */\n      itemLabelPath: {\n        type: String,\n        value: 'label',\n        observer: '_itemLabelPathChanged'\n      },\n      /**\n       * Path for the value of the item. If `items` is an array of objects, the\n       * `itemValuePath:` is used to fetch the string value for the selected\n       * item.\n       *\n       * The item value is used in the `value` property of the combo box,\n       * to provide the form value.\n       * @attr {string} item-value-path\n       * @type {string}\n       */\n      itemValuePath: {\n        type: String,\n        value: 'value'\n      },\n      /**\n       * Path for the id of the item. If `items` is an array of objects,\n       * the `itemIdPath` is used to compare and identify the same item\n       * in `selectedItem` and `filteredItems` (items given by the\n       * `dataProvider` callback).\n       * @attr {string} item-id-path\n       */\n      itemIdPath: String,\n      /**\n       * @type {!HTMLElement | undefined}\n       * @protected\n       */\n      _toggleElement: {\n        type: Object,\n        observer: '_toggleElementChanged'\n      },\n      /**\n       * Set of items to be rendered in the dropdown.\n       * @protected\n       */\n      _dropdownItems: {\n        type: Array\n      },\n      /** @private */\n      _closeOnBlurIsPrevented: Boolean,\n      /** @private */\n      _scroller: Object,\n      /** @private */\n      _overlayOpened: {\n        type: Boolean,\n        observer: '_overlayOpenedChanged'\n      }\n    };\n  }\n  static get observers() {\n    return ['_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)', '_openedOrItemsChanged(opened, _dropdownItems, loading)', '_updateScroller(_scroller, _dropdownItems, opened, loading, selectedItem, itemIdPath, _focusedIndex, renderer, theme)'];\n  }\n  constructor() {\n    super();\n    this._boundOverlaySelectedItemChanged = this._overlaySelectedItemChanged.bind(this);\n    this._boundOnClearButtonMouseDown = this.__onClearButtonMouseDown.bind(this);\n    this._boundOnClick = this._onClick.bind(this);\n    this._boundOnOverlayTouchAction = this._onOverlayTouchAction.bind(this);\n    this._boundOnTouchend = this._onTouchend.bind(this);\n  }\n\n  /**\n   * Tag name prefix used by scroller and items.\n   * @protected\n   * @return {string}\n   */\n  get _tagNamePrefix() {\n    return 'vaadin-combo-box';\n  }\n\n  /**\n   * Get a reference to the native `<input>` element.\n   * Override to provide a custom input.\n   * @protected\n   * @return {HTMLInputElement | undefined}\n   */\n  get _nativeInput() {\n    return this.inputElement;\n  }\n\n  /**\n   * Override method inherited from `InputMixin`\n   * to customize the input element.\n   * @protected\n   * @override\n   */\n  _inputElementChanged(inputElement) {\n    super._inputElementChanged(inputElement);\n    const input = this._nativeInput;\n    if (input) {\n      input.autocomplete = 'off';\n      input.autocapitalize = 'off';\n      input.setAttribute('role', 'combobox');\n      input.setAttribute('aria-autocomplete', 'list');\n      input.setAttribute('aria-expanded', !!this.opened);\n\n      // Disable the macOS Safari spell check auto corrections.\n      input.setAttribute('spellcheck', 'false');\n\n      // Disable iOS autocorrect suggestions.\n      input.setAttribute('autocorrect', 'off');\n      this._revertInputValueToValue();\n      if (this.clearElement) {\n        this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\n      }\n    }\n  }\n\n  /** @protected */\n  ready() {\n    super.ready();\n    this._initOverlay();\n    this._initScroller();\n    this._lastCommittedValue = this.value;\n    this.addEventListener('click', this._boundOnClick);\n    this.addEventListener('touchend', this._boundOnTouchend);\n    const bringToFrontListener = () => {\n      requestAnimationFrame(() => {\n        this._overlayElement.bringToFront();\n      });\n    };\n    this.addEventListener('mousedown', bringToFrontListener);\n    this.addEventListener('touchstart', bringToFrontListener);\n    processTemplates(this);\n    this.addController(new VirtualKeyboardController(this));\n  }\n\n  /** @protected */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n\n    // Close the overlay on detach\n    this.close();\n  }\n\n  /**\n   * Requests an update for the content of items.\n   * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n   *\n   * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n   */\n  requestContentUpdate() {\n    if (!this._scroller) {\n      return;\n    }\n    this._scroller.requestContentUpdate();\n    this._getItemElements().forEach(item => {\n      item.requestContentUpdate();\n    });\n  }\n\n  /**\n   * Opens the dropdown list.\n   */\n  open() {\n    // Prevent _open() being called when input is disabled or read-only\n    if (!this.disabled && !this.readonly) {\n      this.opened = true;\n    }\n  }\n\n  /**\n   * Closes the dropdown list.\n   */\n  close() {\n    this.opened = false;\n  }\n\n  /**\n   * Override Polymer lifecycle callback to handle `filter` property change after\n   * the observer for `opened` property is triggered. This is needed when opening\n   * combo-box on user input to ensure the focused index is set correctly.\n   *\n   * @param {!Object} currentProps Current accessor values\n   * @param {?Object} changedProps Properties changed since the last call\n   * @param {?Object} oldProps Previous values for each changed property\n   * @protected\n   * @override\n   */\n  _propertiesChanged(currentProps, changedProps, oldProps) {\n    super._propertiesChanged(currentProps, changedProps, oldProps);\n    if (changedProps.filter !== undefined) {\n      this._filterChanged(changedProps.filter);\n    }\n  }\n\n  /** @private */\n  _initOverlay() {\n    const overlay = this.$.overlay;\n\n    // Store instance for detecting \"dir\" attribute on opening\n    overlay._comboBox = this;\n    overlay.addEventListener('touchend', this._boundOnOverlayTouchAction);\n    overlay.addEventListener('touchmove', this._boundOnOverlayTouchAction);\n\n    // Prevent blurring the input when clicking inside the overlay\n    overlay.addEventListener('mousedown', e => e.preventDefault());\n\n    // Manual two-way binding for the overlay \"opened\" property\n    overlay.addEventListener('opened-changed', e => {\n      this._overlayOpened = e.detail.value;\n    });\n    this._overlayElement = overlay;\n  }\n\n  /**\n   * Create and initialize the scroller element.\n   * Override to provide custom host reference.\n   *\n   * @protected\n   */\n  _initScroller(host) {\n    const scrollerTag = `${this._tagNamePrefix}-scroller`;\n    const overlay = this._overlayElement;\n    overlay.renderer = root => {\n      if (!root.firstChild) {\n        root.appendChild(document.createElement(scrollerTag));\n      }\n    };\n\n    // Ensure the scroller is rendered\n    overlay.requestContentUpdate();\n    const scroller = overlay.querySelector(scrollerTag);\n    scroller.owner = host || this;\n    scroller.getItemLabel = this._getItemLabel.bind(this);\n    scroller.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\n\n    // Trigger the observer to set properties\n    this._scroller = scroller;\n  }\n\n  /** @private */\n  // eslint-disable-next-line max-params\n  _updateScroller(scroller, items, opened, loading, selectedItem, itemIdPath, focusedIndex, renderer, theme) {\n    if (scroller) {\n      if (opened) {\n        scroller.style.maxHeight = getComputedStyle(this).getPropertyValue(`--${this._tagNamePrefix}-overlay-max-height`) || '65vh';\n      }\n      scroller.setProperties({\n        items: opened ? items : [],\n        opened,\n        loading,\n        selectedItem,\n        itemIdPath,\n        focusedIndex,\n        renderer,\n        theme\n      });\n    }\n  }\n\n  /** @private */\n  _openedOrItemsChanged(opened, items, loading) {\n    // Close the overlay if there are no items to display.\n    // See https://github.com/vaadin/vaadin-combo-box/pull/964\n    this._overlayOpened = !!(opened && (loading || items && items.length));\n  }\n\n  /** @private */\n  _overlayOpenedChanged(opened, wasOpened) {\n    if (opened) {\n      this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', {\n        bubbles: true,\n        composed: true\n      }));\n      this._onOpened();\n    } else if (wasOpened && this._dropdownItems && this._dropdownItems.length) {\n      this.close();\n      this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', {\n        bubbles: true,\n        composed: true\n      }));\n    }\n  }\n\n  /** @private */\n  _focusedIndexChanged(index, oldIndex) {\n    if (oldIndex === undefined) {\n      return;\n    }\n    this._updateActiveDescendant(index);\n  }\n\n  /** @protected */\n  _isInputFocused() {\n    return this.inputElement && isElementFocused(this.inputElement);\n  }\n\n  /** @private */\n  _updateActiveDescendant(index) {\n    const input = this._nativeInput;\n    if (!input) {\n      return;\n    }\n    const item = this._getItemElements().find(el => el.index === index);\n    if (item) {\n      input.setAttribute('aria-activedescendant', item.id);\n    } else {\n      input.removeAttribute('aria-activedescendant');\n    }\n  }\n\n  /** @private */\n  _openedChanged(opened, wasOpened) {\n    // Prevent _close() being called when opened is set to its default value (false).\n    if (wasOpened === undefined) {\n      return;\n    }\n    if (opened) {\n      this._openedWithFocusRing = this.hasAttribute('focus-ring');\n      // For touch devices, we don't want to popup virtual keyboard\n      // unless input element is explicitly focused by the user.\n      if (!this._isInputFocused() && !isTouch) {\n        if (this.inputElement) {\n          this.inputElement.focus();\n        }\n      }\n      this._overlayElement.restoreFocusOnClose = true;\n    } else {\n      this._onClosed();\n      if (this._openedWithFocusRing && this._isInputFocused()) {\n        this.setAttribute('focus-ring', '');\n      }\n    }\n    const input = this._nativeInput;\n    if (input) {\n      input.setAttribute('aria-expanded', !!opened);\n      if (opened) {\n        input.setAttribute('aria-controls', this._scroller.id);\n      } else {\n        input.removeAttribute('aria-controls');\n      }\n    }\n  }\n\n  /** @private */\n  _onOverlayTouchAction() {\n    // On touch devices, blur the input on touch start inside the overlay, in order to hide\n    // the virtual keyboard. But don't close the overlay on this blur.\n    this._closeOnBlurIsPrevented = true;\n    this.inputElement.blur();\n    this._closeOnBlurIsPrevented = false;\n  }\n\n  /** @protected */\n  _isClearButton(event) {\n    return event.composedPath()[0] === this.clearElement;\n  }\n\n  /** @private */\n  __onClearButtonMouseDown(event) {\n    event.preventDefault(); // Prevent native focusout event\n    this.inputElement.focus();\n  }\n\n  /**\n   * @param {Event} event\n   * @protected\n   */\n  _onClearButtonClick(event) {\n    event.preventDefault();\n    this._onClearAction();\n\n    // De-select dropdown item\n    if (this.opened) {\n      this.requestContentUpdate();\n    }\n  }\n\n  /**\n   * @param {Event} event\n   * @private\n   */\n  _onToggleButtonClick(event) {\n    // Prevent parent components such as `vaadin-grid`\n    // from handling the click event after it bubbles.\n    event.preventDefault();\n    if (this.opened) {\n      this.close();\n    } else {\n      this.open();\n    }\n  }\n\n  /**\n   * @param {Event} event\n   * @protected\n   */\n  _onHostClick(event) {\n    if (!this.autoOpenDisabled) {\n      event.preventDefault();\n      this.open();\n    }\n  }\n\n  /** @private */\n  _onClick(event) {\n    if (this._isClearButton(event)) {\n      this._onClearButtonClick(event);\n    } else if (event.composedPath().includes(this._toggleElement)) {\n      this._onToggleButtonClick(event);\n    } else {\n      this._onHostClick(event);\n    }\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   *\n   * @param {KeyboardEvent} e\n   * @protected\n   * @override\n   */\n  _onKeyDown(e) {\n    super._onKeyDown(e);\n    if (e.key === 'Tab') {\n      this._overlayElement.restoreFocusOnClose = false;\n    } else if (e.key === 'ArrowDown') {\n      this._onArrowDown();\n\n      // Prevent caret from moving\n      e.preventDefault();\n    } else if (e.key === 'ArrowUp') {\n      this._onArrowUp();\n\n      // Prevent caret from moving\n      e.preventDefault();\n    }\n  }\n\n  /** @private */\n  _getItemLabel(item) {\n    let label = item && this.itemLabelPath ? get(this.itemLabelPath, item) : undefined;\n    if (label === undefined || label === null) {\n      label = item ? item.toString() : '';\n    }\n    return label;\n  }\n\n  /** @private */\n  _getItemValue(item) {\n    let value = item && this.itemValuePath ? get(this.itemValuePath, item) : undefined;\n    if (value === undefined) {\n      value = item ? item.toString() : '';\n    }\n    return value;\n  }\n\n  /** @private */\n  _onArrowDown() {\n    if (this.opened) {\n      const items = this._dropdownItems;\n      if (items) {\n        this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\n        this._prefillFocusedItemLabel();\n      }\n    } else {\n      this.open();\n    }\n  }\n\n  /** @private */\n  _onArrowUp() {\n    if (this.opened) {\n      if (this._focusedIndex > -1) {\n        this._focusedIndex = Math.max(0, this._focusedIndex - 1);\n      } else {\n        const items = this._dropdownItems;\n        if (items) {\n          this._focusedIndex = items.length - 1;\n        }\n      }\n      this._prefillFocusedItemLabel();\n    } else {\n      this.open();\n    }\n  }\n\n  /** @private */\n  _prefillFocusedItemLabel() {\n    if (this._focusedIndex > -1) {\n      const focusedItem = this._dropdownItems[this._focusedIndex];\n      this._inputElementValue = this._getItemLabel(focusedItem);\n      this._markAllSelectionRange();\n    }\n  }\n\n  /** @private */\n  _setSelectionRange(start, end) {\n    // Setting selection range focuses and/or moves the caret in some browsers,\n    // and there's no need to modify the selection range if the input isn't focused anyway.\n    // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\n    // the next focusable element instead of the combo-box itself.\n    if (this._isInputFocused() && this.inputElement.setSelectionRange) {\n      this.inputElement.setSelectionRange(start, end);\n    }\n  }\n\n  /** @private */\n  _markAllSelectionRange() {\n    if (this._inputElementValue !== undefined) {\n      this._setSelectionRange(0, this._inputElementValue.length);\n    }\n  }\n\n  /** @private */\n  _clearSelectionRange() {\n    if (this._inputElementValue !== undefined) {\n      const pos = this._inputElementValue ? this._inputElementValue.length : 0;\n      this._setSelectionRange(pos, pos);\n    }\n  }\n\n  /** @private */\n  _closeOrCommit() {\n    if (!this.opened && !this.loading) {\n      this._commitValue();\n    } else {\n      this.close();\n    }\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   *\n   * @param {KeyboardEvent} e\n   * @protected\n   * @override\n   */\n  _onEnter(e) {\n    // Do not commit value when custom values are disallowed and input value is not a valid option\n    // also stop propagation of the event, otherwise the user could submit a form while the input\n    // still contains an invalid value\n    if (!this._hasValidInputValue()) {\n      // Do not submit the surrounding form.\n      e.preventDefault();\n      // Do not trigger global listeners\n      e.stopPropagation();\n      return;\n    }\n\n    // Stop propagation of the enter event only if the dropdown is opened, this\n    // \"consumes\" the enter event for the action of closing the dropdown\n    if (this.opened) {\n      // Do not submit the surrounding form.\n      e.preventDefault();\n      // Do not trigger global listeners\n      e.stopPropagation();\n    }\n    this._closeOrCommit();\n  }\n\n  /**\n   * @protected\n   */\n  _hasValidInputValue() {\n    const hasInvalidOption = this._focusedIndex < 0 && this._inputElementValue !== '' && this._getItemLabel(this.selectedItem) !== this._inputElementValue;\n    return this.allowCustomValue || !hasInvalidOption;\n  }\n\n  /**\n   * Override an event listener from `KeyboardMixin`.\n   * Do not call `super` in order to override clear\n   * button logic defined in `InputControlMixin`.\n   *\n   * @param {!KeyboardEvent} e\n   * @protected\n   * @override\n   */\n  _onEscape(e) {\n    if (this.autoOpenDisabled) {\n      // Auto-open is disabled\n      if (this.opened || this.value !== this._inputElementValue && this._inputElementValue.length > 0) {\n        // The overlay is open or\n        // The input value has changed but the change hasn't been committed, so cancel it.\n        e.stopPropagation();\n        this._focusedIndex = -1;\n        this.cancel();\n      } else if (this.clearButtonVisible && !this.opened && !!this.value) {\n        e.stopPropagation();\n        // The clear button is visible and the overlay is closed, so clear the value.\n        this._onClearAction();\n      }\n    } else if (this.opened) {\n      // Auto-open is enabled\n      // The overlay is open\n      e.stopPropagation();\n      if (this._focusedIndex > -1) {\n        // An item is focused, revert the input to the filtered value\n        this._focusedIndex = -1;\n        this._revertInputValue();\n      } else {\n        // No item is focused, cancel the change and close the overlay\n        this.cancel();\n      }\n    } else if (this.clearButtonVisible && !!this.value) {\n      e.stopPropagation();\n      // The clear button is visible and the overlay is closed, so clear the value.\n      this._onClearAction();\n    }\n  }\n\n  /** @private */\n  _toggleElementChanged(toggleElement) {\n    if (toggleElement) {\n      // Don't blur the input on toggle mousedown\n      toggleElement.addEventListener('mousedown', e => e.preventDefault());\n      // Unfocus previously focused element if focus is not inside combo box (on touch devices)\n      toggleElement.addEventListener('click', () => {\n        if (isTouch && !this._isInputFocused()) {\n          document.activeElement.blur();\n        }\n      });\n    }\n  }\n\n  /**\n   * Clears the current value.\n   * @protected\n   */\n  _onClearAction() {\n    this.selectedItem = null;\n    if (this.allowCustomValue) {\n      this.value = '';\n    }\n    this._detectAndDispatchChange();\n  }\n\n  /**\n   * Reverts back to original value.\n   */\n  cancel() {\n    this._revertInputValueToValue();\n    // In the next _detectAndDispatchChange() call, the change detection should not pass\n    this._lastCommittedValue = this.value;\n    this._closeOrCommit();\n  }\n\n  /** @private */\n  _onOpened() {\n    // _detectAndDispatchChange() should not consider value changes done before opening\n    this._lastCommittedValue = this.value;\n  }\n\n  /** @private */\n  _onClosed() {\n    if (!this.loading || this.allowCustomValue) {\n      this._commitValue();\n    }\n  }\n\n  /** @private */\n  _commitValue() {\n    if (this._focusedIndex > -1) {\n      const focusedItem = this._dropdownItems[this._focusedIndex];\n      if (this.selectedItem !== focusedItem) {\n        this.selectedItem = focusedItem;\n      }\n      // Make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\n      this._inputElementValue = this._getItemLabel(this.selectedItem);\n      this._focusedIndex = -1;\n    } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\n      this.selectedItem = null;\n      if (this.allowCustomValue) {\n        this.value = '';\n      }\n    } else {\n      // Try to find an item which label matches the input value.\n      const items = [this.selectedItem, ...(this._dropdownItems || [])];\n      const itemMatchingInputValue = items[this.__getItemIndexByLabel(items, this._inputElementValue)];\n      if (this.allowCustomValue &&\n      // To prevent a repetitive input value being saved after pressing ESC and Tab.\n      !itemMatchingInputValue) {\n        const customValue = this._inputElementValue;\n\n        // Store reference to the last custom value for checking it on focusout.\n        this._lastCustomValue = customValue;\n\n        // An item matching by label was not found, but custom values are allowed.\n        // Dispatch a custom-value-set event with the input value.\n        const e = new CustomEvent('custom-value-set', {\n          detail: customValue,\n          composed: true,\n          cancelable: true,\n          bubbles: true\n        });\n        this.dispatchEvent(e);\n        if (!e.defaultPrevented) {\n          this.value = customValue;\n        }\n      } else if (!this.allowCustomValue && !this.opened && itemMatchingInputValue) {\n        // An item matching by label was found, select it.\n        this.value = this._getItemValue(itemMatchingInputValue);\n      } else {\n        // Revert the input value\n        this._inputElementValue = this.selectedItem ? this._getItemLabel(this.selectedItem) : this.value || '';\n      }\n    }\n    this._detectAndDispatchChange();\n    this._clearSelectionRange();\n    this.filter = '';\n  }\n\n  /**\n   * Override an event listener from `InputMixin`.\n   * @param {!Event} event\n   * @protected\n   * @override\n   */\n  _onInput(event) {\n    const filter = this._inputElementValue;\n\n    // When opening dropdown on user input, both `opened` and `filter` properties are set.\n    // Perform a batched property update instead of relying on sync property observers.\n    // This is necessary to avoid an extra data-provider request for loading first page.\n    const props = {};\n    if (this.filter === filter) {\n      // Filter and input value might get out of sync, while keyboard navigating for example.\n      // Afterwards, input value might be changed to the same value as used in filtering.\n      // In situation like these, we need to make sure all the filter changes handlers are run.\n      this._filterChanged(this.filter);\n    } else {\n      props.filter = filter;\n    }\n    if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\n      props.opened = true;\n    }\n    this.setProperties(props);\n  }\n\n  /**\n   * Override an event listener from `InputMixin`.\n   * @param {!Event} event\n   * @protected\n   * @override\n   */\n  _onChange(event) {\n    // Suppress the native change event fired on the native input.\n    // We use `_detectAndDispatchChange` to fire a custom event.\n    event.stopPropagation();\n  }\n\n  /** @private */\n  _itemLabelPathChanged(itemLabelPath) {\n    if (typeof itemLabelPath !== 'string') {\n      console.error('You should set itemLabelPath to a valid string');\n    }\n  }\n\n  /** @private */\n  _filterChanged(filter) {\n    // Scroll to the top of the list whenever the filter changes.\n    this._scrollIntoView(0);\n    this._focusedIndex = -1;\n    if (this.items) {\n      this.filteredItems = this._filterItems(this.items, filter);\n    } else {\n      // With certain use cases (e. g., external filtering), `items` are\n      // undefined. Filtering is unnecessary per se, but the filteredItems\n      // observer should still be invoked to update focused item.\n      this._filteredItemsChanged(this.filteredItems);\n    }\n  }\n\n  /** @protected */\n  _revertInputValue() {\n    if (this.filter !== '') {\n      this._inputElementValue = this.filter;\n    } else {\n      this._revertInputValueToValue();\n    }\n    this._clearSelectionRange();\n  }\n\n  /** @private */\n  _revertInputValueToValue() {\n    if (this.allowCustomValue && !this.selectedItem) {\n      this._inputElementValue = this.value;\n    } else {\n      this._inputElementValue = this._getItemLabel(this.selectedItem);\n    }\n  }\n\n  /** @private */\n  _selectedItemChanged(selectedItem) {\n    if (selectedItem === null || selectedItem === undefined) {\n      if (this.filteredItems) {\n        if (!this.allowCustomValue) {\n          this.value = '';\n        }\n        this._toggleHasValue(this._hasValue);\n        this._inputElementValue = this.value;\n      }\n    } else {\n      const value = this._getItemValue(selectedItem);\n      if (this.value !== value) {\n        this.value = value;\n        if (this.value !== value) {\n          // The value was changed to something else in value-changed listener,\n          // so prevent from resetting it to the previous value.\n          return;\n        }\n      }\n      this._toggleHasValue(true);\n      this._inputElementValue = this._getItemLabel(selectedItem);\n    }\n  }\n\n  /**\n   * Override an observer from `InputMixin`.\n   * @protected\n   * @override\n   */\n  _valueChanged(value, oldVal) {\n    if (value === '' && oldVal === undefined) {\n      // Initializing, no need to do anything\n      // See https://github.com/vaadin/vaadin-combo-box/issues/554\n      return;\n    }\n    if (isValidValue(value)) {\n      if (this._getItemValue(this.selectedItem) !== value) {\n        this._selectItemForValue(value);\n      }\n      if (!this.selectedItem && this.allowCustomValue) {\n        this._inputElementValue = value;\n      }\n      this._toggleHasValue(this._hasValue);\n    } else {\n      this.selectedItem = null;\n    }\n    this.filter = '';\n\n    // In the next _detectAndDispatchChange() call, the change detection should pass\n    this._lastCommittedValue = undefined;\n  }\n\n  /** @private */\n  _detectAndDispatchChange() {\n    // Do not validate when focusout is caused by document\n    // losing focus, which happens on browser tab switch.\n    if (document.hasFocus()) {\n      this.validate();\n    }\n    if (this.value !== this._lastCommittedValue) {\n      this.dispatchEvent(new CustomEvent('change', {\n        bubbles: true\n      }));\n      this._lastCommittedValue = this.value;\n    }\n  }\n\n  /** @private */\n  _itemsChanged(items, oldItems) {\n    this._ensureItemsOrDataProvider(() => {\n      this.items = oldItems;\n    });\n    if (items) {\n      this.filteredItems = items.slice(0);\n    } else if (oldItems) {\n      // Only clear filteredItems if the component had items previously but got cleared\n      this.filteredItems = null;\n    }\n  }\n\n  /** @private */\n  _filteredItemsChanged(filteredItems, oldFilteredItems) {\n    this._setDropdownItems(filteredItems);\n\n    // Store the currently focused item if any. The focused index preserves\n    // in the case when more filtered items are loading but it is reset\n    // when the user types in a filter query.\n    const focusedItem = oldFilteredItems ? oldFilteredItems[this._focusedIndex] : null;\n\n    // Try to sync `selectedItem` based on `value` once a new set of `filteredItems` is available\n    // (as a result of external filtering or when they have been loaded by the data provider).\n    // When `value` is specified but `selectedItem` is not, it means that there was no item\n    // matching `value` at the moment `value` was set, so `selectedItem` has remained unsynced.\n    const valueIndex = this.__getItemIndexByValue(filteredItems, this.value);\n    if ((this.selectedItem === null || this.selectedItem === undefined) && valueIndex >= 0) {\n      this.selectedItem = filteredItems[valueIndex];\n    }\n\n    // Try to first set focus on the item that had been focused before `filteredItems` were updated\n    // if it is still present in the `filteredItems` array. Otherwise, set the focused index\n    // depending on the selected item or the filter query.\n    const focusedItemIndex = this.__getItemIndexByValue(filteredItems, this._getItemValue(focusedItem));\n    if (focusedItemIndex > -1) {\n      this._focusedIndex = focusedItemIndex;\n    } else {\n      // When the user filled in something that is different from the current value = filtering is enabled,\n      // set the focused index to the item that matches the filter query.\n      this._focusedIndex = this.__getItemIndexByLabel(this.filteredItems, this.filter);\n    }\n  }\n\n  /** @private */\n  _filterItems(arr, filter) {\n    if (!arr) {\n      return arr;\n    }\n    const filteredItems = arr.filter(item => {\n      filter = filter ? filter.toString().toLowerCase() : '';\n      // Check if item contains input value.\n      return this._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\n    });\n    return filteredItems;\n  }\n\n  /** @private */\n  _selectItemForValue(value) {\n    const valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\n    const previouslySelectedItem = this.selectedItem;\n    if (valueIndex >= 0) {\n      this.selectedItem = this.filteredItems[valueIndex];\n    } else if (this.dataProvider && this.selectedItem === undefined) {\n      this.selectedItem = undefined;\n    } else {\n      this.selectedItem = null;\n    }\n    if (this.selectedItem === null && previouslySelectedItem === null) {\n      this._selectedItemChanged(this.selectedItem);\n    }\n  }\n\n  /**\n   * Provide items to be rendered in the dropdown.\n   * Override this method to show custom items.\n   *\n   * @protected\n   */\n  _setDropdownItems(items) {\n    this._dropdownItems = items;\n  }\n\n  /** @private */\n  _getItemElements() {\n    return Array.from(this._scroller.querySelectorAll(`${this._tagNamePrefix}-item`));\n  }\n\n  /** @private */\n  _scrollIntoView(index) {\n    if (!this._scroller) {\n      return;\n    }\n    this._scroller.scrollIntoView(index);\n  }\n\n  /**\n   * Returns the first item that matches the provided value.\n   *\n   * @private\n   */\n  __getItemIndexByValue(items, value) {\n    if (!items || !isValidValue(value)) {\n      return -1;\n    }\n    return findItemIndex(items, item => {\n      return this._getItemValue(item) === value;\n    });\n  }\n\n  /**\n   * Returns the first item that matches the provided label.\n   * Labels are matched against each other case insensitively.\n   *\n   * @private\n   */\n  __getItemIndexByLabel(items, label) {\n    if (!items || !label) {\n      return -1;\n    }\n    return findItemIndex(items, item => {\n      return this._getItemLabel(item).toString().toLowerCase() === label.toString().toLowerCase();\n    });\n  }\n\n  /** @private */\n  _overlaySelectedItemChanged(e) {\n    // Stop this private event from leaking outside.\n    e.stopPropagation();\n    if (e.detail.item instanceof ComboBoxPlaceholder) {\n      // Placeholder items should not be selectable.\n      return;\n    }\n    if (this.opened) {\n      this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\n      this.close();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin`\n   * to close the overlay on blur and commit the value.\n   *\n   * @param {boolean} focused\n   * @protected\n   * @override\n   */\n  _setFocused(focused) {\n    super._setFocused(focused);\n    if (!focused && !this.readonly && !this._closeOnBlurIsPrevented) {\n      // User's logic in `custom-value-set` event listener might cause input to blur,\n      // which will result in attempting to commit the same custom value once again.\n      if (!this.opened && this.allowCustomValue && this._inputElementValue === this._lastCustomValue) {\n        delete this._lastCustomValue;\n        return;\n      }\n      this._closeOrCommit();\n    }\n  }\n\n  /**\n   * Override method inherited from `FocusMixin` to not remove focused\n   * state when focus moves to the overlay.\n   *\n   * @param {FocusEvent} event\n   * @return {boolean}\n   * @protected\n   * @override\n   */\n  _shouldRemoveFocus(event) {\n    // VoiceOver on iOS fires `focusout` event when moving focus to the item in the dropdown.\n    // Do not focus the input in this case, because it would break announcement for the item.\n    if (event.relatedTarget && event.relatedTarget.localName === `${this._tagNamePrefix}-item`) {\n      return false;\n    }\n\n    // Do not blur when focus moves to the overlay\n    // Also, fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\n    if (event.relatedTarget === this._overlayElement) {\n      event.composedPath()[0].focus();\n      return false;\n    }\n    return true;\n  }\n\n  /** @private */\n  _onTouchend(event) {\n    if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\n      return;\n    }\n    event.preventDefault();\n    this._onClearAction();\n  }\n\n  /**\n   * Fired when the value changes.\n   *\n   * @event value-changed\n   * @param {Object} detail\n   * @param {String} detail.value the combobox value\n   */\n\n  /**\n   * Fired when selected item changes.\n   *\n   * @event selected-item-changed\n   * @param {Object} detail\n   * @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\n   */\n\n  /**\n   * Fired when the user sets a custom value.\n   * @event custom-value-set\n   * @param {String} detail the custom value\n   */\n\n  /**\n   * Fired when value changes.\n   * To comply with https://developer.mozilla.org/en-US/docs/Web/Events/change\n   * @event change\n   */\n\n  /**\n   * Fired after the `vaadin-combo-box-overlay` opens.\n   *\n   * @event vaadin-combo-box-dropdown-opened\n   */\n\n  /**\n   * Fired after the `vaadin-combo-box-overlay` closes.\n   *\n   * @event vaadin-combo-box-dropdown-closed\n   */\n};","map":{"version":3,"names":["DisabledMixin","FocusMixin","isElementFocused","KeyboardMixin","isTouch","ControllerMixin","OverlayClassMixin","get","processTemplates","InputMixin","ValidateMixin","VirtualKeyboardController","ComboBoxPlaceholder","isValidValue","value","undefined","findItemIndex","items","callback","findIndex","item","ComboBoxMixin","subclass","ComboBoxMixinClass","properties","opened","type","Boolean","notify","reflectToAttribute","observer","autoOpenDisabled","readonly","renderer","Function","Array","allowCustomValue","filteredItems","_lastCommittedValue","String","loading","_focusedIndex","Number","filter","selectedItem","Object","itemLabelPath","itemValuePath","itemIdPath","_toggleElement","_dropdownItems","_closeOnBlurIsPrevented","_scroller","_overlayOpened","observers","constructor","_boundOverlaySelectedItemChanged","_overlaySelectedItemChanged","bind","_boundOnClearButtonMouseDown","__onClearButtonMouseDown","_boundOnClick","_onClick","_boundOnOverlayTouchAction","_onOverlayTouchAction","_boundOnTouchend","_onTouchend","_tagNamePrefix","_nativeInput","inputElement","_inputElementChanged","input","autocomplete","autocapitalize","setAttribute","_revertInputValueToValue","clearElement","addEventListener","ready","_initOverlay","_initScroller","bringToFrontListener","requestAnimationFrame","_overlayElement","bringToFront","addController","disconnectedCallback","close","requestContentUpdate","_getItemElements","forEach","open","disabled","_propertiesChanged","currentProps","changedProps","oldProps","_filterChanged","overlay","$","_comboBox","e","preventDefault","detail","host","scrollerTag","root","firstChild","appendChild","document","createElement","scroller","querySelector","owner","getItemLabel","_getItemLabel","_updateScroller","focusedIndex","theme","style","maxHeight","getComputedStyle","getPropertyValue","setProperties","_openedOrItemsChanged","length","_overlayOpenedChanged","wasOpened","dispatchEvent","CustomEvent","bubbles","composed","_onOpened","_focusedIndexChanged","index","oldIndex","_updateActiveDescendant","_isInputFocused","find","el","id","removeAttribute","_openedChanged","_openedWithFocusRing","hasAttribute","focus","restoreFocusOnClose","_onClosed","blur","_isClearButton","event","composedPath","_onClearButtonClick","_onClearAction","_onToggleButtonClick","_onHostClick","includes","_onKeyDown","key","_onArrowDown","_onArrowUp","label","toString","_getItemValue","Math","min","_prefillFocusedItemLabel","max","focusedItem","_inputElementValue","_markAllSelectionRange","_setSelectionRange","start","end","setSelectionRange","_clearSelectionRange","pos","_closeOrCommit","_commitValue","_onEnter","_hasValidInputValue","stopPropagation","hasInvalidOption","_onEscape","cancel","clearButtonVisible","_revertInputValue","_toggleElementChanged","toggleElement","activeElement","_detectAndDispatchChange","itemMatchingInputValue","__getItemIndexByLabel","customValue","_lastCustomValue","cancelable","defaultPrevented","_onInput","props","_onChange","_itemLabelPathChanged","console","error","_scrollIntoView","_filterItems","_filteredItemsChanged","_selectedItemChanged","_toggleHasValue","_hasValue","_valueChanged","oldVal","_selectItemForValue","hasFocus","validate","_itemsChanged","oldItems","_ensureItemsOrDataProvider","slice","oldFilteredItems","_setDropdownItems","valueIndex","__getItemIndexByValue","focusedItemIndex","arr","toLowerCase","indexOf","previouslySelectedItem","dataProvider","from","querySelectorAll","scrollIntoView","_setFocused","focused","_shouldRemoveFocus","relatedTarget","localName"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/combo-box/src/vaadin-combo-box-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2015 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { DisabledMixin } from '@vaadin/a11y-base/src/disabled-mixin.js';\nimport { FocusMixin } from '@vaadin/a11y-base/src/focus-mixin.js';\nimport { isElementFocused } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { KeyboardMixin } from '@vaadin/a11y-base/src/keyboard-mixin.js';\nimport { isTouch } from '@vaadin/component-base/src/browser-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\nimport { OverlayClassMixin } from '@vaadin/component-base/src/overlay-class-mixin.js';\nimport { get } from '@vaadin/component-base/src/path-utils.js';\nimport { processTemplates } from '@vaadin/component-base/src/templates.js';\nimport { InputMixin } from '@vaadin/field-base/src/input-mixin.js';\nimport { ValidateMixin } from '@vaadin/field-base/src/validate-mixin.js';\nimport { VirtualKeyboardController } from '@vaadin/field-base/src/virtual-keyboard-controller.js';\nimport { ComboBoxPlaceholder } from './vaadin-combo-box-placeholder.js';\n\n/**\n * Checks if the value is supported as an item value in this control.\n *\n * @param {unknown} value\n * @return {boolean}\n */\nfunction isValidValue(value) {\n  return value !== undefined && value !== null;\n}\n\n/**\n * Returns the index of the first item that satisfies the provided testing function\n * ignoring placeholder items.\n *\n * @param {Array<ComboBoxItem | string>} items\n * @param {Function} callback\n * @return {number}\n */\nfunction findItemIndex(items, callback) {\n  return items.findIndex((item) => {\n    if (item instanceof ComboBoxPlaceholder) {\n      return false;\n    }\n\n    return callback(item);\n  });\n}\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n * @mixes ValidateMixin\n * @mixes DisabledMixin\n * @mixes InputMixin\n * @mixes KeyboardMixin\n * @mixes FocusMixin\n * @mixes OverlayClassMixin\n * @param {function(new:HTMLElement)} subclass\n */\nexport const ComboBoxMixin = (subclass) =>\n  class ComboBoxMixinClass extends OverlayClassMixin(\n    ControllerMixin(ValidateMixin(FocusMixin(KeyboardMixin(InputMixin(DisabledMixin(subclass)))))),\n  ) {\n    static get properties() {\n      return {\n        /**\n         * True if the dropdown is open, false otherwise.\n         * @type {boolean}\n         */\n        opened: {\n          type: Boolean,\n          notify: true,\n          value: false,\n          reflectToAttribute: true,\n          observer: '_openedChanged',\n        },\n\n        /**\n         * Set true to prevent the overlay from opening automatically.\n         * @attr {boolean} auto-open-disabled\n         */\n        autoOpenDisabled: {\n          type: Boolean,\n        },\n\n        /**\n         * When present, it specifies that the field is read-only.\n         * @type {boolean}\n         */\n        readonly: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * Custom function for rendering the content of every item.\n         * Receives three arguments:\n         *\n         * - `root` The `<vaadin-combo-box-item>` internal container DOM element.\n         * - `comboBox` The reference to the `<vaadin-combo-box>` element.\n         * - `model` The object with the properties related with the rendered\n         *   item, contains:\n         *   - `model.index` The index of the rendered item.\n         *   - `model.item` The item.\n         * @type {ComboBoxRenderer | undefined}\n         */\n        renderer: Function,\n\n        /**\n         * A full set of items to filter the visible options from.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        items: {\n          type: Array,\n          observer: '_itemsChanged',\n        },\n\n        /**\n         * If `true`, the user can input a value that is not present in the items list.\n         * `value` property will be set to the input value in this case.\n         * Also, when `value` is set programmatically, the input value will be set\n         * to reflect that value.\n         * @attr {boolean} allow-custom-value\n         * @type {boolean}\n         */\n        allowCustomValue: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * A subset of items, filtered based on the user input. Filtered items\n         * can be assigned directly to omit the internal filtering functionality.\n         * The items can be of either `String` or `Object` type.\n         * @type {!Array<!ComboBoxItem | string> | undefined}\n         */\n        filteredItems: {\n          type: Array,\n          observer: '_filteredItemsChanged',\n        },\n\n        /**\n         * Used to detect user value changes and fire `change` events.\n         * @private\n         */\n        _lastCommittedValue: String,\n\n        /**\n         * When set to `true`, \"loading\" attribute is added to host and the overlay element.\n         * @type {boolean}\n         */\n        loading: {\n          type: Boolean,\n          value: false,\n          reflectToAttribute: true,\n        },\n\n        /**\n         * @type {number}\n         * @protected\n         */\n        _focusedIndex: {\n          type: Number,\n          observer: '_focusedIndexChanged',\n          value: -1,\n        },\n\n        /**\n         * Filtering string the user has typed into the input field.\n         * @type {string}\n         */\n        filter: {\n          type: String,\n          value: '',\n          notify: true,\n        },\n\n        /**\n         * The selected item from the `items` array.\n         * @type {ComboBoxItem | string | undefined}\n         */\n        selectedItem: {\n          type: Object,\n          notify: true,\n        },\n\n        /**\n         * Path for label of the item. If `items` is an array of objects, the\n         * `itemLabelPath` is used to fetch the displayed string label for each\n         * item.\n         *\n         * The item label is also used for matching items when processing user\n         * input, i.e., for filtering and selecting items.\n         * @attr {string} item-label-path\n         * @type {string}\n         */\n        itemLabelPath: {\n          type: String,\n          value: 'label',\n          observer: '_itemLabelPathChanged',\n        },\n\n        /**\n         * Path for the value of the item. If `items` is an array of objects, the\n         * `itemValuePath:` is used to fetch the string value for the selected\n         * item.\n         *\n         * The item value is used in the `value` property of the combo box,\n         * to provide the form value.\n         * @attr {string} item-value-path\n         * @type {string}\n         */\n        itemValuePath: {\n          type: String,\n          value: 'value',\n        },\n\n        /**\n         * Path for the id of the item. If `items` is an array of objects,\n         * the `itemIdPath` is used to compare and identify the same item\n         * in `selectedItem` and `filteredItems` (items given by the\n         * `dataProvider` callback).\n         * @attr {string} item-id-path\n         */\n        itemIdPath: String,\n\n        /**\n         * @type {!HTMLElement | undefined}\n         * @protected\n         */\n        _toggleElement: {\n          type: Object,\n          observer: '_toggleElementChanged',\n        },\n\n        /**\n         * Set of items to be rendered in the dropdown.\n         * @protected\n         */\n        _dropdownItems: {\n          type: Array,\n        },\n\n        /** @private */\n        _closeOnBlurIsPrevented: Boolean,\n\n        /** @private */\n        _scroller: Object,\n\n        /** @private */\n        _overlayOpened: {\n          type: Boolean,\n          observer: '_overlayOpenedChanged',\n        },\n      };\n    }\n\n    static get observers() {\n      return [\n        '_selectedItemChanged(selectedItem, itemValuePath, itemLabelPath)',\n        '_openedOrItemsChanged(opened, _dropdownItems, loading)',\n        '_updateScroller(_scroller, _dropdownItems, opened, loading, selectedItem, itemIdPath, _focusedIndex, renderer, theme)',\n      ];\n    }\n\n    constructor() {\n      super();\n      this._boundOverlaySelectedItemChanged = this._overlaySelectedItemChanged.bind(this);\n      this._boundOnClearButtonMouseDown = this.__onClearButtonMouseDown.bind(this);\n      this._boundOnClick = this._onClick.bind(this);\n      this._boundOnOverlayTouchAction = this._onOverlayTouchAction.bind(this);\n      this._boundOnTouchend = this._onTouchend.bind(this);\n    }\n\n    /**\n     * Tag name prefix used by scroller and items.\n     * @protected\n     * @return {string}\n     */\n    get _tagNamePrefix() {\n      return 'vaadin-combo-box';\n    }\n\n    /**\n     * Get a reference to the native `<input>` element.\n     * Override to provide a custom input.\n     * @protected\n     * @return {HTMLInputElement | undefined}\n     */\n    get _nativeInput() {\n      return this.inputElement;\n    }\n\n    /**\n     * Override method inherited from `InputMixin`\n     * to customize the input element.\n     * @protected\n     * @override\n     */\n    _inputElementChanged(inputElement) {\n      super._inputElementChanged(inputElement);\n\n      const input = this._nativeInput;\n\n      if (input) {\n        input.autocomplete = 'off';\n        input.autocapitalize = 'off';\n\n        input.setAttribute('role', 'combobox');\n        input.setAttribute('aria-autocomplete', 'list');\n        input.setAttribute('aria-expanded', !!this.opened);\n\n        // Disable the macOS Safari spell check auto corrections.\n        input.setAttribute('spellcheck', 'false');\n\n        // Disable iOS autocorrect suggestions.\n        input.setAttribute('autocorrect', 'off');\n\n        this._revertInputValueToValue();\n\n        if (this.clearElement) {\n          this.clearElement.addEventListener('mousedown', this._boundOnClearButtonMouseDown);\n        }\n      }\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this._initOverlay();\n      this._initScroller();\n\n      this._lastCommittedValue = this.value;\n\n      this.addEventListener('click', this._boundOnClick);\n      this.addEventListener('touchend', this._boundOnTouchend);\n\n      const bringToFrontListener = () => {\n        requestAnimationFrame(() => {\n          this._overlayElement.bringToFront();\n        });\n      };\n\n      this.addEventListener('mousedown', bringToFrontListener);\n      this.addEventListener('touchstart', bringToFrontListener);\n\n      processTemplates(this);\n\n      this.addController(new VirtualKeyboardController(this));\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n\n      // Close the overlay on detach\n      this.close();\n    }\n\n    /**\n     * Requests an update for the content of items.\n     * While performing the update, it invokes the renderer (passed in the `renderer` property) once an item.\n     *\n     * It is not guaranteed that the update happens immediately (synchronously) after it is requested.\n     */\n    requestContentUpdate() {\n      if (!this._scroller) {\n        return;\n      }\n\n      this._scroller.requestContentUpdate();\n\n      this._getItemElements().forEach((item) => {\n        item.requestContentUpdate();\n      });\n    }\n\n    /**\n     * Opens the dropdown list.\n     */\n    open() {\n      // Prevent _open() being called when input is disabled or read-only\n      if (!this.disabled && !this.readonly) {\n        this.opened = true;\n      }\n    }\n\n    /**\n     * Closes the dropdown list.\n     */\n    close() {\n      this.opened = false;\n    }\n\n    /**\n     * Override Polymer lifecycle callback to handle `filter` property change after\n     * the observer for `opened` property is triggered. This is needed when opening\n     * combo-box on user input to ensure the focused index is set correctly.\n     *\n     * @param {!Object} currentProps Current accessor values\n     * @param {?Object} changedProps Properties changed since the last call\n     * @param {?Object} oldProps Previous values for each changed property\n     * @protected\n     * @override\n     */\n    _propertiesChanged(currentProps, changedProps, oldProps) {\n      super._propertiesChanged(currentProps, changedProps, oldProps);\n\n      if (changedProps.filter !== undefined) {\n        this._filterChanged(changedProps.filter);\n      }\n    }\n\n    /** @private */\n    _initOverlay() {\n      const overlay = this.$.overlay;\n\n      // Store instance for detecting \"dir\" attribute on opening\n      overlay._comboBox = this;\n\n      overlay.addEventListener('touchend', this._boundOnOverlayTouchAction);\n      overlay.addEventListener('touchmove', this._boundOnOverlayTouchAction);\n\n      // Prevent blurring the input when clicking inside the overlay\n      overlay.addEventListener('mousedown', (e) => e.preventDefault());\n\n      // Manual two-way binding for the overlay \"opened\" property\n      overlay.addEventListener('opened-changed', (e) => {\n        this._overlayOpened = e.detail.value;\n      });\n\n      this._overlayElement = overlay;\n    }\n\n    /**\n     * Create and initialize the scroller element.\n     * Override to provide custom host reference.\n     *\n     * @protected\n     */\n    _initScroller(host) {\n      const scrollerTag = `${this._tagNamePrefix}-scroller`;\n\n      const overlay = this._overlayElement;\n\n      overlay.renderer = (root) => {\n        if (!root.firstChild) {\n          root.appendChild(document.createElement(scrollerTag));\n        }\n      };\n\n      // Ensure the scroller is rendered\n      overlay.requestContentUpdate();\n\n      const scroller = overlay.querySelector(scrollerTag);\n\n      scroller.owner = host || this;\n      scroller.getItemLabel = this._getItemLabel.bind(this);\n      scroller.addEventListener('selection-changed', this._boundOverlaySelectedItemChanged);\n\n      // Trigger the observer to set properties\n      this._scroller = scroller;\n    }\n\n    /** @private */\n    // eslint-disable-next-line max-params\n    _updateScroller(scroller, items, opened, loading, selectedItem, itemIdPath, focusedIndex, renderer, theme) {\n      if (scroller) {\n        if (opened) {\n          scroller.style.maxHeight =\n            getComputedStyle(this).getPropertyValue(`--${this._tagNamePrefix}-overlay-max-height`) || '65vh';\n        }\n\n        scroller.setProperties({\n          items: opened ? items : [],\n          opened,\n          loading,\n          selectedItem,\n          itemIdPath,\n          focusedIndex,\n          renderer,\n          theme,\n        });\n      }\n    }\n\n    /** @private */\n    _openedOrItemsChanged(opened, items, loading) {\n      // Close the overlay if there are no items to display.\n      // See https://github.com/vaadin/vaadin-combo-box/pull/964\n      this._overlayOpened = !!(opened && (loading || (items && items.length)));\n    }\n\n    /** @private */\n    _overlayOpenedChanged(opened, wasOpened) {\n      if (opened) {\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-opened', { bubbles: true, composed: true }));\n\n        this._onOpened();\n      } else if (wasOpened && this._dropdownItems && this._dropdownItems.length) {\n        this.close();\n\n        this.dispatchEvent(new CustomEvent('vaadin-combo-box-dropdown-closed', { bubbles: true, composed: true }));\n      }\n    }\n\n    /** @private */\n    _focusedIndexChanged(index, oldIndex) {\n      if (oldIndex === undefined) {\n        return;\n      }\n      this._updateActiveDescendant(index);\n    }\n\n    /** @protected */\n    _isInputFocused() {\n      return this.inputElement && isElementFocused(this.inputElement);\n    }\n\n    /** @private */\n    _updateActiveDescendant(index) {\n      const input = this._nativeInput;\n      if (!input) {\n        return;\n      }\n\n      const item = this._getItemElements().find((el) => el.index === index);\n      if (item) {\n        input.setAttribute('aria-activedescendant', item.id);\n      } else {\n        input.removeAttribute('aria-activedescendant');\n      }\n    }\n\n    /** @private */\n    _openedChanged(opened, wasOpened) {\n      // Prevent _close() being called when opened is set to its default value (false).\n      if (wasOpened === undefined) {\n        return;\n      }\n\n      if (opened) {\n        this._openedWithFocusRing = this.hasAttribute('focus-ring');\n        // For touch devices, we don't want to popup virtual keyboard\n        // unless input element is explicitly focused by the user.\n        if (!this._isInputFocused() && !isTouch) {\n          if (this.inputElement) {\n            this.inputElement.focus();\n          }\n        }\n\n        this._overlayElement.restoreFocusOnClose = true;\n      } else {\n        this._onClosed();\n        if (this._openedWithFocusRing && this._isInputFocused()) {\n          this.setAttribute('focus-ring', '');\n        }\n      }\n\n      const input = this._nativeInput;\n      if (input) {\n        input.setAttribute('aria-expanded', !!opened);\n\n        if (opened) {\n          input.setAttribute('aria-controls', this._scroller.id);\n        } else {\n          input.removeAttribute('aria-controls');\n        }\n      }\n    }\n\n    /** @private */\n    _onOverlayTouchAction() {\n      // On touch devices, blur the input on touch start inside the overlay, in order to hide\n      // the virtual keyboard. But don't close the overlay on this blur.\n      this._closeOnBlurIsPrevented = true;\n      this.inputElement.blur();\n      this._closeOnBlurIsPrevented = false;\n    }\n\n    /** @protected */\n    _isClearButton(event) {\n      return event.composedPath()[0] === this.clearElement;\n    }\n\n    /** @private */\n    __onClearButtonMouseDown(event) {\n      event.preventDefault(); // Prevent native focusout event\n      this.inputElement.focus();\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onClearButtonClick(event) {\n      event.preventDefault();\n      this._onClearAction();\n\n      // De-select dropdown item\n      if (this.opened) {\n        this.requestContentUpdate();\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @private\n     */\n    _onToggleButtonClick(event) {\n      // Prevent parent components such as `vaadin-grid`\n      // from handling the click event after it bubbles.\n      event.preventDefault();\n\n      if (this.opened) {\n        this.close();\n      } else {\n        this.open();\n      }\n    }\n\n    /**\n     * @param {Event} event\n     * @protected\n     */\n    _onHostClick(event) {\n      if (!this.autoOpenDisabled) {\n        event.preventDefault();\n        this.open();\n      }\n    }\n\n    /** @private */\n    _onClick(event) {\n      if (this._isClearButton(event)) {\n        this._onClearButtonClick(event);\n      } else if (event.composedPath().includes(this._toggleElement)) {\n        this._onToggleButtonClick(event);\n      } else {\n        this._onHostClick(event);\n      }\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     *\n     * @param {KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onKeyDown(e) {\n      super._onKeyDown(e);\n\n      if (e.key === 'Tab') {\n        this._overlayElement.restoreFocusOnClose = false;\n      } else if (e.key === 'ArrowDown') {\n        this._onArrowDown();\n\n        // Prevent caret from moving\n        e.preventDefault();\n      } else if (e.key === 'ArrowUp') {\n        this._onArrowUp();\n\n        // Prevent caret from moving\n        e.preventDefault();\n      }\n    }\n\n    /** @private */\n    _getItemLabel(item) {\n      let label = item && this.itemLabelPath ? get(this.itemLabelPath, item) : undefined;\n      if (label === undefined || label === null) {\n        label = item ? item.toString() : '';\n      }\n      return label;\n    }\n\n    /** @private */\n    _getItemValue(item) {\n      let value = item && this.itemValuePath ? get(this.itemValuePath, item) : undefined;\n      if (value === undefined) {\n        value = item ? item.toString() : '';\n      }\n      return value;\n    }\n\n    /** @private */\n    _onArrowDown() {\n      if (this.opened) {\n        const items = this._dropdownItems;\n        if (items) {\n          this._focusedIndex = Math.min(items.length - 1, this._focusedIndex + 1);\n          this._prefillFocusedItemLabel();\n        }\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _onArrowUp() {\n      if (this.opened) {\n        if (this._focusedIndex > -1) {\n          this._focusedIndex = Math.max(0, this._focusedIndex - 1);\n        } else {\n          const items = this._dropdownItems;\n          if (items) {\n            this._focusedIndex = items.length - 1;\n          }\n        }\n\n        this._prefillFocusedItemLabel();\n      } else {\n        this.open();\n      }\n    }\n\n    /** @private */\n    _prefillFocusedItemLabel() {\n      if (this._focusedIndex > -1) {\n        const focusedItem = this._dropdownItems[this._focusedIndex];\n        this._inputElementValue = this._getItemLabel(focusedItem);\n        this._markAllSelectionRange();\n      }\n    }\n\n    /** @private */\n    _setSelectionRange(start, end) {\n      // Setting selection range focuses and/or moves the caret in some browsers,\n      // and there's no need to modify the selection range if the input isn't focused anyway.\n      // This affects Safari. When the overlay is open, and then hitting tab, browser should focus\n      // the next focusable element instead of the combo-box itself.\n      if (this._isInputFocused() && this.inputElement.setSelectionRange) {\n        this.inputElement.setSelectionRange(start, end);\n      }\n    }\n\n    /** @private */\n    _markAllSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        this._setSelectionRange(0, this._inputElementValue.length);\n      }\n    }\n\n    /** @private */\n    _clearSelectionRange() {\n      if (this._inputElementValue !== undefined) {\n        const pos = this._inputElementValue ? this._inputElementValue.length : 0;\n        this._setSelectionRange(pos, pos);\n      }\n    }\n\n    /** @private */\n    _closeOrCommit() {\n      if (!this.opened && !this.loading) {\n        this._commitValue();\n      } else {\n        this.close();\n      }\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     *\n     * @param {KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onEnter(e) {\n      // Do not commit value when custom values are disallowed and input value is not a valid option\n      // also stop propagation of the event, otherwise the user could submit a form while the input\n      // still contains an invalid value\n      if (!this._hasValidInputValue()) {\n        // Do not submit the surrounding form.\n        e.preventDefault();\n        // Do not trigger global listeners\n        e.stopPropagation();\n        return;\n      }\n\n      // Stop propagation of the enter event only if the dropdown is opened, this\n      // \"consumes\" the enter event for the action of closing the dropdown\n      if (this.opened) {\n        // Do not submit the surrounding form.\n        e.preventDefault();\n        // Do not trigger global listeners\n        e.stopPropagation();\n      }\n\n      this._closeOrCommit();\n    }\n\n    /**\n     * @protected\n     */\n    _hasValidInputValue() {\n      const hasInvalidOption =\n        this._focusedIndex < 0 &&\n        this._inputElementValue !== '' &&\n        this._getItemLabel(this.selectedItem) !== this._inputElementValue;\n\n      return this.allowCustomValue || !hasInvalidOption;\n    }\n\n    /**\n     * Override an event listener from `KeyboardMixin`.\n     * Do not call `super` in order to override clear\n     * button logic defined in `InputControlMixin`.\n     *\n     * @param {!KeyboardEvent} e\n     * @protected\n     * @override\n     */\n    _onEscape(e) {\n      if (this.autoOpenDisabled) {\n        // Auto-open is disabled\n        if (this.opened || (this.value !== this._inputElementValue && this._inputElementValue.length > 0)) {\n          // The overlay is open or\n          // The input value has changed but the change hasn't been committed, so cancel it.\n          e.stopPropagation();\n          this._focusedIndex = -1;\n          this.cancel();\n        } else if (this.clearButtonVisible && !this.opened && !!this.value) {\n          e.stopPropagation();\n          // The clear button is visible and the overlay is closed, so clear the value.\n          this._onClearAction();\n        }\n      } else if (this.opened) {\n        // Auto-open is enabled\n        // The overlay is open\n        e.stopPropagation();\n\n        if (this._focusedIndex > -1) {\n          // An item is focused, revert the input to the filtered value\n          this._focusedIndex = -1;\n          this._revertInputValue();\n        } else {\n          // No item is focused, cancel the change and close the overlay\n          this.cancel();\n        }\n      } else if (this.clearButtonVisible && !!this.value) {\n        e.stopPropagation();\n        // The clear button is visible and the overlay is closed, so clear the value.\n        this._onClearAction();\n      }\n    }\n\n    /** @private */\n    _toggleElementChanged(toggleElement) {\n      if (toggleElement) {\n        // Don't blur the input on toggle mousedown\n        toggleElement.addEventListener('mousedown', (e) => e.preventDefault());\n        // Unfocus previously focused element if focus is not inside combo box (on touch devices)\n        toggleElement.addEventListener('click', () => {\n          if (isTouch && !this._isInputFocused()) {\n            document.activeElement.blur();\n          }\n        });\n      }\n    }\n\n    /**\n     * Clears the current value.\n     * @protected\n     */\n    _onClearAction() {\n      this.selectedItem = null;\n\n      if (this.allowCustomValue) {\n        this.value = '';\n      }\n\n      this._detectAndDispatchChange();\n    }\n\n    /**\n     * Reverts back to original value.\n     */\n    cancel() {\n      this._revertInputValueToValue();\n      // In the next _detectAndDispatchChange() call, the change detection should not pass\n      this._lastCommittedValue = this.value;\n      this._closeOrCommit();\n    }\n\n    /** @private */\n    _onOpened() {\n      // _detectAndDispatchChange() should not consider value changes done before opening\n      this._lastCommittedValue = this.value;\n    }\n\n    /** @private */\n    _onClosed() {\n      if (!this.loading || this.allowCustomValue) {\n        this._commitValue();\n      }\n    }\n\n    /** @private */\n    _commitValue() {\n      if (this._focusedIndex > -1) {\n        const focusedItem = this._dropdownItems[this._focusedIndex];\n        if (this.selectedItem !== focusedItem) {\n          this.selectedItem = focusedItem;\n        }\n        // Make sure input field is updated in case value doesn't change (i.e. FOO -> foo)\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n        this._focusedIndex = -1;\n      } else if (this._inputElementValue === '' || this._inputElementValue === undefined) {\n        this.selectedItem = null;\n\n        if (this.allowCustomValue) {\n          this.value = '';\n        }\n      } else {\n        // Try to find an item which label matches the input value.\n        const items = [this.selectedItem, ...(this._dropdownItems || [])];\n        const itemMatchingInputValue = items[this.__getItemIndexByLabel(items, this._inputElementValue)];\n\n        if (\n          this.allowCustomValue &&\n          // To prevent a repetitive input value being saved after pressing ESC and Tab.\n          !itemMatchingInputValue\n        ) {\n          const customValue = this._inputElementValue;\n\n          // Store reference to the last custom value for checking it on focusout.\n          this._lastCustomValue = customValue;\n\n          // An item matching by label was not found, but custom values are allowed.\n          // Dispatch a custom-value-set event with the input value.\n          const e = new CustomEvent('custom-value-set', {\n            detail: customValue,\n            composed: true,\n            cancelable: true,\n            bubbles: true,\n          });\n          this.dispatchEvent(e);\n          if (!e.defaultPrevented) {\n            this.value = customValue;\n          }\n        } else if (!this.allowCustomValue && !this.opened && itemMatchingInputValue) {\n          // An item matching by label was found, select it.\n          this.value = this._getItemValue(itemMatchingInputValue);\n        } else {\n          // Revert the input value\n          this._inputElementValue = this.selectedItem ? this._getItemLabel(this.selectedItem) : this.value || '';\n        }\n      }\n\n      this._detectAndDispatchChange();\n\n      this._clearSelectionRange();\n\n      this.filter = '';\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onInput(event) {\n      const filter = this._inputElementValue;\n\n      // When opening dropdown on user input, both `opened` and `filter` properties are set.\n      // Perform a batched property update instead of relying on sync property observers.\n      // This is necessary to avoid an extra data-provider request for loading first page.\n      const props = {};\n\n      if (this.filter === filter) {\n        // Filter and input value might get out of sync, while keyboard navigating for example.\n        // Afterwards, input value might be changed to the same value as used in filtering.\n        // In situation like these, we need to make sure all the filter changes handlers are run.\n        this._filterChanged(this.filter);\n      } else {\n        props.filter = filter;\n      }\n\n      if (!this.opened && !this._isClearButton(event) && !this.autoOpenDisabled) {\n        props.opened = true;\n      }\n\n      this.setProperties(props);\n    }\n\n    /**\n     * Override an event listener from `InputMixin`.\n     * @param {!Event} event\n     * @protected\n     * @override\n     */\n    _onChange(event) {\n      // Suppress the native change event fired on the native input.\n      // We use `_detectAndDispatchChange` to fire a custom event.\n      event.stopPropagation();\n    }\n\n    /** @private */\n    _itemLabelPathChanged(itemLabelPath) {\n      if (typeof itemLabelPath !== 'string') {\n        console.error('You should set itemLabelPath to a valid string');\n      }\n    }\n\n    /** @private */\n    _filterChanged(filter) {\n      // Scroll to the top of the list whenever the filter changes.\n      this._scrollIntoView(0);\n\n      this._focusedIndex = -1;\n\n      if (this.items) {\n        this.filteredItems = this._filterItems(this.items, filter);\n      } else {\n        // With certain use cases (e. g., external filtering), `items` are\n        // undefined. Filtering is unnecessary per se, but the filteredItems\n        // observer should still be invoked to update focused item.\n        this._filteredItemsChanged(this.filteredItems);\n      }\n    }\n\n    /** @protected */\n    _revertInputValue() {\n      if (this.filter !== '') {\n        this._inputElementValue = this.filter;\n      } else {\n        this._revertInputValueToValue();\n      }\n      this._clearSelectionRange();\n    }\n\n    /** @private */\n    _revertInputValueToValue() {\n      if (this.allowCustomValue && !this.selectedItem) {\n        this._inputElementValue = this.value;\n      } else {\n        this._inputElementValue = this._getItemLabel(this.selectedItem);\n      }\n    }\n\n    /** @private */\n    _selectedItemChanged(selectedItem) {\n      if (selectedItem === null || selectedItem === undefined) {\n        if (this.filteredItems) {\n          if (!this.allowCustomValue) {\n            this.value = '';\n          }\n\n          this._toggleHasValue(this._hasValue);\n          this._inputElementValue = this.value;\n        }\n      } else {\n        const value = this._getItemValue(selectedItem);\n        if (this.value !== value) {\n          this.value = value;\n          if (this.value !== value) {\n            // The value was changed to something else in value-changed listener,\n            // so prevent from resetting it to the previous value.\n            return;\n          }\n        }\n\n        this._toggleHasValue(true);\n        this._inputElementValue = this._getItemLabel(selectedItem);\n      }\n    }\n\n    /**\n     * Override an observer from `InputMixin`.\n     * @protected\n     * @override\n     */\n    _valueChanged(value, oldVal) {\n      if (value === '' && oldVal === undefined) {\n        // Initializing, no need to do anything\n        // See https://github.com/vaadin/vaadin-combo-box/issues/554\n        return;\n      }\n\n      if (isValidValue(value)) {\n        if (this._getItemValue(this.selectedItem) !== value) {\n          this._selectItemForValue(value);\n        }\n\n        if (!this.selectedItem && this.allowCustomValue) {\n          this._inputElementValue = value;\n        }\n\n        this._toggleHasValue(this._hasValue);\n      } else {\n        this.selectedItem = null;\n      }\n\n      this.filter = '';\n\n      // In the next _detectAndDispatchChange() call, the change detection should pass\n      this._lastCommittedValue = undefined;\n    }\n\n    /** @private */\n    _detectAndDispatchChange() {\n      // Do not validate when focusout is caused by document\n      // losing focus, which happens on browser tab switch.\n      if (document.hasFocus()) {\n        this.validate();\n      }\n\n      if (this.value !== this._lastCommittedValue) {\n        this.dispatchEvent(new CustomEvent('change', { bubbles: true }));\n        this._lastCommittedValue = this.value;\n      }\n    }\n\n    /** @private */\n    _itemsChanged(items, oldItems) {\n      this._ensureItemsOrDataProvider(() => {\n        this.items = oldItems;\n      });\n\n      if (items) {\n        this.filteredItems = items.slice(0);\n      } else if (oldItems) {\n        // Only clear filteredItems if the component had items previously but got cleared\n        this.filteredItems = null;\n      }\n    }\n\n    /** @private */\n    _filteredItemsChanged(filteredItems, oldFilteredItems) {\n      this._setDropdownItems(filteredItems);\n\n      // Store the currently focused item if any. The focused index preserves\n      // in the case when more filtered items are loading but it is reset\n      // when the user types in a filter query.\n      const focusedItem = oldFilteredItems ? oldFilteredItems[this._focusedIndex] : null;\n\n      // Try to sync `selectedItem` based on `value` once a new set of `filteredItems` is available\n      // (as a result of external filtering or when they have been loaded by the data provider).\n      // When `value` is specified but `selectedItem` is not, it means that there was no item\n      // matching `value` at the moment `value` was set, so `selectedItem` has remained unsynced.\n      const valueIndex = this.__getItemIndexByValue(filteredItems, this.value);\n      if ((this.selectedItem === null || this.selectedItem === undefined) && valueIndex >= 0) {\n        this.selectedItem = filteredItems[valueIndex];\n      }\n\n      // Try to first set focus on the item that had been focused before `filteredItems` were updated\n      // if it is still present in the `filteredItems` array. Otherwise, set the focused index\n      // depending on the selected item or the filter query.\n      const focusedItemIndex = this.__getItemIndexByValue(filteredItems, this._getItemValue(focusedItem));\n      if (focusedItemIndex > -1) {\n        this._focusedIndex = focusedItemIndex;\n      } else {\n        // When the user filled in something that is different from the current value = filtering is enabled,\n        // set the focused index to the item that matches the filter query.\n        this._focusedIndex = this.__getItemIndexByLabel(this.filteredItems, this.filter);\n      }\n    }\n\n    /** @private */\n    _filterItems(arr, filter) {\n      if (!arr) {\n        return arr;\n      }\n\n      const filteredItems = arr.filter((item) => {\n        filter = filter ? filter.toString().toLowerCase() : '';\n        // Check if item contains input value.\n        return this._getItemLabel(item).toString().toLowerCase().indexOf(filter) > -1;\n      });\n\n      return filteredItems;\n    }\n\n    /** @private */\n    _selectItemForValue(value) {\n      const valueIndex = this.__getItemIndexByValue(this.filteredItems, value);\n      const previouslySelectedItem = this.selectedItem;\n\n      if (valueIndex >= 0) {\n        this.selectedItem = this.filteredItems[valueIndex];\n      } else if (this.dataProvider && this.selectedItem === undefined) {\n        this.selectedItem = undefined;\n      } else {\n        this.selectedItem = null;\n      }\n\n      if (this.selectedItem === null && previouslySelectedItem === null) {\n        this._selectedItemChanged(this.selectedItem);\n      }\n    }\n\n    /**\n     * Provide items to be rendered in the dropdown.\n     * Override this method to show custom items.\n     *\n     * @protected\n     */\n    _setDropdownItems(items) {\n      this._dropdownItems = items;\n    }\n\n    /** @private */\n    _getItemElements() {\n      return Array.from(this._scroller.querySelectorAll(`${this._tagNamePrefix}-item`));\n    }\n\n    /** @private */\n    _scrollIntoView(index) {\n      if (!this._scroller) {\n        return;\n      }\n      this._scroller.scrollIntoView(index);\n    }\n\n    /**\n     * Returns the first item that matches the provided value.\n     *\n     * @private\n     */\n    __getItemIndexByValue(items, value) {\n      if (!items || !isValidValue(value)) {\n        return -1;\n      }\n\n      return findItemIndex(items, (item) => {\n        return this._getItemValue(item) === value;\n      });\n    }\n\n    /**\n     * Returns the first item that matches the provided label.\n     * Labels are matched against each other case insensitively.\n     *\n     * @private\n     */\n    __getItemIndexByLabel(items, label) {\n      if (!items || !label) {\n        return -1;\n      }\n\n      return findItemIndex(items, (item) => {\n        return this._getItemLabel(item).toString().toLowerCase() === label.toString().toLowerCase();\n      });\n    }\n\n    /** @private */\n    _overlaySelectedItemChanged(e) {\n      // Stop this private event from leaking outside.\n      e.stopPropagation();\n\n      if (e.detail.item instanceof ComboBoxPlaceholder) {\n        // Placeholder items should not be selectable.\n        return;\n      }\n\n      if (this.opened) {\n        this._focusedIndex = this.filteredItems.indexOf(e.detail.item);\n        this.close();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin`\n     * to close the overlay on blur and commit the value.\n     *\n     * @param {boolean} focused\n     * @protected\n     * @override\n     */\n    _setFocused(focused) {\n      super._setFocused(focused);\n\n      if (!focused && !this.readonly && !this._closeOnBlurIsPrevented) {\n        // User's logic in `custom-value-set` event listener might cause input to blur,\n        // which will result in attempting to commit the same custom value once again.\n        if (!this.opened && this.allowCustomValue && this._inputElementValue === this._lastCustomValue) {\n          delete this._lastCustomValue;\n          return;\n        }\n\n        this._closeOrCommit();\n      }\n    }\n\n    /**\n     * Override method inherited from `FocusMixin` to not remove focused\n     * state when focus moves to the overlay.\n     *\n     * @param {FocusEvent} event\n     * @return {boolean}\n     * @protected\n     * @override\n     */\n    _shouldRemoveFocus(event) {\n      // VoiceOver on iOS fires `focusout` event when moving focus to the item in the dropdown.\n      // Do not focus the input in this case, because it would break announcement for the item.\n      if (event.relatedTarget && event.relatedTarget.localName === `${this._tagNamePrefix}-item`) {\n        return false;\n      }\n\n      // Do not blur when focus moves to the overlay\n      // Also, fixes the problem with `focusout` happening when clicking on the scroll bar on Edge\n      if (event.relatedTarget === this._overlayElement) {\n        event.composedPath()[0].focus();\n        return false;\n      }\n\n      return true;\n    }\n\n    /** @private */\n    _onTouchend(event) {\n      if (!this.clearElement || event.composedPath()[0] !== this.clearElement) {\n        return;\n      }\n\n      event.preventDefault();\n      this._onClearAction();\n    }\n\n    /**\n     * Fired when the value changes.\n     *\n     * @event value-changed\n     * @param {Object} detail\n     * @param {String} detail.value the combobox value\n     */\n\n    /**\n     * Fired when selected item changes.\n     *\n     * @event selected-item-changed\n     * @param {Object} detail\n     * @param {Object|String} detail.value the selected item. Type is the same as the type of `items`.\n     */\n\n    /**\n     * Fired when the user sets a custom value.\n     * @event custom-value-set\n     * @param {String} detail the custom value\n     */\n\n    /**\n     * Fired when value changes.\n     * To comply with https://developer.mozilla.org/en-US/docs/Web/Events/change\n     * @event change\n     */\n\n    /**\n     * Fired after the `vaadin-combo-box-overlay` opens.\n     *\n     * @event vaadin-combo-box-dropdown-opened\n     */\n\n    /**\n     * Fired after the `vaadin-combo-box-overlay` closes.\n     *\n     * @event vaadin-combo-box-dropdown-closed\n     */\n  };\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,aAAa,QAAQ,yCAAyC;AACvE,SAASC,UAAU,QAAQ,sCAAsC;AACjE,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,aAAa,QAAQ,yCAAyC;AACvE,SAASC,OAAO,QAAQ,6CAA6C;AACrE,SAASC,eAAe,QAAQ,gDAAgD;AAChF,SAASC,iBAAiB,QAAQ,mDAAmD;AACrF,SAASC,GAAG,QAAQ,0CAA0C;AAC9D,SAASC,gBAAgB,QAAQ,yCAAyC;AAC1E,SAASC,UAAU,QAAQ,uCAAuC;AAClE,SAASC,aAAa,QAAQ,0CAA0C;AACxE,SAASC,yBAAyB,QAAQ,uDAAuD;AACjG,SAASC,mBAAmB,QAAQ,mCAAmC;;AAEvE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,OAAOA,KAAK,KAAKC,SAAS,IAAID,KAAK,KAAK,IAAI;AAC9C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,aAAaA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACtC,OAAOD,KAAK,CAACE,SAAS,CAAEC,IAAI,IAAK;IAC/B,IAAIA,IAAI,YAAYR,mBAAmB,EAAE;MACvC,OAAO,KAAK;IACd;IAEA,OAAOM,QAAQ,CAACE,IAAI,CAAC;EACvB,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAIC,QAAQ,IACpC,MAAMC,kBAAkB,SAASjB,iBAAiB,CAChDD,eAAe,CAACK,aAAa,CAACT,UAAU,CAACE,aAAa,CAACM,UAAU,CAACT,aAAa,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/F,CAAC,CAAC;EACA,WAAWE,UAAUA,CAAA,EAAG;IACtB,OAAO;MACL;AACR;AACA;AACA;MACQC,MAAM,EAAE;QACNC,IAAI,EAAEC,OAAO;QACbC,MAAM,EAAE,IAAI;QACZd,KAAK,EAAE,KAAK;QACZe,kBAAkB,EAAE,IAAI;QACxBC,QAAQ,EAAE;MACZ,CAAC;MAED;AACR;AACA;AACA;MACQC,gBAAgB,EAAE;QAChBL,IAAI,EAAEC;MACR,CAAC;MAED;AACR;AACA;AACA;MACQK,QAAQ,EAAE;QACRN,IAAI,EAAEC,OAAO;QACbb,KAAK,EAAE,KAAK;QACZe,kBAAkB,EAAE;MACtB,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQI,QAAQ,EAAEC,QAAQ;MAElB;AACR;AACA;AACA;AACA;MACQjB,KAAK,EAAE;QACLS,IAAI,EAAES,KAAK;QACXL,QAAQ,EAAE;MACZ,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;MACQM,gBAAgB,EAAE;QAChBV,IAAI,EAAEC,OAAO;QACbb,KAAK,EAAE;MACT,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;MACQuB,aAAa,EAAE;QACbX,IAAI,EAAES,KAAK;QACXL,QAAQ,EAAE;MACZ,CAAC;MAED;AACR;AACA;AACA;MACQQ,mBAAmB,EAAEC,MAAM;MAE3B;AACR;AACA;AACA;MACQC,OAAO,EAAE;QACPd,IAAI,EAAEC,OAAO;QACbb,KAAK,EAAE,KAAK;QACZe,kBAAkB,EAAE;MACtB,CAAC;MAED;AACR;AACA;AACA;MACQY,aAAa,EAAE;QACbf,IAAI,EAAEgB,MAAM;QACZZ,QAAQ,EAAE,sBAAsB;QAChChB,KAAK,EAAE,CAAC;MACV,CAAC;MAED;AACR;AACA;AACA;MACQ6B,MAAM,EAAE;QACNjB,IAAI,EAAEa,MAAM;QACZzB,KAAK,EAAE,EAAE;QACTc,MAAM,EAAE;MACV,CAAC;MAED;AACR;AACA;AACA;MACQgB,YAAY,EAAE;QACZlB,IAAI,EAAEmB,MAAM;QACZjB,MAAM,EAAE;MACV,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACQkB,aAAa,EAAE;QACbpB,IAAI,EAAEa,MAAM;QACZzB,KAAK,EAAE,OAAO;QACdgB,QAAQ,EAAE;MACZ,CAAC;MAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}