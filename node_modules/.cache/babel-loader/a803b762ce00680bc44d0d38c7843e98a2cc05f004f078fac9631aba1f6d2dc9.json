{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { DEFAULT_STATES, ALARM_MODE_STATE_MAP, filterSupportedAlarmStates } from \"../../cards/hui-alarm-panel-card\";\nimport { supportsFeature } from \"../../../../common/entity/supports-feature\";\nimport { ALARM_MODES } from \"../../../../data/alarm_control_panel\";\nconst cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  entity: optional(string()),\n  name: optional(string()),\n  states: optional(array()),\n  theme: optional(string())\n}));\nconst states = Object.keys(ALARM_MODE_STATE_MAP);\nexport let HuiAlarmPanelCardEditor = _decorate([customElement(\"hui-alarm-panel-card-editor\")], function (_initialize, _LitElement) {\n  class HuiAlarmPanelCardEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiAlarmPanelCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne((localize, stateObj, config_states) => [{\n          name: \"entity\",\n          required: true,\n          selector: {\n            entity: {\n              domain: \"alarm_control_panel\"\n            }\n          }\n        }, {\n          type: \"grid\",\n          name: \"\",\n          schema: [{\n            name: \"name\",\n            selector: {\n              text: {}\n            }\n          }, {\n            name: \"theme\",\n            selector: {\n              theme: {}\n            }\n          }]\n        }, {\n          name: \"states\",\n          selector: {\n            select: {\n              multiple: true,\n              mode: \"list\",\n              options: states.map(s => ({\n                value: s,\n                label: localize(`ui.card.alarm_control_panel.${s}`),\n                disabled: !config_states.includes(s) && (!stateObj || !supportsFeature(stateObj, ALARM_MODES[ALARM_MODE_STATE_MAP[s]].feature || 0))\n              }))\n            }\n          }\n        }]);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        const stateObj = this.hass.states[this._config.entity];\n        const defaultFilteredStates = filterSupportedAlarmStates(stateObj, DEFAULT_STATES);\n        const config = {\n          states: defaultFilteredStates,\n          ...this._config\n        };\n        return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${config}\n        .schema=${this._schema(this.hass.localize, stateObj, config.states)}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        var _this$_config;\n        const newConfig = ev.detail.value;\n\n        // Sort states in a consistent order\n        if (newConfig.states) {\n          const sortStates = states.filter(s => newConfig.states.includes(s));\n          newConfig.states = sortStates;\n        }\n\n        // When changing entities, clear any states that the new entity does not support\n        if (newConfig.states && newConfig.entity !== ((_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.entity)) {\n          var _this$hass;\n          const newStateObj = (_this$hass = this.hass) === null || _this$hass === void 0 ? void 0 : _this$hass.states[newConfig.entity];\n          if (newStateObj) {\n            newConfig.states = filterSupportedAlarmStates(newStateObj, newConfig.states);\n          }\n        }\n        fireEvent(this, \"config-changed\", {\n          config: newConfig\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"entity\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.entity\");\n            case \"name\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.card.generic.name\");\n            case \"theme\":\n              return `${this.hass.localize(\"ui.panel.lovelace.editor.card.generic.theme\")} (${this.hass.localize(\"ui.panel.lovelace.editor.card.config.optional\")})`;\n            default:\n              // \"states\"\n              return this.hass.localize(\"ui.panel.lovelace.editor.card.alarm-panel.available_states\");\n          }\n        };\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","nothing","customElement","property","state","memoizeOne","array","assert","assign","object","optional","string","fireEvent","baseLovelaceCardConfig","DEFAULT_STATES","ALARM_MODE_STATE_MAP","filterSupportedAlarmStates","supportsFeature","ALARM_MODES","cardConfigStruct","entity","name","states","theme","Object","keys","HuiAlarmPanelCardEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","localize","stateObj","config_states","required","selector","domain","type","schema","text","select","multiple","mode","options","map","s","label","disabled","includes","feature","render","hass","defaultFilteredStates","_schema","_computeLabelCallback","_valueChanged","ev","_this$_config","newConfig","detail","sortStates","filter","_this$hass","newStateObj"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/editor/config-elements/hui-alarm-panel-card-editor.ts"],"sourcesContent":["import { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { array, assert, assign, object, optional, string } from \"superstruct\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport type { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type {\n  AlarmPanelCardConfig,\n  AlarmPanelCardConfigState,\n} from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport {\n  DEFAULT_STATES,\n  ALARM_MODE_STATE_MAP,\n  filterSupportedAlarmStates,\n} from \"../../cards/hui-alarm-panel-card\";\nimport { supportsFeature } from \"../../../../common/entity/supports-feature\";\nimport { ALARM_MODES } from \"../../../../data/alarm_control_panel\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    states: optional(array()),\n    theme: optional(string()),\n  })\n);\n\nconst states = Object.keys(ALARM_MODE_STATE_MAP) as AlarmPanelCardConfigState[];\n\n@customElement(\"hui-alarm-panel-card-editor\")\nexport class HuiAlarmPanelCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: AlarmPanelCardConfig;\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (\n      localize: LocalizeFunc,\n      stateObj: HassEntity | undefined,\n      config_states: AlarmPanelCardConfigState[]\n    ) =>\n      [\n        {\n          name: \"entity\",\n          required: true,\n          selector: { entity: { domain: \"alarm_control_panel\" } },\n        },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n        {\n          name: \"states\",\n          selector: {\n            select: {\n              multiple: true,\n              mode: \"list\",\n              options: states.map((s) => ({\n                value: s,\n                label: localize(`ui.card.alarm_control_panel.${s}`),\n                disabled:\n                  !config_states.includes(s) &&\n                  (!stateObj ||\n                    !supportsFeature(\n                      stateObj,\n                      ALARM_MODES[ALARM_MODE_STATE_MAP[s]].feature || 0\n                    )),\n              })),\n            },\n          },\n        },\n      ] as const\n  );\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n\n    const stateObj = this.hass.states[this._config.entity];\n    const defaultFilteredStates = filterSupportedAlarmStates(\n      stateObj,\n      DEFAULT_STATES\n    );\n    const config = { states: defaultFilteredStates, ...this._config };\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${config}\n        .schema=${this._schema(this.hass.localize, stateObj, config.states)}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const newConfig = ev.detail.value;\n\n    // Sort states in a consistent order\n    if (newConfig.states) {\n      const sortStates = states.filter((s) => newConfig.states.includes(s));\n      newConfig.states = sortStates;\n    }\n\n    // When changing entities, clear any states that the new entity does not support\n    if (newConfig.states && newConfig.entity !== this._config?.entity) {\n      const newStateObj = this.hass?.states[newConfig.entity];\n      if (newStateObj) {\n        newConfig.states = filterSupportedAlarmStates(\n          newStateObj,\n          newConfig.states\n        );\n      }\n    }\n\n    fireEvent(this, \"config-changed\", { config: newConfig });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"entity\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.entity\"\n        );\n      case \"name\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.name\"\n        );\n      case \"theme\":\n        return `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.generic.theme\"\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      default:\n        // \"states\"\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.alarm-panel.available_states\"\n        );\n    }\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card-editor\": HuiAlarmPanelCardEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}