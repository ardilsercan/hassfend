{"ast":null,"code":"export const isLegacyStrategy = strategy => !(\"generate\" in strategy);\n// We assume that if a strategy config has only \"type\" and \"options\" parameters, it's a legacy strategy config\nexport const isLegacyStrategyConfig = config => Object.keys(config).length === 2 && \"options\" in config && typeof config.options === \"object\";\nexport const cleanLegacyStrategyConfig = config => {\n  if (!isLegacyStrategyConfig(config)) {\n    return config;\n  }\n  const cleanedConfig = {\n    ...config,\n    ...config.options\n  };\n  delete cleanedConfig.options;\n  return cleanedConfig;\n};","map":{"version":3,"names":["isLegacyStrategy","strategy","isLegacyStrategyConfig","config","Object","keys","length","options","cleanLegacyStrategyConfig","cleanedConfig"],"sources":["/workspaces/frontend/src/panels/lovelace/strategies/legacy-strategy.ts"],"sourcesContent":["import { LovelaceStrategyConfig } from \"../../../data/lovelace/config/strategy\";\nimport {\n  LovelaceConfig,\n  LovelaceRawConfig,\n} from \"../../../data/lovelace/config/types\";\nimport {\n  LovelaceViewConfig,\n  LovelaceViewRawConfig,\n} from \"../../../data/lovelace/config/view\";\nimport { HomeAssistant } from \"../../../types\";\n\nexport const isLegacyStrategy = (\n  strategy: any\n): strategy is LovelaceDashboardStrategy | LovelaceViewStrategy =>\n  !(\"generate\" in strategy);\n\nexport interface LovelaceDashboardStrategy {\n  generateDashboard(info: {\n    config?: LovelaceRawConfig;\n    hass: HomeAssistant;\n  }): Promise<LovelaceConfig>;\n}\n\nexport interface LovelaceViewStrategy {\n  generateView(info: {\n    view: LovelaceViewRawConfig;\n    config: LovelaceConfig;\n    hass: HomeAssistant;\n  }): Promise<LovelaceViewConfig>;\n}\n\n// We assume that if a strategy config has only \"type\" and \"options\" parameters, it's a legacy strategy config\nexport const isLegacyStrategyConfig = (config: LovelaceStrategyConfig) =>\n  Object.keys(config).length === 2 &&\n  \"options\" in config &&\n  typeof config.options === \"object\";\n\nexport const cleanLegacyStrategyConfig = (config: LovelaceStrategyConfig) => {\n  if (!isLegacyStrategyConfig(config)) {\n    return config;\n  }\n  const cleanedConfig = {\n    ...config,\n    ...config.options,\n  };\n\n  delete cleanedConfig.options;\n  return cleanedConfig;\n};\n"],"mappings":"AAWA,OAAO,MAAMA,gBAAgB,GAC3BC,QAAa,IAEb,EAAE,UAAU,IAAIA,QAAQ,CAAC;AAiB3B;AACA,OAAO,MAAMC,sBAAsB,GAAIC,MAA8B,IACnEC,MAAM,CAACC,IAAI,CAACF,MAAM,CAAC,CAACG,MAAM,KAAK,CAAC,IAChC,SAAS,IAAIH,MAAM,IACnB,OAAOA,MAAM,CAACI,OAAO,KAAK,QAAQ;AAEpC,OAAO,MAAMC,yBAAyB,GAAIL,MAA8B,IAAK;EAC3E,IAAI,CAACD,sBAAsB,CAACC,MAAM,CAAC,EAAE;IACnC,OAAOA,MAAM;EACf;EACA,MAAMM,aAAa,GAAG;IACpB,GAAGN,MAAM;IACT,GAAGA,MAAM,CAACI;EACZ,CAAC;EAED,OAAOE,aAAa,CAACF,OAAO;EAC5B,OAAOE,aAAa;AACtB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}