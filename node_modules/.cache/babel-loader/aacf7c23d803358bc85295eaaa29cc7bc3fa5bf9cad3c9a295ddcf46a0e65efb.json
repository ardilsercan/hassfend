{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-select\";\nimport \"../../../../components/ha-textfield\";\nimport { AUTOMATION_DEFAULT_MAX, AUTOMATION_DEFAULT_MODE } from \"../../../../data/automation\";\nimport { isMaxMode, MODES } from \"../../../../data/script\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nlet DialogAutomationMode = _decorate([customElement(\"ha-dialog-automation-mode\")], function (_initialize, _LitElement) {\n  class DialogAutomationMode extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogAutomationMode,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_opened\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_newMode\",\n      value() {\n        return AUTOMATION_DEFAULT_MODE;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_newMax\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._opened = true;\n        this._params = params;\n        this._newMode = params.config.mode || AUTOMATION_DEFAULT_MODE;\n        this._newMax = isMaxMode(this._newMode) ? params.config.max || AUTOMATION_DEFAULT_MAX : undefined;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._params.onClose();\n        if (this._opened) {\n          fireEvent(this, \"dialog-closed\", {\n            dialog: this.localName\n          });\n        }\n        this._opened = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_newMax$toStrin, _this$_newMax;\n        if (!this._opened) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(this.hass, this.hass.localize(\"ui.panel.config.automation.editor.change_mode\"))}\n      >\n        <ha-select\n          .label=${this.hass.localize(\"ui.panel.config.automation.editor.modes.label\")}\n          .value=${this._newMode}\n          @selected=${this._modeChanged}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          .helper=${html`\n            <a\n              style=\"color: var(--secondary-text-color)\"\n              href=${documentationUrl(this.hass, \"/docs/automation/modes/\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\"ui.panel.config.automation.editor.modes.learn_more\")}</a\n            >\n          `}\n        >\n          ${MODES.map(mode => html`\n              <mwc-list-item .value=${mode}>\n                ${this.hass.localize(`ui.panel.config.automation.editor.modes.${mode}`) || mode}\n              </mwc-list-item>\n            `)}\n        </ha-select>\n        ${isMaxMode(this._newMode) ? html`\n              <br /><ha-textfield\n                .label=${this.hass.localize(`ui.panel.config.automation.editor.max.${this._newMode}`)}\n                type=\"number\"\n                name=\"max\"\n                .value=${(_this$_newMax$toStrin = (_this$_newMax = this._newMax) === null || _this$_newMax === void 0 ? void 0 : _this$_newMax.toString()) !== null && _this$_newMax$toStrin !== void 0 ? _this$_newMax$toStrin : \"\"}\n                @change=${this._valueChanged}\n                class=\"max\"\n              >\n              </ha-textfield>\n            ` : nothing}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\"ui.panel.config.automation.editor.change_mode\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_modeChanged\",\n      value: function _modeChanged(ev) {\n        const mode = ev.target.value;\n        this._newMode = mode;\n        if (!isMaxMode(mode)) {\n          this._newMax = undefined;\n        } else if (!this._newMax) {\n          this._newMax = AUTOMATION_DEFAULT_MAX;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        ev.stopPropagation();\n        const target = ev.target;\n        if (target.name === \"max\") {\n          this._newMax = Number(target.value);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: function _save() {\n        this._params.updateAutomation({\n          ...this._params.config,\n          mode: this._newMode,\n          max: this._newMax\n        });\n        this.closeDialog();\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, haStyleDialog, css`\n        ha-select,\n        ha-textfield {\n          display: block;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","fireEvent","stopPropagation","createCloseHeading","AUTOMATION_DEFAULT_MAX","AUTOMATION_DEFAULT_MODE","isMaxMode","MODES","haStyle","haStyleDialog","documentationUrl","DialogAutomationMode","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","_opened","_params","_newMode","config","mode","_newMax","max","undefined","closeDialog","onClose","dialog","localName","render","_this$_newMax$toStrin","_this$_newMax","hass","localize","_modeChanged","map","toString","_valueChanged","_save","ev","target","name","Number","updateAutomation","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/automation/automation-mode-dialog/dialog-automation-mode.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { createCloseHeading } from \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-select\";\nimport \"../../../../components/ha-textfield\";\nimport {\n  AUTOMATION_DEFAULT_MAX,\n  AUTOMATION_DEFAULT_MODE,\n} from \"../../../../data/automation\";\nimport { isMaxMode, MODES } from \"../../../../data/script\";\nimport { HassDialog } from \"../../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport type { AutomationModeDialog } from \"./show-dialog-automation-mode\";\n\n@customElement(\"ha-dialog-automation-mode\")\nclass DialogAutomationMode extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _opened = false;\n\n  private _params!: AutomationModeDialog;\n\n  @state() private _newMode: (typeof MODES)[number] = AUTOMATION_DEFAULT_MODE;\n\n  @state() private _newMax?: number;\n\n  public showDialog(params: AutomationModeDialog): void {\n    this._opened = true;\n    this._params = params;\n    this._newMode = params.config.mode || AUTOMATION_DEFAULT_MODE;\n    this._newMax = isMaxMode(this._newMode)\n      ? params.config.max || AUTOMATION_DEFAULT_MAX\n      : undefined;\n  }\n\n  public closeDialog(): void {\n    this._params.onClose();\n\n    if (this._opened) {\n      fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    }\n    this._opened = false;\n  }\n\n  protected render() {\n    if (!this._opened) {\n      return nothing;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.panel.config.automation.editor.change_mode\")\n        )}\n      >\n        <ha-select\n          .label=${this.hass.localize(\n            \"ui.panel.config.automation.editor.modes.label\"\n          )}\n          .value=${this._newMode}\n          @selected=${this._modeChanged}\n          @closed=${stopPropagation}\n          fixedMenuPosition\n          .helper=${html`\n            <a\n              style=\"color: var(--secondary-text-color)\"\n              href=${documentationUrl(this.hass, \"/docs/automation/modes/\")}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n              >${this.hass.localize(\n                \"ui.panel.config.automation.editor.modes.learn_more\"\n              )}</a\n            >\n          `}\n        >\n          ${MODES.map(\n            (mode) => html`\n              <mwc-list-item .value=${mode}>\n                ${this.hass.localize(\n                  `ui.panel.config.automation.editor.modes.${mode}`\n                ) || mode}\n              </mwc-list-item>\n            `\n          )}\n        </ha-select>\n        ${isMaxMode(this._newMode)\n          ? html`\n              <br /><ha-textfield\n                .label=${this.hass.localize(\n                  `ui.panel.config.automation.editor.max.${this._newMode}`\n                )}\n                type=\"number\"\n                name=\"max\"\n                .value=${this._newMax?.toString() ?? \"\"}\n                @change=${this._valueChanged}\n                class=\"max\"\n              >\n              </ha-textfield>\n            `\n          : nothing}\n\n        <mwc-button @click=${this.closeDialog} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button @click=${this._save} slot=\"primaryAction\">\n          ${this.hass.localize(\"ui.panel.config.automation.editor.change_mode\")}\n        </mwc-button>\n      </ha-dialog>\n    `;\n  }\n\n  private _modeChanged(ev) {\n    const mode = ev.target.value;\n    this._newMode = mode;\n    if (!isMaxMode(mode)) {\n      this._newMax = undefined;\n    } else if (!this._newMax) {\n      this._newMax = AUTOMATION_DEFAULT_MAX;\n    }\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    const target = ev.target as any;\n    if (target.name === \"max\") {\n      this._newMax = Number(target.value);\n    }\n  }\n\n  private _save(): void {\n    this._params.updateAutomation({\n      ...this._params.config,\n      mode: this._newMode,\n      max: this._newMax,\n    });\n    this.closeDialog();\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-select,\n        ha-textfield {\n          display: block;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-automation-mode\": DialogAutomationMode;\n  }\n}\n"],"mappings":";AAAA,OAAO,sBAAsB;AAC7B,OAAO,kCAAkC;AACzC,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,SAASC,eAAe,QAAQ,yCAAyC;AACzE,SAASC,kBAAkB,QAAQ,kCAAkC;AACrE,OAAO,kCAAkC;AACzC,OAAO,qCAAqC;AAC5C,SACEC,sBAAsB,EACtBC,uBAAuB,QAClB,6BAA6B;AACpC,SAASC,SAAS,EAAEC,KAAK,QAAQ,yBAAyB;AAE1D,SAASC,OAAO,EAAEC,aAAa,QAAQ,8BAA8B;AAErE,SAASC,gBAAgB,QAAQ,oCAAoC;AAAC,IAIhEC,oBAAoB,GAAAC,SAAA,EADzBd,aAAa,CAAC,2BAA2B,CAAC,aAAAe,WAAA,EAAAC,WAAA;EAA3C,MACMH,oBAAoB,SAAAG,WAAA,CAA0C;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA2IpE;EAAC;IAAAI,CAAA,EA3IKN,oBAAoB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACvBrB,QAAQ,CAAC;QAAEsB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BpB,KAAK,CAAC,CAAC;MAAAsB,GAAA;MAAAC,MAAA;QAAA,OAAmB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAI/BpB,KAAK,CAAC,CAAC;MAAAsB,GAAA;MAAAC,MAAA;QAAA,OAA4ClB,uBAAuB;MAAA;IAAA;MAAAc,IAAA;MAAAC,UAAA,GAE1EpB,KAAK,CAAC,CAAC;MAAAsB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAER,SAAAC,WAAkBC,MAA4B,EAAQ;QACpD,IAAI,CAACC,OAAO,GAAG,IAAI;QACnB,IAAI,CAACC,OAAO,GAAGF,MAAM;QACrB,IAAI,CAACG,QAAQ,GAAGH,MAAM,CAACI,MAAM,CAACC,IAAI,IAAIzB,uBAAuB;QAC7D,IAAI,CAAC0B,OAAO,GAAGzB,SAAS,CAAC,IAAI,CAACsB,QAAQ,CAAC,GACnCH,MAAM,CAACI,MAAM,CAACG,GAAG,IAAI5B,sBAAsB,GAC3C6B,SAAS;MACf;IAAC;MAAAd,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAW,YAAA,EAA2B;QACzB,IAAI,CAACP,OAAO,CAACQ,OAAO,CAAC,CAAC;QAEtB,IAAI,IAAI,CAACT,OAAO,EAAE;UAChBzB,SAAS,CAAC,IAAI,EAAE,eAAe,EAAE;YAAEmC,MAAM,EAAE,IAAI,CAACC;UAAU,CAAC,CAAC;QAC9D;QACA,IAAI,CAACX,OAAO,GAAG,KAAK;MACtB;IAAC;MAAAP,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAe,OAAA,EAAmB;QAAA,IAAAC,qBAAA,EAAAC,aAAA;QACjB,IAAI,CAAC,IAAI,CAACd,OAAO,EAAE;UACjB,OAAO7B,OAAO;QAChB;QAEA,OAAOF,IAAK;AAChB;AACA;AACA;AACA,kBAAkB,IAAI,CAACuC,WAAY;AACnC,mBAAmB/B,kBAAkB,CAC3B,IAAI,CAACsC,IAAI,EACT,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,+CAA+C,CACpE,CAAE;AACV;AACA;AACA,mBAAmB,IAAI,CAACD,IAAI,CAACC,QAAQ,CACzB,+CACF,CAAE;AACZ,mBAAmB,IAAI,CAACd,QAAS;AACjC,sBAAsB,IAAI,CAACe,YAAa;AACxC,oBAAoBzC,eAAgB;AACpC;AACA,oBAAoBP,IAAK;AACzB;AACA;AACA,qBAAqBe,gBAAgB,CAAC,IAAI,CAAC+B,IAAI,EAAE,yBAAyB,CAAE;AAC5E;AACA;AACA,iBAAiB,IAAI,CAACA,IAAI,CAACC,QAAQ,CACnB,oDACF,CAAE;AAChB;AACA,WAAY;AACZ;AACA,YAAYnC,KAAK,CAACqC,GAAG,CACRd,IAAI,IAAKnC,IAAK;AAC3B,sCAAsCmC,IAAK;AAC3C,kBAAkB,IAAI,CAACW,IAAI,CAACC,QAAQ,CACjB,2CAA0CZ,IAAK,EAClD,CAAC,IAAIA,IAAK;AAC1B;AACA,aACU,CAAE;AACZ;AACA,UAAUxB,SAAS,CAAC,IAAI,CAACsB,QAAQ,CAAC,GACtBjC,IAAK;AACjB;AACA,yBAAyB,IAAI,CAAC8C,IAAI,CAACC,QAAQ,CACxB,yCAAwC,IAAI,CAACd,QAAS,EACzD,CAAE;AAClB;AACA;AACA,yBAAuB,CAAAW,qBAAA,IAAAC,aAAA,GAAE,IAAI,CAACT,OAAO,cAAAS,aAAA,uBAAZA,aAAA,CAAcK,QAAQ,CAAC,CAAC,cAAAN,qBAAA,cAAAA,qBAAA,GAAI,EAAG;AACxD,0BAA0B,IAAI,CAACO,aAAc;AAC7C;AACA;AACA;AACA,aAAa,GACDjD,OAAQ;AACpB;AACA,6BAA6B,IAAI,CAACqC,WAAY;AAC9C,YAAY,IAAI,CAACO,IAAI,CAACC,QAAQ,CAAC,2BAA2B,CAAE;AAC5D;AACA,6BAA6B,IAAI,CAACK,KAAM;AACxC,YAAY,IAAI,CAACN,IAAI,CAACC,QAAQ,CAAC,+CAA+C,CAAE;AAChF;AACA;AACA,KAAK;MACH;IAAC;MAAAvB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoB,aAAqBK,EAAE,EAAE;QACvB,MAAMlB,IAAI,GAAGkB,EAAE,CAACC,MAAM,CAAC1B,KAAK;QAC5B,IAAI,CAACK,QAAQ,GAAGE,IAAI;QACpB,IAAI,CAACxB,SAAS,CAACwB,IAAI,CAAC,EAAE;UACpB,IAAI,CAACC,OAAO,GAAGE,SAAS;QAC1B,CAAC,MAAM,IAAI,CAAC,IAAI,CAACF,OAAO,EAAE;UACxB,IAAI,CAACA,OAAO,GAAG3B,sBAAsB;QACvC;MACF;IAAC;MAAAe,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAuB,cAAsBE,EAAe,EAAE;QACrCA,EAAE,CAAC9C,eAAe,CAAC,CAAC;QACpB,MAAM+C,MAAM,GAAGD,EAAE,CAACC,MAAa;QAC/B,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;UACzB,IAAI,CAACnB,OAAO,GAAGoB,MAAM,CAACF,MAAM,CAAC1B,KAAK,CAAC;QACrC;MACF;IAAC;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAwB,MAAA,EAAsB;QACpB,IAAI,CAACpB,OAAO,CAACyB,gBAAgB,CAAC;UAC5B,GAAG,IAAI,CAACzB,OAAO,CAACE,MAAM;UACtBC,IAAI,EAAE,IAAI,CAACF,QAAQ;UACnBI,GAAG,EAAE,IAAI,CAACD;QACZ,CAAC,CAAC;QACF,IAAI,CAACG,WAAW,CAAC,CAAC;MACpB;IAAC;MAAAf,IAAA;MAAAkC,MAAA;MAAA/B,GAAA;MAAAC,KAAA,EAED,SAAA+B,OAAA,EAAoC;QAClC,OAAO,CACL9C,OAAO,EACPC,aAAa,EACbf,GAAI;AACV;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GA1IgCE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}