{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nexport { fetchDeviceRegistry, subscribeDeviceRegistry } from \"./ws-device_registry\";\nexport var fallbackDeviceName = function fallbackDeviceName(hass, entities) {\n  var _iterator = _createForOfIteratorHelper(entities || []),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entity = _step.value;\n      var entityId = typeof entity === \"string\" ? entity : entity.entity_id;\n      var stateObj = hass.states[entityId];\n      if (stateObj) {\n        return computeStateName(stateObj);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return undefined;\n};\nexport var computeDeviceName = function computeDeviceName(device, hass, entities) {\n  return device.name_by_user || device.name || entities && fallbackDeviceName(hass, entities) || hass.localize(\"ui.panel.config.devices.unnamed_device\", {\n    type: hass.localize(\"ui.panel.config.devices.type.\".concat(device.entry_type || \"device\"))\n  });\n};\nexport var devicesInArea = function devicesInArea(devices, areaId) {\n  return devices.filter(function (device) {\n    return device.area_id === areaId;\n  });\n};\nexport var updateDeviceRegistryEntry = function updateDeviceRegistryEntry(hass, deviceId, updates) {\n  return hass.callWS(Object.assign({\n    type: \"config/device_registry/update\",\n    device_id: deviceId\n  }, updates));\n};\nexport var removeConfigEntryFromDevice = function removeConfigEntryFromDevice(hass, deviceId, configEntryId) {\n  return hass.callWS({\n    type: \"config/device_registry/remove_config_entry\",\n    device_id: deviceId,\n    config_entry_id: configEntryId\n  });\n};\nexport var sortDeviceRegistryByName = function sortDeviceRegistryByName(entries, language) {\n  return entries.sort(function (entry1, entry2) {\n    return caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language);\n  });\n};\nexport var getDeviceEntityLookup = function getDeviceEntityLookup(entities) {\n  var deviceEntityLookup = {};\n  var _iterator2 = _createForOfIteratorHelper(entities),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var entity = _step2.value;\n      if (!entity.device_id) {\n        continue;\n      }\n      if (!(entity.device_id in deviceEntityLookup)) {\n        deviceEntityLookup[entity.device_id] = [];\n      }\n      deviceEntityLookup[entity.device_id].push(entity);\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return deviceEntityLookup;\n};\nexport var getDeviceEntityDisplayLookup = function getDeviceEntityDisplayLookup(entities) {\n  var deviceEntityLookup = {};\n  var _iterator3 = _createForOfIteratorHelper(entities),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var entity = _step3.value;\n      if (!entity.device_id) {\n        continue;\n      }\n      if (!(entity.device_id in deviceEntityLookup)) {\n        deviceEntityLookup[entity.device_id] = [];\n      }\n      deviceEntityLookup[entity.device_id].push(entity);\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  return deviceEntityLookup;\n};\nexport var getDeviceIntegrationLookup = function getDeviceIntegrationLookup(entitySources, entities) {\n  var deviceIntegrations = {};\n  var _iterator4 = _createForOfIteratorHelper(entities),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var entity = _step4.value;\n      var source = entitySources[entity.entity_id];\n      if (!(source !== null && source !== void 0 && source.domain) || entity.device_id === null) {\n        continue;\n      }\n      if (!deviceIntegrations[entity.device_id]) {\n        deviceIntegrations[entity.device_id] = [];\n      }\n      deviceIntegrations[entity.device_id].push(source.domain);\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return deviceIntegrations;\n};","map":{"version":3,"names":["computeStateName","caseInsensitiveStringCompare","fetchDeviceRegistry","subscribeDeviceRegistry","fallbackDeviceName","hass","entities","_iterator","_createForOfIteratorHelper","_step","s","n","done","entity","value","entityId","entity_id","stateObj","states","err","e","f","undefined","computeDeviceName","device","name_by_user","name","localize","type","concat","entry_type","devicesInArea","devices","areaId","filter","area_id","updateDeviceRegistryEntry","deviceId","updates","callWS","Object","assign","device_id","removeConfigEntryFromDevice","configEntryId","config_entry_id","sortDeviceRegistryByName","entries","language","sort","entry1","entry2","getDeviceEntityLookup","deviceEntityLookup","_iterator2","_step2","push","getDeviceEntityDisplayLookup","_iterator3","_step3","getDeviceIntegrationLookup","entitySources","deviceIntegrations","_iterator4","_step4","source","domain"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/device_registry.ts"],"sourcesContent":["import { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport type { HomeAssistant } from \"../types\";\nimport type {\n  EntityRegistryDisplayEntry,\n  EntityRegistryEntry,\n} from \"./entity_registry\";\nimport type { EntitySources } from \"./entity_sources\";\n\nexport {\n  fetchDeviceRegistry,\n  subscribeDeviceRegistry,\n} from \"./ws-device_registry\";\n\nexport interface DeviceRegistryEntry {\n  id: string;\n  config_entries: string[];\n  connections: Array<[string, string]>;\n  identifiers: Array<[string, string]>;\n  manufacturer: string | null;\n  model: string | null;\n  name: string | null;\n  sw_version: string | null;\n  hw_version: string | null;\n  serial_number: string | null;\n  via_device_id: string | null;\n  area_id: string | null;\n  name_by_user: string | null;\n  entry_type: \"service\" | null;\n  disabled_by: \"user\" | \"integration\" | \"config_entry\" | null;\n  configuration_url: string | null;\n}\n\nexport interface DeviceEntityDisplayLookup {\n  [deviceId: string]: EntityRegistryDisplayEntry[];\n}\n\nexport interface DeviceEntityLookup {\n  [deviceId: string]: EntityRegistryEntry[];\n}\n\nexport interface DeviceRegistryEntryMutableParams {\n  area_id?: string | null;\n  name_by_user?: string | null;\n  disabled_by?: string | null;\n}\n\nexport const fallbackDeviceName = (\n  hass: HomeAssistant,\n  entities: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) => {\n  for (const entity of entities || []) {\n    const entityId = typeof entity === \"string\" ? entity : entity.entity_id;\n    const stateObj = hass.states[entityId];\n    if (stateObj) {\n      return computeStateName(stateObj);\n    }\n  }\n  return undefined;\n};\n\nexport const computeDeviceName = (\n  device: DeviceRegistryEntry,\n  hass: HomeAssistant,\n  entities?: EntityRegistryEntry[] | EntityRegistryDisplayEntry[] | string[]\n) =>\n  device.name_by_user ||\n  device.name ||\n  (entities && fallbackDeviceName(hass, entities)) ||\n  hass.localize(\"ui.panel.config.devices.unnamed_device\", {\n    type: hass.localize(\n      `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n    ),\n  });\n\nexport const devicesInArea = (devices: DeviceRegistryEntry[], areaId: string) =>\n  devices.filter((device) => device.area_id === areaId);\n\nexport const updateDeviceRegistryEntry = (\n  hass: HomeAssistant,\n  deviceId: string,\n  updates: Partial<DeviceRegistryEntryMutableParams>\n) =>\n  hass.callWS<DeviceRegistryEntry>({\n    type: \"config/device_registry/update\",\n    device_id: deviceId,\n    ...updates,\n  });\n\nexport const removeConfigEntryFromDevice = (\n  hass: HomeAssistant,\n  deviceId: string,\n  configEntryId: string\n) =>\n  hass.callWS<DeviceRegistryEntry>({\n    type: \"config/device_registry/remove_config_entry\",\n    device_id: deviceId,\n    config_entry_id: configEntryId,\n  });\n\nexport const sortDeviceRegistryByName = (\n  entries: DeviceRegistryEntry[],\n  language: string\n) =>\n  entries.sort((entry1, entry2) =>\n    caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language)\n  );\n\nexport const getDeviceEntityLookup = (\n  entities: EntityRegistryEntry[]\n): DeviceEntityLookup => {\n  const deviceEntityLookup: DeviceEntityLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\n\nexport const getDeviceEntityDisplayLookup = (\n  entities: EntityRegistryDisplayEntry[]\n): DeviceEntityDisplayLookup => {\n  const deviceEntityLookup: DeviceEntityDisplayLookup = {};\n  for (const entity of entities) {\n    if (!entity.device_id) {\n      continue;\n    }\n    if (!(entity.device_id in deviceEntityLookup)) {\n      deviceEntityLookup[entity.device_id] = [];\n    }\n    deviceEntityLookup[entity.device_id].push(entity);\n  }\n  return deviceEntityLookup;\n};\n\nexport const getDeviceIntegrationLookup = (\n  entitySources: EntitySources,\n  entities: EntityRegistryDisplayEntry[]\n): Record<string, string[]> => {\n  const deviceIntegrations: Record<string, string[]> = {};\n\n  for (const entity of entities) {\n    const source = entitySources[entity.entity_id];\n    if (!source?.domain || entity.device_id === null) {\n      continue;\n    }\n\n    if (!deviceIntegrations[entity.device_id!]) {\n      deviceIntegrations[entity.device_id!] = [];\n    }\n    deviceIntegrations[entity.device_id!].push(source.domain);\n  }\n  return deviceIntegrations;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}