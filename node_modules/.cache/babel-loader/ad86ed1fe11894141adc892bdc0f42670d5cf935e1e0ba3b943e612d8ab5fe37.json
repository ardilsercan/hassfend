{"ast":null,"code":"import \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n/**\n * Determines whether a node is an element.\n *\n * @param node Node to check\n */\nexport var isNodeElement = function isNodeElement(node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n};\nexport function addHasRemoveClass(element) {\n  return {\n    addClass: function addClass(className) {\n      element.classList.add(className);\n    },\n    removeClass: function removeClass(className) {\n      element.classList.remove(className);\n    },\n    hasClass: function hasClass(className) {\n      return element.classList.contains(className);\n    }\n  };\n}\nvar supportsPassive = false;\nvar fn = function fn() {};\nvar optionsBlock = {\n  get passive() {\n    supportsPassive = true;\n    return false;\n  }\n};\ndocument.addEventListener('x', fn, optionsBlock);\ndocument.removeEventListener('x', fn);\n/**\n * Do event listeners suport the `passive` option?\n */\nexport var supportsPassiveEventListener = supportsPassive;\nexport var deepActiveElementPath = function deepActiveElementPath() {\n  var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.document;\n  var activeElement = doc.activeElement;\n  var path = [];\n  if (!activeElement) {\n    return path;\n  }\n  while (activeElement) {\n    path.push(activeElement);\n    if (activeElement.shadowRoot) {\n      activeElement = activeElement.shadowRoot.activeElement;\n    } else {\n      break;\n    }\n  }\n  return path;\n};\nexport var doesElementContainFocus = function doesElementContainFocus(element) {\n  var activePath = deepActiveElementPath();\n  if (!activePath.length) {\n    return false;\n  }\n  var deepActiveElement = activePath[activePath.length - 1];\n  var focusEv = new Event('check-if-focused', {\n    bubbles: true,\n    composed: true\n  });\n  var composedPath = [];\n  var listener = function listener(ev) {\n    composedPath = ev.composedPath();\n  };\n  document.body.addEventListener('check-if-focused', listener);\n  deepActiveElement.dispatchEvent(focusEv);\n  document.body.removeEventListener('check-if-focused', listener);\n  return composedPath.indexOf(element) !== -1;\n};","map":{"version":3,"names":["isNodeElement","node","nodeType","Node","ELEMENT_NODE","addHasRemoveClass","element","addClass","className","classList","add","removeClass","remove","hasClass","contains","supportsPassive","fn","optionsBlock","passive","document","addEventListener","removeEventListener","supportsPassiveEventListener","deepActiveElementPath","doc","arguments","length","undefined","window","activeElement","path","push","shadowRoot","doesElementContainFocus","activePath","deepActiveElement","focusEv","Event","bubbles","composed","composedPath","listener","ev","body","dispatchEvent","indexOf"],"sources":["utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\n/**\n * Determines whether a node is an element.\n *\n * @param node Node to check\n */\nexport const isNodeElement = (node: Node): node is Element => {\n  return node.nodeType === Node.ELEMENT_NODE;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type Constructor<T> = new (...args: any[]) => T;\n\nexport function addHasRemoveClass(element: HTMLElement) {\n  return {\n    addClass: (className: string) => {\n      element.classList.add(className);\n    },\n    removeClass: (className: string) => {\n      element.classList.remove(className);\n    },\n    hasClass: (className: string) => element.classList.contains(className),\n  };\n}\n\nlet supportsPassive = false;\nconst fn = () => { /* empty listener */ };\nconst optionsBlock: AddEventListenerOptions = {\n  get passive() {\n    supportsPassive = true;\n    return false;\n  }\n};\ndocument.addEventListener('x', fn, optionsBlock);\ndocument.removeEventListener('x', fn);\n/**\n * Do event listeners suport the `passive` option?\n */\nexport const supportsPassiveEventListener = supportsPassive;\n\nexport const deepActiveElementPath = (doc = window.document): Element[] => {\n  let activeElement = doc.activeElement;\n  const path: Element[] = [];\n\n  if (!activeElement) {\n    return path;\n  }\n\n  while (activeElement) {\n    path.push(activeElement);\n    if (activeElement.shadowRoot) {\n      activeElement = activeElement.shadowRoot.activeElement;\n    } else {\n      break;\n    }\n  }\n\n  return path;\n};\n\nexport const doesElementContainFocus = (element: HTMLElement): boolean => {\n  const activePath = deepActiveElementPath();\n\n  if (!activePath.length) {\n    return false;\n  }\n\n  const deepActiveElement = activePath[activePath.length - 1];\n  const focusEv =\n      new Event('check-if-focused', {bubbles: true, composed: true});\n  let composedPath: EventTarget[] = [];\n  const listener = (ev: Event) => {\n    composedPath = ev.composedPath();\n  };\n\n  document.body.addEventListener('check-if-focused', listener);\n  deepActiveElement.dispatchEvent(focusEv);\n  document.body.removeEventListener('check-if-focused', listener);\n\n  return composedPath.indexOf(element) !== -1;\n};\n\nexport interface RippleInterface {\n  startPress: (e?: Event) => void;\n  endPress: () => void;\n  startFocus: () => void;\n  endFocus: () => void;\n  startHover: () => void;\n  endHover: () => void;\n}\n"],"mappings":";;AAAA;;;;;AAMA;AACA;AAEA;;;;;AAKA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAaA,CAAIC,IAAU,EAAqB;EAC3D,OAAOA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY;AAC5C,CAAC;AAKD,OAAM,SAAUC,iBAAiBA,CAACC,OAAoB;EACpD,OAAO;IACLC,QAAQ,EAAE,SAAAA,SAACC,SAAiB,EAAI;MAC9BF,OAAO,CAACG,SAAS,CAACC,GAAG,CAACF,SAAS,CAAC;IAClC,CAAC;IACDG,WAAW,EAAE,SAAAA,YAACH,SAAiB,EAAI;MACjCF,OAAO,CAACG,SAAS,CAACG,MAAM,CAACJ,SAAS,CAAC;IACrC,CAAC;IACDK,QAAQ,EAAE,SAAAA,SAACL,SAAiB;MAAA,OAAKF,OAAO,CAACG,SAAS,CAACK,QAAQ,CAACN,SAAS,CAAC;IAAA;GACvE;AACH;AAEA,IAAIO,eAAe,GAAG,KAAK;AAC3B,IAAMC,EAAE,GAAG,SAALA,EAAEA,CAAA,EAAQ,CAAwB,CAAC;AACzC,IAAMC,YAAY,GAA4B;EAC5C,IAAIC,OAAOA,CAAA;IACTH,eAAe,GAAG,IAAI;IACtB,OAAO,KAAK;EACd;CACD;AACDI,QAAQ,CAACC,gBAAgB,CAAC,GAAG,EAAEJ,EAAE,EAAEC,YAAY,CAAC;AAChDE,QAAQ,CAACE,mBAAmB,CAAC,GAAG,EAAEL,EAAE,CAAC;AACrC;;;AAGA,OAAO,IAAMM,4BAA4B,GAAGP,eAAe;AAE3D,OAAO,IAAMQ,qBAAqB,GAAG,SAAxBA,qBAAqBA,CAAA,EAAwC;EAAA,IAApCC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGG,MAAM,CAACT,QAAQ;EACzD,IAAIU,aAAa,GAAGL,GAAG,CAACK,aAAa;EACrC,IAAMC,IAAI,GAAc,EAAE;EAE1B,IAAI,CAACD,aAAa,EAAE;IAClB,OAAOC,IAAI;;EAGb,OAAOD,aAAa,EAAE;IACpBC,IAAI,CAACC,IAAI,CAACF,aAAa,CAAC;IACxB,IAAIA,aAAa,CAACG,UAAU,EAAE;MAC5BH,aAAa,GAAGA,aAAa,CAACG,UAAU,CAACH,aAAa;KACvD,MAAM;MACL;;;EAIJ,OAAOC,IAAI;AACb,CAAC;AAED,OAAO,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAI3B,OAAoB,EAAa;EACvE,IAAM4B,UAAU,GAAGX,qBAAqB,EAAE;EAE1C,IAAI,CAACW,UAAU,CAACR,MAAM,EAAE;IACtB,OAAO,KAAK;;EAGd,IAAMS,iBAAiB,GAAGD,UAAU,CAACA,UAAU,CAACR,MAAM,GAAG,CAAC,CAAC;EAC3D,IAAMU,OAAO,GACT,IAAIC,KAAK,CAAC,kBAAkB,EAAE;IAACC,OAAO,EAAE,IAAI;IAAEC,QAAQ,EAAE;EAAI,CAAC,CAAC;EAClE,IAAIC,YAAY,GAAkB,EAAE;EACpC,IAAMC,QAAQ,GAAG,SAAXA,QAAQA,CAAIC,EAAS,EAAI;IAC7BF,YAAY,GAAGE,EAAE,CAACF,YAAY,EAAE;EAClC,CAAC;EAEDrB,QAAQ,CAACwB,IAAI,CAACvB,gBAAgB,CAAC,kBAAkB,EAAEqB,QAAQ,CAAC;EAC5DN,iBAAiB,CAACS,aAAa,CAACR,OAAO,CAAC;EACxCjB,QAAQ,CAACwB,IAAI,CAACtB,mBAAmB,CAAC,kBAAkB,EAAEoB,QAAQ,CAAC;EAE/D,OAAOD,YAAY,CAACK,OAAO,CAACvC,OAAO,CAAC,KAAK,CAAC,CAAC;AAC7C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}