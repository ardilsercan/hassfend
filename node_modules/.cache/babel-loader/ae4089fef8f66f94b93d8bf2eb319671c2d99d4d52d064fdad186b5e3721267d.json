{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiTelevision = \"M21,17H3V5H21M21,3H3A2,2 0 0,0 1,5V17A2,2 0 0,0 3,19H8V21H16V19H21A2,2 0 0,0 23,17V5A2,2 0 0,0 21,3Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { castSendShowDemo } from \"../../../src/cast/receiver_messages\";\nimport \"../../../src/components/ha-icon\";\nlet CastDemoRow = _decorate([customElement(\"cast-demo-row\")], function (_initialize, _LitElement) {\n  class CastDemoRow extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: CastDemoRow,\n    d: [{\n      kind: \"field\",\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_castManager\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(_config) {\n        // No config possible.\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._castManager || this._castManager.castState === \"NO_DEVICES_AVAILABLE\") {\n          return nothing;\n        }\n        return html`\n      <ha-svg-icon .path=${mdiTelevision}></ha-svg-icon>\n      <div class=\"flex\">\n        <div class=\"name\">Show Chromecast interface</div>\n        <google-cast-launcher></google-cast-launcher>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(CastDemoRow.prototype), \"firstUpdated\", this).call(this, changedProps);\n        import(\"../../../src/cast/cast_manager\").then(({\n          getCastManager\n        }) => getCastManager().then(mgr => {\n          this._castManager = mgr;\n          mgr.addEventListener(\"state-changed\", () => {\n            this.requestUpdate();\n          });\n          mgr.castContext.addEventListener(\n          // eslint-disable-next-line no-undef\n          cast.framework.CastContextEventType.SESSION_STATE_CHANGED, ev => {\n            // On Android, opening a new session always results in SESSION_RESUMED.\n            // So treat both as the same.\n            if (ev.sessionState === \"SESSION_STARTED\" || ev.sessionState === \"SESSION_RESUMED\") {\n              castSendShowDemo(mgr);\n            }\n          });\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(CastDemoRow.prototype), \"updated\", this).call(this, changedProps);\n        this.style.display = this._castManager ? \"\" : \"none\";\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-svg-icon {\n        padding: 8px;\n        color: var(--paper-item-icon-color);\n      }\n      .flex {\n        flex: 1;\n        overflow: hidden;\n        margin-left: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      google-cast-launcher {\n        cursor: pointer;\n        display: inline-block;\n        height: 24px;\n        width: 24px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","state","castSendShowDemo","CastDemoRow","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","value","decorators","setConfig","_config","render","_castManager","castState","mdiTelevision","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","then","getCastManager","mgr","addEventListener","requestUpdate","castContext","cast","framework","CastContextEventType","SESSION_STATE_CHANGED","ev","sessionState","updated","style","display","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/demo/src/custom-cards/cast-demo-row.ts"],"sourcesContent":["import { mdiTelevision } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, state } from \"lit/decorators\";\nimport { CastManager } from \"../../../src/cast/cast_manager\";\nimport { castSendShowDemo } from \"../../../src/cast/receiver_messages\";\nimport \"../../../src/components/ha-icon\";\nimport {\n  CastConfig,\n  LovelaceRow,\n} from \"../../../src/panels/lovelace/entity-rows/types\";\nimport { HomeAssistant } from \"../../../src/types\";\n\n@customElement(\"cast-demo-row\")\nclass CastDemoRow extends LitElement implements LovelaceRow {\n  public hass!: HomeAssistant;\n\n  @state() private _castManager?: CastManager | null;\n\n  public setConfig(_config: CastConfig): void {\n    // No config possible.\n  }\n\n  protected render() {\n    if (\n      !this._castManager ||\n      this._castManager.castState === \"NO_DEVICES_AVAILABLE\"\n    ) {\n      return nothing;\n    }\n    return html`\n      <ha-svg-icon .path=${mdiTelevision}></ha-svg-icon>\n      <div class=\"flex\">\n        <div class=\"name\">Show Chromecast interface</div>\n        <google-cast-launcher></google-cast-launcher>\n      </div>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    import(\"../../../src/cast/cast_manager\").then(({ getCastManager }) =>\n      getCastManager().then((mgr) => {\n        this._castManager = mgr;\n        mgr.addEventListener(\"state-changed\", () => {\n          this.requestUpdate();\n        });\n        mgr.castContext.addEventListener(\n          // eslint-disable-next-line no-undef\n          cast.framework.CastContextEventType.SESSION_STATE_CHANGED,\n          (ev) => {\n            // On Android, opening a new session always results in SESSION_RESUMED.\n            // So treat both as the same.\n            if (\n              ev.sessionState === \"SESSION_STARTED\" ||\n              ev.sessionState === \"SESSION_RESUMED\"\n            ) {\n              castSendShowDemo(mgr);\n            }\n          }\n        );\n      })\n    );\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    this.style.display = this._castManager ? \"\" : \"none\";\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        align-items: center;\n      }\n      ha-svg-icon {\n        padding: 8px;\n        color: var(--paper-item-icon-color);\n      }\n      .flex {\n        flex: 1;\n        overflow: hidden;\n        margin-left: 16px;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n      }\n      .name {\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n      }\n      google-cast-launcher {\n        cursor: pointer;\n        display: inline-block;\n        height: 24px;\n        width: 24px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"cast-demo-row\": CastDemoRow;\n  }\n}\n"],"mappings":";;;;AACA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AACpE,SAASC,aAAa,EAAEC,KAAK,QAAQ,gBAAgB;AAErD,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,OAAO,iCAAiC;AAAC,IAQnCC,WAAW,GAAAC,SAAA,EADhBJ,aAAa,CAAC,eAAe,CAAC,aAAAK,WAAA,EAAAC,WAAA;EAA/B,MACMH,WAAW,SAAAG,WAAA,CAA2C;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAuF5D;EAAC;IAAAI,CAAA,EAvFKN,WAAW;IAAAO,CAAA;MAAAC,IAAA;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAG,UAAA,GAGdb,KAAK,CAAC,CAAC;MAAAW,GAAA;MAAAC,KAAA;IAAA;MAAAF,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAER,SAAAE,UAAiBC,OAAmB,EAAQ;QAC1C;MAAA;IACD;MAAAL,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAED,SAAAI,OAAA,EAAmB;QACjB,IACE,CAAC,IAAI,CAACC,YAAY,IAClB,IAAI,CAACA,YAAY,CAACC,SAAS,KAAK,sBAAsB,EACtD;UACA,OAAOpB,OAAO;QAChB;QACA,OAAOF,IAAK;AAChB,2BAA2BuB,aAAc;AACzC;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;MAAAT,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAED,SAAAQ,aAAuBC,YAAY,EAAE;QACnCC,IAAA,CAAAC,eAAA,CA1BErB,WAAW,CAAAsB,SAAA,yBAAAC,IAAA,OA0BMJ,YAAY;QAC/B,MAAM,CAAC,gCAAgC,CAAC,CAACK,IAAI,CAAC,CAAC;UAAEC;QAAe,CAAC,KAC/DA,cAAc,CAAC,CAAC,CAACD,IAAI,CAAEE,GAAG,IAAK;UAC7B,IAAI,CAACX,YAAY,GAAGW,GAAG;UACvBA,GAAG,CAACC,gBAAgB,CAAC,eAAe,EAAE,MAAM;YAC1C,IAAI,CAACC,aAAa,CAAC,CAAC;UACtB,CAAC,CAAC;UACFF,GAAG,CAACG,WAAW,CAACF,gBAAgB;UAC9B;UACAG,IAAI,CAACC,SAAS,CAACC,oBAAoB,CAACC,qBAAqB,EACxDC,EAAE,IAAK;YACN;YACA;YACA,IACEA,EAAE,CAACC,YAAY,KAAK,iBAAiB,IACrCD,EAAE,CAACC,YAAY,KAAK,iBAAiB,EACrC;cACApC,gBAAgB,CAAC2B,GAAG,CAAC;YACvB;UACF,CACF,CAAC;QACH,CAAC,CACH,CAAC;MACH;IAAC;MAAAlB,IAAA;MAAAC,GAAA;MAAAC,KAAA,EAED,SAAA0B,QAAkBjB,YAAY,EAAE;QAC9BC,IAAA,CAAAC,eAAA,CApDErB,WAAW,CAAAsB,SAAA,oBAAAC,IAAA,OAoDCJ,YAAY;QAC1B,IAAI,CAACkB,KAAK,CAACC,OAAO,GAAG,IAAI,CAACvB,YAAY,GAAG,EAAE,GAAG,MAAM;MACtD;IAAC;MAAAP,IAAA;MAAA+B,MAAA;MAAA9B,GAAA;MAAAC,KAAA,EAED,SAAA8B,OAAA,EAAoC;QAClC,OAAO/C,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAtFuBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}