{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"core-js/modules/es.array.push.js\";\nvar mdiAccessPoint = \"M4.93,4.93C3.12,6.74 2,9.24 2,12C2,14.76 3.12,17.26 4.93,19.07L6.34,17.66C4.89,16.22 4,14.22 4,12C4,9.79 4.89,7.78 6.34,6.34L4.93,4.93M19.07,4.93L17.66,6.34C19.11,7.78 20,9.79 20,12C20,14.22 19.11,16.22 17.66,17.66L19.07,19.07C20.88,17.26 22,14.76 22,12C22,9.24 20.88,6.74 19.07,4.93M7.76,7.76C6.67,8.85 6,10.35 6,12C6,13.65 6.67,15.15 7.76,16.24L9.17,14.83C8.45,14.11 8,13.11 8,12C8,10.89 8.45,9.89 9.17,9.17L7.76,7.76M16.24,7.76L14.83,9.17C15.55,9.89 16,10.89 16,12C16,13.11 15.55,14.11 14.83,14.83L16.24,16.24C17.33,15.15 18,13.65 18,12C18,10.35 17.33,8.85 16.24,7.76M12,10A2,2 0 0,0 10,12A2,2 0 0,0 12,14A2,2 0 0,0 14,12A2,2 0 0,0 12,10Z\";\nvar mdiChatProcessing = \"M12,3C17.5,3 22,6.58 22,11C22,15.42 17.5,19 12,19C10.76,19 9.57,18.82 8.47,18.5C5.55,21 2,21 2,21C4.33,18.67 4.7,17.1 4.75,16.5C3.05,15.07 2,13.13 2,11C2,6.58 6.5,3 12,3M17,12V10H15V12H17M13,12V10H11V12H13M9,12V10H7V12H9Z\";\nvar mdiChatQuestion = \"M12 3C6.5 3 2 6.6 2 11C2 13.1 3 15.1 4.8 16.5C4.8 17.1 4.4 18.7 2 21C2 21 5.5 21 8.5 18.5C9.6 18.8 10.8 19 12 19C17.5 19 22 15.4 22 11S17.5 3 12 3M13 15H11V13H13V15M14.8 10C14.5 10.4 14.1 10.6 13.7 10.8C13.4 11 13.3 11.1 13.2 11.3C13 11.5 13 11.7 13 12H11C11 11.5 11.1 11.2 11.3 10.9C11.5 10.7 11.9 10.4 12.4 10.1C12.7 10 12.9 9.8 13 9.6C13.1 9.4 13.2 9.1 13.2 8.9C13.2 8.6 13.1 8.4 12.9 8.2C12.7 8 12.4 7.9 12.1 7.9C11.8 7.9 11.6 8 11.4 8.1C11.2 8.2 11.1 8.4 11.1 8.7H9.1C9.2 8 9.5 7.4 10 7C10.5 6.6 11.2 6.5 12.1 6.5C13 6.5 13.8 6.7 14.3 7.1C14.8 7.5 15.1 8.1 15.1 8.8C15.2 9.2 15.1 9.6 14.8 10Z\";\nvar mdiExportVariant = \"M12,1L8,5H11V14H13V5H16M18,23H6C4.89,23 4,22.1 4,21V9A2,2 0 0,1 6,7H9V9H6V21H18V9H15V7H18A2,2 0 0,1 20,9V21A2,2 0 0,1 18,23Z\";\nimport { NetworkType, getMatterNodeDiagnostics } from \"../../../../../../data/matter\";\nimport { showMatterReinterviewNodeDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-reinterview-node\";\nimport { showMatterPingNodeDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-ping-node\";\nimport { showMatterOpenCommissioningWindowDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-open-commissioning-window\";\nimport { showMatterManageFabricsDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-manage-fabrics\";\nimport { navigate } from \"../../../../../../common/navigate\";\nexport var getMatterDeviceActions = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(el, hass, device) {\n    var nodeDiagnostics, actions;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!(device.via_device_id !== null)) {\n            _context.next = 2;\n            break;\n          }\n          return _context.abrupt(\"return\", []);\n        case 2:\n          _context.next = 4;\n          return getMatterNodeDiagnostics(hass, device.id);\n        case 4:\n          nodeDiagnostics = _context.sent;\n          actions = [];\n          if (nodeDiagnostics.available) {\n            // actions that can only be performed if the device is alive\n            actions.push({\n              label: hass.localize(\"ui.panel.config.matter.device_actions.open_commissioning_window\"),\n              icon: mdiExportVariant,\n              action: function action() {\n                return showMatterOpenCommissioningWindowDialog(el, {\n                  device_id: device.id\n                });\n              }\n            });\n            actions.push({\n              label: hass.localize(\"ui.panel.config.matter.device_actions.manage_fabrics\"),\n              icon: mdiExportVariant,\n              action: function action() {\n                return showMatterManageFabricsDialog(el, {\n                  device_id: device.id\n                });\n              }\n            });\n            actions.push({\n              label: hass.localize(\"ui.panel.config.matter.device_actions.reinterview_device\"),\n              icon: mdiChatProcessing,\n              action: function action() {\n                return showMatterReinterviewNodeDialog(el, {\n                  device_id: device.id\n                });\n              }\n            });\n          }\n          if (nodeDiagnostics.network_type === NetworkType.THREAD) {\n            actions.push({\n              label: hass.localize(\"ui.panel.config.matter.device_actions.view_thread_network\"),\n              icon: mdiAccessPoint,\n              action: function action() {\n                return navigate(\"/config/thread\");\n              }\n            });\n          }\n          actions.push({\n            label: hass.localize(\"ui.panel.config.matter.device_actions.ping_device\"),\n            icon: mdiChatQuestion,\n            action: function action() {\n              return showMatterPingNodeDialog(el, {\n                device_id: device.id\n              });\n            }\n          });\n          return _context.abrupt(\"return\", actions);\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function getMatterDeviceActions(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["NetworkType","getMatterNodeDiagnostics","showMatterReinterviewNodeDialog","showMatterPingNodeDialog","showMatterOpenCommissioningWindowDialog","showMatterManageFabricsDialog","navigate","getMatterDeviceActions","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","el","hass","device","nodeDiagnostics","actions","wrap","_callee$","_context","prev","next","via_device_id","abrupt","id","sent","available","push","label","localize","icon","mdiExportVariant","action","device_id","mdiChatProcessing","network_type","THREAD","mdiAccessPoint","mdiChatQuestion","stop","_x","_x2","_x3","apply","arguments"],"sources":["/workspaces/frontend/src/panels/config/devices/device-detail/integration-elements/matter/device-actions.ts"],"sourcesContent":["import {\n  mdiAccessPoint,\n  mdiChatProcessing,\n  mdiChatQuestion,\n  mdiExportVariant,\n} from \"@mdi/js\";\nimport { DeviceRegistryEntry } from \"../../../../../../data/device_registry\";\nimport {\n  NetworkType,\n  getMatterNodeDiagnostics,\n} from \"../../../../../../data/matter\";\nimport type { HomeAssistant } from \"../../../../../../types\";\nimport { showMatterReinterviewNodeDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-reinterview-node\";\nimport { showMatterPingNodeDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-ping-node\";\nimport { showMatterOpenCommissioningWindowDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-open-commissioning-window\";\nimport type { DeviceAction } from \"../../../ha-config-device-page\";\nimport { showMatterManageFabricsDialog } from \"../../../../integrations/integration-panels/matter/show-dialog-matter-manage-fabrics\";\nimport { navigate } from \"../../../../../../common/navigate\";\n\nexport const getMatterDeviceActions = async (\n  el: HTMLElement,\n  hass: HomeAssistant,\n  device: DeviceRegistryEntry\n): Promise<DeviceAction[]> => {\n  if (device.via_device_id !== null) {\n    // only show device actions for top level nodes (so not bridged)\n    return [];\n  }\n\n  const nodeDiagnostics = await getMatterNodeDiagnostics(hass, device.id);\n\n  const actions: DeviceAction[] = [];\n\n  if (nodeDiagnostics.available) {\n    // actions that can only be performed if the device is alive\n    actions.push({\n      label: hass.localize(\n        \"ui.panel.config.matter.device_actions.open_commissioning_window\"\n      ),\n      icon: mdiExportVariant,\n      action: () =>\n        showMatterOpenCommissioningWindowDialog(el, {\n          device_id: device.id,\n        }),\n    });\n    actions.push({\n      label: hass.localize(\n        \"ui.panel.config.matter.device_actions.manage_fabrics\"\n      ),\n      icon: mdiExportVariant,\n      action: () =>\n        showMatterManageFabricsDialog(el, {\n          device_id: device.id,\n        }),\n    });\n    actions.push({\n      label: hass.localize(\n        \"ui.panel.config.matter.device_actions.reinterview_device\"\n      ),\n      icon: mdiChatProcessing,\n      action: () =>\n        showMatterReinterviewNodeDialog(el, {\n          device_id: device.id,\n        }),\n    });\n  }\n\n  if (nodeDiagnostics.network_type === NetworkType.THREAD) {\n    actions.push({\n      label: hass.localize(\n        \"ui.panel.config.matter.device_actions.view_thread_network\"\n      ),\n      icon: mdiAccessPoint,\n      action: () => navigate(\"/config/thread\"),\n    });\n  }\n\n  actions.push({\n    label: hass.localize(\"ui.panel.config.matter.device_actions.ping_device\"),\n    icon: mdiChatQuestion,\n    action: () =>\n      showMatterPingNodeDialog(el, {\n        device_id: device.id,\n      }),\n  });\n\n  return actions;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}