{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { callService as _callService, ERR_CONNECTION_LOST, ERR_INVALID_AUTH, subscribeConfig, subscribeEntities, subscribeServices } from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { subscribeAreaRegistry } from \"../data/area_registry\";\nimport { broadcastConnectionStatus } from \"../data/connection-status\";\nimport { subscribeDeviceRegistry } from \"../data/device_registry\";\nimport { subscribeEntityRegistryDisplay } from \"../data/entity_registry\";\nimport { subscribeFrontendUserData } from \"../data/frontend\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { DEFAULT_PANEL } from \"../data/panel\";\nimport { serviceCallWillDisconnect } from \"../data/service\";\nimport { DateFormat, FirstWeekday, NumberFormat, TimeFormat, TimeZone } from \"../data/translation\";\nimport { subscribePanels } from \"../data/ws-panels\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport { fetchWithAuth as _fetchWithAuth } from \"../util/fetch-with-auth\";\nimport { getState } from \"../util/ha-pref-storage\";\nimport hassCallApi from \"../util/hass-call-api\";\nexport var connectionMixin = function connectionMixin(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(_class, _superClass);\n    function _class() {\n      _classCallCheck(this, _class);\n      return _callSuper(this, _class, arguments);\n    }\n    _createClass(_class, [{\n      key: \"initializeHass\",\n      value: function initializeHass(auth, conn) {\n        var _this = this;\n        var language = getLocalLanguage();\n        this.hass = Object.assign(Object.assign({\n          auth: auth,\n          connection: conn,\n          connected: true,\n          states: null,\n          entities: null,\n          devices: null,\n          areas: null,\n          config: null,\n          themes: null,\n          selectedTheme: null,\n          panels: null,\n          services: null,\n          user: null,\n          panelUrl: this._panelUrl,\n          defaultPanel: DEFAULT_PANEL,\n          language: language,\n          selectedLanguage: null,\n          locale: {\n            language: language,\n            number_format: NumberFormat.language,\n            time_format: TimeFormat.language,\n            date_format: DateFormat.language,\n            time_zone: TimeZone.local,\n            first_weekday: FirstWeekday.language\n          },\n          resources: null,\n          localize: function localize() {\n            return \"\";\n          },\n          translationMetadata: translationMetadata,\n          dockedSidebar: \"docked\",\n          vibrate: true,\n          debugConnection: false,\n          suspendWhenHidden: true,\n          enableShortcuts: true,\n          moreInfoEntityId: null,\n          hassUrl: function hassUrl() {\n            var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n            return new URL(path, auth.data.hassUrl).toString();\n          },\n          callService: function () {\n            var _callService2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(domain, service, serviceData, target) {\n              var _this$hass;\n              var notifyOnError,\n                _err$error,\n                _this$hass2,\n                _err$error2,\n                lokalize,\n                localizedErrorMessage,\n                message,\n                _args = arguments;\n              return _regeneratorRuntime().wrap(function _callee$(_context) {\n                while (1) switch (_context.prev = _context.next) {\n                  case 0:\n                    notifyOnError = _args.length > 4 && _args[4] !== undefined ? _args[4] : true;\n                    if (__DEV__ || (_this$hass = _this.hass) !== null && _this$hass !== void 0 && _this$hass.debugConnection) {\n                      // eslint-disable-next-line no-console\n                      console.log(\"Calling service\", domain, service, serviceData, target);\n                    }\n                    _context.prev = 2;\n                    _context.next = 5;\n                    return _callService(conn, domain, service, serviceData !== null && serviceData !== void 0 ? serviceData : {}, target);\n                  case 5:\n                    return _context.abrupt(\"return\", _context.sent);\n                  case 8:\n                    _context.prev = 8;\n                    _context.t0 = _context[\"catch\"](2);\n                    if (!(((_err$error = _context.t0.error) === null || _err$error === void 0 ? void 0 : _err$error.code) === ERR_CONNECTION_LOST && serviceCallWillDisconnect(domain, service, serviceData))) {\n                      _context.next = 12;\n                      break;\n                    }\n                    return _context.abrupt(\"return\", {\n                      context: {\n                        id: \"\"\n                      }\n                    });\n                  case 12:\n                    if (__DEV__ || (_this$hass2 = _this.hass) !== null && _this$hass2 !== void 0 && _this$hass2.debugConnection) {\n                      // eslint-disable-next-line no-console\n                      console.error(\"Error calling service\", domain, service, serviceData, target);\n                    }\n                    if (!notifyOnError) {\n                      _context.next = 21;\n                      break;\n                    }\n                    forwardHaptic(\"failure\");\n                    _context.next = 17;\n                    return _this.hass.loadBackendTranslation(\"exceptions\", _context.t0.translation_domain);\n                  case 17:\n                    lokalize = _context.sent;\n                    localizedErrorMessage = lokalize(\"component.\".concat(_context.t0.translation_domain, \".exceptions.\").concat(_context.t0.translation_key, \".message\"), _context.t0.translation_placeholders);\n                    message = localizedErrorMessage || _this.hass.localize(\"ui.notification_toast.service_call_failed\", \"service\", \"\".concat(domain, \"/\").concat(service)) + \" \".concat(_context.t0.message || (((_err$error2 = _context.t0.error) === null || _err$error2 === void 0 ? void 0 : _err$error2.code) === ERR_CONNECTION_LOST ? \"connection lost\" : \"unknown error\"));\n                    fireEvent(_this, \"hass-notification\", {\n                      message: message,\n                      duration: 10000\n                    });\n                  case 21:\n                    throw _context.t0;\n                  case 22:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }, _callee, null, [[2, 8]]);\n            }));\n            function callService(_x, _x2, _x3, _x4) {\n              return _callService2.apply(this, arguments);\n            }\n            return callService;\n          }(),\n          callApi: function () {\n            var _callApi = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(method, path, parameters, headers) {\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    return _context2.abrupt(\"return\", hassCallApi(auth, method, path, parameters, headers));\n                  case 1:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2);\n            }));\n            function callApi(_x5, _x6, _x7, _x8) {\n              return _callApi.apply(this, arguments);\n            }\n            return callApi;\n          }(),\n          fetchWithAuth: function fetchWithAuth(path, init) {\n            return _fetchWithAuth(auth, \"\".concat(auth.data.hassUrl).concat(path), init);\n          },\n          // For messages that do not get a response\n          sendWS: function sendWS(msg) {\n            var _this$hass3;\n            if (__DEV__ || (_this$hass3 = _this.hass) !== null && _this$hass3 !== void 0 && _this$hass3.debugConnection) {\n              // eslint-disable-next-line no-console\n              console.log(\"Sending\", msg);\n            }\n            conn.sendMessage(msg);\n          },\n          // For messages that expect a response\n          callWS: function callWS(msg) {\n            var _this$hass4, _this$hass5;\n            if (__DEV__ || (_this$hass4 = _this.hass) !== null && _this$hass4 !== void 0 && _this$hass4.debugConnection) {\n              // eslint-disable-next-line no-console\n              console.log(\"Sending\", msg);\n            }\n            var resp = conn.sendMessagePromise(msg);\n            if (__DEV__ || (_this$hass5 = _this.hass) !== null && _this$hass5 !== void 0 && _this$hass5.debugConnection) {\n              resp.then(\n              // eslint-disable-next-line no-console\n              function (result) {\n                return console.log(\"Received\", result);\n              },\n              // eslint-disable-next-line no-console\n              function (err) {\n                return console.error(\"Error\", err);\n              });\n            }\n            return resp;\n          },\n          loadBackendTranslation: function loadBackendTranslation(category, integration, configFlow) {\n            var _this$hass6;\n            return (\n              // @ts-ignore\n              _this._loadHassTranslations((_this$hass6 = _this.hass) === null || _this$hass6 === void 0 ? void 0 : _this$hass6.language, category, integration, configFlow)\n            );\n          },\n          loadFragmentTranslation: function loadFragmentTranslation(fragment) {\n            var _this$hass7;\n            return (\n              // @ts-ignore\n              _this._loadFragmentTranslations((_this$hass7 = _this.hass) === null || _this$hass7 === void 0 ? void 0 : _this$hass7.language, fragment)\n            );\n          },\n          formatEntityState: function formatEntityState(stateObj, state) {\n            var _ref;\n            return (_ref = state != null ? state : stateObj.state) !== null && _ref !== void 0 ? _ref : \"\";\n          },\n          formatEntityAttributeName: function formatEntityAttributeName(_stateObj, attribute) {\n            return attribute;\n          },\n          formatEntityAttributeValue: function formatEntityAttributeValue(stateObj, attribute, value) {\n            var _stateObj$attributes$;\n            return value != null ? value : (_stateObj$attributes$ = stateObj.attributes[attribute]) !== null && _stateObj$attributes$ !== void 0 ? _stateObj$attributes$ : \"\";\n          }\n        }, getState()), this._pendingHass);\n        this.hassConnected();\n      }\n    }, {\n      key: \"hassConnected\",\n      value: function hassConnected() {\n        var _this2 = this;\n        _get(_getPrototypeOf(_class.prototype), \"hassConnected\", this).call(this);\n        var conn = this.hass.connection;\n        broadcastConnectionStatus(\"connected\");\n        conn.addEventListener(\"ready\", function () {\n          return _this2.hassReconnected();\n        });\n        conn.addEventListener(\"disconnected\", function () {\n          return _this2.hassDisconnected();\n        });\n        // If we reconnect after losing connection and auth is no longer valid.\n        conn.addEventListener(\"reconnect-error\", function (_conn, err) {\n          if (err === ERR_INVALID_AUTH) {\n            broadcastConnectionStatus(\"auth-invalid\");\n            location.reload();\n          }\n        });\n        subscribeEntities(conn, function (states) {\n          return _this2._updateHass({\n            states: states\n          });\n        });\n        subscribeEntityRegistryDisplay(conn, function (entityReg) {\n          var entities = {};\n          var _iterator = _createForOfIteratorHelper(entityReg.entities),\n            _step;\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              var entity = _step.value;\n              entities[entity.ei] = {\n                entity_id: entity.ei,\n                device_id: entity.di,\n                area_id: entity.ai,\n                translation_key: entity.tk,\n                platform: entity.pl,\n                entity_category: entity.ec !== undefined ? entityReg.entity_categories[entity.ec] : undefined,\n                name: entity.en,\n                icon: entity.ic,\n                hidden: entity.hb,\n                display_precision: entity.dp\n              };\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          _this2._updateHass({\n            entities: entities\n          });\n        });\n        subscribeDeviceRegistry(conn, function (deviceReg) {\n          var devices = {};\n          var _iterator2 = _createForOfIteratorHelper(deviceReg),\n            _step2;\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var device = _step2.value;\n              devices[device.id] = device;\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n          _this2._updateHass({\n            devices: devices\n          });\n        });\n        subscribeAreaRegistry(conn, function (areaReg) {\n          var areas = {};\n          var _iterator3 = _createForOfIteratorHelper(areaReg),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var area = _step3.value;\n              areas[area.area_id] = area;\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          _this2._updateHass({\n            areas: areas\n          });\n        });\n        subscribeConfig(conn, function (config) {\n          return _this2._updateHass({\n            config: config\n          });\n        });\n        subscribeServices(conn, function (services) {\n          return _this2._updateHass({\n            services: services\n          });\n        });\n        subscribePanels(conn, function (panels) {\n          return _this2._updateHass({\n            panels: panels\n          });\n        });\n        subscribeFrontendUserData(conn, \"core\", function (userData) {\n          return _this2._updateHass({\n            userData: userData\n          });\n        });\n      }\n    }, {\n      key: \"hassReconnected\",\n      value: function hassReconnected() {\n        var _this3 = this;\n        _get(_getPrototypeOf(_class.prototype), \"hassReconnected\", this).call(this);\n        this._updateHass({\n          connected: true\n        });\n        broadcastConnectionStatus(\"connected\");\n\n        // on reconnect always fetch config as we might miss an update while we were disconnected\n        // @ts-ignore\n        this.hass.callWS({\n          type: \"get_config\"\n        }).then(function (config) {\n          if (config.safe_mode) {\n            // @ts-ignore Firefox supports forceGet\n            location.reload(true);\n          }\n          _this3._updateHass({\n            config: config\n          });\n          _this3.checkDataBaseMigration();\n        });\n      }\n    }, {\n      key: \"hassDisconnected\",\n      value: function hassDisconnected() {\n        _get(_getPrototypeOf(_class.prototype), \"hassDisconnected\", this).call(this);\n        this._updateHass({\n          connected: false\n        });\n        broadcastConnectionStatus(\"disconnected\");\n      }\n    }]);\n    return _class;\n  }(superClass);\n};","map":{"version":3,"names":["callService","ERR_CONNECTION_LOST","ERR_INVALID_AUTH","subscribeConfig","subscribeEntities","subscribeServices","fireEvent","subscribeAreaRegistry","broadcastConnectionStatus","subscribeDeviceRegistry","subscribeEntityRegistryDisplay","subscribeFrontendUserData","forwardHaptic","DEFAULT_PANEL","serviceCallWillDisconnect","DateFormat","FirstWeekday","NumberFormat","TimeFormat","TimeZone","subscribePanels","translationMetadata","getLocalLanguage","fetchWithAuth","getState","hassCallApi","connectionMixin","superClass","_superClass","_inherits","_class","_classCallCheck","_callSuper","arguments","_createClass","key","value","initializeHass","auth","conn","_this","language","hass","Object","assign","connection","connected","states","entities","devices","areas","config","themes","selectedTheme","panels","services","user","panelUrl","_panelUrl","defaultPanel","selectedLanguage","locale","number_format","time_format","date_format","time_zone","local","first_weekday","resources","localize","dockedSidebar","vibrate","debugConnection","suspendWhenHidden","enableShortcuts","moreInfoEntityId","hassUrl","path","length","undefined","URL","data","toString","_callService2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","domain","service","serviceData","target","_this$hass","notifyOnError","_err$error","_this$hass2","_err$error2","lokalize","localizedErrorMessage","message","_args","wrap","_callee$","_context","prev","next","__DEV__","console","log","abrupt","sent","t0","error","code","context","id","loadBackendTranslation","translation_domain","concat","translation_key","translation_placeholders","duration","stop","_x","_x2","_x3","_x4","apply","callApi","_callApi","_callee2","method","parameters","headers","_callee2$","_context2","_x5","_x6","_x7","_x8","init","sendWS","msg","_this$hass3","sendMessage","callWS","_this$hass4","_this$hass5","resp","sendMessagePromise","then","result","err","category","integration","configFlow","_this$hass6","_loadHassTranslations","loadFragmentTranslation","fragment","_this$hass7","_loadFragmentTranslations","formatEntityState","stateObj","state","_ref","formatEntityAttributeName","_stateObj","attribute","formatEntityAttributeValue","_stateObj$attributes$","attributes","_pendingHass","hassConnected","_this2","_get","_getPrototypeOf","prototype","call","addEventListener","hassReconnected","hassDisconnected","_conn","location","reload","_updateHass","entityReg","_iterator","_createForOfIteratorHelper","_step","s","n","done","entity","ei","entity_id","device_id","di","area_id","ai","tk","platform","pl","entity_category","ec","entity_categories","name","en","icon","ic","hidden","hb","display_precision","dp","e","f","deviceReg","_iterator2","_step2","device","areaReg","_iterator3","_step3","area","userData","_this3","type","safe_mode","checkDataBaseMigration"],"sources":["/workspaces/frontend/src/state/connection-mixin.ts"],"sourcesContent":["import {\n  Auth,\n  callService,\n  Connection,\n  ERR_CONNECTION_LOST,\n  ERR_INVALID_AUTH,\n  HassConfig,\n  subscribeConfig,\n  subscribeEntities,\n  subscribeServices,\n} from \"home-assistant-js-websocket\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { subscribeAreaRegistry } from \"../data/area_registry\";\nimport { broadcastConnectionStatus } from \"../data/connection-status\";\nimport { subscribeDeviceRegistry } from \"../data/device_registry\";\nimport { subscribeEntityRegistryDisplay } from \"../data/entity_registry\";\nimport { subscribeFrontendUserData } from \"../data/frontend\";\nimport { forwardHaptic } from \"../data/haptics\";\nimport { DEFAULT_PANEL } from \"../data/panel\";\nimport { serviceCallWillDisconnect } from \"../data/service\";\nimport {\n  DateFormat,\n  FirstWeekday,\n  NumberFormat,\n  TimeFormat,\n  TimeZone,\n} from \"../data/translation\";\nimport { subscribePanels } from \"../data/ws-panels\";\nimport { translationMetadata } from \"../resources/translations-metadata\";\nimport { Constructor, HomeAssistant, ServiceCallResponse } from \"../types\";\nimport { getLocalLanguage } from \"../util/common-translation\";\nimport { fetchWithAuth } from \"../util/fetch-with-auth\";\nimport { getState } from \"../util/ha-pref-storage\";\nimport hassCallApi from \"../util/hass-call-api\";\nimport { HassBaseEl } from \"./hass-base-mixin\";\n\nexport const connectionMixin = <T extends Constructor<HassBaseEl>>(\n  superClass: T\n) =>\n  class extends superClass {\n    protected initializeHass(auth: Auth, conn: Connection) {\n      const language = getLocalLanguage();\n\n      this.hass = {\n        auth,\n        connection: conn,\n        connected: true,\n        states: null as any,\n        entities: null as any,\n        devices: null as any,\n        areas: null as any,\n        config: null as any,\n        themes: null as any,\n        selectedTheme: null,\n        panels: null as any,\n        services: null as any,\n        user: null as any,\n        panelUrl: (this as any)._panelUrl,\n        defaultPanel: DEFAULT_PANEL,\n        language,\n        selectedLanguage: null,\n        locale: {\n          language,\n          number_format: NumberFormat.language,\n          time_format: TimeFormat.language,\n          date_format: DateFormat.language,\n          time_zone: TimeZone.local,\n          first_weekday: FirstWeekday.language,\n        },\n        resources: null as any,\n        localize: () => \"\",\n\n        translationMetadata,\n        dockedSidebar: \"docked\",\n        vibrate: true,\n        debugConnection: false,\n        suspendWhenHidden: true,\n        enableShortcuts: true,\n        moreInfoEntityId: null,\n        hassUrl: (path = \"\") => new URL(path, auth.data.hassUrl).toString(),\n        callService: async (\n          domain,\n          service,\n          serviceData,\n          target,\n          notifyOnError = true\n        ) => {\n          if (__DEV__ || this.hass?.debugConnection) {\n            // eslint-disable-next-line no-console\n            console.log(\n              \"Calling service\",\n              domain,\n              service,\n              serviceData,\n              target\n            );\n          }\n          try {\n            return (await callService(\n              conn,\n              domain,\n              service,\n              serviceData ?? {},\n              target\n            )) as ServiceCallResponse;\n          } catch (err: any) {\n            if (\n              err.error?.code === ERR_CONNECTION_LOST &&\n              serviceCallWillDisconnect(domain, service, serviceData)\n            ) {\n              return { context: { id: \"\" } };\n            }\n            if (__DEV__ || this.hass?.debugConnection) {\n              // eslint-disable-next-line no-console\n              console.error(\n                \"Error calling service\",\n                domain,\n                service,\n                serviceData,\n                target\n              );\n            }\n            if (notifyOnError) {\n              forwardHaptic(\"failure\");\n              const lokalize = await this.hass!.loadBackendTranslation(\n                \"exceptions\",\n                err.translation_domain\n              );\n              const localizedErrorMessage = lokalize(\n                `component.${err.translation_domain}.exceptions.${err.translation_key}.message`,\n                err.translation_placeholders\n              );\n              const message =\n                localizedErrorMessage ||\n                (this as any).hass.localize(\n                  \"ui.notification_toast.service_call_failed\",\n                  \"service\",\n                  `${domain}/${service}`\n                ) +\n                  ` ${\n                    err.message ||\n                    (err.error?.code === ERR_CONNECTION_LOST\n                      ? \"connection lost\"\n                      : \"unknown error\")\n                  }`;\n              fireEvent(this as any, \"hass-notification\", {\n                message,\n                duration: 10000,\n              });\n            }\n            throw err;\n          }\n        },\n        callApi: async (method, path, parameters, headers) =>\n          hassCallApi(auth, method, path, parameters, headers),\n        fetchWithAuth: (\n          path: string,\n          init: Parameters<typeof fetchWithAuth>[2]\n        ) => fetchWithAuth(auth, `${auth.data.hassUrl}${path}`, init),\n        // For messages that do not get a response\n        sendWS: (msg) => {\n          if (__DEV__ || this.hass?.debugConnection) {\n            // eslint-disable-next-line no-console\n            console.log(\"Sending\", msg);\n          }\n          conn.sendMessage(msg);\n        },\n        // For messages that expect a response\n        callWS: <R>(msg) => {\n          if (__DEV__ || this.hass?.debugConnection) {\n            // eslint-disable-next-line no-console\n            console.log(\"Sending\", msg);\n          }\n\n          const resp = conn.sendMessagePromise<R>(msg);\n\n          if (__DEV__ || this.hass?.debugConnection) {\n            resp.then(\n              // eslint-disable-next-line no-console\n              (result) => console.log(\"Received\", result),\n              // eslint-disable-next-line no-console\n              (err) => console.error(\"Error\", err)\n            );\n          }\n          return resp;\n        },\n        loadBackendTranslation: (category, integration?, configFlow?) =>\n          // @ts-ignore\n          this._loadHassTranslations(\n            this.hass?.language,\n            category,\n            integration,\n            configFlow\n          ),\n        loadFragmentTranslation: (fragment) =>\n          // @ts-ignore\n          this._loadFragmentTranslations(this.hass?.language, fragment),\n        formatEntityState: (stateObj, state) =>\n          (state != null ? state : stateObj.state) ?? \"\",\n        formatEntityAttributeName: (_stateObj, attribute) => attribute,\n        formatEntityAttributeValue: (stateObj, attribute, value) =>\n          value != null ? value : stateObj.attributes[attribute] ?? \"\",\n        ...getState(),\n        ...this._pendingHass,\n      };\n\n      this.hassConnected();\n    }\n\n    protected hassConnected() {\n      super.hassConnected();\n\n      const conn = this.hass!.connection;\n\n      broadcastConnectionStatus(\"connected\");\n\n      conn.addEventListener(\"ready\", () => this.hassReconnected());\n      conn.addEventListener(\"disconnected\", () => this.hassDisconnected());\n      // If we reconnect after losing connection and auth is no longer valid.\n      conn.addEventListener(\"reconnect-error\", (_conn, err) => {\n        if (err === ERR_INVALID_AUTH) {\n          broadcastConnectionStatus(\"auth-invalid\");\n          location.reload();\n        }\n      });\n\n      subscribeEntities(conn, (states) => this._updateHass({ states }));\n      subscribeEntityRegistryDisplay(conn, (entityReg) => {\n        const entities: HomeAssistant[\"entities\"] = {};\n        for (const entity of entityReg.entities) {\n          entities[entity.ei] = {\n            entity_id: entity.ei,\n            device_id: entity.di,\n            area_id: entity.ai,\n            translation_key: entity.tk,\n            platform: entity.pl,\n            entity_category:\n              entity.ec !== undefined\n                ? entityReg.entity_categories[entity.ec]\n                : undefined,\n            name: entity.en,\n            icon: entity.ic,\n            hidden: entity.hb,\n            display_precision: entity.dp,\n          };\n        }\n        this._updateHass({ entities });\n      });\n      subscribeDeviceRegistry(conn, (deviceReg) => {\n        const devices: HomeAssistant[\"devices\"] = {};\n        for (const device of deviceReg) {\n          devices[device.id] = device;\n        }\n        this._updateHass({ devices });\n      });\n      subscribeAreaRegistry(conn, (areaReg) => {\n        const areas: HomeAssistant[\"areas\"] = {};\n        for (const area of areaReg) {\n          areas[area.area_id] = area;\n        }\n        this._updateHass({ areas });\n      });\n      subscribeConfig(conn, (config) => this._updateHass({ config }));\n      subscribeServices(conn, (services) => this._updateHass({ services }));\n      subscribePanels(conn, (panels) => this._updateHass({ panels }));\n      subscribeFrontendUserData(conn, \"core\", (userData) =>\n        this._updateHass({ userData })\n      );\n    }\n\n    protected hassReconnected() {\n      super.hassReconnected();\n\n      this._updateHass({ connected: true });\n      broadcastConnectionStatus(\"connected\");\n\n      // on reconnect always fetch config as we might miss an update while we were disconnected\n      // @ts-ignore\n      this.hass!.callWS({ type: \"get_config\" }).then((config: HassConfig) => {\n        if (config.safe_mode) {\n          // @ts-ignore Firefox supports forceGet\n          location.reload(true);\n        }\n        this._updateHass({ config });\n        this.checkDataBaseMigration();\n      });\n    }\n\n    protected hassDisconnected() {\n      super.hassDisconnected();\n      this._updateHass({ connected: false });\n      broadcastConnectionStatus(\"disconnected\");\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}