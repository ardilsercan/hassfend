{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5;\nimport \"core-js/modules/es.object.assign.js\";\n/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\nimport { html, LitElement } from 'lit';\nimport { property } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';\n/**\n * A chip component.\n *\n * @fires update-focus {Event} Dispatched when `disabled` is toggled. --bubbles\n */\nexport var Chip = /*#__PURE__*/function (_LitElement) {\n  _inherits(Chip, _LitElement);\n  function Chip() {\n    var _this;\n    _classCallCheck(this, Chip);\n    _this = _callSuper(this, Chip, arguments);\n    /**\n     * Whether or not the chip is disabled.\n     *\n     * Disabled chips are not focusable, unless `always-focusable` is set.\n     */\n    _this.disabled = false;\n    /**\n     * When true, allow disabled chips to be focused with arrow keys.\n     *\n     * Add this when a chip needs increased visibility when disabled. See\n     * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\n     * for more guidance on when this is needed.\n     */\n    _this.alwaysFocusable = false;\n    /**\n     * The label of the chip.\n     */\n    _this.label = '';\n    /**\n     * Only needed for SSR.\n     *\n     * Add this attribute when a chip has a `slot=\"icon\"` to avoid a Flash Of\n     * Unstyled Content.\n     */\n    _this.hasIcon = false;\n    return _this;\n  }\n  /**\n   * Whether or not the primary ripple is disabled (defaults to `disabled`).\n   * Some chip actions such as links cannot be disabled.\n   */\n  _createClass(Chip, [{\n    key: \"rippleDisabled\",\n    get: function get() {\n      return this.disabled;\n    }\n  }, {\n    key: \"focus\",\n    value: function focus(options) {\n      if (this.disabled && !this.alwaysFocusable) {\n        return;\n      }\n      _get(_getPrototypeOf(Chip.prototype), \"focus\", this).call(this, options);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <div class=\\\"container \", \"\\\">\\n        \", \"\\n      </div>\\n    \"])), classMap(this.getContainerClasses()), this.renderContainerContent());\n    }\n  }, {\n    key: \"updated\",\n    value: function updated(changed) {\n      if (changed.has('disabled') && changed.get('disabled') !== undefined) {\n        this.dispatchEvent(new Event('update-focus', {\n          bubbles: true\n        }));\n      }\n    }\n  }, {\n    key: \"getContainerClasses\",\n    value: function getContainerClasses() {\n      return {\n        'disabled': this.disabled,\n        'has-icon': this.hasIcon\n      };\n    }\n  }, {\n    key: \"renderContainerContent\",\n    value: function renderContainerContent() {\n      return html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n      \", \"\\n      <md-focus-ring part=\\\"focus-ring\\\" for=\", \"></md-focus-ring>\\n      <md-ripple\\n        for=\", \"\\n        ?disabled=\", \"></md-ripple>\\n      \", \"\\n    \"])), this.renderOutline(), this.primaryId, this.primaryId, this.rippleDisabled, this.renderPrimaryAction(this.renderPrimaryContent()));\n    }\n  }, {\n    key: \"renderOutline\",\n    value: function renderOutline() {\n      return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"<span class=\\\"outline\\\"></span>\"])));\n    }\n  }, {\n    key: \"renderLeadingIcon\",\n    value: function renderLeadingIcon() {\n      return html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"<slot name=\\\"icon\\\" @slotchange=\", \"></slot>\"])), this.handleIconChange);\n    }\n  }, {\n    key: \"renderPrimaryContent\",\n    value: function renderPrimaryContent() {\n      return html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n      <span class=\\\"leading icon\\\" aria-hidden=\\\"true\\\">\\n        \", \"\\n      </span>\\n      <span class=\\\"label\\\">\", \"</span>\\n      <span class=\\\"touch\\\"></span>\\n    \"])), this.renderLeadingIcon(), this.label);\n    }\n  }, {\n    key: \"handleIconChange\",\n    value: function handleIconChange(event) {\n      var slot = event.target;\n      this.hasIcon = slot.assignedElements({\n        flatten: true\n      }).length > 0;\n    }\n  }]);\n  return Chip;\n}(LitElement);\n(function () {\n  requestUpdateOnAriaChange(Chip);\n})();\n/** @nocollapse */\nChip.shadowRootOptions = Object.assign(Object.assign({}, LitElement.shadowRootOptions), {}, {\n  delegatesFocus: true\n});\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], Chip.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'always-focusable'\n})], Chip.prototype, \"alwaysFocusable\", void 0);\n__decorate([property()], Chip.prototype, \"label\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true,\n  attribute: 'has-icon'\n})], Chip.prototype, \"hasIcon\", void 0);","map":{"version":3,"names":["html","LitElement","property","classMap","requestUpdateOnAriaChange","Chip","_LitElement","_inherits","_this","_classCallCheck","disabled","alwaysFocusable","label","hasIcon","_createClass","key","get","value","focus","options","_get","_getPrototypeOf","prototype","call","render","_templateObject","_taggedTemplateLiteral","getContainerClasses","renderContainerContent","updated","changed","has","undefined","dispatchEvent","Event","bubbles","_templateObject2","renderOutline","primaryId","rippleDisabled","renderPrimaryAction","renderPrimaryContent","_templateObject3","renderLeadingIcon","_templateObject4","handleIconChange","_templateObject5","event","slot","target","assignedElements","flatten","length","shadowRootOptions","Object","assign","delegatesFocus","__decorate","type","Boolean","reflect","attribute"],"sources":["chip.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, LitElement, PropertyValues, TemplateResult} from 'lit';\nimport {property} from 'lit/decorators.js';\nimport {ClassInfo, classMap} from 'lit/directives/class-map.js';\n\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\n\n/**\n * A chip component.\n *\n * @fires update-focus {Event} Dispatched when `disabled` is toggled. --bubbles\n */\nexport abstract class Chip extends LitElement {\n  static {\n    requestUpdateOnAriaChange(Chip);\n  }\n\n  /** @nocollapse */\n  static override shadowRootOptions = {\n    ...LitElement.shadowRootOptions,\n    delegatesFocus: true,\n  };\n\n  /**\n   * Whether or not the chip is disabled.\n   *\n   * Disabled chips are not focusable, unless `always-focusable` is set.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * When true, allow disabled chips to be focused with arrow keys.\n   *\n   * Add this when a chip needs increased visibility when disabled. See\n   * https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/#kbd_disabled_controls\n   * for more guidance on when this is needed.\n   */\n  @property({type: Boolean, attribute: 'always-focusable'})\n  alwaysFocusable = false;\n\n  /**\n   * The label of the chip.\n   */\n  @property() label = '';\n\n  /**\n   * Only needed for SSR.\n   *\n   * Add this attribute when a chip has a `slot=\"icon\"` to avoid a Flash Of\n   * Unstyled Content.\n   */\n  @property({type: Boolean, reflect: true, attribute: 'has-icon'}) hasIcon =\n    false;\n\n  /**\n   * The `id` of the action the primary focus ring and ripple are for.\n   * TODO(b/310046938): use the same id for both elements\n   */\n  protected abstract readonly primaryId: string;\n\n  /**\n   * Whether or not the primary ripple is disabled (defaults to `disabled`).\n   * Some chip actions such as links cannot be disabled.\n   */\n  protected get rippleDisabled() {\n    return this.disabled;\n  }\n\n  override focus(options?: FocusOptions) {\n    if (this.disabled && !this.alwaysFocusable) {\n      return;\n    }\n\n    super.focus(options);\n  }\n\n  protected override render() {\n    return html`\n      <div class=\"container ${classMap(this.getContainerClasses())}\">\n        ${this.renderContainerContent()}\n      </div>\n    `;\n  }\n\n  protected override updated(changed: PropertyValues<Chip>) {\n    if (changed.has('disabled') && changed.get('disabled') !== undefined) {\n      this.dispatchEvent(new Event('update-focus', {bubbles: true}));\n    }\n  }\n\n  protected getContainerClasses(): ClassInfo {\n    return {\n      'disabled': this.disabled,\n      'has-icon': this.hasIcon,\n    };\n  }\n\n  protected renderContainerContent() {\n    return html`\n      ${this.renderOutline()}\n      <md-focus-ring part=\"focus-ring\" for=${this.primaryId}></md-focus-ring>\n      <md-ripple\n        for=${this.primaryId}\n        ?disabled=${this.rippleDisabled}></md-ripple>\n      ${this.renderPrimaryAction(this.renderPrimaryContent())}\n    `;\n  }\n\n  protected renderOutline() {\n    return html`<span class=\"outline\"></span>`;\n  }\n\n  protected renderLeadingIcon(): TemplateResult {\n    return html`<slot name=\"icon\" @slotchange=${this.handleIconChange}></slot>`;\n  }\n\n  protected abstract renderPrimaryAction(content: unknown): unknown;\n\n  private renderPrimaryContent() {\n    return html`\n      <span class=\"leading icon\" aria-hidden=\"true\">\n        ${this.renderLeadingIcon()}\n      </span>\n      <span class=\"label\">${this.label}</span>\n      <span class=\"touch\"></span>\n    `;\n  }\n\n  private handleIconChange(event: Event) {\n    const slot = event.target as HTMLSlotElement;\n    this.hasIcon = slot.assignedElements({flatten: true}).length > 0;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}