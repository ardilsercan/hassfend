{"ast":null,"code":"// https://regex101.com/r/kc5C14/2\nconst regExpString = \"^\\\\d{4}-(0[1-9]|1[0-2])-([12]\\\\d|0[1-9]|3[01])\";\nconst regExp = new RegExp(regExpString + \"$\");\n// 2nd expression without the \"end of string\" enforced, so it can be used\n// to just verify the start of a string and then based on that result e.g.\n// check for a full timestamp string efficiently.\nconst regExpNoStringEnd = new RegExp(regExpString);\nexport const isDate = (input, allowCharsAfterDate = false) => allowCharsAfterDate ? regExpNoStringEnd.test(input) : regExp.test(input);","map":{"version":3,"names":["regExpString","regExp","RegExp","regExpNoStringEnd","isDate","input","allowCharsAfterDate","test"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/string/is_date.ts"],"sourcesContent":["// https://regex101.com/r/kc5C14/2\nconst regExpString = \"^\\\\d{4}-(0[1-9]|1[0-2])-([12]\\\\d|0[1-9]|3[01])\";\n\nconst regExp = new RegExp(regExpString + \"$\");\n// 2nd expression without the \"end of string\" enforced, so it can be used\n// to just verify the start of a string and then based on that result e.g.\n// check for a full timestamp string efficiently.\nconst regExpNoStringEnd = new RegExp(regExpString);\n\nexport const isDate = (input: string, allowCharsAfterDate = false): boolean =>\n  allowCharsAfterDate ? regExpNoStringEnd.test(input) : regExp.test(input);\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG,gDAAgD;AAErE,MAAMC,MAAM,GAAG,IAAIC,MAAM,CAACF,YAAY,GAAG,GAAG,CAAC;AAC7C;AACA;AACA;AACA,MAAMG,iBAAiB,GAAG,IAAID,MAAM,CAACF,YAAY,CAAC;AAElD,OAAO,MAAMI,MAAM,GAAGA,CAACC,KAAa,EAAEC,mBAAmB,GAAG,KAAK,KAC/DA,mBAAmB,GAAGH,iBAAiB,CAACI,IAAI,CAACF,KAAK,CAAC,GAAGJ,MAAM,CAACM,IAAI,CAACF,KAAK,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}