{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { render, nothing } from '../lit-html.js';\nimport { directive, Directive } from '../directive.js';\nimport { clearPart, getCommittedValue, insertPart, isCompiledTemplateResult, isTemplateResult, setCommittedValue } from '../directive-helpers.js';\n/**\n * The template strings array contents are not compatible between the two\n * template result types as the compiled template contains a prepared string;\n * only use the returned template strings array as a cache key.\n */\nvar getStringsFromTemplateResult = function getStringsFromTemplateResult(result) {\n  return isCompiledTemplateResult(result) ? result['_$litType$'].h : result.strings;\n};\nvar CacheDirective = /*#__PURE__*/function (_Directive) {\n  _inherits(CacheDirective, _Directive);\n  function CacheDirective(partInfo) {\n    var _this;\n    _classCallCheck(this, CacheDirective);\n    _this = _callSuper(this, CacheDirective, [partInfo]);\n    _this._templateCache = new WeakMap();\n    return _this;\n  }\n  _createClass(CacheDirective, [{\n    key: \"render\",\n    value: function render(v) {\n      // Return an array of the value to induce lit-html to create a ChildPart\n      // for the value that we can move into the cache.\n      return [v];\n    }\n  }, {\n    key: \"update\",\n    value: function update(containerPart, _ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n        v = _ref2[0];\n      var _valueKey = isTemplateResult(this._value) ? getStringsFromTemplateResult(this._value) : null;\n      var vKey = isTemplateResult(v) ? getStringsFromTemplateResult(v) : null;\n      // If the previous value is a TemplateResult and the new value is not,\n      // or is a different Template as the previous value, move the child part\n      // into the cache.\n      if (_valueKey !== null && (vKey === null || _valueKey !== vKey)) {\n        // This is always an array because we return [v] in render()\n        var partValue = getCommittedValue(containerPart);\n        var childPart = partValue.pop();\n        var cachedContainerPart = this._templateCache.get(_valueKey);\n        if (cachedContainerPart === undefined) {\n          var fragment = document.createDocumentFragment();\n          cachedContainerPart = render(nothing, fragment);\n          cachedContainerPart.setConnected(false);\n          this._templateCache.set(_valueKey, cachedContainerPart);\n        }\n        // Move into cache\n        setCommittedValue(cachedContainerPart, [childPart]);\n        insertPart(cachedContainerPart, undefined, childPart);\n      }\n      // If the new value is a TemplateResult and the previous value is not,\n      // or is a different Template as the previous value, restore the child\n      // part from the cache.\n      if (vKey !== null) {\n        if (_valueKey === null || _valueKey !== vKey) {\n          var _cachedContainerPart = this._templateCache.get(vKey);\n          if (_cachedContainerPart !== undefined) {\n            // Move the cached part back into the container part value\n            var _partValue = getCommittedValue(_cachedContainerPart);\n            var cachedPart = _partValue.pop();\n            // Move cached part back into DOM\n            clearPart(containerPart);\n            insertPart(containerPart, undefined, cachedPart);\n            setCommittedValue(containerPart, [cachedPart]);\n          }\n        }\n        // Because vKey is non null, v must be a TemplateResult.\n        this._value = v;\n      } else {\n        this._value = undefined;\n      }\n      return this.render(v);\n    }\n  }]);\n  return CacheDirective;\n}(Directive);\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```js\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport var cache = directive(CacheDirective);","map":{"version":3,"names":["render","nothing","directive","Directive","clearPart","getCommittedValue","insertPart","isCompiledTemplateResult","isTemplateResult","setCommittedValue","getStringsFromTemplateResult","result","h","strings","CacheDirective","_Directive","_inherits","partInfo","_this","_classCallCheck","_callSuper","_templateCache","WeakMap","_createClass","key","value","v","update","containerPart","_ref","_ref2","_slicedToArray","_valueKey","_value","vKey","partValue","childPart","pop","cachedContainerPart","get","undefined","fragment","document","createDocumentFragment","setConnected","set","cachedPart","cache"],"sources":["../../src/directives/cache.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  TemplateResult,\n  ChildPart,\n  RootPart,\n  render,\n  nothing,\n  CompiledTemplateResult,\n} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n} from '../directive.js';\nimport {\n  clearPart,\n  getCommittedValue,\n  insertPart,\n  isCompiledTemplateResult,\n  isTemplateResult,\n  setCommittedValue,\n} from '../directive-helpers.js';\n\n/**\n * The template strings array contents are not compatible between the two\n * template result types as the compiled template contains a prepared string;\n * only use the returned template strings array as a cache key.\n */\nconst getStringsFromTemplateResult = (\n  result: TemplateResult | CompiledTemplateResult\n): TemplateStringsArray =>\n  isCompiledTemplateResult(result) ? result['_$litType$'].h : result.strings;\n\nclass CacheDirective extends Directive {\n  private _templateCache = new WeakMap<TemplateStringsArray, RootPart>();\n  private _value?: TemplateResult | CompiledTemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n  }\n\n  render(v: unknown) {\n    // Return an array of the value to induce lit-html to create a ChildPart\n    // for the value that we can move into the cache.\n    return [v];\n  }\n\n  override update(containerPart: ChildPart, [v]: DirectiveParameters<this>) {\n    const _valueKey = isTemplateResult(this._value)\n      ? getStringsFromTemplateResult(this._value)\n      : null;\n    const vKey = isTemplateResult(v) ? getStringsFromTemplateResult(v) : null;\n\n    // If the previous value is a TemplateResult and the new value is not,\n    // or is a different Template as the previous value, move the child part\n    // into the cache.\n    if (_valueKey !== null && (vKey === null || _valueKey !== vKey)) {\n      // This is always an array because we return [v] in render()\n      const partValue = getCommittedValue(containerPart) as Array<ChildPart>;\n      const childPart = partValue.pop()!;\n      let cachedContainerPart = this._templateCache.get(_valueKey);\n      if (cachedContainerPart === undefined) {\n        const fragment = document.createDocumentFragment();\n        cachedContainerPart = render(nothing, fragment);\n        cachedContainerPart.setConnected(false);\n        this._templateCache.set(_valueKey, cachedContainerPart);\n      }\n      // Move into cache\n      setCommittedValue(cachedContainerPart, [childPart]);\n      insertPart(cachedContainerPart, undefined, childPart);\n    }\n    // If the new value is a TemplateResult and the previous value is not,\n    // or is a different Template as the previous value, restore the child\n    // part from the cache.\n    if (vKey !== null) {\n      if (_valueKey === null || _valueKey !== vKey) {\n        const cachedContainerPart = this._templateCache.get(vKey);\n        if (cachedContainerPart !== undefined) {\n          // Move the cached part back into the container part value\n          const partValue = getCommittedValue(\n            cachedContainerPart\n          ) as Array<ChildPart>;\n          const cachedPart = partValue.pop()!;\n          // Move cached part back into DOM\n          clearPart(containerPart);\n          insertPart(containerPart, undefined, cachedPart);\n          setCommittedValue(containerPart, [cachedPart]);\n        }\n      }\n      // Because vKey is non null, v must be a TemplateResult.\n      this._value = v as TemplateResult | CompiledTemplateResult;\n    } else {\n      this._value = undefined;\n    }\n    return this.render(v);\n  }\n}\n\n/**\n * Enables fast switching between multiple templates by caching the DOM nodes\n * and TemplateInstances produced by the templates.\n *\n * Example:\n *\n * ```js\n * let checked = false;\n *\n * html`\n *   ${cache(checked ? html`input is checked` : html`input is not checked`)}\n * `\n * ```\n */\nexport const cache = directive(CacheDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {CacheDirective};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}