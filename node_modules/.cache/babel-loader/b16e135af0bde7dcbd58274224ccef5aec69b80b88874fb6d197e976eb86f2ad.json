{"ast":null,"code":"import { BINARY_STATE_ON } from \"../common/const\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { showToast } from \"../util/toast\";\nexport let UpdateEntityFeature = /*#__PURE__*/function (UpdateEntityFeature) {\n  UpdateEntityFeature[UpdateEntityFeature[\"INSTALL\"] = 1] = \"INSTALL\";\n  UpdateEntityFeature[UpdateEntityFeature[\"SPECIFIC_VERSION\"] = 2] = \"SPECIFIC_VERSION\";\n  UpdateEntityFeature[UpdateEntityFeature[\"PROGRESS\"] = 4] = \"PROGRESS\";\n  UpdateEntityFeature[UpdateEntityFeature[\"BACKUP\"] = 8] = \"BACKUP\";\n  UpdateEntityFeature[UpdateEntityFeature[\"RELEASE_NOTES\"] = 16] = \"RELEASE_NOTES\";\n  return UpdateEntityFeature;\n}({});\nexport const updateUsesProgress = entity => supportsFeature(entity, UpdateEntityFeature.PROGRESS) && typeof entity.attributes.in_progress === \"number\";\nexport const updateCanInstall = (entity, showSkipped = false) => (entity.state === BINARY_STATE_ON || showSkipped && Boolean(entity.attributes.skipped_version)) && supportsFeature(entity, UpdateEntityFeature.INSTALL);\nexport const updateIsInstalling = entity => updateUsesProgress(entity) || !!entity.attributes.in_progress;\nexport const updateReleaseNotes = (hass, entityId) => hass.callWS({\n  type: \"update/release_notes\",\n  entity_id: entityId\n});\nexport const filterUpdateEntities = (entities, language) => Object.values(entities).filter(entity => computeStateDomain(entity) === \"update\").sort((a, b) => {\n  if (a.attributes.title === \"Home Assistant Core\") {\n    return -3;\n  }\n  if (b.attributes.title === \"Home Assistant Core\") {\n    return 3;\n  }\n  if (a.attributes.title === \"Home Assistant Operating System\") {\n    return -2;\n  }\n  if (b.attributes.title === \"Home Assistant Operating System\") {\n    return 2;\n  }\n  if (a.attributes.title === \"Home Assistant Supervisor\") {\n    return -1;\n  }\n  if (b.attributes.title === \"Home Assistant Supervisor\") {\n    return 1;\n  }\n  return caseInsensitiveStringCompare(a.attributes.title || a.attributes.friendly_name || \"\", b.attributes.title || b.attributes.friendly_name || \"\", language);\n});\nexport const filterUpdateEntitiesWithInstall = (entities, showSkipped = false) => filterUpdateEntities(entities).filter(entity => updateCanInstall(entity, showSkipped));\nexport const checkForEntityUpdates = async (element, hass) => {\n  const entities = filterUpdateEntities(hass.states, hass.locale.language).map(entity => entity.entity_id);\n  if (!entities.length) {\n    showAlertDialog(element, {\n      title: hass.localize(\"ui.panel.config.updates.no_update_entities.title\"),\n      text: hass.localize(\"ui.panel.config.updates.no_update_entities.description\"),\n      warning: true\n    });\n    return;\n  }\n  let updated = 0;\n  const unsubscribeEvents = await hass.connection.subscribeEvents(event => {\n    if (computeDomain(event.data.entity_id) === \"update\") {\n      updated++;\n      showToast(element, {\n        message: hass.localize(\"ui.panel.config.updates.updates_refreshed\", {\n          count: updated\n        })\n      });\n    }\n  }, \"state_changed\");\n  await hass.callService(\"homeassistant\", \"update_entity\", {\n    entity_id: entities\n  });\n\n  // there is no reliable way to know if all the updates are done updating, so we just wait a bit for now...\n  await new Promise(r => {\n    setTimeout(r, 10000);\n  });\n  unsubscribeEvents();\n  if (updated === 0) {\n    showToast(element, {\n      message: hass.localize(\"ui.panel.config.updates.no_new_updates\")\n    });\n  }\n};\n\n// When updating, and entity does not support % show \"Installing\"\n// When updating, and entity does support % show \"Installing (xx%)\"\n// When update available, show the version\n// When the latest version is skipped, show the latest version\n// When update is not available, show \"Up-to-date\"\n// When update is not available and there is no latest_version show \"Unavailable\"\nexport const computeUpdateStateDisplay = (stateObj, hass) => {\n  const state = stateObj.state;\n  const attributes = stateObj.attributes;\n  if (state === \"off\") {\n    const isSkipped = attributes.latest_version && attributes.skipped_version === attributes.latest_version;\n    if (isSkipped) {\n      return attributes.latest_version;\n    }\n    return hass.formatEntityState(stateObj);\n  }\n  if (state === \"on\") {\n    if (updateIsInstalling(stateObj)) {\n      const supportsProgress = supportsFeature(stateObj, UpdateEntityFeature.PROGRESS) && typeof attributes.in_progress === \"number\";\n      if (supportsProgress) {\n        return hass.localize(\"ui.card.update.installing_with_progress\", {\n          progress: attributes.in_progress\n        });\n      }\n      return hass.localize(\"ui.card.update.installing\");\n    }\n    if (attributes.latest_version) {\n      return attributes.latest_version;\n    }\n  }\n  return hass.formatEntityState(stateObj);\n};","map":{"version":3,"names":["BINARY_STATE_ON","computeDomain","computeStateDomain","supportsFeature","caseInsensitiveStringCompare","showAlertDialog","showToast","UpdateEntityFeature","updateUsesProgress","entity","PROGRESS","attributes","in_progress","updateCanInstall","showSkipped","state","Boolean","skipped_version","INSTALL","updateIsInstalling","updateReleaseNotes","hass","entityId","callWS","type","entity_id","filterUpdateEntities","entities","language","Object","values","filter","sort","a","b","title","friendly_name","filterUpdateEntitiesWithInstall","checkForEntityUpdates","element","states","locale","map","length","localize","text","warning","updated","unsubscribeEvents","connection","subscribeEvents","event","data","message","count","callService","Promise","r","setTimeout","computeUpdateStateDisplay","stateObj","isSkipped","latest_version","formatEntityState","supportsProgress","progress"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/update.ts"],"sourcesContent":["import type {\n  HassEntities,\n  HassEntityAttributeBase,\n  HassEntityBase,\n  HassEvent,\n} from \"home-assistant-js-websocket\";\nimport { BINARY_STATE_ON } from \"../common/const\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../common/entity/compute_state_domain\";\nimport { supportsFeature } from \"../common/entity/supports-feature\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { showAlertDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../types\";\nimport { showToast } from \"../util/toast\";\n\nexport enum UpdateEntityFeature {\n  INSTALL = 1,\n  SPECIFIC_VERSION = 2,\n  PROGRESS = 4,\n  BACKUP = 8,\n  RELEASE_NOTES = 16,\n}\n\ninterface UpdateEntityAttributes extends HassEntityAttributeBase {\n  auto_update: boolean | null;\n  installed_version: string | null;\n  in_progress: boolean | number;\n  latest_version: string | null;\n  release_summary: string | null;\n  release_url: string | null;\n  skipped_version: string | null;\n  title: string | null;\n}\n\nexport interface UpdateEntity extends HassEntityBase {\n  attributes: UpdateEntityAttributes;\n}\n\nexport const updateUsesProgress = (entity: UpdateEntity): boolean =>\n  supportsFeature(entity, UpdateEntityFeature.PROGRESS) &&\n  typeof entity.attributes.in_progress === \"number\";\n\nexport const updateCanInstall = (\n  entity: UpdateEntity,\n  showSkipped = false\n): boolean =>\n  (entity.state === BINARY_STATE_ON ||\n    (showSkipped && Boolean(entity.attributes.skipped_version))) &&\n  supportsFeature(entity, UpdateEntityFeature.INSTALL);\n\nexport const updateIsInstalling = (entity: UpdateEntity): boolean =>\n  updateUsesProgress(entity) || !!entity.attributes.in_progress;\n\nexport const updateReleaseNotes = (hass: HomeAssistant, entityId: string) =>\n  hass.callWS<string | null>({\n    type: \"update/release_notes\",\n    entity_id: entityId,\n  });\n\nexport const filterUpdateEntities = (\n  entities: HassEntities,\n  language?: string\n) =>\n  (\n    Object.values(entities).filter(\n      (entity) => computeStateDomain(entity) === \"update\"\n    ) as UpdateEntity[]\n  ).sort((a, b) => {\n    if (a.attributes.title === \"Home Assistant Core\") {\n      return -3;\n    }\n    if (b.attributes.title === \"Home Assistant Core\") {\n      return 3;\n    }\n    if (a.attributes.title === \"Home Assistant Operating System\") {\n      return -2;\n    }\n    if (b.attributes.title === \"Home Assistant Operating System\") {\n      return 2;\n    }\n    if (a.attributes.title === \"Home Assistant Supervisor\") {\n      return -1;\n    }\n    if (b.attributes.title === \"Home Assistant Supervisor\") {\n      return 1;\n    }\n    return caseInsensitiveStringCompare(\n      a.attributes.title || a.attributes.friendly_name || \"\",\n      b.attributes.title || b.attributes.friendly_name || \"\",\n      language\n    );\n  });\n\nexport const filterUpdateEntitiesWithInstall = (\n  entities: HassEntities,\n  showSkipped = false\n) =>\n  filterUpdateEntities(entities).filter((entity) =>\n    updateCanInstall(entity, showSkipped)\n  );\n\nexport const checkForEntityUpdates = async (\n  element: HTMLElement,\n  hass: HomeAssistant\n) => {\n  const entities = filterUpdateEntities(hass.states, hass.locale.language).map(\n    (entity) => entity.entity_id\n  );\n\n  if (!entities.length) {\n    showAlertDialog(element, {\n      title: hass.localize(\"ui.panel.config.updates.no_update_entities.title\"),\n      text: hass.localize(\n        \"ui.panel.config.updates.no_update_entities.description\"\n      ),\n      warning: true,\n    });\n    return;\n  }\n\n  let updated = 0;\n\n  const unsubscribeEvents = await hass.connection.subscribeEvents<HassEvent>(\n    (event) => {\n      if (computeDomain(event.data.entity_id) === \"update\") {\n        updated++;\n        showToast(element, {\n          message: hass.localize(\"ui.panel.config.updates.updates_refreshed\", {\n            count: updated,\n          }),\n        });\n      }\n    },\n    \"state_changed\"\n  );\n\n  await hass.callService(\"homeassistant\", \"update_entity\", {\n    entity_id: entities,\n  });\n\n  // there is no reliable way to know if all the updates are done updating, so we just wait a bit for now...\n  await new Promise((r) => {\n    setTimeout(r, 10000);\n  });\n\n  unsubscribeEvents();\n\n  if (updated === 0) {\n    showToast(element, {\n      message: hass.localize(\"ui.panel.config.updates.no_new_updates\"),\n    });\n  }\n};\n\n// When updating, and entity does not support % show \"Installing\"\n// When updating, and entity does support % show \"Installing (xx%)\"\n// When update available, show the version\n// When the latest version is skipped, show the latest version\n// When update is not available, show \"Up-to-date\"\n// When update is not available and there is no latest_version show \"Unavailable\"\nexport const computeUpdateStateDisplay = (\n  stateObj: UpdateEntity,\n  hass: HomeAssistant\n): string => {\n  const state = stateObj.state;\n  const attributes = stateObj.attributes;\n\n  if (state === \"off\") {\n    const isSkipped =\n      attributes.latest_version &&\n      attributes.skipped_version === attributes.latest_version;\n    if (isSkipped) {\n      return attributes.latest_version!;\n    }\n    return hass.formatEntityState(stateObj);\n  }\n\n  if (state === \"on\") {\n    if (updateIsInstalling(stateObj)) {\n      const supportsProgress =\n        supportsFeature(stateObj, UpdateEntityFeature.PROGRESS) &&\n        typeof attributes.in_progress === \"number\";\n      if (supportsProgress) {\n        return hass.localize(\"ui.card.update.installing_with_progress\", {\n          progress: attributes.in_progress as number,\n        });\n      }\n      return hass.localize(\"ui.card.update.installing\");\n    }\n\n    if (attributes.latest_version) {\n      return attributes.latest_version;\n    }\n  }\n\n  return hass.formatEntityState(stateObj);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}