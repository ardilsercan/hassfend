{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { RippleHandlers } from \"@material/mwc-ripple/ripple-handlers\";\nconst mdiExclamationThick = \"M10 3H14V14H10V3M10 21V17H14V21H10Z\";\nconst mdiHelp = \"M10,19H13V22H10V19M12,2C17.35,2.22 19.68,7.62 16.5,11.67C15.67,12.67 14.33,13.33 13.67,14.17C13,15 13,16 13,17H10C10,15.33 10,13.92 10.67,12.92C11.33,11.92 12.67,11.33 13.5,10.67C15.92,8.43 15.32,5.26 12,5A3,3 0 0,0 9,8H6A6,6 0 0,1 12,2Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, eventOptions, property, queryAsync, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../../common/array/ensure-array\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { hsv2rgb, rgb2hex, rgb2hsv } from \"../../../common/color/convert-color\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-state-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/tile/ha-tile-badge\";\nimport \"../../../components/tile/ha-tile-icon\";\nimport \"../../../components/tile/ha-tile-image\";\nimport \"../../../components/tile/ha-tile-info\";\nimport { cameraUrlWithWidthHeight } from \"../../../data/camera\";\nimport { isUnavailableState } from \"../../../data/entity\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../../../data/sensor\";\nimport { computeUpdateStateDisplay } from \"../../../data/update\";\nimport \"../card-features/hui-card-features\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../components/hui-timestamp-display\";\nimport { renderTileBadge } from \"./tile/badges/tile-badge\";\nconst TIMESTAMP_STATE_DOMAINS = [\"button\", \"input_button\", \"scene\"];\nexport const getEntityDefaultTileIconAction = entityId => {\n  const domain = computeDomain(entityId);\n  const supportsIconAction = DOMAINS_TOGGLE.has(domain) || [\"button\", \"input_button\", \"scene\"].includes(domain);\n  return supportsIconAction ? \"toggle\" : \"more-info\";\n};\nconst DOMAIN_IMAGE_STYLE = {\n  update: \"square\",\n  media_player: \"rounded-square\"\n};\nexport let HuiTileCard = _decorate([customElement(\"hui-tile-card\")], function (_initialize, _LitElement) {\n  class HuiTileCard extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiTileCard,\n    d: [{\n      kind: \"method\",\n      static: true,\n      key: \"getConfigElement\",\n      value: async function getConfigElement() {\n        await import(\"../editor/config-elements/hui-tile-card-editor\");\n        return document.createElement(\"hui-tile-card-editor\");\n      }\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig(hass, entities, entitiesFallback) {\n        const includeDomains = [\"sensor\", \"light\", \"switch\"];\n        const maxEntities = 1;\n        const foundEntities = findEntities(hass, maxEntities, entities, entitiesFallback, includeDomains);\n        return {\n          type: \"tile\",\n          entity: foundEntities[0] || \"\"\n        };\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config.entity) {\n          throw new Error(\"Specify an entity\");\n        }\n        this._config = {\n          tap_action: {\n            action: \"more-info\"\n          },\n          icon_tap_action: {\n            action: getEntityDefaultTileIconAction(config.entity)\n          },\n          ...config\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"getCardSize\",\n      value: function getCardSize() {\n        return 1;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAction\",\n      value: function _handleAction(ev) {\n        handleAction(this, this.hass, this._config, ev.detail.action);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleIconAction\",\n      value: function _handleIconAction(ev) {\n        ev.stopPropagation();\n        const config = {\n          entity: this._config.entity,\n          tap_action: this._config.icon_tap_action\n        };\n        handleAction(this, this.hass, config, \"tap\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getImageUrl\",\n      value: function _getImageUrl(entity) {\n        const entityPicture = entity.attributes.entity_picture_local || entity.attributes.entity_picture;\n        if (!entityPicture) return undefined;\n        let imageUrl = this.hass.hassUrl(entityPicture);\n        if (computeDomain(entity.entity_id) === \"camera\") {\n          imageUrl = cameraUrlWithWidthHeight(imageUrl, 80, 80);\n        }\n        return imageUrl;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeStateColor\",\n      value() {\n        return memoizeOne((entity, color) => {\n          // Use custom color if active\n          if (color) {\n            return stateActive(entity) ? computeCssColor(color) : undefined;\n          }\n\n          // Use default color for person/device_tracker because color is on the badge\n          if (computeDomain(entity.entity_id) === \"person\" || computeDomain(entity.entity_id) === \"device_tracker\") {\n            return undefined;\n          }\n\n          // Use light color if the light support rgb\n          if (computeDomain(entity.entity_id) === \"light\" && entity.attributes.rgb_color) {\n            const hsvColor = rgb2hsv(entity.attributes.rgb_color);\n\n            // Modify the real rgb color for better contrast\n            if (hsvColor[1] < 0.4) {\n              // Special case for very light color (e.g: white)\n              if (hsvColor[1] < 0.1) {\n                hsvColor[2] = 225;\n              } else {\n                hsvColor[1] = 0.4;\n              }\n            }\n            return rgb2hex(hsv2rgb(hsvColor));\n          }\n\n          // Fallback to state color\n          return stateColorCss(entity);\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderStateContent\",\n      value: function _renderStateContent(stateObj, stateContent) {\n        const contents = ensureArray(stateContent);\n        const values = contents.map(content => {\n          if (content === \"state\") {\n            const domain = computeDomain(stateObj.entity_id);\n            if ((stateObj.attributes.device_class === SENSOR_DEVICE_CLASS_TIMESTAMP || TIMESTAMP_STATE_DOMAINS.includes(domain)) && !isUnavailableState(stateObj.state)) {\n              return html`\n              <hui-timestamp-display\n                .hass=${this.hass}\n                .ts=${new Date(stateObj.state)}\n                format=\"relative\"\n                capitalize\n              ></hui-timestamp-display>\n            `;\n            }\n            return this.hass.formatEntityState(stateObj);\n          }\n          if (content === \"last-changed\") {\n            return html`\n            <ha-relative-time\n              .hass=${this.hass}\n              .datetime=${stateObj.last_changed}\n            ></ha-relative-time>\n          `;\n          }\n          if (stateObj.attributes[content] == null) {\n            return undefined;\n          }\n          return this.hass.formatEntityAttributeValue(stateObj, content);\n        }).filter(Boolean);\n        if (!values.length) {\n          return html`${this.hass.formatEntityState(stateObj)}`;\n        }\n        return html`\n      ${values.map((value, index, array) => html`${value}${index < array.length - 1 ? \" â¸± \" : nothing}`)}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderState\",\n      value: function _renderState(stateObj) {\n        const domain = computeDomain(stateObj.entity_id);\n        const active = stateActive(stateObj);\n        if (domain === \"light\" && active) {\n          return this._renderStateContent(stateObj, [\"brightness\"]);\n        }\n        if (domain === \"fan\" && active) {\n          return this._renderStateContent(stateObj, [\"percentage\"]);\n        }\n        if (domain === \"cover\" && active) {\n          return this._renderStateContent(stateObj, [\"state\", \"current_position\"]);\n        }\n        if (domain === \"valve\" && active) {\n          return this._renderStateContent(stateObj, [\"state\", \"current_position\"]);\n        }\n        if (domain === \"humidifier\") {\n          return this._renderStateContent(stateObj, [\"state\", \"current_humidity\"]);\n        }\n        if (domain === \"climate\") {\n          return this._renderStateContent(stateObj, [\"state\", \"current_temperature\"]);\n        }\n        if (domain === \"update\") {\n          return html`${computeUpdateStateDisplay(stateObj, this.hass)}`;\n        }\n        return this._renderStateContent(stateObj, \"state\");\n      }\n    }, {\n      kind: \"field\",\n      decorators: [queryAsync(\"mwc-ripple\")],\n      key: \"_ripple\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_shouldRenderRipple\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_rippleHandlers\",\n      value() {\n        return new RippleHandlers(() => {\n          this._shouldRenderRipple = true;\n          return this._ripple;\n        });\n      }\n    }, {\n      kind: \"method\",\n      decorators: [eventOptions({\n        passive: true\n      })],\n      key: \"handleRippleActivate\",\n      value: function handleRippleActivate(evt) {\n        if (!this.hasCardAction) return;\n        this._rippleHandlers.startPress(evt);\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRippleDeactivate\",\n      value: function handleRippleDeactivate() {\n        if (!this.hasCardAction) return;\n        this._rippleHandlers.endPress();\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRippleMouseEnter\",\n      value: function handleRippleMouseEnter() {\n        if (!this.hasCardAction) return;\n        this._rippleHandlers.startHover();\n      }\n    }, {\n      kind: \"method\",\n      key: \"handleRippleMouseLeave\",\n      value: function handleRippleMouseLeave() {\n        if (!this.hasCardAction) return;\n        this._rippleHandlers.endHover();\n      }\n    }, {\n      kind: \"get\",\n      key: \"hasCardAction\",\n      value: function hasCardAction() {\n        var _this$_config, _this$_config2, _this$_config3, _this$_config4;\n        return !((_this$_config = this._config) !== null && _this$_config !== void 0 && _this$_config.tap_action) || hasAction((_this$_config2 = this._config) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.tap_action) || hasAction((_this$_config3 = this._config) === null || _this$_config3 === void 0 ? void 0 : _this$_config3.hold_action) || hasAction((_this$_config4 = this._config) === null || _this$_config4 === void 0 ? void 0 : _this$_config4.double_tap_action);\n      }\n    }, {\n      kind: \"get\",\n      key: \"hasIconAction\",\n      value: function hasIconAction() {\n        var _this$_config5, _this$_config6;\n        return !((_this$_config5 = this._config) !== null && _this$_config5 !== void 0 && _this$_config5.icon_tap_action) || hasAction((_this$_config6 = this._config) === null || _this$_config6 === void 0 ? void 0 : _this$_config6.icon_tap_action);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._config || !this.hass) {\n          return nothing;\n        }\n        const entityId = this._config.entity;\n        const stateObj = entityId ? this.hass.states[entityId] : undefined;\n        const contentClasses = {\n          vertical: Boolean(this._config.vertical)\n        };\n        if (!stateObj) {\n          return html`\n        <ha-card>\n          <div class=\"content ${classMap(contentClasses)}\">\n            <div class=\"icon-container\">\n              <ha-tile-icon>\n                <ha-svg-icon .path=${mdiHelp}></ha-svg-icon>\n              </ha-tile-icon>\n              <ha-tile-badge class=\"not-found\">\n                <ha-svg-icon .path=${mdiExclamationThick}></ha-svg-icon>\n              </ha-tile-badge>\n            </div>\n            <ha-tile-info\n              .primary=${entityId}\n              secondary=${this.hass.localize(\"ui.card.tile.not_found\")}\n            ></ha-tile-info>\n          </div>\n        </ha-card>\n      `;\n        }\n        const name = this._config.name || stateObj.attributes.friendly_name;\n        const localizedState = this._config.hide_state ? nothing : this._config.state_content ? this._renderStateContent(stateObj, this._config.state_content) : this._renderState(stateObj);\n        const active = stateActive(stateObj);\n        const color = this._computeStateColor(stateObj, this._config.color);\n        const domain = computeDomain(stateObj.entity_id);\n        const style = {\n          \"--tile-color\": color\n        };\n        const imageUrl = this._config.show_entity_picture ? this._getImageUrl(stateObj) : undefined;\n        return html`\n      <ha-card style=${styleMap(style)} class=${classMap({\n          active\n        })}>\n        <div\n          class=\"background\"\n          @action=${this._handleAction}\n          .actionHandler=${actionHandler({\n          hasHold: hasAction(this._config.hold_action),\n          hasDoubleClick: hasAction(this._config.double_tap_action)\n        })}\n          role=${ifDefined(this.hasCardAction ? \"button\" : undefined)}\n          tabindex=${ifDefined(this.hasCardAction ? \"0\" : undefined)}\n          aria-labelledby=\"info\"\n          @mousedown=${this.handleRippleActivate}\n          @mouseup=${this.handleRippleDeactivate}\n          @mouseenter=${this.handleRippleMouseEnter}\n          @mouseleave=${this.handleRippleMouseLeave}\n          @touchstart=${this.handleRippleActivate}\n          @touchend=${this.handleRippleDeactivate}\n          @touchcancel=${this.handleRippleDeactivate}\n        >\n          ${this._shouldRenderRipple ? html`<mwc-ripple></mwc-ripple>` : nothing}\n        </div>\n        <div class=\"content ${classMap(contentClasses)}\">\n          <div\n            class=\"icon-container\"\n            role=${ifDefined(this.hasIconAction ? \"button\" : undefined)}\n            tabindex=${ifDefined(this.hasIconAction ? \"0\" : undefined)}\n            @action=${this._handleIconAction}\n            .actionHandler=${actionHandler()}\n          >\n            ${imageUrl ? html`\n                  <ha-tile-image\n                    .imageStyle=${DOMAIN_IMAGE_STYLE[domain] || \"circle\"}\n                    .imageUrl=${imageUrl}\n                  ></ha-tile-image>\n                ` : html`\n                  <ha-tile-icon\n                    data-domain=${ifDefined(domain)}\n                    data-state=${ifDefined(stateObj === null || stateObj === void 0 ? void 0 : stateObj.state)}\n                  >\n                    <ha-state-icon\n                      .icon=${this._config.icon}\n                      .stateObj=${stateObj}\n                      .hass=${this.hass}\n                    ></ha-state-icon>\n                  </ha-tile-icon>\n                `}\n            ${renderTileBadge(stateObj, this.hass)}\n          </div>\n          <ha-tile-info\n            id=\"info\"\n            .primary=${name}\n            .secondary=${localizedState}\n          ></ha-tile-info>\n        </div>\n        <hui-card-features\n          .hass=${this.hass}\n          .stateObj=${stateObj}\n          .color=${this._config.color}\n          .features=${this._config.features}\n        ></hui-card-features>\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        --tile-color: var(--state-inactive-color);\n        -webkit-tap-highlight-color: transparent;\n      }\n      ha-card:has(.background:focus-visible) {\n        --shadow-default: var(--ha-card-box-shadow, 0 0 0 0 transparent);\n        --shadow-focus: 0 0 0 1px var(--tile-color);\n        border-color: var(--tile-color);\n        box-shadow: var(--shadow-default), var(--shadow-focus);\n      }\n      ha-card {\n        --mdc-ripple-color: var(--tile-color);\n        height: 100%;\n        transition:\n          box-shadow 180ms ease-in-out,\n          border-color 180ms ease-in-out;\n      }\n      ha-card.active {\n        --tile-color: var(--state-icon-color);\n      }\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n      [role=\"button\"]:focus {\n        outline: none;\n      }\n      .background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        border-radius: var(--ha-card-border-radius, 12px);\n        margin: calc(-1 * var(--ha-card-border-width, 1px));\n        overflow: hidden;\n      }\n      .content {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n      .vertical {\n        flex-direction: column;\n        text-align: center;\n      }\n      .vertical .icon-container {\n        margin-top: 12px;\n        margin-right: 0;\n        margin-inline-start: initial;\n        margin-inline-end: initial;\n      }\n      .vertical ha-tile-info {\n        width: 100%;\n      }\n      .icon-container {\n        position: relative;\n        flex: none;\n        margin-right: 12px;\n        margin-inline-start: 12px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n        transition: transform 180ms ease-in-out;\n      }\n      .icon-container ha-tile-icon,\n      .icon-container ha-tile-image {\n        --tile-icon-color: var(--tile-color);\n        user-select: none;\n        -ms-user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n      }\n      .icon-container ha-tile-badge {\n        position: absolute;\n        top: -3px;\n        right: -3px;\n        inset-inline-end: -3px;\n        inset-inline-start: initial;\n      }\n      .icon-container:not([role=\"button\"]) {\n        pointer-events: none;\n      }\n      .icon-container[role=\"button\"]:focus-visible,\n      .icon-container[role=\"button\"]:active {\n        transform: scale(1.2);\n      }\n      ha-tile-info {\n        position: relative;\n        padding: 12px;\n        flex: 1;\n        min-width: 0;\n        transition: background-color 180ms ease-in-out;\n        box-sizing: border-box;\n        pointer-events: none;\n      }\n      hui-card-features {\n        --feature-color: var(--tile-color);\n      }\n\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"pending\"],\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"arming\"],\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"triggered\"],\n      ha-tile-icon[data-domain=\"lock\"][data-state=\"jammed\"] {\n        animation: pulse 1s infinite;\n      }\n\n      ha-tile-badge.not-found {\n        --tile-badge-background-color: var(--red-color);\n      }\n\n      @keyframes pulse {\n        0% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["RippleHandlers","mdiExclamationThick","mdiHelp","LitElement","css","html","nothing","customElement","eventOptions","property","queryAsync","state","classMap","ifDefined","styleMap","memoizeOne","ensureArray","computeCssColor","hsv2rgb","rgb2hex","rgb2hsv","DOMAINS_TOGGLE","computeDomain","stateActive","stateColorCss","cameraUrlWithWidthHeight","isUnavailableState","SENSOR_DEVICE_CLASS_TIMESTAMP","computeUpdateStateDisplay","actionHandler","findEntities","handleAction","hasAction","renderTileBadge","TIMESTAMP_STATE_DOMAINS","getEntityDefaultTileIconAction","entityId","domain","supportsIconAction","has","includes","DOMAIN_IMAGE_STYLE","update","media_player","HuiTileCard","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","static","key","value","getConfigElement","document","createElement","getStubConfig","hass","entities","entitiesFallback","includeDomains","maxEntities","foundEntities","type","entity","decorators","attribute","setConfig","config","Error","_config","tap_action","action","icon_tap_action","getCardSize","_handleAction","ev","detail","_handleIconAction","stopPropagation","_getImageUrl","entityPicture","attributes","entity_picture_local","entity_picture","undefined","imageUrl","hassUrl","entity_id","color","rgb_color","hsvColor","_renderStateContent","stateObj","stateContent","contents","values","map","content","device_class","Date","formatEntityState","last_changed","formatEntityAttributeValue","filter","Boolean","length","index","array","_renderState","active","_shouldRenderRipple","_ripple","passive","handleRippleActivate","evt","hasCardAction","_rippleHandlers","startPress","handleRippleDeactivate","endPress","handleRippleMouseEnter","startHover","handleRippleMouseLeave","endHover","_this$_config","_this$_config2","_this$_config3","_this$_config4","hold_action","double_tap_action","hasIconAction","_this$_config5","_this$_config6","render","states","contentClasses","vertical","localize","name","friendly_name","localizedState","hide_state","state_content","_computeStateColor","style","show_entity_picture","hasHold","hasDoubleClick","icon","features","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/cards/hui-tile-card.ts"],"sourcesContent":["import { Ripple } from \"@material/mwc-ripple\";\nimport { RippleHandlers } from \"@material/mwc-ripple/ripple-handlers\";\nimport { mdiExclamationThick, mdiHelp } from \"@mdi/js\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport {\n  customElement,\n  eventOptions,\n  property,\n  queryAsync,\n  state,\n} from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport memoizeOne from \"memoize-one\";\nimport { ensureArray } from \"../../../common/array/ensure-array\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { hsv2rgb, rgb2hex, rgb2hsv } from \"../../../common/color/convert-color\";\nimport { DOMAINS_TOGGLE } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-state-icon\";\nimport \"../../../components/ha-svg-icon\";\nimport \"../../../components/tile/ha-tile-badge\";\nimport \"../../../components/tile/ha-tile-icon\";\nimport \"../../../components/tile/ha-tile-image\";\nimport type { TileImageStyle } from \"../../../components/tile/ha-tile-image\";\nimport \"../../../components/tile/ha-tile-info\";\nimport { cameraUrlWithWidthHeight } from \"../../../data/camera\";\nimport { isUnavailableState } from \"../../../data/entity\";\nimport type { ActionHandlerEvent } from \"../../../data/lovelace/action_handler\";\nimport { SENSOR_DEVICE_CLASS_TIMESTAMP } from \"../../../data/sensor\";\nimport { UpdateEntity, computeUpdateStateDisplay } from \"../../../data/update\";\nimport { HomeAssistant } from \"../../../types\";\nimport \"../card-features/hui-card-features\";\nimport { actionHandler } from \"../common/directives/action-handler-directive\";\nimport { findEntities } from \"../common/find-entities\";\nimport { handleAction } from \"../common/handle-action\";\nimport { hasAction } from \"../common/has-action\";\nimport \"../components/hui-timestamp-display\";\nimport type { LovelaceCard, LovelaceCardEditor } from \"../types\";\nimport { renderTileBadge } from \"./tile/badges/tile-badge\";\nimport type { ThermostatCardConfig, TileCardConfig } from \"./types\";\n\nconst TIMESTAMP_STATE_DOMAINS = [\"button\", \"input_button\", \"scene\"];\n\nexport const getEntityDefaultTileIconAction = (entityId: string) => {\n  const domain = computeDomain(entityId);\n  const supportsIconAction =\n    DOMAINS_TOGGLE.has(domain) ||\n    [\"button\", \"input_button\", \"scene\"].includes(domain);\n\n  return supportsIconAction ? \"toggle\" : \"more-info\";\n};\n\nconst DOMAIN_IMAGE_STYLE: Record<string, TileImageStyle> = {\n  update: \"square\",\n  media_player: \"rounded-square\",\n};\n\n@customElement(\"hui-tile-card\")\nexport class HuiTileCard extends LitElement implements LovelaceCard {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-tile-card-editor\");\n    return document.createElement(\"hui-tile-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): TileCardConfig {\n    const includeDomains = [\"sensor\", \"light\", \"switch\"];\n    const maxEntities = 1;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return {\n      type: \"tile\",\n      entity: foundEntities[0] || \"\",\n    };\n  }\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: TileCardConfig;\n\n  public setConfig(config: ThermostatCardConfig): void {\n    if (!config.entity) {\n      throw new Error(\"Specify an entity\");\n    }\n\n    this._config = {\n      tap_action: {\n        action: \"more-info\",\n      },\n      icon_tap_action: {\n        action: getEntityDefaultTileIconAction(config.entity),\n      },\n      ...config,\n    };\n  }\n\n  public getCardSize(): number {\n    return 1;\n  }\n\n  private _handleAction(ev: ActionHandlerEvent) {\n    handleAction(this, this.hass!, this._config!, ev.detail.action!);\n  }\n\n  private _handleIconAction(ev: CustomEvent) {\n    ev.stopPropagation();\n    const config = {\n      entity: this._config!.entity,\n      tap_action: this._config!.icon_tap_action,\n    };\n    handleAction(this, this.hass!, config, \"tap\");\n  }\n\n  private _getImageUrl(entity: HassEntity): string | undefined {\n    const entityPicture =\n      entity.attributes.entity_picture_local ||\n      entity.attributes.entity_picture;\n\n    if (!entityPicture) return undefined;\n\n    let imageUrl = this.hass!.hassUrl(entityPicture);\n    if (computeDomain(entity.entity_id) === \"camera\") {\n      imageUrl = cameraUrlWithWidthHeight(imageUrl, 80, 80);\n    }\n\n    return imageUrl;\n  }\n\n  private _computeStateColor = memoizeOne(\n    (entity: HassEntity, color?: string) => {\n      // Use custom color if active\n      if (color) {\n        return stateActive(entity) ? computeCssColor(color) : undefined;\n      }\n\n      // Use default color for person/device_tracker because color is on the badge\n      if (\n        computeDomain(entity.entity_id) === \"person\" ||\n        computeDomain(entity.entity_id) === \"device_tracker\"\n      ) {\n        return undefined;\n      }\n\n      // Use light color if the light support rgb\n      if (\n        computeDomain(entity.entity_id) === \"light\" &&\n        entity.attributes.rgb_color\n      ) {\n        const hsvColor = rgb2hsv(entity.attributes.rgb_color);\n\n        // Modify the real rgb color for better contrast\n        if (hsvColor[1] < 0.4) {\n          // Special case for very light color (e.g: white)\n          if (hsvColor[1] < 0.1) {\n            hsvColor[2] = 225;\n          } else {\n            hsvColor[1] = 0.4;\n          }\n        }\n        return rgb2hex(hsv2rgb(hsvColor));\n      }\n\n      // Fallback to state color\n      return stateColorCss(entity);\n    }\n  );\n\n  private _renderStateContent(\n    stateObj: HassEntity,\n    stateContent: string | string[]\n  ) {\n    const contents = ensureArray(stateContent);\n\n    const values = contents\n      .map((content) => {\n        if (content === \"state\") {\n          const domain = computeDomain(stateObj.entity_id);\n          if (\n            (stateObj.attributes.device_class ===\n              SENSOR_DEVICE_CLASS_TIMESTAMP ||\n              TIMESTAMP_STATE_DOMAINS.includes(domain)) &&\n            !isUnavailableState(stateObj.state)\n          ) {\n            return html`\n              <hui-timestamp-display\n                .hass=${this.hass}\n                .ts=${new Date(stateObj.state)}\n                format=\"relative\"\n                capitalize\n              ></hui-timestamp-display>\n            `;\n          }\n\n          return this.hass!.formatEntityState(stateObj);\n        }\n        if (content === \"last-changed\") {\n          return html`\n            <ha-relative-time\n              .hass=${this.hass}\n              .datetime=${stateObj.last_changed}\n            ></ha-relative-time>\n          `;\n        }\n        if (stateObj.attributes[content] == null) {\n          return undefined;\n        }\n        return this.hass!.formatEntityAttributeValue(stateObj, content);\n      })\n      .filter(Boolean);\n\n    if (!values.length) {\n      return html`${this.hass!.formatEntityState(stateObj)}`;\n    }\n\n    return html`\n      ${values.map(\n        (value, index, array) =>\n          html`${value}${index < array.length - 1 ? \" â¸± \" : nothing}`\n      )}\n    `;\n  }\n\n  private _renderState(stateObj: HassEntity): TemplateResult | typeof nothing {\n    const domain = computeDomain(stateObj.entity_id);\n    const active = stateActive(stateObj);\n\n    if (domain === \"light\" && active) {\n      return this._renderStateContent(stateObj, [\"brightness\"]);\n    }\n\n    if (domain === \"fan\" && active) {\n      return this._renderStateContent(stateObj, [\"percentage\"]);\n    }\n\n    if (domain === \"cover\" && active) {\n      return this._renderStateContent(stateObj, [\"state\", \"current_position\"]);\n    }\n\n    if (domain === \"valve\" && active) {\n      return this._renderStateContent(stateObj, [\"state\", \"current_position\"]);\n    }\n\n    if (domain === \"humidifier\") {\n      return this._renderStateContent(stateObj, [\"state\", \"current_humidity\"]);\n    }\n\n    if (domain === \"climate\") {\n      return this._renderStateContent(stateObj, [\n        \"state\",\n        \"current_temperature\",\n      ]);\n    }\n\n    if (domain === \"update\") {\n      return html`${computeUpdateStateDisplay(\n        stateObj as UpdateEntity,\n        this.hass!\n      )}`;\n    }\n\n    return this._renderStateContent(stateObj, \"state\");\n  }\n\n  @queryAsync(\"mwc-ripple\") private _ripple!: Promise<Ripple | null>;\n\n  @state() private _shouldRenderRipple = false;\n\n  private _rippleHandlers: RippleHandlers = new RippleHandlers(() => {\n    this._shouldRenderRipple = true;\n    return this._ripple;\n  });\n\n  @eventOptions({ passive: true })\n  private handleRippleActivate(evt?: Event) {\n    if (!this.hasCardAction) return;\n    this._rippleHandlers.startPress(evt);\n  }\n\n  private handleRippleDeactivate() {\n    if (!this.hasCardAction) return;\n    this._rippleHandlers.endPress();\n  }\n\n  private handleRippleMouseEnter() {\n    if (!this.hasCardAction) return;\n    this._rippleHandlers.startHover();\n  }\n\n  private handleRippleMouseLeave() {\n    if (!this.hasCardAction) return;\n    this._rippleHandlers.endHover();\n  }\n\n  get hasCardAction() {\n    return (\n      !this._config?.tap_action ||\n      hasAction(this._config?.tap_action) ||\n      hasAction(this._config?.hold_action) ||\n      hasAction(this._config?.double_tap_action)\n    );\n  }\n\n  get hasIconAction() {\n    return (\n      !this._config?.icon_tap_action || hasAction(this._config?.icon_tap_action)\n    );\n  }\n\n  protected render() {\n    if (!this._config || !this.hass) {\n      return nothing;\n    }\n    const entityId = this._config.entity;\n    const stateObj = entityId ? this.hass.states[entityId] : undefined;\n\n    const contentClasses = { vertical: Boolean(this._config.vertical) };\n\n    if (!stateObj) {\n      return html`\n        <ha-card>\n          <div class=\"content ${classMap(contentClasses)}\">\n            <div class=\"icon-container\">\n              <ha-tile-icon>\n                <ha-svg-icon .path=${mdiHelp}></ha-svg-icon>\n              </ha-tile-icon>\n              <ha-tile-badge class=\"not-found\">\n                <ha-svg-icon .path=${mdiExclamationThick}></ha-svg-icon>\n              </ha-tile-badge>\n            </div>\n            <ha-tile-info\n              .primary=${entityId}\n              secondary=${this.hass.localize(\"ui.card.tile.not_found\")}\n            ></ha-tile-info>\n          </div>\n        </ha-card>\n      `;\n    }\n\n    const name = this._config.name || stateObj.attributes.friendly_name;\n\n    const localizedState = this._config.hide_state\n      ? nothing\n      : this._config.state_content\n        ? this._renderStateContent(stateObj, this._config.state_content)\n        : this._renderState(stateObj);\n\n    const active = stateActive(stateObj);\n    const color = this._computeStateColor(stateObj, this._config.color);\n    const domain = computeDomain(stateObj.entity_id);\n\n    const style = {\n      \"--tile-color\": color,\n    };\n\n    const imageUrl = this._config.show_entity_picture\n      ? this._getImageUrl(stateObj)\n      : undefined;\n\n    return html`\n      <ha-card style=${styleMap(style)} class=${classMap({ active })}>\n        <div\n          class=\"background\"\n          @action=${this._handleAction}\n          .actionHandler=${actionHandler({\n            hasHold: hasAction(this._config!.hold_action),\n            hasDoubleClick: hasAction(this._config!.double_tap_action),\n          })}\n          role=${ifDefined(this.hasCardAction ? \"button\" : undefined)}\n          tabindex=${ifDefined(this.hasCardAction ? \"0\" : undefined)}\n          aria-labelledby=\"info\"\n          @mousedown=${this.handleRippleActivate}\n          @mouseup=${this.handleRippleDeactivate}\n          @mouseenter=${this.handleRippleMouseEnter}\n          @mouseleave=${this.handleRippleMouseLeave}\n          @touchstart=${this.handleRippleActivate}\n          @touchend=${this.handleRippleDeactivate}\n          @touchcancel=${this.handleRippleDeactivate}\n        >\n          ${this._shouldRenderRipple\n            ? html`<mwc-ripple></mwc-ripple>`\n            : nothing}\n        </div>\n        <div class=\"content ${classMap(contentClasses)}\">\n          <div\n            class=\"icon-container\"\n            role=${ifDefined(this.hasIconAction ? \"button\" : undefined)}\n            tabindex=${ifDefined(this.hasIconAction ? \"0\" : undefined)}\n            @action=${this._handleIconAction}\n            .actionHandler=${actionHandler()}\n          >\n            ${imageUrl\n              ? html`\n                  <ha-tile-image\n                    .imageStyle=${DOMAIN_IMAGE_STYLE[domain] || \"circle\"}\n                    .imageUrl=${imageUrl}\n                  ></ha-tile-image>\n                `\n              : html`\n                  <ha-tile-icon\n                    data-domain=${ifDefined(domain)}\n                    data-state=${ifDefined(stateObj?.state)}\n                  >\n                    <ha-state-icon\n                      .icon=${this._config.icon}\n                      .stateObj=${stateObj}\n                      .hass=${this.hass}\n                    ></ha-state-icon>\n                  </ha-tile-icon>\n                `}\n            ${renderTileBadge(stateObj, this.hass)}\n          </div>\n          <ha-tile-info\n            id=\"info\"\n            .primary=${name}\n            .secondary=${localizedState}\n          ></ha-tile-info>\n        </div>\n        <hui-card-features\n          .hass=${this.hass}\n          .stateObj=${stateObj}\n          .color=${this._config.color}\n          .features=${this._config.features}\n        ></hui-card-features>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        --tile-color: var(--state-inactive-color);\n        -webkit-tap-highlight-color: transparent;\n      }\n      ha-card:has(.background:focus-visible) {\n        --shadow-default: var(--ha-card-box-shadow, 0 0 0 0 transparent);\n        --shadow-focus: 0 0 0 1px var(--tile-color);\n        border-color: var(--tile-color);\n        box-shadow: var(--shadow-default), var(--shadow-focus);\n      }\n      ha-card {\n        --mdc-ripple-color: var(--tile-color);\n        height: 100%;\n        transition:\n          box-shadow 180ms ease-in-out,\n          border-color 180ms ease-in-out;\n      }\n      ha-card.active {\n        --tile-color: var(--state-icon-color);\n      }\n      [role=\"button\"] {\n        cursor: pointer;\n      }\n      [role=\"button\"]:focus {\n        outline: none;\n      }\n      .background {\n        position: absolute;\n        top: 0;\n        left: 0;\n        bottom: 0;\n        right: 0;\n        border-radius: var(--ha-card-border-radius, 12px);\n        margin: calc(-1 * var(--ha-card-border-width, 1px));\n        overflow: hidden;\n      }\n      .content {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n      }\n      .vertical {\n        flex-direction: column;\n        text-align: center;\n      }\n      .vertical .icon-container {\n        margin-top: 12px;\n        margin-right: 0;\n        margin-inline-start: initial;\n        margin-inline-end: initial;\n      }\n      .vertical ha-tile-info {\n        width: 100%;\n      }\n      .icon-container {\n        position: relative;\n        flex: none;\n        margin-right: 12px;\n        margin-inline-start: 12px;\n        margin-inline-end: initial;\n        direction: var(--direction);\n        transition: transform 180ms ease-in-out;\n      }\n      .icon-container ha-tile-icon,\n      .icon-container ha-tile-image {\n        --tile-icon-color: var(--tile-color);\n        user-select: none;\n        -ms-user-select: none;\n        -webkit-user-select: none;\n        -moz-user-select: none;\n      }\n      .icon-container ha-tile-badge {\n        position: absolute;\n        top: -3px;\n        right: -3px;\n        inset-inline-end: -3px;\n        inset-inline-start: initial;\n      }\n      .icon-container:not([role=\"button\"]) {\n        pointer-events: none;\n      }\n      .icon-container[role=\"button\"]:focus-visible,\n      .icon-container[role=\"button\"]:active {\n        transform: scale(1.2);\n      }\n      ha-tile-info {\n        position: relative;\n        padding: 12px;\n        flex: 1;\n        min-width: 0;\n        transition: background-color 180ms ease-in-out;\n        box-sizing: border-box;\n        pointer-events: none;\n      }\n      hui-card-features {\n        --feature-color: var(--tile-color);\n      }\n\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"pending\"],\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"arming\"],\n      ha-tile-icon[data-domain=\"alarm_control_panel\"][data-state=\"triggered\"],\n      ha-tile-icon[data-domain=\"lock\"][data-state=\"jammed\"] {\n        animation: pulse 1s infinite;\n      }\n\n      ha-tile-badge.not-found {\n        --tile-badge-background-color: var(--red-color);\n      }\n\n      @keyframes pulse {\n        0% {\n          opacity: 1;\n        }\n        50% {\n          opacity: 0;\n        }\n        100% {\n          opacity: 1;\n        }\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-tile-card\": HuiTileCard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}