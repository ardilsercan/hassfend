{"ast":null,"code":"import { css } from \"lit\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { HuiStackCard } from \"./hui-stack-card\";\nexport const DEFAULT_COLUMNS = 3;\nconst SQUARE_ROW_HEIGHTS_BY_COLUMNS = {\n  1: 5,\n  2: 3,\n  3: 2\n};\nclass HuiGridCard extends HuiStackCard {\n  static async getConfigElement() {\n    await import(\"../editor/config-elements/hui-grid-card-editor\");\n    return document.createElement(\"hui-grid-card-editor\");\n  }\n  async getCardSize() {\n    if (!this._cards || !this._config) {\n      return 0;\n    }\n    if (this.square) {\n      const rowHeight = SQUARE_ROW_HEIGHTS_BY_COLUMNS[this.columns] || 1;\n      return (this._cards.length < this.columns ? rowHeight : this._cards.length / this.columns * rowHeight) + (this._config.title ? 1 : 0);\n    }\n    const promises = [];\n    for (const element of this._cards) {\n      promises.push(computeCardSize(element));\n    }\n    const cardSizes = await Promise.all(promises);\n    let totalHeight = this._config.title ? 1 : 0;\n\n    // Each column will adjust to max card size of it's row\n    for (let start = 0; start < cardSizes.length; start += this.columns) {\n      totalHeight += Math.max(...cardSizes.slice(start, start + this.columns));\n    }\n    return totalHeight;\n  }\n  get columns() {\n    var _this$_config;\n    return ((_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.columns) || DEFAULT_COLUMNS;\n  }\n  get square() {\n    var _this$_config2;\n    return ((_this$_config2 = this._config) === null || _this$_config2 === void 0 ? void 0 : _this$_config2.square) !== false;\n  }\n  setConfig(config) {\n    super.setConfig(config);\n    this.style.setProperty(\"--grid-card-column-count\", String(this.columns));\n    if (this.square) {\n      this.setAttribute(\"square\", \"\");\n    } else {\n      this.removeAttribute(\"square\");\n    }\n  }\n  static get styles() {\n    return [super.sharedStyles, css`\n        #root {\n          display: grid;\n          grid-template-columns: repeat(\n            var(--grid-card-column-count, ${DEFAULT_COLUMNS}),\n            minmax(0, 1fr)\n          );\n          grid-gap: var(--grid-card-gap, 8px);\n        }\n        :host([square]) #root {\n          grid-auto-rows: 1fr;\n        }\n        :host([square]) #root::before {\n          content: \"\";\n          width: 0;\n          padding-bottom: 100%;\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n\n        :host([square]) #root > *:not([hidden]) {\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n        :host([square]) #root > *:not([hidden]) ~ *:not([hidden]) {\n          /*\n\t       * Remove grid-row and grid-column from every element that comes after\n\t       * the first not-hidden element\n\t       */\n          grid-row: unset;\n          grid-column: unset;\n        }\n      `];\n  }\n}\ncustomElements.define(\"hui-grid-card\", HuiGridCard);","map":{"version":3,"names":["css","computeCardSize","HuiStackCard","DEFAULT_COLUMNS","SQUARE_ROW_HEIGHTS_BY_COLUMNS","HuiGridCard","getConfigElement","document","createElement","getCardSize","_cards","_config","square","rowHeight","columns","length","title","promises","element","push","cardSizes","Promise","all","totalHeight","start","Math","max","slice","_this$_config","_this$_config2","setConfig","config","style","setProperty","String","setAttribute","removeAttribute","styles","sharedStyles","customElements","define"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/cards/hui-grid-card.ts"],"sourcesContent":["import { css, CSSResultGroup } from \"lit\";\nimport { computeCardSize } from \"../common/compute-card-size\";\nimport { LovelaceCardEditor } from \"../types\";\nimport { HuiStackCard } from \"./hui-stack-card\";\nimport { GridCardConfig } from \"./types\";\n\nexport const DEFAULT_COLUMNS = 3;\nconst SQUARE_ROW_HEIGHTS_BY_COLUMNS = {\n  1: 5,\n  2: 3,\n  3: 2,\n};\n\nclass HuiGridCard extends HuiStackCard<GridCardConfig> {\n  public static async getConfigElement(): Promise<LovelaceCardEditor> {\n    await import(\"../editor/config-elements/hui-grid-card-editor\");\n    return document.createElement(\"hui-grid-card-editor\");\n  }\n\n  public async getCardSize(): Promise<number> {\n    if (!this._cards || !this._config) {\n      return 0;\n    }\n\n    if (this.square) {\n      const rowHeight = SQUARE_ROW_HEIGHTS_BY_COLUMNS[this.columns] || 1;\n      return (\n        (this._cards.length < this.columns\n          ? rowHeight\n          : (this._cards.length / this.columns) * rowHeight) +\n        (this._config.title ? 1 : 0)\n      );\n    }\n\n    const promises: Array<Promise<number> | number> = [];\n\n    for (const element of this._cards) {\n      promises.push(computeCardSize(element));\n    }\n\n    const cardSizes = await Promise.all(promises);\n\n    let totalHeight = this._config.title ? 1 : 0;\n\n    // Each column will adjust to max card size of it's row\n    for (let start = 0; start < cardSizes.length; start += this.columns) {\n      totalHeight += Math.max(...cardSizes.slice(start, start + this.columns));\n    }\n\n    return totalHeight;\n  }\n\n  get columns() {\n    return this._config?.columns || DEFAULT_COLUMNS;\n  }\n\n  get square() {\n    return this._config?.square !== false;\n  }\n\n  setConfig(config: GridCardConfig) {\n    super.setConfig(config);\n    this.style.setProperty(\"--grid-card-column-count\", String(this.columns));\n    if (this.square) {\n      this.setAttribute(\"square\", \"\");\n    } else {\n      this.removeAttribute(\"square\");\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      super.sharedStyles,\n      css`\n        #root {\n          display: grid;\n          grid-template-columns: repeat(\n            var(--grid-card-column-count, ${DEFAULT_COLUMNS}),\n            minmax(0, 1fr)\n          );\n          grid-gap: var(--grid-card-gap, 8px);\n        }\n        :host([square]) #root {\n          grid-auto-rows: 1fr;\n        }\n        :host([square]) #root::before {\n          content: \"\";\n          width: 0;\n          padding-bottom: 100%;\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n\n        :host([square]) #root > *:not([hidden]) {\n          grid-row: 1 / 1;\n          grid-column: 1 / 1;\n        }\n        :host([square]) #root > *:not([hidden]) ~ *:not([hidden]) {\n          /*\n\t       * Remove grid-row and grid-column from every element that comes after\n\t       * the first not-hidden element\n\t       */\n          grid-row: unset;\n          grid-column: unset;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-grid-card\": HuiGridCard;\n  }\n}\n\ncustomElements.define(\"hui-grid-card\", HuiGridCard);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}