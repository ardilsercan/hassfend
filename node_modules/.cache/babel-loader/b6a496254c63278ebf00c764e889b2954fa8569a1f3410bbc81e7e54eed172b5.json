{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport { fetchClustersForZhaDevice } from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { computeClusterKey } from \"./functions\";\nimport \"./zha-cluster-attributes\";\nimport \"./zha-cluster-commands\";\nconst tabs = [\"attributes\", \"commands\"];\nexport let ZHAManageClusters = _decorate([customElement(\"zha-manage-clusters\")], function (_initialize, _LitElement) {\n  class ZHAManageClusters extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: ZHAManageClusters,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"device\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_selectedClusterIndex\",\n      value() {\n        return -1;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_clusters\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_selectedCluster\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_currTab\",\n      value() {\n        return \"attributes\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_clustersLoaded\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(ZHAManageClusters.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (!this.device) {\n          return;\n        }\n        if (!tabs.includes(this._currTab)) {\n          this._currTab = tabs[0];\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        if (changedProperties.has(\"device\")) {\n          this._clusters = [];\n          this._selectedClusterIndex = -1;\n          this._clustersLoaded = false;\n          this._fetchClustersForZhaDevice();\n        }\n        _get(_getPrototypeOf(ZHAManageClusters.prototype), \"updated\", this).call(this, changedProperties);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.device || !this._clustersLoaded) {\n          return nothing;\n        }\n        return html`\n      <ha-card class=\"content\">\n        <div class=\"node-picker\">\n          <ha-select\n            .label=${this.hass.localize(\"ui.panel.config.zha.common.clusters\")}\n            class=\"menu\"\n            .value=${String(this._selectedClusterIndex)}\n            @selected=${this._selectedClusterChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this._clusters.map((entry, idx) => html`\n                <mwc-list-item .value=${String(idx)}\n                  >${computeClusterKey(entry)}</mwc-list-item\n                >\n              `)}\n          </ha-select>\n        </div>\n        ${this._selectedCluster ? html`\n              <mwc-tab-bar\n                .activeIndex=${tabs.indexOf(this._currTab)}\n                @MDCTabBar:activated=${this._handleTabChanged}\n              >\n                ${tabs.map(tab => html`\n                    <mwc-tab\n                      .label=${this.hass.localize(`ui.panel.config.zha.clusters.tabs.${tab}`)}\n                    ></mwc-tab>\n                  `)}\n              </mwc-tab-bar>\n\n              <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n                ${cache(this._currTab === \"attributes\" ? html`\n                        <zha-cluster-attributes\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-attributes>\n                      ` : html`\n                        <zha-cluster-commands\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-commands>\n                      `)}\n              </div>\n            ` : \"\"}\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchClustersForZhaDevice\",\n      value: async function _fetchClustersForZhaDevice() {\n        if (this.hass) {\n          this._clusters = await fetchClustersForZhaDevice(this.hass, this.device.ieee);\n          this._clusters.sort((a, b) => a.name.localeCompare(b.name));\n          if (this._clusters.length > 0) {\n            this._selectedClusterIndex = 0;\n            this._selectedCluster = this._clusters[0];\n          }\n          this._clustersLoaded = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleTabChanged\",\n      value: function _handleTabChanged(ev) {\n        const newTab = tabs[ev.detail.index];\n        if (newTab === this._currTab) {\n          return;\n        }\n        this._currTab = newTab;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_selectedClusterChanged\",\n      value: function _selectedClusterChanged(event) {\n        this._selectedClusterIndex = Number(event.target.value);\n        this._selectedCluster = this._clusters[this._selectedClusterIndex];\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n        .header {\n          flex-grow: 1;\n        }\n        .node-picker {\n          align-items: center;\n          padding-bottom: 10px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","cache","stopPropagation","fetchClustersForZhaDevice","haStyle","computeClusterKey","tabs","ZHAManageClusters","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","device","includes","_currTab","updated","changedProperties","has","_clusters","_selectedClusterIndex","_clustersLoaded","_fetchClustersForZhaDevice","render","hass","localize","String","_selectedClusterChanged","map","entry","idx","_selectedCluster","indexOf","_handleTabChanged","tab","ieee","sort","a","b","name","localeCompare","length","ev","newTab","detail","index","event","Number","target","static","styles"],"sources":["/workspaces/frontend/src/panels/config/integrations/integration-panels/zha/zha-manage-clusters.ts"],"sourcesContent":["import \"@material/mwc-list/mwc-list-item\";\nimport \"@material/mwc-tab-bar/mwc-tab-bar\";\nimport \"@material/mwc-tab/mwc-tab\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { cache } from \"lit/directives/cache\";\nimport { stopPropagation } from \"../../../../../common/dom/stop_propagation\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-select\";\nimport {\n  Cluster,\n  fetchClustersForZhaDevice,\n  ZHADevice,\n} from \"../../../../../data/zha\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { computeClusterKey } from \"./functions\";\nimport \"./zha-cluster-attributes\";\nimport \"./zha-cluster-commands\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"zha-cluster-selected\": {\n      cluster?: Cluster;\n    };\n  }\n}\n\nconst tabs = [\"attributes\", \"commands\"] as const;\n\n@customElement(\"zha-manage-clusters\")\nexport class ZHAManageClusters extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property({ attribute: false }) public device?: ZHADevice;\n\n  @state() private _selectedClusterIndex = -1;\n\n  @state() private _clusters: Cluster[] = [];\n\n  @state() private _selectedCluster?: Cluster;\n\n  @state() private _currTab: (typeof tabs)[number] = \"attributes\";\n\n  @state() private _clustersLoaded = false;\n\n  protected willUpdate(changedProps: PropertyValues) {\n    super.willUpdate(changedProps);\n    if (!this.device) {\n      return;\n    }\n    if (!tabs.includes(this._currTab)) {\n      this._currTab = tabs[0];\n    }\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    if (changedProperties.has(\"device\")) {\n      this._clusters = [];\n      this._selectedClusterIndex = -1;\n      this._clustersLoaded = false;\n      this._fetchClustersForZhaDevice();\n    }\n    super.updated(changedProperties);\n  }\n\n  protected render() {\n    if (!this.device || !this._clustersLoaded) {\n      return nothing;\n    }\n    return html`\n      <ha-card class=\"content\">\n        <div class=\"node-picker\">\n          <ha-select\n            .label=${this.hass!.localize(\"ui.panel.config.zha.common.clusters\")}\n            class=\"menu\"\n            .value=${String(this._selectedClusterIndex)}\n            @selected=${this._selectedClusterChanged}\n            @closed=${stopPropagation}\n            fixedMenuPosition\n            naturalMenuWidth\n          >\n            ${this._clusters.map(\n              (entry, idx) => html`\n                <mwc-list-item .value=${String(idx)}\n                  >${computeClusterKey(entry)}</mwc-list-item\n                >\n              `\n            )}\n          </ha-select>\n        </div>\n        ${this._selectedCluster\n          ? html`\n              <mwc-tab-bar\n                .activeIndex=${tabs.indexOf(this._currTab)}\n                @MDCTabBar:activated=${this._handleTabChanged}\n              >\n                ${tabs.map(\n                  (tab) => html`\n                    <mwc-tab\n                      .label=${this.hass.localize(\n                        `ui.panel.config.zha.clusters.tabs.${tab}`\n                      )}\n                    ></mwc-tab>\n                  `\n                )}\n              </mwc-tab-bar>\n\n              <div class=\"content\" tabindex=\"-1\" dialogInitialFocus>\n                ${cache(\n                  this._currTab === \"attributes\"\n                    ? html`\n                        <zha-cluster-attributes\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-attributes>\n                      `\n                    : html`\n                        <zha-cluster-commands\n                          .hass=${this.hass}\n                          .device=${this.device}\n                          .selectedCluster=${this._selectedCluster}\n                        ></zha-cluster-commands>\n                      `\n                )}\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  private async _fetchClustersForZhaDevice(): Promise<void> {\n    if (this.hass) {\n      this._clusters = await fetchClustersForZhaDevice(\n        this.hass,\n        this.device!.ieee\n      );\n      this._clusters.sort((a, b) => a.name.localeCompare(b.name));\n      if (this._clusters.length > 0) {\n        this._selectedClusterIndex = 0;\n        this._selectedCluster = this._clusters[0];\n      }\n      this._clustersLoaded = true;\n    }\n  }\n\n  private _handleTabChanged(ev: CustomEvent): void {\n    const newTab = tabs[ev.detail.index];\n    if (newTab === this._currTab) {\n      return;\n    }\n    this._currTab = newTab;\n  }\n\n  private _selectedClusterChanged(event): void {\n    this._selectedClusterIndex = Number(event.target!.value);\n    this._selectedCluster = this._clusters[this._selectedClusterIndex];\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-select {\n          margin-top: 16px;\n        }\n        .menu {\n          width: 100%;\n        }\n        .header {\n          flex-grow: 1;\n        }\n        .node-picker {\n          align-items: center;\n          padding-bottom: 10px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-manage-clusters\": ZHAManageClusters;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}