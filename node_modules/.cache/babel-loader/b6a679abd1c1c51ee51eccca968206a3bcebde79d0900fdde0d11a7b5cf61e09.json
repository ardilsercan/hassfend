{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { getEntityDefaultButtonAction } from \"../../cards/hui-button-card\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\nconst cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  entity: optional(string()),\n  name: optional(string()),\n  show_name: optional(boolean()),\n  icon: optional(string()),\n  show_icon: optional(boolean()),\n  icon_height: optional(string()),\n  tap_action: optional(actionConfigStruct),\n  hold_action: optional(actionConfigStruct),\n  theme: optional(string()),\n  show_state: optional(boolean())\n}));\nexport let HuiButtonCardEditor = _decorate([customElement(\"hui-button-card-editor\")], function (_initialize, _LitElement) {\n  class HuiButtonCardEditor extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiButtonCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne(entityId => [{\n          name: \"entity\",\n          selector: {\n            entity: {}\n          }\n        }, {\n          name: \"\",\n          type: \"grid\",\n          schema: [{\n            name: \"name\",\n            selector: {\n              text: {}\n            }\n          }, {\n            name: \"icon\",\n            selector: {\n              icon: {}\n            },\n            context: {\n              icon_entity: \"entity\"\n            }\n          }]\n        }, {\n          name: \"\",\n          type: \"grid\",\n          column_min_width: \"100px\",\n          schema: [{\n            name: \"show_name\",\n            selector: {\n              boolean: {}\n            }\n          }, {\n            name: \"show_state\",\n            selector: {\n              boolean: {}\n            }\n          }, {\n            name: \"show_icon\",\n            selector: {\n              boolean: {}\n            }\n          }]\n        }, {\n          name: \"\",\n          type: \"grid\",\n          schema: [{\n            name: \"icon_height\",\n            selector: {\n              text: {\n                suffix: \"px\"\n              }\n            }\n          }, {\n            name: \"theme\",\n            selector: {\n              theme: {}\n            }\n          }]\n        }, {\n          name: \"tap_action\",\n          selector: {\n            ui_action: {\n              default_action: getEntityDefaultButtonAction(entityId)\n            }\n          }\n        }, {\n          name: \"hold_action\",\n          selector: {\n            ui_action: {\n              default_action: \"more-info\"\n            }\n          }\n        }]);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _data$icon_height;\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        const data = {\n          show_name: true,\n          show_icon: true,\n          ...this._config\n        };\n        if ((_data$icon_height = data.icon_height) !== null && _data$icon_height !== void 0 && _data$icon_height.includes(\"px\")) {\n          data.icon_height = String(parseFloat(data.icon_height));\n        }\n        const schema = this._schema(this._config.entity);\n        return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        .computeHelper=${this._computeHelperCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const config = ev.detail.value;\n        if (config.icon_height && !config.icon_height.endsWith(\"px\")) {\n          config.icon_height += \"px\";\n        }\n        fireEvent(this, \"config-changed\", {\n          config\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeHelperCallback\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"tap_action\":\n            case \"hold_action\":\n              return this.hass.localize(\"ui.panel.lovelace.editor.card.button.default_action_help\");\n            default:\n              return undefined;\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value() {\n        return schema => {\n          switch (schema.name) {\n            case \"theme\":\n            case \"tap_action\":\n            case \"hold_action\":\n              return `${this.hass.localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`)} (${this.hass.localize(\"ui.panel.lovelace.editor.card.config.optional\")})`;\n            default:\n              return this.hass.localize(`ui.panel.lovelace.editor.card.generic.${schema.name}`);\n          }\n        };\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return configElementStyle;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","nothing","customElement","property","state","memoizeOne","assert","assign","boolean","object","optional","string","fireEvent","getEntityDefaultButtonAction","actionConfigStruct","baseLovelaceCardConfig","configElementStyle","cardConfigStruct","entity","name","show_name","icon","show_icon","icon_height","tap_action","hold_action","theme","show_state","HuiButtonCardEditor","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","entityId","selector","type","schema","text","context","icon_entity","column_min_width","suffix","ui_action","default_action","render","_data$icon_height","hass","data","includes","String","parseFloat","_schema","_computeLabelCallback","_computeHelperCallback","_valueChanged","ev","detail","endsWith","localize","undefined","static"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/config-elements/hui-button-card-editor.ts"],"sourcesContent":["import { CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { assert, assign, boolean, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type {\n  HaFormSchema,\n  SchemaUnion,\n} from \"../../../../components/ha-form/types\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport { getEntityDefaultButtonAction } from \"../../cards/hui-button-card\";\nimport type { ButtonCardConfig } from \"../../cards/types\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    show_name: optional(boolean()),\n    icon: optional(string()),\n    show_icon: optional(boolean()),\n    icon_height: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    theme: optional(string()),\n    show_state: optional(boolean()),\n  })\n);\n\n@customElement(\"hui-button-card-editor\")\nexport class HuiButtonCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ButtonCardConfig;\n\n  public setConfig(config: ButtonCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  private _schema = memoizeOne(\n    (entityId: string | undefined) =>\n      [\n        { name: \"entity\", selector: { entity: {} } },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            {\n              name: \"icon\",\n              selector: {\n                icon: {},\n              },\n              context: {\n                icon_entity: \"entity\",\n              },\n            },\n          ],\n        },\n        {\n          name: \"\",\n          type: \"grid\",\n          column_min_width: \"100px\",\n          schema: [\n            { name: \"show_name\", selector: { boolean: {} } },\n            { name: \"show_state\", selector: { boolean: {} } },\n            { name: \"show_icon\", selector: { boolean: {} } },\n          ],\n        },\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            { name: \"icon_height\", selector: { text: { suffix: \"px\" } } },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n        {\n          name: \"tap_action\",\n          selector: {\n            ui_action: {\n              default_action: getEntityDefaultButtonAction(entityId),\n            },\n          },\n        },\n        {\n          name: \"hold_action\",\n          selector: {\n            ui_action: {\n              default_action: \"more-info\",\n            },\n          },\n        },\n      ] as const satisfies readonly HaFormSchema[]\n  );\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n\n    const data = {\n      show_name: true,\n      show_icon: true,\n      ...this._config,\n    };\n\n    if (data.icon_height?.includes(\"px\")) {\n      data.icon_height = String(parseFloat(data.icon_height));\n    }\n\n    const schema = this._schema(this._config.entity);\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        .computeHelper=${this._computeHelperCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    const config = ev.detail.value;\n\n    if (config.icon_height && !config.icon_height.endsWith(\"px\")) {\n      config.icon_height += \"px\";\n    }\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeHelperCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"tap_action\":\n      case \"hold_action\":\n        return this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.button.default_action_help\"\n        );\n      default:\n        return undefined;\n    }\n  };\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    switch (schema.name) {\n      case \"theme\":\n      case \"tap_action\":\n      case \"hold_action\":\n        return `${this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        )} (${this.hass!.localize(\n          \"ui.panel.lovelace.editor.card.config.optional\"\n        )})`;\n      default:\n        return this.hass!.localize(\n          `ui.panel.lovelace.editor.card.generic.${schema.name}`\n        );\n    }\n  };\n\n  static styles: CSSResultGroup = configElementStyle;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-button-card-editor\": HuiButtonCardEditor;\n  }\n}\n"],"mappings":";AAAA,SAAyBA,IAAI,EAAEC,UAAU,EAAEC,OAAO,QAAQ,KAAK;AAC/D,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,QAAQ,gBAAgB;AAC/D,OAAOC,UAAU,MAAM,aAAa;AACpC,SAASC,MAAM,EAAEC,MAAM,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,aAAa;AAC/E,SAASC,SAAS,QAAQ,mCAAmC;AAC7D,OAAO,wCAAwC;AAM/C,SAASC,4BAA4B,QAAQ,6BAA6B;AAG1E,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D,SAASC,sBAAsB,QAAQ,6BAA6B;AACpE,SAASC,kBAAkB,QAAQ,yBAAyB;AAE5D,MAAMC,gBAAgB,GAAGV,MAAM,CAC7BQ,sBAAsB,EACtBN,MAAM,CAAC;EACLS,MAAM,EAAER,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EAC1BQ,IAAI,EAAET,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACxBS,SAAS,EAAEV,QAAQ,CAACF,OAAO,CAAC,CAAC,CAAC;EAC9Ba,IAAI,EAAEX,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACxBW,SAAS,EAAEZ,QAAQ,CAACF,OAAO,CAAC,CAAC,CAAC;EAC9Be,WAAW,EAAEb,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EAC/Ba,UAAU,EAAEd,QAAQ,CAACI,kBAAkB,CAAC;EACxCW,WAAW,EAAEf,QAAQ,CAACI,kBAAkB,CAAC;EACzCY,KAAK,EAAEhB,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;EACzBgB,UAAU,EAAEjB,QAAQ,CAACF,OAAO,CAAC,CAAC;AAChC,CAAC,CACH,CAAC;AAED,WACaoB,mBAAmB,GAAAC,SAAA,EAD/B3B,aAAa,CAAC,wBAAwB,CAAC,aAAA4B,WAAA,EAAAC,WAAA;EAAxC,MACaH,mBAAmB,SAAAG,WAAA,CAGhC;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA4IA;EAAC;IAAAI,CAAA,EA/IYN,mBAAmB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAI7BlC,QAAQ,CAAC;QAAEmC,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BjC,KAAK,CAAC,CAAC;MAAAmC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAER,SAAAC,UAAiBC,MAAwB,EAAQ;QAC/CpC,MAAM,CAACoC,MAAM,EAAEzB,gBAAgB,CAAC;QAChC,IAAI,CAAC0B,OAAO,GAAGD,MAAM;MACvB;IAAC;MAAAN,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAEiBnC,UAAU,CACzBuC,QAA4B,IAC3B,CACE;UAAEzB,IAAI,EAAE,QAAQ;UAAE0B,QAAQ,EAAE;YAAE3B,MAAM,EAAE,CAAC;UAAE;QAAE,CAAC,EAC5C;UACEC,IAAI,EAAE,EAAE;UACR2B,IAAI,EAAE,MAAM;UACZC,MAAM,EAAE,CACN;YAAE5B,IAAI,EAAE,MAAM;YAAE0B,QAAQ,EAAE;cAAEG,IAAI,EAAE,CAAC;YAAE;UAAE,CAAC,EACxC;YACE7B,IAAI,EAAE,MAAM;YACZ0B,QAAQ,EAAE;cACRxB,IAAI,EAAE,CAAC;YACT,CAAC;YACD4B,OAAO,EAAE;cACPC,WAAW,EAAE;YACf;UACF,CAAC;QAEL,CAAC,EACD;UACE/B,IAAI,EAAE,EAAE;UACR2B,IAAI,EAAE,MAAM;UACZK,gBAAgB,EAAE,OAAO;UACzBJ,MAAM,EAAE,CACN;YAAE5B,IAAI,EAAE,WAAW;YAAE0B,QAAQ,EAAE;cAAErC,OAAO,EAAE,CAAC;YAAE;UAAE,CAAC,EAChD;YAAEW,IAAI,EAAE,YAAY;YAAE0B,QAAQ,EAAE;cAAErC,OAAO,EAAE,CAAC;YAAE;UAAE,CAAC,EACjD;YAAEW,IAAI,EAAE,WAAW;YAAE0B,QAAQ,EAAE;cAAErC,OAAO,EAAE,CAAC;YAAE;UAAE,CAAC;QAEpD,CAAC,EACD;UACEW,IAAI,EAAE,EAAE;UACR2B,IAAI,EAAE,MAAM;UACZC,MAAM,EAAE,CACN;YAAE5B,IAAI,EAAE,aAAa;YAAE0B,QAAQ,EAAE;cAAEG,IAAI,EAAE;gBAAEI,MAAM,EAAE;cAAK;YAAE;UAAE,CAAC,EAC7D;YAAEjC,IAAI,EAAE,OAAO;YAAE0B,QAAQ,EAAE;cAAEnB,KAAK,EAAE,CAAC;YAAE;UAAE,CAAC;QAE9C,CAAC,EACD;UACEP,IAAI,EAAE,YAAY;UAClB0B,QAAQ,EAAE;YACRQ,SAAS,EAAE;cACTC,cAAc,EAAEzC,4BAA4B,CAAC+B,QAAQ;YACvD;UACF;QACF,CAAC,EACD;UACEzB,IAAI,EAAE,aAAa;UACnB0B,QAAQ,EAAE;YACRQ,SAAS,EAAE;cACTC,cAAc,EAAE;YAClB;UACF;QACF,CAAC,CAEP,CAAC;MAAA;IAAA;MAAAlB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAe,OAAA,EAAmB;QAAA,IAAAC,iBAAA;QACjB,IAAI,CAAC,IAAI,CAACC,IAAI,IAAI,CAAC,IAAI,CAACd,OAAO,EAAE;UAC/B,OAAO1C,OAAO;QAChB;QAEA,MAAMyD,IAAI,GAAG;UACXtC,SAAS,EAAE,IAAI;UACfE,SAAS,EAAE,IAAI;UACf,GAAG,IAAI,CAACqB;QACV,CAAC;QAED,KAAAa,iBAAA,GAAIE,IAAI,CAACnC,WAAW,cAAAiC,iBAAA,eAAhBA,iBAAA,CAAkBG,QAAQ,CAAC,IAAI,CAAC,EAAE;UACpCD,IAAI,CAACnC,WAAW,GAAGqC,MAAM,CAACC,UAAU,CAACH,IAAI,CAACnC,WAAW,CAAC,CAAC;QACzD;QAEA,MAAMwB,MAAM,GAAG,IAAI,CAACe,OAAO,CAAC,IAAI,CAACnB,OAAO,CAACzB,MAAM,CAAC;QAEhD,OAAOnB,IAAK;AAChB;AACA,gBAAgB,IAAI,CAAC0D,IAAK;AAC1B,gBAAgBC,IAAK;AACrB,kBAAkBX,MAAO;AACzB,wBAAwB,IAAI,CAACgB,qBAAsB;AACnD,yBAAyB,IAAI,CAACC,sBAAuB;AACrD,yBAAyB,IAAI,CAACC,aAAc;AAC5C;AACA,KAAK;MACH;IAAC;MAAA7B,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAyB,cAAsBC,EAAe,EAAQ;QAC3C,MAAMxB,MAAM,GAAGwB,EAAE,CAACC,MAAM,CAAC3B,KAAK;QAE9B,IAAIE,MAAM,CAACnB,WAAW,IAAI,CAACmB,MAAM,CAACnB,WAAW,CAAC6C,QAAQ,CAAC,IAAI,CAAC,EAAE;UAC5D1B,MAAM,CAACnB,WAAW,IAAI,IAAI;QAC5B;QAEAX,SAAS,CAAC,IAAI,EAAE,gBAAgB,EAAE;UAAE8B;QAAO,CAAC,CAAC;MAC/C;IAAC;MAAAN,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAGCO,MAAoD,IACjD;UACH,QAAQA,MAAM,CAAC5B,IAAI;YACjB,KAAK,YAAY;YACjB,KAAK,aAAa;cAChB,OAAO,IAAI,CAACsC,IAAI,CAAEY,QAAQ,CACxB,0DACF,CAAC;YACH;cACE,OAAOC,SAAS;UACpB;QACF,CAAC;MAAA;IAAA;MAAAlC,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAGCO,MAAoD,IACjD;UACH,QAAQA,MAAM,CAAC5B,IAAI;YACjB,KAAK,OAAO;YACZ,KAAK,YAAY;YACjB,KAAK,aAAa;cAChB,OAAQ,GAAE,IAAI,CAACsC,IAAI,CAAEY,QAAQ,CAC1B,yCAAwCtB,MAAM,CAAC5B,IAAK,EACvD,CAAE,KAAI,IAAI,CAACsC,IAAI,CAAEY,QAAQ,CACvB,+CACF,CAAE,GAAE;YACN;cACE,OAAO,IAAI,CAACZ,IAAI,CAAEY,QAAQ,CACvB,yCAAwCtB,MAAM,CAAC5B,IAAK,EACvD,CAAC;UACL;QACF,CAAC;MAAA;IAAA;MAAAiB,IAAA;MAAAmC,MAAA;MAAAhC,GAAA;MAAAC,MAAA;QAAA,OAE+BxB,kBAAkB;MAAA;IAAA;EAAA;AAAA,GA7I1ChB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}