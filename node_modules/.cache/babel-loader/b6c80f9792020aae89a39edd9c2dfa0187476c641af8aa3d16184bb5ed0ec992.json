{"ast":null,"code":"import memoizeOne from \"memoize-one\";\nconst collator = memoizeOne(language => new Intl.Collator(language));\nconst caseInsensitiveCollator = memoizeOne(language => new Intl.Collator(language, {\n  sensitivity: \"accent\"\n}));\nconst fallbackStringCompare = (a, b) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n  return 0;\n};\nexport const stringCompare = (a, b, language = undefined) => {\n  var _Intl;\n  // @ts-ignore\n  if ((_Intl = Intl) !== null && _Intl !== void 0 && _Intl.Collator) {\n    return collator(language).compare(a, b);\n  }\n  return fallbackStringCompare(a, b);\n};\nexport const caseInsensitiveStringCompare = (a, b, language = undefined) => {\n  var _Intl2;\n  // @ts-ignore\n  if ((_Intl2 = Intl) !== null && _Intl2 !== void 0 && _Intl2.Collator) {\n    return caseInsensitiveCollator(language).compare(a, b);\n  }\n  return fallbackStringCompare(a.toLowerCase(), b.toLowerCase());\n};","map":{"version":3,"names":["memoizeOne","collator","language","Intl","Collator","caseInsensitiveCollator","sensitivity","fallbackStringCompare","a","b","stringCompare","undefined","_Intl","compare","caseInsensitiveStringCompare","_Intl2","toLowerCase"],"sources":["/workspaces/frontend/src/common/string/compare.ts"],"sourcesContent":["import memoizeOne from \"memoize-one\";\n\nconst collator = memoizeOne(\n  (language: string | undefined) => new Intl.Collator(language)\n);\n\nconst caseInsensitiveCollator = memoizeOne(\n  (language: string | undefined) =>\n    new Intl.Collator(language, { sensitivity: \"accent\" })\n);\n\nconst fallbackStringCompare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const stringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return collator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a, b);\n};\n\nexport const caseInsensitiveStringCompare = (\n  a: string,\n  b: string,\n  language: string | undefined = undefined\n) => {\n  // @ts-ignore\n  if (Intl?.Collator) {\n    return caseInsensitiveCollator(language).compare(a, b);\n  }\n\n  return fallbackStringCompare(a.toLowerCase(), b.toLowerCase());\n};\n"],"mappings":"AAAA,OAAOA,UAAU,MAAM,aAAa;AAEpC,MAAMC,QAAQ,GAAGD,UAAU,CACxBE,QAA4B,IAAK,IAAIC,IAAI,CAACC,QAAQ,CAACF,QAAQ,CAC9D,CAAC;AAED,MAAMG,uBAAuB,GAAGL,UAAU,CACvCE,QAA4B,IAC3B,IAAIC,IAAI,CAACC,QAAQ,CAACF,QAAQ,EAAE;EAAEI,WAAW,EAAE;AAAS,CAAC,CACzD,CAAC;AAED,MAAMC,qBAAqB,GAAGA,CAACC,CAAS,EAAEC,CAAS,KAAK;EACtD,IAAID,CAAC,GAAGC,CAAC,EAAE;IACT,OAAO,CAAC,CAAC;EACX;EACA,IAAID,CAAC,GAAGC,CAAC,EAAE;IACT,OAAO,CAAC;EACV;EAEA,OAAO,CAAC;AACV,CAAC;AAED,OAAO,MAAMC,aAAa,GAAGA,CAC3BF,CAAS,EACTC,CAAS,EACTP,QAA4B,GAAGS,SAAS,KACrC;EAAA,IAAAC,KAAA;EACH;EACA,KAAAA,KAAA,GAAIT,IAAI,cAAAS,KAAA,eAAJA,KAAA,CAAMR,QAAQ,EAAE;IAClB,OAAOH,QAAQ,CAACC,QAAQ,CAAC,CAACW,OAAO,CAACL,CAAC,EAAEC,CAAC,CAAC;EACzC;EAEA,OAAOF,qBAAqB,CAACC,CAAC,EAAEC,CAAC,CAAC;AACpC,CAAC;AAED,OAAO,MAAMK,4BAA4B,GAAGA,CAC1CN,CAAS,EACTC,CAAS,EACTP,QAA4B,GAAGS,SAAS,KACrC;EAAA,IAAAI,MAAA;EACH;EACA,KAAAA,MAAA,GAAIZ,IAAI,cAAAY,MAAA,eAAJA,MAAA,CAAMX,QAAQ,EAAE;IAClB,OAAOC,uBAAuB,CAACH,QAAQ,CAAC,CAACW,OAAO,CAACL,CAAC,EAAEC,CAAC,CAAC;EACxD;EAEA,OAAOF,qBAAqB,CAACC,CAAC,CAACQ,WAAW,CAAC,CAAC,EAAEP,CAAC,CAACO,WAAW,CAAC,CAAC,CAAC;AAChE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}