{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nconst ADDITIONAL_PREFERENCES = [\"usage\", \"statistics\"];\nexport let HaAnalytics = _decorate([customElement(\"ha-analytics\")], function (_initialize, _LitElement) {\n  class HaAnalytics extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaAnalytics,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"localize\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"analytics\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"translation_key_panel\"\n      })],\n      key: \"translationKeyPanel\",\n      value() {\n        return \"config\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$analytics2;\n        const loading = this.analytics === undefined;\n        const baseEnabled = !loading && this.analytics.preferences.base;\n        return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\">\n          ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.base.title`)}\n        </span>\n        <span slot=\"description\" data-for=\"base\">\n          ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.base.description`)}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(preference => {\n          var _this$analytics;\n          return html`\n          <ha-settings-row>\n            <span slot=\"heading\" data-for=${preference}>\n              ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.title`)}\n            </span>\n            <span slot=\"description\" data-for=${preference}>\n              ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.description`)}\n            </span>\n            <span>\n              <ha-switch\n                @change=${this._handleRowClick}\n                .checked=${(_this$analytics = this.analytics) === null || _this$analytics === void 0 ? void 0 : _this$analytics.preferences[preference]}\n                .preference=${preference}\n                name=${preference}\n              >\n              </ha-switch>\n              ${!baseEnabled ? html`\n                    <simple-tooltip animation-delay=\"0\" position=\"right\">\n                      ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.need_base_enabled`)}\n                    </simple-tooltip>\n                  ` : \"\"}\n            </span>\n          </ha-settings-row>\n        `;\n        })}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\">\n          ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.title`)}\n        </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          ${this.localize(`ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.description`)}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${(_this$analytics2 = this.analytics) === null || _this$analytics2 === void 0 ? void 0 : _this$analytics2.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        _get(_getPrototypeOf(HaAnalytics.prototype), \"updated\", this).call(this, changedProps);\n        this.shadowRoot.querySelectorAll(\"*[data-for]\").forEach(el => {\n          const forEl = el.dataset.for;\n          delete el.dataset.for;\n          el.addEventListener(\"click\", () => {\n            const toFocus = this.shadowRoot.querySelector(`*[name=${forEl}]`);\n            if (toFocus) {\n              toFocus.focus();\n              toFocus.click();\n            }\n          });\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleRowClick\",\n      value: function _handleRowClick(ev) {\n        const target = ev.currentTarget;\n        const preference = target.preference;\n        const preferences = this.analytics ? {\n          ...this.analytics.preferences\n        } : {};\n        if (preferences[preference] === target.checked) {\n          return;\n        }\n        preferences[preference] = target.checked;\n        if (ADDITIONAL_PREFERENCES.some(entry => entry === preference) && target.checked) {\n          preferences.base = true;\n        } else if (preference === \"base\" && !target.checked) {\n          preferences.usage = false;\n          preferences.statistics = false;\n        }\n        fireEvent(this, \"analytics-preferences-changed\", {\n          preferences\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","fireEvent","haStyle","ADDITIONAL_PREFERENCES","HaAnalytics","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","render","_this$analytics2","loading","analytics","undefined","baseEnabled","preferences","base","localize","translationKeyPanel","_handleRowClick","map","preference","_this$analytics","diagnostics","updated","changedProps","_get","_getPrototypeOf","prototype","call","shadowRoot","querySelectorAll","forEach","el","forEl","dataset","for","addEventListener","toFocus","querySelector","focus","click","ev","target","currentTarget","checked","some","entry","usage","statistics","static","styles"],"sources":["/workspaces/frontend/src/components/ha-analytics.ts"],"sourcesContent":["import \"@lrnwebcomponents/simple-tooltip/simple-tooltip\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport type { Analytics, AnalyticsPreferences } from \"../data/analytics\";\nimport { haStyle } from \"../resources/styles\";\nimport \"./ha-settings-row\";\nimport \"./ha-switch\";\nimport type { HaSwitch } from \"./ha-switch\";\n\nconst ADDITIONAL_PREFERENCES = [\"usage\", \"statistics\"] as const;\n\ndeclare global {\n  interface HASSDomEvents {\n    \"analytics-preferences-changed\": { preferences: AnalyticsPreferences };\n  }\n}\n\n@customElement(\"ha-analytics\")\nexport class HaAnalytics extends LitElement {\n  @property({ attribute: false }) public localize!: LocalizeFunc;\n\n  @property({ attribute: false }) public analytics?: Analytics;\n\n  @property({ attribute: \"translation_key_panel\" }) public translationKeyPanel:\n    | \"page-onboarding\"\n    | \"config\" = \"config\";\n\n  protected render(): TemplateResult {\n    const loading = this.analytics === undefined;\n    const baseEnabled = !loading && this.analytics!.preferences.base;\n\n    return html`\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"base\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.base.title`\n          )}\n        </span>\n        <span slot=\"description\" data-for=\"base\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.base.description`\n          )}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${baseEnabled}\n          .preference=${\"base\"}\n          .disabled=${loading}\n          name=\"base\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n      ${ADDITIONAL_PREFERENCES.map(\n        (preference) => html`\n          <ha-settings-row>\n            <span slot=\"heading\" data-for=${preference}>\n              ${this.localize(\n                `ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.title`\n              )}\n            </span>\n            <span slot=\"description\" data-for=${preference}>\n              ${this.localize(\n                `ui.panel.${this.translationKeyPanel}.analytics.preferences.${preference}.description`\n              )}\n            </span>\n            <span>\n              <ha-switch\n                @change=${this._handleRowClick}\n                .checked=${this.analytics?.preferences[preference]}\n                .preference=${preference}\n                name=${preference}\n              >\n              </ha-switch>\n              ${!baseEnabled\n                ? html`\n                    <simple-tooltip animation-delay=\"0\" position=\"right\">\n                      ${this.localize(\n                        `ui.panel.${this.translationKeyPanel}.analytics.need_base_enabled`\n                      )}\n                    </simple-tooltip>\n                  `\n                : \"\"}\n            </span>\n          </ha-settings-row>\n        `\n      )}\n      <ha-settings-row>\n        <span slot=\"heading\" data-for=\"diagnostics\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.title`\n          )}\n        </span>\n        <span slot=\"description\" data-for=\"diagnostics\">\n          ${this.localize(\n            `ui.panel.${this.translationKeyPanel}.analytics.preferences.diagnostics.description`\n          )}\n        </span>\n        <ha-switch\n          @change=${this._handleRowClick}\n          .checked=${this.analytics?.preferences.diagnostics}\n          .preference=${\"diagnostics\"}\n          .disabled=${loading}\n          name=\"diagnostics\"\n        >\n        </ha-switch>\n      </ha-settings-row>\n    `;\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n\n    this.shadowRoot!.querySelectorAll(\"*[data-for]\").forEach((el) => {\n      const forEl = (el as HTMLElement).dataset.for;\n      delete (el as HTMLElement).dataset.for;\n\n      el.addEventListener(\"click\", () => {\n        const toFocus = this.shadowRoot!.querySelector(\n          `*[name=${forEl}]`\n        ) as HTMLElement | null;\n\n        if (toFocus) {\n          toFocus.focus();\n          toFocus.click();\n        }\n      });\n    });\n  }\n\n  private _handleRowClick(ev: Event) {\n    const target = ev.currentTarget as HaSwitch;\n    const preference = (target as any).preference;\n    const preferences = this.analytics ? { ...this.analytics.preferences } : {};\n\n    if (preferences[preference] === target.checked) {\n      return;\n    }\n\n    preferences[preference] = target.checked;\n\n    if (\n      ADDITIONAL_PREFERENCES.some((entry) => entry === preference) &&\n      target.checked\n    ) {\n      preferences.base = true;\n    } else if (preference === \"base\" && !target.checked) {\n      preferences.usage = false;\n      preferences.statistics = false;\n    }\n\n    fireEvent(this, \"analytics-preferences-changed\", { preferences });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        .error {\n          color: var(--error-color);\n        }\n\n        ha-settings-row {\n          padding: 0;\n        }\n\n        span[slot=\"heading\"],\n        span[slot=\"description\"] {\n          cursor: pointer;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-analytics\": HaAnalytics;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}