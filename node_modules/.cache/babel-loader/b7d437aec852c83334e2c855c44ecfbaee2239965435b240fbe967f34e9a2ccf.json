{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\nimport '@material/mwc-list/mwc-list.js';\nimport './mwc-menu-surface.js';\nimport { DefaultFocusState as DefaultFocusStateEnum } from '@material/menu/constants.js';\nimport MDCMenuFoundation from '@material/menu/foundation.js';\nimport { BaseElement } from '@material/mwc-base/base-element.js';\nimport { observer } from '@material/mwc-base/observer.js';\nimport { html } from 'lit';\nimport { property, query } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nexport { createSetFromIndex, isEventMulti, isIndexSet } from '@material/mwc-list/mwc-list-foundation.js';\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n * @fires opened\n * @fires closed\n */\nexport class MenuBase extends BaseElement {\n  constructor() {\n    super(...arguments);\n    this.mdcFoundationClass = MDCMenuFoundation;\n    this.listElement_ = null;\n    this.anchor = null;\n    this.open = false;\n    this.quick = false;\n    this.wrapFocus = false;\n    this.innerRole = 'menu';\n    this.innerAriaLabel = null;\n    this.corner = 'TOP_START';\n    this.x = null;\n    this.y = null;\n    this.absolute = false;\n    this.multi = false;\n    this.activatable = false;\n    this.fixed = false;\n    this.forceGroupSelection = false;\n    this.fullwidth = false;\n    this.menuCorner = 'START';\n    this.stayOpenOnBodyClick = false;\n    this.defaultFocus = 'LIST_ROOT';\n    this._listUpdateComplete = null;\n  }\n  get listElement() {\n    if (!this.listElement_) {\n      this.listElement_ = this.renderRoot.querySelector('mwc-list');\n      return this.listElement_;\n    }\n    return this.listElement_;\n  }\n  get items() {\n    const listElement = this.listElement;\n    if (listElement) {\n      return listElement.items;\n    }\n    return [];\n  }\n  get index() {\n    const listElement = this.listElement;\n    if (listElement) {\n      return listElement.index;\n    }\n    return -1;\n  }\n  get selected() {\n    const listElement = this.listElement;\n    if (listElement) {\n      return listElement.selected;\n    }\n    return null;\n  }\n  render() {\n    return this.renderSurface();\n  }\n  renderSurface() {\n    const classes = this.getSurfaceClasses();\n    return html`\n      <mwc-menu-surface\n        ?hidden=${!this.open}\n        .anchor=${this.anchor}\n        .open=${this.open}\n        .quick=${this.quick}\n        .corner=${this.corner}\n        .x=${this.x}\n        .y=${this.y}\n        .absolute=${this.absolute}\n        .fixed=${this.fixed}\n        .fullwidth=${this.fullwidth}\n        .menuCorner=${this.menuCorner}\n        ?stayOpenOnBodyClick=${this.stayOpenOnBodyClick}\n        class=${classMap(classes)}\n        @closed=${this.onClosed}\n        @opened=${this.onOpened}\n        @keydown=${this.onKeydown}>\n      ${this.renderList()}\n    </mwc-menu-surface>`;\n  }\n  getSurfaceClasses() {\n    return {\n      'mdc-menu': true,\n      'mdc-menu-surface': true\n    };\n  }\n  renderList() {\n    const itemRoles = this.innerRole === 'menu' ? 'menuitem' : 'option';\n    const classes = this.renderListClasses();\n    return html`\n      <mwc-list\n          rootTabbable\n          .innerAriaLabel=${this.innerAriaLabel}\n          .innerRole=${this.innerRole}\n          .multi=${this.multi}\n          class=${classMap(classes)}\n          .itemRoles=${itemRoles}\n          .wrapFocus=${this.wrapFocus}\n          .activatable=${this.activatable}\n          @action=${this.onAction}>\n        <slot></slot>\n      </mwc-list>`;\n  }\n  renderListClasses() {\n    return {\n      'mdc-deprecated-list': true\n    };\n  }\n  createAdapter() {\n    return {\n      addClassToElementAtIndex: (index, className) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n        if (!element) {\n          return;\n        }\n        if (className === 'mdc-menu-item--selected') {\n          if (this.forceGroupSelection && !element.selected) {\n            listElement.toggle(index, true);\n          }\n        } else {\n          element.classList.add(className);\n        }\n      },\n      removeClassFromElementAtIndex: (index, className) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n        if (!element) {\n          return;\n        }\n        if (className === 'mdc-menu-item--selected') {\n          if (element.selected) {\n            listElement.toggle(index, false);\n          }\n        } else {\n          element.classList.remove(className);\n        }\n      },\n      addAttributeToElementAtIndex: (index, attr, value) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n        if (!element) {\n          return;\n        }\n        element.setAttribute(attr, value);\n      },\n      removeAttributeFromElementAtIndex: (index, attr) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n        if (!element) {\n          return;\n        }\n        element.removeAttribute(attr);\n      },\n      getAttributeFromElementAtIndex: (index, attr) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return null;\n        }\n        const element = listElement.items[index];\n        if (!element) {\n          return null;\n        }\n        return element.getAttribute(attr);\n      },\n      elementContainsClass: (element, className) => element.classList.contains(className),\n      closeSurface: () => {\n        this.open = false;\n      },\n      getElementIndex: element => {\n        const listElement = this.listElement;\n        if (listElement) {\n          return listElement.items.indexOf(element);\n        }\n        return -1;\n      },\n      notifySelected: () => {},\n      getMenuItemCount: () => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return 0;\n        }\n        return listElement.items.length;\n      },\n      focusItemAtIndex: index => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n        if (element) {\n          element.focus();\n        }\n      },\n      focusListRoot: () => {\n        if (this.listElement) {\n          this.listElement.focus();\n        }\n      },\n      getSelectedSiblingOfItemAtIndex: index => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return -1;\n        }\n        const elementAtIndex = listElement.items[index];\n        if (!elementAtIndex || !elementAtIndex.group) {\n          return -1;\n        }\n        for (let i = 0; i < listElement.items.length; i++) {\n          if (i === index) {\n            continue;\n          }\n          const current = listElement.items[i];\n          if (current.selected && current.group === elementAtIndex.group) {\n            return i;\n          }\n        }\n        return -1;\n      },\n      isSelectableItemAtIndex: index => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return false;\n        }\n        const elementAtIndex = listElement.items[index];\n        if (!elementAtIndex) {\n          return false;\n        }\n        return elementAtIndex.hasAttribute('group');\n      }\n    };\n  }\n  onKeydown(evt) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleKeydown(evt);\n    }\n  }\n  onAction(evt) {\n    const listElement = this.listElement;\n    if (this.mdcFoundation && listElement) {\n      const index = evt.detail.index;\n      const el = listElement.items[index];\n      if (el) {\n        this.mdcFoundation.handleItemAction(el);\n      }\n    }\n  }\n  onOpened() {\n    this.open = true;\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleMenuSurfaceOpened();\n    }\n  }\n  onClosed() {\n    this.open = false;\n  }\n  // tslint:disable:ban-ts-ignore\n  async getUpdateComplete() {\n    await this._listUpdateComplete;\n    // @ts-ignore\n    const result = await super.getUpdateComplete();\n    return result;\n  }\n  // tslint:enable:ban-ts-ignore\n  async firstUpdated() {\n    super.firstUpdated();\n    const listElement = this.listElement;\n    if (listElement) {\n      this._listUpdateComplete = listElement.updateComplete;\n      await this._listUpdateComplete;\n    }\n  }\n  select(index) {\n    const listElement = this.listElement;\n    if (listElement) {\n      listElement.select(index);\n    }\n  }\n  close() {\n    this.open = false;\n  }\n  show() {\n    this.open = true;\n  }\n  getFocusedItemIndex() {\n    const listElement = this.listElement;\n    if (listElement) {\n      return listElement.getFocusedItemIndex();\n    }\n    return -1;\n  }\n  focusItemAtIndex(index) {\n    const listElement = this.listElement;\n    if (listElement) {\n      listElement.focusItemAtIndex(index);\n    }\n  }\n  layout(updateItems = true) {\n    const listElement = this.listElement;\n    if (listElement) {\n      listElement.layout(updateItems);\n    }\n  }\n}\n__decorate([query('.mdc-menu')], MenuBase.prototype, \"mdcRoot\", void 0);\n__decorate([query('slot')], MenuBase.prototype, \"slotElement\", void 0);\n__decorate([property({\n  type: Object\n})], MenuBase.prototype, \"anchor\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], MenuBase.prototype, \"open\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"quick\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"wrapFocus\", void 0);\n__decorate([property({\n  type: String\n})], MenuBase.prototype, \"innerRole\", void 0);\n__decorate([property({\n  type: String\n})], MenuBase.prototype, \"innerAriaLabel\", void 0);\n__decorate([property({\n  type: String\n})], MenuBase.prototype, \"corner\", void 0);\n__decorate([property({\n  type: Number\n})], MenuBase.prototype, \"x\", void 0);\n__decorate([property({\n  type: Number\n})], MenuBase.prototype, \"y\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"absolute\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"multi\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"activatable\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"fixed\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"forceGroupSelection\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"fullwidth\", void 0);\n__decorate([property({\n  type: String\n})], MenuBase.prototype, \"menuCorner\", void 0);\n__decorate([property({\n  type: Boolean\n})], MenuBase.prototype, \"stayOpenOnBodyClick\", void 0);\n__decorate([property({\n  type: String\n}), observer(function (value) {\n  if (this.mdcFoundation) {\n    this.mdcFoundation.setDefaultFocusState(DefaultFocusStateEnum[value]);\n  }\n})], MenuBase.prototype, \"defaultFocus\", void 0);","map":{"version":3,"names":["DefaultFocusState","DefaultFocusStateEnum","MDCMenuFoundation","BaseElement","observer","html","property","query","classMap","createSetFromIndex","isEventMulti","isIndexSet","MenuBase","constructor","mdcFoundationClass","listElement_","anchor","open","quick","wrapFocus","innerRole","innerAriaLabel","corner","x","y","absolute","multi","activatable","fixed","forceGroupSelection","fullwidth","menuCorner","stayOpenOnBodyClick","defaultFocus","_listUpdateComplete","listElement","renderRoot","querySelector","items","index","selected","render","renderSurface","classes","getSurfaceClasses","onClosed","onOpened","onKeydown","renderList","itemRoles","renderListClasses","onAction","createAdapter","addClassToElementAtIndex","className","element","toggle","classList","add","removeClassFromElementAtIndex","remove","addAttributeToElementAtIndex","attr","value","setAttribute","removeAttributeFromElementAtIndex","removeAttribute","getAttributeFromElementAtIndex","getAttribute","elementContainsClass","contains","closeSurface","getElementIndex","indexOf","notifySelected","getMenuItemCount","length","focusItemAtIndex","focus","focusListRoot","getSelectedSiblingOfItemAtIndex","elementAtIndex","group","i","current","isSelectableItemAtIndex","hasAttribute","evt","mdcFoundation","handleKeydown","detail","el","handleItemAction","handleMenuSurfaceOpened","getUpdateComplete","result","firstUpdated","updateComplete","select","close","show","getFocusedItemIndex","layout","updateItems","__decorate","type","Object","Boolean","reflect","String","Number","setDefaultFocusState"],"sources":["mwc-menu-base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// Style preference for leading underscores.\n// tslint:disable:strip-private-property-underscore\n\nimport '@material/mwc-list/mwc-list.js';\nimport './mwc-menu-surface.js';\n\nimport {MDCMenuAdapter} from '@material/menu/adapter.js';\nimport {DefaultFocusState as DefaultFocusStateEnum} from '@material/menu/constants.js';\nimport MDCMenuFoundation from '@material/menu/foundation.js';\nimport {BaseElement} from '@material/mwc-base/base-element.js';\nimport {observer} from '@material/mwc-base/observer.js';\nimport {ActionDetail} from '@material/mwc-list/mwc-list-foundation.js';\nimport {ListItemBase} from '@material/mwc-list/mwc-list-item-base.js';\nimport {List, MWCListIndex} from '@material/mwc-list/mwc-list.js';\nimport {html} from 'lit';\nimport {property, query} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\n\nimport {Corner, MenuCorner} from './mwc-menu-surface-base.js';\nimport {MenuSurface} from './mwc-menu-surface.js';\n\nexport {ActionDetail, createSetFromIndex, isEventMulti, isIndexSet, MWCListIndex, SelectedDetail} from '@material/mwc-list/mwc-list-foundation.js';\nexport {Corner, MenuCorner} from './mwc-menu-surface-base.js';\n\nexport type DefaultFocusState = keyof typeof DefaultFocusStateEnum;\n\n/**\n * @fires selected {SelectedDetail}\n * @fires action {ActionDetail}\n * @fires items-updated\n * @fires opened\n * @fires closed\n */\nexport abstract class MenuBase extends BaseElement {\n  protected mdcFoundation!: MDCMenuFoundation;\n\n  protected readonly mdcFoundationClass = MDCMenuFoundation;\n\n  protected listElement_: List|null = null;\n\n  @query('.mdc-menu') mdcRoot!: MenuSurface;\n\n  @query('slot') slotElement!: HTMLSlotElement|null;\n\n  @property({type: Object}) anchor: HTMLElement|null = null;\n\n  @property({type: Boolean, reflect: true}) open = false;\n\n  @property({type: Boolean}) quick = false;\n\n  @property({type: Boolean}) wrapFocus = false;\n\n  @property({type: String}) innerRole: 'menu'|'listbox' = 'menu';\n\n  @property({type: String}) innerAriaLabel: string|null = null;\n\n  @property({type: String}) corner: Corner = 'TOP_START';\n\n  @property({type: Number}) x: number|null = null;\n\n  @property({type: Number}) y: number|null = null;\n\n  @property({type: Boolean}) absolute = false;\n\n  @property({type: Boolean}) multi = false;\n\n  @property({type: Boolean}) activatable = false;\n\n  @property({type: Boolean}) fixed = false;\n\n  @property({type: Boolean}) forceGroupSelection = false;\n\n  @property({type: Boolean}) fullwidth = false;\n\n  @property({type: String}) menuCorner: MenuCorner = 'START';\n\n  @property({type: Boolean}) stayOpenOnBodyClick: boolean = false;\n\n  @property({type: String})\n  @observer(function(this: MenuBase, value: DefaultFocusState) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.setDefaultFocusState(DefaultFocusStateEnum[value]);\n    }\n  })\n  defaultFocus: DefaultFocusState = 'LIST_ROOT';\n\n  protected _listUpdateComplete: null|Promise<unknown> = null;\n\n  protected get listElement() {\n    if (!this.listElement_) {\n      this.listElement_ = this.renderRoot.querySelector('mwc-list');\n      return this.listElement_;\n    }\n\n    return this.listElement_;\n  }\n\n  get items(): ListItemBase[] {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      return listElement.items;\n    }\n\n    return [];\n  }\n\n  get index(): MWCListIndex {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      return listElement.index;\n    }\n\n    return -1;\n  }\n\n  get selected(): ListItemBase|ListItemBase[]|null {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      return listElement.selected;\n    }\n\n    return null;\n  }\n\n  override render() {\n    return this.renderSurface();\n  }\n\n  protected renderSurface() {\n    const classes = this.getSurfaceClasses();\n    return html`\n      <mwc-menu-surface\n        ?hidden=${!this.open}\n        .anchor=${this.anchor}\n        .open=${this.open}\n        .quick=${this.quick}\n        .corner=${this.corner}\n        .x=${this.x}\n        .y=${this.y}\n        .absolute=${this.absolute}\n        .fixed=${this.fixed}\n        .fullwidth=${this.fullwidth}\n        .menuCorner=${this.menuCorner}\n        ?stayOpenOnBodyClick=${this.stayOpenOnBodyClick}\n        class=${classMap(classes)}\n        @closed=${this.onClosed}\n        @opened=${this.onOpened}\n        @keydown=${this.onKeydown}>\n      ${this.renderList()}\n    </mwc-menu-surface>`;\n  }\n\n  protected getSurfaceClasses() {\n    return {\n      'mdc-menu': true,\n      'mdc-menu-surface': true,\n    };\n  }\n\n  protected renderList() {\n    const itemRoles = this.innerRole === 'menu' ? 'menuitem' : 'option';\n    const classes = this.renderListClasses();\n\n    return html`\n      <mwc-list\n          rootTabbable\n          .innerAriaLabel=${this.innerAriaLabel}\n          .innerRole=${this.innerRole}\n          .multi=${this.multi}\n          class=${classMap(classes)}\n          .itemRoles=${itemRoles}\n          .wrapFocus=${this.wrapFocus}\n          .activatable=${this.activatable}\n          @action=${this.onAction}>\n        <slot></slot>\n      </mwc-list>`;\n  }\n\n  protected renderListClasses() {\n    return {\n      'mdc-deprecated-list': true,\n    };\n  }\n\n  protected createAdapter(): MDCMenuAdapter {\n    return {\n      addClassToElementAtIndex: (index, className) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n\n        const element = listElement.items[index];\n\n        if (!element) {\n          return;\n        }\n\n        if (className === 'mdc-menu-item--selected') {\n          if (this.forceGroupSelection && !element.selected) {\n            listElement.toggle(index, true);\n          }\n        } else {\n          element.classList.add(className);\n        }\n      },\n      removeClassFromElementAtIndex: (index, className) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n\n        const element = listElement.items[index];\n\n        if (!element) {\n          return;\n        }\n\n        if (className === 'mdc-menu-item--selected') {\n          if (element.selected) {\n            listElement.toggle(index, false);\n          }\n        } else {\n          element.classList.remove(className);\n        }\n      },\n      addAttributeToElementAtIndex: (index, attr, value) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n\n        const element = listElement.items[index];\n\n        if (!element) {\n          return;\n        }\n\n        element.setAttribute(attr, value);\n      },\n      removeAttributeFromElementAtIndex: (index, attr) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n\n        const element = listElement.items[index];\n\n        if (!element) {\n          return;\n        }\n\n        element.removeAttribute(attr);\n      },\n      getAttributeFromElementAtIndex: (index, attr) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return null;\n        }\n\n        const element = listElement.items[index];\n\n        if (!element) {\n          return null;\n        }\n\n        return element.getAttribute(attr);\n      },\n      elementContainsClass: (element, className) =>\n          element.classList.contains(className),\n      closeSurface: () => {\n        this.open = false;\n      },\n      getElementIndex: (element) => {\n        const listElement = this.listElement;\n        if (listElement) {\n          return listElement.items.indexOf(element as ListItemBase);\n        }\n\n        return -1;\n      },\n      notifySelected: () => {/** handled by list */},\n      getMenuItemCount: () => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return 0;\n        }\n\n        return listElement.items.length;\n      },\n      focusItemAtIndex: (index) => {\n        const listElement = this.listElement;\n        if (!listElement) {\n          return;\n        }\n        const element = listElement.items[index];\n\n        if (element) {\n          (element as HTMLElement).focus();\n        }\n      },\n      focusListRoot: () => {\n        if (this.listElement) {\n          this.listElement.focus();\n        }\n      },\n      getSelectedSiblingOfItemAtIndex: (index) => {\n        const listElement = this.listElement;\n\n        if (!listElement) {\n          return -1;\n        }\n\n        const elementAtIndex = listElement.items[index];\n\n        if (!elementAtIndex || !elementAtIndex.group) {\n          return -1;\n        }\n\n        for (let i = 0; i < listElement.items.length; i++) {\n          if (i === index) {\n            continue;\n          }\n\n          const current = listElement.items[i];\n          if (current.selected && current.group === elementAtIndex.group) {\n            return i;\n          }\n        }\n\n        return -1;\n      },\n      isSelectableItemAtIndex: (index) => {\n        const listElement = this.listElement;\n\n        if (!listElement) {\n          return false;\n        }\n\n        const elementAtIndex = listElement.items[index];\n\n        if (!elementAtIndex) {\n          return false;\n        }\n\n        return elementAtIndex.hasAttribute('group');\n      },\n    };\n  }\n\n  protected onKeydown(evt: KeyboardEvent) {\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleKeydown(evt);\n    }\n  }\n\n  protected onAction(evt: CustomEvent<ActionDetail>) {\n    const listElement = this.listElement;\n    if (this.mdcFoundation && listElement) {\n      const index = evt.detail.index;\n\n      const el = listElement.items[index];\n\n      if (el) {\n        this.mdcFoundation.handleItemAction(el);\n      }\n    }\n  }\n\n  protected onOpened() {\n    this.open = true;\n\n    if (this.mdcFoundation) {\n      this.mdcFoundation.handleMenuSurfaceOpened();\n    }\n  }\n\n  protected onClosed() {\n    this.open = false;\n  }\n\n  // tslint:disable:ban-ts-ignore\n  protected override async getUpdateComplete() {\n    await this._listUpdateComplete;\n    // @ts-ignore\n    const result = await super.getUpdateComplete();\n    return result;\n  }\n  // tslint:enable:ban-ts-ignore\n\n  protected override async firstUpdated() {\n    super.firstUpdated();\n    const listElement = this.listElement;\n\n    if (listElement) {\n      this._listUpdateComplete = listElement.updateComplete;\n      await this._listUpdateComplete;\n    }\n  }\n\n  select(index: MWCListIndex) {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      listElement.select(index);\n    }\n  }\n\n  close() {\n    this.open = false;\n  }\n\n  show() {\n    this.open = true;\n  }\n\n  getFocusedItemIndex() {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      return listElement.getFocusedItemIndex();\n    }\n\n    return -1;\n  }\n\n  focusItemAtIndex(index: number) {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      listElement.focusItemAtIndex(index);\n    }\n  }\n\n  layout(updateItems = true) {\n    const listElement = this.listElement;\n\n    if (listElement) {\n      listElement.layout(updateItems);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}