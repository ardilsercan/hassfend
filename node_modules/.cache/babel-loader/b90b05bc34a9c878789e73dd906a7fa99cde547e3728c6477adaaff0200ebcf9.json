{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport { IronListAdapter } from './virtualizer-iron-list-adapter.js';\nexport var Virtualizer = /*#__PURE__*/function () {\n  /**\n   * @typedef {Object} VirtualizerConfig\n   * @property {Function} createElements Function that returns the given number of new elements\n   * @property {Function} updateElement Function that updates the element at a specific index\n   * @property {HTMLElement} scrollTarget Reference to the scrolling element\n   * @property {HTMLElement} scrollContainer Reference to a wrapper for the item elements (or a slot) inside the scrollTarget\n   * @property {HTMLElement | undefined} elementsContainer Reference to the container in which the item elements are placed, defaults to scrollContainer\n   * @property {boolean | undefined} reorderElements Determines whether the physical item elements should be kept in order in the DOM\n   * @param {VirtualizerConfig} config Configuration for the virtualizer\n   */\n  function Virtualizer(config) {\n    _classCallCheck(this, Virtualizer);\n    this.__adapter = new IronListAdapter(config);\n  }\n\n  /**\n   * Gets the index of the first visible item in the viewport.\n   *\n   * @return {number}\n   */\n  _createClass(Virtualizer, [{\n    key: \"firstVisibleIndex\",\n    get: function get() {\n      return this.__adapter.adjustedFirstVisibleIndex;\n    }\n\n    /**\n     * Gets the index of the last visible item in the viewport.\n     *\n     * @return {number}\n     */\n  }, {\n    key: \"lastVisibleIndex\",\n    get: function get() {\n      return this.__adapter.adjustedLastVisibleIndex;\n    }\n\n    /**\n     * The size of the virtualizer\n     * @return {number | undefined} The size of the virtualizer\n     */\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.__adapter.size;\n    }\n\n    /**\n     * The size of the virtualizer\n     * @param {number} size The size of the virtualizer\n     */,\n    set: function set(size) {\n      this.__adapter.size = size;\n    }\n\n    /**\n     * Scroll to a specific index in the virtual list\n     *\n     * @method scrollToIndex\n     * @param {number} index The index of the item\n     */\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(index) {\n      this.__adapter.scrollToIndex(index);\n    }\n\n    /**\n     * Requests the virtualizer to re-render the item elements on an index range, if currently in the DOM\n     *\n     * @method update\n     * @param {number | undefined} startIndex The start index of the range\n     * @param {number | undefined} endIndex The end index of the range\n     */\n  }, {\n    key: \"update\",\n    value: function update() {\n      var startIndex = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var endIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size - 1;\n      this.__adapter.update(startIndex, endIndex);\n    }\n\n    /**\n     * Flushes active asynchronous tasks so that the component and the DOM end up in a stable state\n     *\n     * @method update\n     * @param {number | undefined} startIndex The start index of the range\n     * @param {number | undefined} endIndex The end index of the range\n     */\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      this.__adapter.flush();\n    }\n  }]);\n  return Virtualizer;\n}();","map":{"version":3,"names":["IronListAdapter","Virtualizer","config","_classCallCheck","__adapter","_createClass","key","get","adjustedFirstVisibleIndex","adjustedLastVisibleIndex","size","set","value","scrollToIndex","index","update","startIndex","arguments","length","undefined","endIndex","flush"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/component-base/src/virtualizer.js"],"sourcesContent":["import { IronListAdapter } from './virtualizer-iron-list-adapter.js';\n\nexport class Virtualizer {\n  /**\n   * @typedef {Object} VirtualizerConfig\n   * @property {Function} createElements Function that returns the given number of new elements\n   * @property {Function} updateElement Function that updates the element at a specific index\n   * @property {HTMLElement} scrollTarget Reference to the scrolling element\n   * @property {HTMLElement} scrollContainer Reference to a wrapper for the item elements (or a slot) inside the scrollTarget\n   * @property {HTMLElement | undefined} elementsContainer Reference to the container in which the item elements are placed, defaults to scrollContainer\n   * @property {boolean | undefined} reorderElements Determines whether the physical item elements should be kept in order in the DOM\n   * @param {VirtualizerConfig} config Configuration for the virtualizer\n   */\n  constructor(config) {\n    this.__adapter = new IronListAdapter(config);\n  }\n\n  /**\n   * Gets the index of the first visible item in the viewport.\n   *\n   * @return {number}\n   */\n  get firstVisibleIndex() {\n    return this.__adapter.adjustedFirstVisibleIndex;\n  }\n\n  /**\n   * Gets the index of the last visible item in the viewport.\n   *\n   * @return {number}\n   */\n  get lastVisibleIndex() {\n    return this.__adapter.adjustedLastVisibleIndex;\n  }\n\n  /**\n   * The size of the virtualizer\n   * @return {number | undefined} The size of the virtualizer\n   */\n  get size() {\n    return this.__adapter.size;\n  }\n\n  /**\n   * The size of the virtualizer\n   * @param {number} size The size of the virtualizer\n   */\n  set size(size) {\n    this.__adapter.size = size;\n  }\n\n  /**\n   * Scroll to a specific index in the virtual list\n   *\n   * @method scrollToIndex\n   * @param {number} index The index of the item\n   */\n  scrollToIndex(index) {\n    this.__adapter.scrollToIndex(index);\n  }\n\n  /**\n   * Requests the virtualizer to re-render the item elements on an index range, if currently in the DOM\n   *\n   * @method update\n   * @param {number | undefined} startIndex The start index of the range\n   * @param {number | undefined} endIndex The end index of the range\n   */\n  update(startIndex = 0, endIndex = this.size - 1) {\n    this.__adapter.update(startIndex, endIndex);\n  }\n\n  /**\n   * Flushes active asynchronous tasks so that the component and the DOM end up in a stable state\n   *\n   * @method update\n   * @param {number | undefined} startIndex The start index of the range\n   * @param {number | undefined} endIndex The end index of the range\n   */\n  flush() {\n    this.__adapter.flush();\n  }\n}\n"],"mappings":";;AAAA,SAASA,eAAe,QAAQ,oCAAoC;AAEpE,WAAaC,WAAW;EACtB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAAAA,YAAYC,MAAM,EAAE;IAAAC,eAAA,OAAAF,WAAA;IAClB,IAAI,CAACG,SAAS,GAAG,IAAIJ,eAAe,CAACE,MAAM,CAAC;EAC9C;;EAEA;AACF;AACA;AACA;AACA;EAJEG,YAAA,CAAAJ,WAAA;IAAAK,GAAA;IAAAC,GAAA,EAKA,SAAAA,IAAA,EAAwB;MACtB,OAAO,IAAI,CAACH,SAAS,CAACI,yBAAyB;IACjD;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAAF,GAAA;IAAAC,GAAA,EAKA,SAAAA,IAAA,EAAuB;MACrB,OAAO,IAAI,CAACH,SAAS,CAACK,wBAAwB;IAChD;;IAEA;AACF;AACA;AACA;EAHE;IAAAH,GAAA;IAAAC,GAAA,EAIA,SAAAA,IAAA,EAAW;MACT,OAAO,IAAI,CAACH,SAAS,CAACM,IAAI;IAC5B;;IAEA;AACF;AACA;AACA,OAHE;IAAAC,GAAA,EAIA,SAAAA,IAASD,IAAI,EAAE;MACb,IAAI,CAACN,SAAS,CAACM,IAAI,GAAGA,IAAI;IAC5B;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAAJ,GAAA;IAAAM,KAAA,EAMA,SAAAC,cAAcC,KAAK,EAAE;MACnB,IAAI,CAACV,SAAS,CAACS,aAAa,CAACC,KAAK,CAAC;IACrC;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAR,GAAA;IAAAM,KAAA,EAOA,SAAAG,OAAA,EAAiD;MAAA,IAA1CC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEG,QAAQ,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI,CAACP,IAAI,GAAG,CAAC;MAC7C,IAAI,CAACN,SAAS,CAACW,MAAM,CAACC,UAAU,EAAEI,QAAQ,CAAC;IAC7C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAd,GAAA;IAAAM,KAAA,EAOA,SAAAS,MAAA,EAAQ;MACN,IAAI,CAACjB,SAAS,CAACiB,KAAK,CAAC,CAAC;IACxB;EAAC;EAAA,OAAApB,WAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}