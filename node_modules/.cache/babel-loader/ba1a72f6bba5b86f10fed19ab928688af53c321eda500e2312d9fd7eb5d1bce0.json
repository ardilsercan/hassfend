{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { processEvent } from \"../../../../data/assist_pipeline\";\nimport \"./assist-render-pipeline-run\";\nexport let AssistPipelineEvents = _decorate([customElement(\"assist-render-pipeline-events\")], function (_initialize, _LitElement) {\n  class AssistPipelineEvents extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: AssistPipelineEvents,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"events\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_processEvents\",\n      value() {\n        return memoizeOne(events => {\n          let run;\n          events.forEach(event => {\n            run = processEvent(run, event);\n          });\n          return run;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const run = this._processEvents(this.events);\n        if (!run) {\n          if (this.events.length) {\n            return html`<ha-alert alert-type=\"error\">Error showing run</ha-alert>\n          <ha-card>\n            <ha-expansion-panel>\n              <span slot=\"header\">Raw</span>\n              <pre>${JSON.stringify(this.events, null, 2)}</pre>\n            </ha-expansion-panel>\n          </ha-card>`;\n          }\n          return html`<ha-alert alert-type=\"warning\"\n        >There where no events in this run.</ha-alert\n      >`;\n        }\n        return html`\n      <assist-render-pipeline-run\n        .hass=${this.hass}\n        .pipelineRun=${run}\n      ></assist-render-pipeline-run>\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","customElement","property","memoizeOne","processEvent","AssistPipelineEvents","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","events","run","forEach","event","render","_processEvents","length","JSON","stringify","hass"],"sources":["/workspaces/frontend/src/panels/config/voice-assistants/debug/assist-render-pipeline-events.ts"],"sourcesContent":["import { html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  PipelineRun,\n  PipelineRunEvent,\n  processEvent,\n} from \"../../../../data/assist_pipeline\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"./assist-render-pipeline-run\";\n\n@customElement(\"assist-render-pipeline-events\")\nexport class AssistPipelineEvents extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public events!: PipelineRunEvent[];\n\n  private _processEvents = memoizeOne(\n    (events: PipelineRunEvent[]): PipelineRun | undefined => {\n      let run: PipelineRun | undefined;\n      events.forEach((event) => {\n        run = processEvent(run, event);\n      });\n      return run;\n    }\n  );\n\n  protected render(): TemplateResult {\n    const run = this._processEvents(this.events);\n    if (!run) {\n      if (this.events.length) {\n        return html`<ha-alert alert-type=\"error\">Error showing run</ha-alert>\n          <ha-card>\n            <ha-expansion-panel>\n              <span slot=\"header\">Raw</span>\n              <pre>${JSON.stringify(this.events, null, 2)}</pre>\n            </ha-expansion-panel>\n          </ha-card>`;\n      }\n      return html`<ha-alert alert-type=\"warning\"\n        >There where no events in this run.</ha-alert\n      >`;\n    }\n    return html`\n      <assist-render-pipeline-run\n        .hass=${this.hass}\n        .pipelineRun=${run}\n      ></assist-render-pipeline-run>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"assist-render-pipeline-events\": AssistPipelineEvents;\n  }\n}\n"],"mappings":";AAAA,SAASA,IAAI,EAAEC,UAAU,QAAwB,KAAK;AACtD,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,OAAOC,UAAU,MAAM,aAAa;AACpC,SAGEC,YAAY,QACP,kCAAkC;AAEzC,OAAO,8BAA8B;AAErC,WACaC,oBAAoB,GAAAC,SAAA,EADhCL,aAAa,CAAC,+BAA+B,CAAC,aAAAM,WAAA,EAAAC,WAAA;EAA/C,MACaH,oBAAoB,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAsCrD;EAAC;IAAAI,CAAA,EAtCYN,oBAAoB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAC9BZ,QAAQ,CAAC;QAAEa,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BZ,QAAQ,CAAC;QAAEa,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAENd,UAAU,CAChCe,MAA0B,IAA8B;UACvD,IAAIC,GAA4B;UAChCD,MAAM,CAACE,OAAO,CAAEC,KAAK,IAAK;YACxBF,GAAG,GAAGf,YAAY,CAACe,GAAG,EAAEE,KAAK,CAAC;UAChC,CAAC,CAAC;UACF,OAAOF,GAAG;QACZ,CACF,CAAC;MAAA;IAAA;MAAAN,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAK,OAAA,EAAmC;QACjC,MAAMH,GAAG,GAAG,IAAI,CAACI,cAAc,CAAC,IAAI,CAACL,MAAM,CAAC;QAC5C,IAAI,CAACC,GAAG,EAAE;UACR,IAAI,IAAI,CAACD,MAAM,CAACM,MAAM,EAAE;YACtB,OAAOzB,IAAK;AACpB;AACA;AACA;AACA,qBAAqB0B,IAAI,CAACC,SAAS,CAAC,IAAI,CAACR,MAAM,EAAE,IAAI,EAAE,CAAC,CAAE;AAC1D;AACA,qBAAqB;UACf;UACA,OAAOnB,IAAK;AAClB;AACA,QAAQ;QACJ;QACA,OAAOA,IAAK;AAChB;AACA,gBAAgB,IAAI,CAAC4B,IAAK;AAC1B,uBAAuBR,GAAI;AAC3B;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GArCuCnB,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}