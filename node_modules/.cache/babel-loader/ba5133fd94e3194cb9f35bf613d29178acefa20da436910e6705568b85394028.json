{"ast":null,"code":"import { createConnection, ERR_INVALID_AUTH, getAuth, subscribeConfig, subscribeEntities, subscribeServices } from \"home-assistant-js-websocket\";\nimport { loadTokens, saveTokens } from \"../common/auth/token_storage\";\nimport { hassUrl } from \"../data/auth\";\nimport { isExternal } from \"../data/external\";\nimport { subscribeFrontendUserData } from \"../data/frontend\";\nimport { fetchConfig } from \"../data/lovelace/config/types\";\nimport { fetchResources } from \"../data/lovelace/resource\";\nimport { MAIN_WINDOW_NAME } from \"../data/main_window\";\nimport { getRecorderInfo } from \"../data/recorder\";\nimport { subscribeRepairsIssueRegistry } from \"../data/repairs\";\nimport { subscribeAreaRegistry } from \"../data/ws-area_registry\";\nimport { subscribeDeviceRegistry } from \"../data/ws-device_registry\";\nimport { subscribeEntityRegistryDisplay } from \"../data/ws-entity_registry_display\";\nimport { subscribePanels } from \"../data/ws-panels\";\nimport { subscribeThemes } from \"../data/ws-themes\";\nimport { subscribeUser } from \"../data/ws-user\";\nimport \"../resources/array.flat.polyfill\";\nimport \"../resources/safari-14-attachshadow-patch\";\nwindow.name = MAIN_WINDOW_NAME;\nwindow.frontendVersion = __VERSION__;\nconst clearUrlParams = () => {\n  // Clear auth data from url if we have been able to establish a connection\n  if (location.search.includes(\"auth_callback=1\")) {\n    const searchParams = new URLSearchParams(location.search);\n    // https://github.com/home-assistant/home-assistant-js-websocket/blob/master/lib/auth.ts\n    // Remove all data from QueryCallbackData type\n    searchParams.delete(\"auth_callback\");\n    searchParams.delete(\"code\");\n    searchParams.delete(\"state\");\n    searchParams.delete(\"storeToken\");\n    const search = searchParams.toString();\n    history.replaceState(null, \"\", `${location.pathname}${search ? `?${search}` : \"\"}`);\n  }\n};\nconst authProm = isExternal ? () => import(\"../external_app/external_auth\").then(({\n  createExternalAuth\n}) => createExternalAuth(hassUrl)) : () => getAuth({\n  hassUrl,\n  limitHassInstance: true,\n  saveTokens,\n  loadTokens: () => Promise.resolve(loadTokens())\n});\nconst connProm = async auth => {\n  try {\n    const conn = await createConnection({\n      auth\n    });\n    clearUrlParams();\n    return {\n      auth,\n      conn\n    };\n  } catch (err) {\n    if (err !== ERR_INVALID_AUTH) {\n      throw err;\n    }\n    // We can get invalid auth if auth tokens were stored that are no longer valid\n    if (isExternal) {\n      // Tell the external app to force refresh the access tokens.\n      // This should trigger their unauthorized handling.\n      await auth.refreshAccessToken(true);\n    } else {\n      // Clear stored tokens.\n      saveTokens(null);\n    }\n    auth = await authProm();\n    const conn = await createConnection({\n      auth\n    });\n    clearUrlParams();\n    return {\n      auth,\n      conn\n    };\n  }\n};\nif (__DEV__ && \"performance\" in window) {\n  // Remove adoptedStyleSheets so style inspector works on shadow DOM.\n  // @ts-ignore\n  delete Document.prototype.adoptedStyleSheets;\n  performance.mark(\"hass-start\");\n}\nwindow.hassConnection = authProm().then(connProm);\n\n// This is set if app was somehow loaded before core.\nif (window.hassConnectionReady) {\n  window.hassConnectionReady(window.hassConnection);\n}\n\n// Start fetching some of the data that we will need.\nwindow.hassConnection.then(({\n  conn\n}) => {\n  const noop = () => {\n    // do nothing\n  };\n  subscribeEntities(conn, noop);\n  subscribeEntityRegistryDisplay(conn, noop);\n  subscribeDeviceRegistry(conn, noop);\n  subscribeAreaRegistry(conn, noop);\n  subscribeConfig(conn, noop);\n  subscribeServices(conn, noop);\n  subscribePanels(conn, noop);\n  subscribeThemes(conn, noop);\n  subscribeUser(conn, noop);\n  subscribeFrontendUserData(conn, \"core\", noop);\n  subscribeRepairsIssueRegistry(conn, noop);\n  const preloadWindow = window;\n  preloadWindow.recorderInfoProm = getRecorderInfo(conn);\n  if (location.pathname === \"/\" || location.pathname.startsWith(\"/lovelace/\")) {\n    preloadWindow.llConfProm = fetchConfig(conn, null, false);\n    preloadWindow.llConfProm.catch(() => {\n      // Ignore it, it is handled by Lovelace panel.\n    });\n    preloadWindow.llResProm = fetchResources(conn);\n  }\n});","map":{"version":3,"names":["createConnection","ERR_INVALID_AUTH","getAuth","subscribeConfig","subscribeEntities","subscribeServices","loadTokens","saveTokens","hassUrl","isExternal","subscribeFrontendUserData","fetchConfig","fetchResources","MAIN_WINDOW_NAME","getRecorderInfo","subscribeRepairsIssueRegistry","subscribeAreaRegistry","subscribeDeviceRegistry","subscribeEntityRegistryDisplay","subscribePanels","subscribeThemes","subscribeUser","window","name","frontendVersion","__VERSION__","clearUrlParams","location","search","includes","searchParams","URLSearchParams","delete","toString","history","replaceState","pathname","authProm","then","createExternalAuth","limitHassInstance","Promise","resolve","connProm","auth","conn","err","refreshAccessToken","__DEV__","Document","prototype","adoptedStyleSheets","performance","mark","hassConnection","hassConnectionReady","noop","preloadWindow","recorderInfoProm","startsWith","llConfProm","catch","llResProm"],"sources":["/workspaces/frontend/src/entrypoints/core.ts"],"sourcesContent":["import {\n  Auth,\n  Connection,\n  createConnection,\n  ERR_INVALID_AUTH,\n  getAuth,\n  subscribeConfig,\n  subscribeEntities,\n  subscribeServices,\n} from \"home-assistant-js-websocket\";\nimport { loadTokens, saveTokens } from \"../common/auth/token_storage\";\nimport { hassUrl } from \"../data/auth\";\nimport { isExternal } from \"../data/external\";\nimport { subscribeFrontendUserData } from \"../data/frontend\";\nimport { fetchConfig } from \"../data/lovelace/config/types\";\nimport { fetchResources } from \"../data/lovelace/resource\";\nimport { MAIN_WINDOW_NAME } from \"../data/main_window\";\nimport { WindowWithPreloads } from \"../data/preloads\";\nimport { getRecorderInfo } from \"../data/recorder\";\nimport { subscribeRepairsIssueRegistry } from \"../data/repairs\";\nimport { subscribeAreaRegistry } from \"../data/ws-area_registry\";\nimport { subscribeDeviceRegistry } from \"../data/ws-device_registry\";\nimport { subscribeEntityRegistryDisplay } from \"../data/ws-entity_registry_display\";\nimport { subscribePanels } from \"../data/ws-panels\";\nimport { subscribeThemes } from \"../data/ws-themes\";\nimport { subscribeUser } from \"../data/ws-user\";\nimport type { ExternalAuth } from \"../external_app/external_auth\";\nimport \"../resources/array.flat.polyfill\";\nimport \"../resources/safari-14-attachshadow-patch\";\n\nwindow.name = MAIN_WINDOW_NAME;\n(window as any).frontendVersion = __VERSION__;\n\ndeclare global {\n  interface Window {\n    hassConnection: Promise<{ auth: Auth; conn: Connection }>;\n    hassConnectionReady?: (hassConnection: Window[\"hassConnection\"]) => void;\n  }\n}\n\nconst clearUrlParams = () => {\n  // Clear auth data from url if we have been able to establish a connection\n  if (location.search.includes(\"auth_callback=1\")) {\n    const searchParams = new URLSearchParams(location.search);\n    // https://github.com/home-assistant/home-assistant-js-websocket/blob/master/lib/auth.ts\n    // Remove all data from QueryCallbackData type\n    searchParams.delete(\"auth_callback\");\n    searchParams.delete(\"code\");\n    searchParams.delete(\"state\");\n    searchParams.delete(\"storeToken\");\n    const search = searchParams.toString();\n    history.replaceState(\n      null,\n      \"\",\n      `${location.pathname}${search ? `?${search}` : \"\"}`\n    );\n  }\n};\n\nconst authProm = isExternal\n  ? () =>\n      import(\"../external_app/external_auth\").then(({ createExternalAuth }) =>\n        createExternalAuth(hassUrl)\n      )\n  : () =>\n      getAuth({\n        hassUrl,\n        limitHassInstance: true,\n        saveTokens,\n        loadTokens: () => Promise.resolve(loadTokens()),\n      });\n\nconst connProm = async (auth) => {\n  try {\n    const conn = await createConnection({ auth });\n    clearUrlParams();\n    return { auth, conn };\n  } catch (err: any) {\n    if (err !== ERR_INVALID_AUTH) {\n      throw err;\n    }\n    // We can get invalid auth if auth tokens were stored that are no longer valid\n    if (isExternal) {\n      // Tell the external app to force refresh the access tokens.\n      // This should trigger their unauthorized handling.\n      await auth.refreshAccessToken(true);\n    } else {\n      // Clear stored tokens.\n      saveTokens(null);\n    }\n    auth = await authProm();\n    const conn = await createConnection({ auth });\n    clearUrlParams();\n    return { auth, conn };\n  }\n};\n\nif (__DEV__ && \"performance\" in window) {\n  // Remove adoptedStyleSheets so style inspector works on shadow DOM.\n  // @ts-ignore\n  delete Document.prototype.adoptedStyleSheets;\n  performance.mark(\"hass-start\");\n}\nwindow.hassConnection = (authProm() as Promise<Auth | ExternalAuth>).then(\n  connProm\n);\n\n// This is set if app was somehow loaded before core.\nif (window.hassConnectionReady) {\n  window.hassConnectionReady(window.hassConnection);\n}\n\n// Start fetching some of the data that we will need.\nwindow.hassConnection.then(({ conn }) => {\n  const noop = () => {\n    // do nothing\n  };\n  subscribeEntities(conn, noop);\n  subscribeEntityRegistryDisplay(conn, noop);\n  subscribeDeviceRegistry(conn, noop);\n  subscribeAreaRegistry(conn, noop);\n  subscribeConfig(conn, noop);\n  subscribeServices(conn, noop);\n  subscribePanels(conn, noop);\n  subscribeThemes(conn, noop);\n  subscribeUser(conn, noop);\n  subscribeFrontendUserData(conn, \"core\", noop);\n  subscribeRepairsIssueRegistry(conn, noop);\n\n  const preloadWindow = window as WindowWithPreloads;\n  preloadWindow.recorderInfoProm = getRecorderInfo(conn);\n\n  if (location.pathname === \"/\" || location.pathname.startsWith(\"/lovelace/\")) {\n    preloadWindow.llConfProm = fetchConfig(conn, null, false);\n    preloadWindow.llConfProm.catch(() => {\n      // Ignore it, it is handled by Lovelace panel.\n    });\n    preloadWindow.llResProm = fetchResources(conn);\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}