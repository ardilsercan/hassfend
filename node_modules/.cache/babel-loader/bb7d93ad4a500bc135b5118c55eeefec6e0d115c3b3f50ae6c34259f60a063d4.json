{"ast":null,"code":"import { fetchConfig, saveConfig } from \"../../../data/lovelace/config/types\";\nimport { fetchDashboards } from \"../../../data/lovelace/dashboard\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { showSuggestCardDialog } from \"./card-editor/show-suggest-card-dialog\";\nimport { showSelectViewDialog } from \"./select-view/show-select-view-dialog\";\nexport const addEntitiesToLovelaceView = async (element, hass, cardConfig, entities) => {\n  var _panels$lovelace, _lovelaceConfig$views;\n  hass.loadFragmentTranslation(\"lovelace\");\n  const dashboards = await fetchDashboards(hass);\n  const storageDashs = dashboards.filter(dashboard => dashboard.mode === \"storage\");\n  const mainLovelaceMode = (_panels$lovelace = hass.panels.lovelace) === null || _panels$lovelace === void 0 || (_panels$lovelace = _panels$lovelace.config) === null || _panels$lovelace === void 0 ? void 0 : _panels$lovelace.mode;\n  if (mainLovelaceMode !== \"storage\" && !storageDashs.length) {\n    // no storage dashboards, just show the YAML config\n    showSuggestCardDialog(element, {\n      cardConfig,\n      entities,\n      yaml: true\n    });\n    return;\n  }\n  let lovelaceConfig;\n  let urlPath = null;\n  if (mainLovelaceMode === \"storage\") {\n    try {\n      lovelaceConfig = await fetchConfig(hass.connection, null, false);\n    } catch (err) {\n      // default dashboard is in generated mode\n    }\n  }\n  if (!lovelaceConfig && storageDashs.length) {\n    // find first dashoard not in generated mode\n    for (const storageDash of storageDashs) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        lovelaceConfig = await fetchConfig(hass.connection, storageDash.url_path, false);\n        urlPath = storageDash.url_path;\n        break;\n      } catch (err) {\n        // dashboard is in generated mode\n      }\n    }\n  }\n  if (!lovelaceConfig) {\n    if (dashboards.length > storageDashs.length) {\n      // all storage dashboards are generated, but we have YAML dashboards just show the YAML config\n      showSuggestCardDialog(element, {\n        cardConfig,\n        entities,\n        yaml: true\n      });\n    } else {\n      // all storage dashboards are generated\n      showAlertDialog(element, {\n        text: \"You don't seem to be in control of any dashboard, please take control first.\"\n      });\n    }\n    return;\n  }\n  if (!storageDashs.length && !((_lovelaceConfig$views = lovelaceConfig.views) !== null && _lovelaceConfig$views !== void 0 && _lovelaceConfig$views.length)) {\n    showAlertDialog(element, {\n      text: \"You don't have any Lovelace views, first create a view in Lovelace.\"\n    });\n    return;\n  }\n  if (!storageDashs.length && lovelaceConfig.views.length === 1) {\n    showSuggestCardDialog(element, {\n      cardConfig,\n      lovelaceConfig: lovelaceConfig,\n      saveConfig: async newConfig => {\n        try {\n          await saveConfig(hass, null, newConfig);\n        } catch (err) {\n          alert(hass.localize(\"ui.panel.lovelace.add_entities.saving_failed\"));\n        }\n      },\n      path: [0],\n      entities\n    });\n    return;\n  }\n  showSelectViewDialog(element, {\n    lovelaceConfig,\n    urlPath,\n    allowDashboardChange: true,\n    actionLabel: hass.localize(\"ui.common.next\"),\n    dashboards,\n    viewSelectedCallback: (newUrlPath, selectedDashConfig, viewIndex) => {\n      showSuggestCardDialog(element, {\n        cardConfig,\n        lovelaceConfig: selectedDashConfig,\n        saveConfig: async newConfig => {\n          try {\n            await saveConfig(hass, newUrlPath, newConfig);\n          } catch (_unused) {\n            alert(hass.localize(\"ui.panel.lovelace.add_entities.saving_failed\"));\n          }\n        },\n        path: [viewIndex],\n        entities\n      });\n    }\n  });\n};","map":{"version":3,"names":["fetchConfig","saveConfig","fetchDashboards","showAlertDialog","showSuggestCardDialog","showSelectViewDialog","addEntitiesToLovelaceView","element","hass","cardConfig","entities","_panels$lovelace","_lovelaceConfig$views","loadFragmentTranslation","dashboards","storageDashs","filter","dashboard","mode","mainLovelaceMode","panels","lovelace","config","length","yaml","lovelaceConfig","urlPath","connection","err","storageDash","url_path","text","views","newConfig","alert","localize","path","allowDashboardChange","actionLabel","viewSelectedCallback","newUrlPath","selectedDashConfig","viewIndex","_unused"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/editor/add-entities-to-view.ts"],"sourcesContent":["import { LovelacePanelConfig } from \"../../../data/lovelace\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport {\n  LovelaceConfig,\n  fetchConfig,\n  saveConfig,\n} from \"../../../data/lovelace/config/types\";\nimport { fetchDashboards } from \"../../../data/lovelace/dashboard\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { HomeAssistant } from \"../../../types\";\nimport { showSuggestCardDialog } from \"./card-editor/show-suggest-card-dialog\";\nimport { showSelectViewDialog } from \"./select-view/show-select-view-dialog\";\n\nexport const addEntitiesToLovelaceView = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  cardConfig: LovelaceCardConfig[],\n  entities?: string[]\n) => {\n  hass.loadFragmentTranslation(\"lovelace\");\n  const dashboards = await fetchDashboards(hass);\n\n  const storageDashs = dashboards.filter(\n    (dashboard) => dashboard.mode === \"storage\"\n  );\n\n  const mainLovelaceMode = (\n    hass!.panels.lovelace?.config as LovelacePanelConfig\n  )?.mode;\n\n  if (mainLovelaceMode !== \"storage\" && !storageDashs.length) {\n    // no storage dashboards, just show the YAML config\n    showSuggestCardDialog(element, {\n      cardConfig,\n      entities,\n      yaml: true,\n    });\n    return;\n  }\n\n  let lovelaceConfig;\n  let urlPath: string | null = null;\n  if (mainLovelaceMode === \"storage\") {\n    try {\n      lovelaceConfig = await fetchConfig(hass.connection, null, false);\n    } catch (err: any) {\n      // default dashboard is in generated mode\n    }\n  }\n\n  if (!lovelaceConfig && storageDashs.length) {\n    // find first dashoard not in generated mode\n    for (const storageDash of storageDashs) {\n      try {\n        // eslint-disable-next-line no-await-in-loop\n        lovelaceConfig = await fetchConfig(\n          hass.connection,\n          storageDash.url_path,\n          false\n        );\n        urlPath = storageDash.url_path;\n        break;\n      } catch (err: any) {\n        // dashboard is in generated mode\n      }\n    }\n  }\n\n  if (!lovelaceConfig) {\n    if (dashboards.length > storageDashs.length) {\n      // all storage dashboards are generated, but we have YAML dashboards just show the YAML config\n      showSuggestCardDialog(element, {\n        cardConfig,\n        entities,\n        yaml: true,\n      });\n    } else {\n      // all storage dashboards are generated\n      showAlertDialog(element, {\n        text: \"You don't seem to be in control of any dashboard, please take control first.\",\n      });\n    }\n    return;\n  }\n\n  if (!storageDashs.length && !lovelaceConfig.views?.length) {\n    showAlertDialog(element, {\n      text: \"You don't have any Lovelace views, first create a view in Lovelace.\",\n    });\n    return;\n  }\n\n  if (!storageDashs.length && lovelaceConfig.views.length === 1) {\n    showSuggestCardDialog(element, {\n      cardConfig,\n      lovelaceConfig: lovelaceConfig!,\n      saveConfig: async (newConfig: LovelaceConfig): Promise<void> => {\n        try {\n          await saveConfig(hass!, null, newConfig);\n        } catch (err: any) {\n          alert(hass.localize(\"ui.panel.lovelace.add_entities.saving_failed\"));\n        }\n      },\n      path: [0],\n      entities,\n    });\n    return;\n  }\n\n  showSelectViewDialog(element, {\n    lovelaceConfig,\n    urlPath,\n    allowDashboardChange: true,\n    actionLabel: hass.localize(\"ui.common.next\"),\n    dashboards,\n    viewSelectedCallback: (newUrlPath, selectedDashConfig, viewIndex) => {\n      showSuggestCardDialog(element, {\n        cardConfig,\n        lovelaceConfig: selectedDashConfig,\n        saveConfig: async (newConfig: LovelaceConfig): Promise<void> => {\n          try {\n            await saveConfig(hass!, newUrlPath, newConfig);\n          } catch {\n            alert(\n              hass.localize(\"ui.panel.lovelace.add_entities.saving_failed\")\n            );\n          }\n        },\n        path: [viewIndex],\n        entities,\n      });\n    },\n  });\n};\n"],"mappings":"AAEA,SAEEA,WAAW,EACXC,UAAU,QACL,qCAAqC;AAC5C,SAASC,eAAe,QAAQ,kCAAkC;AAClE,SAASC,eAAe,QAAQ,0CAA0C;AAE1E,SAASC,qBAAqB,QAAQ,wCAAwC;AAC9E,SAASC,oBAAoB,QAAQ,uCAAuC;AAE5E,OAAO,MAAMC,yBAAyB,GAAG,MAAAA,CACvCC,OAAoB,EACpBC,IAAmB,EACnBC,UAAgC,EAChCC,QAAmB,KAChB;EAAA,IAAAC,gBAAA,EAAAC,qBAAA;EACHJ,IAAI,CAACK,uBAAuB,CAAC,UAAU,CAAC;EACxC,MAAMC,UAAU,GAAG,MAAMZ,eAAe,CAACM,IAAI,CAAC;EAE9C,MAAMO,YAAY,GAAGD,UAAU,CAACE,MAAM,CACnCC,SAAS,IAAKA,SAAS,CAACC,IAAI,KAAK,SACpC,CAAC;EAED,MAAMC,gBAAgB,IAAAR,gBAAA,GACpBH,IAAI,CAAEY,MAAM,CAACC,QAAQ,cAAAV,gBAAA,gBAAAA,gBAAA,GAArBA,gBAAA,CAAuBW,MAAM,cAAAX,gBAAA,uBADNA,gBAAA,CAEtBO,IAAI;EAEP,IAAIC,gBAAgB,KAAK,SAAS,IAAI,CAACJ,YAAY,CAACQ,MAAM,EAAE;IAC1D;IACAnB,qBAAqB,CAACG,OAAO,EAAE;MAC7BE,UAAU;MACVC,QAAQ;MACRc,IAAI,EAAE;IACR,CAAC,CAAC;IACF;EACF;EAEA,IAAIC,cAAc;EAClB,IAAIC,OAAsB,GAAG,IAAI;EACjC,IAAIP,gBAAgB,KAAK,SAAS,EAAE;IAClC,IAAI;MACFM,cAAc,GAAG,MAAMzB,WAAW,CAACQ,IAAI,CAACmB,UAAU,EAAE,IAAI,EAAE,KAAK,CAAC;IAClE,CAAC,CAAC,OAAOC,GAAQ,EAAE;MACjB;IAAA;EAEJ;EAEA,IAAI,CAACH,cAAc,IAAIV,YAAY,CAACQ,MAAM,EAAE;IAC1C;IACA,KAAK,MAAMM,WAAW,IAAId,YAAY,EAAE;MACtC,IAAI;QACF;QACAU,cAAc,GAAG,MAAMzB,WAAW,CAChCQ,IAAI,CAACmB,UAAU,EACfE,WAAW,CAACC,QAAQ,EACpB,KACF,CAAC;QACDJ,OAAO,GAAGG,WAAW,CAACC,QAAQ;QAC9B;MACF,CAAC,CAAC,OAAOF,GAAQ,EAAE;QACjB;MAAA;IAEJ;EACF;EAEA,IAAI,CAACH,cAAc,EAAE;IACnB,IAAIX,UAAU,CAACS,MAAM,GAAGR,YAAY,CAACQ,MAAM,EAAE;MAC3C;MACAnB,qBAAqB,CAACG,OAAO,EAAE;QAC7BE,UAAU;QACVC,QAAQ;QACRc,IAAI,EAAE;MACR,CAAC,CAAC;IACJ,CAAC,MAAM;MACL;MACArB,eAAe,CAACI,OAAO,EAAE;QACvBwB,IAAI,EAAE;MACR,CAAC,CAAC;IACJ;IACA;EACF;EAEA,IAAI,CAAChB,YAAY,CAACQ,MAAM,IAAI,GAAAX,qBAAA,GAACa,cAAc,CAACO,KAAK,cAAApB,qBAAA,eAApBA,qBAAA,CAAsBW,MAAM,GAAE;IACzDpB,eAAe,CAACI,OAAO,EAAE;MACvBwB,IAAI,EAAE;IACR,CAAC,CAAC;IACF;EACF;EAEA,IAAI,CAAChB,YAAY,CAACQ,MAAM,IAAIE,cAAc,CAACO,KAAK,CAACT,MAAM,KAAK,CAAC,EAAE;IAC7DnB,qBAAqB,CAACG,OAAO,EAAE;MAC7BE,UAAU;MACVgB,cAAc,EAAEA,cAAe;MAC/BxB,UAAU,EAAE,MAAOgC,SAAyB,IAAoB;QAC9D,IAAI;UACF,MAAMhC,UAAU,CAACO,IAAI,EAAG,IAAI,EAAEyB,SAAS,CAAC;QAC1C,CAAC,CAAC,OAAOL,GAAQ,EAAE;UACjBM,KAAK,CAAC1B,IAAI,CAAC2B,QAAQ,CAAC,8CAA8C,CAAC,CAAC;QACtE;MACF,CAAC;MACDC,IAAI,EAAE,CAAC,CAAC,CAAC;MACT1B;IACF,CAAC,CAAC;IACF;EACF;EAEAL,oBAAoB,CAACE,OAAO,EAAE;IAC5BkB,cAAc;IACdC,OAAO;IACPW,oBAAoB,EAAE,IAAI;IAC1BC,WAAW,EAAE9B,IAAI,CAAC2B,QAAQ,CAAC,gBAAgB,CAAC;IAC5CrB,UAAU;IACVyB,oBAAoB,EAAEA,CAACC,UAAU,EAAEC,kBAAkB,EAAEC,SAAS,KAAK;MACnEtC,qBAAqB,CAACG,OAAO,EAAE;QAC7BE,UAAU;QACVgB,cAAc,EAAEgB,kBAAkB;QAClCxC,UAAU,EAAE,MAAOgC,SAAyB,IAAoB;UAC9D,IAAI;YACF,MAAMhC,UAAU,CAACO,IAAI,EAAGgC,UAAU,EAAEP,SAAS,CAAC;UAChD,CAAC,CAAC,OAAAU,OAAA,EAAM;YACNT,KAAK,CACH1B,IAAI,CAAC2B,QAAQ,CAAC,8CAA8C,CAC9D,CAAC;UACH;QACF,CAAC;QACDC,IAAI,EAAE,CAACM,SAAS,CAAC;QACjBhC;MACF,CAAC,CAAC;IACJ;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}