{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../../components/ha-form/ha-form\";\nexport let AssistPipelineDetailConfig = _decorate([customElement(\"assist-pipeline-detail-config\")], function (_initialize, _LitElement) {\n  class AssistPipelineDetailConfig extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: AssistPipelineDetailConfig,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"data\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Array\n      })],\n      key: \"supportedLanguages\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value: async function focus() {\n        var _this$renderRoot;\n        await this.updateComplete;\n        const input = (_this$renderRoot = this.renderRoot) === null || _this$renderRoot === void 0 ? void 0 : _this$renderRoot.querySelector(\"ha-form\");\n        input === null || input === void 0 || input.focus();\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne(supportedLanguages => [{\n          name: \"\",\n          type: \"grid\",\n          schema: [{\n            name: \"name\",\n            required: true,\n            selector: {\n              text: {}\n            }\n          }, supportedLanguages ? {\n            name: \"language\",\n            required: true,\n            selector: {\n              language: {\n                languages: supportedLanguages\n              }\n            }\n          } : {\n            name: \"\",\n            type: \"constant\"\n          }]\n        }]);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabel\",\n      value() {\n        return schema => schema.name ? this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.form.${schema.name}`) : \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <div class=\"section\">\n        <div class=\"intro\">\n          <h3>\n            ${this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.config.title`)}\n          </h3>\n          <p>\n            ${this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.config.description`)}\n          </p>\n        </div>\n        <ha-form\n          .schema=${this._schema(this.supportedLanguages)}\n          .data=${this.data}\n          .hass=${this.hass}\n          .computeLabel=${this._computeLabel}\n        ></ha-form>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      .section {\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        box-sizing: border-box;\n        padding: 16px;\n      }\n      .intro {\n        margin-bottom: 16px;\n      }\n      h3 {\n        font-weight: normal;\n        font-size: 22px;\n        line-height: 28px;\n        margin-top: 0;\n        margin-bottom: 4px;\n      }\n      p {\n        color: var(--secondary-text-color);\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","memoizeOne","AssistPipelineDetailConfig","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Array","focus","_this$renderRoot","updateComplete","input","renderRoot","querySelector","supportedLanguages","name","schema","required","selector","text","language","languages","hass","localize","render","_schema","data","_computeLabel","static","styles"],"sources":["/workspaces/frontend/src/panels/config/voice-assistants/assist-pipeline-detail/assist-pipeline-detail-config.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { LocalizeKeys } from \"../../../../common/translations/localize\";\nimport { AssistPipeline } from \"../../../../data/assist_pipeline\";\nimport { HomeAssistant } from \"../../../../types\";\nimport \"../../../../components/ha-form/ha-form\";\n\n@customElement(\"assist-pipeline-detail-config\")\nexport class AssistPipelineDetailConfig extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public data?: Partial<AssistPipeline>;\n\n  @property({ type: Array }) public supportedLanguages?: string[];\n\n  public async focus() {\n    await this.updateComplete;\n    const input = this.renderRoot?.querySelector(\"ha-form\");\n    input?.focus();\n  }\n\n  private _schema = memoizeOne(\n    (supportedLanguages?: string[]) =>\n      [\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"name\",\n              required: true,\n              selector: {\n                text: {},\n              },\n            },\n            supportedLanguages\n              ? {\n                  name: \"language\",\n                  required: true,\n                  selector: {\n                    language: {\n                      languages: supportedLanguages,\n                    },\n                  },\n                }\n              : { name: \"\", type: \"constant\" },\n          ] as const,\n        },\n      ] as const\n  );\n\n  private _computeLabel = (schema): string =>\n    schema.name\n      ? this.hass.localize(\n          `ui.panel.config.voice_assistants.assistants.pipeline.detail.form.${schema.name}` as LocalizeKeys\n        )\n      : \"\";\n\n  protected render() {\n    return html`\n      <div class=\"section\">\n        <div class=\"intro\">\n          <h3>\n            ${this.hass.localize(\n              `ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.config.title`\n            )}\n          </h3>\n          <p>\n            ${this.hass.localize(\n              `ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.config.description`\n            )}\n          </p>\n        </div>\n        <ha-form\n          .schema=${this._schema(this.supportedLanguages)}\n          .data=${this.data}\n          .hass=${this.hass}\n          .computeLabel=${this._computeLabel}\n        ></ha-form>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .section {\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n        box-sizing: border-box;\n        padding: 16px;\n      }\n      .intro {\n        margin-bottom: 16px;\n      }\n      h3 {\n        font-weight: normal;\n        font-size: 22px;\n        line-height: 28px;\n        margin-top: 0;\n        margin-bottom: 4px;\n      }\n      p {\n        color: var(--secondary-text-color);\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"assist-pipeline-detail-config\": AssistPipelineDetailConfig;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}