{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-control-select\";\nimport \"../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { computeFanSpeedCount, computeFanSpeedIcon, FAN_SPEED_COUNT_MAX_FOR_BUTTONS, FAN_SPEEDS, FanEntityFeature, fanPercentageToSpeed, fanSpeedToPercentage } from \"../../../data/fan\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\nexport const supportsFanSpeedCardFeature = stateObj => {\n  const domain = computeDomain(stateObj.entity_id);\n  return domain === \"fan\" && supportsFeature(stateObj, FanEntityFeature.SET_SPEED);\n};\nlet HuiFanSpeedCardFeature = _decorate([customElement(\"hui-fan-speed-card-feature\")], function (_initialize, _LitElement) {\n  class HuiFanSpeedCardFeature extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiFanSpeedCardFeature,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig() {\n        return {\n          type: \"fan-speed\"\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config) {\n          throw new Error(\"Invalid configuration\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_localizeSpeed\",\n      value: function _localizeSpeed(speed) {\n        if (speed === \"on\" || speed === \"off\") {\n          return this.hass.formatEntityState(this.stateObj, speed);\n        }\n        return this.hass.localize(`ui.card.fan.speed.${speed}`) || speed;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$stateObj$attrib, _this$stateObj$attrib2;\n        if (!this._config || !this.hass || !this.stateObj || !supportsFanSpeedCardFeature(this.stateObj)) {\n          return nothing;\n        }\n        const speedCount = computeFanSpeedCount(this.stateObj);\n        const percentage = stateActive(this.stateObj) ? (_this$stateObj$attrib = this.stateObj.attributes.percentage) !== null && _this$stateObj$attrib !== void 0 ? _this$stateObj$attrib : 0 : 0;\n        if (speedCount <= FAN_SPEED_COUNT_MAX_FOR_BUTTONS) {\n          const options = FAN_SPEEDS[speedCount].map(speed => ({\n            value: speed,\n            label: this._localizeSpeed(speed),\n            path: computeFanSpeedIcon(this.stateObj, speed)\n          }));\n          const speed = fanPercentageToSpeed(this.stateObj, percentage);\n          return html`\n        <div class=\"container\">\n          <ha-control-select\n            .options=${options}\n            .value=${speed}\n            @value-changed=${this._speedValueChanged}\n            hide-label\n            .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"percentage\")}\n            .disabled=${this.stateObj.state === UNAVAILABLE}\n          >\n          </ha-control-select>\n        </div>\n      `;\n        }\n        const value = Math.max(Math.round(percentage), 0);\n        return html`\n      <div class=\"container\">\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          .step=${(_this$stateObj$attrib2 = this.stateObj.attributes.percentage_step) !== null && _this$stateObj$attrib2 !== void 0 ? _this$stateObj$attrib2 : 1}\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"percentage\")}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.fan.percentage}\n          .locale=${this.hass.locale}\n        ></ha-control-slider>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_speedValueChanged\",\n      value: function _speedValueChanged(ev) {\n        const speed = ev.detail.value;\n        const percentage = fanSpeedToPercentage(this.stateObj, speed);\n        this.hass.callService(\"fan\", \"set_percentage\", {\n          entity_id: this.stateObj.entity_id,\n          percentage: percentage\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.hass.callService(\"fan\", \"set_percentage\", {\n          entity_id: this.stateObj.entity_id,\n          percentage: value\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-slider {\n        --control-slider-color: var(--feature-color);\n        --control-slider-background: var(--feature-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      ha-control-select {\n        --control-select-color: var(--feature-color);\n        --control-select-background: var(--feature-color);\n        --control-select-background-opacity: 0.2;\n        --control-select-padding: 0;\n        --control-select-thickness: 40px;\n        --control-select-border-radius: 10px;\n        --control-select-button-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","computeAttributeNameDisplay","computeDomain","stateActive","supportsFeature","UNAVAILABLE","computeFanSpeedCount","computeFanSpeedIcon","FAN_SPEED_COUNT_MAX_FOR_BUTTONS","FAN_SPEEDS","FanEntityFeature","fanPercentageToSpeed","fanSpeedToPercentage","DOMAIN_ATTRIBUTES_UNITS","supportsFanSpeedCardFeature","stateObj","domain","entity_id","SET_SPEED","HuiFanSpeedCardFeature","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","static","getStubConfig","type","setConfig","config","Error","_config","_localizeSpeed","speed","hass","formatEntityState","localize","render","_this$stateObj$attrib","_this$stateObj$attrib2","speedCount","percentage","attributes","options","map","label","path","_speedValueChanged","entities","Math","max","round","percentage_step","_valueChanged","fan","locale","ev","detail","callService","isNaN","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/card-features/hui-fan-speed-card-feature.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport \"../../../components/ha-control-select\";\nimport type { ControlSelectOption } from \"../../../components/ha-control-select\";\nimport \"../../../components/ha-control-slider\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport {\n  computeFanSpeedCount,\n  computeFanSpeedIcon,\n  FAN_SPEED_COUNT_MAX_FOR_BUTTONS,\n  FAN_SPEEDS,\n  FanEntity,\n  FanEntityFeature,\n  fanPercentageToSpeed,\n  FanSpeed,\n  fanSpeedToPercentage,\n} from \"../../../data/fan\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCardFeature } from \"../types\";\nimport { FanSpeedCardFeatureConfig } from \"./types\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\n\nexport const supportsFanSpeedCardFeature = (stateObj: HassEntity) => {\n  const domain = computeDomain(stateObj.entity_id);\n  return (\n    domain === \"fan\" && supportsFeature(stateObj, FanEntityFeature.SET_SPEED)\n  );\n};\n\n@customElement(\"hui-fan-speed-card-feature\")\nclass HuiFanSpeedCardFeature extends LitElement implements LovelaceCardFeature {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: FanEntity;\n\n  @state() private _config?: FanSpeedCardFeatureConfig;\n\n  static getStubConfig(): FanSpeedCardFeatureConfig {\n    return {\n      type: \"fan-speed\",\n    };\n  }\n\n  public setConfig(config: FanSpeedCardFeatureConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  private _localizeSpeed(speed: FanSpeed) {\n    if (speed === \"on\" || speed === \"off\") {\n      return this.hass!.formatEntityState(this.stateObj!, speed);\n    }\n    return this.hass!.localize(`ui.card.fan.speed.${speed}`) || speed;\n  }\n\n  protected render() {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this.stateObj ||\n      !supportsFanSpeedCardFeature(this.stateObj)\n    ) {\n      return nothing;\n    }\n\n    const speedCount = computeFanSpeedCount(this.stateObj);\n\n    const percentage = stateActive(this.stateObj)\n      ? this.stateObj.attributes.percentage ?? 0\n      : 0;\n\n    if (speedCount <= FAN_SPEED_COUNT_MAX_FOR_BUTTONS) {\n      const options = FAN_SPEEDS[speedCount]!.map<ControlSelectOption>(\n        (speed) => ({\n          value: speed,\n          label: this._localizeSpeed(speed),\n          path: computeFanSpeedIcon(this.stateObj!, speed),\n        })\n      );\n\n      const speed = fanPercentageToSpeed(this.stateObj, percentage);\n\n      return html`\n        <div class=\"container\">\n          <ha-control-select\n            .options=${options}\n            .value=${speed}\n            @value-changed=${this._speedValueChanged}\n            hide-label\n            .ariaLabel=${computeAttributeNameDisplay(\n              this.hass.localize,\n              this.stateObj,\n              this.hass.entities,\n              \"percentage\"\n            )}\n            .disabled=${this.stateObj!.state === UNAVAILABLE}\n          >\n          </ha-control-select>\n        </div>\n      `;\n    }\n\n    const value = Math.max(Math.round(percentage), 0);\n\n    return html`\n      <div class=\"container\">\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          .step=${this.stateObj.attributes.percentage_step ?? 1}\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(\n            this.hass.localize,\n            this.stateObj,\n            this.hass.entities,\n            \"percentage\"\n          )}\n          .disabled=${this.stateObj!.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.fan.percentage}\n          .locale=${this.hass.locale}\n        ></ha-control-slider>\n      </div>\n    `;\n  }\n\n  private _speedValueChanged(ev: CustomEvent) {\n    const speed = (ev.detail as any).value as FanSpeed;\n\n    const percentage = fanSpeedToPercentage(this.stateObj!, speed);\n\n    this.hass!.callService(\"fan\", \"set_percentage\", {\n      entity_id: this.stateObj!.entity_id,\n      percentage: percentage,\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass!.callService(\"fan\", \"set_percentage\", {\n      entity_id: this.stateObj!.entity_id,\n      percentage: value,\n    });\n  }\n\n  static get styles() {\n    return css`\n      ha-control-slider {\n        --control-slider-color: var(--feature-color);\n        --control-slider-background: var(--feature-color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      ha-control-select {\n        --control-select-color: var(--feature-color);\n        --control-select-background: var(--feature-color);\n        --control-select-background-opacity: 0.2;\n        --control-select-padding: 0;\n        --control-select-thickness: 40px;\n        --control-select-border-radius: 10px;\n        --control-select-button-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-fan-speed-card-feature\": HuiFanSpeedCardFeature;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}