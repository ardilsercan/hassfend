{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { BRANCH_HEIGHT, SPACING } from \"./hat-graph-const\";\n/**\n * @attribute active\n * @attribute track\n */\nexport var HatGraphBranch = _decorate([customElement(\"hat-graph-branch\")], function (_initialize, _LitElement) {\n  var HatGraphBranch = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HatGraphBranch, _LitElement2);\n    function HatGraphBranch() {\n      var _this;\n      _classCallCheck(this, HatGraphBranch);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HatGraphBranch, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HatGraphBranch);\n  }(_LitElement);\n  return {\n    F: HatGraphBranch,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"selected\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"start\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"short\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_branches\",\n      value: function value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_totalWidth\",\n      value: function value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_maxHeight\",\n      value: function value() {\n        return 0;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateBranches\",\n      value: function _updateBranches(ev) {\n        var total_width = 0;\n        var heights = [];\n        var branches = [];\n        ev.target.assignedElements().forEach(function (c) {\n          var width = c.clientWidth;\n          var height = c.clientHeight;\n          branches.push({\n            x: width / 2 + total_width,\n            height: height,\n            start: c.hasAttribute(\"graphStart\"),\n            end: c.hasAttribute(\"graphEnd\"),\n            track: c.hasAttribute(\"track\")\n          });\n          total_width += width;\n          heights.push(height);\n        });\n        this._totalWidth = total_width;\n        this._maxHeight = Math.max.apply(Math, heights);\n        this._branches = branches.sort(function (a, b) {\n          if (a.track && !b.track) {\n            return 1;\n          }\n          if (a.track && b.track) {\n            return 0;\n          }\n          return -1;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <slot name=\\\"head\\\"></slot>\\n      \", \"\\n      <div id=\\\"branches\\\">\\n        <svg id=\\\"lines\\\" width=\", \" height=\", \">\\n          \", \"\\n        </svg>\\n        <slot @slotchange=\", \"></slot>\\n      </div>\\n\\n      \", \"\\n    \"])), !this.start ? svg(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n            <svg\\n              id=\\\"top\\\"\\n              width=\\\"\", \"\\\"\\n            >\\n              \", \"\\n            </svg>\\n          \"])), this._totalWidth, this._branches.map(function (branch) {\n          return branch.start ? \"\" : svg(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n                  <path\\n                    class=\", \"\\n                    d=\\\"\\n                      M \", \" 0\\n                      L \", \" \", \"\\n                      \\\"/>\\n                \"])), classMap({\n            track: branch.track\n          }), _this2._totalWidth / 2, branch.x, BRANCH_HEIGHT);\n        })) : \"\", this._totalWidth, this._maxHeight, this._branches.map(function (branch) {\n          if (branch.end) return \"\";\n          return svg(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n                    <path\\n                      class=\", \"\\n                      d=\\\"\\n                        M \", \" \", \"\\n                        v \", \"\\n                        \\\"/>\\n                  \"])), classMap({\n            track: branch.track\n          }), branch.x, branch.height, _this2._maxHeight - branch.height);\n        }), this._updateBranches, !this.short ? svg(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n            <svg\\n              id=\\\"bottom\\\"\\n              width=\\\"\", \"\\\"\\n            >\\n              \", \"\\n            </svg>\\n          \"])), this._totalWidth, this._branches.map(function (branch) {\n          if (branch.end) return \"\";\n          return svg(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n                  <path\\n                    class=\", \"\\n                    d=\\\"\\n                      M \", \" 0\\n                      V \", \"\\n                      L \", \" \", \"\\n                      \\\"/>\\n                \"])), classMap({\n            track: branch.track\n          }), branch.x, SPACING, _this2._totalWidth / 2, BRANCH_HEIGHT + SPACING);\n        })) : \"\");\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"\\n      :host {\\n        position: relative;\\n        display: flex;\\n        flex-direction: column;\\n        align-items: center;\\n      }\\n      :host(:focus) {\\n        outline: none;\\n      }\\n      #branches {\\n        position: relative;\\n        display: flex;\\n        flex-direction: row;\\n        align-items: start;\\n      }\\n      ::slotted(*) {\\n        z-index: 1;\\n      }\\n      ::slotted([slot=\\\"head\\\"]) {\\n        margin-bottom: calc(var(--hat-graph-branch-height) / -2);\\n      }\\n      #lines {\\n        position: absolute;\\n      }\\n      #top {\\n        height: var(--hat-graph-branch-height);\\n      }\\n      #bottom {\\n        height: calc(var(--hat-graph-branch-height) + var(--hat-graph-spacing));\\n      }\\n      path {\\n        stroke: var(--stroke-clr);\\n        stroke-width: 2;\\n        fill: none;\\n      }\\n      path.track {\\n        stroke: var(--track-clr);\\n      }\\n      :host([disabled]) path {\\n        stroke: var(--disabled-clr);\\n      }\\n    \"])));\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","svg","customElement","property","state","classMap","BRANCH_HEIGHT","SPACING","HatGraphBranch","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","type","Boolean","reflect","key","value","_updateBranches","ev","total_width","heights","branches","target","assignedElements","forEach","c","width","clientWidth","height","clientHeight","push","x","start","hasAttribute","end","track","_totalWidth","_maxHeight","Math","max","apply","_branches","sort","a","b","render","_this2","_templateObject","_taggedTemplateLiteral","_templateObject2","map","branch","_templateObject3","_templateObject4","short","_templateObject5","_templateObject6","static","styles","_templateObject7"],"sources":["/workspaces/frontend/src/components/trace/hat-graph-branch.ts"],"sourcesContent":["import { css, html, LitElement, svg } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { BRANCH_HEIGHT, SPACING } from \"./hat-graph-const\";\n\ninterface BranchConfig {\n  x: number;\n  height: number;\n  start: boolean;\n  end: boolean;\n  track: boolean;\n}\n\n/**\n * @attribute active\n * @attribute track\n */\n@customElement(\"hat-graph-branch\")\nexport class HatGraphBranch extends LitElement {\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ type: Boolean }) selected = false;\n\n  @property({ type: Boolean }) start = false;\n\n  @property({ type: Boolean }) short = false;\n\n  @state() _branches: BranchConfig[] = [];\n\n  private _totalWidth = 0;\n\n  private _maxHeight = 0;\n\n  private _updateBranches(ev: Event) {\n    let total_width = 0;\n    const heights: number[] = [];\n    const branches: BranchConfig[] = [];\n    (ev.target as HTMLSlotElement).assignedElements().forEach((c) => {\n      const width = c.clientWidth;\n      const height = c.clientHeight;\n      branches.push({\n        x: width / 2 + total_width,\n        height,\n        start: c.hasAttribute(\"graphStart\"),\n        end: c.hasAttribute(\"graphEnd\"),\n        track: c.hasAttribute(\"track\"),\n      });\n      total_width += width;\n      heights.push(height);\n    });\n    this._totalWidth = total_width;\n    this._maxHeight = Math.max(...heights);\n    this._branches = branches.sort((a, b) => {\n      if (a.track && !b.track) {\n        return 1;\n      }\n      if (a.track && b.track) {\n        return 0;\n      }\n      return -1;\n    });\n  }\n\n  render() {\n    return html`\n      <slot name=\"head\"></slot>\n      ${!this.start\n        ? svg`\n            <svg\n              id=\"top\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) =>\n                branch.start\n                  ? \"\"\n                  : svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${this._totalWidth / 2} 0\n                      L ${branch.x} ${BRANCH_HEIGHT}\n                      \"/>\n                `\n              )}\n            </svg>\n          `\n        : \"\"}\n      <div id=\"branches\">\n        <svg id=\"lines\" width=${this._totalWidth} height=${this._maxHeight}>\n          ${this._branches.map((branch) => {\n            if (branch.end) return \"\";\n            return svg`\n                    <path\n                      class=${classMap({\n                        track: branch.track,\n                      })}\n                      d=\"\n                        M ${branch.x} ${branch.height}\n                        v ${this._maxHeight - branch.height}\n                        \"/>\n                  `;\n          })}\n        </svg>\n        <slot @slotchange=${this._updateBranches}></slot>\n      </div>\n\n      ${!this.short\n        ? svg`\n            <svg\n              id=\"bottom\"\n              width=\"${this._totalWidth}\"\n            >\n              ${this._branches.map((branch) => {\n                if (branch.end) return \"\";\n                return svg`\n                  <path\n                    class=${classMap({\n                      track: branch.track,\n                    })}\n                    d=\"\n                      M ${branch.x} 0\n                      V ${SPACING}\n                      L ${this._totalWidth / 2} ${BRANCH_HEIGHT + SPACING}\n                      \"/>\n                `;\n              })}\n            </svg>\n          `\n        : \"\"}\n    `;\n  }\n\n  static get styles() {\n    return css`\n      :host {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n      }\n      :host(:focus) {\n        outline: none;\n      }\n      #branches {\n        position: relative;\n        display: flex;\n        flex-direction: row;\n        align-items: start;\n      }\n      ::slotted(*) {\n        z-index: 1;\n      }\n      ::slotted([slot=\"head\"]) {\n        margin-bottom: calc(var(--hat-graph-branch-height) / -2);\n      }\n      #lines {\n        position: absolute;\n      }\n      #top {\n        height: var(--hat-graph-branch-height);\n      }\n      #bottom {\n        height: calc(var(--hat-graph-branch-height) + var(--hat-graph-spacing));\n      }\n      path {\n        stroke: var(--stroke-clr);\n        stroke-width: 2;\n        fill: none;\n      }\n      path.track {\n        stroke: var(--track-clr);\n      }\n      :host([disabled]) path {\n        stroke: var(--disabled-clr);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hat-graph-branch\": HatGraphBranch;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}