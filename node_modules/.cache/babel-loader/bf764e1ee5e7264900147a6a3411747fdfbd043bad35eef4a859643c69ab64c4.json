{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { navigate } from \"../common/navigate\";\nimport { subscribeDeviceRegistry } from \"./device_registry\";\nexport var NetworkType = /*#__PURE__*/function (NetworkType) {\n  NetworkType[\"THREAD\"] = \"thread\";\n  NetworkType[\"WIFI\"] = \"wifi\";\n  NetworkType[\"ETHERNET\"] = \"ethernet\";\n  NetworkType[\"UNKNOWN\"] = \"unknown\";\n  return NetworkType;\n}({});\nexport var NodeType = /*#__PURE__*/function (NodeType) {\n  NodeType[\"END_DEVICE\"] = \"end_device\";\n  NodeType[\"SLEEPY_END_DEVICE\"] = \"sleepy_end_device\";\n  NodeType[\"ROUTING_END_DEVICE\"] = \"routing_end_device\";\n  NodeType[\"BRIDGE\"] = \"bridge\";\n  NodeType[\"UNKNOWN\"] = \"unknown\";\n  return NodeType;\n}({});\nexport var canCommissionMatterExternal = function canCommissionMatterExternal(hass) {\n  var _hass$auth$external;\n  return (_hass$auth$external = hass.auth.external) === null || _hass$auth$external === void 0 ? void 0 : _hass$auth$external.config.canCommissionMatter;\n};\nexport var startExternalCommissioning = function startExternalCommissioning(hass) {\n  return hass.auth.external.fireMessage({\n    type: \"matter/commission\"\n  });\n};\nexport var redirectOnNewMatterDevice = function redirectOnNewMatterDevice(hass, callback) {\n  var curMatterDevices;\n  var unsubDeviceReg = subscribeDeviceRegistry(hass.connection, function (entries) {\n    if (!curMatterDevices) {\n      curMatterDevices = new Set(Object.values(entries).filter(function (device) {\n        return device.identifiers.find(function (identifier) {\n          return identifier[0] === \"matter\";\n        });\n      }).map(function (device) {\n        return device.id;\n      }));\n      return;\n    }\n    var newMatterDevices = Object.values(entries).filter(function (device) {\n      return device.identifiers.find(function (identifier) {\n        return identifier[0] === \"matter\";\n      }) && !curMatterDevices.has(device.id);\n    });\n    if (newMatterDevices.length) {\n      unsubDeviceReg();\n      curMatterDevices = undefined;\n      callback === null || callback === void 0 || callback();\n      navigate(\"/config/devices/device/\".concat(newMatterDevices[0].id));\n    }\n  });\n  return function () {\n    unsubDeviceReg();\n    curMatterDevices = undefined;\n  };\n};\nexport var addMatterDevice = function addMatterDevice(hass) {\n  startExternalCommissioning(hass);\n};\nexport var commissionMatterDevice = function commissionMatterDevice(hass, code) {\n  return hass.callWS({\n    type: \"matter/commission\",\n    code: code\n  });\n};\nexport var acceptSharedMatterDevice = function acceptSharedMatterDevice(hass, pin) {\n  return hass.callWS({\n    type: \"matter/commission_on_network\",\n    pin: pin\n  });\n};\nexport var matterSetWifi = function matterSetWifi(hass, network_name, password) {\n  return hass.callWS({\n    type: \"matter/set_wifi_credentials\",\n    network_name: network_name,\n    password: password\n  });\n};\nexport var matterSetThread = function matterSetThread(hass, thread_operation_dataset) {\n  return hass.callWS({\n    type: \"matter/set_thread\",\n    thread_operation_dataset: thread_operation_dataset\n  });\n};\nexport var getMatterNodeDiagnostics = function getMatterNodeDiagnostics(hass, device_id) {\n  return hass.callWS({\n    type: \"matter/node_diagnostics\",\n    device_id: device_id\n  });\n};\nexport var pingMatterNode = function pingMatterNode(hass, device_id) {\n  return hass.callWS({\n    type: \"matter/ping_node\",\n    device_id: device_id\n  });\n};\nexport var openMatterCommissioningWindow = function openMatterCommissioningWindow(hass, device_id) {\n  return hass.callWS({\n    type: \"matter/open_commissioning_window\",\n    device_id: device_id\n  });\n};\nexport var removeMatterFabric = function removeMatterFabric(hass, device_id, fabric_index) {\n  return hass.callWS({\n    type: \"matter/remove_matter_fabric\",\n    device_id: device_id,\n    fabric_index: fabric_index\n  });\n};\nexport var interviewMatterNode = function interviewMatterNode(hass, device_id) {\n  return hass.callWS({\n    type: \"matter/interview_node\",\n    device_id: device_id\n  });\n};","map":{"version":3,"names":["navigate","subscribeDeviceRegistry","NetworkType","NodeType","canCommissionMatterExternal","hass","_hass$auth$external","auth","external","config","canCommissionMatter","startExternalCommissioning","fireMessage","type","redirectOnNewMatterDevice","callback","curMatterDevices","unsubDeviceReg","connection","entries","Set","Object","values","filter","device","identifiers","find","identifier","map","id","newMatterDevices","has","length","undefined","concat","addMatterDevice","commissionMatterDevice","code","callWS","acceptSharedMatterDevice","pin","matterSetWifi","network_name","password","matterSetThread","thread_operation_dataset","getMatterNodeDiagnostics","device_id","pingMatterNode","openMatterCommissioningWindow","removeMatterFabric","fabric_index","interviewMatterNode"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/matter.ts"],"sourcesContent":["import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { navigate } from \"../common/navigate\";\nimport { HomeAssistant } from \"../types\";\nimport { subscribeDeviceRegistry } from \"./device_registry\";\n\nexport enum NetworkType {\n  THREAD = \"thread\",\n  WIFI = \"wifi\",\n  ETHERNET = \"ethernet\",\n  UNKNOWN = \"unknown\",\n}\n\nexport enum NodeType {\n  END_DEVICE = \"end_device\",\n  SLEEPY_END_DEVICE = \"sleepy_end_device\",\n  ROUTING_END_DEVICE = \"routing_end_device\",\n  BRIDGE = \"bridge\",\n  UNKNOWN = \"unknown\",\n}\n\nexport interface MatterFabricData {\n  fabric_id: number;\n  vendor_id: number;\n  fabric_index: number;\n  fabric_label?: string;\n  vendor_name?: string;\n}\n\nexport interface MatterNodeDiagnostics {\n  node_id: number;\n  network_type: NetworkType;\n  node_type: NodeType;\n  network_name?: string;\n  ip_adresses: string[];\n  mac_address?: string;\n  available: boolean;\n  active_fabrics: MatterFabricData[];\n}\n\nexport interface MatterPingResult {\n  [ip_address: string]: boolean;\n}\n\nexport interface MatterCommissioningParameters {\n  setup_pin_code: number;\n  setup_manual_code: string;\n  setup_qr_code: string;\n}\n\nexport const canCommissionMatterExternal = (hass: HomeAssistant) =>\n  hass.auth.external?.config.canCommissionMatter;\n\nexport const startExternalCommissioning = (hass: HomeAssistant) =>\n  hass.auth.external!.fireMessage({\n    type: \"matter/commission\",\n  });\n\nexport const redirectOnNewMatterDevice = (\n  hass: HomeAssistant,\n  callback?: () => void\n): UnsubscribeFunc => {\n  let curMatterDevices: Set<string> | undefined;\n  const unsubDeviceReg = subscribeDeviceRegistry(hass.connection, (entries) => {\n    if (!curMatterDevices) {\n      curMatterDevices = new Set(\n        Object.values(entries)\n          .filter((device) =>\n            device.identifiers.find((identifier) => identifier[0] === \"matter\")\n          )\n          .map((device) => device.id)\n      );\n      return;\n    }\n    const newMatterDevices = Object.values(entries).filter(\n      (device) =>\n        device.identifiers.find((identifier) => identifier[0] === \"matter\") &&\n        !curMatterDevices!.has(device.id)\n    );\n    if (newMatterDevices.length) {\n      unsubDeviceReg();\n      curMatterDevices = undefined;\n      callback?.();\n      navigate(`/config/devices/device/${newMatterDevices[0].id}`);\n    }\n  });\n  return () => {\n    unsubDeviceReg();\n    curMatterDevices = undefined;\n  };\n};\n\nexport const addMatterDevice = (hass: HomeAssistant) => {\n  startExternalCommissioning(hass);\n};\n\nexport const commissionMatterDevice = (\n  hass: HomeAssistant,\n  code: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/commission\",\n    code,\n  });\n\nexport const acceptSharedMatterDevice = (\n  hass: HomeAssistant,\n  pin: number\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/commission_on_network\",\n    pin,\n  });\n\nexport const matterSetWifi = (\n  hass: HomeAssistant,\n  network_name: string,\n  password: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/set_wifi_credentials\",\n    network_name,\n    password,\n  });\n\nexport const matterSetThread = (\n  hass: HomeAssistant,\n  thread_operation_dataset: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/set_thread\",\n    thread_operation_dataset,\n  });\n\nexport const getMatterNodeDiagnostics = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterNodeDiagnostics> =>\n  hass.callWS({\n    type: \"matter/node_diagnostics\",\n    device_id,\n  });\n\nexport const pingMatterNode = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterPingResult> =>\n  hass.callWS({\n    type: \"matter/ping_node\",\n    device_id,\n  });\n\nexport const openMatterCommissioningWindow = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterCommissioningParameters> =>\n  hass.callWS({\n    type: \"matter/open_commissioning_window\",\n    device_id,\n  });\n\nexport const removeMatterFabric = (\n  hass: HomeAssistant,\n  device_id: string,\n  fabric_index: number\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/remove_matter_fabric\",\n    device_id,\n    fabric_index,\n  });\n\nexport const interviewMatterNode = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/interview_node\",\n    device_id,\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}