{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { showTTSTryDialog } from \"../../../../dialogs/tts-try/show-dialog-tts-try\";\nexport let AssistPipelineDetailTTS = _decorate([customElement(\"assist-pipeline-detail-tts\")], function (_initialize, _LitElement) {\n  class AssistPipelineDetailTTS extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: AssistPipelineDetailTTS,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"data\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_supportedLanguages\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value() {\n        return memoizeOne((language, supportedLanguages) => [{\n          name: \"\",\n          type: \"grid\",\n          schema: [{\n            name: \"tts_engine\",\n            selector: {\n              tts: {\n                language\n              }\n            }\n          }, supportedLanguages !== null && supportedLanguages !== void 0 && supportedLanguages.length ? {\n            name: \"tts_language\",\n            required: true,\n            selector: {\n              language: {\n                languages: supportedLanguages,\n                no_sort: true\n              }\n            }\n          } : {\n            name: \"\",\n            type: \"constant\"\n          }, {\n            name: \"tts_voice\",\n            selector: {\n              tts_voice: {}\n            },\n            context: {\n              language: \"tts_language\",\n              engineId: \"tts_engine\"\n            },\n            required: true\n          }]\n        }]);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_computeLabel\",\n      value() {\n        return schema => schema.name ? this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.form.${schema.name}`) : \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$data, _this$data2;\n        return html`\n      <div class=\"section\">\n        <div class=\"content\">\n          <div class=\"intro\">\n          <h3>\n            ${this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.tts.title`)}\n          </h3>\n          <p>\n            ${this.hass.localize(`ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.tts.description`)}\n          </p>\n          </div>\n          <ha-form\n            .schema=${this._schema((_this$data = this.data) === null || _this$data === void 0 ? void 0 : _this$data.language, this._supportedLanguages)}\n            .data=${this.data}\n            .hass=${this.hass}\n            .computeLabel=${this._computeLabel}\n            @supported-languages-changed=${this._supportedLanguagesChanged}\n          ></ha-form>\n        </div>\n\n       ${(_this$data2 = this.data) !== null && _this$data2 !== void 0 && _this$data2.tts_engine ? html`<div class=\"footer\">\n               <ha-button\n                 .label=${this.hass.localize(\"ui.panel.config.voice_assistants.assistants.pipeline.detail.try_tts\")}\n                 @click=${this._preview}\n               >\n               </ha-button>\n             </div>` : nothing}\n        </div>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_preview\",\n      value: async function _preview() {\n        if (!this.data) return;\n        const engine = this.data.tts_engine;\n        const language = this.data.tts_language || undefined;\n        const voice = this.data.tts_voice || undefined;\n        if (!engine) return;\n        showTTSTryDialog(this, {\n          engine,\n          language,\n          voice\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_supportedLanguagesChanged\",\n      value: function _supportedLanguagesChanged(ev) {\n        this._supportedLanguages = ev.detail.value;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      .section {\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n      }\n      .content {\n        padding: 16px;\n      }\n      .intro {\n        margin-bottom: 16px;\n      }\n      h3 {\n        font-weight: normal;\n        font-size: 22px;\n        line-height: 28px;\n        margin-top: 0;\n        margin-bottom: 4px;\n      }\n      p {\n        color: var(--secondary-text-color);\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n      .footer {\n        border-top: 1px solid var(--divider-color);\n        padding: 8px 16px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","memoizeOne","showTTSTryDialog","AssistPipelineDetailTTS","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","language","supportedLanguages","name","type","schema","selector","tts","length","required","languages","no_sort","tts_voice","context","engineId","hass","localize","render","_this$data","_this$data2","_schema","data","_supportedLanguages","_computeLabel","_supportedLanguagesChanged","tts_engine","_preview","engine","tts_language","undefined","voice","ev","detail","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/voice-assistants/assist-pipeline-detail/assist-pipeline-detail-tts.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { LocalizeKeys } from \"../../../../common/translations/localize\";\nimport \"../../../../components/ha-button\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { AssistPipeline } from \"../../../../data/assist_pipeline\";\nimport { showTTSTryDialog } from \"../../../../dialogs/tts-try/show-dialog-tts-try\";\nimport { HomeAssistant } from \"../../../../types\";\n\n@customElement(\"assist-pipeline-detail-tts\")\nexport class AssistPipelineDetailTTS extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public data?: Partial<AssistPipeline>;\n\n  @state() private _supportedLanguages?: string[];\n\n  private _schema = memoizeOne(\n    (language?: string, supportedLanguages?: string[]) =>\n      [\n        {\n          name: \"\",\n          type: \"grid\",\n          schema: [\n            {\n              name: \"tts_engine\",\n              selector: {\n                tts: {\n                  language,\n                },\n              },\n            },\n            supportedLanguages?.length\n              ? {\n                  name: \"tts_language\",\n                  required: true,\n                  selector: {\n                    language: { languages: supportedLanguages, no_sort: true },\n                  },\n                }\n              : { name: \"\", type: \"constant\" },\n            {\n              name: \"tts_voice\",\n              selector: {\n                tts_voice: {},\n              },\n              context: { language: \"tts_language\", engineId: \"tts_engine\" },\n              required: true,\n            },\n          ] as const,\n        },\n      ] as const\n  );\n\n  private _computeLabel = (schema): string =>\n    schema.name\n      ? this.hass.localize(\n          `ui.panel.config.voice_assistants.assistants.pipeline.detail.form.${schema.name}` as LocalizeKeys\n        )\n      : \"\";\n\n  protected render() {\n    return html`\n      <div class=\"section\">\n        <div class=\"content\">\n          <div class=\"intro\">\n          <h3>\n            ${this.hass.localize(\n              `ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.tts.title`\n            )}\n          </h3>\n          <p>\n            ${this.hass.localize(\n              `ui.panel.config.voice_assistants.assistants.pipeline.detail.steps.tts.description`\n            )}\n          </p>\n          </div>\n          <ha-form\n            .schema=${this._schema(\n              this.data?.language,\n              this._supportedLanguages\n            )}\n            .data=${this.data}\n            .hass=${this.hass}\n            .computeLabel=${this._computeLabel}\n            @supported-languages-changed=${this._supportedLanguagesChanged}\n          ></ha-form>\n        </div>\n\n       ${\n         this.data?.tts_engine\n           ? html`<div class=\"footer\">\n               <ha-button\n                 .label=${this.hass.localize(\n                   \"ui.panel.config.voice_assistants.assistants.pipeline.detail.try_tts\"\n                 )}\n                 @click=${this._preview}\n               >\n               </ha-button>\n             </div>`\n           : nothing\n       }\n        </div>\n      </div>\n    `;\n  }\n\n  private async _preview() {\n    if (!this.data) return;\n\n    const engine = this.data.tts_engine;\n    const language = this.data.tts_language || undefined;\n    const voice = this.data.tts_voice || undefined;\n\n    if (!engine) return;\n\n    showTTSTryDialog(this, {\n      engine,\n      language,\n      voice,\n    });\n  }\n\n  private _supportedLanguagesChanged(ev) {\n    this._supportedLanguages = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .section {\n        border: 1px solid var(--divider-color);\n        border-radius: 8px;\n      }\n      .content {\n        padding: 16px;\n      }\n      .intro {\n        margin-bottom: 16px;\n      }\n      h3 {\n        font-weight: normal;\n        font-size: 22px;\n        line-height: 28px;\n        margin-top: 0;\n        margin-bottom: 4px;\n      }\n      p {\n        color: var(--secondary-text-color);\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        margin-top: 0;\n        margin-bottom: 0;\n      }\n      .footer {\n        border-top: 1px solid var(--divider-color);\n        padding: 8px 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"assist-pipeline-detail-tts\": AssistPipelineDetailTTS;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}