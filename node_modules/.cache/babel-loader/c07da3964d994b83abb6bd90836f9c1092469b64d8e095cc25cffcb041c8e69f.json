{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { any, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-form/ha-form\";\nimport { getStatisticMetadata, statisticsMetaHasType } from \"../../../../data/recorder\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nvar cardConfigStruct = assign(baseLovelaceCardConfig, object({\n  entity: optional(string()),\n  name: optional(string()),\n  icon: optional(string()),\n  unit: optional(string()),\n  stat_type: optional(string()),\n  period: optional(any()),\n  theme: optional(string()),\n  footer: optional(headerFooterConfigStructs)\n}));\nvar stat_types = [\"mean\", \"min\", \"max\", \"change\"];\nvar statTypeMap = {\n  mean: \"mean\",\n  min: \"min\",\n  max: \"max\",\n  change: \"sum\"\n};\nvar periods = {\n  today: {\n    calendar: {\n      period: \"day\"\n    }\n  },\n  yesterday: {\n    calendar: {\n      period: \"day\",\n      offset: -1\n    }\n  },\n  this_week: {\n    calendar: {\n      period: \"week\"\n    }\n  },\n  last_week: {\n    calendar: {\n      period: \"week\",\n      offset: -1\n    }\n  },\n  this_month: {\n    calendar: {\n      period: \"month\"\n    }\n  },\n  last_month: {\n    calendar: {\n      period: \"month\",\n      offset: -1\n    }\n  },\n  this_year: {\n    calendar: {\n      period: \"year\"\n    }\n  },\n  last_year: {\n    calendar: {\n      period: \"year\",\n      offset: -1\n    }\n  }\n};\nexport var HuiStatisticCardEditor = _decorate([customElement(\"hui-statistic-card-editor\")], function (_initialize, _LitElement) {\n  var HuiStatisticCardEditor = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HuiStatisticCardEditor, _LitElement2);\n    function HuiStatisticCardEditor() {\n      var _this;\n      _classCallCheck(this, HuiStatisticCardEditor);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HuiStatisticCardEditor, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HuiStatisticCardEditor);\n  }(_LitElement);\n  return {\n    F: HuiStatisticCardEditor,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_metadata\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        assert(config, cardConfigStruct);\n        this._config = config;\n        this._fetchMetadata();\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        var _this2 = this;\n        this._fetchMetadata().then(function () {\n          var _this2$_config, _this2$_config2;\n          if (!((_this2$_config = _this2._config) !== null && _this2$_config !== void 0 && _this2$_config.stat_type) && (_this2$_config2 = _this2._config) !== null && _this2$_config2 !== void 0 && _this2$_config2.entity) {\n            var _this2$_metadata;\n            fireEvent(_this2, \"config-changed\", {\n              config: Object.assign(Object.assign({}, _this2._config), {}, {\n                stat_type: (_this2$_metadata = _this2._metadata) !== null && _this2$_metadata !== void 0 && _this2$_metadata.has_sum ? \"change\" : \"mean\"\n              })\n            });\n          }\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_data\",\n      value: function value() {\n        return memoizeOne(function (config) {\n          if (!config || !config.period) {\n            return config;\n          }\n          for (var _i = 0, _Object$entries = Object.entries(periods); _i < _Object$entries.length; _i++) {\n            var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              periodKey = _Object$entries$_i[0],\n              period = _Object$entries$_i[1];\n            if (deepEqual(period, config.period)) {\n              return Object.assign(Object.assign({}, config), {}, {\n                period: periodKey\n              });\n            }\n          }\n          return config;\n        });\n      }\n    }, {\n      kind: \"field\",\n      key: \"_schema\",\n      value: function value() {\n        return memoizeOne(function (selectedPeriodKey, localize, metadata) {\n          return [{\n            name: \"entity\",\n            required: true,\n            selector: {\n              statistic: {}\n            }\n          }, {\n            name: \"stat_type\",\n            required: true,\n            selector: {\n              select: {\n                multiple: false,\n                options: stat_types.map(function (stat_type) {\n                  return {\n                    value: stat_type,\n                    label: localize(\"ui.panel.lovelace.editor.card.statistic.stat_type_labels.\".concat(stat_type)),\n                    disabled: !metadata || !statisticsMetaHasType(metadata, statTypeMap[stat_type])\n                  };\n                })\n              }\n            }\n          }, {\n            name: \"period\",\n            required: true,\n            selector: selectedPeriodKey && Object.keys(periods).includes(selectedPeriodKey) ? {\n              select: {\n                multiple: false,\n                options: Object.keys(periods).map(function (periodKey) {\n                  return {\n                    value: periodKey,\n                    label: localize(\"ui.panel.lovelace.editor.card.statistic.periods.\".concat(periodKey)) || periodKey\n                  };\n                })\n              }\n            } : {\n              object: {}\n            }\n          }, {\n            type: \"grid\",\n            name: \"\",\n            schema: [{\n              name: \"name\",\n              selector: {\n                text: {}\n              }\n            }, {\n              name: \"icon\",\n              selector: {\n                icon: {}\n              },\n              context: {\n                icon_entity: \"entity\"\n              }\n            }, {\n              name: \"unit\",\n              selector: {\n                text: {}\n              }\n            }, {\n              name: \"theme\",\n              selector: {\n                theme: {}\n              }\n            }]\n          }];\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this._config) {\n          return nothing;\n        }\n        var data = this._data(this._config);\n        var schema = this._schema(typeof data.period === \"string\" ? data.period : undefined, this.hass.localize, this._metadata);\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-form\\n        .hass=\", \"\\n        .data=\", \"\\n        .schema=\", \"\\n        .computeLabel=\", \"\\n        @value-changed=\", \"\\n      ></ha-form>\\n    \"])), this.hass, data, schema, this._computeLabelCallback, this._valueChanged);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchMetadata\",\n      value: function () {\n        var _fetchMetadata2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (!(!this.hass || !this._config)) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                _context.next = 4;\n                return getStatisticMetadata(this.hass, [this._config.entity]);\n              case 4:\n                this._metadata = _context.sent[0];\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _fetchMetadata() {\n          return _fetchMetadata2.apply(this, arguments);\n        }\n        return _fetchMetadata;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function () {\n        var _valueChanged2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ev) {\n          var _this$_metadata;\n          var config, period, _yield$getStatisticMe, metadata, _yield$getStatisticMe2, _metadata;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                config = Object.assign({}, ev.detail.value);\n                Object.keys(config).forEach(function (k) {\n                  return config[k] === \"\" && delete config[k];\n                });\n                if (typeof config.period === \"string\") {\n                  period = periods[config.period];\n                  if (period) {\n                    config.period = period;\n                  }\n                }\n                if (!(config.stat_type && config.entity && config.entity !== ((_this$_metadata = this._metadata) === null || _this$_metadata === void 0 ? void 0 : _this$_metadata.statistic_id))) {\n                  _context2.next = 18;\n                  break;\n                }\n                _context2.next = 6;\n                return getStatisticMetadata(this.hass, [config.entity]);\n              case 6:\n                _context2.t1 = _yield$getStatisticMe = _context2.sent;\n                _context2.t0 = _context2.t1 === null;\n                if (_context2.t0) {\n                  _context2.next = 10;\n                  break;\n                }\n                _context2.t0 = _yield$getStatisticMe === void 0;\n              case 10:\n                if (!_context2.t0) {\n                  _context2.next = 14;\n                  break;\n                }\n                _context2.t2 = void 0;\n                _context2.next = 15;\n                break;\n              case 14:\n                _context2.t2 = _yield$getStatisticMe[0];\n              case 15:\n                metadata = _context2.t2;\n                if (metadata && !metadata.has_sum && config.stat_type === \"change\") {\n                  config.stat_type = \"mean\";\n                }\n                if (metadata && !metadata.has_mean && config.stat_type !== \"change\") {\n                  config.stat_type = \"change\";\n                }\n              case 18:\n                if (!(!config.stat_type && config.entity)) {\n                  _context2.next = 32;\n                  break;\n                }\n                _context2.next = 21;\n                return getStatisticMetadata(this.hass, [config.entity]);\n              case 21:\n                _context2.t4 = _yield$getStatisticMe2 = _context2.sent;\n                _context2.t3 = _context2.t4 === null;\n                if (_context2.t3) {\n                  _context2.next = 25;\n                  break;\n                }\n                _context2.t3 = _yield$getStatisticMe2 === void 0;\n              case 25:\n                if (!_context2.t3) {\n                  _context2.next = 29;\n                  break;\n                }\n                _context2.t5 = void 0;\n                _context2.next = 30;\n                break;\n              case 29:\n                _context2.t5 = _yield$getStatisticMe2[0];\n              case 30:\n                _metadata = _context2.t5;\n                config.stat_type = _metadata !== null && _metadata !== void 0 && _metadata.has_sum ? \"change\" : \"mean\";\n              case 32:\n                fireEvent(this, \"config-changed\", {\n                  config: config\n                });\n              case 33:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _valueChanged(_x) {\n          return _valueChanged2.apply(this, arguments);\n        }\n        return _valueChanged;\n      }()\n    }, {\n      kind: \"field\",\n      key: \"_computeLabelCallback\",\n      value: function value() {\n        var _this3 = this;\n        return function (schema) {\n          if (schema.name === \"period\") {\n            return _this3.hass.localize(\"ui.panel.lovelace.editor.card.statistic.period\");\n          }\n          if (schema.name === \"theme\") {\n            return \"\".concat(_this3.hass.localize(\"ui.panel.lovelace.editor.card.generic.theme\"), \" (\").concat(_this3.hass.localize(\"ui.panel.lovelace.editor.card.config.optional\"), \")\");\n          }\n          return _this3.hass.localize(\"ui.panel.lovelace.editor.card.generic.\".concat(schema.name));\n        };\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["html","LitElement","nothing","customElement","property","state","memoizeOne","any","assert","assign","object","optional","string","fireEvent","deepEqual","getStatisticMetadata","statisticsMetaHasType","headerFooterConfigStructs","baseLovelaceCardConfig","cardConfigStruct","entity","name","icon","unit","stat_type","period","theme","footer","stat_types","statTypeMap","mean","min","max","change","periods","today","calendar","yesterday","offset","this_week","last_week","this_month","last_month","this_year","last_year","HuiStatisticCardEditor","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","_fetchMetadata","firstUpdated","_this2","then","_this2$_config","_this2$_config2","_this2$_metadata","Object","_metadata","has_sum","_i","_Object$entries","entries","_Object$entries$_i","_slicedToArray","periodKey","selectedPeriodKey","localize","metadata","required","selector","statistic","select","multiple","options","map","label","disabled","keys","includes","type","schema","text","context","icon_entity","render","hass","data","_data","_schema","undefined","_templateObject","_taggedTemplateLiteral","_computeLabelCallback","_valueChanged","_fetchMetadata2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","sent","stop","apply","_valueChanged2","_callee2","ev","_this$_metadata","_yield$getStatisticMe","_yield$getStatisticMe2","_callee2$","_context2","detail","forEach","k","statistic_id","t1","t0","t2","has_mean","t4","t3","t5","_x","_this3"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/config-elements/hui-statistic-card-editor.ts"],"sourcesContent":["import { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { any, assert, assign, object, optional, string } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LocalizeFunc } from \"../../../../common/translations/localize\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-form/ha-form\";\nimport type { SchemaUnion } from \"../../../../components/ha-form/types\";\nimport {\n  getStatisticMetadata,\n  StatisticsMetaData,\n  statisticsMetaHasType,\n  StatisticType,\n} from \"../../../../data/recorder\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport type { StatisticCardConfig } from \"../../cards/types\";\nimport { headerFooterConfigStructs } from \"../../header-footer/structs\";\nimport type { LovelaceCardEditor } from \"../../types\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    icon: optional(string()),\n    unit: optional(string()),\n    stat_type: optional(string()),\n    period: optional(any()),\n    theme: optional(string()),\n    footer: optional(headerFooterConfigStructs),\n  })\n);\n\nconst stat_types = [\"mean\", \"min\", \"max\", \"change\"] as const;\n\nconst statTypeMap: Record<(typeof stat_types)[number], StatisticType> = {\n  mean: \"mean\",\n  min: \"min\",\n  max: \"max\",\n  change: \"sum\",\n};\n\nconst periods = {\n  today: { calendar: { period: \"day\" } },\n  yesterday: { calendar: { period: \"day\", offset: -1 } },\n  this_week: { calendar: { period: \"week\" } },\n  last_week: { calendar: { period: \"week\", offset: -1 } },\n  this_month: { calendar: { period: \"month\" } },\n  last_month: { calendar: { period: \"month\", offset: -1 } },\n  this_year: { calendar: { period: \"year\" } },\n  last_year: { calendar: { period: \"year\", offset: -1 } },\n} as const;\n\n@customElement(\"hui-statistic-card-editor\")\nexport class HuiStatisticCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: StatisticCardConfig;\n\n  @state() private _metadata?: StatisticsMetaData;\n\n  public setConfig(config: StatisticCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n    this._fetchMetadata();\n  }\n\n  firstUpdated() {\n    this._fetchMetadata().then(() => {\n      if (!this._config?.stat_type && this._config?.entity) {\n        fireEvent(this, \"config-changed\", {\n          config: {\n            ...this._config,\n            stat_type: this._metadata?.has_sum ? \"change\" : \"mean\",\n          },\n        });\n      }\n    });\n  }\n\n  private _data = memoizeOne((config: StatisticCardConfig) => {\n    if (!config || !config.period) {\n      return config;\n    }\n    for (const [periodKey, period] of Object.entries(periods)) {\n      if (deepEqual(period, config.period)) {\n        return { ...config, period: periodKey };\n      }\n    }\n    return config;\n  });\n\n  private _schema = memoizeOne(\n    (\n      selectedPeriodKey: string | undefined,\n      localize: LocalizeFunc,\n      metadata?: StatisticsMetaData\n    ) =>\n      [\n        { name: \"entity\", required: true, selector: { statistic: {} } },\n        {\n          name: \"stat_type\",\n          required: true,\n          selector: {\n            select: {\n              multiple: false,\n              options: stat_types.map((stat_type) => ({\n                value: stat_type,\n                label: localize(\n                  `ui.panel.lovelace.editor.card.statistic.stat_type_labels.${stat_type}`\n                ),\n                disabled:\n                  !metadata ||\n                  !statisticsMetaHasType(metadata, statTypeMap[stat_type]),\n              })),\n            },\n          },\n        },\n        {\n          name: \"period\",\n          required: true,\n          selector:\n            selectedPeriodKey &&\n            Object.keys(periods).includes(selectedPeriodKey)\n              ? {\n                  select: {\n                    multiple: false,\n                    options: Object.keys(periods).map((periodKey) => ({\n                      value: periodKey,\n                      label:\n                        localize(\n                          `ui.panel.lovelace.editor.card.statistic.periods.${periodKey}`\n                        ) || periodKey,\n                    })),\n                  },\n                }\n              : { object: {} },\n        },\n        {\n          type: \"grid\",\n          name: \"\",\n          schema: [\n            { name: \"name\", selector: { text: {} } },\n            {\n              name: \"icon\",\n              selector: {\n                icon: {},\n              },\n              context: {\n                icon_entity: \"entity\",\n              },\n            },\n            { name: \"unit\", selector: { text: {} } },\n            { name: \"theme\", selector: { theme: {} } },\n          ],\n        },\n      ] as const\n  );\n\n  protected render() {\n    if (!this.hass || !this._config) {\n      return nothing;\n    }\n\n    const data = this._data(this._config);\n\n    const schema = this._schema(\n      typeof data.period === \"string\" ? data.period : undefined,\n      this.hass.localize,\n      this._metadata\n    );\n\n    return html`\n      <ha-form\n        .hass=${this.hass}\n        .data=${data}\n        .schema=${schema}\n        .computeLabel=${this._computeLabelCallback}\n        @value-changed=${this._valueChanged}\n      ></ha-form>\n    `;\n  }\n\n  private async _fetchMetadata() {\n    if (!this.hass || !this._config) {\n      return;\n    }\n    this._metadata = (\n      await getStatisticMetadata(this.hass, [this._config.entity])\n    )[0];\n  }\n\n  private async _valueChanged(ev: CustomEvent) {\n    const config = { ...ev.detail.value } as StatisticCardConfig;\n    Object.keys(config).forEach((k) => config[k] === \"\" && delete config[k]);\n\n    if (typeof config.period === \"string\") {\n      const period = periods[config.period];\n      if (period) {\n        config.period = period;\n      }\n    }\n\n    if (\n      config.stat_type &&\n      config.entity &&\n      config.entity !== this._metadata?.statistic_id\n    ) {\n      const metadata = (\n        await getStatisticMetadata(this.hass!, [config.entity])\n      )?.[0];\n      if (metadata && !metadata.has_sum && config.stat_type === \"change\") {\n        config.stat_type = \"mean\";\n      }\n      if (metadata && !metadata.has_mean && config.stat_type !== \"change\") {\n        config.stat_type = \"change\";\n      }\n    }\n\n    if (!config.stat_type && config.entity) {\n      const metadata = (\n        await getStatisticMetadata(this.hass!, [config.entity])\n      )?.[0];\n      config.stat_type = metadata?.has_sum ? \"change\" : \"mean\";\n    }\n\n    fireEvent(this, \"config-changed\", { config });\n  }\n\n  private _computeLabelCallback = (\n    schema: SchemaUnion<ReturnType<typeof this._schema>>\n  ) => {\n    if (schema.name === \"period\") {\n      return this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.statistic.period\"\n      );\n    }\n\n    if (schema.name === \"theme\") {\n      return `${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.generic.theme\"\n      )} (${this.hass!.localize(\n        \"ui.panel.lovelace.editor.card.config.optional\"\n      )})`;\n    }\n\n    return this.hass!.localize(\n      `ui.panel.lovelace.editor.card.generic.${schema.name}`\n    );\n  };\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-statistic-card-editor\": HuiStatisticCardEditor;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}