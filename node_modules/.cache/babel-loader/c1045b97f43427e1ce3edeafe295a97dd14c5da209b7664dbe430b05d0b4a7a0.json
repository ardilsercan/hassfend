{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { SizeGapPaddingBaseLayout, gap2 as gap2Name } from './SizeGapPaddingBaseLayout.js';\nimport { dim1 } from './BaseLayout.js';\n///\nexport class GridBaseLayout extends SizeGapPaddingBaseLayout {\n  constructor() {\n    super(...arguments);\n    this._metrics = null;\n    this.flex = null;\n    this.justify = null;\n  }\n  _getDefaultConfig() {\n    return Object.assign({}, super._getDefaultConfig(), {\n      flex: false,\n      justify: 'start'\n    });\n  }\n  set gap(spec) {\n    super._setGap(spec);\n  }\n  _updateLayout() {\n    const justify = this.justify;\n    const [padding1Start, padding1End] = this._padding1;\n    const [padding2Start, padding2End] = this._padding2;\n    // TODO (graynorton): Omit these checks in production mode\n    ['_gap1', '_gap2'].forEach(gap => {\n      const gapValue = this[gap];\n      if (gapValue === Infinity && !['space-between', 'space-around', 'space-evenly'].includes(justify)) {\n        throw new Error(`grid layout: gap can only be set to 'auto' when justify is set to 'space-between', 'space-around' or 'space-evenly'`);\n      }\n      if (gapValue === Infinity && gap === '_gap2') {\n        throw new Error(`grid layout: ${gap2Name(this.direction)}-gap cannot be set to 'auto' when direction is set to ${this.direction}`);\n      }\n    });\n    const usePaddingAndGap2 = this.flex || ['start', 'center', 'end'].includes(justify);\n    const metrics = {\n      rolumns: -1,\n      itemSize1: -1,\n      itemSize2: -1,\n      // Infinity represents 'auto', so we set an invalid placeholder until we can calculate\n      gap1: this._gap1 === Infinity ? -1 : this._gap1,\n      gap2: usePaddingAndGap2 ? this._gap2 : 0,\n      // Infinity represents 'match-gap', so we set padding to match gap\n      padding1: {\n        start: padding1Start === Infinity ? this._gap1 : padding1Start,\n        end: padding1End === Infinity ? this._gap1 : padding1End\n      },\n      padding2: usePaddingAndGap2 ? {\n        start: padding2Start === Infinity ? this._gap2 : padding2Start,\n        end: padding2End === Infinity ? this._gap2 : padding2End\n      } : {\n        start: 0,\n        end: 0\n      },\n      positions: []\n    };\n    // 1. Calculate available space, taking padding into account\n    const availableSpace = this._viewDim2 - metrics.padding2.start - metrics.padding2.end;\n    if (availableSpace <= 0) {\n      // If we have no space, we won't render any rolumns\n      metrics.rolumns = 0;\n    } else {\n      // 2. Calculate how many ideally sized \"rolumns\" (including gaps) fit in the available space\n      const gapSize = usePaddingAndGap2 ? metrics.gap2 : 0;\n      let rolumns = 0;\n      let spaceTaken = 0;\n      if (availableSpace >= this._idealSize2) {\n        rolumns = Math.floor((availableSpace - this._idealSize2) / (this._idealSize2 + gapSize)) + 1;\n        spaceTaken = rolumns * this._idealSize2 + (rolumns - 1) * gapSize;\n      }\n      // 3. If we're flexing items to fill the available space exactly, decide whether to add\n      // a rolumn and reduce item size, or keep the number of rolumns and increase item size\n      if (this.flex) {\n        // If we have at least half the space we need for another rolumn, go ahead and add one\n        if ((availableSpace - spaceTaken) / (this._idealSize2 + gapSize) >= 0.5) {\n          rolumns = rolumns + 1;\n        }\n        metrics.rolumns = rolumns;\n        // Calculate the flexed item size\n        metrics.itemSize2 = Math.round((availableSpace - gapSize * (rolumns - 1)) / rolumns);\n        // Calculate item size in the other dimension, preserving area (the default), aspect ratio or ideal size in that dimension as specified\n        const preserve = this.flex === true ? 'area' : this.flex.preserve;\n        switch (preserve) {\n          case 'aspect-ratio':\n            metrics.itemSize1 = Math.round(this._idealSize1 / this._idealSize2 * metrics.itemSize2);\n            break;\n          case dim1(this.direction):\n            metrics.itemSize1 = Math.round(this._idealSize1);\n            break;\n          case 'area':\n          default:\n            metrics.itemSize1 = Math.round(this._idealSize1 * this._idealSize2 / metrics.itemSize2);\n        }\n      } else {\n        // We're not flexing, so use the specified sizes unmodified\n        metrics.itemSize1 = this._idealSize1;\n        metrics.itemSize2 = this._idealSize2;\n        metrics.rolumns = rolumns;\n      }\n      // 4. Calculate the position for each item in a template rolumn\n      let pos;\n      if (usePaddingAndGap2) {\n        const spaceTaken = metrics.rolumns * metrics.itemSize2 + (metrics.rolumns - 1) * metrics.gap2;\n        pos = this.flex || justify === 'start' ? metrics.padding2.start : justify === 'end' ? this._viewDim2 - metrics.padding2.end - spaceTaken : Math.round(this._viewDim2 / 2 - spaceTaken / 2);\n      } else {\n        const spaceToDivide = availableSpace - metrics.rolumns * metrics.itemSize2;\n        if (justify === 'space-between') {\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns - 1));\n          pos = 0;\n        } else if (justify === 'space-around') {\n          metrics.gap2 = Math.round(spaceToDivide / metrics.rolumns);\n          pos = Math.round(metrics.gap2 / 2);\n        } else {\n          // justify == 'space-evenly'\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns + 1));\n          pos = metrics.gap2;\n        }\n        // If primary-axis gap was set to 'auto', provide the value now\n        // (and set 'match-gap' padding values transitively)\n        if (this._gap1 === Infinity) {\n          metrics.gap1 = metrics.gap2;\n          if (padding1Start === Infinity) {\n            metrics.padding1.start = pos;\n          }\n          if (padding1End === Infinity) {\n            metrics.padding1.end = pos;\n          }\n        }\n      }\n      for (let i = 0; i < metrics.rolumns; i++) {\n        metrics.positions.push(pos);\n        pos += metrics.itemSize2 + metrics.gap2;\n      }\n    }\n    this._metrics = metrics;\n  }\n}","map":{"version":3,"names":["SizeGapPaddingBaseLayout","gap2","gap2Name","dim1","GridBaseLayout","constructor","_metrics","flex","justify","_getDefaultConfig","Object","assign","gap","spec","_setGap","_updateLayout","padding1Start","padding1End","_padding1","padding2Start","padding2End","_padding2","forEach","gapValue","Infinity","includes","Error","direction","usePaddingAndGap2","metrics","rolumns","itemSize1","itemSize2","gap1","_gap1","_gap2","padding1","start","end","padding2","positions","availableSpace","_viewDim2","gapSize","spaceTaken","_idealSize2","Math","floor","round","preserve","_idealSize1","pos","spaceToDivide","i","push"],"sources":["../../src/layouts/shared/GridBaseLayout.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {\n  SizeGapPaddingBaseLayout,\n  SizeGapPaddingBaseLayoutConfig,\n  AutoGapSpec,\n  gap2 as gap2Name,\n} from './SizeGapPaddingBaseLayout.js';\nimport {dim1} from './BaseLayout.js';\n\ntype FlexSpec =\n  | boolean\n  | {preserve: 'aspect-ratio' | 'area' | 'width' | 'height'};\ntype JustifySpec =\n  | 'start'\n  | 'center'\n  | 'end'\n  | 'space-evenly'\n  | 'space-around'\n  | 'space-between';\n\nexport interface GridBaseLayoutConfig\n  extends Omit<SizeGapPaddingBaseLayoutConfig, 'gap'> {\n  gap?: AutoGapSpec;\n  flex?: FlexSpec;\n  justify?: JustifySpec;\n}\n\ninterface GridLayoutMetrics {\n  rolumns: number;\n  itemSize1: number;\n  itemSize2: number;\n  gap1: number;\n  gap2: number;\n  padding1: {\n    start: number;\n    end: number;\n  };\n  padding2: {\n    start: number;\n    end: number;\n  };\n  positions: number[];\n}\n\n///\n\nexport abstract class GridBaseLayout<\n  C extends GridBaseLayoutConfig\n> extends SizeGapPaddingBaseLayout<C> {\n  protected _metrics: GridLayoutMetrics | null = null;\n  flex: FlexSpec | null = null;\n  justify: JustifySpec | null = null;\n\n  protected _getDefaultConfig(): C {\n    return Object.assign({}, super._getDefaultConfig(), {\n      flex: false,\n      justify: 'start',\n    });\n  }\n\n  set gap(spec: AutoGapSpec) {\n    super._setGap(spec);\n  }\n\n  protected _updateLayout() {\n    const justify = this.justify as JustifySpec;\n    const [padding1Start, padding1End] = this._padding1;\n    const [padding2Start, padding2End] = this._padding2;\n\n    // TODO (graynorton): Omit these checks in production mode\n    ['_gap1', '_gap2'].forEach((gap) => {\n      const gapValue = this[gap as '_gap1' | '_gap2'];\n      if (\n        gapValue === Infinity &&\n        !['space-between', 'space-around', 'space-evenly'].includes(justify)\n      ) {\n        throw new Error(\n          `grid layout: gap can only be set to 'auto' when justify is set to 'space-between', 'space-around' or 'space-evenly'`\n        );\n      }\n      if (gapValue === Infinity && gap === '_gap2') {\n        throw new Error(\n          `grid layout: ${gap2Name(\n            this.direction\n          )}-gap cannot be set to 'auto' when direction is set to ${\n            this.direction\n          }`\n        );\n      }\n    });\n\n    const usePaddingAndGap2 =\n      this.flex || ['start', 'center', 'end'].includes(justify);\n\n    const metrics: GridLayoutMetrics = {\n      rolumns: -1,\n      itemSize1: -1,\n      itemSize2: -1,\n      // Infinity represents 'auto', so we set an invalid placeholder until we can calculate\n      gap1: this._gap1 === Infinity ? -1 : this._gap1,\n      gap2: usePaddingAndGap2 ? this._gap2 : 0,\n      // Infinity represents 'match-gap', so we set padding to match gap\n      padding1: {\n        start: padding1Start === Infinity ? this._gap1 : padding1Start,\n        end: padding1End === Infinity ? this._gap1 : padding1End,\n      },\n      padding2: usePaddingAndGap2\n        ? {\n            start: padding2Start === Infinity ? this._gap2 : padding2Start,\n            end: padding2End === Infinity ? this._gap2 : padding2End,\n          }\n        : {\n            start: 0,\n            end: 0,\n          },\n      positions: [],\n    };\n\n    // 1. Calculate available space, taking padding into account\n    const availableSpace =\n      this._viewDim2 - metrics.padding2.start - metrics.padding2.end;\n    if (availableSpace <= 0) {\n      // If we have no space, we won't render any rolumns\n      metrics.rolumns = 0;\n    } else {\n      // 2. Calculate how many ideally sized \"rolumns\" (including gaps) fit in the available space\n      const gapSize = usePaddingAndGap2 ? metrics.gap2 : 0;\n      let rolumns = 0;\n      let spaceTaken = 0;\n      if (availableSpace >= this._idealSize2) {\n        rolumns =\n          Math.floor(\n            (availableSpace - this._idealSize2) / (this._idealSize2 + gapSize)\n          ) + 1;\n        spaceTaken = rolumns * this._idealSize2 + (rolumns - 1) * gapSize;\n      }\n      // 3. If we're flexing items to fill the available space exactly, decide whether to add\n      // a rolumn and reduce item size, or keep the number of rolumns and increase item size\n      if (this.flex) {\n        // If we have at least half the space we need for another rolumn, go ahead and add one\n        if (\n          (availableSpace - spaceTaken) / (this._idealSize2 + gapSize) >=\n          0.5\n        ) {\n          rolumns = rolumns + 1;\n        }\n        metrics.rolumns = rolumns;\n        // Calculate the flexed item size\n        metrics.itemSize2 = Math.round(\n          (availableSpace - gapSize * (rolumns - 1)) / rolumns\n        );\n        // Calculate item size in the other dimension, preserving area (the default), aspect ratio or ideal size in that dimension as specified\n        const preserve = this.flex === true ? 'area' : this.flex.preserve;\n        switch (preserve) {\n          case 'aspect-ratio':\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 / this._idealSize2) * metrics.itemSize2\n            );\n            break;\n          case dim1(this.direction):\n            metrics.itemSize1 = Math.round(this._idealSize1);\n            break;\n          case 'area':\n          default:\n            metrics.itemSize1 = Math.round(\n              (this._idealSize1 * this._idealSize2) / metrics.itemSize2\n            );\n        }\n      } else {\n        // We're not flexing, so use the specified sizes unmodified\n        metrics.itemSize1 = this._idealSize1;\n        metrics.itemSize2 = this._idealSize2;\n        metrics.rolumns = rolumns;\n      }\n      // 4. Calculate the position for each item in a template rolumn\n      let pos: number;\n      if (usePaddingAndGap2) {\n        const spaceTaken =\n          metrics.rolumns * metrics.itemSize2 +\n          (metrics.rolumns - 1) * metrics.gap2;\n        pos =\n          this.flex || justify === 'start'\n            ? metrics.padding2.start\n            : justify === 'end'\n            ? this._viewDim2 - metrics.padding2.end - spaceTaken\n            : Math.round(this._viewDim2 / 2 - spaceTaken / 2);\n      } else {\n        const spaceToDivide =\n          availableSpace - metrics.rolumns * metrics.itemSize2;\n        if (justify === 'space-between') {\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns - 1));\n          pos = 0;\n        } else if (justify === 'space-around') {\n          metrics.gap2 = Math.round(spaceToDivide / metrics.rolumns);\n          pos = Math.round(metrics.gap2 / 2);\n        } else {\n          // justify == 'space-evenly'\n          metrics.gap2 = Math.round(spaceToDivide / (metrics.rolumns + 1));\n          pos = metrics.gap2;\n        }\n        // If primary-axis gap was set to 'auto', provide the value now\n        // (and set 'match-gap' padding values transitively)\n        if (this._gap1 === Infinity) {\n          metrics.gap1 = metrics.gap2;\n          if (padding1Start === Infinity) {\n            metrics.padding1.start = pos;\n          }\n          if (padding1End === Infinity) {\n            metrics.padding1.end = pos;\n          }\n        }\n      }\n      for (let i = 0; i < metrics.rolumns; i++) {\n        metrics.positions.push(pos);\n        pos += metrics.itemSize2 + metrics.gap2;\n      }\n    }\n\n    this._metrics = metrics;\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SACEA,wBAAwB,EAGxBC,IAAI,IAAIC,QAAQ,QACX,+BAA+B;AACtC,SAAQC,IAAI,QAAO,iBAAiB;AAqCpC;AAEA,OAAM,MAAgBC,cAEpB,SAAQJ,wBAA2B;EAFrCK,YAAA;;IAGY,KAAAC,QAAQ,GAA6B,IAAI;IACnD,KAAAC,IAAI,GAAoB,IAAI;IAC5B,KAAAC,OAAO,GAAuB,IAAI;EAyKpC;EAvKYC,iBAAiBA,CAAA;IACzB,OAAOC,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,KAAK,CAACF,iBAAiB,EAAE,EAAE;MAClDF,IAAI,EAAE,KAAK;MACXC,OAAO,EAAE;KACV,CAAC;EACJ;EAEA,IAAII,GAAGA,CAACC,IAAiB;IACvB,KAAK,CAACC,OAAO,CAACD,IAAI,CAAC;EACrB;EAEUE,aAAaA,CAAA;IACrB,MAAMP,OAAO,GAAG,IAAI,CAACA,OAAsB;IAC3C,MAAM,CAACQ,aAAa,EAAEC,WAAW,CAAC,GAAG,IAAI,CAACC,SAAS;IACnD,MAAM,CAACC,aAAa,EAAEC,WAAW,CAAC,GAAG,IAAI,CAACC,SAAS;IAEnD;IACA,CAAC,OAAO,EAAE,OAAO,CAAC,CAACC,OAAO,CAAEV,GAAG,IAAI;MACjC,MAAMW,QAAQ,GAAG,IAAI,CAACX,GAAwB,CAAC;MAC/C,IACEW,QAAQ,KAAKC,QAAQ,IACrB,CAAC,CAAC,eAAe,EAAE,cAAc,EAAE,cAAc,CAAC,CAACC,QAAQ,CAACjB,OAAO,CAAC,EACpE;QACA,MAAM,IAAIkB,KAAK,CACb,qHAAqH,CACtH;;MAEH,IAAIH,QAAQ,KAAKC,QAAQ,IAAIZ,GAAG,KAAK,OAAO,EAAE;QAC5C,MAAM,IAAIc,KAAK,CACb,gBAAgBxB,QAAQ,CACtB,IAAI,CAACyB,SAAS,CACf,yDACC,IAAI,CAACA,SACP,EAAE,CACH;;IAEL,CAAC,CAAC;IAEF,MAAMC,iBAAiB,GACrB,IAAI,CAACrB,IAAI,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAACkB,QAAQ,CAACjB,OAAO,CAAC;IAE3D,MAAMqB,OAAO,GAAsB;MACjCC,OAAO,EAAE,CAAC,CAAC;MACXC,SAAS,EAAE,CAAC,CAAC;MACbC,SAAS,EAAE,CAAC,CAAC;MACb;MACAC,IAAI,EAAE,IAAI,CAACC,KAAK,KAAKV,QAAQ,GAAG,CAAC,CAAC,GAAG,IAAI,CAACU,KAAK;MAC/CjC,IAAI,EAAE2B,iBAAiB,GAAG,IAAI,CAACO,KAAK,GAAG,CAAC;MACxC;MACAC,QAAQ,EAAE;QACRC,KAAK,EAAErB,aAAa,KAAKQ,QAAQ,GAAG,IAAI,CAACU,KAAK,GAAGlB,aAAa;QAC9DsB,GAAG,EAAErB,WAAW,KAAKO,QAAQ,GAAG,IAAI,CAACU,KAAK,GAAGjB;OAC9C;MACDsB,QAAQ,EAAEX,iBAAiB,GACvB;QACES,KAAK,EAAElB,aAAa,KAAKK,QAAQ,GAAG,IAAI,CAACW,KAAK,GAAGhB,aAAa;QAC9DmB,GAAG,EAAElB,WAAW,KAAKI,QAAQ,GAAG,IAAI,CAACW,KAAK,GAAGf;OAC9C,GACD;QACEiB,KAAK,EAAE,CAAC;QACRC,GAAG,EAAE;OACN;MACLE,SAAS,EAAE;KACZ;IAED;IACA,MAAMC,cAAc,GAClB,IAAI,CAACC,SAAS,GAAGb,OAAO,CAACU,QAAQ,CAACF,KAAK,GAAGR,OAAO,CAACU,QAAQ,CAACD,GAAG;IAChE,IAAIG,cAAc,IAAI,CAAC,EAAE;MACvB;MACAZ,OAAO,CAACC,OAAO,GAAG,CAAC;KACpB,MAAM;MACL;MACA,MAAMa,OAAO,GAAGf,iBAAiB,GAAGC,OAAO,CAAC5B,IAAI,GAAG,CAAC;MACpD,IAAI6B,OAAO,GAAG,CAAC;MACf,IAAIc,UAAU,GAAG,CAAC;MAClB,IAAIH,cAAc,IAAI,IAAI,CAACI,WAAW,EAAE;QACtCf,OAAO,GACLgB,IAAI,CAACC,KAAK,CACR,CAACN,cAAc,GAAG,IAAI,CAACI,WAAW,KAAK,IAAI,CAACA,WAAW,GAAGF,OAAO,CAAC,CACnE,GAAG,CAAC;QACPC,UAAU,GAAGd,OAAO,GAAG,IAAI,CAACe,WAAW,GAAG,CAACf,OAAO,GAAG,CAAC,IAAIa,OAAO;;MAEnE;MACA;MACA,IAAI,IAAI,CAACpC,IAAI,EAAE;QACb;QACA,IACE,CAACkC,cAAc,GAAGG,UAAU,KAAK,IAAI,CAACC,WAAW,GAAGF,OAAO,CAAC,IAC5D,GAAG,EACH;UACAb,OAAO,GAAGA,OAAO,GAAG,CAAC;;QAEvBD,OAAO,CAACC,OAAO,GAAGA,OAAO;QACzB;QACAD,OAAO,CAACG,SAAS,GAAGc,IAAI,CAACE,KAAK,CAC5B,CAACP,cAAc,GAAGE,OAAO,IAAIb,OAAO,GAAG,CAAC,CAAC,IAAIA,OAAO,CACrD;QACD;QACA,MAAMmB,QAAQ,GAAG,IAAI,CAAC1C,IAAI,KAAK,IAAI,GAAG,MAAM,GAAG,IAAI,CAACA,IAAI,CAAC0C,QAAQ;QACjE,QAAQA,QAAQ;UACd,KAAK,cAAc;YACjBpB,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAC3B,IAAI,CAACE,WAAW,GAAG,IAAI,CAACL,WAAW,GAAIhB,OAAO,CAACG,SAAS,CAC1D;YACD;UACF,KAAK7B,IAAI,CAAC,IAAI,CAACwB,SAAS,CAAC;YACvBE,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAAC,IAAI,CAACE,WAAW,CAAC;YAChD;UACF,KAAK,MAAM;UACX;YACErB,OAAO,CAACE,SAAS,GAAGe,IAAI,CAACE,KAAK,CAC3B,IAAI,CAACE,WAAW,GAAG,IAAI,CAACL,WAAW,GAAIhB,OAAO,CAACG,SAAS,CAC1D;;OAEN,MAAM;QACL;QACAH,OAAO,CAACE,SAAS,GAAG,IAAI,CAACmB,WAAW;QACpCrB,OAAO,CAACG,SAAS,GAAG,IAAI,CAACa,WAAW;QACpChB,OAAO,CAACC,OAAO,GAAGA,OAAO;;MAE3B;MACA,IAAIqB,GAAW;MACf,IAAIvB,iBAAiB,EAAE;QACrB,MAAMgB,UAAU,GACdf,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACG,SAAS,GACnC,CAACH,OAAO,CAACC,OAAO,GAAG,CAAC,IAAID,OAAO,CAAC5B,IAAI;QACtCkD,GAAG,GACD,IAAI,CAAC5C,IAAI,IAAIC,OAAO,KAAK,OAAO,GAC5BqB,OAAO,CAACU,QAAQ,CAACF,KAAK,GACtB7B,OAAO,KAAK,KAAK,GACjB,IAAI,CAACkC,SAAS,GAAGb,OAAO,CAACU,QAAQ,CAACD,GAAG,GAAGM,UAAU,GAClDE,IAAI,CAACE,KAAK,CAAC,IAAI,CAACN,SAAS,GAAG,CAAC,GAAGE,UAAU,GAAG,CAAC,CAAC;OACtD,MAAM;QACL,MAAMQ,aAAa,GACjBX,cAAc,GAAGZ,OAAO,CAACC,OAAO,GAAGD,OAAO,CAACG,SAAS;QACtD,IAAIxB,OAAO,KAAK,eAAe,EAAE;UAC/BqB,OAAO,CAAC5B,IAAI,GAAG6C,IAAI,CAACE,KAAK,CAACI,aAAa,IAAIvB,OAAO,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC;UAChEqB,GAAG,GAAG,CAAC;SACR,MAAM,IAAI3C,OAAO,KAAK,cAAc,EAAE;UACrCqB,OAAO,CAAC5B,IAAI,GAAG6C,IAAI,CAACE,KAAK,CAACI,aAAa,GAAGvB,OAAO,CAACC,OAAO,CAAC;UAC1DqB,GAAG,GAAGL,IAAI,CAACE,KAAK,CAACnB,OAAO,CAAC5B,IAAI,GAAG,CAAC,CAAC;SACnC,MAAM;UACL;UACA4B,OAAO,CAAC5B,IAAI,GAAG6C,IAAI,CAACE,KAAK,CAACI,aAAa,IAAIvB,OAAO,CAACC,OAAO,GAAG,CAAC,CAAC,CAAC;UAChEqB,GAAG,GAAGtB,OAAO,CAAC5B,IAAI;;QAEpB;QACA;QACA,IAAI,IAAI,CAACiC,KAAK,KAAKV,QAAQ,EAAE;UAC3BK,OAAO,CAACI,IAAI,GAAGJ,OAAO,CAAC5B,IAAI;UAC3B,IAAIe,aAAa,KAAKQ,QAAQ,EAAE;YAC9BK,OAAO,CAACO,QAAQ,CAACC,KAAK,GAAGc,GAAG;;UAE9B,IAAIlC,WAAW,KAAKO,QAAQ,EAAE;YAC5BK,OAAO,CAACO,QAAQ,CAACE,GAAG,GAAGa,GAAG;;;;MAIhC,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGxB,OAAO,CAACC,OAAO,EAAEuB,CAAC,EAAE,EAAE;QACxCxB,OAAO,CAACW,SAAS,CAACc,IAAI,CAACH,GAAG,CAAC;QAC3BA,GAAG,IAAItB,OAAO,CAACG,SAAS,GAAGH,OAAO,CAAC5B,IAAI;;;IAI3C,IAAI,CAACK,QAAQ,GAAGuB,OAAO;EACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}