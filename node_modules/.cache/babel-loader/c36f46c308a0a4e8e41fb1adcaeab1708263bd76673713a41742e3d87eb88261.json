{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-button\";\nconst mdiDeleteOutline = \"M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19M8,9H16V19H8V9M15.5,4L14.5,3H9.5L8.5,4H5V6H19V4H15.5Z\";\nconst mdiDevices = \"M3 6H21V4H3C1.9 4 1 4.9 1 6V18C1 19.1 1.9 20 3 20H7V18H3V6M13 12H9V13.78C8.39 14.33 8 15.11 8 16C8 16.89 8.39 17.67 9 18.22V20H13V18.22C13.61 17.67 14 16.88 14 16S13.61 14.33 13 13.78V12M11 17.5C10.17 17.5 9.5 16.83 9.5 16S10.17 14.5 11 14.5 12.5 15.17 12.5 16 11.83 17.5 11 17.5M22 8H16C15.5 8 15 8.5 15 9V19C15 19.5 15.5 20 16 20H22C22.5 20 23 19.5 23 19V9C23 8.5 22.5 8 22 8M21 18H17V10H21V18Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nconst mdiInformationOutline = \"M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z\";\nconst mdiCellphoneKey = \"M7 1C5.9 1 5 1.9 5 3V7H7V4H17V20H7V17H5V21C5 22.1 5.9 23 7 23H17C18.1 23 19 22.1 19 21V3C19 1.9 18.1 1 17 1H7M6 9C4.3 9 3 10.3 3 12S4.3 15 6 15C7.3 15 8.4 14.2 8.8 13H11V15H13V13H15V11H8.8C8.4 9.8 7.3 9 6 9M6 11C6.6 11 7 11.4 7 12S6.6 13 6 13 5 12.6 5 12 5.4 11 6 11Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport { extractSearchParam } from \"../../../../../common/url/search-params\";\nimport \"../../../../../components/ha-button-menu\";\nimport \"../../../../../components/ha-list-item\";\nimport \"../../../../../components/ha-card\";\nimport { getSignedPath } from \"../../../../../data/auth\";\nimport { getConfigEntryDiagnosticsDownloadUrl } from \"../../../../../data/diagnostics\";\nimport { OTBRCreateNetwork, OTBRSetChannel, OTBRSetNetwork, getOTBRInfo } from \"../../../../../data/otbr\";\nimport { addThreadDataSet, listThreadDataSets, removeThreadDataSet, setPreferredBorderAgent, setPreferredThreadDataSet, subscribeDiscoverThreadRouters } from \"../../../../../data/thread\";\nimport { showConfigFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog, showConfirmationDialog, showPromptDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { brandsUrl } from \"../../../../../util/brands-url\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nexport let ThreadConfigPanel = _decorate([customElement(\"thread-config-panel\")], function (_initialize, _SubscribeMixin) {\n  class ThreadConfigPanel extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: ThreadConfigPanel,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_configEntryId\",\n      value() {\n        return null;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_routers\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_datasets\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_otbrInfo\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass$auth$exter;\n        const networks = this._groupRoutersByNetwork(this._routers, this._datasets);\n        return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass} header=\"Thread\">\n        <ha-button-menu slot=\"toolbar-icon\">\n          <ha-icon-button\n            .path=${mdiDotsVertical}\n            slot=\"trigger\"\n          ></ha-icon-button>\n          <a\n            href=${getConfigEntryDiagnosticsDownloadUrl(this._configEntryId || \"\")}\n            target=\"_blank\"\n            @click=${this._signUrl}\n          >\n            <mwc-list-item>\n              ${this.hass.localize(\"ui.panel.config.integrations.config_entry.download_diagnostics\")}\n            </mwc-list-item>\n          </a>\n          <mwc-list-item @click=${this._addTLV}\n            >${this.hass.localize(\"ui.panel.config.thread.add_dataset_from_tlv\")}</mwc-list-item\n          >\n          ${!this._otbrInfo ? html`<mwc-list-item @click=${this._addOTBR}\n                >${this.hass.localize(\"ui.panel.config.thread.add_open_thread_border_router\")}</mwc-list-item\n              >` : \"\"}\n        </ha-button-menu>\n        <div class=\"content\">\n          <h1>${this.hass.localize(\"ui.panel.config.thread.my_network\")}</h1>\n          ${networks.preferred ? this._renderNetwork(networks.preferred) : html`<ha-card>\n                <div class=\"card-content no-routers\">\n                  <h3>\n                    ${this.hass.localize(\"ui.panel.config.thread.no_preferred_network\")}\n                  </h3>\n                  <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n                  <mwc-button @click=${this._addOTBR}\n                    >${this.hass.localize(\"ui.panel.config.thread.add_open_thread_border_router\")}</mwc-button\n                  >\n                </div>\n              </ha-card>`}\n          ${networks.networks.length ? html`<h3>\n                  ${this.hass.localize(\"ui.panel.config.thread.other_networks\")}\n                </h3>\n                ${networks.networks.map(network => this._renderNetwork(network))}` : \"\"}\n        </div>\n        ${(_this$hass$auth$exter = this.hass.auth.external) !== null && _this$hass$auth$exter !== void 0 && _this$hass$auth$exter.config.canImportThreadCredentials ? html`<ha-fab\n              slot=\"fab\"\n              @click=${this._importExternalThreadCredentials}\n              extended\n              label=\"Import credentials\"\n              ><ha-svg-icon slot=\"icon\" .path=${mdiCellphoneKey}></ha-svg-icon\n            ></ha-fab>` : nothing}\n      </hass-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_renderNetwork\",\n      value: function _renderNetwork(network) {\n        var _network$routers, _network$routers2, _network$dataset2, _this$_otbrInfo3;\n        return html`<ha-card>\n      <div class=\"card-header\">\n        ${network.name}${network.dataset ? html`<div>\n              <ha-icon-button\n                .networkDataset=${network.dataset}\n                .path=${mdiInformationOutline}\n                @click=${this._showDatasetInfo}\n              ></ha-icon-button\n              >${!network.dataset.preferred && !((_network$routers = network.routers) !== null && _network$routers !== void 0 && _network$routers.length) ? html`<ha-icon-button\n                    .networkDataset=${network.dataset}\n                    .path=${mdiDeleteOutline}\n                    @click=${this._removeDataset}\n                  ></ha-icon-button>` : \"\"}\n            </div>` : \"\"}\n      </div>\n      ${(_network$routers2 = network.routers) !== null && _network$routers2 !== void 0 && _network$routers2.length ? html`<div class=\"card-content routers\">\n              <h4>\n                ${this.hass.localize(\"ui.panel.config.thread.border_routers\", {\n          count: network.routers.length\n        })}\n              </h4>\n            </div>\n            ${network.routers.map(router => {\n          var _this$_otbrInfo, _this$hass$themes, _router$server, _this$_otbrInfo2, _network$dataset;\n          const showOverflow = \"dataset\" in network && router.border_agent_id || router.extended_address === ((_this$_otbrInfo = this._otbrInfo) === null || _this$_otbrInfo === void 0 ? void 0 : _this$_otbrInfo.extended_address);\n          return html`<ha-list-item\n                class=\"router\"\n                twoline\n                graphic=\"avatar\"\n                .hasMeta=${showOverflow}\n              >\n                <img\n                  slot=\"graphic\"\n                  .src=${brandsUrl({\n            domain: router.brand,\n            brand: true,\n            type: \"icon\",\n            darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n          })}\n                  alt=${router.brand}\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  @error=${this._onImageError}\n                  @load=${this._onImageLoad}\n                />\n                ${router.model_name || ((_router$server = router.server) === null || _router$server === void 0 ? void 0 : _router$server.replace(\".local.\", \"\")) || \"\"}\n                <span slot=\"secondary\">${router.server}</span>\n                ${showOverflow ? html`${network.dataset && router.extended_address === network.dataset.preferred_extended_address ? html`<ha-svg-icon\n                            .path=${mdiCellphoneKey}\n                            .title=${this.hass.localize(\"ui.panel.config.thread.default_router\")}\n                          ></ha-svg-icon>` : \"\"}\n                      <ha-button-menu\n                        slot=\"meta\"\n                        .network=${network}\n                        .router=${router}\n                        @action=${this._handleRouterAction}\n                      >\n                        <ha-icon-button\n                          .label=${this.hass.localize(\"ui.common.overflow_menu\")}\n                          .path=${mdiDotsVertical}\n                          slot=\"trigger\"\n                        ></ha-icon-button>\n                        ${network.dataset && router.border_agent_id ? html`<ha-list-item\n                              .disabled=${router.border_agent_id === network.dataset.preferred_border_agent_id}\n                            >\n                              ${router.border_agent_id === network.dataset.preferred_border_agent_id ? this.hass.localize(\"ui.panel.config.thread.default_router\") : this.hass.localize(\"ui.panel.config.thread.set_default_router\")}\n                            </ha-list-item>` : \"\"}\n                        ${router.extended_address === ((_this$_otbrInfo2 = this._otbrInfo) === null || _this$_otbrInfo2 === void 0 ? void 0 : _this$_otbrInfo2.extended_address) ? html`<ha-list-item>\n                                ${this.hass.localize(\"ui.panel.config.thread.reset_border_router\")}</ha-list-item\n                              >\n                              <ha-list-item>\n                                ${this.hass.localize(\"ui.panel.config.thread.change_channel\")}</ha-list-item\n                              >\n                              ${(_network$dataset = network.dataset) !== null && _network$dataset !== void 0 && _network$dataset.preferred ? \"\" : html`<ha-list-item>\n                                    ${this.hass.localize(\"ui.panel.config.thread.add_to_my_network\")}\n                                  </ha-list-item>`}` : \"\"}\n                      </ha-button-menu>` : \"\"}\n              </ha-list-item>`;\n        })}` : html`<div class=\"card-content no-routers\">\n            <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n            ${(_network$dataset2 = network.dataset) !== null && _network$dataset2 !== void 0 && _network$dataset2.extended_pan_id && (_this$_otbrInfo3 = this._otbrInfo) !== null && _this$_otbrInfo3 !== void 0 && (_this$_otbrInfo3 = _this$_otbrInfo3.active_dataset_tlvs) !== null && _this$_otbrInfo3 !== void 0 && _this$_otbrInfo3.includes(network.dataset.extended_pan_id) ? html`${this.hass.localize(\"ui.panel.config.thread.no_routers_otbr_network\")}\n                  <mwc-button @click=${this._resetBorderRouter}\n                    >${this.hass.localize(\"ui.panel.config.thread.reset_border_router\")}</mwc-button\n                  >` : this.hass.localize(\"ui.panel.config.thread.no_border_routers\")}\n          </div> `}\n      ${network.dataset && !network.dataset.preferred ? html`<div class=\"card-actions\">\n            <mwc-button\n              .datasetId=${network.dataset.dataset_id}\n              @click=${this._setPreferred}\n              >Make preferred network</mwc-button\n            >\n          </div>` : \"\"}\n    </ha-card>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showDatasetInfo\",\n      value: async function _showDatasetInfo(ev) {\n        const dataset = ev.currentTarget.networkDataset;\n        if (this._otbrInfo) {\n          var _this$_otbrInfo$activ;\n          if (dataset.extended_pan_id && (_this$_otbrInfo$activ = this._otbrInfo.active_dataset_tlvs) !== null && _this$_otbrInfo$activ !== void 0 && _this$_otbrInfo$activ.includes(dataset.extended_pan_id)) {\n            showAlertDialog(this, {\n              title: dataset.network_name,\n              text: html`Network name: ${dataset.network_name}<br />\n            Channel: ${dataset.channel}<br />\n            Dataset id: ${dataset.dataset_id}<br />\n            Pan id: ${dataset.pan_id}<br />\n            Extended Pan id: ${dataset.extended_pan_id}<br />\n            OTBR URL: ${this._otbrInfo.url}<br />\n            Active dataset TLVs: ${this._otbrInfo.active_dataset_tlvs}`\n            });\n            return;\n          }\n        }\n        showAlertDialog(this, {\n          title: dataset.network_name,\n          text: html`Network name: ${dataset.network_name}<br />\n        Channel: ${dataset.channel}<br />\n        Dataset id: ${dataset.dataset_id}<br />\n        Pan id: ${dataset.pan_id}<br />\n        Extended Pan id: ${dataset.extended_pan_id}`\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_importExternalThreadCredentials\",\n      value: function _importExternalThreadCredentials() {\n        this.hass.auth.external.fireMessage({\n          type: \"thread/import_credentials\"\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageError\",\n      value: function _onImageError(ev) {\n        ev.target.style.display = \"none\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_onImageLoad\",\n      value: function _onImageLoad(ev) {\n        ev.target.style.display = \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        return [subscribeDiscoverThreadRouters(this.hass, routers => {\n          this._routers = routers;\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProps) {\n        _get(_getPrototypeOf(ThreadConfigPanel.prototype), \"firstUpdated\", this).call(this, changedProps);\n        this._refresh();\n        this._configEntryId = extractSearchParam(\"config_entry\");\n      }\n    }, {\n      kind: \"field\",\n      key: \"_groupRoutersByNetwork\",\n      value() {\n        return memoizeOne((routers, datasets) => {\n          let preferred;\n          const networks = {};\n          for (const router of routers) {\n            const network = router.extended_pan_id;\n            if (network in networks) {\n              networks[network].routers.push(router);\n            } else {\n              networks[network] = {\n                name: router.network_name || \"\",\n                routers: [router]\n              };\n            }\n          }\n          for (const dataset of datasets) {\n            const network = dataset.extended_pan_id;\n            if (!network) {\n              continue;\n            }\n            if (dataset.preferred) {\n              var _networks$network;\n              preferred = {\n                name: dataset.network_name,\n                dataset: dataset,\n                routers: (_networks$network = networks[network]) === null || _networks$network === void 0 ? void 0 : _networks$network.routers\n              };\n              delete networks[network];\n              continue;\n            }\n            if (network in networks) {\n              networks[network].dataset = dataset;\n            } else {\n              networks[network] = {\n                name: dataset.network_name,\n                dataset: dataset\n              };\n            }\n          }\n          return {\n            preferred,\n            networks: Object.values(networks).sort((a, b) => stringCompare(a.name, b.name, this.hass.locale.language))\n          };\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_refresh\",\n      value: async function _refresh() {\n        listThreadDataSets(this.hass).then(datasets => {\n          this._datasets = datasets.datasets;\n        });\n        if (!isComponentLoaded(this.hass, \"otbr\")) {\n          return;\n        }\n        try {\n          this._otbrInfo = await getOTBRInfo(this.hass);\n        } catch (err) {\n          this._otbrInfo = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_signUrl\",\n      value: async function _signUrl(ev) {\n        const anchor = ev.target.closest(\"a\");\n        ev.preventDefault();\n        const signedUrl = await getSignedPath(this.hass, anchor.getAttribute(\"href\"));\n        fileDownload(signedUrl.path);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addOTBR\",\n      value: function _addOTBR() {\n        var _this$hass$userData;\n        showConfigFlowDialog(this, {\n          dialogClosedCallback: () => {\n            this._refresh();\n          },\n          startFlowHandler: \"otbr\",\n          showAdvanced: (_this$hass$userData = this.hass.userData) === null || _this$hass$userData === void 0 ? void 0 : _this$hass$userData.showAdvanced\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleRouterAction\",\n      value: function _handleRouterAction(ev) {\n        const network = ev.currentTarget.network;\n        const router = ev.currentTarget.router;\n        const index = network.dataset && router.border_agent_id ? Number(ev.detail.index) : Number(ev.detail.index) + 1;\n        switch (index) {\n          case 0:\n            this._setPreferredBorderAgent(network.dataset, router);\n            break;\n          case 1:\n            this._resetBorderRouter();\n            break;\n          case 2:\n            this._changeChannel();\n            break;\n          case 3:\n            this._setDataset();\n            break;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_resetBorderRouter\",\n      value: async function _resetBorderRouter() {\n        const confirm = await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.thread.confirm_reset_border_router\"),\n          text: this.hass.localize(\"ui.panel.config.thread.confirm_reset_border_router_text\")\n        });\n        if (!confirm) {\n          return;\n        }\n        try {\n          await OTBRCreateNetwork(this.hass);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.thread.otbr_config_failed\"),\n            text: err.message\n          });\n        }\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setDataset\",\n      value: async function _setDataset() {\n        var _networks$preferred;\n        const networks = this._groupRoutersByNetwork(this._routers, this._datasets);\n        const preferedDatasetId = (_networks$preferred = networks.preferred) === null || _networks$preferred === void 0 || (_networks$preferred = _networks$preferred.dataset) === null || _networks$preferred === void 0 ? void 0 : _networks$preferred.dataset_id;\n        if (!preferedDatasetId) {\n          return;\n        }\n        const confirm = await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.thread.confirm_set_dataset_border_router\"),\n          text: this.hass.localize(\"ui.panel.config.thread.confirm_set_dataset_border_router_text\")\n        });\n        if (!confirm) {\n          return;\n        }\n        try {\n          await OTBRSetNetwork(this.hass, preferedDatasetId);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.thread.otbr_config_failed\"),\n            text: err.message\n          });\n        }\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setPreferred\",\n      value: async function _setPreferred(ev) {\n        const datasetId = ev.target.datasetId;\n        await setPreferredThreadDataSet(this.hass, datasetId);\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_setPreferredBorderAgent\",\n      value: async function _setPreferredBorderAgent(dataset, router) {\n        await setPreferredBorderAgent(this.hass, dataset.dataset_id, router.border_agent_id, router.extended_address);\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addTLV\",\n      value: async function _addTLV() {\n        const tlv = await showPromptDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.thread.add_dataset\"),\n          inputLabel: this.hass.localize(\"ui.panel.config.thread.add_dataset_label\"),\n          confirmText: this.hass.localize(\"ui.panel.config.thread.add_dataset_button\")\n        });\n        if (!tlv) {\n          return;\n        }\n        try {\n          await addThreadDataSet(this.hass, \"manual\", tlv);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: \"Error\",\n            text: err.message || err\n          });\n        }\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_removeDataset\",\n      value: async function _removeDataset(ev) {\n        const dataset = ev.currentTarget.networkDataset;\n        const confirm = await showConfirmationDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.thread.confirm_delete_dataset\", {\n            name: dataset.network_name\n          }),\n          text: this.hass.localize(\"ui.panel.config.thread.confirm_delete_dataset_text\"),\n          destructive: true,\n          confirmText: this.hass.localize(\"ui.common.delete\")\n        });\n        if (!confirm) {\n          return;\n        }\n        try {\n          await removeThreadDataSet(this.hass, dataset.dataset_id);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: \"Error\",\n            text: err.message || err\n          });\n        }\n        this._refresh();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_changeChannel\",\n      value: async function _changeChannel() {\n        var _this$_otbrInfo4;\n        const currentChannel = (_this$_otbrInfo4 = this._otbrInfo) === null || _this$_otbrInfo4 === void 0 ? void 0 : _this$_otbrInfo4.channel;\n        const channelStr = await showPromptDialog(this, {\n          title: this.hass.localize(\"ui.panel.config.thread.change_channel\"),\n          text: this.hass.localize(\"ui.panel.config.thread.change_channel_text\"),\n          inputLabel: this.hass.localize(\"ui.panel.config.thread.change_channel_label\"),\n          confirmText: this.hass.localize(\"ui.panel.config.thread.change_channel\"),\n          inputType: \"number\",\n          inputMin: \"11\",\n          inputMax: \"26\",\n          defaultValue: currentChannel ? currentChannel.toString() : undefined\n        });\n        if (!channelStr) {\n          return;\n        }\n        const channel = parseInt(channelStr);\n        if (channel < 11 || channel > 26) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.thread.change_channel_invalid\"),\n            text: this.hass.localize(\"ui.panel.config.thread.change_channel_range\")\n          });\n          return;\n        }\n        try {\n          const result = await OTBRSetChannel(this.hass, channel);\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.thread.change_channel_initiated_title\"),\n            text: this.hass.localize(\"ui.panel.config.thread.change_channel_initiated_text\", {\n              delay: Math.floor(result.delay / 60)\n            })\n          });\n        } catch (err) {\n          if (err.code === \"multiprotocol_enabled\") {\n            showAlertDialog(this, {\n              title: this.hass.localize(\"ui.panel.config.thread.change_channel_multiprotocol_enabled_title\"),\n              text: this.hass.localize(\"ui.panel.config.thread.change_channel_multiprotocol_enabled_text\")\n            });\n            return;\n          }\n          showAlertDialog(this, {\n            title: \"Error\",\n            text: err.message || err\n          });\n        }\n        this._refresh();\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return [haStyle, css`\n      .content {\n        padding: 24px 8px 32px;\n        max-width: 600px;\n        margin: 0 auto;\n        direction: ltr;\n      }\n      ha-list-item.router {\n        --mdc-list-item-meta-size: auto;\n        --mdc-list-item-meta-display: flex;\n        --mdc-list-side-padding: 16px;\n        cursor: default;\n        overflow: visible;\n      }\n      ha-list-item img {\n        border-radius: 0;\n      }\n      ha-svg-icon[slot=\"meta\"] {\n        width: 24px;\n      }\n      ha-button-menu a {\n        text-decoration: none;\n      }\n      .routers {\n        padding-bottom: 0;\n      }\n      .no-routers {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n      }\n      .no-routers ha-svg-icon {\n        background-color: var(--light-primary-color);\n        color: var(--secondary-text-color);\n        padding: 16px;\n        border-radius: 50%;\n        margin-bottom: 8px;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n      h4 {\n        margin: 0;\n      }\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n      }\n    `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["mdiDeleteOutline","mdiDevices","mdiDotsVertical","mdiInformationOutline","mdiCellphoneKey","LitElement","css","html","nothing","customElement","property","state","memoizeOne","isComponentLoaded","stringCompare","extractSearchParam","getSignedPath","getConfigEntryDiagnosticsDownloadUrl","OTBRCreateNetwork","OTBRSetChannel","OTBRSetNetwork","getOTBRInfo","addThreadDataSet","listThreadDataSets","removeThreadDataSet","setPreferredBorderAgent","setPreferredThreadDataSet","subscribeDiscoverThreadRouters","showConfigFlowDialog","showAlertDialog","showConfirmationDialog","showPromptDialog","SubscribeMixin","haStyle","brandsUrl","fileDownload","ThreadConfigPanel","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","render","_this$hass$auth$exter","networks","_groupRoutersByNetwork","_routers","_datasets","narrow","hass","_configEntryId","_signUrl","localize","_addTLV","_otbrInfo","_addOTBR","preferred","_renderNetwork","length","map","network","auth","external","config","canImportThreadCredentials","_importExternalThreadCredentials","_network$routers","_network$routers2","_network$dataset2","_this$_otbrInfo3","name","dataset","_showDatasetInfo","routers","_removeDataset","count","router","_this$_otbrInfo","_this$hass$themes","_router$server","_this$_otbrInfo2","_network$dataset","showOverflow","border_agent_id","extended_address","domain","brand","darkOptimized","themes","darkMode","_onImageError","_onImageLoad","model_name","server","replace","preferred_extended_address","_handleRouterAction","preferred_border_agent_id","extended_pan_id","active_dataset_tlvs","includes","_resetBorderRouter","dataset_id","_setPreferred","ev","currentTarget","networkDataset","_this$_otbrInfo$activ","title","network_name","text","channel","pan_id","url","fireMessage","target","style","display","hassSubscribe","firstUpdated","changedProps","_get","_getPrototypeOf","prototype","call","_refresh","datasets","push","_networks$network","Object","values","sort","a","b","locale","language","then","err","undefined","anchor","closest","preventDefault","signedUrl","getAttribute","path","_this$hass$userData","dialogClosedCallback","startFlowHandler","showAdvanced","userData","index","Number","detail","_setPreferredBorderAgent","_changeChannel","_setDataset","confirm","message","_networks$preferred","preferedDatasetId","datasetId","tlv","inputLabel","confirmText","destructive","_this$_otbrInfo4","currentChannel","channelStr","inputType","inputMin","inputMax","defaultValue","toString","parseInt","result","delay","Math","floor","code","static"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/integrations/integration-panels/thread/thread-config-panel.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list\";\nimport {\n  mdiDeleteOutline,\n  mdiDevices,\n  mdiDotsVertical,\n  mdiInformationOutline,\n  mdiCellphoneKey,\n} from \"@mdi/js\";\nimport {\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../../../common/config/is_component_loaded\";\nimport { stringCompare } from \"../../../../../common/string/compare\";\nimport { extractSearchParam } from \"../../../../../common/url/search-params\";\nimport \"../../../../../components/ha-button-menu\";\nimport \"../../../../../components/ha-list-item\";\nimport \"../../../../../components/ha-card\";\nimport { getSignedPath } from \"../../../../../data/auth\";\nimport { getConfigEntryDiagnosticsDownloadUrl } from \"../../../../../data/diagnostics\";\nimport {\n  OTBRCreateNetwork,\n  OTBRInfo,\n  OTBRSetChannel,\n  OTBRSetNetwork,\n  getOTBRInfo,\n} from \"../../../../../data/otbr\";\nimport {\n  ThreadDataSet,\n  ThreadRouter,\n  addThreadDataSet,\n  listThreadDataSets,\n  removeThreadDataSet,\n  setPreferredBorderAgent,\n  setPreferredThreadDataSet,\n  subscribeDiscoverThreadRouters,\n} from \"../../../../../data/thread\";\nimport { showConfigFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n  showPromptDialog,\n} from \"../../../../../dialogs/generic/show-dialog-box\";\nimport \"../../../../../layouts/hass-subpage\";\nimport { SubscribeMixin } from \"../../../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../../types\";\nimport { brandsUrl } from \"../../../../../util/brands-url\";\nimport { fileDownload } from \"../../../../../util/file_download\";\n\ninterface ThreadNetwork {\n  name: string;\n  dataset?: ThreadDataSet;\n  routers?: ThreadRouter[];\n}\n\n@customElement(\"thread-config-panel\")\nexport class ThreadConfigPanel extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @state() private _configEntryId: string | null = null;\n\n  @state() private _routers: ThreadRouter[] = [];\n\n  @state() private _datasets: ThreadDataSet[] = [];\n\n  @state() private _otbrInfo?: OTBRInfo;\n\n  protected render(): TemplateResult {\n    const networks = this._groupRoutersByNetwork(this._routers, this._datasets);\n\n    return html`\n      <hass-subpage .narrow=${this.narrow} .hass=${this.hass} header=\"Thread\">\n        <ha-button-menu slot=\"toolbar-icon\">\n          <ha-icon-button\n            .path=${mdiDotsVertical}\n            slot=\"trigger\"\n          ></ha-icon-button>\n          <a\n            href=${getConfigEntryDiagnosticsDownloadUrl(\n              this._configEntryId || \"\"\n            )}\n            target=\"_blank\"\n            @click=${this._signUrl}\n          >\n            <mwc-list-item>\n              ${this.hass.localize(\n                \"ui.panel.config.integrations.config_entry.download_diagnostics\"\n              )}\n            </mwc-list-item>\n          </a>\n          <mwc-list-item @click=${this._addTLV}\n            >${this.hass.localize(\n              \"ui.panel.config.thread.add_dataset_from_tlv\"\n            )}</mwc-list-item\n          >\n          ${!this._otbrInfo\n            ? html`<mwc-list-item @click=${this._addOTBR}\n                >${this.hass.localize(\n                  \"ui.panel.config.thread.add_open_thread_border_router\"\n                )}</mwc-list-item\n              >`\n            : \"\"}\n        </ha-button-menu>\n        <div class=\"content\">\n          <h1>${this.hass.localize(\"ui.panel.config.thread.my_network\")}</h1>\n          ${networks.preferred\n            ? this._renderNetwork(networks.preferred)\n            : html`<ha-card>\n                <div class=\"card-content no-routers\">\n                  <h3>\n                    ${this.hass.localize(\n                      \"ui.panel.config.thread.no_preferred_network\"\n                    )}\n                  </h3>\n                  <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n                  <mwc-button @click=${this._addOTBR}\n                    >${this.hass.localize(\n                      \"ui.panel.config.thread.add_open_thread_border_router\"\n                    )}</mwc-button\n                  >\n                </div>\n              </ha-card>`}\n          ${networks.networks.length\n            ? html`<h3>\n                  ${this.hass.localize(\"ui.panel.config.thread.other_networks\")}\n                </h3>\n                ${networks.networks.map((network) =>\n                  this._renderNetwork(network)\n                )}`\n            : \"\"}\n        </div>\n        ${this.hass.auth.external?.config.canImportThreadCredentials\n          ? html`<ha-fab\n              slot=\"fab\"\n              @click=${this._importExternalThreadCredentials}\n              extended\n              label=\"Import credentials\"\n              ><ha-svg-icon slot=\"icon\" .path=${mdiCellphoneKey}></ha-svg-icon\n            ></ha-fab>`\n          : nothing}\n      </hass-subpage>\n    `;\n  }\n\n  private _renderNetwork(network: ThreadNetwork) {\n    return html`<ha-card>\n      <div class=\"card-header\">\n        ${network.name}${network.dataset\n          ? html`<div>\n              <ha-icon-button\n                .networkDataset=${network.dataset}\n                .path=${mdiInformationOutline}\n                @click=${this._showDatasetInfo}\n              ></ha-icon-button\n              >${!network.dataset.preferred && !network.routers?.length\n                ? html`<ha-icon-button\n                    .networkDataset=${network.dataset}\n                    .path=${mdiDeleteOutline}\n                    @click=${this._removeDataset}\n                  ></ha-icon-button>`\n                : \"\"}\n            </div>`\n          : \"\"}\n      </div>\n      ${network.routers?.length\n        ? html`<div class=\"card-content routers\">\n              <h4>\n                ${this.hass.localize(\"ui.panel.config.thread.border_routers\", {\n                  count: network.routers.length,\n                })}\n              </h4>\n            </div>\n            ${network.routers.map((router) => {\n              const showOverflow =\n                (\"dataset\" in network && router.border_agent_id) ||\n                router.extended_address === this._otbrInfo?.extended_address;\n              return html`<ha-list-item\n                class=\"router\"\n                twoline\n                graphic=\"avatar\"\n                .hasMeta=${showOverflow}\n              >\n                <img\n                  slot=\"graphic\"\n                  .src=${brandsUrl({\n                    domain: router.brand,\n                    brand: true,\n                    type: \"icon\",\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  alt=${router.brand}\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  @error=${this._onImageError}\n                  @load=${this._onImageLoad}\n                />\n                ${router.model_name ||\n                router.server?.replace(\".local.\", \"\") ||\n                \"\"}\n                <span slot=\"secondary\">${router.server}</span>\n                ${showOverflow\n                  ? html`${network.dataset &&\n                      router.extended_address ===\n                        network.dataset.preferred_extended_address\n                        ? html`<ha-svg-icon\n                            .path=${mdiCellphoneKey}\n                            .title=${this.hass.localize(\n                              \"ui.panel.config.thread.default_router\"\n                            )}\n                          ></ha-svg-icon>`\n                        : \"\"}\n                      <ha-button-menu\n                        slot=\"meta\"\n                        .network=${network}\n                        .router=${router}\n                        @action=${this._handleRouterAction}\n                      >\n                        <ha-icon-button\n                          .label=${this.hass.localize(\n                            \"ui.common.overflow_menu\"\n                          )}\n                          .path=${mdiDotsVertical}\n                          slot=\"trigger\"\n                        ></ha-icon-button>\n                        ${network.dataset && router.border_agent_id\n                          ? html`<ha-list-item\n                              .disabled=${router.border_agent_id ===\n                              network.dataset.preferred_border_agent_id}\n                            >\n                              ${router.border_agent_id ===\n                              network.dataset.preferred_border_agent_id\n                                ? this.hass.localize(\n                                    \"ui.panel.config.thread.default_router\"\n                                  )\n                                : this.hass.localize(\n                                    \"ui.panel.config.thread.set_default_router\"\n                                  )}\n                            </ha-list-item>`\n                          : \"\"}\n                        ${router.extended_address ===\n                        this._otbrInfo?.extended_address\n                          ? html`<ha-list-item>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.thread.reset_border_router\"\n                                )}</ha-list-item\n                              >\n                              <ha-list-item>\n                                ${this.hass.localize(\n                                  \"ui.panel.config.thread.change_channel\"\n                                )}</ha-list-item\n                              >\n                              ${network.dataset?.preferred\n                                ? \"\"\n                                : html`<ha-list-item>\n                                    ${this.hass.localize(\n                                      \"ui.panel.config.thread.add_to_my_network\"\n                                    )}\n                                  </ha-list-item>`}`\n                          : \"\"}\n                      </ha-button-menu>`\n                  : \"\"}\n              </ha-list-item>`;\n            })}`\n        : html`<div class=\"card-content no-routers\">\n            <ha-svg-icon .path=${mdiDevices}></ha-svg-icon>\n            ${network.dataset?.extended_pan_id &&\n            this._otbrInfo?.active_dataset_tlvs?.includes(\n              network.dataset.extended_pan_id\n            )\n              ? html`${this.hass.localize(\n                    \"ui.panel.config.thread.no_routers_otbr_network\"\n                  )}\n                  <mwc-button @click=${this._resetBorderRouter}\n                    >${this.hass.localize(\n                      \"ui.panel.config.thread.reset_border_router\"\n                    )}</mwc-button\n                  >`\n              : this.hass.localize(\"ui.panel.config.thread.no_border_routers\")}\n          </div> `}\n      ${network.dataset && !network.dataset.preferred\n        ? html`<div class=\"card-actions\">\n            <mwc-button\n              .datasetId=${network.dataset.dataset_id}\n              @click=${this._setPreferred}\n              >Make preferred network</mwc-button\n            >\n          </div>`\n        : \"\"}\n    </ha-card>`;\n  }\n\n  private async _showDatasetInfo(ev: Event) {\n    const dataset = (ev.currentTarget as any).networkDataset as ThreadDataSet;\n    if (this._otbrInfo) {\n      if (\n        dataset.extended_pan_id &&\n        this._otbrInfo.active_dataset_tlvs?.includes(dataset.extended_pan_id)\n      ) {\n        showAlertDialog(this, {\n          title: dataset.network_name,\n          text: html`Network name: ${dataset.network_name}<br />\n            Channel: ${dataset.channel}<br />\n            Dataset id: ${dataset.dataset_id}<br />\n            Pan id: ${dataset.pan_id}<br />\n            Extended Pan id: ${dataset.extended_pan_id}<br />\n            OTBR URL: ${this._otbrInfo.url}<br />\n            Active dataset TLVs: ${this._otbrInfo.active_dataset_tlvs}`,\n        });\n        return;\n      }\n    }\n    showAlertDialog(this, {\n      title: dataset.network_name,\n      text: html`Network name: ${dataset.network_name}<br />\n        Channel: ${dataset.channel}<br />\n        Dataset id: ${dataset.dataset_id}<br />\n        Pan id: ${dataset.pan_id}<br />\n        Extended Pan id: ${dataset.extended_pan_id}`,\n    });\n  }\n\n  private _importExternalThreadCredentials() {\n    this.hass.auth.external!.fireMessage({\n      type: \"thread/import_credentials\",\n    });\n  }\n\n  private _onImageError(ev) {\n    ev.target.style.display = \"none\";\n  }\n\n  private _onImageLoad(ev) {\n    ev.target.style.display = \"\";\n  }\n\n  hassSubscribe() {\n    return [\n      subscribeDiscoverThreadRouters(this.hass, (routers: ThreadRouter[]) => {\n        this._routers = routers;\n      }),\n    ];\n  }\n\n  protected override firstUpdated(changedProps: PropertyValues) {\n    super.firstUpdated(changedProps);\n\n    this._refresh();\n\n    this._configEntryId = extractSearchParam(\"config_entry\");\n  }\n\n  private _groupRoutersByNetwork = memoizeOne(\n    (\n      routers: ThreadRouter[],\n      datasets: ThreadDataSet[]\n    ): { preferred?: ThreadNetwork; networks: ThreadNetwork[] } => {\n      let preferred: ThreadNetwork | undefined;\n      const networks: { [key: string]: ThreadNetwork } = {};\n      for (const router of routers) {\n        const network = router.extended_pan_id;\n        if (network in networks) {\n          networks[network].routers!.push(router);\n        } else {\n          networks[network] = {\n            name: router.network_name || \"\",\n            routers: [router],\n          };\n        }\n      }\n      for (const dataset of datasets) {\n        const network = dataset.extended_pan_id;\n        if (!network) {\n          continue;\n        }\n        if (dataset.preferred) {\n          preferred = {\n            name: dataset.network_name,\n            dataset: dataset,\n            routers: networks[network]?.routers,\n          };\n          delete networks[network];\n          continue;\n        }\n        if (network in networks) {\n          networks[network].dataset = dataset;\n        } else {\n          networks[network] = { name: dataset.network_name, dataset: dataset };\n        }\n      }\n      return {\n        preferred,\n        networks: Object.values(networks).sort((a, b) =>\n          stringCompare(a.name, b.name, this.hass.locale.language)\n        ),\n      };\n    }\n  );\n\n  private async _refresh() {\n    listThreadDataSets(this.hass).then((datasets) => {\n      this._datasets = datasets.datasets;\n    });\n    if (!isComponentLoaded(this.hass, \"otbr\")) {\n      return;\n    }\n    try {\n      this._otbrInfo = await getOTBRInfo(this.hass);\n    } catch (err) {\n      this._otbrInfo = undefined;\n    }\n  }\n\n  private async _signUrl(ev) {\n    const anchor = ev.target.closest(\"a\");\n    ev.preventDefault();\n    const signedUrl = await getSignedPath(\n      this.hass,\n      anchor.getAttribute(\"href\")\n    );\n    fileDownload(signedUrl.path);\n  }\n\n  private _addOTBR() {\n    showConfigFlowDialog(this, {\n      dialogClosedCallback: () => {\n        this._refresh();\n      },\n      startFlowHandler: \"otbr\",\n      showAdvanced: this.hass.userData?.showAdvanced,\n    });\n  }\n\n  private _handleRouterAction(ev: CustomEvent<ActionDetail>) {\n    const network = (ev.currentTarget as any).network as ThreadNetwork;\n    const router = (ev.currentTarget as any).router as ThreadRouter;\n    const index =\n      network.dataset && router.border_agent_id\n        ? Number(ev.detail.index)\n        : Number(ev.detail.index) + 1;\n    switch (index) {\n      case 0:\n        this._setPreferredBorderAgent(network.dataset!, router);\n        break;\n      case 1:\n        this._resetBorderRouter();\n        break;\n      case 2:\n        this._changeChannel();\n        break;\n      case 3:\n        this._setDataset();\n        break;\n    }\n  }\n\n  private async _resetBorderRouter() {\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.thread.confirm_reset_border_router\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.thread.confirm_reset_border_router_text\"\n      ),\n    });\n    if (!confirm) {\n      return;\n    }\n    try {\n      await OTBRCreateNetwork(this.hass);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.thread.otbr_config_failed\"),\n        text: err.message,\n      });\n    }\n    this._refresh();\n  }\n\n  private async _setDataset() {\n    const networks = this._groupRoutersByNetwork(this._routers, this._datasets);\n    const preferedDatasetId = networks.preferred?.dataset?.dataset_id;\n    if (!preferedDatasetId) {\n      return;\n    }\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.thread.confirm_set_dataset_border_router\"\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.thread.confirm_set_dataset_border_router_text\"\n      ),\n    });\n    if (!confirm) {\n      return;\n    }\n    try {\n      await OTBRSetNetwork(this.hass, preferedDatasetId);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.thread.otbr_config_failed\"),\n        text: err.message,\n      });\n    }\n    this._refresh();\n  }\n\n  private async _setPreferred(ev) {\n    const datasetId = ev.target.datasetId;\n    await setPreferredThreadDataSet(this.hass, datasetId);\n    this._refresh();\n  }\n\n  private async _setPreferredBorderAgent(\n    dataset: ThreadDataSet,\n    router: ThreadRouter\n  ) {\n    await setPreferredBorderAgent(\n      this.hass,\n      dataset.dataset_id,\n      router.border_agent_id,\n      router.extended_address\n    );\n    this._refresh();\n  }\n\n  private async _addTLV() {\n    const tlv = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.thread.add_dataset\"),\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.thread.add_dataset_label\"\n      ),\n      confirmText: this.hass.localize(\n        \"ui.panel.config.thread.add_dataset_button\"\n      ),\n    });\n    if (!tlv) {\n      return;\n    }\n    try {\n      await addThreadDataSet(this.hass, \"manual\", tlv);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Error\",\n        text: err.message || err,\n      });\n    }\n    this._refresh();\n  }\n\n  private async _removeDataset(ev: Event) {\n    const dataset = (ev.currentTarget as any).networkDataset as ThreadDataSet;\n    const confirm = await showConfirmationDialog(this, {\n      title: this.hass.localize(\n        \"ui.panel.config.thread.confirm_delete_dataset\",\n        { name: dataset.network_name }\n      ),\n      text: this.hass.localize(\n        \"ui.panel.config.thread.confirm_delete_dataset_text\"\n      ),\n      destructive: true,\n      confirmText: this.hass.localize(\"ui.common.delete\"),\n    });\n    if (!confirm) {\n      return;\n    }\n    try {\n      await removeThreadDataSet(this.hass, dataset.dataset_id);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Error\",\n        text: err.message || err,\n      });\n    }\n    this._refresh();\n  }\n\n  private async _changeChannel() {\n    const currentChannel = this._otbrInfo?.channel;\n    const channelStr = await showPromptDialog(this, {\n      title: this.hass.localize(\"ui.panel.config.thread.change_channel\"),\n      text: this.hass.localize(\"ui.panel.config.thread.change_channel_text\"),\n      inputLabel: this.hass.localize(\n        \"ui.panel.config.thread.change_channel_label\"\n      ),\n      confirmText: this.hass.localize(\"ui.panel.config.thread.change_channel\"),\n      inputType: \"number\",\n      inputMin: \"11\",\n      inputMax: \"26\",\n      defaultValue: currentChannel ? currentChannel.toString() : undefined,\n    });\n    if (!channelStr) {\n      return;\n    }\n    const channel = parseInt(channelStr);\n    if (channel < 11 || channel > 26) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.thread.change_channel_invalid\"\n        ),\n        text: this.hass.localize(\"ui.panel.config.thread.change_channel_range\"),\n      });\n      return;\n    }\n    try {\n      const result = await OTBRSetChannel(this.hass, channel);\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.thread.change_channel_initiated_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.thread.change_channel_initiated_text\",\n          { delay: Math.floor(result.delay / 60) }\n        ),\n      });\n    } catch (err: any) {\n      if (err.code === \"multiprotocol_enabled\") {\n        showAlertDialog(this, {\n          title: this.hass.localize(\n            \"ui.panel.config.thread.change_channel_multiprotocol_enabled_title\"\n          ),\n          text: this.hass.localize(\n            \"ui.panel.config.thread.change_channel_multiprotocol_enabled_text\"\n          ),\n        });\n        return;\n      }\n      showAlertDialog(this, {\n        title: \"Error\",\n        text: err.message || err,\n      });\n    }\n    this._refresh();\n  }\n\n  static styles = [\n    haStyle,\n    css`\n      .content {\n        padding: 24px 8px 32px;\n        max-width: 600px;\n        margin: 0 auto;\n        direction: ltr;\n      }\n      ha-list-item.router {\n        --mdc-list-item-meta-size: auto;\n        --mdc-list-item-meta-display: flex;\n        --mdc-list-side-padding: 16px;\n        cursor: default;\n        overflow: visible;\n      }\n      ha-list-item img {\n        border-radius: 0;\n      }\n      ha-svg-icon[slot=\"meta\"] {\n        width: 24px;\n      }\n      ha-button-menu a {\n        text-decoration: none;\n      }\n      .routers {\n        padding-bottom: 0;\n      }\n      .no-routers {\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        text-align: center;\n      }\n      .no-routers ha-svg-icon {\n        background-color: var(--light-primary-color);\n        color: var(--secondary-text-color);\n        padding: 16px;\n        border-radius: 50%;\n        margin-bottom: 8px;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n      h4 {\n        margin: 0;\n      }\n      .card-header {\n        display: flex;\n        justify-content: space-between;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"thread-config-panel\": ThreadConfigPanel;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}