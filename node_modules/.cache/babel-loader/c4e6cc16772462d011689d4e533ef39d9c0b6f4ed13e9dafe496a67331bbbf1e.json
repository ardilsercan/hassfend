{"ast":null,"code":"import _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.assign.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nvar newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() {\n  return newInstance;\n}\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nvar DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nvar MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nvar templateInstanceBase = PropertyEffects( /*#__PURE__*/function () {\n  function _class() {\n    _classCallCheck(this, _class);\n  }\n  return _createClass(_class);\n}());\nexport function showHideChildren(hide, children) {\n  for (var i = 0; i < children.length; i++) {\n    var n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n        // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          var replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nvar TemplateInstanceBase = /*#__PURE__*/function (_templateInstanceBase) {\n  _inherits(TemplateInstanceBase, _templateInstanceBase);\n  function TemplateInstanceBase(props) {\n    var _this;\n    _classCallCheck(this, TemplateInstanceBase);\n    _this = _callSuper(this, TemplateInstanceBase);\n    _this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    _this.root = _this._stampTemplate(_this.__dataHost);\n    // Save list of stamped children\n    var children = [];\n    /** @suppress {invalidCasts} */\n    _this.children = /** @type {!NodeList} */children;\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (var n = _this.root.firstChild; n; n = n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = _assertThisInitialized(_this);\n    }\n    if (_this.__templatizeOwner && _this.__templatizeOwner.__hideTemplateChildren__) {\n      _this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    var options = _this.__templatizeOptions;\n    if (props && options.instanceProps || !options.instanceProps) {\n      _this._enableProperties();\n    }\n    return _this;\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _createClass(TemplateInstanceBase, [{\n    key: \"_configureProperties\",\n    value: function _configureProperties(props) {\n      var options = this.__templatizeOptions;\n      if (options.forwardHostProp) {\n        for (var hprop in this.__hostProps) {\n          this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n        }\n      }\n      // Any instance props passed in the constructor will overwrite host props;\n      // normally this would be a user error but we don't specifically filter them\n      for (var iprop in props) {\n        this._setPendingProperty(iprop, props[iprop]);\n      }\n    }\n    /**\n     * Forwards a host property to this instance.  This method should be\n     * called on instances from the `options.forwardHostProp` callback\n     * to propagate changes of host properties to each instance.\n     *\n     * Note this method enqueues the change, which are flushed as a batch.\n     *\n     * @param {string} prop Property or path name\n     * @param {*} value Value of the property to forward\n     * @return {void}\n     */\n  }, {\n    key: \"forwardHostProp\",\n    value: function forwardHostProp(prop, value) {\n      if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n        this.__dataHost._enqueueClient(this);\n      }\n    }\n\n    /**\n     * Override point for adding custom or simulated event handling.\n     *\n     * @override\n     * @param {!Node} node Node to add event listener to\n     * @param {string} eventName Name of event\n     * @param {function(!Event):void} handler Listener function to add\n     * @return {void}\n     */\n  }, {\n    key: \"_addEventListenerToNode\",\n    value: function _addEventListenerToNode(node, eventName, handler) {\n      var _this2 = this;\n      if (this._methodHost && this.__templatizeOptions.parentModel) {\n        // If this instance should be considered a parent model, decorate\n        // events this template instance as `model`\n        this._methodHost._addEventListenerToNode(node, eventName, function (e) {\n          e.model = _this2;\n          handler(e);\n        });\n      } else {\n        // Otherwise delegate to the template's host (which could be)\n        // another template instance\n        var templateHost = this.__dataHost.__dataHost;\n        if (templateHost) {\n          templateHost._addEventListenerToNode(node, eventName, handler);\n        }\n      }\n    }\n    /**\n     * Shows or hides the template instance top level child elements. For\n     * text nodes, `textContent` is removed while \"hidden\" and replaced when\n     * \"shown.\"\n     * @param {boolean} hide Set to true to hide the children;\n     * set to false to show them.\n     * @return {void}\n     * @protected\n     */\n  }, {\n    key: \"_showHideChildren\",\n    value: function _showHideChildren(hide) {\n      showHideChildren(hide, this.children);\n    }\n    /**\n     * Overrides default property-effects implementation to intercept\n     * textContent bindings while children are \"hidden\" and cache in\n     * private storage for later retrieval.\n     *\n     * @override\n     * @param {!Node} node The node to set a property on\n     * @param {string} prop The property to set\n     * @param {*} value The value to set\n     * @return {void}\n     * @protected\n     */\n  }, {\n    key: \"_setUnmanagedPropertyToNode\",\n    value: function _setUnmanagedPropertyToNode(node, prop, value) {\n      if (node.__hideTemplateChildren__ && node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n        node.__polymerTextContent__ = value;\n      } else {\n        _get(_getPrototypeOf(TemplateInstanceBase.prototype), \"_setUnmanagedPropertyToNode\", this).call(this, node, prop, value);\n      }\n    }\n    /**\n     * Find the parent model of this template instance.  The parent model\n     * is either another templatize instance that had option `parentModel: true`,\n     * or else the host element.\n     *\n     * @return {!Polymer_PropertyEffects} The parent model of this instance\n     */\n  }, {\n    key: \"parentModel\",\n    get: function get() {\n      var model = this.__parentModel;\n      if (!model) {\n        var options;\n        model = this;\n        do {\n          // A template instance's `__dataHost` is a <template>\n          // `model.__dataHost.__dataHost` is the template's host\n          model = model.__dataHost.__dataHost;\n        } while ((options = model.__templatizeOptions) && !options.parentModel);\n        this.__parentModel = model;\n      }\n      return model;\n    }\n\n    /**\n     * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n     * dispatch events safely no-op.\n     *\n     * @param {Event} event Event to dispatch\n     * @return {boolean} Always true.\n     * @override\n     */\n  }, {\n    key: \"dispatchEvent\",\n    value: function dispatchEvent(event) {\n      // eslint-disable-line no-unused-vars\n      return true;\n    }\n  }]);\n  return TemplateInstanceBase;\n}(templateInstanceBase);\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nvar MutableTemplateInstanceBase = MutableData(\n// This cast shouldn't be neccessary, but Closure doesn't understand that\n// TemplateInstanceBase is a constructor function.\n/** @type {function(new:TemplateInstanceBase)} */\nTemplateInstanceBase);\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  var templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  var templatizerBase = options.mutableData ? MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  var klass = /*#__PURE__*/function (_templatizerBase) {\n    _inherits(klass, _templatizerBase);\n    function klass() {\n      _classCallCheck(this, klass);\n      return _callSuper(this, klass, arguments);\n    }\n    return _createClass(klass);\n  }(templatizerBase);\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  var userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    var isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    var klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        var templatizedBase = options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        var TemplatizedTemplate = /*#__PURE__*/function (_templatizedBase) {\n          _inherits(TemplatizedTemplate, _templatizedBase);\n          function TemplatizedTemplate() {\n            _classCallCheck(this, TemplatizedTemplate);\n            return _callSuper(this, TemplatizedTemplate, arguments);\n          }\n          return _createClass(TemplatizedTemplate);\n        }(templatizedBase);\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        var _templatizedBase2 = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        var TemplatizedTemplateExtension = /*#__PURE__*/function (_templatizedBase3) {\n          _inherits(TemplatizedTemplateExtension, _templatizedBase3);\n          function TemplatizedTemplateExtension() {\n            _classCallCheck(this, TemplatizedTemplateExtension);\n            return _callSuper(this, TemplatizedTemplateExtension, arguments);\n          }\n          return _createClass(TemplatizedTemplateExtension);\n        }(_templatizedBase2);\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      var hostProps = templateInfo.hostProps;\n      for (var prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop, klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE, {\n          fn: createForwardHostPropEffect(prop, userForwardHostProp)\n        });\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      var _hostProps = templateInfo.hostProps;\n      for (var _prop in _hostProps) {\n        _prop = '_host_' + _prop;\n        if (_prop in target) {\n          var val = target[_prop];\n          delete target[_prop];\n          target.__data[_prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner, prop.substring('_host_'.length), props[prop]);\n  };\n}\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  var hostProps = templateInfo.hostProps || {};\n  for (var iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    var userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)\n      });\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (var hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop, klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY, {\n        fn: createNotifyHostPropEffect()\n      });\n    }\n  }\n}\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner, inst, prop, props[prop]);\n  };\n}\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */options || {};\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  var ctor = owner ? owner.constructor : TemplateInstanceBase;\n  var templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  var baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  var methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  var klass = /*#__PURE__*/function (_baseClass) {\n    _inherits(TemplateInstance, _baseClass);\n    function TemplateInstance() {\n      _classCallCheck(this, TemplateInstance);\n      return _callSuper(this, TemplateInstance, arguments);\n    }\n    return _createClass(TemplateInstance);\n  }(baseClass);\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */template;\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */owner;\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */klass; //eslint-disable-line no-self-assign\n  return klass;\n}\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  var declaredProps = methodHost.constructor._properties;\n  var propertyEffects = templateInfo.propertyEffects;\n  var instanceProps = options.instanceProps;\n  for (var prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      var effects = propertyEffects[prop];\n      for (var i = 0; i < effects.length; i++) {\n        var part = effects[i].info.part;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(\"Property '\".concat(prop, \"' used in template but not \") + \"declared in 'properties'; attribute will not be observed.\");\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  var model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if (model = node.__dataHost ? node : node.__templatizeInstance) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\nexport { TemplateInstanceBase };","map":{"version":3,"names":["PropertyEffects","MutableData","strictTemplatePolicy","legacyWarnings","wrap","newInstance","HTMLTemplateElementExtension","prototype","Object","create","HTMLTemplateElement","constructor","value","writable","DataTemplate","MutableDataTemplate","upgradeTemplate","template","setPrototypeOf","templateInstanceBase","_class","_classCallCheck","_createClass","showHideChildren","hide","children","i","length","n","Boolean","__hideTemplateChildren__","nodeType","Node","TEXT_NODE","__polymerTextContent__","textContent","localName","__polymerReplaced__","document","createComment","parentNode","replaceChild","replace","style","__polymerDisplay__","display","_showHideChildren","TemplateInstanceBase","_templateInstanceBase","_inherits","props","_this","_callSuper","_configureProperties","root","_stampTemplate","__dataHost","firstChild","nextSibling","push","__templatizeInstance","_assertThisInitialized","__templatizeOwner","options","__templatizeOptions","instanceProps","_enableProperties","key","forwardHostProp","hprop","__hostProps","_setPendingProperty","iprop","prop","_setPendingPropertyOrPath","_enqueueClient","_addEventListenerToNode","node","eventName","handler","_this2","_methodHost","parentModel","e","model","templateHost","_setUnmanagedPropertyToNode","_get","_getPrototypeOf","call","get","__parentModel","dispatchEvent","event","MutableTemplateInstanceBase","findMethodHost","createTemplatizerClass","templateInfo","templatizerBase","mutableData","templatize","mixin","klass","_templatizerBase","arguments","_bindTemplate","addNotifyEffects","addPropagateEffects","target","methodHost","userForwardHostProp","hasHostProps","isTemplate","templatizeTemplateClass","templatizedBase","TemplatizedTemplate","_templatizedBase","TemplatizedTemplateExtension","_templatizedBase3","hostProps","_addPropertyEffect","PROPERTY_EFFECT_TYPES","PROPAGATE","fn","createForwardHostPropEffect","_createNotifyingProperty","warnOnUndeclaredProperties","__dataProto","assign","__data","__dataTemp","__dataPending","__dataOld","val","hostProp","substring","userNotifyInstanceProp","notifyInstanceProp","NOTIFY","createNotifyInstancePropEffect","createNotifyHostPropEffect","instProp","inst","notifyHostProp","owner","Error","ctor","_parseTemplate","baseClass","templatizeInstanceClass","_baseClass","TemplateInstance","declaredProps","_properties","propertyEffects","effects","part","info","signature","static","console","warn","concat","modelForElement"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/utils/templatize.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module for preparing and stamping instances of templates that utilize\n * Polymer's data-binding and declarative event listener features.\n *\n * Example:\n *\n *     // Get a template from somewhere, e.g. light DOM\n *     let template = this.querySelector('template');\n *     // Prepare the template\n *     let TemplateClass = Templatize.templatize(template);\n *     // Instance the template with an initial data model\n *     let instance = new TemplateClass({myProp: 'initial'});\n *     // Insert the instance's DOM somewhere, e.g. element's shadow DOM\n *     this.shadowRoot.appendChild(instance.root);\n *     // Changing a property on the instance will propagate to bindings\n *     // in the template\n *     instance.myProp = 'new value';\n *\n * The `options` dictionary passed to `templatize` allows for customizing\n * features of the generated template class, including how outer-scope host\n * properties should be forwarded into template instances, how any instance\n * properties added into the template's scope should be notified out to\n * the host, and whether the instance should be decorated as a \"parent model\"\n * of any event handlers.\n *\n *     // Customize property forwarding and event model decoration\n *     let TemplateClass = Templatize.templatize(template, this, {\n *       parentModel: true,\n *       forwardHostProp(property, value) {...},\n *       instanceProps: {...},\n *       notifyInstanceProp(instance, property, value) {...},\n *     });\n *\n * @summary Module for preparing and stamping instances of templates\n *   utilizing Polymer templating features.\n */\n\nimport './boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { MutableData } from '../mixins/mutable-data.js';\nimport { strictTemplatePolicy, legacyWarnings } from './settings.js';\nimport { wrap } from './wrap.js';\n\n// Base class for HTMLTemplateElement extension that has property effects\n// machinery for propagating host properties to children. This is an ES5\n// class only because Babel (incorrectly) requires super() in the class\n// constructor even though no `this` is used and it returns an instance.\nlet newInstance = null;\n\n/**\n * @constructor\n * @extends {HTMLTemplateElement}\n * @private\n */\nfunction HTMLTemplateElementExtension() { return newInstance; }\nHTMLTemplateElementExtension.prototype = Object.create(HTMLTemplateElement.prototype, {\n  constructor: {\n    value: HTMLTemplateElementExtension,\n    writable: true\n  }\n});\n\n/**\n * @constructor\n * @implements {Polymer_PropertyEffects}\n * @extends {HTMLTemplateElementExtension}\n * @private\n */\nconst DataTemplate = PropertyEffects(HTMLTemplateElementExtension);\n\n/**\n * @constructor\n * @implements {Polymer_MutableData}\n * @extends {DataTemplate}\n * @private\n */\nconst MutableDataTemplate = MutableData(DataTemplate);\n\n// Applies a DataTemplate subclass to a <template> instance\nfunction upgradeTemplate(template, constructor) {\n  newInstance = template;\n  Object.setPrototypeOf(template, constructor.prototype);\n  new constructor();\n  newInstance = null;\n}\n\n/**\n * Base class for TemplateInstance.\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @private\n */\nconst templateInstanceBase = PropertyEffects(class {});\n\nexport function showHideChildren(hide, children) {\n  for (let i=0; i<children.length; i++) {\n    let n = children[i];\n    // Ignore non-changes\n    if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n      // clear and restore text\n      if (n.nodeType === Node.TEXT_NODE) {\n        if (hide) {\n          n.__polymerTextContent__ = n.textContent;\n          n.textContent = '';\n        } else {\n          n.textContent = n.__polymerTextContent__;\n        }\n      // remove and replace slot\n      } else if (n.localName === 'slot') {\n        if (hide) {\n          n.__polymerReplaced__ = document.createComment('hidden-slot');\n          wrap(wrap(n).parentNode).replaceChild(n.__polymerReplaced__, n);\n        } else {\n          const replace = n.__polymerReplaced__;\n          if (replace) {\n            wrap(wrap(replace).parentNode).replaceChild(n, replace);\n          }\n        }\n      }\n      // hide and show nodes\n      else if (n.style) {\n        if (hide) {\n          n.__polymerDisplay__ = n.style.display;\n          n.style.display = 'none';\n        } else {\n          n.style.display = n.__polymerDisplay__;\n        }\n      }\n    }\n    n.__hideTemplateChildren__ = hide;\n    if (n._showHideChildren) {\n      n._showHideChildren(hide);\n    }\n  }\n}\n\n/**\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @unrestricted\n */\nclass TemplateInstanceBase extends templateInstanceBase {\n  constructor(props) {\n    super();\n    this._configureProperties(props);\n    /** @type {!StampedTemplate} */\n    this.root = this._stampTemplate(this.__dataHost);\n    // Save list of stamped children\n    let children = [];\n    /** @suppress {invalidCasts} */\n    this.children = /** @type {!NodeList} */ (children);\n    // Polymer 1.x did not use `Polymer.dom` here so not bothering.\n    for (let n = this.root.firstChild; n; n=n.nextSibling) {\n      children.push(n);\n      n.__templatizeInstance = this;\n    }\n    if (this.__templatizeOwner &&\n      this.__templatizeOwner.__hideTemplateChildren__) {\n      this._showHideChildren(true);\n    }\n    // Flush props only when props are passed if instance props exist\n    // or when there isn't instance props.\n    let options = this.__templatizeOptions;\n    if ((props && options.instanceProps) || !options.instanceProps) {\n      this._enableProperties();\n    }\n  }\n  /**\n   * Configure the given `props` by calling `_setPendingProperty`. Also\n   * sets any properties stored in `__hostProps`.\n   * @private\n   * @param {Object} props Object of property name-value pairs to set.\n   * @return {void}\n   */\n  _configureProperties(props) {\n    let options = this.__templatizeOptions;\n    if (options.forwardHostProp) {\n      for (let hprop in this.__hostProps) {\n        this._setPendingProperty(hprop, this.__dataHost['_host_' + hprop]);\n      }\n    }\n    // Any instance props passed in the constructor will overwrite host props;\n    // normally this would be a user error but we don't specifically filter them\n    for (let iprop in props) {\n      this._setPendingProperty(iprop, props[iprop]);\n    }\n  }\n  /**\n   * Forwards a host property to this instance.  This method should be\n   * called on instances from the `options.forwardHostProp` callback\n   * to propagate changes of host properties to each instance.\n   *\n   * Note this method enqueues the change, which are flushed as a batch.\n   *\n   * @param {string} prop Property or path name\n   * @param {*} value Value of the property to forward\n   * @return {void}\n   */\n  forwardHostProp(prop, value) {\n    if (this._setPendingPropertyOrPath(prop, value, false, true)) {\n      this.__dataHost._enqueueClient(this);\n    }\n  }\n\n  /**\n   * Override point for adding custom or simulated event handling.\n   *\n   * @override\n   * @param {!Node} node Node to add event listener to\n   * @param {string} eventName Name of event\n   * @param {function(!Event):void} handler Listener function to add\n   * @return {void}\n   */\n  _addEventListenerToNode(node, eventName, handler) {\n    if (this._methodHost && this.__templatizeOptions.parentModel) {\n      // If this instance should be considered a parent model, decorate\n      // events this template instance as `model`\n      this._methodHost._addEventListenerToNode(node, eventName, (e) => {\n        e.model = this;\n        handler(e);\n      });\n    } else {\n      // Otherwise delegate to the template's host (which could be)\n      // another template instance\n      let templateHost = this.__dataHost.__dataHost;\n      if (templateHost) {\n        templateHost._addEventListenerToNode(node, eventName, handler);\n      }\n    }\n  }\n  /**\n   * Shows or hides the template instance top level child elements. For\n   * text nodes, `textContent` is removed while \"hidden\" and replaced when\n   * \"shown.\"\n   * @param {boolean} hide Set to true to hide the children;\n   * set to false to show them.\n   * @return {void}\n   * @protected\n   */\n  _showHideChildren(hide) {\n    showHideChildren(hide, this.children);\n  }\n  /**\n   * Overrides default property-effects implementation to intercept\n   * textContent bindings while children are \"hidden\" and cache in\n   * private storage for later retrieval.\n   *\n   * @override\n   * @param {!Node} node The node to set a property on\n   * @param {string} prop The property to set\n   * @param {*} value The value to set\n   * @return {void}\n   * @protected\n   */\n  _setUnmanagedPropertyToNode(node, prop, value) {\n    if (node.__hideTemplateChildren__ &&\n        node.nodeType == Node.TEXT_NODE && prop == 'textContent') {\n      node.__polymerTextContent__ = value;\n    } else {\n      super._setUnmanagedPropertyToNode(node, prop, value);\n    }\n  }\n  /**\n   * Find the parent model of this template instance.  The parent model\n   * is either another templatize instance that had option `parentModel: true`,\n   * or else the host element.\n   *\n   * @return {!Polymer_PropertyEffects} The parent model of this instance\n   */\n  get parentModel() {\n    let model = this.__parentModel;\n    if (!model) {\n      let options;\n      model = this;\n      do {\n        // A template instance's `__dataHost` is a <template>\n        // `model.__dataHost.__dataHost` is the template's host\n        model = model.__dataHost.__dataHost;\n      } while ((options = model.__templatizeOptions) && !options.parentModel);\n      this.__parentModel = model;\n    }\n    return model;\n  }\n\n  /**\n   * Stub of HTMLElement's `dispatchEvent`, so that effects that may\n   * dispatch events safely no-op.\n   *\n   * @param {Event} event Event to dispatch\n   * @return {boolean} Always true.\n   * @override\n   */\n   dispatchEvent(event) { // eslint-disable-line no-unused-vars\n     return true;\n  }\n}\n\n/** @type {!DataTemplate} */\nTemplateInstanceBase.prototype.__dataHost;\n/** @type {!TemplatizeOptions} */\nTemplateInstanceBase.prototype.__templatizeOptions;\n/** @type {!Polymer_PropertyEffects} */\nTemplateInstanceBase.prototype._methodHost;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__templatizeOwner;\n/** @type {!Object} */\nTemplateInstanceBase.prototype.__hostProps;\n\n/**\n * @constructor\n * @extends {TemplateInstanceBase}\n * @implements {Polymer_MutableData}\n * @private\n */\nconst MutableTemplateInstanceBase = MutableData(\n    // This cast shouldn't be neccessary, but Closure doesn't understand that\n    // TemplateInstanceBase is a constructor function.\n    /** @type {function(new:TemplateInstanceBase)} */ (TemplateInstanceBase));\n\nfunction findMethodHost(template) {\n  // Technically this should be the owner of the outermost template.\n  // In shadow dom, this is always getRootNode().host, but we can\n  // approximate this via cooperation with our dataHost always setting\n  // `_methodHost` as long as there were bindings (or id's) on this\n  // instance causing it to get a dataHost.\n  let templateHost = template.__dataHost;\n  return templateHost && templateHost._methodHost || templateHost;\n}\n\n/* eslint-disable valid-jsdoc */\n/**\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction createTemplatizerClass(template, templateInfo, options) {\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let templatizerBase = options.mutableData ?\n    MutableTemplateInstanceBase : TemplateInstanceBase;\n\n  // Affordance for global mixins onto TemplatizeInstance\n  if (templatize.mixin) {\n    templatizerBase = templatize.mixin(templatizerBase);\n  }\n\n  /**\n   * Anonymous class created by the templatize\n   * @constructor\n   * @private\n   */\n  let klass = class extends templatizerBase { };\n  /** @override */\n  klass.prototype.__templatizeOptions = options;\n  klass.prototype._bindTemplate(template);\n  addNotifyEffects(klass, template, templateInfo, options);\n  return klass;\n}\n\n/**\n * Adds propagate effects from the template to the template instance for\n * properties that the host binds to the template using the `_host_` prefix.\n *\n * @suppress {missingProperties} class.prototype is not defined for some reason\n */\nfunction addPropagateEffects(target, templateInfo, options, methodHost) {\n  let userForwardHostProp = options.forwardHostProp;\n  if (userForwardHostProp && templateInfo.hasHostProps) {\n    // Under the `removeNestedTemplates` optimization, a custom element like\n    // `dom-if` or `dom-repeat` can itself be treated as the \"template\"; this\n    // flag is used to switch between upgrading a `<template>` to be a property\n    // effects client vs. adding the effects directly to the custom element\n    const isTemplate = target.localName == 'template';\n    // Provide data API and property effects on memoized template class\n    let klass = templateInfo.templatizeTemplateClass;\n    if (!klass) {\n      if (isTemplate) {\n        /**\n         * @constructor\n         * @extends {DataTemplate}\n         */\n        let templatizedBase =\n            options.mutableData ? MutableDataTemplate : DataTemplate;\n\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplate extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass = TemplatizedTemplate;\n      } else {\n        /**\n         * @constructor\n         * @extends {PolymerElement}\n         */\n        const templatizedBase = target.constructor;\n\n        // Create a cached subclass of the base custom element class onto which\n        // to put the template-specific propagate effects\n        // NOTE: due to https://github.com/google/closure-compiler/issues/2928,\n        // combining the next two lines into one assignment causes a spurious\n        // type error.\n        /** @private */\n        class TemplatizedTemplateExtension extends templatizedBase {}\n        klass = templateInfo.templatizeTemplateClass =\n            TemplatizedTemplateExtension;\n      }\n      // Add template - >instances effects\n      // and host <- template effects\n      let hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        klass.prototype._addPropertyEffect('_host_' + prop,\n          klass.prototype.PROPERTY_EFFECT_TYPES.PROPAGATE,\n          {fn: createForwardHostPropEffect(prop, userForwardHostProp)});\n        klass.prototype._createNotifyingProperty('_host_' + prop);\n      }\n      if (legacyWarnings && methodHost) {\n        warnOnUndeclaredProperties(templateInfo, options, methodHost);\n      }\n    }\n    // Mix any pre-bound data into __data; no need to flush this to\n    // instances since they pull from the template at instance-time\n    if (target.__dataProto) {\n      // Note, generally `__dataProto` could be chained, but it's guaranteed\n      // to not be since this is a vanilla template we just added effects to\n      Object.assign(target.__data, target.__dataProto);\n    }\n    if (isTemplate) {\n      upgradeTemplate(target, klass);\n      // Clear any pending data for performance\n      target.__dataTemp = {};\n      target.__dataPending = null;\n      target.__dataOld = null;\n      target._enableProperties();\n    } else {\n      // Swizzle the cached subclass prototype onto the custom element\n      Object.setPrototypeOf(target, klass.prototype);\n      // Check for any pre-bound instance host properties, and do the\n      // instance property delete/assign dance for those (directly into data;\n      // not need to go through accessor since they are pulled at instance time)\n      const hostProps = templateInfo.hostProps;\n      for (let prop in hostProps) {\n        prop = '_host_' + prop;\n        if (prop in target) {\n          const val = target[prop];\n          delete target[prop];\n          target.__data[prop] = val;\n        }\n      }\n    }\n  }\n}\n/* eslint-enable valid-jsdoc */\n\nfunction createForwardHostPropEffect(hostProp, userForwardHostProp) {\n  return function forwardHostProp(template, prop, props) {\n    userForwardHostProp.call(template.__templatizeOwner,\n      prop.substring('_host_'.length), props[prop]);\n  };\n}\n\nfunction addNotifyEffects(klass, template, templateInfo, options) {\n  let hostProps = templateInfo.hostProps || {};\n  for (let iprop in options.instanceProps) {\n    delete hostProps[iprop];\n    let userNotifyInstanceProp = options.notifyInstanceProp;\n    if (userNotifyInstanceProp) {\n      klass.prototype._addPropertyEffect(iprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyInstancePropEffect(iprop, userNotifyInstanceProp)});\n    }\n  }\n  if (options.forwardHostProp && template.__dataHost) {\n    for (let hprop in hostProps) {\n      // As we're iterating hostProps in this function, note whether\n      // there were any, for an optimization in addPropagateEffects\n      if (!templateInfo.hasHostProps) {\n        templateInfo.hasHostProps = true;\n      }\n      klass.prototype._addPropertyEffect(hprop,\n        klass.prototype.PROPERTY_EFFECT_TYPES.NOTIFY,\n        {fn: createNotifyHostPropEffect()});\n    }\n  }\n}\n\nfunction createNotifyInstancePropEffect(instProp, userNotifyInstanceProp) {\n  return function notifyInstanceProp(inst, prop, props) {\n    userNotifyInstanceProp.call(inst.__templatizeOwner,\n      inst, prop, props[prop]);\n  };\n}\n\nfunction createNotifyHostPropEffect() {\n  return function notifyHostProp(inst, prop, props) {\n    inst.__dataHost._setPendingPropertyOrPath('_host_' + prop, props[prop], true, true);\n  };\n}\n\n\n/**\n * Returns an anonymous `PropertyEffects` class bound to the\n * `<template>` provided.  Instancing the class will result in the\n * template being stamped into a document fragment stored as the instance's\n * `root` property, after which it can be appended to the DOM.\n *\n * Templates may utilize all Polymer data-binding features as well as\n * declarative event listeners.  Event listeners and inline computing\n * functions in the template will be called on the host of the template.\n *\n * The constructor returned takes a single argument dictionary of initial\n * property values to propagate into template bindings.  Additionally\n * host properties can be forwarded in, and instance properties can be\n * notified out by providing optional callbacks in the `options` dictionary.\n *\n * Valid configuration in `options` are as follows:\n *\n * - `forwardHostProp(property, value)`: Called when a property referenced\n *   in the template changed on the template's host. As this library does\n *   not retain references to templates instanced by the user, it is the\n *   templatize owner's responsibility to forward host property changes into\n *   user-stamped instances.  The `instance.forwardHostProp(property, value)`\n *    method on the generated class should be called to forward host\n *   properties into the template to prevent unnecessary property-changed\n *   notifications. Any properties referenced in the template that are not\n *   defined in `instanceProps` will be notified up to the template's host\n *   automatically.\n * - `instanceProps`: Dictionary of property names that will be added\n *   to the instance by the templatize owner.  These properties shadow any\n *   host properties, and changes within the template to these properties\n *   will result in `notifyInstanceProp` being called.\n * - `mutableData`: When `true`, the generated class will skip strict\n *   dirty-checking for objects and arrays (always consider them to be\n *   \"dirty\").\n * - `notifyInstanceProp(instance, property, value)`: Called when\n *   an instance property changes.  Users may choose to call `notifyPath`\n *   on e.g. the owner to notify the change.\n * - `parentModel`: When `true`, events handled by declarative event listeners\n *   (`on-event=\"handler\"`) will be decorated with a `model` property pointing\n *   to the template instance that stamped it.  It will also be returned\n *   from `instance.parentModel` in cases where template instance nesting\n *   causes an inner model to shadow an outer model.\n *\n * All callbacks are called bound to the `owner`. Any context\n * needed for the callbacks (such as references to `instances` stamped)\n * should be stored on the `owner` such that they can be retrieved via\n * `this`.\n *\n * When `options.forwardHostProp` is declared as an option, any properties\n * referenced in the template will be automatically forwarded from the host of\n * the `<template>` to instances, with the exception of any properties listed in\n * the `options.instanceProps` object.  `instanceProps` are assumed to be\n * managed by the owner of the instances, either passed into the constructor\n * or set after the fact.  Note, any properties passed into the constructor will\n * always be set to the instance (regardless of whether they would normally\n * be forwarded from the host).\n *\n * Note that `templatize()` can be run only once for a given `<template>`.\n * Further calls will result in an error. Also, there is a special\n * behavior if the template was duplicated through a mechanism such as\n * `<dom-repeat>` or `<test-fixture>`. In this case, all calls to\n * `templatize()` return the same class for all duplicates of a template.\n * The class returned from `templatize()` is generated only once using\n * the `options` from the first call. This means that any `options`\n * provided to subsequent calls will be ignored. Therefore, it is very\n * important not to close over any variables inside the callbacks. Also,\n * arrow functions must be avoided because they bind the outer `this`.\n * Inside the callbacks, any contextual information can be accessed\n * through `this`, which points to the `owner`.\n *\n * @param {!HTMLTemplateElement} template Template to templatize\n * @param {Polymer_PropertyEffects=} owner Owner of the template instances;\n *   any optional callbacks will be bound to this owner.\n * @param {Object=} options Options dictionary (see summary for details)\n * @return {function(new:TemplateInstanceBase, Object=)} Generated class bound\n *   to the template provided\n * @suppress {invalidCasts}\n */\nexport function templatize(template, owner, options) {\n  // Under strictTemplatePolicy, the templatized element must be owned\n  // by a (trusted) Polymer element, indicated by existence of _methodHost;\n  // e.g. for dom-if & dom-repeat in main document, _methodHost is null\n  if (strictTemplatePolicy && !findMethodHost(template)) {\n    throw new Error('strictTemplatePolicy: template owner not trusted');\n  }\n  options = /** @type {!TemplatizeOptions} */(options || {});\n  if (template.__templatizeOwner) {\n    throw new Error('A <template> can only be templatized once');\n  }\n  template.__templatizeOwner = owner;\n  const ctor = owner ? owner.constructor : TemplateInstanceBase;\n  let templateInfo = ctor._parseTemplate(template);\n  // Get memoized base class for the prototypical template, which\n  // includes property effects for binding template & forwarding\n  /**\n   * @constructor\n   * @extends {TemplateInstanceBase}\n   */\n  let baseClass = templateInfo.templatizeInstanceClass;\n  if (!baseClass) {\n    baseClass = createTemplatizerClass(template, templateInfo, options);\n    templateInfo.templatizeInstanceClass = baseClass;\n  }\n  const methodHost = findMethodHost(template);\n  // Host property forwarding must be installed onto template instance\n  addPropagateEffects(template, templateInfo, options, methodHost);\n  // Subclass base class and add reference for this specific template\n  /** @private */\n  let klass = class TemplateInstance extends baseClass {};\n  /** @override */\n  klass.prototype._methodHost = methodHost;\n  /** @override */\n  klass.prototype.__dataHost = /** @type {!DataTemplate} */ (template);\n  /** @override */\n  klass.prototype.__templatizeOwner = /** @type {!Object} */ (owner);\n  /** @override */\n  klass.prototype.__hostProps = templateInfo.hostProps;\n  klass = /** @type {function(new:TemplateInstanceBase)} */(klass); //eslint-disable-line no-self-assign\n  return klass;\n}\n\nfunction warnOnUndeclaredProperties(templateInfo, options, methodHost) {\n  const declaredProps = methodHost.constructor._properties;\n  const {propertyEffects} = templateInfo;\n  const {instanceProps} = options;\n  for (let prop in propertyEffects) {\n    // Ensure properties with template effects are declared on the outermost\n    // host (`methodHost`), unless they are instance props or static functions\n    if (!declaredProps[prop] && !(instanceProps && instanceProps[prop])) {\n      const effects = propertyEffects[prop];\n      for (let i=0; i<effects.length; i++) {\n        const {part} = effects[i].info;\n        if (!(part.signature && part.signature.static)) {\n          console.warn(`Property '${prop}' used in template but not ` +\n            `declared in 'properties'; attribute will not be observed.`);\n          break;\n        }\n      }\n    }\n  }\n}\n\n/**\n * Returns the template \"model\" associated with a given element, which\n * serves as the binding scope for the template instance the element is\n * contained in. A template model is an instance of\n * `TemplateInstanceBase`, and should be used to manipulate data\n * associated with this template instance.\n *\n * Example:\n *\n *   let model = modelForElement(el);\n *   if (model.index < 10) {\n *     model.set('item.checked', true);\n *   }\n *\n * @param {HTMLElement} template The model will be returned for\n *   elements stamped from this template (accepts either an HTMLTemplateElement)\n *   or a `<dom-if>`/`<dom-repeat>` element when using `removeNestedTemplates`\n *   optimization.\n * @param {Node=} node Node for which to return a template model.\n * @return {TemplateInstanceBase} Template instance representing the\n *   binding scope for the element\n */\nexport function modelForElement(template, node) {\n  let model;\n  while (node) {\n    // An element with a __templatizeInstance marks the top boundary\n    // of a scope; walk up until we find one, and then ensure that\n    // its __dataHost matches `this`, meaning this dom-repeat stamped it\n    if ((model = node.__dataHost ? node : node.__templatizeInstance)) {\n      // Found an element stamped by another template; keep walking up\n      // from its __dataHost\n      if (model.__dataHost != template) {\n        node = model.__dataHost;\n      } else {\n        return model;\n      }\n    } else {\n      // Still in a template scope, keep going up until\n      // a __templatizeInstance is found\n      node = wrap(node).parentNode;\n    }\n  }\n  return null;\n}\n\nexport { TemplateInstanceBase };\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,WAAW;AAElB,SAASA,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,oBAAoB,EAAEC,cAAc,QAAQ,eAAe;AACpE,SAASC,IAAI,QAAQ,WAAW;;AAEhC;AACA;AACA;AACA;AACA,IAAIC,WAAW,GAAG,IAAI;;AAEtB;AACA;AACA;AACA;AACA;AACA,SAASC,4BAA4BA,CAAA,EAAG;EAAE,OAAOD,WAAW;AAAE;AAC9DC,4BAA4B,CAACC,SAAS,GAAGC,MAAM,CAACC,MAAM,CAACC,mBAAmB,CAACH,SAAS,EAAE;EACpFI,WAAW,EAAE;IACXC,KAAK,EAAEN,4BAA4B;IACnCO,QAAQ,EAAE;EACZ;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAAGd,eAAe,CAACM,4BAA4B,CAAC;;AAElE;AACA;AACA;AACA;AACA;AACA;AACA,IAAMS,mBAAmB,GAAGd,WAAW,CAACa,YAAY,CAAC;;AAErD;AACA,SAASE,eAAeA,CAACC,QAAQ,EAAEN,WAAW,EAAE;EAC9CN,WAAW,GAAGY,QAAQ;EACtBT,MAAM,CAACU,cAAc,CAACD,QAAQ,EAAEN,WAAW,CAACJ,SAAS,CAAC;EACtD,IAAII,WAAW,CAAC,CAAC;EACjBN,WAAW,GAAG,IAAI;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMc,oBAAoB,GAAGnB,eAAe;EAAA,SAAAoB,OAAA;IAAAC,eAAA,OAAAD,MAAA;EAAA;EAAA,OAAAE,YAAA,CAAAF,MAAA;AAAA,GAAS,CAAC;AAEtD,OAAO,SAASG,gBAAgBA,CAACC,IAAI,EAAEC,QAAQ,EAAE;EAC/C,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACD,QAAQ,CAACE,MAAM,EAAED,CAAC,EAAE,EAAE;IACpC,IAAIE,CAAC,GAAGH,QAAQ,CAACC,CAAC,CAAC;IACnB;IACA,IAAIG,OAAO,CAACL,IAAI,CAAC,IAAIK,OAAO,CAACD,CAAC,CAACE,wBAAwB,CAAC,EAAE;MACxD;MACA,IAAIF,CAAC,CAACG,QAAQ,KAAKC,IAAI,CAACC,SAAS,EAAE;QACjC,IAAIT,IAAI,EAAE;UACRI,CAAC,CAACM,sBAAsB,GAAGN,CAAC,CAACO,WAAW;UACxCP,CAAC,CAACO,WAAW,GAAG,EAAE;QACpB,CAAC,MAAM;UACLP,CAAC,CAACO,WAAW,GAAGP,CAAC,CAACM,sBAAsB;QAC1C;QACF;MACA,CAAC,MAAM,IAAIN,CAAC,CAACQ,SAAS,KAAK,MAAM,EAAE;QACjC,IAAIZ,IAAI,EAAE;UACRI,CAAC,CAACS,mBAAmB,GAAGC,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;UAC7DnC,IAAI,CAACA,IAAI,CAACwB,CAAC,CAAC,CAACY,UAAU,CAAC,CAACC,YAAY,CAACb,CAAC,CAACS,mBAAmB,EAAET,CAAC,CAAC;QACjE,CAAC,MAAM;UACL,IAAMc,OAAO,GAAGd,CAAC,CAACS,mBAAmB;UACrC,IAAIK,OAAO,EAAE;YACXtC,IAAI,CAACA,IAAI,CAACsC,OAAO,CAAC,CAACF,UAAU,CAAC,CAACC,YAAY,CAACb,CAAC,EAAEc,OAAO,CAAC;UACzD;QACF;MACF;MACA;MAAA,KACK,IAAId,CAAC,CAACe,KAAK,EAAE;QAChB,IAAInB,IAAI,EAAE;UACRI,CAAC,CAACgB,kBAAkB,GAAGhB,CAAC,CAACe,KAAK,CAACE,OAAO;UACtCjB,CAAC,CAACe,KAAK,CAACE,OAAO,GAAG,MAAM;QAC1B,CAAC,MAAM;UACLjB,CAAC,CAACe,KAAK,CAACE,OAAO,GAAGjB,CAAC,CAACgB,kBAAkB;QACxC;MACF;IACF;IACAhB,CAAC,CAACE,wBAAwB,GAAGN,IAAI;IACjC,IAAII,CAAC,CAACkB,iBAAiB,EAAE;MACvBlB,CAAC,CAACkB,iBAAiB,CAACtB,IAAI,CAAC;IAC3B;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AALA,IAMMuB,oBAAoB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,oBAAA,EAAAC,qBAAA;EACxB,SAAAD,qBAAYG,KAAK,EAAE;IAAA,IAAAC,KAAA;IAAA9B,eAAA,OAAA0B,oBAAA;IACjBI,KAAA,GAAAC,UAAA,OAAAL,oBAAA;IACAI,KAAA,CAAKE,oBAAoB,CAACH,KAAK,CAAC;IAChC;IACAC,KAAA,CAAKG,IAAI,GAAGH,KAAA,CAAKI,cAAc,CAACJ,KAAA,CAAKK,UAAU,CAAC;IAChD;IACA,IAAI/B,QAAQ,GAAG,EAAE;IACjB;IACA0B,KAAA,CAAK1B,QAAQ,GAAG,wBAA0BA,QAAS;IACnD;IACA,KAAK,IAAIG,CAAC,GAAGuB,KAAA,CAAKG,IAAI,CAACG,UAAU,EAAE7B,CAAC,EAAEA,CAAC,GAACA,CAAC,CAAC8B,WAAW,EAAE;MACrDjC,QAAQ,CAACkC,IAAI,CAAC/B,CAAC,CAAC;MAChBA,CAAC,CAACgC,oBAAoB,GAAAC,sBAAA,CAAAV,KAAA,CAAO;IAC/B;IACA,IAAIA,KAAA,CAAKW,iBAAiB,IACxBX,KAAA,CAAKW,iBAAiB,CAAChC,wBAAwB,EAAE;MACjDqB,KAAA,CAAKL,iBAAiB,CAAC,IAAI,CAAC;IAC9B;IACA;IACA;IACA,IAAIiB,OAAO,GAAGZ,KAAA,CAAKa,mBAAmB;IACtC,IAAKd,KAAK,IAAIa,OAAO,CAACE,aAAa,IAAK,CAACF,OAAO,CAACE,aAAa,EAAE;MAC9Dd,KAAA,CAAKe,iBAAiB,CAAC,CAAC;IAC1B;IAAC,OAAAf,KAAA;EACH;EACA;AACF;AACA;AACA;AACA;AACA;AACA;EANE7B,YAAA,CAAAyB,oBAAA;IAAAoB,GAAA;IAAAvD,KAAA,EAOA,SAAAyC,qBAAqBH,KAAK,EAAE;MAC1B,IAAIa,OAAO,GAAG,IAAI,CAACC,mBAAmB;MACtC,IAAID,OAAO,CAACK,eAAe,EAAE;QAC3B,KAAK,IAAIC,KAAK,IAAI,IAAI,CAACC,WAAW,EAAE;UAClC,IAAI,CAACC,mBAAmB,CAACF,KAAK,EAAE,IAAI,CAACb,UAAU,CAAC,QAAQ,GAAGa,KAAK,CAAC,CAAC;QACpE;MACF;MACA;MACA;MACA,KAAK,IAAIG,KAAK,IAAItB,KAAK,EAAE;QACvB,IAAI,CAACqB,mBAAmB,CAACC,KAAK,EAAEtB,KAAK,CAACsB,KAAK,CAAC,CAAC;MAC/C;IACF;IACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAVE;IAAAL,GAAA;IAAAvD,KAAA,EAWA,SAAAwD,gBAAgBK,IAAI,EAAE7D,KAAK,EAAE;MAC3B,IAAI,IAAI,CAAC8D,yBAAyB,CAACD,IAAI,EAAE7D,KAAK,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE;QAC5D,IAAI,CAAC4C,UAAU,CAACmB,cAAc,CAAC,IAAI,CAAC;MACtC;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAR,GAAA;IAAAvD,KAAA,EASA,SAAAgE,wBAAwBC,IAAI,EAAEC,SAAS,EAAEC,OAAO,EAAE;MAAA,IAAAC,MAAA;MAChD,IAAI,IAAI,CAACC,WAAW,IAAI,IAAI,CAACjB,mBAAmB,CAACkB,WAAW,EAAE;QAC5D;QACA;QACA,IAAI,CAACD,WAAW,CAACL,uBAAuB,CAACC,IAAI,EAAEC,SAAS,EAAE,UAACK,CAAC,EAAK;UAC/DA,CAAC,CAACC,KAAK,GAAGJ,MAAI;UACdD,OAAO,CAACI,CAAC,CAAC;QACZ,CAAC,CAAC;MACJ,CAAC,MAAM;QACL;QACA;QACA,IAAIE,YAAY,GAAG,IAAI,CAAC7B,UAAU,CAACA,UAAU;QAC7C,IAAI6B,YAAY,EAAE;UAChBA,YAAY,CAACT,uBAAuB,CAACC,IAAI,EAAEC,SAAS,EAAEC,OAAO,CAAC;QAChE;MACF;IACF;IACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARE;IAAAZ,GAAA;IAAAvD,KAAA,EASA,SAAAkC,kBAAkBtB,IAAI,EAAE;MACtBD,gBAAgB,CAACC,IAAI,EAAE,IAAI,CAACC,QAAQ,CAAC;IACvC;IACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAXE;IAAA0C,GAAA;IAAAvD,KAAA,EAYA,SAAA0E,4BAA4BT,IAAI,EAAEJ,IAAI,EAAE7D,KAAK,EAAE;MAC7C,IAAIiE,IAAI,CAAC/C,wBAAwB,IAC7B+C,IAAI,CAAC9C,QAAQ,IAAIC,IAAI,CAACC,SAAS,IAAIwC,IAAI,IAAI,aAAa,EAAE;QAC5DI,IAAI,CAAC3C,sBAAsB,GAAGtB,KAAK;MACrC,CAAC,MAAM;QACL2E,IAAA,CAAAC,eAAA,CAAAzC,oBAAA,CAAAxC,SAAA,wCAAAkF,IAAA,OAAkCZ,IAAI,EAAEJ,IAAI,EAAE7D,KAAK;MACrD;IACF;IACA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAAuD,GAAA;IAAAuB,GAAA,EAOA,SAAAA,IAAA,EAAkB;MAChB,IAAIN,KAAK,GAAG,IAAI,CAACO,aAAa;MAC9B,IAAI,CAACP,KAAK,EAAE;QACV,IAAIrB,OAAO;QACXqB,KAAK,GAAG,IAAI;QACZ,GAAG;UACD;UACA;UACAA,KAAK,GAAGA,KAAK,CAAC5B,UAAU,CAACA,UAAU;QACrC,CAAC,QAAQ,CAACO,OAAO,GAAGqB,KAAK,CAACpB,mBAAmB,KAAK,CAACD,OAAO,CAACmB,WAAW;QACtE,IAAI,CAACS,aAAa,GAAGP,KAAK;MAC5B;MACA,OAAOA,KAAK;IACd;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EAPE;IAAAjB,GAAA;IAAAvD,KAAA,EAQC,SAAAgF,cAAcC,KAAK,EAAE;MAAE;MACrB,OAAO,IAAI;IACd;EAAC;EAAA,OAAA9C,oBAAA;AAAA,EAzJgC5B,oBAAoB;AA4JvD;AACA4B,oBAAoB,CAACxC,SAAS,CAACiD,UAAU;AACzC;AACAT,oBAAoB,CAACxC,SAAS,CAACyD,mBAAmB;AAClD;AACAjB,oBAAoB,CAACxC,SAAS,CAAC0E,WAAW;AAC1C;AACAlC,oBAAoB,CAACxC,SAAS,CAACuD,iBAAiB;AAChD;AACAf,oBAAoB,CAACxC,SAAS,CAAC+D,WAAW;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,IAAMwB,2BAA2B,GAAG7F,WAAW;AAC3C;AACA;AACA;AAAmD8C,oBAAqB,CAAC;AAE7E,SAASgD,cAAcA,CAAC9E,QAAQ,EAAE;EAChC;EACA;EACA;EACA;EACA;EACA,IAAIoE,YAAY,GAAGpE,QAAQ,CAACuC,UAAU;EACtC,OAAO6B,YAAY,IAAIA,YAAY,CAACJ,WAAW,IAAII,YAAY;AACjE;;AAEA;AACA;AACA;AACA;AACA,SAASW,sBAAsBA,CAAC/E,QAAQ,EAAEgF,YAAY,EAAElC,OAAO,EAAE;EAC/D;AACF;AACA;AACA;EACE,IAAImC,eAAe,GAAGnC,OAAO,CAACoC,WAAW,GACvCL,2BAA2B,GAAG/C,oBAAoB;;EAEpD;EACA,IAAIqD,UAAU,CAACC,KAAK,EAAE;IACpBH,eAAe,GAAGE,UAAU,CAACC,KAAK,CAACH,eAAe,CAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;EACE,IAAII,KAAK,0BAAAC,gBAAA;IAAAtD,SAAA,CAAAqD,KAAA,EAAAC,gBAAA;IAAA,SAAAD,MAAA;MAAAjF,eAAA,OAAAiF,KAAA;MAAA,OAAAlD,UAAA,OAAAkD,KAAA,EAAAE,SAAA;IAAA;IAAA,OAAAlF,YAAA,CAAAgF,KAAA;EAAA,EAAiBJ,eAAe,CAAI;EAC7C;EACAI,KAAK,CAAC/F,SAAS,CAACyD,mBAAmB,GAAGD,OAAO;EAC7CuC,KAAK,CAAC/F,SAAS,CAACkG,aAAa,CAACxF,QAAQ,CAAC;EACvCyF,gBAAgB,CAACJ,KAAK,EAAErF,QAAQ,EAAEgF,YAAY,EAAElC,OAAO,CAAC;EACxD,OAAOuC,KAAK;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASK,mBAAmBA,CAACC,MAAM,EAAEX,YAAY,EAAElC,OAAO,EAAE8C,UAAU,EAAE;EACtE,IAAIC,mBAAmB,GAAG/C,OAAO,CAACK,eAAe;EACjD,IAAI0C,mBAAmB,IAAIb,YAAY,CAACc,YAAY,EAAE;IACpD;IACA;IACA;IACA;IACA,IAAMC,UAAU,GAAGJ,MAAM,CAACxE,SAAS,IAAI,UAAU;IACjD;IACA,IAAIkE,KAAK,GAAGL,YAAY,CAACgB,uBAAuB;IAChD,IAAI,CAACX,KAAK,EAAE;MACV,IAAIU,UAAU,EAAE;QACd;AACR;AACA;AACA;QACQ,IAAIE,eAAe,GACfnD,OAAO,CAACoC,WAAW,GAAGpF,mBAAmB,GAAGD,YAAY;;QAE5D;QACA;QACA;QACA;QAAA,IACMqG,mBAAmB,0BAAAC,gBAAA;UAAAnE,SAAA,CAAAkE,mBAAA,EAAAC,gBAAA;UAAA,SAAAD,oBAAA;YAAA9F,eAAA,OAAA8F,mBAAA;YAAA,OAAA/D,UAAA,OAAA+D,mBAAA,EAAAX,SAAA;UAAA;UAAA,OAAAlF,YAAA,CAAA6F,mBAAA;QAAA,EAASD,eAAe;QACjDZ,KAAK,GAAGL,YAAY,CAACgB,uBAAuB,GAAGE,mBAAmB;MACpE,CAAC,MAAM;QACL;AACR;AACA;AACA;QACQ,IAAMD,iBAAe,GAAGN,MAAM,CAACjG,WAAW;;QAE1C;QACA;QACA;QACA;QACA;QACA;QAAA,IACM0G,4BAA4B,0BAAAC,iBAAA;UAAArE,SAAA,CAAAoE,4BAAA,EAAAC,iBAAA;UAAA,SAAAD,6BAAA;YAAAhG,eAAA,OAAAgG,4BAAA;YAAA,OAAAjE,UAAA,OAAAiE,4BAAA,EAAAb,SAAA;UAAA;UAAA,OAAAlF,YAAA,CAAA+F,4BAAA;QAAA,EAASH,iBAAe;QAC1DZ,KAAK,GAAGL,YAAY,CAACgB,uBAAuB,GACxCI,4BAA4B;MAClC;MACA;MACA;MACA,IAAIE,SAAS,GAAGtB,YAAY,CAACsB,SAAS;MACtC,KAAK,IAAI9C,IAAI,IAAI8C,SAAS,EAAE;QAC1BjB,KAAK,CAAC/F,SAAS,CAACiH,kBAAkB,CAAC,QAAQ,GAAG/C,IAAI,EAChD6B,KAAK,CAAC/F,SAAS,CAACkH,qBAAqB,CAACC,SAAS,EAC/C;UAACC,EAAE,EAAEC,2BAA2B,CAACnD,IAAI,EAAEqC,mBAAmB;QAAC,CAAC,CAAC;QAC/DR,KAAK,CAAC/F,SAAS,CAACsH,wBAAwB,CAAC,QAAQ,GAAGpD,IAAI,CAAC;MAC3D;MACA,IAAItE,cAAc,IAAI0G,UAAU,EAAE;QAChCiB,0BAA0B,CAAC7B,YAAY,EAAElC,OAAO,EAAE8C,UAAU,CAAC;MAC/D;IACF;IACA;IACA;IACA,IAAID,MAAM,CAACmB,WAAW,EAAE;MACtB;MACA;MACAvH,MAAM,CAACwH,MAAM,CAACpB,MAAM,CAACqB,MAAM,EAAErB,MAAM,CAACmB,WAAW,CAAC;IAClD;IACA,IAAIf,UAAU,EAAE;MACdhG,eAAe,CAAC4F,MAAM,EAAEN,KAAK,CAAC;MAC9B;MACAM,MAAM,CAACsB,UAAU,GAAG,CAAC,CAAC;MACtBtB,MAAM,CAACuB,aAAa,GAAG,IAAI;MAC3BvB,MAAM,CAACwB,SAAS,GAAG,IAAI;MACvBxB,MAAM,CAAC1C,iBAAiB,CAAC,CAAC;IAC5B,CAAC,MAAM;MACL;MACA1D,MAAM,CAACU,cAAc,CAAC0F,MAAM,EAAEN,KAAK,CAAC/F,SAAS,CAAC;MAC9C;MACA;MACA;MACA,IAAMgH,UAAS,GAAGtB,YAAY,CAACsB,SAAS;MACxC,KAAK,IAAI9C,KAAI,IAAI8C,UAAS,EAAE;QAC1B9C,KAAI,GAAG,QAAQ,GAAGA,KAAI;QACtB,IAAIA,KAAI,IAAImC,MAAM,EAAE;UAClB,IAAMyB,GAAG,GAAGzB,MAAM,CAACnC,KAAI,CAAC;UACxB,OAAOmC,MAAM,CAACnC,KAAI,CAAC;UACnBmC,MAAM,CAACqB,MAAM,CAACxD,KAAI,CAAC,GAAG4D,GAAG;QAC3B;MACF;IACF;EACF;AACF;AACA;;AAEA,SAAST,2BAA2BA,CAACU,QAAQ,EAAExB,mBAAmB,EAAE;EAClE,OAAO,SAAS1C,eAAeA,CAACnD,QAAQ,EAAEwD,IAAI,EAAEvB,KAAK,EAAE;IACrD4D,mBAAmB,CAACrB,IAAI,CAACxE,QAAQ,CAAC6C,iBAAiB,EACjDW,IAAI,CAAC8D,SAAS,CAAC,QAAQ,CAAC5G,MAAM,CAAC,EAAEuB,KAAK,CAACuB,IAAI,CAAC,CAAC;EACjD,CAAC;AACH;AAEA,SAASiC,gBAAgBA,CAACJ,KAAK,EAAErF,QAAQ,EAAEgF,YAAY,EAAElC,OAAO,EAAE;EAChE,IAAIwD,SAAS,GAAGtB,YAAY,CAACsB,SAAS,IAAI,CAAC,CAAC;EAC5C,KAAK,IAAI/C,KAAK,IAAIT,OAAO,CAACE,aAAa,EAAE;IACvC,OAAOsD,SAAS,CAAC/C,KAAK,CAAC;IACvB,IAAIgE,sBAAsB,GAAGzE,OAAO,CAAC0E,kBAAkB;IACvD,IAAID,sBAAsB,EAAE;MAC1BlC,KAAK,CAAC/F,SAAS,CAACiH,kBAAkB,CAAChD,KAAK,EACtC8B,KAAK,CAAC/F,SAAS,CAACkH,qBAAqB,CAACiB,MAAM,EAC5C;QAACf,EAAE,EAAEgB,8BAA8B,CAACnE,KAAK,EAAEgE,sBAAsB;MAAC,CAAC,CAAC;IACxE;EACF;EACA,IAAIzE,OAAO,CAACK,eAAe,IAAInD,QAAQ,CAACuC,UAAU,EAAE;IAClD,KAAK,IAAIa,KAAK,IAAIkD,SAAS,EAAE;MAC3B;MACA;MACA,IAAI,CAACtB,YAAY,CAACc,YAAY,EAAE;QAC9Bd,YAAY,CAACc,YAAY,GAAG,IAAI;MAClC;MACAT,KAAK,CAAC/F,SAAS,CAACiH,kBAAkB,CAACnD,KAAK,EACtCiC,KAAK,CAAC/F,SAAS,CAACkH,qBAAqB,CAACiB,MAAM,EAC5C;QAACf,EAAE,EAAEiB,0BAA0B,CAAC;MAAC,CAAC,CAAC;IACvC;EACF;AACF;AAEA,SAASD,8BAA8BA,CAACE,QAAQ,EAAEL,sBAAsB,EAAE;EACxE,OAAO,SAASC,kBAAkBA,CAACK,IAAI,EAAErE,IAAI,EAAEvB,KAAK,EAAE;IACpDsF,sBAAsB,CAAC/C,IAAI,CAACqD,IAAI,CAAChF,iBAAiB,EAChDgF,IAAI,EAAErE,IAAI,EAAEvB,KAAK,CAACuB,IAAI,CAAC,CAAC;EAC5B,CAAC;AACH;AAEA,SAASmE,0BAA0BA,CAAA,EAAG;EACpC,OAAO,SAASG,cAAcA,CAACD,IAAI,EAAErE,IAAI,EAAEvB,KAAK,EAAE;IAChD4F,IAAI,CAACtF,UAAU,CAACkB,yBAAyB,CAAC,QAAQ,GAAGD,IAAI,EAAEvB,KAAK,CAACuB,IAAI,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC;EACrF,CAAC;AACH;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS2B,UAAUA,CAACnF,QAAQ,EAAE+H,KAAK,EAAEjF,OAAO,EAAE;EACnD;EACA;EACA;EACA,IAAI7D,oBAAoB,IAAI,CAAC6F,cAAc,CAAC9E,QAAQ,CAAC,EAAE;IACrD,MAAM,IAAIgI,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACAlF,OAAO,GAAG,iCAAkCA,OAAO,IAAI,CAAC,CAAE;EAC1D,IAAI9C,QAAQ,CAAC6C,iBAAiB,EAAE;IAC9B,MAAM,IAAImF,KAAK,CAAC,2CAA2C,CAAC;EAC9D;EACAhI,QAAQ,CAAC6C,iBAAiB,GAAGkF,KAAK;EAClC,IAAME,IAAI,GAAGF,KAAK,GAAGA,KAAK,CAACrI,WAAW,GAAGoC,oBAAoB;EAC7D,IAAIkD,YAAY,GAAGiD,IAAI,CAACC,cAAc,CAAClI,QAAQ,CAAC;EAChD;EACA;EACA;AACF;AACA;AACA;EACE,IAAImI,SAAS,GAAGnD,YAAY,CAACoD,uBAAuB;EACpD,IAAI,CAACD,SAAS,EAAE;IACdA,SAAS,GAAGpD,sBAAsB,CAAC/E,QAAQ,EAAEgF,YAAY,EAAElC,OAAO,CAAC;IACnEkC,YAAY,CAACoD,uBAAuB,GAAGD,SAAS;EAClD;EACA,IAAMvC,UAAU,GAAGd,cAAc,CAAC9E,QAAQ,CAAC;EAC3C;EACA0F,mBAAmB,CAAC1F,QAAQ,EAAEgF,YAAY,EAAElC,OAAO,EAAE8C,UAAU,CAAC;EAChE;EACA;EACA,IAAIP,KAAK,0BAAAgD,UAAA;IAAArG,SAAA,CAAAsG,gBAAA,EAAAD,UAAA;IAAA,SAAAC,iBAAA;MAAAlI,eAAA,OAAAkI,gBAAA;MAAA,OAAAnG,UAAA,OAAAmG,gBAAA,EAAA/C,SAAA;IAAA;IAAA,OAAAlF,YAAA,CAAAiI,gBAAA;EAAA,EAAkCH,SAAS,CAAG;EACvD;EACA9C,KAAK,CAAC/F,SAAS,CAAC0E,WAAW,GAAG4B,UAAU;EACxC;EACAP,KAAK,CAAC/F,SAAS,CAACiD,UAAU,GAAG,4BAA8BvC,QAAS;EACpE;EACAqF,KAAK,CAAC/F,SAAS,CAACuD,iBAAiB,GAAG,sBAAwBkF,KAAM;EAClE;EACA1C,KAAK,CAAC/F,SAAS,CAAC+D,WAAW,GAAG2B,YAAY,CAACsB,SAAS;EACpDjB,KAAK,GAAG,iDAAkDA,KAAM,CAAC,CAAC;EAClE,OAAOA,KAAK;AACd;AAEA,SAASwB,0BAA0BA,CAAC7B,YAAY,EAAElC,OAAO,EAAE8C,UAAU,EAAE;EACrE,IAAM2C,aAAa,GAAG3C,UAAU,CAAClG,WAAW,CAAC8I,WAAW;EACxD,IAAOC,eAAe,GAAIzD,YAAY,CAA/ByD,eAAe;EACtB,IAAOzF,aAAa,GAAIF,OAAO,CAAxBE,aAAa;EACpB,KAAK,IAAIQ,IAAI,IAAIiF,eAAe,EAAE;IAChC;IACA;IACA,IAAI,CAACF,aAAa,CAAC/E,IAAI,CAAC,IAAI,EAAER,aAAa,IAAIA,aAAa,CAACQ,IAAI,CAAC,CAAC,EAAE;MACnE,IAAMkF,OAAO,GAAGD,eAAe,CAACjF,IAAI,CAAC;MACrC,KAAK,IAAI/C,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACiI,OAAO,CAAChI,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,IAAOkI,IAAI,GAAID,OAAO,CAACjI,CAAC,CAAC,CAACmI,IAAI,CAAvBD,IAAI;QACX,IAAI,EAAEA,IAAI,CAACE,SAAS,IAAIF,IAAI,CAACE,SAAS,CAACC,MAAM,CAAC,EAAE;UAC9CC,OAAO,CAACC,IAAI,CAAC,aAAAC,MAAA,CAAazF,IAAI,8FAC+B,CAAC;UAC9D;QACF;MACF;IACF;EACF;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS0F,eAAeA,CAAClJ,QAAQ,EAAE4D,IAAI,EAAE;EAC9C,IAAIO,KAAK;EACT,OAAOP,IAAI,EAAE;IACX;IACA;IACA;IACA,IAAKO,KAAK,GAAGP,IAAI,CAACrB,UAAU,GAAGqB,IAAI,GAAGA,IAAI,CAACjB,oBAAoB,EAAG;MAChE;MACA;MACA,IAAIwB,KAAK,CAAC5B,UAAU,IAAIvC,QAAQ,EAAE;QAChC4D,IAAI,GAAGO,KAAK,CAAC5B,UAAU;MACzB,CAAC,MAAM;QACL,OAAO4B,KAAK;MACd;IACF,CAAC,MAAM;MACL;MACA;MACAP,IAAI,GAAGzE,IAAI,CAACyE,IAAI,CAAC,CAACrC,UAAU;IAC9B;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAASO,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}