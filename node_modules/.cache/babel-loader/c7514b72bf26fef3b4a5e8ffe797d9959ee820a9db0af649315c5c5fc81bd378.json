{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\nimport \"core-js/modules/es.error.cause.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nvar modules = {};\nvar lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport var DomModule = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(DomModule, _HTMLElement);\n  function DomModule() {\n    _classCallCheck(this, DomModule);\n    return _callSuper(this, DomModule, arguments);\n  }\n  _createClass(DomModule, [{\n    key: \"attributeChangedCallback\",\n    value: /* eslint-disable no-unused-vars */\n    /**\n     * @param {string} name Name of attribute.\n     * @param {?string} old Old value of attribute.\n     * @param {?string} value Current value of attribute.\n     * @param {?string} namespace Attribute namespace.\n     * @return {void}\n     * @override\n     */\n    function attributeChangedCallback(name, old, value, namespace) {\n      if (old !== value) {\n        this.register();\n      }\n    }\n    /* eslint-enable no-unused-args */\n\n    /**\n     * The absolute URL of the original location of this `dom-module`.\n     *\n     * This value will differ from this element's `ownerDocument` in the\n     * following ways:\n     * - Takes into account any `assetpath` attribute added during bundling\n     *   to indicate the original location relative to the bundled location\n     * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n     *   the path is relative to the import document's location since\n     *   `ownerDocument` is not currently polyfilled\n     */\n  }, {\n    key: \"assetpath\",\n    get: function get() {\n      // Don't override existing assetpath.\n      if (!this.__assetpath) {\n        // note: assetpath set via an attribute must be relative to this\n        // element's location; accommodate polyfilled HTMLImports\n        var owner = window.HTMLImports && HTMLImports.importForElement ? HTMLImports.importForElement(this) || document : this.ownerDocument;\n        var url = resolveUrl(this.getAttribute('assetpath') || '', owner.baseURI);\n        this.__assetpath = pathFromUrl(url);\n      }\n      return this.__assetpath;\n    }\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @param {string=} id The id at which to register the dom-module.\n     * @return {void}\n     */\n  }, {\n    key: \"register\",\n    value: function register(id) {\n      id = id || this.id;\n      if (id) {\n        // Under strictTemplatePolicy, reject and null out any re-registered\n        // dom-module since it is ambiguous whether first-in or last-in is trusted\n        if (strictTemplatePolicy && findModule(id) !== undefined) {\n          setModule(id, null);\n          throw new Error(\"strictTemplatePolicy: dom-module \".concat(id, \" re-registered\"));\n        }\n        this.id = id;\n        setModule(id, this);\n        styleOutsideTemplateCheck(this);\n      }\n    }\n  }], [{\n    key: \"observedAttributes\",\n    get: /** @override */\n    function get() {\n      return ['id'];\n    }\n\n    /**\n     * Retrieves the element specified by the css `selector` in the module\n     * registered by `id`. For example, this.import('foo', 'img');\n     * @param {string} id The id of the dom-module in which to search.\n     * @param {string=} selector The css selector by which to find the element.\n     * @return {Element} Returns the element which matches `selector` in the\n     * module registered at the specified `id`.\n     *\n     * @export\n     * @nocollapse Referred to indirectly in style-gather.js\n     */\n  }, {\n    key: \"import\",\n    value: function _import(id, selector) {\n      if (id) {\n        var m = findModule(id);\n        if (m && selector) {\n          return m.querySelector(selector);\n        }\n        return m;\n      }\n      return null;\n    }\n  }]);\n  return DomModule;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\nDomModule.prototype['modules'] = modules;\ncustomElements.define('dom-module', DomModule);","map":{"version":3,"names":["resolveUrl","pathFromUrl","strictTemplatePolicy","modules","lcModules","setModule","id","module","toLowerCase","findModule","styleOutsideTemplateCheck","inst","querySelector","console","warn","DomModule","_HTMLElement","_inherits","_classCallCheck","_callSuper","arguments","_createClass","key","value","attributeChangedCallback","name","old","namespace","register","get","__assetpath","owner","window","HTMLImports","importForElement","document","ownerDocument","url","getAttribute","baseURI","undefined","Error","concat","_import","selector","m","_wrapNativeSuper","HTMLElement","prototype","customElements","define"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/elements/dom-module.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { resolveUrl, pathFromUrl } from '../utils/resolve-url.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\n\nlet modules = {};\nlet lcModules = {};\n/**\n * Sets a dom-module into the global registry by id.\n *\n * @param {string} id dom-module id\n * @param {DomModule} module dom-module instance\n * @return {void}\n */\nfunction setModule(id, module) {\n  // store id separate from lowercased id so that\n  // in all cases mixedCase id will stored distinctly\n  // and lowercase version is a fallback\n  modules[id] = lcModules[id.toLowerCase()] = module;\n}\n/**\n * Retrieves a dom-module from the global registry by id.\n *\n * @param {string} id dom-module id\n * @return {DomModule!} dom-module instance\n */\nfunction findModule(id) {\n  return modules[id] || lcModules[id.toLowerCase()];\n}\n\nfunction styleOutsideTemplateCheck(inst) {\n  if (inst.querySelector('style')) {\n    console.warn('dom-module %s has style outside template', inst.id);\n  }\n}\n\n/**\n * The `dom-module` element registers the dom it contains to the name given\n * by the module's id attribute. It provides a unified database of dom\n * accessible via its static `import` API.\n *\n * A key use case of `dom-module` is for providing custom element `<template>`s\n * via HTML imports that are parsed by the native HTML parser, that can be\n * relocated during a bundling pass and still looked up by `id`.\n *\n * Example:\n *\n *     <dom-module id=\"foo\">\n *       <img src=\"stuff.png\">\n *     </dom-module>\n *\n * Then in code in some other location that cannot access the dom-module above\n *\n *     let img = customElements.get('dom-module').import('foo', 'img');\n *\n * @customElement\n * @extends HTMLElement\n * @summary Custom element that provides a registry of relocatable DOM content\n *   by `id` that is agnostic to bundling.\n * @unrestricted\n */\nexport class DomModule extends HTMLElement {\n\n  /** @override */\n  static get observedAttributes() { return ['id']; }\n\n  /**\n   * Retrieves the element specified by the css `selector` in the module\n   * registered by `id`. For example, this.import('foo', 'img');\n   * @param {string} id The id of the dom-module in which to search.\n   * @param {string=} selector The css selector by which to find the element.\n   * @return {Element} Returns the element which matches `selector` in the\n   * module registered at the specified `id`.\n   *\n   * @export\n   * @nocollapse Referred to indirectly in style-gather.js\n   */\n  static import(id, selector) {\n    if (id) {\n      let m = findModule(id);\n      if (m && selector) {\n        return m.querySelector(selector);\n      }\n      return m;\n    }\n    return null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @param {string} name Name of attribute.\n   * @param {?string} old Old value of attribute.\n   * @param {?string} value Current value of attribute.\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   * @override\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    if (old !== value) {\n      this.register();\n    }\n  }\n  /* eslint-enable no-unused-args */\n\n  /**\n   * The absolute URL of the original location of this `dom-module`.\n   *\n   * This value will differ from this element's `ownerDocument` in the\n   * following ways:\n   * - Takes into account any `assetpath` attribute added during bundling\n   *   to indicate the original location relative to the bundled location\n   * - Uses the HTMLImports polyfill's `importForElement` API to ensure\n   *   the path is relative to the import document's location since\n   *   `ownerDocument` is not currently polyfilled\n   */\n  get assetpath() {\n    // Don't override existing assetpath.\n    if (!this.__assetpath) {\n      // note: assetpath set via an attribute must be relative to this\n      // element's location; accommodate polyfilled HTMLImports\n      const owner = window.HTMLImports && HTMLImports.importForElement ?\n        HTMLImports.importForElement(this) || document : this.ownerDocument;\n      const url = resolveUrl(\n        this.getAttribute('assetpath') || '', owner.baseURI);\n      this.__assetpath = pathFromUrl(url);\n    }\n    return this.__assetpath;\n  }\n\n  /**\n   * Registers the dom-module at a given id. This method should only be called\n   * when a dom-module is imperatively created. For\n   * example, `document.createElement('dom-module').register('foo')`.\n   * @param {string=} id The id at which to register the dom-module.\n   * @return {void}\n   */\n  register(id) {\n    id = id || this.id;\n    if (id) {\n      // Under strictTemplatePolicy, reject and null out any re-registered\n      // dom-module since it is ambiguous whether first-in or last-in is trusted\n      if (strictTemplatePolicy && findModule(id) !== undefined) {\n        setModule(id, null);\n        throw new Error(`strictTemplatePolicy: dom-module ${id} re-registered`);\n      }\n      this.id = id;\n      setModule(id, this);\n      styleOutsideTemplateCheck(this);\n    }\n  }\n}\n\nDomModule.prototype['modules'] = modules;\n\ncustomElements.define('dom-module', DomModule);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}