{"ast":null,"code":"import { createCollection } from \"home-assistant-js-websocket\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { debounce } from \"../common/util/debounce\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\nexport { subscribeEntityRegistryDisplay } from \"./ws-entity_registry_display\";\nconst batteryPriorities = [\"sensor\", \"binary_sensor\"];\nexport const findBatteryEntity = (hass, entities) => {\n  const batteryEntities = entities.filter(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery\" && batteryPriorities.includes(computeDomain(entity.entity_id))).sort((a, b) => batteryPriorities.indexOf(computeDomain(a.entity_id)) - batteryPriorities.indexOf(computeDomain(b.entity_id)));\n  if (batteryEntities.length > 0) {\n    return batteryEntities[0];\n  }\n  return undefined;\n};\nexport const findBatteryChargingEntity = (hass, entities) => entities.find(entity => hass.states[entity.entity_id] && hass.states[entity.entity_id].attributes.device_class === \"battery_charging\");\nexport const computeEntityRegistryName = (hass, entry) => {\n  if (entry.name) {\n    return entry.name;\n  }\n  const state = hass.states[entry.entity_id];\n  if (state) {\n    return computeStateName(state);\n  }\n  return entry.original_name ? entry.original_name : entry.entity_id;\n};\nexport const getExtendedEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/get\",\n  entity_id: entityId\n});\nexport const getExtendedEntityRegistryEntries = (hass, entityIds) => hass.callWS({\n  type: \"config/entity_registry/get_entries\",\n  entity_ids: entityIds\n});\nexport const updateEntityRegistryEntry = (hass, entityId, updates) => hass.callWS({\n  type: \"config/entity_registry/update\",\n  entity_id: entityId,\n  ...updates\n});\nexport const removeEntityRegistryEntry = (hass, entityId) => hass.callWS({\n  type: \"config/entity_registry/remove\",\n  entity_id: entityId\n});\nexport const fetchEntityRegistry = conn => conn.sendMessagePromise({\n  type: \"config/entity_registry/list\"\n});\nexport const fetchEntityRegistryDisplay = conn => conn.sendMessagePromise({\n  type: \"config/entity_registry/list_for_display\"\n});\nconst subscribeEntityRegistryUpdates = (conn, store) => conn.subscribeEvents(debounce(() => fetchEntityRegistry(conn).then(entities => store.setState(entities, true)), 500, true), \"entity_registry_updated\");\nexport const subscribeEntityRegistry = (conn, onChange) => createCollection(\"_entityRegistry\", fetchEntityRegistry, subscribeEntityRegistryUpdates, conn, onChange);\nexport const sortEntityRegistryByName = (entries, language) => entries.sort((entry1, entry2) => caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language));\nexport const entityRegistryByEntityId = memoizeOne(entries => {\n  const entities = {};\n  for (const entity of entries) {\n    entities[entity.entity_id] = entity;\n  }\n  return entities;\n});\nexport const entityRegistryById = memoizeOne(entries => {\n  const entities = {};\n  for (const entity of entries) {\n    entities[entity.id] = entity;\n  }\n  return entities;\n});\nexport const getEntityPlatformLookup = entities => {\n  const entityLookup = {};\n  for (const confEnt of entities) {\n    if (!confEnt.platform) {\n      continue;\n    }\n    entityLookup[confEnt.entity_id] = confEnt.platform;\n  }\n  return entityLookup;\n};","map":{"version":3,"names":["createCollection","memoizeOne","computeStateName","caseInsensitiveStringCompare","debounce","computeDomain","subscribeEntityRegistryDisplay","batteryPriorities","findBatteryEntity","hass","entities","batteryEntities","filter","entity","states","entity_id","attributes","device_class","includes","sort","a","b","indexOf","length","undefined","findBatteryChargingEntity","find","computeEntityRegistryName","entry","name","state","original_name","getExtendedEntityRegistryEntry","entityId","callWS","type","getExtendedEntityRegistryEntries","entityIds","entity_ids","updateEntityRegistryEntry","updates","removeEntityRegistryEntry","fetchEntityRegistry","conn","sendMessagePromise","fetchEntityRegistryDisplay","subscribeEntityRegistryUpdates","store","subscribeEvents","then","setState","subscribeEntityRegistry","onChange","sortEntityRegistryByName","entries","language","entry1","entry2","entityRegistryByEntityId","entityRegistryById","id","getEntityPlatformLookup","entityLookup","confEnt","platform"],"sources":["/workspaces/frontend/src/data/entity_registry.ts"],"sourcesContent":["import { Connection, createCollection } from \"home-assistant-js-websocket\";\nimport { Store } from \"home-assistant-js-websocket/dist/store\";\nimport memoizeOne from \"memoize-one\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { caseInsensitiveStringCompare } from \"../common/string/compare\";\nimport { debounce } from \"../common/util/debounce\";\nimport { HomeAssistant } from \"../types\";\nimport { LightColor } from \"./light\";\nimport { computeDomain } from \"../common/entity/compute_domain\";\n\nexport { subscribeEntityRegistryDisplay } from \"./ws-entity_registry_display\";\n\ntype entityCategory = \"config\" | \"diagnostic\";\n\nexport interface EntityRegistryDisplayEntry {\n  entity_id: string;\n  name?: string;\n  icon?: string;\n  device_id?: string;\n  area_id?: string;\n  hidden?: boolean;\n  entity_category?: entityCategory;\n  translation_key?: string;\n  platform?: string;\n  display_precision?: number;\n}\n\nexport interface EntityRegistryDisplayEntryResponse {\n  entities: {\n    ei: string;\n    di?: string;\n    ai?: string;\n    ec?: number;\n    en?: string;\n    ic?: string;\n    pl?: string;\n    tk?: string;\n    hb?: boolean;\n    dp?: number;\n  }[];\n  entity_categories: Record<number, entityCategory>;\n}\n\nexport interface EntityRegistryEntry {\n  id: string;\n  entity_id: string;\n  name: string | null;\n  icon: string | null;\n  platform: string;\n  config_entry_id: string | null;\n  device_id: string | null;\n  area_id: string | null;\n  disabled_by: \"user\" | \"device\" | \"integration\" | \"config_entry\" | null;\n  hidden_by: Exclude<EntityRegistryEntry[\"disabled_by\"], \"config_entry\">;\n  entity_category: entityCategory | null;\n  has_entity_name: boolean;\n  original_name?: string;\n  unique_id: string;\n  translation_key?: string;\n  options: EntityRegistryOptions | null;\n}\n\nexport interface ExtEntityRegistryEntry extends EntityRegistryEntry {\n  capabilities: Record<string, unknown>;\n  original_icon?: string;\n  device_class?: string;\n  original_device_class?: string;\n  aliases: string[];\n}\n\nexport interface UpdateEntityRegistryEntryResult {\n  entity_entry: ExtEntityRegistryEntry;\n  reload_delay?: number;\n  require_restart?: boolean;\n}\n\nexport interface SensorEntityOptions {\n  display_precision?: number | null;\n  suggested_display_precision?: number | null;\n  unit_of_measurement?: string | null;\n}\n\nexport interface LightEntityOptions {\n  favorite_colors?: LightColor[];\n}\n\nexport interface NumberEntityOptions {\n  unit_of_measurement?: string | null;\n}\n\nexport interface LockEntityOptions {\n  default_code?: string | null;\n}\n\nexport interface WeatherEntityOptions {\n  precipitation_unit?: string | null;\n  pressure_unit?: string | null;\n  temperature_unit?: string | null;\n  visibility_unit?: string | null;\n  wind_speed_unit?: string | null;\n}\n\nexport interface SwitchAsXEntityOptions {\n  entity_id: string;\n  invert: boolean;\n}\n\nexport interface EntityRegistryOptions {\n  number?: NumberEntityOptions;\n  sensor?: SensorEntityOptions;\n  lock?: LockEntityOptions;\n  weather?: WeatherEntityOptions;\n  light?: LightEntityOptions;\n  switch_as_x?: SwitchAsXEntityOptions;\n  conversation?: Record<string, unknown>;\n  \"cloud.alexa\"?: Record<string, unknown>;\n  \"cloud.google_assistant\"?: Record<string, unknown>;\n}\n\nexport interface EntityRegistryEntryUpdateParams {\n  name?: string | null;\n  icon?: string | null;\n  device_class?: string | null;\n  area_id?: string | null;\n  disabled_by?: string | null;\n  hidden_by: string | null;\n  new_entity_id?: string;\n  options_domain?: string;\n  options?:\n    | SensorEntityOptions\n    | NumberEntityOptions\n    | LockEntityOptions\n    | WeatherEntityOptions\n    | LightEntityOptions;\n  aliases?: string[];\n}\n\nconst batteryPriorities = [\"sensor\", \"binary_sensor\"];\nexport const findBatteryEntity = <T extends { entity_id: string }>(\n  hass: HomeAssistant,\n  entities: T[]\n): T | undefined => {\n  const batteryEntities = entities\n    .filter(\n      (entity) =>\n        hass.states[entity.entity_id] &&\n        hass.states[entity.entity_id].attributes.device_class === \"battery\" &&\n        batteryPriorities.includes(computeDomain(entity.entity_id))\n    )\n    .sort(\n      (a, b) =>\n        batteryPriorities.indexOf(computeDomain(a.entity_id)) -\n        batteryPriorities.indexOf(computeDomain(b.entity_id))\n    );\n  if (batteryEntities.length > 0) {\n    return batteryEntities[0];\n  }\n\n  return undefined;\n};\n\nexport const findBatteryChargingEntity = <T extends { entity_id: string }>(\n  hass: HomeAssistant,\n  entities: T[]\n): T | undefined =>\n  entities.find(\n    (entity) =>\n      hass.states[entity.entity_id] &&\n      hass.states[entity.entity_id].attributes.device_class ===\n        \"battery_charging\"\n  );\n\nexport const computeEntityRegistryName = (\n  hass: HomeAssistant,\n  entry: EntityRegistryEntry\n): string | null => {\n  if (entry.name) {\n    return entry.name;\n  }\n  const state = hass.states[entry.entity_id];\n  if (state) {\n    return computeStateName(state);\n  }\n  return entry.original_name ? entry.original_name : entry.entity_id;\n};\n\nexport const getExtendedEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string\n): Promise<ExtEntityRegistryEntry> =>\n  hass.callWS({\n    type: \"config/entity_registry/get\",\n    entity_id: entityId,\n  });\n\nexport const getExtendedEntityRegistryEntries = (\n  hass: HomeAssistant,\n  entityIds: string[]\n): Promise<Record<string, ExtEntityRegistryEntry>> =>\n  hass.callWS({\n    type: \"config/entity_registry/get_entries\",\n    entity_ids: entityIds,\n  });\n\nexport const updateEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string,\n  updates: Partial<EntityRegistryEntryUpdateParams>\n): Promise<UpdateEntityRegistryEntryResult> =>\n  hass.callWS({\n    type: \"config/entity_registry/update\",\n    entity_id: entityId,\n    ...updates,\n  });\n\nexport const removeEntityRegistryEntry = (\n  hass: HomeAssistant,\n  entityId: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"config/entity_registry/remove\",\n    entity_id: entityId,\n  });\n\nexport const fetchEntityRegistry = (conn: Connection) =>\n  conn.sendMessagePromise<EntityRegistryEntry[]>({\n    type: \"config/entity_registry/list\",\n  });\n\nexport const fetchEntityRegistryDisplay = (conn: Connection) =>\n  conn.sendMessagePromise<EntityRegistryDisplayEntryResponse>({\n    type: \"config/entity_registry/list_for_display\",\n  });\n\nconst subscribeEntityRegistryUpdates = (\n  conn: Connection,\n  store: Store<EntityRegistryEntry[]>\n) =>\n  conn.subscribeEvents(\n    debounce(\n      () =>\n        fetchEntityRegistry(conn).then((entities) =>\n          store.setState(entities, true)\n        ),\n      500,\n      true\n    ),\n    \"entity_registry_updated\"\n  );\n\nexport const subscribeEntityRegistry = (\n  conn: Connection,\n  onChange: (entities: EntityRegistryEntry[]) => void\n) =>\n  createCollection<EntityRegistryEntry[]>(\n    \"_entityRegistry\",\n    fetchEntityRegistry,\n    subscribeEntityRegistryUpdates,\n    conn,\n    onChange\n  );\n\nexport const sortEntityRegistryByName = (\n  entries: EntityRegistryEntry[],\n  language: string\n) =>\n  entries.sort((entry1, entry2) =>\n    caseInsensitiveStringCompare(entry1.name || \"\", entry2.name || \"\", language)\n  );\n\nexport const entityRegistryByEntityId = memoizeOne(\n  (entries: EntityRegistryEntry[]) => {\n    const entities: Record<string, EntityRegistryEntry> = {};\n    for (const entity of entries) {\n      entities[entity.entity_id] = entity;\n    }\n    return entities;\n  }\n);\n\nexport const entityRegistryById = memoizeOne(\n  (entries: EntityRegistryEntry[]) => {\n    const entities: Record<string, EntityRegistryEntry> = {};\n    for (const entity of entries) {\n      entities[entity.id] = entity;\n    }\n    return entities;\n  }\n);\n\nexport const getEntityPlatformLookup = (\n  entities: EntityRegistryEntry[]\n): Record<string, string> => {\n  const entityLookup = {};\n  for (const confEnt of entities) {\n    if (!confEnt.platform) {\n      continue;\n    }\n    entityLookup[confEnt.entity_id] = confEnt.platform;\n  }\n  return entityLookup;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}