{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\nrequire(\"core-js/modules/es.array.at.js\");\nrequire(\"core-js/modules/es.array.index-of.js\");\nrequire(\"core-js/modules/es.array.push.js\");\nrequire(\"core-js/modules/es.array.slice.js\");\nrequire(\"core-js/modules/es.object.get-own-property-names.js\");\nrequire(\"core-js/modules/es.object.to-string.js\");\nrequire(\"core-js/modules/es.promise.js\");\nrequire(\"core-js/modules/es.string.at-alternative.js\");\nrequire(\"core-js/modules/esnext.iterator.constructor.js\");\nrequire(\"core-js/modules/esnext.iterator.to-array.js\");\n/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\nexports.ArraySet = ArraySet;","map":{"version":3,"names":["util","require","has","Object","prototype","hasOwnProperty","ArraySet","_array","_set","create","fromArray","ArraySet_fromArray","aArray","aAllowDuplicates","set","i","len","length","add","size","ArraySet_size","getOwnPropertyNames","ArraySet_add","aStr","sStr","toSetString","isDuplicate","call","idx","push","ArraySet_has","indexOf","ArraySet_indexOf","Error","at","ArraySet_at","aIdx","toArray","ArraySet_toArray","slice","exports"],"sources":["/workspaces/frontend/node_modules/stacktrace-gps/node_modules/source-map/lib/array-set.js"],"sourcesContent":["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = util.toSetString(aStr);\n  var isDuplicate = has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    this._set[sStr] = idx;\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  var sStr = util.toSetString(aStr);\n  return has.call(this._set, sStr);\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  var sStr = util.toSetString(aStr);\n  if (has.call(this._set, sStr)) {\n    return this._set[sStr];\n  }\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}