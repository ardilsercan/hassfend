{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport { expose } from \"comlink\";\nimport { stringCompare } from \"../../common/string/compare\";\nvar filterData = function filterData(data, columns, filter) {\n  filter = filter.toUpperCase();\n  return data.filter(function (row) {\n    return Object.entries(columns).some(function (columnEntry) {\n      var _columnEntry = _slicedToArray(columnEntry, 2),\n        key = _columnEntry[0],\n        column = _columnEntry[1];\n      if (column.filterable) {\n        if (String(column.filterKey ? row[column.valueColumn || key][column.filterKey] : row[column.valueColumn || key]).toUpperCase().includes(filter)) {\n          return true;\n        }\n      }\n      return false;\n    });\n  });\n};\nvar sortData = function sortData(data, column, direction, sortColumn, language) {\n  return data.sort(function (a, b) {\n    var sort = 1;\n    if (direction === \"desc\") {\n      sort = -1;\n    }\n    var valA = column.filterKey ? a[column.valueColumn || sortColumn][column.filterKey] : a[column.valueColumn || sortColumn];\n    var valB = column.filterKey ? b[column.valueColumn || sortColumn][column.filterKey] : b[column.valueColumn || sortColumn];\n    if (column.type === \"numeric\") {\n      valA = isNaN(valA) ? undefined : Number(valA);\n      valB = isNaN(valB) ? undefined : Number(valB);\n    } else if (typeof valA === \"string\" && typeof valB === \"string\") {\n      return sort * stringCompare(valA, valB, language);\n    }\n\n    // Ensure \"undefined\" and \"null\" are always sorted to the bottom\n    if (valA == null && valB != null) {\n      return 1;\n    }\n    if (valB == null && valA != null) {\n      return -1;\n    }\n    if (valA < valB) {\n      return sort * -1;\n    }\n    if (valA > valB) {\n      return sort * 1;\n    }\n    return 0;\n  });\n};\nvar api = {\n  filterData: filterData,\n  sortData: sortData\n};\nexpose(api);","map":{"version":3,"names":["expose","stringCompare","filterData","data","columns","filter","toUpperCase","row","Object","entries","some","columnEntry","_columnEntry","_slicedToArray","key","column","filterable","String","filterKey","valueColumn","includes","sortData","direction","sortColumn","language","sort","a","b","valA","valB","type","isNaN","undefined","Number","api"],"sources":["/workspaces/frontend/src/components/data-table/sort-filter-worker.ts"],"sourcesContent":["import { expose } from \"comlink\";\nimport { stringCompare } from \"../../common/string/compare\";\nimport type {\n  ClonedDataTableColumnData,\n  DataTableRowData,\n  SortableColumnContainer,\n  SortingDirection,\n} from \"./ha-data-table\";\n\nconst filterData = (\n  data: DataTableRowData[],\n  columns: SortableColumnContainer,\n  filter: string\n) => {\n  filter = filter.toUpperCase();\n  return data.filter((row) =>\n    Object.entries(columns).some((columnEntry) => {\n      const [key, column] = columnEntry;\n      if (column.filterable) {\n        if (\n          String(\n            column.filterKey\n              ? row[column.valueColumn || key][column.filterKey]\n              : row[column.valueColumn || key]\n          )\n            .toUpperCase()\n            .includes(filter)\n        ) {\n          return true;\n        }\n      }\n      return false;\n    })\n  );\n};\n\nconst sortData = (\n  data: DataTableRowData[],\n  column: ClonedDataTableColumnData,\n  direction: SortingDirection,\n  sortColumn: string,\n  language?: string\n) =>\n  data.sort((a, b) => {\n    let sort = 1;\n    if (direction === \"desc\") {\n      sort = -1;\n    }\n\n    let valA = column.filterKey\n      ? a[column.valueColumn || sortColumn][column.filterKey]\n      : a[column.valueColumn || sortColumn];\n\n    let valB = column.filterKey\n      ? b[column.valueColumn || sortColumn][column.filterKey]\n      : b[column.valueColumn || sortColumn];\n\n    if (column.type === \"numeric\") {\n      valA = isNaN(valA) ? undefined : Number(valA);\n      valB = isNaN(valB) ? undefined : Number(valB);\n    } else if (typeof valA === \"string\" && typeof valB === \"string\") {\n      return sort * stringCompare(valA, valB, language);\n    }\n\n    // Ensure \"undefined\" and \"null\" are always sorted to the bottom\n    if (valA == null && valB != null) {\n      return 1;\n    }\n    if (valB == null && valA != null) {\n      return -1;\n    }\n\n    if (valA < valB) {\n      return sort * -1;\n    }\n    if (valA > valB) {\n      return sort * 1;\n    }\n    return 0;\n  });\n\nconst api = {\n  filterData,\n  sortData,\n};\n\nexport type Api = typeof api;\n\nexpose(api);\n"],"mappings":";;;;;;;;;;;AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,SAASC,aAAa,QAAQ,6BAA6B;AAQ3D,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CACdC,IAAwB,EACxBC,OAAgC,EAChCC,MAAc,EACX;EACHA,MAAM,GAAGA,MAAM,CAACC,WAAW,CAAC,CAAC;EAC7B,OAAOH,IAAI,CAACE,MAAM,CAAC,UAACE,GAAG;IAAA,OACrBC,MAAM,CAACC,OAAO,CAACL,OAAO,CAAC,CAACM,IAAI,CAAC,UAACC,WAAW,EAAK;MAC5C,IAAAC,YAAA,GAAAC,cAAA,CAAsBF,WAAW;QAA1BG,GAAG,GAAAF,YAAA;QAAEG,MAAM,GAAAH,YAAA;MAClB,IAAIG,MAAM,CAACC,UAAU,EAAE;QACrB,IACEC,MAAM,CACJF,MAAM,CAACG,SAAS,GACZX,GAAG,CAACQ,MAAM,CAACI,WAAW,IAAIL,GAAG,CAAC,CAACC,MAAM,CAACG,SAAS,CAAC,GAChDX,GAAG,CAACQ,MAAM,CAACI,WAAW,IAAIL,GAAG,CACnC,CAAC,CACER,WAAW,CAAC,CAAC,CACbc,QAAQ,CAACf,MAAM,CAAC,EACnB;UACA,OAAO,IAAI;QACb;MACF;MACA,OAAO,KAAK;IACd,CAAC,CAAC;EAAA,CACJ,CAAC;AACH,CAAC;AAED,IAAMgB,QAAQ,GAAG,SAAXA,QAAQA,CACZlB,IAAwB,EACxBY,MAAiC,EACjCO,SAA2B,EAC3BC,UAAkB,EAClBC,QAAiB;EAAA,OAEjBrB,IAAI,CAACsB,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IAClB,IAAIF,IAAI,GAAG,CAAC;IACZ,IAAIH,SAAS,KAAK,MAAM,EAAE;MACxBG,IAAI,GAAG,CAAC,CAAC;IACX;IAEA,IAAIG,IAAI,GAAGb,MAAM,CAACG,SAAS,GACvBQ,CAAC,CAACX,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC,CAACR,MAAM,CAACG,SAAS,CAAC,GACrDQ,CAAC,CAACX,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC;IAEvC,IAAIM,IAAI,GAAGd,MAAM,CAACG,SAAS,GACvBS,CAAC,CAACZ,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC,CAACR,MAAM,CAACG,SAAS,CAAC,GACrDS,CAAC,CAACZ,MAAM,CAACI,WAAW,IAAII,UAAU,CAAC;IAEvC,IAAIR,MAAM,CAACe,IAAI,KAAK,SAAS,EAAE;MAC7BF,IAAI,GAAGG,KAAK,CAACH,IAAI,CAAC,GAAGI,SAAS,GAAGC,MAAM,CAACL,IAAI,CAAC;MAC7CC,IAAI,GAAGE,KAAK,CAACF,IAAI,CAAC,GAAGG,SAAS,GAAGC,MAAM,CAACJ,IAAI,CAAC;IAC/C,CAAC,MAAM,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,OAAOC,IAAI,KAAK,QAAQ,EAAE;MAC/D,OAAOJ,IAAI,GAAGxB,aAAa,CAAC2B,IAAI,EAAEC,IAAI,EAAEL,QAAQ,CAAC;IACnD;;IAEA;IACA,IAAII,IAAI,IAAI,IAAI,IAAIC,IAAI,IAAI,IAAI,EAAE;MAChC,OAAO,CAAC;IACV;IACA,IAAIA,IAAI,IAAI,IAAI,IAAID,IAAI,IAAI,IAAI,EAAE;MAChC,OAAO,CAAC,CAAC;IACX;IAEA,IAAIA,IAAI,GAAGC,IAAI,EAAE;MACf,OAAOJ,IAAI,GAAG,CAAC,CAAC;IAClB;IACA,IAAIG,IAAI,GAAGC,IAAI,EAAE;MACf,OAAOJ,IAAI,GAAG,CAAC;IACjB;IACA,OAAO,CAAC;EACV,CAAC,CAAC;AAAA;AAEJ,IAAMS,GAAG,GAAG;EACVhC,UAAU,EAAVA,UAAU;EACVmB,QAAQ,EAARA;AACF,CAAC;AAIDrB,MAAM,CAACkC,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}