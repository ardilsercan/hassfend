{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.search.js\";\nimport \"core-js/modules/es.string.link.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn as _countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nvar languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n  return Facet.define({\n    combine: baseData ? function (values) {\n      return values.concat(baseData);\n    } : undefined\n  });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nvar sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nvar Language = /*#__PURE__*/function () {\n  /**\n  Construct a language object. If you need to invoke this\n  directly, first define a data facet with\n  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n  configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n  to the language's outer syntax node.\n  */\n  function Language(\n  /**\n  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n  used for this language.\n  */\n  data, parser) {\n    var extraExtensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var name = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    _classCallCheck(this, Language);\n    this.data = data;\n    this.name = name;\n    // Kludge to define EditorState.tree as a debugging helper,\n    // without the EditorState package actually knowing about\n    // languages and lezer trees.\n    if (!EditorState.prototype.hasOwnProperty(\"tree\")) Object.defineProperty(EditorState.prototype, \"tree\", {\n      get: function get() {\n        return syntaxTree(this);\n      }\n    });\n    this.parser = parser;\n    this.extension = [language.of(this), EditorState.languageData.of(function (state, pos, side) {\n      var top = topNodeAt(state, pos, side),\n        data = top.type.prop(languageDataProp);\n      if (!data) return [];\n      var base = state.facet(data),\n        sub = top.type.prop(sublanguageProp);\n      if (sub) {\n        var innerNode = top.resolve(pos - top.from, side);\n        var _iterator = _createForOfIteratorHelper(sub),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var sublang = _step.value;\n            if (sublang.test(innerNode, state)) {\n              var _data = state.facet(sublang.facet);\n              return sublang.type == \"replace\" ? _data : _data.concat(base);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      return base;\n    })].concat(extraExtensions);\n  }\n  /**\n  Query whether this language is active at the given position.\n  */\n  _createClass(Language, [{\n    key: \"isActiveAt\",\n    value: function isActiveAt(state, pos) {\n      var side = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n  }, {\n    key: \"findRegions\",\n    value: function findRegions(state) {\n      var _this = this;\n      var lang = state.facet(language);\n      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{\n        from: 0,\n        to: state.doc.length\n      }];\n      if (!lang || !lang.allowsNesting) return [];\n      var result = [];\n      var explore = function explore(tree, from) {\n        if (tree.prop(languageDataProp) == _this.data) {\n          result.push({\n            from: from,\n            to: from + tree.length\n          });\n          return;\n        }\n        var mount = tree.prop(NodeProp.mounted);\n        if (mount) {\n          if (mount.tree.prop(languageDataProp) == _this.data) {\n            if (mount.overlay) {\n              var _iterator2 = _createForOfIteratorHelper(mount.overlay),\n                _step2;\n              try {\n                for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                  var r = _step2.value;\n                  result.push({\n                    from: r.from + from,\n                    to: r.to + from\n                  });\n                }\n              } catch (err) {\n                _iterator2.e(err);\n              } finally {\n                _iterator2.f();\n              }\n            } else result.push({\n              from: from,\n              to: from + tree.length\n            });\n            return;\n          } else if (mount.overlay) {\n            var size = result.length;\n            explore(mount.tree, mount.overlay[0].from + from);\n            if (result.length > size) return;\n          }\n        }\n        for (var i = 0; i < tree.children.length; i++) {\n          var ch = tree.children[i];\n          if (ch instanceof Tree) explore(ch, tree.positions[i] + from);\n        }\n      };\n      explore(syntaxTree(state), 0);\n      return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return true;\n    }\n  }]);\n  return Language;\n}();\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n  var topLang = state.facet(language),\n    tree = syntaxTree(state).topNode;\n  if (!topLang || topLang.allowsNesting) {\n    for (var node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers)) if (node.type.isTop) tree = node;\n  }\n  return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nvar LRLanguage = /*#__PURE__*/function (_Language) {\n  _inherits(LRLanguage, _Language);\n  function LRLanguage(data, parser, name) {\n    var _this2;\n    _classCallCheck(this, LRLanguage);\n    _this2 = _callSuper(this, LRLanguage, [data, parser, [], name]);\n    _this2.parser = parser;\n    return _this2;\n  }\n  /**\n  Define a language from a parser.\n  */\n  _createClass(LRLanguage, [{\n    key: \"configure\",\n    value:\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    function configure(options, name) {\n      return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return this.parser.hasWrappers();\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      var data = defineLanguageFacet(spec.languageData);\n      return new LRLanguage(data, spec.parser.configure({\n        props: [languageDataProp.add(function (type) {\n          return type.isTop ? data : undefined;\n        })]\n      }), spec.name);\n    }\n  }]);\n  return LRLanguage;\n}(Language);\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n  var field = state.field(Language.state, false);\n  return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto) {\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;\n  var _a;\n  var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n  if (!parse) return null;\n  var oldVieport = parse.viewport;\n  parse.updateViewport({\n    from: 0,\n    to: upto\n  });\n  var result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n  parse.updateViewport(oldVieport);\n  return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state) {\n  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.doc.length;\n  var _a;\n  return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view) {\n  var upto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : view.viewport.to;\n  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  var success = ensureSyntaxTree(view.state, upto, timeout);\n  if (success != syntaxTree(view.state)) view.dispatch({});\n  return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n  var _a;\n  return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nvar DocInput = /*#__PURE__*/function () {\n  /**\n  Create an input object for the given document.\n  */\n  function DocInput(doc) {\n    _classCallCheck(this, DocInput);\n    this.doc = doc;\n    this.cursorPos = 0;\n    this.string = \"\";\n    this.cursor = doc.iter();\n  }\n  _createClass(DocInput, [{\n    key: \"length\",\n    get: function get() {\n      return this.doc.length;\n    }\n  }, {\n    key: \"syncTo\",\n    value: function syncTo(pos) {\n      this.string = this.cursor.next(pos - this.cursorPos).value;\n      this.cursorPos = pos + this.string.length;\n      return this.cursorPos - this.string.length;\n    }\n  }, {\n    key: \"chunk\",\n    value: function chunk(pos) {\n      this.syncTo(pos);\n      return this.string;\n    }\n  }, {\n    key: \"lineChunks\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"read\",\n    value: function read(from, to) {\n      var stringStart = this.cursorPos - this.string.length;\n      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);\n    }\n  }]);\n  return DocInput;\n}();\nvar currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nvar ParseContext = /*#__PURE__*/function () {\n  function ParseContext(parser,\n  /**\n  The current editor state.\n  */\n  state) {\n    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    var\n    /**\n    @internal\n    */\n    tree = arguments.length > 3 ? arguments[3] : undefined;\n    var\n    /**\n    @internal\n    */\n    treeLen = arguments.length > 4 ? arguments[4] : undefined;\n    var\n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport = arguments.length > 5 ? arguments[5] : undefined;\n    var\n    /**\n    @internal\n    */\n    skipped = arguments.length > 6 ? arguments[6] : undefined;\n    var\n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn = arguments.length > 7 ? arguments[7] : undefined;\n    _classCallCheck(this, ParseContext);\n    this.parser = parser;\n    this.state = state;\n    this.fragments = fragments;\n    this.tree = tree;\n    this.treeLen = treeLen;\n    this.viewport = viewport;\n    this.skipped = skipped;\n    this.scheduleOn = scheduleOn;\n    this.parse = null;\n    /**\n    @internal\n    */\n    this.tempSkipped = [];\n  }\n  /**\n  @internal\n  */\n  _createClass(ParseContext, [{\n    key: \"startParse\",\n    value: function startParse() {\n      return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"work\",\n    value: function work(until, upto) {\n      var _this3 = this;\n      if (upto != null && upto >= this.state.doc.length) upto = undefined;\n      if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n        this.takeTree();\n        return true;\n      }\n      return this.withContext(function () {\n        var _a;\n        if (typeof until == \"number\") {\n          var endTime = Date.now() + until;\n          until = function until() {\n            return Date.now() > endTime;\n          };\n        }\n        if (!_this3.parse) _this3.parse = _this3.startParse();\n        if (upto != null && (_this3.parse.stoppedAt == null || _this3.parse.stoppedAt > upto) && upto < _this3.state.doc.length) _this3.parse.stopAt(upto);\n        for (;;) {\n          var done = _this3.parse.advance();\n          if (done) {\n            _this3.fragments = _this3.withoutTempSkipped(TreeFragment.addTree(done, _this3.fragments, _this3.parse.stoppedAt != null));\n            _this3.treeLen = (_a = _this3.parse.stoppedAt) !== null && _a !== void 0 ? _a : _this3.state.doc.length;\n            _this3.tree = done;\n            _this3.parse = null;\n            if (_this3.treeLen < (upto !== null && upto !== void 0 ? upto : _this3.state.doc.length)) _this3.parse = _this3.startParse();else return true;\n          }\n          if (until()) return false;\n        }\n      });\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"takeTree\",\n    value: function takeTree() {\n      var _this4 = this;\n      var pos, tree;\n      if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n        if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos) this.parse.stopAt(pos);\n        this.withContext(function () {\n          while (!(tree = _this4.parse.advance())) {}\n        });\n        this.treeLen = pos;\n        this.tree = tree;\n        this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n        this.parse = null;\n      }\n    }\n  }, {\n    key: \"withContext\",\n    value: function withContext(f) {\n      var prev = currentContext;\n      currentContext = this;\n      try {\n        return f();\n      } finally {\n        currentContext = prev;\n      }\n    }\n  }, {\n    key: \"withoutTempSkipped\",\n    value: function withoutTempSkipped(fragments) {\n      for (var r; r = this.tempSkipped.pop();) fragments = cutFragments(fragments, r.from, r.to);\n      return fragments;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"changes\",\n    value: function changes(_changes, newState) {\n      var fragments = this.fragments,\n        tree = this.tree,\n        treeLen = this.treeLen,\n        viewport = this.viewport,\n        skipped = this.skipped;\n      this.takeTree();\n      if (!_changes.empty) {\n        var ranges = [];\n        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {\n          return ranges.push({\n            fromA: fromA,\n            toA: toA,\n            fromB: fromB,\n            toB: toB\n          });\n        });\n        fragments = TreeFragment.applyChanges(fragments, ranges);\n        tree = Tree.empty;\n        treeLen = 0;\n        viewport = {\n          from: _changes.mapPos(viewport.from, -1),\n          to: _changes.mapPos(viewport.to, 1)\n        };\n        if (this.skipped.length) {\n          skipped = [];\n          var _iterator3 = _createForOfIteratorHelper(this.skipped),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var r = _step3.value;\n              var from = _changes.mapPos(r.from, 1),\n                to = _changes.mapPos(r.to, -1);\n              if (from < to) skipped.push({\n                from: from,\n                to: to\n              });\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n        }\n      }\n      return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"updateViewport\",\n    value: function updateViewport(viewport) {\n      if (this.viewport.from == viewport.from && this.viewport.to == viewport.to) return false;\n      this.viewport = viewport;\n      var startLen = this.skipped.length;\n      for (var i = 0; i < this.skipped.length; i++) {\n        var _this$skipped$i = this.skipped[i],\n          from = _this$skipped$i.from,\n          to = _this$skipped$i.to;\n        if (from < viewport.to && to > viewport.from) {\n          this.fragments = cutFragments(this.fragments, from, to);\n          this.skipped.splice(i--, 1);\n        }\n      }\n      if (this.skipped.length >= startLen) return false;\n      this.reset();\n      return true;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.parse) {\n        this.takeTree();\n        this.parse = null;\n      }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n  }, {\n    key: \"skipUntilInView\",\n    value: function skipUntilInView(from, to) {\n      this.skipped.push({\n        from: from,\n        to: to\n      });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n  }, {\n    key: \"isDone\",\n    value:\n    /**\n    @internal\n    */\n    function isDone(upto) {\n      upto = Math.min(upto, this.state.doc.length);\n      var frags = this.fragments;\n      return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n  }], [{\n    key: \"create\",\n    value: function create(parser, state, viewport) {\n      return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n  }, {\n    key: \"getSkippingParser\",\n    value: function getSkippingParser(until) {\n      return new ( /*#__PURE__*/function (_Parser) {\n        _inherits(_class, _Parser);\n        function _class() {\n          _classCallCheck(this, _class);\n          return _callSuper(this, _class, arguments);\n        }\n        _createClass(_class, [{\n          key: \"createParse\",\n          value: function createParse(input, fragments, ranges) {\n            var from = ranges[0].from,\n              to = ranges[ranges.length - 1].to;\n            var parser = {\n              parsedPos: from,\n              advance: function advance() {\n                var cx = currentContext;\n                if (cx) {\n                  var _iterator4 = _createForOfIteratorHelper(ranges),\n                    _step4;\n                  try {\n                    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                      var r = _step4.value;\n                      cx.tempSkipped.push(r);\n                    }\n                  } catch (err) {\n                    _iterator4.e(err);\n                  } finally {\n                    _iterator4.f();\n                  }\n                  if (until) cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                }\n                this.parsedPos = to;\n                return new Tree(NodeType.none, [], [], to - from);\n              },\n              stoppedAt: null,\n              stopAt: function stopAt() {}\n            };\n            return parser;\n          }\n        }]);\n        return _class;\n      }(Parser))();\n    }\n  }, {\n    key: \"get\",\n    value: function get() {\n      return currentContext;\n    }\n  }]);\n  return ParseContext;\n}();\nfunction cutFragments(fragments, from, to) {\n  return TreeFragment.applyChanges(fragments, [{\n    fromA: from,\n    toA: to,\n    fromB: from,\n    toB: to\n  }]);\n}\nvar LanguageState = /*#__PURE__*/function () {\n  function LanguageState(\n  // A mutable parse state that is used to preserve work done during\n  // the lifetime of a state when moving to the next state.\n  context) {\n    _classCallCheck(this, LanguageState);\n    this.context = context;\n    this.tree = context.tree;\n  }\n  _createClass(LanguageState, [{\n    key: \"apply\",\n    value: function apply(tr) {\n      if (!tr.docChanged && this.tree == this.context.tree) return this;\n      var newCx = this.context.changes(tr.changes, tr.state);\n      // If the previous parse wasn't done, go forward only up to its\n      // end position or the end of the viewport, to avoid slowing down\n      // state updates with parse work beyond the viewport.\n      var upto = this.context.treeLen == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n      if (!newCx.work(20 /* Work.Apply */, upto)) newCx.takeTree();\n      return new LanguageState(newCx);\n    }\n  }], [{\n    key: \"init\",\n    value: function init(state) {\n      var vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n      var parseState = ParseContext.create(state.facet(language).parser, state, {\n        from: 0,\n        to: vpTo\n      });\n      if (!parseState.work(20 /* Work.Apply */, vpTo)) parseState.takeTree();\n      return new LanguageState(parseState);\n    }\n  }]);\n  return LanguageState;\n}();\nLanguage.state = /*@__PURE__*/StateField.define({\n  create: LanguageState.init,\n  update: function update(value, tr) {\n    var _iterator5 = _createForOfIteratorHelper(tr.effects),\n      _step5;\n    try {\n      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n        var e = _step5.value;\n        if (e.is(Language.setState)) return e.value;\n      }\n    } catch (err) {\n      _iterator5.e(err);\n    } finally {\n      _iterator5.f();\n    }\n    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);\n    return value.apply(tr);\n  }\n});\nvar requestIdle = function requestIdle(callback) {\n  var timeout = setTimeout(function () {\n    return callback();\n  }, 500 /* Work.MaxPause */);\n  return function () {\n    return clearTimeout(timeout);\n  };\n};\nif (typeof requestIdleCallback != \"undefined\") requestIdle = function requestIdle(callback) {\n  var idle = -1,\n    timeout = setTimeout(function () {\n      idle = requestIdleCallback(callback, {\n        timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */\n      });\n    }, 100 /* Work.MinPause */);\n  return function () {\n    return idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n  };\n};\nvar isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending) ? function () {\n  return navigator.scheduling.isInputPending();\n} : null;\nvar parseWorker = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {\n  function ParseWorker(view) {\n    _classCallCheck(this, ParseWorker);\n    this.view = view;\n    this.working = null;\n    this.workScheduled = 0;\n    // End of the current time chunk\n    this.chunkEnd = -1;\n    // Milliseconds of budget left for this chunk\n    this.chunkBudget = -1;\n    this.work = this.work.bind(this);\n    this.scheduleWork();\n  }\n  _createClass(ParseWorker, [{\n    key: \"update\",\n    value: function update(_update) {\n      var cx = this.view.state.field(Language.state).context;\n      if (cx.updateViewport(_update.view.viewport) || this.view.viewport.to > cx.treeLen) this.scheduleWork();\n      if (_update.docChanged || _update.selectionSet) {\n        if (this.view.hasFocus) this.chunkBudget += 50 /* Work.ChangeBonus */;\n        this.scheduleWork();\n      }\n      this.checkAsyncSchedule(cx);\n    }\n  }, {\n    key: \"scheduleWork\",\n    value: function scheduleWork() {\n      if (this.working) return;\n      var state = this.view.state,\n        field = state.field(Language.state);\n      if (field.tree != field.context.tree || !field.context.isDone(state.doc.length)) this.working = requestIdle(this.work);\n    }\n  }, {\n    key: \"work\",\n    value: function work(deadline) {\n      this.working = null;\n      var now = Date.now();\n      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {\n        // Start a new chunk\n        this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n        this.chunkBudget = 3000 /* Work.ChunkBudget */;\n      }\n      if (this.chunkBudget <= 0) return; // No more budget\n      var _this$view = this.view,\n        state = _this$view.state,\n        vpTo = _this$view.viewport.to,\n        field = state.field(Language.state);\n      if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */)) return;\n      var endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n      var viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n      var done = field.context.work(function () {\n        return isInputPending && isInputPending() || Date.now() > endTime;\n      }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n      this.chunkBudget -= Date.now() - now;\n      if (done || this.chunkBudget <= 0) {\n        field.context.takeTree();\n        this.view.dispatch({\n          effects: Language.setState.of(new LanguageState(field.context))\n        });\n      }\n      if (this.chunkBudget > 0 && !(done && !viewportFirst)) this.scheduleWork();\n      this.checkAsyncSchedule(field.context);\n    }\n  }, {\n    key: \"checkAsyncSchedule\",\n    value: function checkAsyncSchedule(cx) {\n      var _this5 = this;\n      if (cx.scheduleOn) {\n        this.workScheduled++;\n        cx.scheduleOn.then(function () {\n          return _this5.scheduleWork();\n        }).catch(function (err) {\n          return logException(_this5.view.state, err);\n        }).then(function () {\n          return _this5.workScheduled--;\n        });\n        cx.scheduleOn = null;\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.working) this.working();\n    }\n  }, {\n    key: \"isWorking\",\n    value: function isWorking() {\n      return !!(this.working || this.workScheduled > 0);\n    }\n  }]);\n  return ParseWorker;\n}(), {\n  eventHandlers: {\n    focus: function focus() {\n      this.scheduleWork();\n    }\n  }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nvar language = /*@__PURE__*/Facet.define({\n  combine: function combine(languages) {\n    return languages.length ? languages[0] : null;\n  },\n  enables: function enables(language) {\n    return [Language.state, parseWorker, EditorView.contentAttributes.compute([language], function (state) {\n      var lang = state.facet(language);\n      return lang && lang.name ? {\n        \"data-language\": lang.name\n      } : {};\n    })];\n  }\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nvar LanguageSupport = /*#__PURE__*/_createClass(\n/**\nCreate a language support object.\n*/\nfunction LanguageSupport(\n/**\nThe language object.\n*/\nlanguage) {\n  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  _classCallCheck(this, LanguageSupport);\n  this.language = language;\n  this.support = support;\n  this.extension = [language, support];\n});\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nvar LanguageDescription = /*#__PURE__*/function () {\n  function LanguageDescription(\n  /**\n  The name of this language.\n  */\n  name,\n  /**\n  Alternative names for the mode (lowercased, includes `this.name`).\n  */\n  alias,\n  /**\n  File extensions associated with this language.\n  */\n  extensions,\n  /**\n  Optional filename pattern that should be associated with this\n  language.\n  */\n  filename, loadFunc) {\n    var support = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;\n    _classCallCheck(this, LanguageDescription);\n    this.name = name;\n    this.alias = alias;\n    this.extensions = extensions;\n    this.filename = filename;\n    this.loadFunc = loadFunc;\n    this.support = support;\n    this.loading = null;\n  }\n  /**\n  Start loading the the language. Will return a promise that\n  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n  object when the language successfully loads.\n  */\n  _createClass(LanguageDescription, [{\n    key: \"load\",\n    value: function load() {\n      var _this6 = this;\n      return this.loading || (this.loading = this.loadFunc().then(function (support) {\n        return _this6.support = support;\n      }, function (err) {\n        _this6.loading = null;\n        throw err;\n      }));\n    }\n    /**\n    Create a language description.\n    */\n  }], [{\n    key: \"of\",\n    value: function of(spec) {\n      var load = spec.load,\n        support = spec.support;\n      if (!load) {\n        if (!support) throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n        load = function load() {\n          return Promise.resolve(support);\n        };\n      }\n      return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {\n        return s.toLowerCase();\n      }), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n  }, {\n    key: \"matchFilename\",\n    value: function matchFilename(descs, filename) {\n      var _iterator6 = _createForOfIteratorHelper(descs),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _d = _step6.value;\n          if (_d.filename && _d.filename.test(filename)) return _d;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      var ext = /\\.([^.]+)$/.exec(filename);\n      if (ext) {\n        var _iterator7 = _createForOfIteratorHelper(descs),\n          _step7;\n        try {\n          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n            var d = _step7.value;\n            if (d.extensions.indexOf(ext[1]) > -1) return d;\n          }\n        } catch (err) {\n          _iterator7.e(err);\n        } finally {\n          _iterator7.f();\n        }\n      }\n      return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n  }, {\n    key: \"matchLanguageName\",\n    value: function matchLanguageName(descs, name) {\n      var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      name = name.toLowerCase();\n      var _iterator8 = _createForOfIteratorHelper(descs),\n        _step8;\n      try {\n        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n          var _d2 = _step8.value;\n          if (_d2.alias.some(function (a) {\n            return a == name;\n          })) return _d2;\n        }\n      } catch (err) {\n        _iterator8.e(err);\n      } finally {\n        _iterator8.f();\n      }\n      if (fuzzy) {\n        var _iterator9 = _createForOfIteratorHelper(descs),\n          _step9;\n        try {\n          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n            var d = _step9.value;\n            var _iterator10 = _createForOfIteratorHelper(d.alias),\n              _step10;\n            try {\n              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n                var a = _step10.value;\n                var found = name.indexOf(a);\n                if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length]))) return d;\n              }\n            } catch (err) {\n              _iterator10.e(err);\n            } finally {\n              _iterator10.f();\n            }\n          }\n        } catch (err) {\n          _iterator9.e(err);\n        } finally {\n          _iterator9.f();\n        }\n      }\n      return null;\n    }\n  }]);\n  return LanguageDescription;\n}();\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nvar indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/\nvar indentUnit = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    if (!values.length) return \"  \";\n    var unit = values[0];\n    if (!unit || /\\S/.test(unit) || Array.from(unit).some(function (e) {\n      return e != unit[0];\n    })) throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n    return unit;\n  }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n  var unit = state.facet(indentUnit);\n  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n  var result = \"\",\n    ts = state.tabSize,\n    ch = state.facet(indentUnit)[0];\n  if (ch == \"\\t\") {\n    while (cols >= ts) {\n      result += \"\\t\";\n      cols -= ts;\n    }\n    ch = \" \";\n  }\n  for (var i = 0; i < cols; i++) result += ch;\n  return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n  if (context instanceof EditorState) context = new IndentContext(context);\n  var _iterator11 = _createForOfIteratorHelper(context.state.facet(indentService)),\n    _step11;\n  try {\n    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n      var service = _step11.value;\n      var result = service(context, pos);\n      if (result !== undefined) return result;\n    }\n  } catch (err) {\n    _iterator11.e(err);\n  } finally {\n    _iterator11.f();\n  }\n  var tree = syntaxTree(context.state);\n  return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n  var updated = Object.create(null);\n  var context = new IndentContext(state, {\n    overrideIndentation: function overrideIndentation(start) {\n      var _a;\n      return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1;\n    }\n  });\n  var changes = [];\n  for (var pos = from; pos <= to;) {\n    var line = state.doc.lineAt(pos);\n    pos = line.to + 1;\n    var indent = getIndentation(context, line.from);\n    if (indent == null) continue;\n    if (!/\\S/.test(line.text)) indent = 0;\n    var cur = /^\\s*/.exec(line.text)[0];\n    var norm = indentString(state, indent);\n    if (cur != norm) {\n      updated[line.from] = indent;\n      changes.push({\n        from: line.from,\n        to: line.from + cur.length,\n        insert: norm\n      });\n    }\n  }\n  return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nvar IndentContext = /*#__PURE__*/function () {\n  /**\n  Create an indent context.\n  */\n  function IndentContext(\n  /**\n  The editor state.\n  */\n  state) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, IndentContext);\n    this.state = state;\n    this.options = options;\n    this.unit = getIndentUnit(state);\n  }\n  /**\n  Get a description of the line at the given position, taking\n  [simulated line\n  breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n  into account. If there is such a break at `pos`, the `bias`\n  argument determines whether the part of the line line before or\n  after the break is used.\n  */\n  _createClass(IndentContext, [{\n    key: \"lineAt\",\n    value: function lineAt(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var line = this.state.doc.lineAt(pos);\n      var _this$options = this.options,\n        simulateBreak = _this$options.simulateBreak,\n        simulateDoubleBreak = _this$options.simulateDoubleBreak;\n      if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n        if (simulateDoubleBreak && simulateBreak == pos) return {\n          text: \"\",\n          from: pos\n        };else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos) return {\n          text: line.text.slice(simulateBreak - line.from),\n          from: simulateBreak\n        };else return {\n          text: line.text.slice(0, simulateBreak - line.from),\n          from: line.from\n        };\n      }\n      return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n  }, {\n    key: \"textAfterPos\",\n    value: function textAfterPos(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak) return \"\";\n      var _this$lineAt = this.lineAt(pos, bias),\n        text = _this$lineAt.text,\n        from = _this$lineAt.from;\n      return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n  }, {\n    key: \"column\",\n    value: function column(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var _this$lineAt2 = this.lineAt(pos, bias),\n        text = _this$lineAt2.text,\n        from = _this$lineAt2.from;\n      var result = this.countColumn(text, pos - from);\n      var override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n      if (override > -1) result += override - this.countColumn(text, text.search(/\\S|$/));\n      return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n  }, {\n    key: \"countColumn\",\n    value: function countColumn(line) {\n      var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : line.length;\n      return _countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n  }, {\n    key: \"lineIndent\",\n    value: function lineIndent(pos) {\n      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      var _this$lineAt3 = this.lineAt(pos, bias),\n        text = _this$lineAt3.text,\n        from = _this$lineAt3.from;\n      var override = this.options.overrideIndentation;\n      if (override) {\n        var overriden = override(from);\n        if (overriden > -1) return overriden;\n      }\n      return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n  }, {\n    key: \"simulatedBreak\",\n    get: function get() {\n      return this.options.simulateBreak || null;\n    }\n  }]);\n  return IndentContext;\n}();\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nvar indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n  var stack = ast.resolveStack(pos);\n  var inner = stack.node.enterUnfinishedNodesBefore(pos);\n  if (inner != stack.node) {\n    var add = [];\n    for (var cur = inner; cur != stack.node; cur = cur.parent) add.push(cur);\n    for (var i = add.length - 1; i >= 0; i--) stack = {\n      node: add[i],\n      next: stack\n    };\n  }\n  return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n  for (var cur = stack; cur; cur = cur.next) {\n    var strategy = indentStrategy(cur.node);\n    if (strategy) return strategy(TreeIndentContext.create(cx, pos, cur));\n  }\n  return 0;\n}\nfunction ignoreClosed(cx) {\n  return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n  var strategy = tree.type.prop(indentNodeProp);\n  if (strategy) return strategy;\n  var first = tree.firstChild,\n    close;\n  if (first && (close = first.type.prop(NodeProp.closedBy))) {\n    var last = tree.lastChild,\n      closed = last && close.indexOf(last.name) > -1;\n    return function (cx) {\n      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    };\n  }\n  return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() {\n  return 0;\n}\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nvar TreeIndentContext = /*#__PURE__*/function (_IndentContext) {\n  _inherits(TreeIndentContext, _IndentContext);\n  function TreeIndentContext(base,\n  /**\n  The position at which indentation is being computed.\n  */\n  pos,\n  /**\n  @internal\n  */\n  context) {\n    var _this7;\n    _classCallCheck(this, TreeIndentContext);\n    _this7 = _callSuper(this, TreeIndentContext, [base.state, base.options]);\n    _this7.base = base;\n    _this7.pos = pos;\n    _this7.context = context;\n    return _this7;\n  }\n  /**\n  The syntax tree node to which the indentation strategy\n  applies.\n  */\n  _createClass(TreeIndentContext, [{\n    key: \"node\",\n    get: function get() {\n      return this.context.node;\n    }\n    /**\n    @internal\n    */\n  }, {\n    key: \"textAfter\",\n    get:\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    function get() {\n      return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n  }, {\n    key: \"baseIndent\",\n    get: function get() {\n      return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n  }, {\n    key: \"baseIndentFor\",\n    value: function baseIndentFor(node) {\n      var line = this.state.doc.lineAt(node.from);\n      // Skip line starts that are covered by a sibling (or cousin, etc)\n      for (;;) {\n        var atBreak = node.resolve(line.from);\n        while (atBreak.parent && atBreak.parent.from == atBreak.from) atBreak = atBreak.parent;\n        if (isParent(atBreak, node)) break;\n        line = this.state.doc.lineAt(atBreak.from);\n      }\n      return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n  }, {\n    key: \"continue\",\n    value: function _continue() {\n      return indentFor(this.context.next, this.base, this.pos);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(base, pos, context) {\n      return new TreeIndentContext(base, pos, context);\n    }\n  }]);\n  return TreeIndentContext;\n}(IndentContext);\nfunction isParent(parent, of) {\n  for (var cur = of; cur; cur = cur.parent) if (parent == cur) return true;\n  return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n  var tree = context.node;\n  var openToken = tree.childAfter(tree.from),\n    last = tree.lastChild;\n  if (!openToken) return null;\n  var sim = context.options.simulateBreak;\n  var openLine = context.state.doc.lineAt(openToken.from);\n  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n  for (var pos = openToken.to;;) {\n    var next = tree.childAfter(pos);\n    if (!next || next == last) return null;\n    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;\n    pos = next.to;\n  }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent(_ref) {\n  var closing = _ref.closing,\n    _ref$align = _ref.align,\n    align = _ref$align === void 0 ? true : _ref$align,\n    _ref$units = _ref.units,\n    units = _ref$units === void 0 ? 1 : _ref$units;\n  return function (context) {\n    return delimitedStrategy(context, align, units, closing);\n  };\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n  var after = context.textAfter,\n    space = after.match(/^\\s*/)[0].length;\n  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n  var aligned = align ? bracketedAligned(context) : null;\n  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);\n  return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nvar flatIndent = function flatIndent(context) {\n  return context.baseIndent;\n};\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent() {\n  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    except = _ref2.except,\n    _ref2$units = _ref2.units,\n    units = _ref2$units === void 0 ? 1 : _ref2$units;\n  return function (context) {\n    var matchExcept = except && except.test(context.textAfter);\n    return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n  };\n}\nvar DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n  return EditorState.transactionFilter.of(function (tr) {\n    if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\")) return tr;\n    var rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n    if (!rules.length) return tr;\n    var doc = tr.newDoc,\n      head = tr.newSelection.main.head,\n      line = doc.lineAt(head);\n    if (head > line.from + DontIndentBeyond) return tr;\n    var lineStart = doc.sliceString(line.from, head);\n    if (!rules.some(function (r) {\n      return r.test(lineStart);\n    })) return tr;\n    var state = tr.state,\n      last = -1,\n      changes = [];\n    var _iterator12 = _createForOfIteratorHelper(state.selection.ranges),\n      _step12;\n    try {\n      for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n        var _head = _step12.value.head;\n        var _line = state.doc.lineAt(_head);\n        if (_line.from == last) continue;\n        last = _line.from;\n        var indent = getIndentation(state, _line.from);\n        if (indent == null) continue;\n        var cur = /^\\s*/.exec(_line.text)[0];\n        var norm = indentString(state, indent);\n        if (cur != norm) changes.push({\n          from: _line.from,\n          to: _line.from + cur.length,\n          insert: norm\n        });\n      }\n    } catch (err) {\n      _iterator12.e(err);\n    } finally {\n      _iterator12.f();\n    }\n    return changes.length ? [tr, {\n      changes: changes,\n      sequential: true\n    }] : tr;\n  });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nvar foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nvar foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n  var first = node.firstChild,\n    last = node.lastChild;\n  return first && first.to < last.from ? {\n    from: first.to,\n    to: last.type.isError ? node.to : last.from\n  } : null;\n}\nfunction syntaxFolding(state, start, end) {\n  var tree = syntaxTree(state);\n  if (tree.length < end) return null;\n  var stack = tree.resolveStack(end, 1);\n  var found = null;\n  for (var iter = stack; iter; iter = iter.next) {\n    var cur = iter.node;\n    if (cur.to <= end || cur.from > end) continue;\n    if (found && cur.from < start) break;\n    var prop = cur.type.prop(foldNodeProp);\n    if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n      var value = prop(cur, state);\n      if (value && value.from <= end && value.from >= start && value.to > end) found = value;\n    }\n  }\n  return found;\n}\nfunction isUnfinished(node) {\n  var ch = node.lastChild;\n  return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n  var _iterator13 = _createForOfIteratorHelper(state.facet(foldService)),\n    _step13;\n  try {\n    for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n      var service = _step13.value;\n      var result = service(state, lineStart, lineEnd);\n      if (result) return result;\n    }\n  } catch (err) {\n    _iterator13.e(err);\n  } finally {\n    _iterator13.f();\n  }\n  return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n  var from = mapping.mapPos(range.from, 1),\n    to = mapping.mapPos(range.to, -1);\n  return from >= to ? undefined : {\n    from: from,\n    to: to\n  };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nvar foldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nvar unfoldEffect = /*@__PURE__*/StateEffect.define({\n  map: mapRange\n});\nfunction selectedLines(view) {\n  var lines = [];\n  var _iterator14 = _createForOfIteratorHelper(view.state.selection.ranges),\n    _step14;\n  try {\n    var _loop = function _loop() {\n      var head = _step14.value.head;\n      if (lines.some(function (l) {\n        return l.from <= head && l.to >= head;\n      })) return 1; // continue\n      lines.push(view.lineBlockAt(head));\n    };\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      if (_loop()) continue;\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nvar foldState = /*@__PURE__*/StateField.define({\n  create: function create() {\n    return Decoration.none;\n  },\n  update: function update(folded, tr) {\n    folded = folded.map(tr.changes);\n    var _iterator15 = _createForOfIteratorHelper(tr.effects),\n      _step15;\n    try {\n      var _loop2 = function _loop2() {\n        var e = _step15.value;\n        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n          var _tr$state$facet = tr.state.facet(foldConfig),\n            preparePlaceholder = _tr$state$facet.preparePlaceholder;\n          var widget = !preparePlaceholder ? foldWidget : Decoration.replace({\n            widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value))\n          });\n          folded = folded.update({\n            add: [widget.range(e.value.from, e.value.to)]\n          });\n        } else if (e.is(unfoldEffect)) {\n          folded = folded.update({\n            filter: function filter(from, to) {\n              return e.value.from != from || e.value.to != to;\n            },\n            filterFrom: e.value.from,\n            filterTo: e.value.to\n          });\n        }\n      };\n      for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n        _loop2();\n      }\n      // Clear folded ranges that cover the selection head\n    } catch (err) {\n      _iterator15.e(err);\n    } finally {\n      _iterator15.f();\n    }\n    if (tr.selection) {\n      var onSelection = false,\n        head = tr.selection.main.head;\n      folded.between(head, head, function (a, b) {\n        if (a < head && b > head) onSelection = true;\n      });\n      if (onSelection) folded = folded.update({\n        filterFrom: head,\n        filterTo: head,\n        filter: function filter(a, b) {\n          return b <= head || a >= head;\n        }\n      });\n    }\n    return folded;\n  },\n  provide: function provide(f) {\n    return EditorView.decorations.from(f);\n  },\n  toJSON: function toJSON(folded, state) {\n    var ranges = [];\n    folded.between(0, state.doc.length, function (from, to) {\n      ranges.push(from, to);\n    });\n    return ranges;\n  },\n  fromJSON: function fromJSON(value) {\n    if (!Array.isArray(value) || value.length % 2) throw new RangeError(\"Invalid JSON for fold state\");\n    var ranges = [];\n    for (var i = 0; i < value.length;) {\n      var from = value[i++],\n        to = value[i++];\n      if (typeof from != \"number\" || typeof to != \"number\") throw new RangeError(\"Invalid JSON for fold state\");\n      ranges.push(foldWidget.range(from, to));\n    }\n    return Decoration.set(ranges, true);\n  }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n  return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n  var _a;\n  var found = null;\n  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {\n    if (!found || found.from > from) found = {\n      from: from,\n      to: to\n    };\n  });\n  return found;\n}\nfunction foldExists(folded, from, to) {\n  var found = false;\n  folded.between(from, from, function (a, b) {\n    if (a == from && b == to) found = true;\n  });\n  return found;\n}\nfunction maybeEnable(state, other) {\n  return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nvar foldCode = function foldCode(view) {\n  var _iterator16 = _createForOfIteratorHelper(selectedLines(view)),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var line = _step16.value;\n      var range = foldable(view.state, line.from, line.to);\n      if (range) {\n        view.dispatch({\n          effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])\n        });\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n  return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nvar unfoldCode = function unfoldCode(view) {\n  if (!view.state.field(foldState, false)) return false;\n  var effects = [];\n  var _iterator17 = _createForOfIteratorHelper(selectedLines(view)),\n    _step17;\n  try {\n    for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n      var line = _step17.value;\n      var folded = findFold(view.state, line.from, line.to);\n      if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n  } catch (err) {\n    _iterator17.e(err);\n  } finally {\n    _iterator17.f();\n  }\n  if (effects.length) view.dispatch({\n    effects: effects\n  });\n  return effects.length > 0;\n};\nfunction announceFold(view, range) {\n  var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  var lineFrom = view.state.doc.lineAt(range.from).number,\n    lineTo = view.state.doc.lineAt(range.to).number;\n  return EditorView.announce.of(\"\".concat(view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\"), \" \").concat(lineFrom, \" \").concat(view.state.phrase(\"to\"), \" \").concat(lineTo, \".\"));\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nvar foldAll = function foldAll(view) {\n  var state = view.state,\n    effects = [];\n  for (var pos = 0; pos < state.doc.length;) {\n    var line = view.lineBlockAt(pos),\n      range = foldable(state, line.from, line.to);\n    if (range) effects.push(foldEffect.of(range));\n    pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n  }\n  if (effects.length) view.dispatch({\n    effects: maybeEnable(view.state, effects)\n  });\n  return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nvar unfoldAll = function unfoldAll(view) {\n  var field = view.state.field(foldState, false);\n  if (!field || !field.size) return false;\n  var effects = [];\n  field.between(0, view.state.doc.length, function (from, to) {\n    effects.push(unfoldEffect.of({\n      from: from,\n      to: to\n    }));\n  });\n  view.dispatch({\n    effects: effects\n  });\n  return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n  // Look backwards through line blocks until we find a foldable region that\n  // intersects with the line\n  for (var line = lineBlock;;) {\n    var foldableRegion = foldable(view.state, line.from, line.to);\n    if (foldableRegion && foldableRegion.to > lineBlock.from) return foldableRegion;\n    if (!line.from) return null;\n    line = view.lineBlockAt(line.from - 1);\n  }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nvar toggleFold = function toggleFold(view) {\n  var effects = [];\n  var _iterator18 = _createForOfIteratorHelper(selectedLines(view)),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var line = _step18.value;\n      var folded = findFold(view.state, line.from, line.to);\n      if (folded) {\n        effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n      } else {\n        var foldRange = foldableContainer(view, line);\n        if (foldRange) effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  if (effects.length > 0) view.dispatch({\n    effects: maybeEnable(view.state, effects)\n  });\n  return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nvar foldKeymap = [{\n  key: \"Ctrl-Shift-[\",\n  mac: \"Cmd-Alt-[\",\n  run: foldCode\n}, {\n  key: \"Ctrl-Shift-]\",\n  mac: \"Cmd-Alt-]\",\n  run: unfoldCode\n}, {\n  key: \"Ctrl-Alt-[\",\n  run: foldAll\n}, {\n  key: \"Ctrl-Alt-]\",\n  run: unfoldAll\n}];\nvar defaultConfig = {\n  placeholderDOM: null,\n  preparePlaceholder: null,\n  placeholderText: \"…\"\n};\nvar foldConfig = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    return combineConfig(values, defaultConfig);\n  }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n  var result = [foldState, baseTheme$1];\n  if (config) result.push(foldConfig.of(config));\n  return result;\n}\nfunction widgetToDOM(view, prepared) {\n  var state = view.state,\n    conf = state.facet(foldConfig);\n  var onclick = function onclick(event) {\n    var line = view.lineBlockAt(view.posAtDOM(event.target));\n    var folded = findFold(view.state, line.from, line.to);\n    if (folded) view.dispatch({\n      effects: unfoldEffect.of(folded)\n    });\n    event.preventDefault();\n  };\n  if (conf.placeholderDOM) return conf.placeholderDOM(view, onclick, prepared);\n  var element = document.createElement(\"span\");\n  element.textContent = conf.placeholderText;\n  element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n  element.title = state.phrase(\"unfold\");\n  element.className = \"cm-foldPlaceholder\";\n  element.onclick = onclick;\n  return element;\n}\nvar foldWidget = /*@__PURE__*/Decoration.replace({\n  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {\n    _inherits(_class2, _WidgetType);\n    function _class2() {\n      _classCallCheck(this, _class2);\n      return _callSuper(this, _class2, arguments);\n    }\n    _createClass(_class2, [{\n      key: \"toDOM\",\n      value: function toDOM(view) {\n        return widgetToDOM(view, null);\n      }\n    }]);\n    return _class2;\n  }(WidgetType))()\n});\nvar PreparedFoldWidget = /*#__PURE__*/function (_WidgetType2) {\n  _inherits(PreparedFoldWidget, _WidgetType2);\n  function PreparedFoldWidget(value) {\n    var _this8;\n    _classCallCheck(this, PreparedFoldWidget);\n    _this8 = _callSuper(this, PreparedFoldWidget);\n    _this8.value = value;\n    return _this8;\n  }\n  _createClass(PreparedFoldWidget, [{\n    key: \"eq\",\n    value: function eq(other) {\n      return this.value == other.value;\n    }\n  }, {\n    key: \"toDOM\",\n    value: function toDOM(view) {\n      return widgetToDOM(view, this.value);\n    }\n  }]);\n  return PreparedFoldWidget;\n}(WidgetType);\nvar foldGutterDefaults = {\n  openText: \"⌄\",\n  closedText: \"›\",\n  markerDOM: null,\n  domEventHandlers: {},\n  foldingChanged: function foldingChanged() {\n    return false;\n  }\n};\nvar FoldMarker = /*#__PURE__*/function (_GutterMarker) {\n  _inherits(FoldMarker, _GutterMarker);\n  function FoldMarker(config, open) {\n    var _this9;\n    _classCallCheck(this, FoldMarker);\n    _this9 = _callSuper(this, FoldMarker);\n    _this9.config = config;\n    _this9.open = open;\n    return _this9;\n  }\n  _createClass(FoldMarker, [{\n    key: \"eq\",\n    value: function eq(other) {\n      return this.config == other.config && this.open == other.open;\n    }\n  }, {\n    key: \"toDOM\",\n    value: function toDOM(view) {\n      if (this.config.markerDOM) return this.config.markerDOM(this.open);\n      var span = document.createElement(\"span\");\n      span.textContent = this.open ? this.config.openText : this.config.closedText;\n      span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n      return span;\n    }\n  }]);\n  return FoldMarker;\n}(GutterMarker);\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n  var canFold = new FoldMarker(fullConfig, true),\n    canUnfold = new FoldMarker(fullConfig, false);\n  var _markers = ViewPlugin.fromClass( /*#__PURE__*/function () {\n    function _class3(view) {\n      _classCallCheck(this, _class3);\n      this.from = view.viewport.from;\n      this.markers = this.buildMarkers(view);\n    }\n    _createClass(_class3, [{\n      key: \"update\",\n      value: function update(_update2) {\n        if (_update2.docChanged || _update2.viewportChanged || _update2.startState.facet(language) != _update2.state.facet(language) || _update2.startState.field(foldState, false) != _update2.state.field(foldState, false) || syntaxTree(_update2.startState) != syntaxTree(_update2.state) || fullConfig.foldingChanged(_update2)) this.markers = this.buildMarkers(_update2.view);\n      }\n    }, {\n      key: \"buildMarkers\",\n      value: function buildMarkers(view) {\n        var builder = new RangeSetBuilder();\n        var _iterator19 = _createForOfIteratorHelper(view.viewportLineBlocks),\n          _step19;\n        try {\n          for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n            var line = _step19.value;\n            var mark = findFold(view.state, line.from, line.to) ? canUnfold : foldable(view.state, line.from, line.to) ? canFold : null;\n            if (mark) builder.add(line.from, line.from, mark);\n          }\n        } catch (err) {\n          _iterator19.e(err);\n        } finally {\n          _iterator19.f();\n        }\n        return builder.finish();\n      }\n    }]);\n    return _class3;\n  }());\n  var domEventHandlers = fullConfig.domEventHandlers;\n  return [_markers, gutter({\n    class: \"cm-foldGutter\",\n    markers: function markers(view) {\n      var _a;\n      return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty;\n    },\n    initialSpacer: function initialSpacer() {\n      return new FoldMarker(fullConfig, false);\n    },\n    domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), {\n      click: function click(view, line, event) {\n        if (domEventHandlers.click && domEventHandlers.click(view, line, event)) return true;\n        var folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n          view.dispatch({\n            effects: unfoldEffect.of(folded)\n          });\n          return true;\n        }\n        var range = foldable(view.state, line.from, line.to);\n        if (range) {\n          view.dispatch({\n            effects: foldEffect.of(range)\n          });\n          return true;\n        }\n        return false;\n      }\n    })\n  }), codeFolding()];\n}\nvar baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n  \".cm-foldPlaceholder\": {\n    backgroundColor: \"#eee\",\n    border: \"1px solid #ddd\",\n    color: \"#888\",\n    borderRadius: \".2em\",\n    margin: \"0 1px\",\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  },\n  \".cm-foldGutter span\": {\n    padding: \"0 1px\",\n    cursor: \"pointer\"\n  }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nvar HighlightStyle = /*#__PURE__*/function () {\n  function HighlightStyle(\n  /**\n  The tag styles used to create this highlight style.\n  */\n  specs, options) {\n    _classCallCheck(this, HighlightStyle);\n    this.specs = specs;\n    var modSpec;\n    function def(spec) {\n      var cls = StyleModule.newName();\n      (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n      return cls;\n    }\n    var all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n    var scopeOpt = options.scope;\n    this.scope = scopeOpt instanceof Language ? function (type) {\n      return type.prop(languageDataProp) == scopeOpt.data;\n    } : scopeOpt ? function (type) {\n      return type == scopeOpt;\n    } : undefined;\n    this.style = tagHighlighter(specs.map(function (style) {\n      return {\n        tag: style.tag,\n        class: style.class || def(Object.assign({}, style, {\n          tag: null\n        }))\n      };\n    }), {\n      all: all\n    }).style;\n    this.module = modSpec ? new StyleModule(modSpec) : null;\n    this.themeType = options.themeType;\n  }\n  /**\n  Create a highlighter style that associates the given styles to\n  the given tags. The specs must be objects that hold a style tag\n  or array of tags in their `tag` property, and either a single\n  `class` property providing a static CSS class (for highlighter\n  that rely on external styling), or a\n  [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n  set of CSS properties (which define the styling for those tags).\n  \n  The CSS rules created for a highlighter will be emitted in the\n  order of the spec's properties. That means that for elements that\n  have multiple tags associated with them, styles defined further\n  down in the list will have a higher CSS precedence than styles\n  defined earlier.\n  */\n  _createClass(HighlightStyle, null, [{\n    key: \"define\",\n    value: function define(specs, options) {\n      return new HighlightStyle(specs, options || {});\n    }\n  }]);\n  return HighlightStyle;\n}();\nvar highlighterFacet = /*@__PURE__*/Facet.define();\nvar fallbackHighlighter = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    return values.length ? [values[0]] : null;\n  }\n});\nfunction getHighlighters(state) {\n  var main = state.facet(highlighterFacet);\n  return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n  var ext = [treeHighlighter],\n    themeType;\n  if (highlighter instanceof HighlightStyle) {\n    if (highlighter.module) ext.push(EditorView.styleModule.of(highlighter.module));\n    themeType = highlighter.themeType;\n  }\n  if (options === null || options === void 0 ? void 0 : options.fallback) ext.push(fallbackHighlighter.of(highlighter));else if (themeType) ext.push(highlighterFacet.computeN([EditorView.darkTheme], function (state) {\n    return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n  }));else ext.push(highlighterFacet.of(highlighter));\n  return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n  var highlighters = getHighlighters(state);\n  var result = null;\n  if (highlighters) {\n    var _iterator20 = _createForOfIteratorHelper(highlighters),\n      _step20;\n    try {\n      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n        var highlighter = _step20.value;\n        if (!highlighter.scope || scope && highlighter.scope(scope)) {\n          var cls = highlighter.style(tags);\n          if (cls) result = result ? result + \" \" + cls : cls;\n        }\n      }\n    } catch (err) {\n      _iterator20.e(err);\n    } finally {\n      _iterator20.f();\n    }\n  }\n  return result;\n}\nvar TreeHighlighter = /*#__PURE__*/function () {\n  function TreeHighlighter(view) {\n    _classCallCheck(this, TreeHighlighter);\n    this.markCache = Object.create(null);\n    this.tree = syntaxTree(view.state);\n    this.decorations = this.buildDeco(view, getHighlighters(view.state));\n  }\n  _createClass(TreeHighlighter, [{\n    key: \"update\",\n    value: function update(_update3) {\n      var tree = syntaxTree(_update3.state),\n        highlighters = getHighlighters(_update3.state);\n      var styleChange = highlighters != getHighlighters(_update3.startState);\n      if (tree.length < _update3.view.viewport.to && !styleChange && tree.type == this.tree.type) {\n        this.decorations = this.decorations.map(_update3.changes);\n      } else if (tree != this.tree || _update3.viewportChanged || styleChange) {\n        this.tree = tree;\n        this.decorations = this.buildDeco(_update3.view, highlighters);\n      }\n    }\n  }, {\n    key: \"buildDeco\",\n    value: function buildDeco(view, highlighters) {\n      var _this10 = this;\n      if (!highlighters || !this.tree.length) return Decoration.none;\n      var builder = new RangeSetBuilder();\n      var _iterator21 = _createForOfIteratorHelper(view.visibleRanges),\n        _step21;\n      try {\n        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n          var _step21$value = _step21.value,\n            from = _step21$value.from,\n            to = _step21$value.to;\n          highlightTree(this.tree, highlighters, function (from, to, style) {\n            builder.add(from, to, _this10.markCache[style] || (_this10.markCache[style] = Decoration.mark({\n              class: style\n            })));\n          }, from, to);\n        }\n      } catch (err) {\n        _iterator21.e(err);\n      } finally {\n        _iterator21.f();\n      }\n      return builder.finish();\n    }\n  }]);\n  return TreeHighlighter;\n}();\nvar treeHighlighter = /*@__PURE__*/Prec.high( /*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n  decorations: function decorations(v) {\n    return v.decorations;\n  }\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nvar defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{\n  tag: tags.meta,\n  color: \"#404740\"\n}, {\n  tag: tags.link,\n  textDecoration: \"underline\"\n}, {\n  tag: tags.heading,\n  textDecoration: \"underline\",\n  fontWeight: \"bold\"\n}, {\n  tag: tags.emphasis,\n  fontStyle: \"italic\"\n}, {\n  tag: tags.strong,\n  fontWeight: \"bold\"\n}, {\n  tag: tags.strikethrough,\n  textDecoration: \"line-through\"\n}, {\n  tag: tags.keyword,\n  color: \"#708\"\n}, {\n  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n  color: \"#219\"\n}, {\n  tag: [tags.literal, tags.inserted],\n  color: \"#164\"\n}, {\n  tag: [tags.string, tags.deleted],\n  color: \"#a11\"\n}, {\n  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n  color: \"#e40\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.variableName),\n  color: \"#00f\"\n}, {\n  tag: /*@__PURE__*/tags.local(tags.variableName),\n  color: \"#30a\"\n}, {\n  tag: [tags.typeName, tags.namespace],\n  color: \"#085\"\n}, {\n  tag: tags.className,\n  color: \"#167\"\n}, {\n  tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n  color: \"#256\"\n}, {\n  tag: /*@__PURE__*/tags.definition(tags.propertyName),\n  color: \"#00c\"\n}, {\n  tag: tags.comment,\n  color: \"#940\"\n}, {\n  tag: tags.invalid,\n  color: \"#f00\"\n}]);\nvar baseTheme = /*@__PURE__*/EditorView.baseTheme({\n  \"&.cm-focused .cm-matchingBracket\": {\n    backgroundColor: \"#328c8252\"\n  },\n  \"&.cm-focused .cm-nonmatchingBracket\": {\n    backgroundColor: \"#bb555544\"\n  }\n});\nvar DefaultScanDist = 10000,\n  DefaultBrackets = \"()[]{}\";\nvar bracketMatchingConfig = /*@__PURE__*/Facet.define({\n  combine: function combine(configs) {\n    return combineConfig(configs, {\n      afterCursor: true,\n      brackets: DefaultBrackets,\n      maxScanDistance: DefaultScanDist,\n      renderMatch: defaultRenderMatch\n    });\n  }\n});\nvar matchingMark = /*@__PURE__*/Decoration.mark({\n    class: \"cm-matchingBracket\"\n  }),\n  nonmatchingMark = /*@__PURE__*/Decoration.mark({\n    class: \"cm-nonmatchingBracket\"\n  });\nfunction defaultRenderMatch(match) {\n  var decorations = [];\n  var mark = match.matched ? matchingMark : nonmatchingMark;\n  decorations.push(mark.range(match.start.from, match.start.to));\n  if (match.end) decorations.push(mark.range(match.end.from, match.end.to));\n  return decorations;\n}\nvar bracketMatchingState = /*@__PURE__*/StateField.define({\n  create: function create() {\n    return Decoration.none;\n  },\n  update: function update(deco, tr) {\n    if (!tr.docChanged && !tr.selection) return deco;\n    var decorations = [];\n    var config = tr.state.facet(bracketMatchingConfig);\n    var _iterator22 = _createForOfIteratorHelper(tr.state.selection.ranges),\n      _step22;\n    try {\n      for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n        var range = _step22.value;\n        if (!range.empty) continue;\n        var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));\n        if (match) decorations = decorations.concat(config.renderMatch(match, tr.state));\n      }\n    } catch (err) {\n      _iterator22.e(err);\n    } finally {\n      _iterator22.f();\n    }\n    return Decoration.set(decorations, true);\n  },\n  provide: function provide(f) {\n    return EditorView.decorations.from(f);\n  }\n});\nvar bracketMatchingUnique = [bracketMatchingState, baseTheme];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nvar bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n  var byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n  if (byProp) return byProp;\n  if (node.name.length == 1) {\n    var index = brackets.indexOf(node.name);\n    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];\n  }\n  return null;\n}\nfunction findHandle(node) {\n  var hasHandle = node.type.prop(bracketMatchingHandle);\n  return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir) {\n  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var maxScanDistance = config.maxScanDistance || DefaultScanDist,\n    brackets = config.brackets || DefaultBrackets;\n  var tree = syntaxTree(state),\n    node = tree.resolveInner(pos, dir);\n  for (var cur = node; cur; cur = cur.parent) {\n    var matches = matchingNodes(cur.type, dir, brackets);\n    if (matches && cur.from < cur.to) {\n      var handle = findHandle(cur);\n      if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to)) return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n    }\n  }\n  return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n  var parent = token.parent,\n    firstToken = {\n      from: handle.from,\n      to: handle.to\n    };\n  var depth = 0,\n    cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {\n    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n      if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n        var endHandle = findHandle(cursor);\n        return {\n          start: firstToken,\n          end: endHandle ? {\n            from: endHandle.from,\n            to: endHandle.to\n          } : undefined,\n          matched: true\n        };\n      } else if (matchingNodes(cursor.type, dir, brackets)) {\n        depth++;\n      } else if (matchingNodes(cursor.type, -dir, brackets)) {\n        if (depth == 0) {\n          var _endHandle = findHandle(cursor);\n          return {\n            start: firstToken,\n            end: _endHandle && _endHandle.from < _endHandle.to ? {\n              from: _endHandle.from,\n              to: _endHandle.to\n            } : undefined,\n            matched: false\n          };\n        }\n        depth--;\n      }\n    }\n  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n  return {\n    start: firstToken,\n    matched: false\n  };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n  var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n  var bracket = brackets.indexOf(startCh);\n  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;\n  var startToken = {\n    from: dir < 0 ? pos - 1 : pos,\n    to: dir > 0 ? pos + 1 : pos\n  };\n  var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),\n    depth = 0;\n  for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {\n    var text = iter.value;\n    if (dir < 0) distance += text.length;\n    var basePos = pos + distance * dir;\n    for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {\n      var found = brackets.indexOf(text[_pos2]);\n      if (found < 0 || tree.resolveInner(basePos + _pos2, 1).type != tokenType) continue;\n      if (found % 2 == 0 == dir > 0) {\n        depth++;\n      } else if (depth == 1) {\n        // Closing\n        return {\n          start: startToken,\n          end: {\n            from: basePos + _pos2,\n            to: basePos + _pos2 + 1\n          },\n          matched: found >> 1 == bracket >> 1\n        };\n      } else {\n        depth--;\n      }\n    }\n    if (dir > 0) distance += text.length;\n  }\n  return iter.done ? {\n    start: startToken,\n    matched: false\n  } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize) {\n  var startIndex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  var startValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  if (end == null) {\n    end = string.search(/[^\\s\\u00a0]/);\n    if (end == -1) end = string.length;\n  }\n  var n = startValue;\n  for (var i = startIndex; i < end; i++) {\n    if (string.charCodeAt(i) == 9) n += tabSize - n % tabSize;else n++;\n  }\n  return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nvar StringStream = /*#__PURE__*/function () {\n  /**\n  Create a stream.\n  */\n  function StringStream(\n  /**\n  The line.\n  */\n  string, tabSize,\n  /**\n  The current indent unit size.\n  */\n  indentUnit, overrideIndent) {\n    _classCallCheck(this, StringStream);\n    this.string = string;\n    this.tabSize = tabSize;\n    this.indentUnit = indentUnit;\n    this.overrideIndent = overrideIndent;\n    /**\n    The current position on the line.\n    */\n    this.pos = 0;\n    /**\n    The start position of the current token.\n    */\n    this.start = 0;\n    this.lastColumnPos = 0;\n    this.lastColumnValue = 0;\n  }\n  /**\n  True if we are at the end of the line.\n  */\n  _createClass(StringStream, [{\n    key: \"eol\",\n    value: function eol() {\n      return this.pos >= this.string.length;\n    }\n    /**\n    True if we are at the start of the line.\n    */\n  }, {\n    key: \"sol\",\n    value: function sol() {\n      return this.pos == 0;\n    }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n  }, {\n    key: \"peek\",\n    value: function peek() {\n      return this.string.charAt(this.pos) || undefined;\n    }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n  }, {\n    key: \"next\",\n    value: function next() {\n      if (this.pos < this.string.length) return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n  }, {\n    key: \"eat\",\n    value: function eat(match) {\n      var ch = this.string.charAt(this.pos);\n      var ok;\n      if (typeof match == \"string\") ok = ch == match;else ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n      if (ok) {\n        ++this.pos;\n        return ch;\n      }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n  }, {\n    key: \"eatWhile\",\n    value: function eatWhile(match) {\n      var start = this.pos;\n      while (this.eat(match)) {}\n      return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n  }, {\n    key: \"eatSpace\",\n    value: function eatSpace() {\n      var start = this.pos;\n      while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos))) ++this.pos;\n      return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n  }, {\n    key: \"skipToEnd\",\n    value: function skipToEnd() {\n      this.pos = this.string.length;\n    }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n  }, {\n    key: \"skipTo\",\n    value: function skipTo(ch) {\n      var found = this.string.indexOf(ch, this.pos);\n      if (found > -1) {\n        this.pos = found;\n        return true;\n      }\n    }\n    /**\n    Move back `n` characters.\n    */\n  }, {\n    key: \"backUp\",\n    value: function backUp(n) {\n      this.pos -= n;\n    }\n    /**\n    Get the column position at `this.pos`.\n    */\n  }, {\n    key: \"column\",\n    value: function column() {\n      if (this.lastColumnPos < this.start) {\n        this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n        this.lastColumnPos = this.start;\n      }\n      return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n  }, {\n    key: \"indentation\",\n    value: function indentation() {\n      var _a;\n      return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n  }, {\n    key: \"match\",\n    value: function match(pattern, consume, caseInsensitive) {\n      if (typeof pattern == \"string\") {\n        var cased = function cased(str) {\n          return caseInsensitive ? str.toLowerCase() : str;\n        };\n        var substr = this.string.substr(this.pos, pattern.length);\n        if (cased(substr) == cased(pattern)) {\n          if (consume !== false) this.pos += pattern.length;\n          return true;\n        } else return null;\n      } else {\n        var match = this.string.slice(this.pos).match(pattern);\n        if (match && match.index > 0) return null;\n        if (match && consume !== false) this.pos += match[0].length;\n        return match;\n      }\n    }\n    /**\n    Get the current token.\n    */\n  }, {\n    key: \"current\",\n    value: function current() {\n      return this.string.slice(this.start, this.pos);\n    }\n  }]);\n  return StringStream;\n}();\nfunction fullParser(spec) {\n  return {\n    name: spec.name || \"\",\n    token: spec.token,\n    blankLine: spec.blankLine || function () {},\n    startState: spec.startState || function () {\n      return true;\n    },\n    copyState: spec.copyState || defaultCopyState,\n    indent: spec.indent || function () {\n      return null;\n    },\n    languageData: spec.languageData || {},\n    tokenTable: spec.tokenTable || noTokens\n  };\n}\nfunction defaultCopyState(state) {\n  if (_typeof(state) != \"object\") return state;\n  var newState = {};\n  for (var prop in state) {\n    var val = state[prop];\n    newState[prop] = val instanceof Array ? val.slice() : val;\n  }\n  return newState;\n}\nvar IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nvar StreamLanguage = /*#__PURE__*/function (_Language2) {\n  _inherits(StreamLanguage, _Language2);\n  function StreamLanguage(parser) {\n    var _this11;\n    _classCallCheck(this, StreamLanguage);\n    var data = defineLanguageFacet(parser.languageData);\n    var p = fullParser(parser),\n      self;\n    var impl = new ( /*#__PURE__*/function (_Parser2) {\n      _inherits(_class4, _Parser2);\n      function _class4() {\n        _classCallCheck(this, _class4);\n        return _callSuper(this, _class4, arguments);\n      }\n      _createClass(_class4, [{\n        key: \"createParse\",\n        value: function createParse(input, fragments, ranges) {\n          return new Parse(self, input, fragments, ranges);\n        }\n      }]);\n      return _class4;\n    }(Parser))();\n    _this11 = _callSuper(this, StreamLanguage, [data, impl, [indentService.of(function (cx, pos) {\n      return _this11.getIndent(cx, pos);\n    })], parser.name]);\n    _this11.topNode = docID(data);\n    self = _assertThisInitialized(_this11);\n    _this11.streamParser = p;\n    _this11.stateAfter = new NodeProp({\n      perNode: true\n    });\n    _this11.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    return _this11;\n  }\n  /**\n  Define a stream language.\n  */\n  _createClass(StreamLanguage, [{\n    key: \"getIndent\",\n    value: function getIndent(cx, pos) {\n      var tree = syntaxTree(cx.state),\n        at = tree.resolve(pos);\n      while (at && at.type != this.topNode) at = at.parent;\n      if (!at) return null;\n      var from = undefined;\n      var overrideIndentation = cx.options.overrideIndentation;\n      if (overrideIndentation) {\n        from = IndentedFrom.get(cx.state);\n        if (from != null && from < pos - 1e4) from = undefined;\n      }\n      var start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos),\n        statePos,\n        state;\n      if (start) {\n        state = start.state;\n        statePos = start.pos + 1;\n      } else {\n        state = this.streamParser.startState(cx.unit);\n        statePos = 0;\n      }\n      if (pos - statePos > 10000 /* C.MaxIndentScanDist */) return null;\n      while (statePos < pos) {\n        var _line2 = cx.state.doc.lineAt(statePos),\n          end = Math.min(pos, _line2.to);\n        if (_line2.length) {\n          var indentation = overrideIndentation ? overrideIndentation(_line2.from) : -1;\n          var stream = new StringStream(_line2.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n          while (stream.pos < end - _line2.from) readToken(this.streamParser.token, stream, state);\n        } else {\n          this.streamParser.blankLine(state, cx.unit);\n        }\n        if (end == pos) break;\n        statePos = _line2.to + 1;\n      }\n      var line = cx.lineAt(pos);\n      if (overrideIndentation && from == null) IndentedFrom.set(cx.state, line.from);\n      return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n  }, {\n    key: \"allowsNesting\",\n    get: function get() {\n      return false;\n    }\n  }], [{\n    key: \"define\",\n    value: function define(spec) {\n      return new StreamLanguage(spec);\n    }\n  }]);\n  return StreamLanguage;\n}(Language);\nfunction findState(lang, tree, off, startPos, before) {\n  var state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n  if (state) return {\n    state: lang.streamParser.copyState(state),\n    pos: off + tree.length\n  };\n  for (var i = tree.children.length - 1; i >= 0; i--) {\n    var child = tree.children[i],\n      pos = off + tree.positions[i];\n    var found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n    if (found) return found;\n  }\n  return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n  if (inside && from <= 0 && to >= tree.length) return tree;\n  if (!inside && tree.type == lang.topNode) inside = true;\n  for (var i = tree.children.length - 1; i >= 0; i--) {\n    var pos = tree.positions[i],\n      child = tree.children[i],\n      inner = void 0;\n    if (pos < to && child instanceof Tree) {\n      if (!(inner = cutTree(lang, child, from - pos, to - pos, inside))) break;\n      return !inside ? inner : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n    }\n  }\n  return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n  var _iterator23 = _createForOfIteratorHelper(fragments),\n    _step23;\n  try {\n    for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n      var f = _step23.value;\n      var from = f.from + (f.openStart ? 25 : 0),\n        to = f.to - (f.openEnd ? 25 : 0);\n      var found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to),\n        tree = void 0;\n      if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false))) return {\n        state: found.state,\n        tree: tree\n      };\n    }\n  } catch (err) {\n    _iterator23.e(err);\n  } finally {\n    _iterator23.f();\n  }\n  return {\n    state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4),\n    tree: Tree.empty\n  };\n}\nvar Parse = /*#__PURE__*/function () {\n  function Parse(lang, input, fragments, ranges) {\n    _classCallCheck(this, Parse);\n    this.lang = lang;\n    this.input = input;\n    this.fragments = fragments;\n    this.ranges = ranges;\n    this.stoppedAt = null;\n    this.chunks = [];\n    this.chunkPos = [];\n    this.chunk = [];\n    this.chunkReused = undefined;\n    this.rangeIndex = 0;\n    this.to = ranges[ranges.length - 1].to;\n    var context = ParseContext.get(),\n      from = ranges[0].from;\n    var _findStartInFragments = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state),\n      state = _findStartInFragments.state,\n      tree = _findStartInFragments.tree;\n    this.state = state;\n    this.parsedPos = this.chunkStart = from + tree.length;\n    for (var i = 0; i < tree.children.length; i++) {\n      this.chunks.push(tree.children[i]);\n      this.chunkPos.push(tree.positions[i]);\n    }\n    if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {\n      this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n      context.skipUntilInView(this.parsedPos, context.viewport.from);\n      this.parsedPos = context.viewport.from;\n    }\n    this.moveRangeIndex();\n  }\n  _createClass(Parse, [{\n    key: \"advance\",\n    value: function advance() {\n      var context = ParseContext.get();\n      var parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n      var end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n      if (context) end = Math.min(end, context.viewport.to);\n      while (this.parsedPos < end) this.parseLine(context);\n      if (this.chunkStart < this.parsedPos) this.finishChunk();\n      if (this.parsedPos >= parseEnd) return this.finish();\n      if (context && this.parsedPos >= context.viewport.to) {\n        context.skipUntilInView(this.parsedPos, parseEnd);\n        return this.finish();\n      }\n      return null;\n    }\n  }, {\n    key: \"stopAt\",\n    value: function stopAt(pos) {\n      this.stoppedAt = pos;\n    }\n  }, {\n    key: \"lineAfter\",\n    value: function lineAfter(pos) {\n      var chunk = this.input.chunk(pos);\n      if (!this.input.lineChunks) {\n        var eol = chunk.indexOf(\"\\n\");\n        if (eol > -1) chunk = chunk.slice(0, eol);\n      } else if (chunk == \"\\n\") {\n        chunk = \"\";\n      }\n      return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n  }, {\n    key: \"nextLine\",\n    value: function nextLine() {\n      var from = this.parsedPos,\n        line = this.lineAfter(from),\n        end = from + line.length;\n      for (var index = this.rangeIndex;;) {\n        var rangeEnd = this.ranges[index].to;\n        if (rangeEnd >= end) break;\n        line = line.slice(0, rangeEnd - (end - line.length));\n        index++;\n        if (index == this.ranges.length) break;\n        var rangeStart = this.ranges[index].from;\n        var after = this.lineAfter(rangeStart);\n        line += after;\n        end = rangeStart + after.length;\n      }\n      return {\n        line: line,\n        end: end\n      };\n    }\n  }, {\n    key: \"skipGapsTo\",\n    value: function skipGapsTo(pos, offset, side) {\n      for (;;) {\n        var end = this.ranges[this.rangeIndex].to,\n          offPos = pos + offset;\n        if (side > 0 ? end > offPos : end >= offPos) break;\n        var start = this.ranges[++this.rangeIndex].from;\n        offset += start - end;\n      }\n      return offset;\n    }\n  }, {\n    key: \"moveRangeIndex\",\n    value: function moveRangeIndex() {\n      while (this.ranges[this.rangeIndex].to < this.parsedPos) this.rangeIndex++;\n    }\n  }, {\n    key: \"emitToken\",\n    value: function emitToken(id, from, to, size, offset) {\n      if (this.ranges.length > 1) {\n        offset = this.skipGapsTo(from, offset, 1);\n        from += offset;\n        var len0 = this.chunk.length;\n        offset = this.skipGapsTo(to, offset, -1);\n        to += offset;\n        size += this.chunk.length - len0;\n      }\n      this.chunk.push(id, from, to, size);\n      return offset;\n    }\n  }, {\n    key: \"parseLine\",\n    value: function parseLine(context) {\n      var _this$nextLine = this.nextLine(),\n        line = _this$nextLine.line,\n        end = _this$nextLine.end,\n        offset = 0,\n        streamParser = this.lang.streamParser;\n      var stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n      if (stream.eol()) {\n        streamParser.blankLine(this.state, stream.indentUnit);\n      } else {\n        while (!stream.eol()) {\n          var token = readToken(streamParser.token, stream, this.state);\n          if (token) offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n          if (stream.start > 10000 /* C.MaxLineLength */) break;\n        }\n      }\n      this.parsedPos = end;\n      this.moveRangeIndex();\n      if (this.parsedPos < this.to) this.parsedPos++;\n    }\n  }, {\n    key: \"finishChunk\",\n    value: function finishChunk() {\n      var tree = Tree.build({\n        buffer: this.chunk,\n        start: this.chunkStart,\n        length: this.parsedPos - this.chunkStart,\n        nodeSet: nodeSet,\n        topID: 0,\n        maxBufferLength: 2048 /* C.ChunkSize */,\n        reused: this.chunkReused\n      });\n      tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n      this.chunks.push(tree);\n      this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n      this.chunk = [];\n      this.chunkReused = undefined;\n      this.chunkStart = this.parsedPos;\n    }\n  }, {\n    key: \"finish\",\n    value: function finish() {\n      return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n  }]);\n  return Parse;\n}();\nfunction readToken(token, stream, state) {\n  stream.start = stream.pos;\n  for (var i = 0; i < 10; i++) {\n    var result = token(stream, state);\n    if (stream.pos > stream.start) return result;\n  }\n  throw new Error(\"Stream parser failed to advance stream.\");\n}\nvar noTokens = /*@__PURE__*/Object.create(null);\nvar typeArray = [NodeType.none];\nvar nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nvar warned = [];\n// Cache of node types by name and tags\nvar byTag = /*@__PURE__*/Object.create(null);\nvar defaultTable = /*@__PURE__*/Object.create(null);\nfor (var _i = 0, _arr = [[\"variable\", \"variableName\"], [\"variable-2\", \"variableName.special\"], [\"string-2\", \"string.special\"], [\"def\", \"variableName.definition\"], [\"tag\", \"tagName\"], [\"attribute\", \"attributeName\"], [\"type\", \"typeName\"], [\"builtin\", \"variableName.standard\"], [\"qualifier\", \"modifier\"], [\"error\", \"invalid\"], [\"header\", \"heading\"], [\"property\", \"propertyName\"]]; _i < _arr.length; _i++) {\n  var _arr$_i = _slicedToArray(_arr[_i], 2),\n    legacyName = _arr$_i[0],\n    name = _arr$_i[1];\n  defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\n}\nvar TokenTable = /*#__PURE__*/function () {\n  function TokenTable(extra) {\n    _classCallCheck(this, TokenTable);\n    this.extra = extra;\n    this.table = Object.assign(Object.create(null), defaultTable);\n  }\n  _createClass(TokenTable, [{\n    key: \"resolve\",\n    value: function resolve(tag) {\n      return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n  }]);\n  return TokenTable;\n}();\nvar defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n  if (warned.indexOf(part) > -1) return;\n  warned.push(part);\n  console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n  var tags$1 = [];\n  var _iterator24 = _createForOfIteratorHelper(tagStr.split(\" \")),\n    _step24;\n  try {\n    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n      var _name = _step24.value;\n      var found = [];\n      var _iterator25 = _createForOfIteratorHelper(_name.split(\".\")),\n        _step25;\n      try {\n        for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n          var part = _step25.value;\n          var value = extra[part] || tags[part];\n          if (!value) {\n            warnForPart(part, \"Unknown highlighting tag \".concat(part));\n          } else if (typeof value == \"function\") {\n            if (!found.length) warnForPart(part, \"Modifier \".concat(part, \" used at start of tag\"));else found = found.map(value);\n          } else {\n            if (found.length) warnForPart(part, \"Tag \".concat(part, \" used as modifier\"));else found = Array.isArray(value) ? value : [value];\n          }\n        }\n      } catch (err) {\n        _iterator25.e(err);\n      } finally {\n        _iterator25.f();\n      }\n      var _iterator26 = _createForOfIteratorHelper(found),\n        _step26;\n      try {\n        for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {\n          var tag = _step26.value;\n          tags$1.push(tag);\n        }\n      } catch (err) {\n        _iterator26.e(err);\n      } finally {\n        _iterator26.f();\n      }\n    }\n  } catch (err) {\n    _iterator24.e(err);\n  } finally {\n    _iterator24.f();\n  }\n  if (!tags$1.length) return 0;\n  var name = tagStr.replace(/ /g, \"_\"),\n    key = name + \" \" + tags$1.map(function (t) {\n      return t.id;\n    });\n  var known = byTag[key];\n  if (known) return known.id;\n  var type = byTag[key] = NodeType.define({\n    id: typeArray.length,\n    name: name,\n    props: [styleTags(_defineProperty({}, name, tags$1))]\n  });\n  typeArray.push(type);\n  return type.id;\n}\nfunction docID(data) {\n  var type = NodeType.define({\n    id: typeArray.length,\n    name: \"Document\",\n    props: [languageDataProp.add(function () {\n      return data;\n    })],\n    top: true\n  });\n  typeArray.push(type);\n  return type;\n}\nfunction buildForLine(line) {\n  return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n  for (var i = text.iter(); !i.next().done;) if (buildForLine(i.value)) return true;\n  return false;\n}\nfunction changeAddsRTL(change) {\n  var added = false;\n  change.iterChanges(function (fA, tA, fB, tB, ins) {\n    if (!added && textHasRTL(ins)) added = true;\n  });\n  return added;\n}\nvar alwaysIsolate = /*@__PURE__*/Facet.define({\n  combine: function combine(values) {\n    return values.some(function (x) {\n      return x;\n    });\n  }\n});\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var extensions = [isolateMarks];\n  if (options.alwaysIsolate) extensions.push(alwaysIsolate.of(true));\n  return extensions;\n}\nvar isolateMarks = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {\n  function _class5(view) {\n    _classCallCheck(this, _class5);\n    this.always = view.state.facet(alwaysIsolate) || view.textDirection != Direction.LTR || view.state.facet(EditorView.perLineTextDirection);\n    this.hasRTL = !this.always && textHasRTL(view.state.doc);\n    this.tree = syntaxTree(view.state);\n    this.decorations = buildDeco(view, this.tree, this.always);\n  }\n  _createClass(_class5, [{\n    key: \"update\",\n    value: function update(_update4) {\n      var always = _update4.state.facet(alwaysIsolate) || _update4.view.textDirection != Direction.LTR || _update4.state.facet(EditorView.perLineTextDirection);\n      if (!always && !this.hasRTL && changeAddsRTL(_update4.changes)) this.hasRTL = true;\n      if (!always && !this.hasRTL) return;\n      var tree = syntaxTree(_update4.state);\n      if (always != this.always || tree != this.tree || _update4.docChanged || _update4.viewportChanged) {\n        this.tree = tree;\n        this.always = always;\n        this.decorations = buildDeco(_update4.view, tree, always);\n      }\n    }\n  }]);\n  return _class5;\n}(), {\n  provide: function provide(plugin) {\n    function access(view) {\n      var _a, _b;\n      return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n    }\n    return [EditorView.outerDecorations.of(access), Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n  }\n});\nfunction buildDeco(view, tree, always) {\n  var deco = new RangeSetBuilder();\n  var ranges = view.visibleRanges;\n  if (!always) ranges = clipRTLLines(ranges, view.state.doc);\n  var _iterator27 = _createForOfIteratorHelper(ranges),\n    _step27;\n  try {\n    for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {\n      var _step27$value = _step27.value,\n        from = _step27$value.from,\n        to = _step27$value.to;\n      tree.iterate({\n        enter: function enter(node) {\n          var iso = node.type.prop(NodeProp.isolate);\n          if (iso) deco.add(node.from, node.to, marks[iso]);\n        },\n        from: from,\n        to: to\n      });\n    }\n  } catch (err) {\n    _iterator27.e(err);\n  } finally {\n    _iterator27.f();\n  }\n  return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n  var cur = doc.iter(),\n    pos = 0,\n    result = [],\n    last = null;\n  var _iterator28 = _createForOfIteratorHelper(ranges),\n    _step28;\n  try {\n    for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {\n      var _step28$value = _step28.value,\n        from = _step28$value.from,\n        to = _step28$value.to;\n      if (from != pos) {\n        if (pos < from) cur.next(from - pos);\n        pos = from;\n      }\n      for (;;) {\n        var start = pos,\n          end = pos + cur.value.length;\n        if (!cur.lineBreak && buildForLine(cur.value)) {\n          if (last && last.to > start - 10) last.to = Math.min(to, end);else result.push(last = {\n            from: start,\n            to: Math.min(to, end)\n          });\n        }\n        if (pos >= to) break;\n        pos = end;\n        cur.next();\n      }\n    }\n  } catch (err) {\n    _iterator28.e(err);\n  } finally {\n    _iterator28.f();\n  }\n  return result;\n}\nvar marks = {\n  rtl: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"rtl\"\n    },\n    bidiIsolate: Direction.RTL\n  }),\n  ltr: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"ltr\"\n    },\n    bidiIsolate: Direction.LTR\n  }),\n  auto: /*@__PURE__*/Decoration.mark({\n    class: \"cm-iso\",\n    inclusive: true,\n    attributes: {\n      dir: \"auto\"\n    },\n    bidiIsolate: null\n  })\n};\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };","map":{"version":3,"names":["NodeProp","IterMode","Tree","TreeFragment","Parser","NodeType","NodeSet","StateEffect","StateField","Facet","EditorState","countColumn","combineConfig","RangeSet","RangeSetBuilder","Prec","ViewPlugin","logException","EditorView","Decoration","WidgetType","gutter","GutterMarker","Direction","tags","tagHighlighter","highlightTree","styleTags","StyleModule","_a","languageDataProp","defineLanguageFacet","baseData","define","combine","values","concat","undefined","sublanguageProp","Language","data","parser","extraExtensions","arguments","length","name","_classCallCheck","prototype","hasOwnProperty","Object","defineProperty","get","syntaxTree","extension","language","of","languageData","state","pos","side","top","topNodeAt","type","prop","base","facet","sub","innerNode","resolve","from","_iterator","_createForOfIteratorHelper","_step","s","n","done","sublang","value","test","err","e","f","_createClass","key","isActiveAt","findRegions","_this","lang","to","doc","allowsNesting","result","explore","tree","push","mount","mounted","overlay","_iterator2","_step2","r","size","i","children","ch","positions","setState","topLang","topNode","node","enter","ExcludeBuffers","isTop","LRLanguage","_Language","_inherits","_this2","_callSuper","configure","options","hasWrappers","spec","props","add","field","empty","ensureSyntaxTree","upto","timeout","parse","context","oldVieport","viewport","updateViewport","isDone","work","syntaxTreeAvailable","forceParsing","view","success","dispatch","syntaxParserRunning","plugin","parseWorker","isWorking","DocInput","cursorPos","string","cursor","iter","syncTo","next","chunk","read","stringStart","sliceString","slice","currentContext","ParseContext","fragments","treeLen","skipped","scheduleOn","tempSkipped","startParse","until","_this3","takeTree","withContext","endTime","Date","now","stoppedAt","stopAt","advance","withoutTempSkipped","addTree","_this4","parsedPos","prev","pop","cutFragments","changes","newState","ranges","iterChangedRanges","fromA","toA","fromB","toB","applyChanges","mapPos","_iterator3","_step3","startLen","_this$skipped$i","splice","reset","skipUntilInView","Math","min","frags","create","getSkippingParser","_Parser","_class","createParse","input","cx","_iterator4","_step4","Promise","all","none","LanguageState","apply","tr","docChanged","newCx","startState","max","init","vpTo","parseState","update","_iterator5","effects","_step5","is","requestIdle","callback","setTimeout","clearTimeout","requestIdleCallback","idle","cancelIdleCallback","isInputPending","navigator","scheduling","fromClass","ParseWorker","working","workScheduled","chunkEnd","chunkBudget","bind","scheduleWork","selectionSet","hasFocus","checkAsyncSchedule","deadline","_this$view","timeRemaining","viewportFirst","_this5","then","catch","destroy","eventHandlers","focus","languages","enables","contentAttributes","compute","LanguageSupport","support","LanguageDescription","alias","extensions","filename","loadFunc","loading","load","_this6","RangeError","map","toLowerCase","matchFilename","descs","_iterator6","_step6","d","ext","exec","_iterator7","_step7","indexOf","matchLanguageName","fuzzy","_iterator8","_step8","some","a","_iterator9","_step9","_iterator10","_step10","found","indentService","indentUnit","unit","Array","Error","JSON","stringify","getIndentUnit","charCodeAt","tabSize","indentString","cols","ts","getIndentation","IndentContext","_iterator11","_step11","service","syntaxIndentation","indentRange","updated","overrideIndentation","start","line","lineAt","indent","text","cur","norm","insert","bias","_this$options","simulateBreak","simulateDoubleBreak","textAfterPos","_this$lineAt","column","_this$lineAt2","override","search","lineIndent","_this$lineAt3","overriden","indentNodeProp","ast","stack","resolveStack","inner","enterUnfinishedNodesBefore","parent","indentFor","strategy","indentStrategy","TreeIndentContext","ignoreClosed","first","firstChild","close","closedBy","last","lastChild","closed","delimitedStrategy","topIndent","_IndentContext","_this7","baseIndentFor","atBreak","isParent","_continue","bracketedAligned","openToken","childAfter","sim","openLine","lineEnd","isSkipped","delimitedIndent","_ref","closing","_ref$align","align","_ref$units","units","closedAt","after","textAfter","space","match","aligned","baseIndent","flatIndent","continuedIndent","_ref2","except","_ref2$units","matchExcept","DontIndentBeyond","indentOnInput","transactionFilter","isUserEvent","rules","languageDataAt","selection","main","head","newDoc","newSelection","lineStart","_iterator12","_step12","sequential","foldService","foldNodeProp","foldInside","isError","syntaxFolding","end","isUnfinished","foldable","_iterator13","_step13","mapRange","range","mapping","foldEffect","unfoldEffect","selectedLines","lines","_iterator14","_step14","_loop","l","lineBlockAt","foldState","folded","_iterator15","_step15","_loop2","foldExists","_tr$state$facet","foldConfig","preparePlaceholder","widget","foldWidget","replace","PreparedFoldWidget","filter","filterFrom","filterTo","onSelection","between","b","provide","decorations","toJSON","fromJSON","isArray","set","foldedRanges","findFold","maybeEnable","other","appendConfig","codeFolding","foldCode","_iterator16","_step16","announceFold","unfoldCode","_iterator17","_step17","fold","lineFrom","number","lineTo","announce","phrase","foldAll","unfoldAll","foldableContainer","lineBlock","foldableRegion","toggleFold","_iterator18","_step18","foldRange","foldKeymap","mac","run","defaultConfig","placeholderDOM","placeholderText","config","baseTheme$1","widgetToDOM","prepared","conf","onclick","event","posAtDOM","target","preventDefault","element","document","createElement","textContent","setAttribute","title","className","_WidgetType","_class2","toDOM","_WidgetType2","_this8","eq","foldGutterDefaults","openText","closedText","markerDOM","domEventHandlers","foldingChanged","FoldMarker","_GutterMarker","open","_this9","span","foldGutter","fullConfig","assign","canFold","canUnfold","markers","_class3","buildMarkers","viewportChanged","builder","_iterator19","viewportLineBlocks","_step19","mark","finish","class","initialSpacer","click","baseTheme","backgroundColor","border","color","borderRadius","margin","padding","HighlightStyle","specs","modSpec","def","cls","newName","scopeOpt","scope","style","tag","module","themeType","highlighterFacet","fallbackHighlighter","getHighlighters","syntaxHighlighting","highlighter","treeHighlighter","styleModule","fallback","computeN","darkTheme","highlightingFor","highlighters","_iterator20","_step20","TreeHighlighter","markCache","buildDeco","styleChange","_this10","_iterator21","visibleRanges","_step21","_step21$value","high","v","defaultHighlightStyle","meta","link","textDecoration","heading","fontWeight","emphasis","fontStyle","strong","strikethrough","keyword","atom","bool","url","contentSeparator","labelName","literal","inserted","deleted","regexp","escape","special","definition","variableName","local","typeName","namespace","macroName","propertyName","comment","invalid","DefaultScanDist","DefaultBrackets","bracketMatchingConfig","configs","afterCursor","brackets","maxScanDistance","renderMatch","defaultRenderMatch","matchingMark","nonmatchingMark","matched","bracketMatchingState","deco","_iterator22","_step22","matchBrackets","bracketMatchingUnique","bracketMatching","bracketMatchingHandle","matchingNodes","dir","byProp","openedBy","index","findHandle","hasHandle","resolveInner","matches","handle","matchMarkedBrackets","matchPlainBrackets","_state","_pos","token","matching","firstToken","depth","childBefore","endHandle","prevSibling","nextSibling","tokenType","startCh","sliceDoc","bracket","startToken","iterRange","distance","basePos","countCol","startIndex","startValue","StringStream","overrideIndent","lastColumnPos","lastColumnValue","eol","sol","peek","charAt","eat","ok","RegExp","eatWhile","eatSpace","skipToEnd","skipTo","backUp","indentation","pattern","consume","caseInsensitive","cased","str","substr","current","fullParser","blankLine","copyState","defaultCopyState","tokenTable","noTokens","_typeof","val","IndentedFrom","WeakMap","StreamLanguage","_Language2","_this11","p","self","impl","_Parser2","_class4","Parse","getIndent","docID","_assertThisInitialized","streamParser","stateAfter","perNode","TokenTable","defaultTokenTable","at","findState","statePos","stream","readToken","off","startPos","before","child","cutTree","inside","findStartInFragments","editorState","_iterator23","_step23","openStart","openEnd","offset","chunks","chunkPos","chunkReused","rangeIndex","_findStartInFragments","chunkStart","moveRangeIndex","parseEnd","parseLine","finishChunk","lineAfter","lineChunks","nextLine","rangeEnd","rangeStart","skipGapsTo","offPos","emitToken","id","len0","_this$nextLine","build","buffer","nodeSet","topID","maxBufferLength","reused","balance","typeArray","warned","byTag","defaultTable","_i","_arr","_arr$_i","_slicedToArray","legacyName","createTokenType","extra","table","warnForPart","part","msg","console","warn","tagStr","tags$1","_iterator24","split","_step24","_iterator25","_step25","_iterator26","_step26","t","known","_defineProperty","buildForLine","textHasRTL","changeAddsRTL","change","added","iterChanges","fA","tA","fB","tB","ins","alwaysIsolate","x","bidiIsolates","isolateMarks","_class5","always","textDirection","LTR","perLineTextDirection","hasRTL","access","_b","outerDecorations","lowest","bidiIsolatedRanges","clipRTLLines","_iterator27","_step27","_step27$value","iterate","iso","isolate","marks","_iterator28","_step28","_step28$value","lineBreak","rtl","inclusive","attributes","bidiIsolate","RTL","ltr","auto"],"sources":["/workspaces/frontend/node_modules/@codemirror/language/dist/index.js"],"sourcesContent":["import { NodeProp, IterMode, Tree, TreeFragment, Parser, NodeType, NodeSet } from '@lezer/common';\nimport { StateEffect, StateField, Facet, EditorState, countColumn, combineConfig, RangeSet, RangeSetBuilder, Prec } from '@codemirror/state';\nimport { ViewPlugin, logException, EditorView, Decoration, WidgetType, gutter, GutterMarker, Direction } from '@codemirror/view';\nimport { tags, tagHighlighter, highlightTree, styleTags } from '@lezer/highlight';\nimport { StyleModule } from 'style-mod';\n\nvar _a;\n/**\nNode prop stored in a parser's top syntax node to provide the\nfacet that stores language-specific data for that language.\n*/\nconst languageDataProp = /*@__PURE__*/new NodeProp();\n/**\nHelper function to define a facet (to be added to the top syntax\nnode(s) for a language via\n[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be\nused to associate language data with the language. You\nprobably only need this when subclassing\n[`Language`](https://codemirror.net/6/docs/ref/#language.Language).\n*/\nfunction defineLanguageFacet(baseData) {\n    return Facet.define({\n        combine: baseData ? values => values.concat(baseData) : undefined\n    });\n}\n/**\nSyntax node prop used to register sublanguages. Should be added to\nthe top level node type for the language.\n*/\nconst sublanguageProp = /*@__PURE__*/new NodeProp();\n/**\nA language object manages parsing and per-language\n[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is\nmanaged as a [Lezer](https://lezer.codemirror.net) tree. The class\ncan be used directly, via the [`LRLanguage`](https://codemirror.net/6/docs/ref/#language.LRLanguage)\nsubclass for [Lezer](https://lezer.codemirror.net/) LR parsers, or\nvia the [`StreamLanguage`](https://codemirror.net/6/docs/ref/#language.StreamLanguage) subclass\nfor stream parsers.\n*/\nclass Language {\n    /**\n    Construct a language object. If you need to invoke this\n    directly, first define a data facet with\n    [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet), and then\n    configure your parser to [attach](https://codemirror.net/6/docs/ref/#language.languageDataProp) it\n    to the language's outer syntax node.\n    */\n    constructor(\n    /**\n    The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) facet\n    used for this language.\n    */\n    data, parser, extraExtensions = [], \n    /**\n    A language name.\n    */\n    name = \"\") {\n        this.data = data;\n        this.name = name;\n        // Kludge to define EditorState.tree as a debugging helper,\n        // without the EditorState package actually knowing about\n        // languages and lezer trees.\n        if (!EditorState.prototype.hasOwnProperty(\"tree\"))\n            Object.defineProperty(EditorState.prototype, \"tree\", { get() { return syntaxTree(this); } });\n        this.parser = parser;\n        this.extension = [\n            language.of(this),\n            EditorState.languageData.of((state, pos, side) => {\n                let top = topNodeAt(state, pos, side), data = top.type.prop(languageDataProp);\n                if (!data)\n                    return [];\n                let base = state.facet(data), sub = top.type.prop(sublanguageProp);\n                if (sub) {\n                    let innerNode = top.resolve(pos - top.from, side);\n                    for (let sublang of sub)\n                        if (sublang.test(innerNode, state)) {\n                            let data = state.facet(sublang.facet);\n                            return sublang.type == \"replace\" ? data : data.concat(base);\n                        }\n                }\n                return base;\n            })\n        ].concat(extraExtensions);\n    }\n    /**\n    Query whether this language is active at the given position.\n    */\n    isActiveAt(state, pos, side = -1) {\n        return topNodeAt(state, pos, side).type.prop(languageDataProp) == this.data;\n    }\n    /**\n    Find the document regions that were parsed using this language.\n    The returned regions will _include_ any nested languages rooted\n    in this language, when those exist.\n    */\n    findRegions(state) {\n        let lang = state.facet(language);\n        if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data)\n            return [{ from: 0, to: state.doc.length }];\n        if (!lang || !lang.allowsNesting)\n            return [];\n        let result = [];\n        let explore = (tree, from) => {\n            if (tree.prop(languageDataProp) == this.data) {\n                result.push({ from, to: from + tree.length });\n                return;\n            }\n            let mount = tree.prop(NodeProp.mounted);\n            if (mount) {\n                if (mount.tree.prop(languageDataProp) == this.data) {\n                    if (mount.overlay)\n                        for (let r of mount.overlay)\n                            result.push({ from: r.from + from, to: r.to + from });\n                    else\n                        result.push({ from: from, to: from + tree.length });\n                    return;\n                }\n                else if (mount.overlay) {\n                    let size = result.length;\n                    explore(mount.tree, mount.overlay[0].from + from);\n                    if (result.length > size)\n                        return;\n                }\n            }\n            for (let i = 0; i < tree.children.length; i++) {\n                let ch = tree.children[i];\n                if (ch instanceof Tree)\n                    explore(ch, tree.positions[i] + from);\n            }\n        };\n        explore(syntaxTree(state), 0);\n        return result;\n    }\n    /**\n    Indicates whether this language allows nested languages. The\n    default implementation returns true.\n    */\n    get allowsNesting() { return true; }\n}\n/**\n@internal\n*/\nLanguage.setState = /*@__PURE__*/StateEffect.define();\nfunction topNodeAt(state, pos, side) {\n    let topLang = state.facet(language), tree = syntaxTree(state).topNode;\n    if (!topLang || topLang.allowsNesting) {\n        for (let node = tree; node; node = node.enter(pos, side, IterMode.ExcludeBuffers))\n            if (node.type.isTop)\n                tree = node;\n    }\n    return tree;\n}\n/**\nA subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with Lezer\n[LR parsers](https://lezer.codemirror.net/docs/ref#lr.LRParser)\nparsers.\n*/\nclass LRLanguage extends Language {\n    constructor(data, parser, name) {\n        super(data, parser, [], name);\n        this.parser = parser;\n    }\n    /**\n    Define a language from a parser.\n    */\n    static define(spec) {\n        let data = defineLanguageFacet(spec.languageData);\n        return new LRLanguage(data, spec.parser.configure({\n            props: [languageDataProp.add(type => type.isTop ? data : undefined)]\n        }), spec.name);\n    }\n    /**\n    Create a new instance of this language with a reconfigured\n    version of its parser and optionally a new name.\n    */\n    configure(options, name) {\n        return new LRLanguage(this.data, this.parser.configure(options), name || this.name);\n    }\n    get allowsNesting() { return this.parser.hasWrappers(); }\n}\n/**\nGet the syntax tree for a state, which is the current (possibly\nincomplete) parse tree of the active\n[language](https://codemirror.net/6/docs/ref/#language.Language), or the empty tree if there is no\nlanguage available.\n*/\nfunction syntaxTree(state) {\n    let field = state.field(Language.state, false);\n    return field ? field.tree : Tree.empty;\n}\n/**\nTry to get a parse tree that spans at least up to `upto`. The\nmethod will do at most `timeout` milliseconds of work to parse\nup to that point if the tree isn't already available.\n*/\nfunction ensureSyntaxTree(state, upto, timeout = 50) {\n    var _a;\n    let parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;\n    if (!parse)\n        return null;\n    let oldVieport = parse.viewport;\n    parse.updateViewport({ from: 0, to: upto });\n    let result = parse.isDone(upto) || parse.work(timeout, upto) ? parse.tree : null;\n    parse.updateViewport(oldVieport);\n    return result;\n}\n/**\nQueries whether there is a full syntax tree available up to the\ngiven document position. If there isn't, the background parse\nprocess _might_ still be working and update the tree further, but\nthere is no guarantee of that—the parser will [stop\nworking](https://codemirror.net/6/docs/ref/#language.syntaxParserRunning) when it has spent a\ncertain amount of time or has moved beyond the visible viewport.\nAlways returns false if no language has been enabled.\n*/\nfunction syntaxTreeAvailable(state, upto = state.doc.length) {\n    var _a;\n    return ((_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context.isDone(upto)) || false;\n}\n/**\nMove parsing forward, and update the editor state afterwards to\nreflect the new tree. Will work for at most `timeout`\nmilliseconds. Returns true if the parser managed get to the given\nposition in that time.\n*/\nfunction forceParsing(view, upto = view.viewport.to, timeout = 100) {\n    let success = ensureSyntaxTree(view.state, upto, timeout);\n    if (success != syntaxTree(view.state))\n        view.dispatch({});\n    return !!success;\n}\n/**\nTells you whether the language parser is planning to do more\nparsing work (in a `requestIdleCallback` pseudo-thread) or has\nstopped running, either because it parsed the entire document,\nbecause it spent too much time and was cut off, or because there\nis no language parser enabled.\n*/\nfunction syntaxParserRunning(view) {\n    var _a;\n    return ((_a = view.plugin(parseWorker)) === null || _a === void 0 ? void 0 : _a.isWorking()) || false;\n}\n/**\nLezer-style\n[`Input`](https://lezer.codemirror.net/docs/ref#common.Input)\nobject for a [`Text`](https://codemirror.net/6/docs/ref/#state.Text) object.\n*/\nclass DocInput {\n    /**\n    Create an input object for the given document.\n    */\n    constructor(doc) {\n        this.doc = doc;\n        this.cursorPos = 0;\n        this.string = \"\";\n        this.cursor = doc.iter();\n    }\n    get length() { return this.doc.length; }\n    syncTo(pos) {\n        this.string = this.cursor.next(pos - this.cursorPos).value;\n        this.cursorPos = pos + this.string.length;\n        return this.cursorPos - this.string.length;\n    }\n    chunk(pos) {\n        this.syncTo(pos);\n        return this.string;\n    }\n    get lineChunks() { return true; }\n    read(from, to) {\n        let stringStart = this.cursorPos - this.string.length;\n        if (from < stringStart || to >= this.cursorPos)\n            return this.doc.sliceString(from, to);\n        else\n            return this.string.slice(from - stringStart, to - stringStart);\n    }\n}\nlet currentContext = null;\n/**\nA parse context provided to parsers working on the editor content.\n*/\nclass ParseContext {\n    constructor(parser, \n    /**\n    The current editor state.\n    */\n    state, \n    /**\n    Tree fragments that can be reused by incremental re-parses.\n    */\n    fragments = [], \n    /**\n    @internal\n    */\n    tree, \n    /**\n    @internal\n    */\n    treeLen, \n    /**\n    The current editor viewport (or some overapproximation\n    thereof). Intended to be used for opportunistically avoiding\n    work (in which case\n    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.ParseContext.skipUntilInView)\n    should be called to make sure the parser is restarted when the\n    skipped region becomes visible).\n    */\n    viewport, \n    /**\n    @internal\n    */\n    skipped, \n    /**\n    This is where skipping parsers can register a promise that,\n    when resolved, will schedule a new parse. It is cleared when\n    the parse worker picks up the promise. @internal\n    */\n    scheduleOn) {\n        this.parser = parser;\n        this.state = state;\n        this.fragments = fragments;\n        this.tree = tree;\n        this.treeLen = treeLen;\n        this.viewport = viewport;\n        this.skipped = skipped;\n        this.scheduleOn = scheduleOn;\n        this.parse = null;\n        /**\n        @internal\n        */\n        this.tempSkipped = [];\n    }\n    /**\n    @internal\n    */\n    static create(parser, state, viewport) {\n        return new ParseContext(parser, state, [], Tree.empty, 0, viewport, [], null);\n    }\n    startParse() {\n        return this.parser.startParse(new DocInput(this.state.doc), this.fragments);\n    }\n    /**\n    @internal\n    */\n    work(until, upto) {\n        if (upto != null && upto >= this.state.doc.length)\n            upto = undefined;\n        if (this.tree != Tree.empty && this.isDone(upto !== null && upto !== void 0 ? upto : this.state.doc.length)) {\n            this.takeTree();\n            return true;\n        }\n        return this.withContext(() => {\n            var _a;\n            if (typeof until == \"number\") {\n                let endTime = Date.now() + until;\n                until = () => Date.now() > endTime;\n            }\n            if (!this.parse)\n                this.parse = this.startParse();\n            if (upto != null && (this.parse.stoppedAt == null || this.parse.stoppedAt > upto) &&\n                upto < this.state.doc.length)\n                this.parse.stopAt(upto);\n            for (;;) {\n                let done = this.parse.advance();\n                if (done) {\n                    this.fragments = this.withoutTempSkipped(TreeFragment.addTree(done, this.fragments, this.parse.stoppedAt != null));\n                    this.treeLen = (_a = this.parse.stoppedAt) !== null && _a !== void 0 ? _a : this.state.doc.length;\n                    this.tree = done;\n                    this.parse = null;\n                    if (this.treeLen < (upto !== null && upto !== void 0 ? upto : this.state.doc.length))\n                        this.parse = this.startParse();\n                    else\n                        return true;\n                }\n                if (until())\n                    return false;\n            }\n        });\n    }\n    /**\n    @internal\n    */\n    takeTree() {\n        let pos, tree;\n        if (this.parse && (pos = this.parse.parsedPos) >= this.treeLen) {\n            if (this.parse.stoppedAt == null || this.parse.stoppedAt > pos)\n                this.parse.stopAt(pos);\n            this.withContext(() => { while (!(tree = this.parse.advance())) { } });\n            this.treeLen = pos;\n            this.tree = tree;\n            this.fragments = this.withoutTempSkipped(TreeFragment.addTree(this.tree, this.fragments, true));\n            this.parse = null;\n        }\n    }\n    withContext(f) {\n        let prev = currentContext;\n        currentContext = this;\n        try {\n            return f();\n        }\n        finally {\n            currentContext = prev;\n        }\n    }\n    withoutTempSkipped(fragments) {\n        for (let r; r = this.tempSkipped.pop();)\n            fragments = cutFragments(fragments, r.from, r.to);\n        return fragments;\n    }\n    /**\n    @internal\n    */\n    changes(changes, newState) {\n        let { fragments, tree, treeLen, viewport, skipped } = this;\n        this.takeTree();\n        if (!changes.empty) {\n            let ranges = [];\n            changes.iterChangedRanges((fromA, toA, fromB, toB) => ranges.push({ fromA, toA, fromB, toB }));\n            fragments = TreeFragment.applyChanges(fragments, ranges);\n            tree = Tree.empty;\n            treeLen = 0;\n            viewport = { from: changes.mapPos(viewport.from, -1), to: changes.mapPos(viewport.to, 1) };\n            if (this.skipped.length) {\n                skipped = [];\n                for (let r of this.skipped) {\n                    let from = changes.mapPos(r.from, 1), to = changes.mapPos(r.to, -1);\n                    if (from < to)\n                        skipped.push({ from, to });\n                }\n            }\n        }\n        return new ParseContext(this.parser, newState, fragments, tree, treeLen, viewport, skipped, this.scheduleOn);\n    }\n    /**\n    @internal\n    */\n    updateViewport(viewport) {\n        if (this.viewport.from == viewport.from && this.viewport.to == viewport.to)\n            return false;\n        this.viewport = viewport;\n        let startLen = this.skipped.length;\n        for (let i = 0; i < this.skipped.length; i++) {\n            let { from, to } = this.skipped[i];\n            if (from < viewport.to && to > viewport.from) {\n                this.fragments = cutFragments(this.fragments, from, to);\n                this.skipped.splice(i--, 1);\n            }\n        }\n        if (this.skipped.length >= startLen)\n            return false;\n        this.reset();\n        return true;\n    }\n    /**\n    @internal\n    */\n    reset() {\n        if (this.parse) {\n            this.takeTree();\n            this.parse = null;\n        }\n    }\n    /**\n    Notify the parse scheduler that the given region was skipped\n    because it wasn't in view, and the parse should be restarted\n    when it comes into view.\n    */\n    skipUntilInView(from, to) {\n        this.skipped.push({ from, to });\n    }\n    /**\n    Returns a parser intended to be used as placeholder when\n    asynchronously loading a nested parser. It'll skip its input and\n    mark it as not-really-parsed, so that the next update will parse\n    it again.\n    \n    When `until` is given, a reparse will be scheduled when that\n    promise resolves.\n    */\n    static getSkippingParser(until) {\n        return new class extends Parser {\n            createParse(input, fragments, ranges) {\n                let from = ranges[0].from, to = ranges[ranges.length - 1].to;\n                let parser = {\n                    parsedPos: from,\n                    advance() {\n                        let cx = currentContext;\n                        if (cx) {\n                            for (let r of ranges)\n                                cx.tempSkipped.push(r);\n                            if (until)\n                                cx.scheduleOn = cx.scheduleOn ? Promise.all([cx.scheduleOn, until]) : until;\n                        }\n                        this.parsedPos = to;\n                        return new Tree(NodeType.none, [], [], to - from);\n                    },\n                    stoppedAt: null,\n                    stopAt() { }\n                };\n                return parser;\n            }\n        };\n    }\n    /**\n    @internal\n    */\n    isDone(upto) {\n        upto = Math.min(upto, this.state.doc.length);\n        let frags = this.fragments;\n        return this.treeLen >= upto && frags.length && frags[0].from == 0 && frags[0].to >= upto;\n    }\n    /**\n    Get the context for the current parse, or `null` if no editor\n    parse is in progress.\n    */\n    static get() { return currentContext; }\n}\nfunction cutFragments(fragments, from, to) {\n    return TreeFragment.applyChanges(fragments, [{ fromA: from, toA: to, fromB: from, toB: to }]);\n}\nclass LanguageState {\n    constructor(\n    // A mutable parse state that is used to preserve work done during\n    // the lifetime of a state when moving to the next state.\n    context) {\n        this.context = context;\n        this.tree = context.tree;\n    }\n    apply(tr) {\n        if (!tr.docChanged && this.tree == this.context.tree)\n            return this;\n        let newCx = this.context.changes(tr.changes, tr.state);\n        // If the previous parse wasn't done, go forward only up to its\n        // end position or the end of the viewport, to avoid slowing down\n        // state updates with parse work beyond the viewport.\n        let upto = this.context.treeLen == tr.startState.doc.length ? undefined\n            : Math.max(tr.changes.mapPos(this.context.treeLen), newCx.viewport.to);\n        if (!newCx.work(20 /* Work.Apply */, upto))\n            newCx.takeTree();\n        return new LanguageState(newCx);\n    }\n    static init(state) {\n        let vpTo = Math.min(3000 /* Work.InitViewport */, state.doc.length);\n        let parseState = ParseContext.create(state.facet(language).parser, state, { from: 0, to: vpTo });\n        if (!parseState.work(20 /* Work.Apply */, vpTo))\n            parseState.takeTree();\n        return new LanguageState(parseState);\n    }\n}\nLanguage.state = /*@__PURE__*/StateField.define({\n    create: LanguageState.init,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(Language.setState))\n                return e.value;\n        if (tr.startState.facet(language) != tr.state.facet(language))\n            return LanguageState.init(tr.state);\n        return value.apply(tr);\n    }\n});\nlet requestIdle = (callback) => {\n    let timeout = setTimeout(() => callback(), 500 /* Work.MaxPause */);\n    return () => clearTimeout(timeout);\n};\nif (typeof requestIdleCallback != \"undefined\")\n    requestIdle = (callback) => {\n        let idle = -1, timeout = setTimeout(() => {\n            idle = requestIdleCallback(callback, { timeout: 500 /* Work.MaxPause */ - 100 /* Work.MinPause */ });\n        }, 100 /* Work.MinPause */);\n        return () => idle < 0 ? clearTimeout(timeout) : cancelIdleCallback(idle);\n    };\nconst isInputPending = typeof navigator != \"undefined\" && ((_a = navigator.scheduling) === null || _a === void 0 ? void 0 : _a.isInputPending)\n    ? () => navigator.scheduling.isInputPending() : null;\nconst parseWorker = /*@__PURE__*/ViewPlugin.fromClass(class ParseWorker {\n    constructor(view) {\n        this.view = view;\n        this.working = null;\n        this.workScheduled = 0;\n        // End of the current time chunk\n        this.chunkEnd = -1;\n        // Milliseconds of budget left for this chunk\n        this.chunkBudget = -1;\n        this.work = this.work.bind(this);\n        this.scheduleWork();\n    }\n    update(update) {\n        let cx = this.view.state.field(Language.state).context;\n        if (cx.updateViewport(update.view.viewport) || this.view.viewport.to > cx.treeLen)\n            this.scheduleWork();\n        if (update.docChanged || update.selectionSet) {\n            if (this.view.hasFocus)\n                this.chunkBudget += 50 /* Work.ChangeBonus */;\n            this.scheduleWork();\n        }\n        this.checkAsyncSchedule(cx);\n    }\n    scheduleWork() {\n        if (this.working)\n            return;\n        let { state } = this.view, field = state.field(Language.state);\n        if (field.tree != field.context.tree || !field.context.isDone(state.doc.length))\n            this.working = requestIdle(this.work);\n    }\n    work(deadline) {\n        this.working = null;\n        let now = Date.now();\n        if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) { // Start a new chunk\n            this.chunkEnd = now + 30000 /* Work.ChunkTime */;\n            this.chunkBudget = 3000 /* Work.ChunkBudget */;\n        }\n        if (this.chunkBudget <= 0)\n            return; // No more budget\n        let { state, viewport: { to: vpTo } } = this.view, field = state.field(Language.state);\n        if (field.tree == field.context.tree && field.context.isDone(vpTo + 100000 /* Work.MaxParseAhead */))\n            return;\n        let endTime = Date.now() + Math.min(this.chunkBudget, 100 /* Work.Slice */, deadline && !isInputPending ? Math.max(25 /* Work.MinSlice */, deadline.timeRemaining() - 5) : 1e9);\n        let viewportFirst = field.context.treeLen < vpTo && state.doc.length > vpTo + 1000;\n        let done = field.context.work(() => {\n            return isInputPending && isInputPending() || Date.now() > endTime;\n        }, vpTo + (viewportFirst ? 0 : 100000 /* Work.MaxParseAhead */));\n        this.chunkBudget -= Date.now() - now;\n        if (done || this.chunkBudget <= 0) {\n            field.context.takeTree();\n            this.view.dispatch({ effects: Language.setState.of(new LanguageState(field.context)) });\n        }\n        if (this.chunkBudget > 0 && !(done && !viewportFirst))\n            this.scheduleWork();\n        this.checkAsyncSchedule(field.context);\n    }\n    checkAsyncSchedule(cx) {\n        if (cx.scheduleOn) {\n            this.workScheduled++;\n            cx.scheduleOn\n                .then(() => this.scheduleWork())\n                .catch(err => logException(this.view.state, err))\n                .then(() => this.workScheduled--);\n            cx.scheduleOn = null;\n        }\n    }\n    destroy() {\n        if (this.working)\n            this.working();\n    }\n    isWorking() {\n        return !!(this.working || this.workScheduled > 0);\n    }\n}, {\n    eventHandlers: { focus() { this.scheduleWork(); } }\n});\n/**\nThe facet used to associate a language with an editor state. Used\nby `Language` object's `extension` property (so you don't need to\nmanually wrap your languages in this). Can be used to access the\ncurrent language on a state.\n*/\nconst language = /*@__PURE__*/Facet.define({\n    combine(languages) { return languages.length ? languages[0] : null; },\n    enables: language => [\n        Language.state,\n        parseWorker,\n        EditorView.contentAttributes.compute([language], state => {\n            let lang = state.facet(language);\n            return lang && lang.name ? { \"data-language\": lang.name } : {};\n        })\n    ]\n});\n/**\nThis class bundles a [language](https://codemirror.net/6/docs/ref/#language.Language) with an\noptional set of supporting extensions. Language packages are\nencouraged to export a function that optionally takes a\nconfiguration object and returns a `LanguageSupport` instance, as\nthe main way for client code to use the package.\n*/\nclass LanguageSupport {\n    /**\n    Create a language support object.\n    */\n    constructor(\n    /**\n    The language object.\n    */\n    language, \n    /**\n    An optional set of supporting extensions. When nesting a\n    language in another language, the outer language is encouraged\n    to include the supporting extensions for its inner languages\n    in its own set of support extensions.\n    */\n    support = []) {\n        this.language = language;\n        this.support = support;\n        this.extension = [language, support];\n    }\n}\n/**\nLanguage descriptions are used to store metadata about languages\nand to dynamically load them. Their main role is finding the\nappropriate language for a filename or dynamically loading nested\nparsers.\n*/\nclass LanguageDescription {\n    constructor(\n    /**\n    The name of this language.\n    */\n    name, \n    /**\n    Alternative names for the mode (lowercased, includes `this.name`).\n    */\n    alias, \n    /**\n    File extensions associated with this language.\n    */\n    extensions, \n    /**\n    Optional filename pattern that should be associated with this\n    language.\n    */\n    filename, loadFunc, \n    /**\n    If the language has been loaded, this will hold its value.\n    */\n    support = undefined) {\n        this.name = name;\n        this.alias = alias;\n        this.extensions = extensions;\n        this.filename = filename;\n        this.loadFunc = loadFunc;\n        this.support = support;\n        this.loading = null;\n    }\n    /**\n    Start loading the the language. Will return a promise that\n    resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)\n    object when the language successfully loads.\n    */\n    load() {\n        return this.loading || (this.loading = this.loadFunc().then(support => this.support = support, err => { this.loading = null; throw err; }));\n    }\n    /**\n    Create a language description.\n    */\n    static of(spec) {\n        let { load, support } = spec;\n        if (!load) {\n            if (!support)\n                throw new RangeError(\"Must pass either 'load' or 'support' to LanguageDescription.of\");\n            load = () => Promise.resolve(support);\n        }\n        return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(s => s.toLowerCase()), spec.extensions || [], spec.filename, load, support);\n    }\n    /**\n    Look for a language in the given array of descriptions that\n    matches the filename. Will first match\n    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,\n    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),\n    and return the first language that matches.\n    */\n    static matchFilename(descs, filename) {\n        for (let d of descs)\n            if (d.filename && d.filename.test(filename))\n                return d;\n        let ext = /\\.([^.]+)$/.exec(filename);\n        if (ext)\n            for (let d of descs)\n                if (d.extensions.indexOf(ext[1]) > -1)\n                    return d;\n        return null;\n    }\n    /**\n    Look for a language whose name or alias matches the the given\n    name (case-insensitively). If `fuzzy` is true, and no direct\n    matchs is found, this'll also search for a language whose name\n    or alias occurs in the string (for names shorter than three\n    characters, only when surrounded by non-word characters).\n    */\n    static matchLanguageName(descs, name, fuzzy = true) {\n        name = name.toLowerCase();\n        for (let d of descs)\n            if (d.alias.some(a => a == name))\n                return d;\n        if (fuzzy)\n            for (let d of descs)\n                for (let a of d.alias) {\n                    let found = name.indexOf(a);\n                    if (found > -1 && (a.length > 2 || !/\\w/.test(name[found - 1]) && !/\\w/.test(name[found + a.length])))\n                        return d;\n                }\n        return null;\n    }\n}\n\n/**\nFacet that defines a way to provide a function that computes the\nappropriate indentation depth, as a column number (see\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)), at the start of a given\nline. A return value of `null` indicates no indentation can be\ndetermined, and the line should inherit the indentation of the one\nabove it. A return value of `undefined` defers to the next indent\nservice.\n*/\nconst indentService = /*@__PURE__*/Facet.define();\n/**\nFacet for overriding the unit by which indentation happens. Should\nbe a string consisting either entirely of the same whitespace\ncharacter. When not set, this defaults to 2 spaces.\n*/\nconst indentUnit = /*@__PURE__*/Facet.define({\n    combine: values => {\n        if (!values.length)\n            return \"  \";\n        let unit = values[0];\n        if (!unit || /\\S/.test(unit) || Array.from(unit).some(e => e != unit[0]))\n            throw new Error(\"Invalid indent unit: \" + JSON.stringify(values[0]));\n        return unit;\n    }\n});\n/**\nReturn the _column width_ of an indent unit in the state.\nDetermined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)\nfacet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that\ncontains tabs.\n*/\nfunction getIndentUnit(state) {\n    let unit = state.facet(indentUnit);\n    return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;\n}\n/**\nCreate an indentation string that covers columns 0 to `cols`.\nWill use tabs for as much of the columns as possible when the\n[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains\ntabs.\n*/\nfunction indentString(state, cols) {\n    let result = \"\", ts = state.tabSize, ch = state.facet(indentUnit)[0];\n    if (ch == \"\\t\") {\n        while (cols >= ts) {\n            result += \"\\t\";\n            cols -= ts;\n        }\n        ch = \" \";\n    }\n    for (let i = 0; i < cols; i++)\n        result += ch;\n    return result;\n}\n/**\nGet the indentation, as a column number, at the given position.\nWill first consult any [indent services](https://codemirror.net/6/docs/ref/#language.indentService)\nthat are registered, and if none of those return an indentation,\nthis will check the syntax tree for the [indent node\nprop](https://codemirror.net/6/docs/ref/#language.indentNodeProp) and use that if found. Returns a\nnumber when an indentation could be determined, and null\notherwise.\n*/\nfunction getIndentation(context, pos) {\n    if (context instanceof EditorState)\n        context = new IndentContext(context);\n    for (let service of context.state.facet(indentService)) {\n        let result = service(context, pos);\n        if (result !== undefined)\n            return result;\n    }\n    let tree = syntaxTree(context.state);\n    return tree.length >= pos ? syntaxIndentation(context, tree, pos) : null;\n}\n/**\nCreate a change set that auto-indents all lines touched by the\ngiven document range.\n*/\nfunction indentRange(state, from, to) {\n    let updated = Object.create(null);\n    let context = new IndentContext(state, { overrideIndentation: start => { var _a; return (_a = updated[start]) !== null && _a !== void 0 ? _a : -1; } });\n    let changes = [];\n    for (let pos = from; pos <= to;) {\n        let line = state.doc.lineAt(pos);\n        pos = line.to + 1;\n        let indent = getIndentation(context, line.from);\n        if (indent == null)\n            continue;\n        if (!/\\S/.test(line.text))\n            indent = 0;\n        let cur = /^\\s*/.exec(line.text)[0];\n        let norm = indentString(state, indent);\n        if (cur != norm) {\n            updated[line.from] = indent;\n            changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n    }\n    return state.changes(changes);\n}\n/**\nIndentation contexts are used when calling [indentation\nservices](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities\nuseful in indentation logic, and can selectively override the\nindentation reported for some lines.\n*/\nclass IndentContext {\n    /**\n    Create an indent context.\n    */\n    constructor(\n    /**\n    The editor state.\n    */\n    state, \n    /**\n    @internal\n    */\n    options = {}) {\n        this.state = state;\n        this.options = options;\n        this.unit = getIndentUnit(state);\n    }\n    /**\n    Get a description of the line at the given position, taking\n    [simulated line\n    breaks](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    into account. If there is such a break at `pos`, the `bias`\n    argument determines whether the part of the line line before or\n    after the break is used.\n    */\n    lineAt(pos, bias = 1) {\n        let line = this.state.doc.lineAt(pos);\n        let { simulateBreak, simulateDoubleBreak } = this.options;\n        if (simulateBreak != null && simulateBreak >= line.from && simulateBreak <= line.to) {\n            if (simulateDoubleBreak && simulateBreak == pos)\n                return { text: \"\", from: pos };\n            else if (bias < 0 ? simulateBreak < pos : simulateBreak <= pos)\n                return { text: line.text.slice(simulateBreak - line.from), from: simulateBreak };\n            else\n                return { text: line.text.slice(0, simulateBreak - line.from), from: line.from };\n        }\n        return line;\n    }\n    /**\n    Get the text directly after `pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    textAfterPos(pos, bias = 1) {\n        if (this.options.simulateDoubleBreak && pos == this.options.simulateBreak)\n            return \"\";\n        let { text, from } = this.lineAt(pos, bias);\n        return text.slice(pos - from, Math.min(text.length, pos + 100 - from));\n    }\n    /**\n    Find the column for the given position.\n    */\n    column(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let result = this.countColumn(text, pos - from);\n        let override = this.options.overrideIndentation ? this.options.overrideIndentation(from) : -1;\n        if (override > -1)\n            result += override - this.countColumn(text, text.search(/\\S|$/));\n        return result;\n    }\n    /**\n    Find the column position (taking tabs into account) of the given\n    position in the given string.\n    */\n    countColumn(line, pos = line.length) {\n        return countColumn(line, this.state.tabSize, pos);\n    }\n    /**\n    Find the indentation column of the line at the given point.\n    */\n    lineIndent(pos, bias = 1) {\n        let { text, from } = this.lineAt(pos, bias);\n        let override = this.options.overrideIndentation;\n        if (override) {\n            let overriden = override(from);\n            if (overriden > -1)\n                return overriden;\n        }\n        return this.countColumn(text, text.search(/\\S|$/));\n    }\n    /**\n    Returns the [simulated line\n    break](https://codemirror.net/6/docs/ref/#language.IndentContext.constructor^options.simulateBreak)\n    for this context, if any.\n    */\n    get simulatedBreak() {\n        return this.options.simulateBreak || null;\n    }\n}\n/**\nA syntax tree node prop used to associate indentation strategies\nwith node types. Such a strategy is a function from an indentation\ncontext to a column number (see also\n[`indentString`](https://codemirror.net/6/docs/ref/#language.indentString)) or null, where null\nindicates that no definitive indentation can be determined.\n*/\nconst indentNodeProp = /*@__PURE__*/new NodeProp();\n// Compute the indentation for a given position from the syntax tree.\nfunction syntaxIndentation(cx, ast, pos) {\n    let stack = ast.resolveStack(pos);\n    let inner = stack.node.enterUnfinishedNodesBefore(pos);\n    if (inner != stack.node) {\n        let add = [];\n        for (let cur = inner; cur != stack.node; cur = cur.parent)\n            add.push(cur);\n        for (let i = add.length - 1; i >= 0; i--)\n            stack = { node: add[i], next: stack };\n    }\n    return indentFor(stack, cx, pos);\n}\nfunction indentFor(stack, cx, pos) {\n    for (let cur = stack; cur; cur = cur.next) {\n        let strategy = indentStrategy(cur.node);\n        if (strategy)\n            return strategy(TreeIndentContext.create(cx, pos, cur));\n    }\n    return 0;\n}\nfunction ignoreClosed(cx) {\n    return cx.pos == cx.options.simulateBreak && cx.options.simulateDoubleBreak;\n}\nfunction indentStrategy(tree) {\n    let strategy = tree.type.prop(indentNodeProp);\n    if (strategy)\n        return strategy;\n    let first = tree.firstChild, close;\n    if (first && (close = first.type.prop(NodeProp.closedBy))) {\n        let last = tree.lastChild, closed = last && close.indexOf(last.name) > -1;\n        return cx => delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);\n    }\n    return tree.parent == null ? topIndent : null;\n}\nfunction topIndent() { return 0; }\n/**\nObjects of this type provide context information and helper\nmethods to indentation functions registered on syntax nodes.\n*/\nclass TreeIndentContext extends IndentContext {\n    constructor(base, \n    /**\n    The position at which indentation is being computed.\n    */\n    pos, \n    /**\n    @internal\n    */\n    context) {\n        super(base.state, base.options);\n        this.base = base;\n        this.pos = pos;\n        this.context = context;\n    }\n    /**\n    The syntax tree node to which the indentation strategy\n    applies.\n    */\n    get node() { return this.context.node; }\n    /**\n    @internal\n    */\n    static create(base, pos, context) {\n        return new TreeIndentContext(base, pos, context);\n    }\n    /**\n    Get the text directly after `this.pos`, either the entire line\n    or the next 100 characters, whichever is shorter.\n    */\n    get textAfter() {\n        return this.textAfterPos(this.pos);\n    }\n    /**\n    Get the indentation at the reference line for `this.node`, which\n    is the line on which it starts, unless there is a node that is\n    _not_ a parent of this node covering the start of that line. If\n    so, the line at the start of that node is tried, again skipping\n    on if it is covered by another such node.\n    */\n    get baseIndent() {\n        return this.baseIndentFor(this.node);\n    }\n    /**\n    Get the indentation for the reference line of the given node\n    (see [`baseIndent`](https://codemirror.net/6/docs/ref/#language.TreeIndentContext.baseIndent)).\n    */\n    baseIndentFor(node) {\n        let line = this.state.doc.lineAt(node.from);\n        // Skip line starts that are covered by a sibling (or cousin, etc)\n        for (;;) {\n            let atBreak = node.resolve(line.from);\n            while (atBreak.parent && atBreak.parent.from == atBreak.from)\n                atBreak = atBreak.parent;\n            if (isParent(atBreak, node))\n                break;\n            line = this.state.doc.lineAt(atBreak.from);\n        }\n        return this.lineIndent(line.from);\n    }\n    /**\n    Continue looking for indentations in the node's parent nodes,\n    and return the result of that.\n    */\n    continue() {\n        return indentFor(this.context.next, this.base, this.pos);\n    }\n}\nfunction isParent(parent, of) {\n    for (let cur = of; cur; cur = cur.parent)\n        if (parent == cur)\n            return true;\n    return false;\n}\n// Check whether a delimited node is aligned (meaning there are\n// non-skipped nodes on the same line as the opening delimiter). And\n// if so, return the opening token.\nfunction bracketedAligned(context) {\n    let tree = context.node;\n    let openToken = tree.childAfter(tree.from), last = tree.lastChild;\n    if (!openToken)\n        return null;\n    let sim = context.options.simulateBreak;\n    let openLine = context.state.doc.lineAt(openToken.from);\n    let lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);\n    for (let pos = openToken.to;;) {\n        let next = tree.childAfter(pos);\n        if (!next || next == last)\n            return null;\n        if (!next.type.isSkipped)\n            return next.from < lineEnd ? openToken : null;\n        pos = next.to;\n    }\n}\n/**\nAn indentation strategy for delimited (usually bracketed) nodes.\nWill, by default, indent one unit more than the parent's base\nindent unless the line starts with a closing token. When `align`\nis true and there are non-skipped nodes on the node's opening\nline, the content of the node will be aligned with the end of the\nopening node, like this:\n\n    foo(bar,\n        baz)\n*/\nfunction delimitedIndent({ closing, align = true, units = 1 }) {\n    return (context) => delimitedStrategy(context, align, units, closing);\n}\nfunction delimitedStrategy(context, align, units, closing, closedAt) {\n    let after = context.textAfter, space = after.match(/^\\s*/)[0].length;\n    let closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;\n    let aligned = align ? bracketedAligned(context) : null;\n    if (aligned)\n        return closed ? context.column(aligned.from) : context.column(aligned.to);\n    return context.baseIndent + (closed ? 0 : context.unit * units);\n}\n/**\nAn indentation strategy that aligns a node's content to its base\nindentation.\n*/\nconst flatIndent = (context) => context.baseIndent;\n/**\nCreates an indentation strategy that, by default, indents\ncontinued lines one unit more than the node's base indentation.\nYou can provide `except` to prevent indentation of lines that\nmatch a pattern (for example `/^else\\b/` in `if`/`else`\nconstructs), and you can change the amount of units used with the\n`units` option.\n*/\nfunction continuedIndent({ except, units = 1 } = {}) {\n    return (context) => {\n        let matchExcept = except && except.test(context.textAfter);\n        return context.baseIndent + (matchExcept ? 0 : units * context.unit);\n    };\n}\nconst DontIndentBeyond = 200;\n/**\nEnables reindentation on input. When a language defines an\n`indentOnInput` field in its [language\ndata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular\nexpression, the line at the cursor will be reindented whenever new\ntext is typed and the input from the start of the line up to the\ncursor matches that regexp.\n\nTo avoid unneccesary reindents, it is recommended to start the\nregexp with `^` (usually followed by `\\s*`), and end it with `$`.\nFor example, `/^\\s*\\}$/` will reindent when a closing brace is\nadded at the start of a line.\n*/\nfunction indentOnInput() {\n    return EditorState.transactionFilter.of(tr => {\n        if (!tr.docChanged || !tr.isUserEvent(\"input.type\") && !tr.isUserEvent(\"input.complete\"))\n            return tr;\n        let rules = tr.startState.languageDataAt(\"indentOnInput\", tr.startState.selection.main.head);\n        if (!rules.length)\n            return tr;\n        let doc = tr.newDoc, { head } = tr.newSelection.main, line = doc.lineAt(head);\n        if (head > line.from + DontIndentBeyond)\n            return tr;\n        let lineStart = doc.sliceString(line.from, head);\n        if (!rules.some(r => r.test(lineStart)))\n            return tr;\n        let { state } = tr, last = -1, changes = [];\n        for (let { head } of state.selection.ranges) {\n            let line = state.doc.lineAt(head);\n            if (line.from == last)\n                continue;\n            last = line.from;\n            let indent = getIndentation(state, line.from);\n            if (indent == null)\n                continue;\n            let cur = /^\\s*/.exec(line.text)[0];\n            let norm = indentString(state, indent);\n            if (cur != norm)\n                changes.push({ from: line.from, to: line.from + cur.length, insert: norm });\n        }\n        return changes.length ? [tr, { changes, sequential: true }] : tr;\n    });\n}\n\n/**\nA facet that registers a code folding service. When called with\nthe extent of a line, such a function should return a foldable\nrange that starts on that line (but continues beyond it), if one\ncan be found.\n*/\nconst foldService = /*@__PURE__*/Facet.define();\n/**\nThis node prop is used to associate folding information with\nsyntax node types. Given a syntax node, it should check whether\nthat tree is foldable and return the range that can be collapsed\nwhen it is.\n*/\nconst foldNodeProp = /*@__PURE__*/new NodeProp();\n/**\n[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but\nthe first and the last child of a syntax node. Useful for nodes\nthat start and end with delimiters.\n*/\nfunction foldInside(node) {\n    let first = node.firstChild, last = node.lastChild;\n    return first && first.to < last.from ? { from: first.to, to: last.type.isError ? node.to : last.from } : null;\n}\nfunction syntaxFolding(state, start, end) {\n    let tree = syntaxTree(state);\n    if (tree.length < end)\n        return null;\n    let stack = tree.resolveStack(end, 1);\n    let found = null;\n    for (let iter = stack; iter; iter = iter.next) {\n        let cur = iter.node;\n        if (cur.to <= end || cur.from > end)\n            continue;\n        if (found && cur.from < start)\n            break;\n        let prop = cur.type.prop(foldNodeProp);\n        if (prop && (cur.to < tree.length - 50 || tree.length == state.doc.length || !isUnfinished(cur))) {\n            let value = prop(cur, state);\n            if (value && value.from <= end && value.from >= start && value.to > end)\n                found = value;\n        }\n    }\n    return found;\n}\nfunction isUnfinished(node) {\n    let ch = node.lastChild;\n    return ch && ch.to == node.to && ch.type.isError;\n}\n/**\nCheck whether the given line is foldable. First asks any fold\nservices registered through\n[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return\na result, tries to query the [fold node\nprop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end\nof the line.\n*/\nfunction foldable(state, lineStart, lineEnd) {\n    for (let service of state.facet(foldService)) {\n        let result = service(state, lineStart, lineEnd);\n        if (result)\n            return result;\n    }\n    return syntaxFolding(state, lineStart, lineEnd);\n}\nfunction mapRange(range, mapping) {\n    let from = mapping.mapPos(range.from, 1), to = mapping.mapPos(range.to, -1);\n    return from >= to ? undefined : { from, to };\n}\n/**\nState effect that can be attached to a transaction to fold the\ngiven range. (You probably only need this in exceptional\ncircumstances—usually you'll just want to let\n[`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode) and the [fold\ngutter](https://codemirror.net/6/docs/ref/#language.foldGutter) create the transactions.)\n*/\nconst foldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\n/**\nState effect that unfolds the given range (if it was folded).\n*/\nconst unfoldEffect = /*@__PURE__*/StateEffect.define({ map: mapRange });\nfunction selectedLines(view) {\n    let lines = [];\n    for (let { head } of view.state.selection.ranges) {\n        if (lines.some(l => l.from <= head && l.to >= head))\n            continue;\n        lines.push(view.lineBlockAt(head));\n    }\n    return lines;\n}\n/**\nThe state field that stores the folded ranges (as a [decoration\nset](https://codemirror.net/6/docs/ref/#view.DecorationSet)). Can be passed to\n[`EditorState.toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) and\n[`fromJSON`](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) to serialize the fold\nstate.\n*/\nconst foldState = /*@__PURE__*/StateField.define({\n    create() {\n        return Decoration.none;\n    },\n    update(folded, tr) {\n        folded = folded.map(tr.changes);\n        for (let e of tr.effects) {\n            if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) {\n                let { preparePlaceholder } = tr.state.facet(foldConfig);\n                let widget = !preparePlaceholder ? foldWidget :\n                    Decoration.replace({ widget: new PreparedFoldWidget(preparePlaceholder(tr.state, e.value)) });\n                folded = folded.update({ add: [widget.range(e.value.from, e.value.to)] });\n            }\n            else if (e.is(unfoldEffect)) {\n                folded = folded.update({ filter: (from, to) => e.value.from != from || e.value.to != to,\n                    filterFrom: e.value.from, filterTo: e.value.to });\n            }\n        }\n        // Clear folded ranges that cover the selection head\n        if (tr.selection) {\n            let onSelection = false, { head } = tr.selection.main;\n            folded.between(head, head, (a, b) => { if (a < head && b > head)\n                onSelection = true; });\n            if (onSelection)\n                folded = folded.update({\n                    filterFrom: head,\n                    filterTo: head,\n                    filter: (a, b) => b <= head || a >= head\n                });\n        }\n        return folded;\n    },\n    provide: f => EditorView.decorations.from(f),\n    toJSON(folded, state) {\n        let ranges = [];\n        folded.between(0, state.doc.length, (from, to) => { ranges.push(from, to); });\n        return ranges;\n    },\n    fromJSON(value) {\n        if (!Array.isArray(value) || value.length % 2)\n            throw new RangeError(\"Invalid JSON for fold state\");\n        let ranges = [];\n        for (let i = 0; i < value.length;) {\n            let from = value[i++], to = value[i++];\n            if (typeof from != \"number\" || typeof to != \"number\")\n                throw new RangeError(\"Invalid JSON for fold state\");\n            ranges.push(foldWidget.range(from, to));\n        }\n        return Decoration.set(ranges, true);\n    }\n});\n/**\nGet a [range set](https://codemirror.net/6/docs/ref/#state.RangeSet) containing the folded ranges\nin the given state.\n*/\nfunction foldedRanges(state) {\n    return state.field(foldState, false) || RangeSet.empty;\n}\nfunction findFold(state, from, to) {\n    var _a;\n    let found = null;\n    (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, (from, to) => {\n        if (!found || found.from > from)\n            found = { from, to };\n    });\n    return found;\n}\nfunction foldExists(folded, from, to) {\n    let found = false;\n    folded.between(from, from, (a, b) => { if (a == from && b == to)\n        found = true; });\n    return found;\n}\nfunction maybeEnable(state, other) {\n    return state.field(foldState, false) ? other : other.concat(StateEffect.appendConfig.of(codeFolding()));\n}\n/**\nFold the lines that are selected, if possible.\n*/\nconst foldCode = view => {\n    for (let line of selectedLines(view)) {\n        let range = foldable(view.state, line.from, line.to);\n        if (range) {\n            view.dispatch({ effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)]) });\n            return true;\n        }\n    }\n    return false;\n};\n/**\nUnfold folded ranges on selected lines.\n*/\nconst unfoldCode = view => {\n    if (!view.state.field(foldState, false))\n        return false;\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n    }\n    if (effects.length)\n        view.dispatch({ effects });\n    return effects.length > 0;\n};\nfunction announceFold(view, range, fold = true) {\n    let lineFrom = view.state.doc.lineAt(range.from).number, lineTo = view.state.doc.lineAt(range.to).number;\n    return EditorView.announce.of(`${view.state.phrase(fold ? \"Folded lines\" : \"Unfolded lines\")} ${lineFrom} ${view.state.phrase(\"to\")} ${lineTo}.`);\n}\n/**\nFold all top-level foldable ranges. Note that, in most cases,\nfolding information will depend on the [syntax\ntree](https://codemirror.net/6/docs/ref/#language.syntaxTree), and folding everything may not work\nreliably when the document hasn't been fully parsed (either\nbecause the editor state was only just initialized, or because the\ndocument is so big that the parser decided not to parse it\nentirely).\n*/\nconst foldAll = view => {\n    let { state } = view, effects = [];\n    for (let pos = 0; pos < state.doc.length;) {\n        let line = view.lineBlockAt(pos), range = foldable(state, line.from, line.to);\n        if (range)\n            effects.push(foldEffect.of(range));\n        pos = (range ? view.lineBlockAt(range.to) : line).to + 1;\n    }\n    if (effects.length)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nUnfold all folded code.\n*/\nconst unfoldAll = view => {\n    let field = view.state.field(foldState, false);\n    if (!field || !field.size)\n        return false;\n    let effects = [];\n    field.between(0, view.state.doc.length, (from, to) => { effects.push(unfoldEffect.of({ from, to })); });\n    view.dispatch({ effects });\n    return true;\n};\n// Find the foldable region containing the given line, if one exists\nfunction foldableContainer(view, lineBlock) {\n    // Look backwards through line blocks until we find a foldable region that\n    // intersects with the line\n    for (let line = lineBlock;;) {\n        let foldableRegion = foldable(view.state, line.from, line.to);\n        if (foldableRegion && foldableRegion.to > lineBlock.from)\n            return foldableRegion;\n        if (!line.from)\n            return null;\n        line = view.lineBlockAt(line.from - 1);\n    }\n}\n/**\nToggle folding at cursors. Unfolds if there is an existing fold\nstarting in that line, tries to find a foldable range around it\notherwise.\n*/\nconst toggleFold = (view) => {\n    let effects = [];\n    for (let line of selectedLines(view)) {\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded) {\n            effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));\n        }\n        else {\n            let foldRange = foldableContainer(view, line);\n            if (foldRange)\n                effects.push(foldEffect.of(foldRange), announceFold(view, foldRange));\n        }\n    }\n    if (effects.length > 0)\n        view.dispatch({ effects: maybeEnable(view.state, effects) });\n    return !!effects.length;\n};\n/**\nDefault fold-related key bindings.\n\n - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#language.foldCode).\n - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#language.unfoldCode).\n - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#language.foldAll).\n - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#language.unfoldAll).\n*/\nconst foldKeymap = [\n    { key: \"Ctrl-Shift-[\", mac: \"Cmd-Alt-[\", run: foldCode },\n    { key: \"Ctrl-Shift-]\", mac: \"Cmd-Alt-]\", run: unfoldCode },\n    { key: \"Ctrl-Alt-[\", run: foldAll },\n    { key: \"Ctrl-Alt-]\", run: unfoldAll }\n];\nconst defaultConfig = {\n    placeholderDOM: null,\n    preparePlaceholder: null,\n    placeholderText: \"…\"\n};\nconst foldConfig = /*@__PURE__*/Facet.define({\n    combine(values) { return combineConfig(values, defaultConfig); }\n});\n/**\nCreate an extension that configures code folding.\n*/\nfunction codeFolding(config) {\n    let result = [foldState, baseTheme$1];\n    if (config)\n        result.push(foldConfig.of(config));\n    return result;\n}\nfunction widgetToDOM(view, prepared) {\n    let { state } = view, conf = state.facet(foldConfig);\n    let onclick = (event) => {\n        let line = view.lineBlockAt(view.posAtDOM(event.target));\n        let folded = findFold(view.state, line.from, line.to);\n        if (folded)\n            view.dispatch({ effects: unfoldEffect.of(folded) });\n        event.preventDefault();\n    };\n    if (conf.placeholderDOM)\n        return conf.placeholderDOM(view, onclick, prepared);\n    let element = document.createElement(\"span\");\n    element.textContent = conf.placeholderText;\n    element.setAttribute(\"aria-label\", state.phrase(\"folded code\"));\n    element.title = state.phrase(\"unfold\");\n    element.className = \"cm-foldPlaceholder\";\n    element.onclick = onclick;\n    return element;\n}\nconst foldWidget = /*@__PURE__*/Decoration.replace({ widget: /*@__PURE__*/new class extends WidgetType {\n        toDOM(view) { return widgetToDOM(view, null); }\n    } });\nclass PreparedFoldWidget extends WidgetType {\n    constructor(value) {\n        super();\n        this.value = value;\n    }\n    eq(other) { return this.value == other.value; }\n    toDOM(view) { return widgetToDOM(view, this.value); }\n}\nconst foldGutterDefaults = {\n    openText: \"⌄\",\n    closedText: \"›\",\n    markerDOM: null,\n    domEventHandlers: {},\n    foldingChanged: () => false\n};\nclass FoldMarker extends GutterMarker {\n    constructor(config, open) {\n        super();\n        this.config = config;\n        this.open = open;\n    }\n    eq(other) { return this.config == other.config && this.open == other.open; }\n    toDOM(view) {\n        if (this.config.markerDOM)\n            return this.config.markerDOM(this.open);\n        let span = document.createElement(\"span\");\n        span.textContent = this.open ? this.config.openText : this.config.closedText;\n        span.title = view.state.phrase(this.open ? \"Fold line\" : \"Unfold line\");\n        return span;\n    }\n}\n/**\nCreate an extension that registers a fold gutter, which shows a\nfold status indicator before foldable lines (which can be clicked\nto fold or unfold the line).\n*/\nfunction foldGutter(config = {}) {\n    let fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);\n    let canFold = new FoldMarker(fullConfig, true), canUnfold = new FoldMarker(fullConfig, false);\n    let markers = ViewPlugin.fromClass(class {\n        constructor(view) {\n            this.from = view.viewport.from;\n            this.markers = this.buildMarkers(view);\n        }\n        update(update) {\n            if (update.docChanged || update.viewportChanged ||\n                update.startState.facet(language) != update.state.facet(language) ||\n                update.startState.field(foldState, false) != update.state.field(foldState, false) ||\n                syntaxTree(update.startState) != syntaxTree(update.state) ||\n                fullConfig.foldingChanged(update))\n                this.markers = this.buildMarkers(update.view);\n        }\n        buildMarkers(view) {\n            let builder = new RangeSetBuilder();\n            for (let line of view.viewportLineBlocks) {\n                let mark = findFold(view.state, line.from, line.to) ? canUnfold\n                    : foldable(view.state, line.from, line.to) ? canFold : null;\n                if (mark)\n                    builder.add(line.from, line.from, mark);\n            }\n            return builder.finish();\n        }\n    });\n    let { domEventHandlers } = fullConfig;\n    return [\n        markers,\n        gutter({\n            class: \"cm-foldGutter\",\n            markers(view) { var _a; return ((_a = view.plugin(markers)) === null || _a === void 0 ? void 0 : _a.markers) || RangeSet.empty; },\n            initialSpacer() {\n                return new FoldMarker(fullConfig, false);\n            },\n            domEventHandlers: Object.assign(Object.assign({}, domEventHandlers), { click: (view, line, event) => {\n                    if (domEventHandlers.click && domEventHandlers.click(view, line, event))\n                        return true;\n                    let folded = findFold(view.state, line.from, line.to);\n                    if (folded) {\n                        view.dispatch({ effects: unfoldEffect.of(folded) });\n                        return true;\n                    }\n                    let range = foldable(view.state, line.from, line.to);\n                    if (range) {\n                        view.dispatch({ effects: foldEffect.of(range) });\n                        return true;\n                    }\n                    return false;\n                } })\n        }),\n        codeFolding()\n    ];\n}\nconst baseTheme$1 = /*@__PURE__*/EditorView.baseTheme({\n    \".cm-foldPlaceholder\": {\n        backgroundColor: \"#eee\",\n        border: \"1px solid #ddd\",\n        color: \"#888\",\n        borderRadius: \".2em\",\n        margin: \"0 1px\",\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    },\n    \".cm-foldGutter span\": {\n        padding: \"0 1px\",\n        cursor: \"pointer\"\n    }\n});\n\n/**\nA highlight style associates CSS styles with higlighting\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag).\n*/\nclass HighlightStyle {\n    constructor(\n    /**\n    The tag styles used to create this highlight style.\n    */\n    specs, options) {\n        this.specs = specs;\n        let modSpec;\n        function def(spec) {\n            let cls = StyleModule.newName();\n            (modSpec || (modSpec = Object.create(null)))[\".\" + cls] = spec;\n            return cls;\n        }\n        const all = typeof options.all == \"string\" ? options.all : options.all ? def(options.all) : undefined;\n        const scopeOpt = options.scope;\n        this.scope = scopeOpt instanceof Language ? (type) => type.prop(languageDataProp) == scopeOpt.data\n            : scopeOpt ? (type) => type == scopeOpt : undefined;\n        this.style = tagHighlighter(specs.map(style => ({\n            tag: style.tag,\n            class: style.class || def(Object.assign({}, style, { tag: null }))\n        })), {\n            all,\n        }).style;\n        this.module = modSpec ? new StyleModule(modSpec) : null;\n        this.themeType = options.themeType;\n    }\n    /**\n    Create a highlighter style that associates the given styles to\n    the given tags. The specs must be objects that hold a style tag\n    or array of tags in their `tag` property, and either a single\n    `class` property providing a static CSS class (for highlighter\n    that rely on external styling), or a\n    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style\n    set of CSS properties (which define the styling for those tags).\n    \n    The CSS rules created for a highlighter will be emitted in the\n    order of the spec's properties. That means that for elements that\n    have multiple tags associated with them, styles defined further\n    down in the list will have a higher CSS precedence than styles\n    defined earlier.\n    */\n    static define(specs, options) {\n        return new HighlightStyle(specs, options || {});\n    }\n}\nconst highlighterFacet = /*@__PURE__*/Facet.define();\nconst fallbackHighlighter = /*@__PURE__*/Facet.define({\n    combine(values) { return values.length ? [values[0]] : null; }\n});\nfunction getHighlighters(state) {\n    let main = state.facet(highlighterFacet);\n    return main.length ? main : state.facet(fallbackHighlighter);\n}\n/**\nWrap a highlighter in an editor extension that uses it to apply\nsyntax highlighting to the editor content.\n\nWhen multiple (non-fallback) styles are provided, the styling\napplied is the union of the classes they emit.\n*/\nfunction syntaxHighlighting(highlighter, options) {\n    let ext = [treeHighlighter], themeType;\n    if (highlighter instanceof HighlightStyle) {\n        if (highlighter.module)\n            ext.push(EditorView.styleModule.of(highlighter.module));\n        themeType = highlighter.themeType;\n    }\n    if (options === null || options === void 0 ? void 0 : options.fallback)\n        ext.push(fallbackHighlighter.of(highlighter));\n    else if (themeType)\n        ext.push(highlighterFacet.computeN([EditorView.darkTheme], state => {\n            return state.facet(EditorView.darkTheme) == (themeType == \"dark\") ? [highlighter] : [];\n        }));\n    else\n        ext.push(highlighterFacet.of(highlighter));\n    return ext;\n}\n/**\nReturns the CSS classes (if any) that the highlighters active in\nthe state would assign to the given style\n[tags](https://lezer.codemirror.net/docs/ref#highlight.Tag) and\n(optional) language\n[scope](https://codemirror.net/6/docs/ref/#language.HighlightStyle^define^options.scope).\n*/\nfunction highlightingFor(state, tags, scope) {\n    let highlighters = getHighlighters(state);\n    let result = null;\n    if (highlighters)\n        for (let highlighter of highlighters) {\n            if (!highlighter.scope || scope && highlighter.scope(scope)) {\n                let cls = highlighter.style(tags);\n                if (cls)\n                    result = result ? result + \" \" + cls : cls;\n            }\n        }\n    return result;\n}\nclass TreeHighlighter {\n    constructor(view) {\n        this.markCache = Object.create(null);\n        this.tree = syntaxTree(view.state);\n        this.decorations = this.buildDeco(view, getHighlighters(view.state));\n    }\n    update(update) {\n        let tree = syntaxTree(update.state), highlighters = getHighlighters(update.state);\n        let styleChange = highlighters != getHighlighters(update.startState);\n        if (tree.length < update.view.viewport.to && !styleChange && tree.type == this.tree.type) {\n            this.decorations = this.decorations.map(update.changes);\n        }\n        else if (tree != this.tree || update.viewportChanged || styleChange) {\n            this.tree = tree;\n            this.decorations = this.buildDeco(update.view, highlighters);\n        }\n    }\n    buildDeco(view, highlighters) {\n        if (!highlighters || !this.tree.length)\n            return Decoration.none;\n        let builder = new RangeSetBuilder();\n        for (let { from, to } of view.visibleRanges) {\n            highlightTree(this.tree, highlighters, (from, to, style) => {\n                builder.add(from, to, this.markCache[style] || (this.markCache[style] = Decoration.mark({ class: style })));\n            }, from, to);\n        }\n        return builder.finish();\n    }\n}\nconst treeHighlighter = /*@__PURE__*/Prec.high(/*@__PURE__*/ViewPlugin.fromClass(TreeHighlighter, {\n    decorations: v => v.decorations\n}));\n/**\nA default highlight style (works well with light themes).\n*/\nconst defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([\n    { tag: tags.meta,\n        color: \"#404740\" },\n    { tag: tags.link,\n        textDecoration: \"underline\" },\n    { tag: tags.heading,\n        textDecoration: \"underline\",\n        fontWeight: \"bold\" },\n    { tag: tags.emphasis,\n        fontStyle: \"italic\" },\n    { tag: tags.strong,\n        fontWeight: \"bold\" },\n    { tag: tags.strikethrough,\n        textDecoration: \"line-through\" },\n    { tag: tags.keyword,\n        color: \"#708\" },\n    { tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],\n        color: \"#219\" },\n    { tag: [tags.literal, tags.inserted],\n        color: \"#164\" },\n    { tag: [tags.string, tags.deleted],\n        color: \"#a11\" },\n    { tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],\n        color: \"#e40\" },\n    { tag: /*@__PURE__*/tags.definition(tags.variableName),\n        color: \"#00f\" },\n    { tag: /*@__PURE__*/tags.local(tags.variableName),\n        color: \"#30a\" },\n    { tag: [tags.typeName, tags.namespace],\n        color: \"#085\" },\n    { tag: tags.className,\n        color: \"#167\" },\n    { tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],\n        color: \"#256\" },\n    { tag: /*@__PURE__*/tags.definition(tags.propertyName),\n        color: \"#00c\" },\n    { tag: tags.comment,\n        color: \"#940\" },\n    { tag: tags.invalid,\n        color: \"#f00\" }\n]);\n\nconst baseTheme = /*@__PURE__*/EditorView.baseTheme({\n    \"&.cm-focused .cm-matchingBracket\": { backgroundColor: \"#328c8252\" },\n    \"&.cm-focused .cm-nonmatchingBracket\": { backgroundColor: \"#bb555544\" }\n});\nconst DefaultScanDist = 10000, DefaultBrackets = \"()[]{}\";\nconst bracketMatchingConfig = /*@__PURE__*/Facet.define({\n    combine(configs) {\n        return combineConfig(configs, {\n            afterCursor: true,\n            brackets: DefaultBrackets,\n            maxScanDistance: DefaultScanDist,\n            renderMatch: defaultRenderMatch\n        });\n    }\n});\nconst matchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-matchingBracket\" }), nonmatchingMark = /*@__PURE__*/Decoration.mark({ class: \"cm-nonmatchingBracket\" });\nfunction defaultRenderMatch(match) {\n    let decorations = [];\n    let mark = match.matched ? matchingMark : nonmatchingMark;\n    decorations.push(mark.range(match.start.from, match.start.to));\n    if (match.end)\n        decorations.push(mark.range(match.end.from, match.end.to));\n    return decorations;\n}\nconst bracketMatchingState = /*@__PURE__*/StateField.define({\n    create() { return Decoration.none; },\n    update(deco, tr) {\n        if (!tr.docChanged && !tr.selection)\n            return deco;\n        let decorations = [];\n        let config = tr.state.facet(bracketMatchingConfig);\n        for (let range of tr.state.selection.ranges) {\n            if (!range.empty)\n                continue;\n            let match = matchBrackets(tr.state, range.head, -1, config)\n                || (range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config))\n                || (config.afterCursor &&\n                    (matchBrackets(tr.state, range.head, 1, config) ||\n                        (range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config))));\n            if (match)\n                decorations = decorations.concat(config.renderMatch(match, tr.state));\n        }\n        return Decoration.set(decorations, true);\n    },\n    provide: f => EditorView.decorations.from(f)\n});\nconst bracketMatchingUnique = [\n    bracketMatchingState,\n    baseTheme\n];\n/**\nCreate an extension that enables bracket matching. Whenever the\ncursor is next to a bracket, that bracket and the one it matches\nare highlighted. Or, when no matching bracket is found, another\nhighlighting style is used to indicate this.\n*/\nfunction bracketMatching(config = {}) {\n    return [bracketMatchingConfig.of(config), bracketMatchingUnique];\n}\n/**\nWhen larger syntax nodes, such as HTML tags, are marked as\nopening/closing, it can be a bit messy to treat the whole node as\na matchable bracket. This node prop allows you to define, for such\na node, a ‘handle’—the part of the node that is highlighted, and\nthat the cursor must be on to activate highlighting in the first\nplace.\n*/\nconst bracketMatchingHandle = /*@__PURE__*/new NodeProp();\nfunction matchingNodes(node, dir, brackets) {\n    let byProp = node.prop(dir < 0 ? NodeProp.openedBy : NodeProp.closedBy);\n    if (byProp)\n        return byProp;\n    if (node.name.length == 1) {\n        let index = brackets.indexOf(node.name);\n        if (index > -1 && index % 2 == (dir < 0 ? 1 : 0))\n            return [brackets[index + dir]];\n    }\n    return null;\n}\nfunction findHandle(node) {\n    let hasHandle = node.type.prop(bracketMatchingHandle);\n    return hasHandle ? hasHandle(node.node) : node;\n}\n/**\nFind the matching bracket for the token at `pos`, scanning\ndirection `dir`. Only the `brackets` and `maxScanDistance`\nproperties are used from `config`, if given. Returns null if no\nbracket was found at `pos`, or a match result otherwise.\n*/\nfunction matchBrackets(state, pos, dir, config = {}) {\n    let maxScanDistance = config.maxScanDistance || DefaultScanDist, brackets = config.brackets || DefaultBrackets;\n    let tree = syntaxTree(state), node = tree.resolveInner(pos, dir);\n    for (let cur = node; cur; cur = cur.parent) {\n        let matches = matchingNodes(cur.type, dir, brackets);\n        if (matches && cur.from < cur.to) {\n            let handle = findHandle(cur);\n            if (handle && (dir > 0 ? pos >= handle.from && pos < handle.to : pos > handle.from && pos <= handle.to))\n                return matchMarkedBrackets(state, pos, dir, cur, handle, matches, brackets);\n        }\n    }\n    return matchPlainBrackets(state, pos, dir, tree, node.type, maxScanDistance, brackets);\n}\nfunction matchMarkedBrackets(_state, _pos, dir, token, handle, matching, brackets) {\n    let parent = token.parent, firstToken = { from: handle.from, to: handle.to };\n    let depth = 0, cursor = parent === null || parent === void 0 ? void 0 : parent.cursor();\n    if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to)))\n        do {\n            if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {\n                if (depth == 0 && matching.indexOf(cursor.type.name) > -1 && cursor.from < cursor.to) {\n                    let endHandle = findHandle(cursor);\n                    return { start: firstToken, end: endHandle ? { from: endHandle.from, to: endHandle.to } : undefined, matched: true };\n                }\n                else if (matchingNodes(cursor.type, dir, brackets)) {\n                    depth++;\n                }\n                else if (matchingNodes(cursor.type, -dir, brackets)) {\n                    if (depth == 0) {\n                        let endHandle = findHandle(cursor);\n                        return {\n                            start: firstToken,\n                            end: endHandle && endHandle.from < endHandle.to ? { from: endHandle.from, to: endHandle.to } : undefined,\n                            matched: false\n                        };\n                    }\n                    depth--;\n                }\n            }\n        } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());\n    return { start: firstToken, matched: false };\n}\nfunction matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {\n    let startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);\n    let bracket = brackets.indexOf(startCh);\n    if (bracket < 0 || (bracket % 2 == 0) != (dir > 0))\n        return null;\n    let startToken = { from: dir < 0 ? pos - 1 : pos, to: dir > 0 ? pos + 1 : pos };\n    let iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0), depth = 0;\n    for (let distance = 0; !(iter.next()).done && distance <= maxScanDistance;) {\n        let text = iter.value;\n        if (dir < 0)\n            distance += text.length;\n        let basePos = pos + distance * dir;\n        for (let pos = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; pos != end; pos += dir) {\n            let found = brackets.indexOf(text[pos]);\n            if (found < 0 || tree.resolveInner(basePos + pos, 1).type != tokenType)\n                continue;\n            if ((found % 2 == 0) == (dir > 0)) {\n                depth++;\n            }\n            else if (depth == 1) { // Closing\n                return { start: startToken, end: { from: basePos + pos, to: basePos + pos + 1 }, matched: (found >> 1) == (bracket >> 1) };\n            }\n            else {\n                depth--;\n            }\n        }\n        if (dir > 0)\n            distance += text.length;\n    }\n    return iter.done ? { start: startToken, matched: false } : null;\n}\n\n// Counts the column offset in a string, taking tabs into account.\n// Used mostly to find indentation.\nfunction countCol(string, end, tabSize, startIndex = 0, startValue = 0) {\n    if (end == null) {\n        end = string.search(/[^\\s\\u00a0]/);\n        if (end == -1)\n            end = string.length;\n    }\n    let n = startValue;\n    for (let i = startIndex; i < end; i++) {\n        if (string.charCodeAt(i) == 9)\n            n += tabSize - (n % tabSize);\n        else\n            n++;\n    }\n    return n;\n}\n/**\nEncapsulates a single line of input. Given to stream syntax code,\nwhich uses it to tokenize the content.\n*/\nclass StringStream {\n    /**\n    Create a stream.\n    */\n    constructor(\n    /**\n    The line.\n    */\n    string, tabSize, \n    /**\n    The current indent unit size.\n    */\n    indentUnit, overrideIndent) {\n        this.string = string;\n        this.tabSize = tabSize;\n        this.indentUnit = indentUnit;\n        this.overrideIndent = overrideIndent;\n        /**\n        The current position on the line.\n        */\n        this.pos = 0;\n        /**\n        The start position of the current token.\n        */\n        this.start = 0;\n        this.lastColumnPos = 0;\n        this.lastColumnValue = 0;\n    }\n    /**\n    True if we are at the end of the line.\n    */\n    eol() { return this.pos >= this.string.length; }\n    /**\n    True if we are at the start of the line.\n    */\n    sol() { return this.pos == 0; }\n    /**\n    Get the next code unit after the current position, or undefined\n    if we're at the end of the line.\n    */\n    peek() { return this.string.charAt(this.pos) || undefined; }\n    /**\n    Read the next code unit and advance `this.pos`.\n    */\n    next() {\n        if (this.pos < this.string.length)\n            return this.string.charAt(this.pos++);\n    }\n    /**\n    Match the next character against the given string, regular\n    expression, or predicate. Consume and return it if it matches.\n    */\n    eat(match) {\n        let ch = this.string.charAt(this.pos);\n        let ok;\n        if (typeof match == \"string\")\n            ok = ch == match;\n        else\n            ok = ch && (match instanceof RegExp ? match.test(ch) : match(ch));\n        if (ok) {\n            ++this.pos;\n            return ch;\n        }\n    }\n    /**\n    Continue matching characters that match the given string,\n    regular expression, or predicate function. Return true if any\n    characters were consumed.\n    */\n    eatWhile(match) {\n        let start = this.pos;\n        while (this.eat(match)) { }\n        return this.pos > start;\n    }\n    /**\n    Consume whitespace ahead of `this.pos`. Return true if any was\n    found.\n    */\n    eatSpace() {\n        let start = this.pos;\n        while (/[\\s\\u00a0]/.test(this.string.charAt(this.pos)))\n            ++this.pos;\n        return this.pos > start;\n    }\n    /**\n    Move to the end of the line.\n    */\n    skipToEnd() { this.pos = this.string.length; }\n    /**\n    Move to directly before the given character, if found on the\n    current line.\n    */\n    skipTo(ch) {\n        let found = this.string.indexOf(ch, this.pos);\n        if (found > -1) {\n            this.pos = found;\n            return true;\n        }\n    }\n    /**\n    Move back `n` characters.\n    */\n    backUp(n) { this.pos -= n; }\n    /**\n    Get the column position at `this.pos`.\n    */\n    column() {\n        if (this.lastColumnPos < this.start) {\n            this.lastColumnValue = countCol(this.string, this.start, this.tabSize, this.lastColumnPos, this.lastColumnValue);\n            this.lastColumnPos = this.start;\n        }\n        return this.lastColumnValue;\n    }\n    /**\n    Get the indentation column of the current line.\n    */\n    indentation() {\n        var _a;\n        return (_a = this.overrideIndent) !== null && _a !== void 0 ? _a : countCol(this.string, null, this.tabSize);\n    }\n    /**\n    Match the input against the given string or regular expression\n    (which should start with a `^`). Return true or the regexp match\n    if it matches.\n    \n    Unless `consume` is set to `false`, this will move `this.pos`\n    past the matched text.\n    \n    When matching a string `caseInsensitive` can be set to true to\n    make the match case-insensitive.\n    */\n    match(pattern, consume, caseInsensitive) {\n        if (typeof pattern == \"string\") {\n            let cased = (str) => caseInsensitive ? str.toLowerCase() : str;\n            let substr = this.string.substr(this.pos, pattern.length);\n            if (cased(substr) == cased(pattern)) {\n                if (consume !== false)\n                    this.pos += pattern.length;\n                return true;\n            }\n            else\n                return null;\n        }\n        else {\n            let match = this.string.slice(this.pos).match(pattern);\n            if (match && match.index > 0)\n                return null;\n            if (match && consume !== false)\n                this.pos += match[0].length;\n            return match;\n        }\n    }\n    /**\n    Get the current token.\n    */\n    current() { return this.string.slice(this.start, this.pos); }\n}\n\nfunction fullParser(spec) {\n    return {\n        name: spec.name || \"\",\n        token: spec.token,\n        blankLine: spec.blankLine || (() => { }),\n        startState: spec.startState || (() => true),\n        copyState: spec.copyState || defaultCopyState,\n        indent: spec.indent || (() => null),\n        languageData: spec.languageData || {},\n        tokenTable: spec.tokenTable || noTokens\n    };\n}\nfunction defaultCopyState(state) {\n    if (typeof state != \"object\")\n        return state;\n    let newState = {};\n    for (let prop in state) {\n        let val = state[prop];\n        newState[prop] = (val instanceof Array ? val.slice() : val);\n    }\n    return newState;\n}\nconst IndentedFrom = /*@__PURE__*/new WeakMap();\n/**\nA [language](https://codemirror.net/6/docs/ref/#language.Language) class based on a CodeMirror\n5-style [streaming parser](https://codemirror.net/6/docs/ref/#language.StreamParser).\n*/\nclass StreamLanguage extends Language {\n    constructor(parser) {\n        let data = defineLanguageFacet(parser.languageData);\n        let p = fullParser(parser), self;\n        let impl = new class extends Parser {\n            createParse(input, fragments, ranges) {\n                return new Parse(self, input, fragments, ranges);\n            }\n        };\n        super(data, impl, [indentService.of((cx, pos) => this.getIndent(cx, pos))], parser.name);\n        this.topNode = docID(data);\n        self = this;\n        this.streamParser = p;\n        this.stateAfter = new NodeProp({ perNode: true });\n        this.tokenTable = parser.tokenTable ? new TokenTable(p.tokenTable) : defaultTokenTable;\n    }\n    /**\n    Define a stream language.\n    */\n    static define(spec) { return new StreamLanguage(spec); }\n    getIndent(cx, pos) {\n        let tree = syntaxTree(cx.state), at = tree.resolve(pos);\n        while (at && at.type != this.topNode)\n            at = at.parent;\n        if (!at)\n            return null;\n        let from = undefined;\n        let { overrideIndentation } = cx.options;\n        if (overrideIndentation) {\n            from = IndentedFrom.get(cx.state);\n            if (from != null && from < pos - 1e4)\n                from = undefined;\n        }\n        let start = findState(this, tree, 0, at.from, from !== null && from !== void 0 ? from : pos), statePos, state;\n        if (start) {\n            state = start.state;\n            statePos = start.pos + 1;\n        }\n        else {\n            state = this.streamParser.startState(cx.unit);\n            statePos = 0;\n        }\n        if (pos - statePos > 10000 /* C.MaxIndentScanDist */)\n            return null;\n        while (statePos < pos) {\n            let line = cx.state.doc.lineAt(statePos), end = Math.min(pos, line.to);\n            if (line.length) {\n                let indentation = overrideIndentation ? overrideIndentation(line.from) : -1;\n                let stream = new StringStream(line.text, cx.state.tabSize, cx.unit, indentation < 0 ? undefined : indentation);\n                while (stream.pos < end - line.from)\n                    readToken(this.streamParser.token, stream, state);\n            }\n            else {\n                this.streamParser.blankLine(state, cx.unit);\n            }\n            if (end == pos)\n                break;\n            statePos = line.to + 1;\n        }\n        let line = cx.lineAt(pos);\n        if (overrideIndentation && from == null)\n            IndentedFrom.set(cx.state, line.from);\n        return this.streamParser.indent(state, /^\\s*(.*)/.exec(line.text)[1], cx);\n    }\n    get allowsNesting() { return false; }\n}\nfunction findState(lang, tree, off, startPos, before) {\n    let state = off >= startPos && off + tree.length <= before && tree.prop(lang.stateAfter);\n    if (state)\n        return { state: lang.streamParser.copyState(state), pos: off + tree.length };\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let child = tree.children[i], pos = off + tree.positions[i];\n        let found = child instanceof Tree && pos < before && findState(lang, child, pos, startPos, before);\n        if (found)\n            return found;\n    }\n    return null;\n}\nfunction cutTree(lang, tree, from, to, inside) {\n    if (inside && from <= 0 && to >= tree.length)\n        return tree;\n    if (!inside && tree.type == lang.topNode)\n        inside = true;\n    for (let i = tree.children.length - 1; i >= 0; i--) {\n        let pos = tree.positions[i], child = tree.children[i], inner;\n        if (pos < to && child instanceof Tree) {\n            if (!(inner = cutTree(lang, child, from - pos, to - pos, inside)))\n                break;\n            return !inside ? inner\n                : new Tree(tree.type, tree.children.slice(0, i).concat(inner), tree.positions.slice(0, i + 1), pos + inner.length);\n        }\n    }\n    return null;\n}\nfunction findStartInFragments(lang, fragments, startPos, editorState) {\n    for (let f of fragments) {\n        let from = f.from + (f.openStart ? 25 : 0), to = f.to - (f.openEnd ? 25 : 0);\n        let found = from <= startPos && to > startPos && findState(lang, f.tree, 0 - f.offset, startPos, to), tree;\n        if (found && (tree = cutTree(lang, f.tree, startPos + f.offset, found.pos + f.offset, false)))\n            return { state: found.state, tree };\n    }\n    return { state: lang.streamParser.startState(editorState ? getIndentUnit(editorState) : 4), tree: Tree.empty };\n}\nclass Parse {\n    constructor(lang, input, fragments, ranges) {\n        this.lang = lang;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.stoppedAt = null;\n        this.chunks = [];\n        this.chunkPos = [];\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.rangeIndex = 0;\n        this.to = ranges[ranges.length - 1].to;\n        let context = ParseContext.get(), from = ranges[0].from;\n        let { state, tree } = findStartInFragments(lang, fragments, from, context === null || context === void 0 ? void 0 : context.state);\n        this.state = state;\n        this.parsedPos = this.chunkStart = from + tree.length;\n        for (let i = 0; i < tree.children.length; i++) {\n            this.chunks.push(tree.children[i]);\n            this.chunkPos.push(tree.positions[i]);\n        }\n        if (context && this.parsedPos < context.viewport.from - 100000 /* C.MaxDistanceBeforeViewport */) {\n            this.state = this.lang.streamParser.startState(getIndentUnit(context.state));\n            context.skipUntilInView(this.parsedPos, context.viewport.from);\n            this.parsedPos = context.viewport.from;\n        }\n        this.moveRangeIndex();\n    }\n    advance() {\n        let context = ParseContext.get();\n        let parseEnd = this.stoppedAt == null ? this.to : Math.min(this.to, this.stoppedAt);\n        let end = Math.min(parseEnd, this.chunkStart + 2048 /* C.ChunkSize */);\n        if (context)\n            end = Math.min(end, context.viewport.to);\n        while (this.parsedPos < end)\n            this.parseLine(context);\n        if (this.chunkStart < this.parsedPos)\n            this.finishChunk();\n        if (this.parsedPos >= parseEnd)\n            return this.finish();\n        if (context && this.parsedPos >= context.viewport.to) {\n            context.skipUntilInView(this.parsedPos, parseEnd);\n            return this.finish();\n        }\n        return null;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n    }\n    lineAfter(pos) {\n        let chunk = this.input.chunk(pos);\n        if (!this.input.lineChunks) {\n            let eol = chunk.indexOf(\"\\n\");\n            if (eol > -1)\n                chunk = chunk.slice(0, eol);\n        }\n        else if (chunk == \"\\n\") {\n            chunk = \"\";\n        }\n        return pos + chunk.length <= this.to ? chunk : chunk.slice(0, this.to - pos);\n    }\n    nextLine() {\n        let from = this.parsedPos, line = this.lineAfter(from), end = from + line.length;\n        for (let index = this.rangeIndex;;) {\n            let rangeEnd = this.ranges[index].to;\n            if (rangeEnd >= end)\n                break;\n            line = line.slice(0, rangeEnd - (end - line.length));\n            index++;\n            if (index == this.ranges.length)\n                break;\n            let rangeStart = this.ranges[index].from;\n            let after = this.lineAfter(rangeStart);\n            line += after;\n            end = rangeStart + after.length;\n        }\n        return { line, end };\n    }\n    skipGapsTo(pos, offset, side) {\n        for (;;) {\n            let end = this.ranges[this.rangeIndex].to, offPos = pos + offset;\n            if (side > 0 ? end > offPos : end >= offPos)\n                break;\n            let start = this.ranges[++this.rangeIndex].from;\n            offset += start - end;\n        }\n        return offset;\n    }\n    moveRangeIndex() {\n        while (this.ranges[this.rangeIndex].to < this.parsedPos)\n            this.rangeIndex++;\n    }\n    emitToken(id, from, to, size, offset) {\n        if (this.ranges.length > 1) {\n            offset = this.skipGapsTo(from, offset, 1);\n            from += offset;\n            let len0 = this.chunk.length;\n            offset = this.skipGapsTo(to, offset, -1);\n            to += offset;\n            size += this.chunk.length - len0;\n        }\n        this.chunk.push(id, from, to, size);\n        return offset;\n    }\n    parseLine(context) {\n        let { line, end } = this.nextLine(), offset = 0, { streamParser } = this.lang;\n        let stream = new StringStream(line, context ? context.state.tabSize : 4, context ? getIndentUnit(context.state) : 2);\n        if (stream.eol()) {\n            streamParser.blankLine(this.state, stream.indentUnit);\n        }\n        else {\n            while (!stream.eol()) {\n                let token = readToken(streamParser.token, stream, this.state);\n                if (token)\n                    offset = this.emitToken(this.lang.tokenTable.resolve(token), this.parsedPos + stream.start, this.parsedPos + stream.pos, 4, offset);\n                if (stream.start > 10000 /* C.MaxLineLength */)\n                    break;\n            }\n        }\n        this.parsedPos = end;\n        this.moveRangeIndex();\n        if (this.parsedPos < this.to)\n            this.parsedPos++;\n    }\n    finishChunk() {\n        let tree = Tree.build({\n            buffer: this.chunk,\n            start: this.chunkStart,\n            length: this.parsedPos - this.chunkStart,\n            nodeSet,\n            topID: 0,\n            maxBufferLength: 2048 /* C.ChunkSize */,\n            reused: this.chunkReused\n        });\n        tree = new Tree(tree.type, tree.children, tree.positions, tree.length, [[this.lang.stateAfter, this.lang.streamParser.copyState(this.state)]]);\n        this.chunks.push(tree);\n        this.chunkPos.push(this.chunkStart - this.ranges[0].from);\n        this.chunk = [];\n        this.chunkReused = undefined;\n        this.chunkStart = this.parsedPos;\n    }\n    finish() {\n        return new Tree(this.lang.topNode, this.chunks, this.chunkPos, this.parsedPos - this.ranges[0].from).balance();\n    }\n}\nfunction readToken(token, stream, state) {\n    stream.start = stream.pos;\n    for (let i = 0; i < 10; i++) {\n        let result = token(stream, state);\n        if (stream.pos > stream.start)\n            return result;\n    }\n    throw new Error(\"Stream parser failed to advance stream.\");\n}\nconst noTokens = /*@__PURE__*/Object.create(null);\nconst typeArray = [NodeType.none];\nconst nodeSet = /*@__PURE__*/new NodeSet(typeArray);\nconst warned = [];\n// Cache of node types by name and tags\nconst byTag = /*@__PURE__*/Object.create(null);\nconst defaultTable = /*@__PURE__*/Object.create(null);\nfor (let [legacyName, name] of [\n    [\"variable\", \"variableName\"],\n    [\"variable-2\", \"variableName.special\"],\n    [\"string-2\", \"string.special\"],\n    [\"def\", \"variableName.definition\"],\n    [\"tag\", \"tagName\"],\n    [\"attribute\", \"attributeName\"],\n    [\"type\", \"typeName\"],\n    [\"builtin\", \"variableName.standard\"],\n    [\"qualifier\", \"modifier\"],\n    [\"error\", \"invalid\"],\n    [\"header\", \"heading\"],\n    [\"property\", \"propertyName\"]\n])\n    defaultTable[legacyName] = /*@__PURE__*/createTokenType(noTokens, name);\nclass TokenTable {\n    constructor(extra) {\n        this.extra = extra;\n        this.table = Object.assign(Object.create(null), defaultTable);\n    }\n    resolve(tag) {\n        return !tag ? 0 : this.table[tag] || (this.table[tag] = createTokenType(this.extra, tag));\n    }\n}\nconst defaultTokenTable = /*@__PURE__*/new TokenTable(noTokens);\nfunction warnForPart(part, msg) {\n    if (warned.indexOf(part) > -1)\n        return;\n    warned.push(part);\n    console.warn(msg);\n}\nfunction createTokenType(extra, tagStr) {\n    let tags$1 = [];\n    for (let name of tagStr.split(\" \")) {\n        let found = [];\n        for (let part of name.split(\".\")) {\n            let value = (extra[part] || tags[part]);\n            if (!value) {\n                warnForPart(part, `Unknown highlighting tag ${part}`);\n            }\n            else if (typeof value == \"function\") {\n                if (!found.length)\n                    warnForPart(part, `Modifier ${part} used at start of tag`);\n                else\n                    found = found.map(value);\n            }\n            else {\n                if (found.length)\n                    warnForPart(part, `Tag ${part} used as modifier`);\n                else\n                    found = Array.isArray(value) ? value : [value];\n            }\n        }\n        for (let tag of found)\n            tags$1.push(tag);\n    }\n    if (!tags$1.length)\n        return 0;\n    let name = tagStr.replace(/ /g, \"_\"), key = name + \" \" + tags$1.map(t => t.id);\n    let known = byTag[key];\n    if (known)\n        return known.id;\n    let type = byTag[key] = NodeType.define({\n        id: typeArray.length,\n        name,\n        props: [styleTags({ [name]: tags$1 })]\n    });\n    typeArray.push(type);\n    return type.id;\n}\nfunction docID(data) {\n    let type = NodeType.define({ id: typeArray.length, name: \"Document\", props: [languageDataProp.add(() => data)], top: true });\n    typeArray.push(type);\n    return type;\n}\n\nfunction buildForLine(line) {\n    return line.length <= 4096 && /[\\u0590-\\u05f4\\u0600-\\u06ff\\u0700-\\u08ac\\ufb50-\\ufdff]/.test(line);\n}\nfunction textHasRTL(text) {\n    for (let i = text.iter(); !i.next().done;)\n        if (buildForLine(i.value))\n            return true;\n    return false;\n}\nfunction changeAddsRTL(change) {\n    let added = false;\n    change.iterChanges((fA, tA, fB, tB, ins) => {\n        if (!added && textHasRTL(ins))\n            added = true;\n    });\n    return added;\n}\nconst alwaysIsolate = /*@__PURE__*/Facet.define({ combine: values => values.some(x => x) });\n/**\nMake sure nodes\n[marked](https://lezer.codemirror.net/docs/ref/#common.NodeProp^isolate)\nas isolating for bidirectional text are rendered in a way that\nisolates them from the surrounding text.\n*/\nfunction bidiIsolates(options = {}) {\n    let extensions = [isolateMarks];\n    if (options.alwaysIsolate)\n        extensions.push(alwaysIsolate.of(true));\n    return extensions;\n}\nconst isolateMarks = /*@__PURE__*/ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.always = view.state.facet(alwaysIsolate) ||\n            view.textDirection != Direction.LTR ||\n            view.state.facet(EditorView.perLineTextDirection);\n        this.hasRTL = !this.always && textHasRTL(view.state.doc);\n        this.tree = syntaxTree(view.state);\n        this.decorations = buildDeco(view, this.tree, this.always);\n    }\n    update(update) {\n        let always = update.state.facet(alwaysIsolate) ||\n            update.view.textDirection != Direction.LTR ||\n            update.state.facet(EditorView.perLineTextDirection);\n        if (!always && !this.hasRTL && changeAddsRTL(update.changes))\n            this.hasRTL = true;\n        if (!always && !this.hasRTL)\n            return;\n        let tree = syntaxTree(update.state);\n        if (always != this.always || tree != this.tree || update.docChanged || update.viewportChanged) {\n            this.tree = tree;\n            this.always = always;\n            this.decorations = buildDeco(update.view, tree, always);\n        }\n    }\n}, {\n    provide: plugin => {\n        function access(view) {\n            var _a, _b;\n            return (_b = (_a = view.plugin(plugin)) === null || _a === void 0 ? void 0 : _a.decorations) !== null && _b !== void 0 ? _b : Decoration.none;\n        }\n        return [EditorView.outerDecorations.of(access),\n            Prec.lowest(EditorView.bidiIsolatedRanges.of(access))];\n    }\n});\nfunction buildDeco(view, tree, always) {\n    let deco = new RangeSetBuilder();\n    let ranges = view.visibleRanges;\n    if (!always)\n        ranges = clipRTLLines(ranges, view.state.doc);\n    for (let { from, to } of ranges) {\n        tree.iterate({\n            enter: node => {\n                let iso = node.type.prop(NodeProp.isolate);\n                if (iso)\n                    deco.add(node.from, node.to, marks[iso]);\n            },\n            from, to\n        });\n    }\n    return deco.finish();\n}\nfunction clipRTLLines(ranges, doc) {\n    let cur = doc.iter(), pos = 0, result = [], last = null;\n    for (let { from, to } of ranges) {\n        if (from != pos) {\n            if (pos < from)\n                cur.next(from - pos);\n            pos = from;\n        }\n        for (;;) {\n            let start = pos, end = pos + cur.value.length;\n            if (!cur.lineBreak && buildForLine(cur.value)) {\n                if (last && last.to > start - 10)\n                    last.to = Math.min(to, end);\n                else\n                    result.push(last = { from: start, to: Math.min(to, end) });\n            }\n            if (pos >= to)\n                break;\n            pos = end;\n            cur.next();\n        }\n    }\n    return result;\n}\nconst marks = {\n    rtl: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"rtl\" }, bidiIsolate: Direction.RTL }),\n    ltr: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"ltr\" }, bidiIsolate: Direction.LTR }),\n    auto: /*@__PURE__*/Decoration.mark({ class: \"cm-iso\", inclusive: true, attributes: { dir: \"auto\" }, bidiIsolate: null })\n};\n\nexport { DocInput, HighlightStyle, IndentContext, LRLanguage, Language, LanguageDescription, LanguageSupport, ParseContext, StreamLanguage, StringStream, TreeIndentContext, bidiIsolates, bracketMatching, bracketMatchingHandle, codeFolding, continuedIndent, defaultHighlightStyle, defineLanguageFacet, delimitedIndent, ensureSyntaxTree, flatIndent, foldAll, foldCode, foldEffect, foldGutter, foldInside, foldKeymap, foldNodeProp, foldService, foldState, foldable, foldedRanges, forceParsing, getIndentUnit, getIndentation, highlightingFor, indentNodeProp, indentOnInput, indentRange, indentService, indentString, indentUnit, language, languageDataProp, matchBrackets, sublanguageProp, syntaxHighlighting, syntaxParserRunning, syntaxTree, syntaxTreeAvailable, toggleFold, unfoldAll, unfoldCode, unfoldEffect };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}