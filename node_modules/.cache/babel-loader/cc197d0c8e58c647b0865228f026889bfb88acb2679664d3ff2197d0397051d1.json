{"ast":null,"code":"export const controllerMap = new WeakMap();\n/**\n * AnimateController can be used to provide default configuration options to all\n * `animate()` directives in a given component.\n *\n * It also provides control over all the `animate()` animations within a given\n * component, for example, `this.animateController.pause()` pauses all animations.\n */\nexport class AnimateController {\n  constructor(host, options) {\n    this.startPaused = false;\n    this.disabled = false;\n    /**\n     * Set of active `animate()` directives in the host component\n     */\n    this.clients = new Set();\n    this.pendingComplete = false;\n    this.host = host;\n    this.defaultOptions = options.defaultOptions || {};\n    this.startPaused = !!options.startPaused;\n    this.disabled = !!options.disabled;\n    this.onComplete = options.onComplete;\n    controllerMap.set(this.host, this);\n  }\n  async add(animate) {\n    this.clients.add(animate);\n    if (this.startPaused) {\n      var _animate$webAnimation;\n      (_animate$webAnimation = animate.webAnimation) === null || _animate$webAnimation === void 0 || _animate$webAnimation.pause();\n    }\n    this.pendingComplete = true;\n    await animate.finished;\n    if (this.pendingComplete && !this.isAnimating) {\n      var _this$onComplete;\n      this.pendingComplete = false;\n      (_this$onComplete = this.onComplete) === null || _this$onComplete === void 0 || _this$onComplete.call(this);\n    }\n  }\n  remove(animate) {\n    this.clients.delete(animate);\n  }\n  /**\n   * Pauses all animations running in the host component.\n   */\n  pause() {\n    this.clients.forEach(f => {\n      var _f$webAnimation;\n      return (_f$webAnimation = f.webAnimation) === null || _f$webAnimation === void 0 ? void 0 : _f$webAnimation.pause();\n    });\n  }\n  /**\n   * Plays all active animations in the host component.\n   */\n  play() {\n    this.clients.forEach(f => {\n      var _f$webAnimation2;\n      return (_f$webAnimation2 = f.webAnimation) === null || _f$webAnimation2 === void 0 ? void 0 : _f$webAnimation2.play();\n    });\n  }\n  cancel() {\n    this.clients.forEach(f => {\n      var _f$webAnimation3;\n      return (_f$webAnimation3 = f.webAnimation) === null || _f$webAnimation3 === void 0 ? void 0 : _f$webAnimation3.cancel();\n    });\n    this.clients.clear();\n  }\n  finish() {\n    this.clients.forEach(f => {\n      var _f$webAnimation4;\n      return (_f$webAnimation4 = f.webAnimation) === null || _f$webAnimation4 === void 0 ? void 0 : _f$webAnimation4.finish();\n    });\n    this.clients.clear();\n  }\n  /**\n   * Toggles the play/pause state of all active `animate()` animations in the host component.\n   */\n  togglePlay() {\n    if (this.isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n  /**\n   * Returns true if the host component has any active `animate()` animations.\n   */\n  get isAnimating() {\n    return this.clients.size > 0;\n  }\n  /**\n   * Returns true if the host component has any playing `animate()` animations.\n   */\n  get isPlaying() {\n    return Array.from(this.clients).some(a => {\n      var _a$webAnimation;\n      return ((_a$webAnimation = a.webAnimation) === null || _a$webAnimation === void 0 ? void 0 : _a$webAnimation.playState) === 'running';\n    });\n  }\n  async finished() {\n    await Promise.all(Array.from(this.clients).map(f => f.finished));\n  }\n}","map":{"version":3,"names":["controllerMap","WeakMap","AnimateController","constructor","host","options","startPaused","disabled","clients","Set","pendingComplete","defaultOptions","onComplete","set","add","animate","_animate$webAnimation","webAnimation","pause","finished","isAnimating","_this$onComplete","call","remove","delete","forEach","f","_f$webAnimation","play","_f$webAnimation2","cancel","_f$webAnimation3","clear","finish","_f$webAnimation4","togglePlay","isPlaying","size","Array","from","some","a","_a$webAnimation","playState","Promise","all","map"],"sources":["../src/animate-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {ReactiveControllerHost} from 'lit';\nimport {Animate, Options} from './animate.js';\n\nexport const controllerMap = new WeakMap<\n  ReactiveControllerHost,\n  AnimateController\n>();\n\n/**\n * AnimateController can be used to provide default configuration options to all\n * `animate()` directives in a given component.\n *\n * It also provides control over all the `animate()` animations within a given\n * component, for example, `this.animateController.pause()` pauses all animations.\n */\nexport class AnimateController {\n  host: ReactiveControllerHost;\n  defaultOptions: Options;\n  startPaused = false;\n  disabled = false;\n  onComplete?: () => void;\n\n  constructor(\n    host: ReactiveControllerHost,\n    options: {\n      defaultOptions?: Options;\n      startPaused?: boolean;\n      disabled?: boolean;\n      onComplete?: () => void;\n    }\n  ) {\n    this.host = host;\n    this.defaultOptions = options.defaultOptions || {};\n    this.startPaused = !!options.startPaused;\n    this.disabled = !!options.disabled;\n    this.onComplete = options.onComplete;\n    controllerMap.set(this.host, this);\n  }\n\n  /**\n   * Set of active `animate()` directives in the host component\n   */\n  clients = new Set<Animate>();\n\n  protected pendingComplete = false;\n\n  async add(animate: Animate) {\n    this.clients.add(animate);\n    if (this.startPaused) {\n      animate.webAnimation?.pause();\n    }\n    this.pendingComplete = true;\n    await animate.finished;\n    if (this.pendingComplete && !this.isAnimating) {\n      this.pendingComplete = false;\n      this.onComplete?.();\n    }\n  }\n\n  remove(animate: Animate) {\n    this.clients.delete(animate);\n  }\n\n  /**\n   * Pauses all animations running in the host component.\n   */\n  pause() {\n    this.clients.forEach((f) => f.webAnimation?.pause());\n  }\n\n  /**\n   * Plays all active animations in the host component.\n   */\n  play() {\n    this.clients.forEach((f) => f.webAnimation?.play());\n  }\n\n  cancel() {\n    this.clients.forEach((f) => f.webAnimation?.cancel());\n    this.clients.clear();\n  }\n\n  finish() {\n    this.clients.forEach((f) => f.webAnimation?.finish());\n    this.clients.clear();\n  }\n\n  /**\n   * Toggles the play/pause state of all active `animate()` animations in the host component.\n   */\n  togglePlay() {\n    if (this.isPlaying) {\n      this.pause();\n    } else {\n      this.play();\n    }\n  }\n\n  /**\n   * Returns true if the host component has any active `animate()` animations.\n   */\n  get isAnimating() {\n    return this.clients.size > 0;\n  }\n\n  /**\n   * Returns true if the host component has any playing `animate()` animations.\n   */\n  get isPlaying() {\n    return Array.from(this.clients).some(\n      (a) => a.webAnimation?.playState === 'running'\n    );\n  }\n\n  async finished() {\n    await Promise.all(Array.from(this.clients).map((f) => f.finished));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}