{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiAlertCircle = \"M13,13H11V7H13M13,17H11V15H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { generateFilter, isEmptyFilter } from \"../../../common/entity/entity_filter\";\nimport \"../../../components/ha-aliases-editor\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-switch\";\nimport { fetchCloudAlexaEntity } from \"../../../data/alexa\";\nimport { fetchCloudStatus, updateCloudGoogleEntityConfig } from \"../../../data/cloud\";\nimport { getExtendedEntityRegistryEntry, updateEntityRegistryEntry } from \"../../../data/entity_registry\";\nimport { fetchCloudGoogleEntity } from \"../../../data/google_assistant\";\nimport { exposeEntities, voiceAssistants } from \"../../../data/expose\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nexport let EntityVoiceSettings = _decorate([customElement(\"entity-voice-settings\")], function (_initialize, _SubscribeMixin) {\n  class EntityVoiceSettings extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: EntityVoiceSettings,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"entityId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"exposed\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"entry\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_cloudStatus\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_aliases\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_googleEntity\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_unsupported\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        if (!isComponentLoaded(this.hass, \"cloud\")) {\n          return;\n        }\n        if (changedProps.has(\"entityId\") && this.entityId) {\n          this._fetchEntities();\n        }\n        if (!this.hasUpdated) {\n          fetchCloudStatus(this.hass).then(status => {\n            this._cloudStatus = status;\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchEntities\",\n      value: async function _fetchEntities() {\n        try {\n          const googleEntity = await fetchCloudGoogleEntity(this.hass, this.entityId);\n          this._googleEntity = googleEntity;\n          this.requestUpdate(\"_googleEntity\");\n        } catch (err) {\n          if (err.code === \"not_supported\") {\n            this._unsupported[\"cloud.google_assistant\"] = true;\n            this.requestUpdate(\"_unsupported\");\n          }\n        }\n        try {\n          await fetchCloudAlexaEntity(this.hass, this.entityId);\n        } catch (err) {\n          if (err.code === \"not_supported\") {\n            this._unsupported[\"cloud.alexa\"] = true;\n            this.requestUpdate(\"_unsupported\");\n          }\n        }\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getEntityFilterFuncs\",\n      value() {\n        return memoizeOne((googleFilter, alexaFilter) => ({\n          google: generateFilter(googleFilter.include_domains, googleFilter.include_entities, googleFilter.exclude_domains, googleFilter.exclude_entities),\n          alexa: generateFilter(alexaFilter.include_domains, alexaFilter.include_entities, alexaFilter.exclude_domains, alexaFilter.exclude_entities)\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_cloudStatus, _this$_cloudStatus2, _this$_aliases;\n        const googleEnabled = ((_this$_cloudStatus = this._cloudStatus) === null || _this$_cloudStatus === void 0 ? void 0 : _this$_cloudStatus.logged_in) === true && this._cloudStatus.prefs.google_enabled === true;\n        const alexaEnabled = ((_this$_cloudStatus2 = this._cloudStatus) === null || _this$_cloudStatus2 === void 0 ? void 0 : _this$_cloudStatus2.logged_in) === true && this._cloudStatus.prefs.alexa_enabled === true;\n        const showAssistants = [...Object.keys(voiceAssistants)];\n        const uiAssistants = [...showAssistants];\n        const alexaManual = alexaEnabled && !isEmptyFilter(this._cloudStatus.alexa_entities);\n        const googleManual = googleEnabled && !isEmptyFilter(this._cloudStatus.google_entities);\n        if (!googleEnabled) {\n          showAssistants.splice(showAssistants.indexOf(\"cloud.google_assistant\"), 1);\n          uiAssistants.splice(showAssistants.indexOf(\"cloud.google_assistant\"), 1);\n        } else if (googleManual) {\n          uiAssistants.splice(uiAssistants.indexOf(\"cloud.google_assistant\"), 1);\n        }\n        if (!alexaEnabled) {\n          showAssistants.splice(showAssistants.indexOf(\"cloud.alexa\"), 1);\n          uiAssistants.splice(uiAssistants.indexOf(\"cloud.alexa\"), 1);\n        } else if (alexaManual) {\n          uiAssistants.splice(uiAssistants.indexOf(\"cloud.alexa\"), 1);\n        }\n        const uiExposed = uiAssistants.some(key => this.exposed[key]);\n        let manFilterFuncs;\n        if (alexaManual || googleManual) {\n          manFilterFuncs = this._getEntityFilterFuncs(this._cloudStatus.google_entities, this._cloudStatus.alexa_entities);\n        }\n        const manExposedAlexa = alexaManual && manFilterFuncs.alexa(this.entityId);\n        const manExposedGoogle = googleManual && manFilterFuncs.google(this.entityId);\n        const anyExposed = uiExposed || manExposedAlexa || manExposedGoogle;\n        return html`\n      <ha-settings-row>\n        <h3 slot=\"heading\">\n          ${this.hass.localize(\"ui.dialogs.voice-settings.expose_header\")}\n        </h3>\n        <ha-switch\n          @change=${this._toggleAll}\n          .assistants=${uiAssistants}\n          .checked=${anyExposed}\n        ></ha-switch>\n      </ha-settings-row>\n      ${anyExposed ? showAssistants.map(key => {\n          var _this$_googleEntity, _this$hass$themes;\n          const supported = !this._unsupported[key];\n          const exposed = alexaManual && key === \"cloud.alexa\" ? manExposedAlexa : googleManual && key === \"cloud.google_assistant\" ? manExposedGoogle : this.exposed[key];\n          const manualConfig = alexaManual && key === \"cloud.alexa\" || googleManual && key === \"cloud.google_assistant\";\n          const support2fa = key === \"cloud.google_assistant\" && !googleManual && supported && ((_this$_googleEntity = this._googleEntity) === null || _this$_googleEntity === void 0 ? void 0 : _this$_googleEntity.might_2fa);\n          return html`\n              <ha-settings-row .threeLine=${!supported && manualConfig}>\n                <img\n                  alt=\"\"\n                  src=${brandsUrl({\n            domain: voiceAssistants[key].domain,\n            type: \"icon\",\n            darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n          })}\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  slot=\"prefix\"\n                />\n                <span slot=\"heading\">${voiceAssistants[key].name}</span>\n                ${!supported ? html`<div slot=\"description\" class=\"unsupported\">\n                      <ha-svg-icon .path=${mdiAlertCircle}></ha-svg-icon>\n                      ${this.hass.localize(\"ui.dialogs.voice-settings.unsupported\")}\n                    </div>` : nothing}\n                ${manualConfig ? html`\n                      <div slot=\"description\">\n                        ${this.hass.localize(\"ui.dialogs.voice-settings.manual_config\")}\n                      </div>\n                    ` : nothing}\n                ${support2fa ? html`\n                      <ha-formfield\n                        slot=\"description\"\n                        .label=${this.hass.localize(\"ui.dialogs.voice-settings.ask_pin\")}\n                      >\n                        <ha-checkbox\n                          .checked=${!this._googleEntity.disable_2fa}\n                          @change=${this._2faChanged}\n                        ></ha-checkbox>\n                      </ha-formfield>\n                    ` : nothing}\n                <ha-switch\n                  .assistant=${key}\n                  @change=${this._toggleAssistant}\n                  .disabled=${manualConfig || !exposed && !supported}\n                  .checked=${exposed}\n                ></ha-switch>\n              </ha-settings-row>\n            `;\n        }) : nothing}\n\n      <h3 class=\"header\">\n        ${this.hass.localize(\"ui.dialogs.voice-settings.aliases_header\")}\n      </h3>\n\n      <p class=\"description\">\n        ${this.hass.localize(\"ui.dialogs.voice-settings.aliases_description\")}\n      </p>\n\n      ${!this.entry ? html`<ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\"ui.dialogs.voice-settings.aliases_no_unique_id\", {\n          faq_link: html`<a\n                  href=${documentationUrl(this.hass, \"/faq/unique_id\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this.hass.localize(\"ui.dialogs.entity_registry.faq\")}</a\n                >`\n        })}\n          </ha-alert>` : html`<ha-aliases-editor\n            .hass=${this.hass}\n            .aliases=${(_this$_aliases = this._aliases) !== null && _this$_aliases !== void 0 ? _this$_aliases : this.entry.aliases}\n            @value-changed=${this._aliasesChanged}\n            @blur=${this._saveAliases}\n          ></ha-aliases-editor>`}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_aliasesChanged\",\n      value: function _aliasesChanged(ev) {\n        this._aliases = ev.detail.value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_2faChanged\",\n      value: async function _2faChanged(ev) {\n        try {\n          await updateCloudGoogleEntityConfig(this.hass, this.entityId, !ev.target.checked);\n        } catch (_err) {\n          ev.target.checked = !ev.target.checked;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_saveAliases\",\n      value: async function _saveAliases() {\n        if (!this._aliases) {\n          return;\n        }\n        const result = await updateEntityRegistryEntry(this.hass, this.entityId, {\n          aliases: this._aliases.map(alias => alias.trim()).filter(alias => alias)\n        });\n        fireEvent(this, \"entity-entry-updated\", result.entity_entry);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleAssistant\",\n      value: async function _toggleAssistant(ev) {\n        exposeEntities(this.hass, [ev.target.assistant], [this.entityId], ev.target.checked);\n        if (this.entry) {\n          const entry = await getExtendedEntityRegistryEntry(this.hass, this.entityId);\n          fireEvent(this, \"entity-entry-updated\", entry);\n        }\n        fireEvent(this, \"exposed-entities-changed\");\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleAll\",\n      value: async function _toggleAll(ev) {\n        const expose = ev.target.checked;\n        const assistants = expose ? ev.target.assistants.filter(key => !this._unsupported[key]) : ev.target.assistants;\n        exposeEntities(this.hass, assistants, [this.entityId], ev.target.checked);\n        if (this.entry) {\n          const entry = await getExtendedEntityRegistryEntry(this.hass, this.entityId);\n          fireEvent(this, \"entity-entry-updated\", entry);\n        }\n        fireEvent(this, \"exposed-entities-changed\");\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        :host {\n          display: block;\n          margin: 32px;\n          margin-top: 0;\n          --settings-row-prefix-display: contents;\n          --settings-row-content-display: contents;\n        }\n        ha-settings-row {\n          padding: 0;\n        }\n        img {\n          height: 32px;\n          width: 32px;\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n        }\n        ha-aliases-editor {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-top: 16px;\n        }\n        ha-formfield {\n          margin-left: -8px;\n          margin-inline-start: -8px;\n          margin-inline-end: initial;\n        }\n        ha-checkbox {\n          --mdc-checkbox-state-layer-size: 40px;\n        }\n        .unsupported {\n          display: flex;\n          align-items: center;\n        }\n        .unsupported ha-svg-icon {\n          color: var(--error-color);\n          --mdc-icon-size: 16px;\n          margin-right: 4px;\n          margin-inline-end: 4px;\n          margin-inline-start: initial;\n        }\n        .header {\n          margin-top: 8px;\n          margin-bottom: 4px;\n        }\n        .description {\n          color: var(--secondary-text-color);\n          font-size: 14px;\n          line-height: 20px;\n          margin-top: 0;\n          margin-bottom: 16px;\n        }\n      `];\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","memoizeOne","isComponentLoaded","fireEvent","generateFilter","isEmptyFilter","fetchCloudAlexaEntity","fetchCloudStatus","updateCloudGoogleEntityConfig","getExtendedEntityRegistryEntry","updateEntityRegistryEntry","fetchCloudGoogleEntity","exposeEntities","voiceAssistants","SubscribeMixin","haStyle","brandsUrl","documentationUrl","EntityVoiceSettings","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","willUpdate","changedProps","hass","has","entityId","_fetchEntities","hasUpdated","then","status","_cloudStatus","googleEntity","_googleEntity","requestUpdate","err","code","_unsupported","googleFilter","alexaFilter","google","include_domains","include_entities","exclude_domains","exclude_entities","alexa","render","_this$_cloudStatus","_this$_cloudStatus2","_this$_aliases","googleEnabled","logged_in","prefs","google_enabled","alexaEnabled","alexa_enabled","showAssistants","Object","keys","uiAssistants","alexaManual","alexa_entities","googleManual","google_entities","splice","indexOf","uiExposed","some","exposed","manFilterFuncs","_getEntityFilterFuncs","manExposedAlexa","manExposedGoogle","anyExposed","localize","_toggleAll","map","_this$_googleEntity","_this$hass$themes","supported","manualConfig","support2fa","might_2fa","domain","type","darkOptimized","themes","darkMode","name","mdiAlertCircle","disable_2fa","_2faChanged","_toggleAssistant","entry","faq_link","_aliases","aliases","_aliasesChanged","_saveAliases","ev","detail","target","checked","_err","result","alias","trim","filter","entity_entry","assistant","expose","assistants","static","styles"],"sources":["/workspaces/frontend/src/panels/config/voice-assistants/entity-voice-settings.ts"],"sourcesContent":["import { mdiAlertCircle } from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport {\n  EntityFilter,\n  FilterFunc,\n  generateFilter,\n  isEmptyFilter,\n} from \"../../../common/entity/entity_filter\";\nimport \"../../../components/ha-aliases-editor\";\nimport \"../../../components/ha-settings-row\";\nimport \"../../../components/ha-switch\";\nimport { fetchCloudAlexaEntity } from \"../../../data/alexa\";\nimport {\n  CloudStatus,\n  CloudStatusLoggedIn,\n  fetchCloudStatus,\n  updateCloudGoogleEntityConfig,\n} from \"../../../data/cloud\";\nimport {\n  ExtEntityRegistryEntry,\n  getExtendedEntityRegistryEntry,\n  updateEntityRegistryEntry,\n} from \"../../../data/entity_registry\";\nimport {\n  fetchCloudGoogleEntity,\n  GoogleEntity,\n} from \"../../../data/google_assistant\";\nimport {\n  exposeEntities,\n  ExposeEntitySettings,\n  voiceAssistants,\n} from \"../../../data/expose\";\nimport { SubscribeMixin } from \"../../../mixins/subscribe-mixin\";\nimport { haStyle } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { brandsUrl } from \"../../../util/brands-url\";\nimport { EntityRegistrySettings } from \"../entities/entity-registry-settings\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\n\n@customElement(\"entity-voice-settings\")\nexport class EntityVoiceSettings extends SubscribeMixin(LitElement) {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property() public entityId!: string;\n\n  @property({ attribute: false }) public exposed!: ExposeEntitySettings;\n\n  @property({ attribute: false }) public entry?: ExtEntityRegistryEntry;\n\n  @state() private _cloudStatus?: CloudStatus;\n\n  @state() private _aliases?: string[];\n\n  @state() private _googleEntity?: GoogleEntity;\n\n  @state() private _unsupported: Partial<\n    Record<\"cloud.google_assistant\" | \"cloud.alexa\" | \"conversation\", boolean>\n  > = {};\n\n  protected willUpdate(changedProps: PropertyValues<this>) {\n    if (!isComponentLoaded(this.hass, \"cloud\")) {\n      return;\n    }\n    if (changedProps.has(\"entityId\") && this.entityId) {\n      this._fetchEntities();\n    }\n    if (!this.hasUpdated) {\n      fetchCloudStatus(this.hass).then((status) => {\n        this._cloudStatus = status;\n      });\n    }\n  }\n\n  private async _fetchEntities() {\n    try {\n      const googleEntity = await fetchCloudGoogleEntity(\n        this.hass,\n        this.entityId\n      );\n      this._googleEntity = googleEntity;\n      this.requestUpdate(\"_googleEntity\");\n    } catch (err: any) {\n      if (err.code === \"not_supported\") {\n        this._unsupported[\"cloud.google_assistant\"] = true;\n        this.requestUpdate(\"_unsupported\");\n      }\n    }\n\n    try {\n      await fetchCloudAlexaEntity(this.hass, this.entityId);\n    } catch (err: any) {\n      if (err.code === \"not_supported\") {\n        this._unsupported[\"cloud.alexa\"] = true;\n        this.requestUpdate(\"_unsupported\");\n      }\n    }\n  }\n\n  private _getEntityFilterFuncs = memoizeOne(\n    (googleFilter: EntityFilter, alexaFilter: EntityFilter) => ({\n      google: generateFilter(\n        googleFilter.include_domains,\n        googleFilter.include_entities,\n        googleFilter.exclude_domains,\n        googleFilter.exclude_entities\n      ),\n      alexa: generateFilter(\n        alexaFilter.include_domains,\n        alexaFilter.include_entities,\n        alexaFilter.exclude_domains,\n        alexaFilter.exclude_entities\n      ),\n    })\n  );\n\n  protected render() {\n    const googleEnabled =\n      this._cloudStatus?.logged_in === true &&\n      this._cloudStatus.prefs.google_enabled === true;\n\n    const alexaEnabled =\n      this._cloudStatus?.logged_in === true &&\n      this._cloudStatus.prefs.alexa_enabled === true;\n\n    const showAssistants = [...Object.keys(voiceAssistants)];\n    const uiAssistants = [...showAssistants];\n\n    const alexaManual =\n      alexaEnabled &&\n      !isEmptyFilter((this._cloudStatus as CloudStatusLoggedIn).alexa_entities);\n    const googleManual =\n      googleEnabled &&\n      !isEmptyFilter(\n        (this._cloudStatus as CloudStatusLoggedIn).google_entities\n      );\n\n    if (!googleEnabled) {\n      showAssistants.splice(\n        showAssistants.indexOf(\"cloud.google_assistant\"),\n        1\n      );\n      uiAssistants.splice(showAssistants.indexOf(\"cloud.google_assistant\"), 1);\n    } else if (googleManual) {\n      uiAssistants.splice(uiAssistants.indexOf(\"cloud.google_assistant\"), 1);\n    }\n\n    if (!alexaEnabled) {\n      showAssistants.splice(showAssistants.indexOf(\"cloud.alexa\"), 1);\n      uiAssistants.splice(uiAssistants.indexOf(\"cloud.alexa\"), 1);\n    } else if (alexaManual) {\n      uiAssistants.splice(uiAssistants.indexOf(\"cloud.alexa\"), 1);\n    }\n\n    const uiExposed = uiAssistants.some((key) => this.exposed[key]);\n\n    let manFilterFuncs:\n      | {\n          google: FilterFunc;\n          alexa: FilterFunc;\n        }\n      | undefined;\n\n    if (alexaManual || googleManual) {\n      manFilterFuncs = this._getEntityFilterFuncs(\n        (this._cloudStatus as CloudStatusLoggedIn).google_entities,\n        (this._cloudStatus as CloudStatusLoggedIn).alexa_entities\n      );\n    }\n\n    const manExposedAlexa = alexaManual && manFilterFuncs!.alexa(this.entityId);\n    const manExposedGoogle =\n      googleManual && manFilterFuncs!.google(this.entityId);\n\n    const anyExposed = uiExposed || manExposedAlexa || manExposedGoogle;\n\n    return html`\n      <ha-settings-row>\n        <h3 slot=\"heading\">\n          ${this.hass.localize(\"ui.dialogs.voice-settings.expose_header\")}\n        </h3>\n        <ha-switch\n          @change=${this._toggleAll}\n          .assistants=${uiAssistants}\n          .checked=${anyExposed}\n        ></ha-switch>\n      </ha-settings-row>\n      ${anyExposed\n        ? showAssistants.map((key) => {\n            const supported = !this._unsupported[key];\n\n            const exposed =\n              alexaManual && key === \"cloud.alexa\"\n                ? manExposedAlexa\n                : googleManual && key === \"cloud.google_assistant\"\n                  ? manExposedGoogle\n                  : this.exposed[key];\n\n            const manualConfig =\n              (alexaManual && key === \"cloud.alexa\") ||\n              (googleManual && key === \"cloud.google_assistant\");\n\n            const support2fa =\n              key === \"cloud.google_assistant\" &&\n              !googleManual &&\n              supported &&\n              this._googleEntity?.might_2fa;\n\n            return html`\n              <ha-settings-row .threeLine=${!supported && manualConfig}>\n                <img\n                  alt=\"\"\n                  src=${brandsUrl({\n                    domain: voiceAssistants[key].domain,\n                    type: \"icon\",\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  slot=\"prefix\"\n                />\n                <span slot=\"heading\">${voiceAssistants[key].name}</span>\n                ${!supported\n                  ? html`<div slot=\"description\" class=\"unsupported\">\n                      <ha-svg-icon .path=${mdiAlertCircle}></ha-svg-icon>\n                      ${this.hass.localize(\n                        \"ui.dialogs.voice-settings.unsupported\"\n                      )}\n                    </div>`\n                  : nothing}\n                ${manualConfig\n                  ? html`\n                      <div slot=\"description\">\n                        ${this.hass.localize(\n                          \"ui.dialogs.voice-settings.manual_config\"\n                        )}\n                      </div>\n                    `\n                  : nothing}\n                ${support2fa\n                  ? html`\n                      <ha-formfield\n                        slot=\"description\"\n                        .label=${this.hass.localize(\n                          \"ui.dialogs.voice-settings.ask_pin\"\n                        )}\n                      >\n                        <ha-checkbox\n                          .checked=${!this._googleEntity!.disable_2fa}\n                          @change=${this._2faChanged}\n                        ></ha-checkbox>\n                      </ha-formfield>\n                    `\n                  : nothing}\n                <ha-switch\n                  .assistant=${key}\n                  @change=${this._toggleAssistant}\n                  .disabled=${manualConfig || (!exposed && !supported)}\n                  .checked=${exposed}\n                ></ha-switch>\n              </ha-settings-row>\n            `;\n          })\n        : nothing}\n\n      <h3 class=\"header\">\n        ${this.hass.localize(\"ui.dialogs.voice-settings.aliases_header\")}\n      </h3>\n\n      <p class=\"description\">\n        ${this.hass.localize(\"ui.dialogs.voice-settings.aliases_description\")}\n      </p>\n\n      ${!this.entry\n        ? html`<ha-alert alert-type=\"warning\">\n            ${this.hass.localize(\n              \"ui.dialogs.voice-settings.aliases_no_unique_id\",\n              {\n                faq_link: html`<a\n                  href=${documentationUrl(this.hass, \"/faq/unique_id\")}\n                  target=\"_blank\"\n                  rel=\"noreferrer\"\n                  >${this.hass.localize(\"ui.dialogs.entity_registry.faq\")}</a\n                >`,\n              }\n            )}\n          </ha-alert>`\n        : html`<ha-aliases-editor\n            .hass=${this.hass}\n            .aliases=${this._aliases ?? this.entry.aliases}\n            @value-changed=${this._aliasesChanged}\n            @blur=${this._saveAliases}\n          ></ha-aliases-editor>`}\n    `;\n  }\n\n  private _aliasesChanged(ev) {\n    this._aliases = ev.detail.value;\n  }\n\n  private async _2faChanged(ev) {\n    try {\n      await updateCloudGoogleEntityConfig(\n        this.hass,\n        this.entityId,\n        !ev.target.checked\n      );\n    } catch (_err) {\n      ev.target.checked = !ev.target.checked;\n    }\n  }\n\n  private async _saveAliases() {\n    if (!this._aliases) {\n      return;\n    }\n    const result = await updateEntityRegistryEntry(this.hass, this.entityId, {\n      aliases: this._aliases\n        .map((alias) => alias.trim())\n        .filter((alias) => alias),\n    });\n    fireEvent(this, \"entity-entry-updated\", result.entity_entry);\n  }\n\n  private async _toggleAssistant(ev) {\n    exposeEntities(\n      this.hass,\n      [ev.target.assistant],\n      [this.entityId],\n      ev.target.checked\n    );\n    if (this.entry) {\n      const entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this.entityId\n      );\n      fireEvent(this, \"entity-entry-updated\", entry);\n    }\n    fireEvent(this, \"exposed-entities-changed\");\n  }\n\n  private async _toggleAll(ev) {\n    const expose = ev.target.checked;\n\n    const assistants = expose\n      ? ev.target.assistants.filter((key) => !this._unsupported[key])\n      : ev.target.assistants;\n\n    exposeEntities(this.hass, assistants, [this.entityId], ev.target.checked);\n    if (this.entry) {\n      const entry = await getExtendedEntityRegistryEntry(\n        this.hass,\n        this.entityId\n      );\n      fireEvent(this, \"entity-entry-updated\", entry);\n    }\n    fireEvent(this, \"exposed-entities-changed\");\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        :host {\n          display: block;\n          margin: 32px;\n          margin-top: 0;\n          --settings-row-prefix-display: contents;\n          --settings-row-content-display: contents;\n        }\n        ha-settings-row {\n          padding: 0;\n        }\n        img {\n          height: 32px;\n          width: 32px;\n          margin-right: 16px;\n          margin-inline-end: 16px;\n          margin-inline-start: initial;\n        }\n        ha-aliases-editor {\n          display: block;\n        }\n        ha-alert {\n          display: block;\n          margin-top: 16px;\n        }\n        ha-formfield {\n          margin-left: -8px;\n          margin-inline-start: -8px;\n          margin-inline-end: initial;\n        }\n        ha-checkbox {\n          --mdc-checkbox-state-layer-size: 40px;\n        }\n        .unsupported {\n          display: flex;\n          align-items: center;\n        }\n        .unsupported ha-svg-icon {\n          color: var(--error-color);\n          --mdc-icon-size: 16px;\n          margin-right: 4px;\n          margin-inline-end: 4px;\n          margin-inline-start: initial;\n        }\n        .header {\n          margin-top: 8px;\n          margin-bottom: 4px;\n        }\n        .description {\n          color: var(--secondary-text-color);\n          font-size: 14px;\n          line-height: 20px;\n          margin-top: 0;\n          margin-bottom: 16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-registry-settings\": EntityRegistrySettings;\n  }\n  interface HASSDomEvents {\n    \"entity-entry-updated\": ExtEntityRegistryEntry;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"entity-voice-settings\": EntityVoiceSettings;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}