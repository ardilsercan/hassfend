{"ast":null,"code":"import \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar standardProperty = function standardProperty(options, element) {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (element.kind === 'method' && element.descriptor && !('value' in element.descriptor)) {\n    return Object.assign(Object.assign({}, element), {}, {\n      finisher: function finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n    });\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer: function initializer() {\n        if (typeof element.initializer === 'function') {\n          this[element.key] = element.initializer.call(this);\n        }\n      },\n      finisher: function finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n    };\n  }\n};\nvar legacyProperty = function legacyProperty(options, proto, name) {\n  proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (protoOrDescriptor, name) {\n    return name !== undefined ? legacyProperty(options, protoOrDescriptor, name) : standardProperty(options, protoOrDescriptor);\n  };\n}","map":{"version":3,"names":["standardProperty","options","element","kind","descriptor","Object","assign","finisher","clazz","createProperty","key","Symbol","placement","originalKey","initializer","call","legacyProperty","proto","name","constructor","property","protoOrDescriptor","undefined"],"sources":["../../src/decorators/property.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport {PropertyDeclaration, ReactiveElement} from '../reactive-element.js';\nimport {ClassElement} from './base.js';\n\nconst standardProperty = (\n  options: PropertyDeclaration,\n  element: ClassElement\n) => {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (\n    element.kind === 'method' &&\n    element.descriptor &&\n    !('value' in element.descriptor)\n  ) {\n    return {\n      ...element,\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // store the original key so subsequent decorators have access to it.\n      originalKey: element.key,\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer(this: {[key: string]: unknown}) {\n        if (typeof element.initializer === 'function') {\n          this[element.key as string] = element.initializer.call(this);\n        }\n      },\n      finisher(clazz: typeof ReactiveElement) {\n        clazz.createProperty(element.key, options);\n      },\n    };\n  }\n};\n\nconst legacyProperty = (\n  options: PropertyDeclaration,\n  proto: Object,\n  name: PropertyKey\n) => {\n  (proto.constructor as typeof ReactiveElement).createProperty(name, options);\n};\n\n/**\n * A property decorator which creates a reactive property that reflects a\n * corresponding attribute value. When a decorated property is set\n * the element will update and render. A {@linkcode PropertyDeclaration} may\n * optionally be supplied to configure property features.\n *\n * This decorator should only be used for public fields. As public fields,\n * properties should be considered as primarily settable by element users,\n * either via attribute or the property itself.\n *\n * Generally, properties that are changed by the element should be private or\n * protected fields and should use the {@linkcode state} decorator.\n *\n * However, sometimes element code does need to set a public property. This\n * should typically only be done in response to user interaction, and an event\n * should be fired informing the user; for example, a checkbox sets its\n * `checked` property when clicked and fires a `changed` event. Mutating public\n * properties should typically not be done for non-primitive (object or array)\n * properties. In other cases when an element needs to manage state, a private\n * property decorated via the {@linkcode state} decorator should be used. When\n * needed, state properties can be initialized via public properties to\n * facilitate complex interactions.\n *\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options?: PropertyDeclaration) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (protoOrDescriptor: Object | ClassElement, name?: PropertyKey): any =>\n    name !== undefined\n      ? legacyProperty(options!, protoOrDescriptor as Object, name)\n      : standardProperty(options!, protoOrDescriptor as ClassElement);\n}\n"],"mappings":";;;;AAAA;;;;;AAeA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAgBA,CACpBC,OAA4B,EAC5BC,OAAqB,EACnB;EACF;EACA;EACA;EACA,IACEA,OAAO,CAACC,IAAI,KAAK,QAAQ,IACzBD,OAAO,CAACE,UAAU,IAClB,EAAE,OAAO,IAAIF,OAAO,CAACE,UAAU,CAAC,EAChC;IACA,OAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACKJ,OAAO;MACVK,QAAQ,WAAAA,SAACC,KAA6B;QACpCA,KAAK,CAACC,cAAc,CAACP,OAAO,CAACQ,GAAG,EAAET,OAAO,CAAC;MAC5C;IAAC;GAEJ,MAAM;IACL;IACA;IACA;IACA,OAAO;MACLE,IAAI,EAAE,OAAO;MACbO,GAAG,EAAEC,MAAM,EAAE;MACbC,SAAS,EAAE,KAAK;MAChBR,UAAU,EAAE,EAAE;MACd;MACAS,WAAW,EAAEX,OAAO,CAACQ,GAAG;MACxB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACAI,WAAW,WAAAA,YAAA;QACT,IAAI,OAAOZ,OAAO,CAACY,WAAW,KAAK,UAAU,EAAE;UAC7C,IAAI,CAACZ,OAAO,CAACQ,GAAa,CAAC,GAAGR,OAAO,CAACY,WAAW,CAACC,IAAI,CAAC,IAAI,CAAC;;MAEhE,CAAC;MACDR,QAAQ,WAAAA,SAACC,KAA6B;QACpCA,KAAK,CAACC,cAAc,CAACP,OAAO,CAACQ,GAAG,EAAET,OAAO,CAAC;MAC5C;KACD;;AAEL,CAAC;AAED,IAAMe,cAAc,GAAG,SAAjBA,cAAcA,CAClBf,OAA4B,EAC5BgB,KAAa,EACbC,IAAiB,EACf;EACDD,KAAK,CAACE,WAAsC,CAACV,cAAc,CAACS,IAAI,EAAEjB,OAAO,CAAC;AAC7E,CAAC;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAM,SAAUmB,QAAQA,CAACnB,OAA6B;EACpD;EACA,OAAO,UAACoB,iBAAwC,EAAEH,IAAkB;IAAA,OAClEA,IAAI,KAAKI,SAAS,GACdN,cAAc,CAACf,OAAQ,EAAEoB,iBAA2B,EAAEH,IAAI,CAAC,GAC3DlB,gBAAgB,CAACC,OAAQ,EAAEoB,iBAAiC,CAAC;EAAA;AACrE"},"metadata":{},"sourceType":"module","externalDependencies":[]}