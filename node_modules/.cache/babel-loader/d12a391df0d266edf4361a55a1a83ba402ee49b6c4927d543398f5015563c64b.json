{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject;\nimport \"core-js/modules/es.array.concat.js\";\nimport { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nexport var HaTextArea = _decorate([customElement(\"ha-textarea\")], function (_initialize, _TextAreaBase) {\n  var HaTextArea = /*#__PURE__*/function (_TextAreaBase2) {\n    _inherits(HaTextArea, _TextAreaBase2);\n    function HaTextArea() {\n      var _this;\n      _classCallCheck(this, HaTextArea);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaTextArea, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaTextArea);\n  }(_TextAreaBase);\n  return {\n    F: HaTextArea,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"autogrow\",\n      value: function value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        _get(_getPrototypeOf(HaTextArea.prototype), \"updated\", this).call(this, changedProperties);\n        if (this.autogrow && changedProperties.has(\"value\")) {\n          this.mdcRoot.dataset.value = this.value + \"=\\u200B\\\"\"; // add a zero-width space to correctly wrap\n        }\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value: function value() {\n        return [textfieldStyles, textareaStyles, css(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      :host([autogrow]) .mdc-text-field {\\n        position: relative;\\n        min-height: 74px;\\n        min-width: 178px;\\n        max-height: 200px;\\n      }\\n      :host([autogrow]) .mdc-text-field:after {\\n        content: attr(data-value);\\n        margin-top: 23px;\\n        margin-bottom: 9px;\\n        line-height: 1.5rem;\\n        min-height: 42px;\\n        padding: 0px 32px 0 16px;\\n        letter-spacing: var(\\n          --mdc-typography-subtitle1-letter-spacing,\\n          0.009375em\\n        );\\n        visibility: hidden;\\n        white-space: pre-wrap;\\n      }\\n      :host([autogrow]) .mdc-text-field__input {\\n        position: absolute;\\n        height: calc(100% - 32px);\\n      }\\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\\n        margin-top: 16px;\\n        margin-bottom: 16px;\\n      }\\n      .mdc-floating-label {\\n        inset-inline-start: 16px !important;\\n        inset-inline-end: initial !important;\\n        transform-origin: var(--float-start) top;\\n      }\\n    \"])))];\n      }\n    }]\n  };\n}, TextAreaBase);","map":{"version":3,"names":["TextAreaBase","styles","textfieldStyles","textareaStyles","css","customElement","property","HaTextArea","_decorate","_initialize","_TextAreaBase","_TextAreaBase2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","type","Boolean","reflect","key","value","updated","changedProperties","_get","_getPrototypeOf","prototype","call","autogrow","has","mdcRoot","dataset","static","_templateObject","_taggedTemplateLiteral"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-textarea.ts"],"sourcesContent":["import { TextAreaBase } from \"@material/mwc-textarea/mwc-textarea-base\";\nimport { styles as textfieldStyles } from \"@material/mwc-textfield/mwc-textfield.css\";\nimport { styles as textareaStyles } from \"@material/mwc-textarea/mwc-textarea.css\";\nimport { css, PropertyValues } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-textarea\")\nexport class HaTextArea extends TextAreaBase {\n  @property({ type: Boolean, reflect: true }) autogrow = false;\n\n  updated(changedProperties: PropertyValues) {\n    super.updated(changedProperties);\n    if (this.autogrow && changedProperties.has(\"value\")) {\n      this.mdcRoot.dataset.value = this.value + '=\\u200B\"'; // add a zero-width space to correctly wrap\n    }\n  }\n\n  static override styles = [\n    textfieldStyles,\n    textareaStyles,\n    css`\n      :host([autogrow]) .mdc-text-field {\n        position: relative;\n        min-height: 74px;\n        min-width: 178px;\n        max-height: 200px;\n      }\n      :host([autogrow]) .mdc-text-field:after {\n        content: attr(data-value);\n        margin-top: 23px;\n        margin-bottom: 9px;\n        line-height: 1.5rem;\n        min-height: 42px;\n        padding: 0px 32px 0 16px;\n        letter-spacing: var(\n          --mdc-typography-subtitle1-letter-spacing,\n          0.009375em\n        );\n        visibility: hidden;\n        white-space: pre-wrap;\n      }\n      :host([autogrow]) .mdc-text-field__input {\n        position: absolute;\n        height: calc(100% - 32px);\n      }\n      :host([autogrow]) .mdc-text-field.mdc-text-field--no-label:after {\n        margin-top: 16px;\n        margin-bottom: 16px;\n      }\n      .mdc-floating-label {\n        inset-inline-start: 16px !important;\n        inset-inline-end: initial !important;\n        transform-origin: var(--float-start) top;\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-textarea\": HaTextArea;\n  }\n}\n"],"mappings":";;;;;;;;;;;AAAA,SAASA,YAAY,QAAQ,0CAA0C;AACvE,SAASC,MAAM,IAAIC,eAAe,QAAQ,2CAA2C;AACrF,SAASD,MAAM,IAAIE,cAAc,QAAQ,yCAAyC;AAClF,SAASC,GAAG,QAAwB,KAAK;AACzC,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AAExD,WACaC,UAAU,GAAAC,SAAA,EADtBH,aAAa,CAAC,aAAa,CAAC,aAAAI,WAAA,EAAAC,aAAA;EAAA,IAChBH,UAAU,0BAAAI,cAAA;IAAAC,SAAA,CAAAL,UAAA,EAAAI,cAAA;IAAA,SAAAJ,WAAA;MAAA,IAAAM,KAAA;MAAAC,eAAA,OAAAP,UAAA;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAQ,UAAA,OAAAd,UAAA,KAAAe,MAAA,CAAAJ,IAAA;MAAAT,WAAA,CAAAc,sBAAA,CAAAV,KAAA;MAAA,OAAAA,KAAA;IAAA;IAAA,OAAAW,YAAA,CAAAjB,UAAA;EAAA,EAAAG,aAAA;EAAA;IAAAe,CAAA,EAAVlB,UAAU;IAAAmB,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACpBtB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAAY,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAK,GAAA;MAAAC,KAAA,EAE5D,SAAAC,QAAQC,iBAAiC,EAAE;QACzCC,IAAA,CAAAC,eAAA,CAJS9B,UAAU,CAAA+B,SAAA,oBAAAC,IAAA,OAILJ,iBAAiB;QAC/B,IAAI,IAAI,CAACK,QAAQ,IAAIL,iBAAiB,CAACM,GAAG,CAAC,OAAO,CAAC,EAAE;UACnD,IAAI,CAACC,OAAO,CAACC,OAAO,CAACV,KAAK,GAAG,IAAI,CAACA,KAAK,GAAG,WAAU,CAAC,CAAC;QACxD;MACF;IAAC;MAAAN,IAAA;MAAAiB,MAAA;MAAAZ,GAAA;MAAAC,KAAA,WAAAA,MAAA;QAAA,OAEwB,CACvB/B,eAAe,EACfC,cAAc,EACdC,GAAG,CAAAyC,eAAA,KAAAA,eAAA,GAAAC,sBAAA,qhCAmCJ;MAAA;IAAA;EAAA;AAAA,GAhD6B9C,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}