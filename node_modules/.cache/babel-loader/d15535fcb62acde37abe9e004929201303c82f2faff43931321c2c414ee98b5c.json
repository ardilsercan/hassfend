{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button\";\nconst mdiHelpCircle = \"M15.07,11.25L14.17,12.17C13.45,12.89 13,13.5 13,15H11V14.5C11,13.39 11.45,12.39 12.17,11.67L13.41,10.41C13.78,10.05 14,9.55 14,9C14,7.89 13.1,7 12,7A2,2 0 0,0 10,9H8A4,4 0 0,1 12,5A4,4 0 0,1 16,9C16,9.88 15.64,10.67 15.07,11.25M13,19H11V17H13M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12C22,6.47 17.5,2 12,2Z\";\nimport { html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-yaml-editor\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { expandLovelaceConfigStrategies } from \"../strategies/get-strategy\";\nconst EMPTY_CONFIG = {\n  views: [{\n    title: \"Home\"\n  }]\n};\nexport let HuiSaveConfig = _decorate([customElement(\"hui-dialog-save-config\")], function (_initialize, _LitElement) {\n  class HuiSaveConfig extends _LitElement {\n    constructor() {\n      super();\n      _initialize(this);\n      this._saving = false;\n    }\n  }\n  return {\n    F: HuiSaveConfig,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_emptyConfig\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_saving\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._params = params;\n        this._emptyConfig = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._params = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._params) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._close}\n        .heading=${html`${this.hass.localize(\"ui.panel.lovelace.editor.save_config.header\")}<a\n            class=\"header_button\"\n            href=${documentationUrl(this.hass, \"/lovelace/\")}\n            title=${this.hass.localize(\"ui.panel.lovelace.menu.help\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <ha-icon-button\n              .path=${mdiHelpCircle}\n              .label=${this.hass.localize(\"ui.common.help\")}\n            ></ha-icon-button>\n          </a>`}\n      >\n        <div>\n          <p>\n            ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.para\")}\n          </p>\n\n          ${this._params.mode === \"storage\" ? html`\n                <p>\n                  ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.para_sure\")}\n                </p>\n                <ha-formfield\n                  .label=${this.hass.localize(\"ui.panel.lovelace.editor.save_config.empty_config\")}\n                >\n                  <ha-switch\n                    .checked=${this._emptyConfig}\n                    @change=${this._emptyConfigChanged}\n                    dialogInitialFocus\n                  ></ha-switch\n                ></ha-formfield>\n              ` : html`\n                <p>\n                  ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.yaml_mode\")}\n                </p>\n                <p>\n                  ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.yaml_control\")}\n                </p>\n                <p>\n                  ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.yaml_config\")}\n                </p>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._params.lovelace.config}\n                  dialogInitialFocus\n                ></ha-yaml-editor>\n              `}\n        </div>\n        ${this._params.mode === \"storage\" ? html`\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                ?disabled=${this._saving}\n                @click=${this._saveConfig}\n              >\n                ${this._saving ? html`<ha-circular-progress\n                      indeterminate\n                      size=\"small\"\n                      aria-label=\"Saving\"\n                    ></ha-circular-progress>` : \"\"}\n                ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.save\")}\n              </mwc-button>\n            ` : html`\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass.localize(\"ui.panel.lovelace.editor.save_config.close\")}</mwc-button\n              >\n            `}\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_close\",\n      value: function _close(ev) {\n        if (ev) {\n          ev.stopPropagation();\n        }\n        this.closeDialog();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_emptyConfigChanged\",\n      value: function _emptyConfigChanged(ev) {\n        this._emptyConfig = ev.target.checked;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_saveConfig\",\n      value: async function _saveConfig() {\n        if (!this.hass || !this._params) {\n          return;\n        }\n        this._saving = true;\n        try {\n          const lovelace = this._params.lovelace;\n          await lovelace.saveConfig(this._emptyConfig ? EMPTY_CONFIG : await expandLovelaceConfigStrategies(lovelace.config, this.hass));\n          lovelace.setEditMode(true);\n          this._saving = false;\n          this.closeDialog();\n        } catch (err) {\n          alert(`Saving failed: ${err.message}`);\n          this._saving = false;\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyleDialog];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiHelpCircle","html","LitElement","nothing","customElement","property","state","fireEvent","haStyleDialog","documentationUrl","expandLovelaceConfigStrategies","EMPTY_CONFIG","views","title","HuiSaveConfig","_decorate","_initialize","_LitElement","constructor","_saving","F","d","kind","decorators","attribute","key","value","showDialog","params","_params","_emptyConfig","closeDialog","undefined","dialog","localName","render","_close","hass","localize","mode","_emptyConfigChanged","lovelace","config","_saveConfig","ev","stopPropagation","target","checked","saveConfig","setEditMode","err","alert","message","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/hui-dialog-save-config.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { mdiHelpCircle } from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport \"../../../components/ha-circular-progress\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-formfield\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/ha-switch\";\nimport \"../../../components/ha-yaml-editor\";\nimport { LovelaceConfig } from \"../../../data/lovelace/config/types\";\nimport type { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\nimport { documentationUrl } from \"../../../util/documentation-url\";\nimport { expandLovelaceConfigStrategies } from \"../strategies/get-strategy\";\nimport type { SaveDialogParams } from \"./show-save-config-dialog\";\n\nconst EMPTY_CONFIG: LovelaceConfig = { views: [{ title: \"Home\" }] };\n\n@customElement(\"hui-dialog-save-config\")\nexport class HuiSaveConfig extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: SaveDialogParams;\n\n  @state() private _emptyConfig = false;\n\n  @state() private _saving: boolean;\n\n  public constructor() {\n    super();\n    this._saving = false;\n  }\n\n  public showDialog(params: SaveDialogParams): void {\n    this._params = params;\n    this._emptyConfig = false;\n  }\n\n  public closeDialog(): boolean {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._close}\n        .heading=${html`${this.hass!.localize(\n            \"ui.panel.lovelace.editor.save_config.header\"\n          )}<a\n            class=\"header_button\"\n            href=${documentationUrl(this.hass!, \"/lovelace/\")}\n            title=${this.hass!.localize(\"ui.panel.lovelace.menu.help\")}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >\n            <ha-icon-button\n              .path=${mdiHelpCircle}\n              .label=${this.hass!.localize(\"ui.common.help\")}\n            ></ha-icon-button>\n          </a>`}\n      >\n        <div>\n          <p>\n            ${this.hass!.localize(\"ui.panel.lovelace.editor.save_config.para\")}\n          </p>\n\n          ${this._params.mode === \"storage\"\n            ? html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.para_sure\"\n                  )}\n                </p>\n                <ha-formfield\n                  .label=${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.empty_config\"\n                  )}\n                >\n                  <ha-switch\n                    .checked=${this._emptyConfig}\n                    @change=${this._emptyConfigChanged}\n                    dialogInitialFocus\n                  ></ha-switch\n                ></ha-formfield>\n              `\n            : html`\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_mode\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_control\"\n                  )}\n                </p>\n                <p>\n                  ${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.save_config.yaml_config\"\n                  )}\n                </p>\n                <ha-yaml-editor\n                  .hass=${this.hass}\n                  .defaultValue=${this._params!.lovelace.config}\n                  dialogInitialFocus\n                ></ha-yaml-editor>\n              `}\n        </div>\n        ${this._params.mode === \"storage\"\n          ? html`\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass!.localize(\"ui.common.cancel\")}\n              </mwc-button>\n              <mwc-button\n                slot=\"primaryAction\"\n                ?disabled=${this._saving}\n                @click=${this._saveConfig}\n              >\n                ${this._saving\n                  ? html`<ha-circular-progress\n                      indeterminate\n                      size=\"small\"\n                      aria-label=\"Saving\"\n                    ></ha-circular-progress>`\n                  : \"\"}\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.save\"\n                )}\n              </mwc-button>\n            `\n          : html`\n              <mwc-button slot=\"primaryAction\" @click=${this.closeDialog}>\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.save_config.close\"\n                )}</mwc-button\n              >\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private _close(ev?: Event) {\n    if (ev) {\n      ev.stopPropagation();\n    }\n    this.closeDialog();\n  }\n\n  private _emptyConfigChanged(ev) {\n    this._emptyConfig = ev.target.checked;\n  }\n\n  private async _saveConfig(): Promise<void> {\n    if (!this.hass || !this._params) {\n      return;\n    }\n    this._saving = true;\n    try {\n      const lovelace = this._params!.lovelace;\n      await lovelace.saveConfig(\n        this._emptyConfig\n          ? EMPTY_CONFIG\n          : await expandLovelaceConfigStrategies(lovelace.config, this.hass)\n      );\n      lovelace.setEditMode(true);\n      this._saving = false;\n      this.closeDialog();\n    } catch (err: any) {\n      alert(`Saving failed: ${err.message}`);\n      this._saving = false;\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyleDialog];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-save-config\": HuiSaveConfig;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}