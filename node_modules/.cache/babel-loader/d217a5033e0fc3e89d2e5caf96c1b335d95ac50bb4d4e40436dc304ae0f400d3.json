{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { getRelativePosition } from \"chart.js/helpers\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { formatDateTimeWithSeconds } from \"../../common/datetime/format_date_time\";\nimport millisecondsToDuration from \"../../common/datetime/milliseconds_to_duration\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { numberFormatToLocale } from \"../../common/number/format_number\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport { MIN_TIME_BETWEEN_UPDATES } from \"./ha-chart-base\";\nimport { computeTimelineColor } from \"./timeline-chart/timeline-color\";\nexport let StateHistoryChartTimeline = _decorate([customElement(\"state-history-chart-timeline\")], function (_initialize, _LitElement) {\n  class StateHistoryChartTimeline extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: StateHistoryChartTimeline,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"data\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"names\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"unit\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"identifier\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"showNames\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"clickForMoreInfo\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"chunked\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"startTime\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"endTime\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"paddingYAxis\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"chartIndex\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_chartData\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_chartOptions\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_yWidth\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_chartTime\",\n      value() {\n        return new Date();\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-chart-base\")],\n      key: \"_chart\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"resize\",\n      value() {\n        return options => {\n          var _this$_chart;\n          (_this$_chart = this._chart) === null || _this$_chart === void 0 || _this$_chart.resize(options);\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-chart-base\n        .hass=${this.hass}\n        .data=${this._chartData}\n        .options=${this._chartOptions}\n        .height=${this.data.length * 30 + 30}\n        .paddingYAxis=${this.paddingYAxis - this._yWidth}\n        chart-type=\"timeline\"\n      ></ha-chart-base>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        if (!this.hasUpdated) {\n          this._createOptions();\n        }\n        if (changedProps.has(\"startTime\") || changedProps.has(\"endTime\") || changedProps.has(\"data\") || this._chartTime < new Date(this.endTime.getTime() - MIN_TIME_BETWEEN_UPDATES)) {\n          // If the line is more than 5 minutes old, re-gen it\n          // so the X axis grows even if there is no new data\n          this._generateData();\n        }\n        if (changedProps.has(\"startTime\") || changedProps.has(\"endTime\") || changedProps.has(\"showNames\")) {\n          this._createOptions();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createOptions\",\n      value: function _createOptions() {\n        const narrow = this.narrow;\n        this._chartOptions = {\n          maintainAspectRatio: false,\n          parsing: false,\n          animation: false,\n          scales: {\n            x: {\n              type: \"timeline\",\n              position: \"bottom\",\n              adapters: {\n                date: {\n                  locale: this.hass.locale,\n                  config: this.hass.config\n                }\n              },\n              suggestedMin: this.startTime,\n              suggestedMax: this.endTime,\n              ticks: {\n                autoSkip: true,\n                maxRotation: 0,\n                sampleSize: 5,\n                autoSkipPadding: 20,\n                major: {\n                  enabled: true\n                },\n                font: context => context.tick && context.tick.major ? {\n                  weight: \"bold\"\n                } : {}\n              },\n              grid: {\n                offset: false\n              },\n              time: {\n                tooltipFormat: \"datetimeseconds\"\n              }\n            },\n            y: {\n              type: \"category\",\n              barThickness: 20,\n              offset: true,\n              grid: {\n                display: false,\n                drawBorder: false,\n                drawTicks: false\n              },\n              ticks: {\n                display: this.chunked || this.showNames\n              },\n              afterSetDimensions: y => {\n                y.maxWidth = y.chart.width * 0.18;\n              },\n              afterFit: scaleInstance => {\n                if (this.chunked) {\n                  // ensure all the chart labels are the same width\n                  scaleInstance.width = narrow ? 105 : 185;\n                }\n              },\n              afterUpdate: y => {\n                var _y$width, _y$left;\n                const yWidth = this.showNames ? (_y$width = y.width) !== null && _y$width !== void 0 ? _y$width : 0 : computeRTL(this.hass) ? 0 : (_y$left = y.left) !== null && _y$left !== void 0 ? _y$left : 0;\n                if (this._yWidth !== Math.floor(yWidth) && y.ticks.length === this.data.length) {\n                  this._yWidth = Math.floor(yWidth);\n                  fireEvent(this, \"y-width-changed\", {\n                    value: this._yWidth,\n                    chartIndex: this.chartIndex\n                  });\n                }\n              },\n              position: computeRTL(this.hass) ? \"right\" : \"left\"\n            }\n          },\n          plugins: {\n            tooltip: {\n              mode: \"nearest\",\n              callbacks: {\n                title: context => context[0].chart.data.labels[context[0].datasetIndex],\n                beforeBody: context => context[0].dataset.label || \"\",\n                label: item => {\n                  const d = item.dataset.data[item.dataIndex];\n                  const durationInMs = d.end.getTime() - d.start.getTime();\n                  const formattedDuration = `${this.hass.localize(\"ui.components.history_charts.duration\")}: ${millisecondsToDuration(durationInMs)}`;\n                  return [d.label || \"\", formatDateTimeWithSeconds(d.start, this.hass.locale, this.hass.config), formatDateTimeWithSeconds(d.end, this.hass.locale, this.hass.config), formattedDuration];\n                },\n                labelColor: item => ({\n                  borderColor: item.dataset.data[item.dataIndex].color,\n                  backgroundColor: item.dataset.data[item.dataIndex].color\n                })\n              }\n            },\n            filler: {\n              propagate: true\n            }\n          },\n          // @ts-expect-error\n          locale: numberFormatToLocale(this.hass.locale),\n          onClick: e => {\n            var _this$_chartData;\n            if (!this.clickForMoreInfo || !(e.native instanceof MouseEvent) || e.native instanceof PointerEvent && e.native.pointerType !== \"mouse\") {\n              return;\n            }\n            const chart = e.chart;\n            const canvasPosition = getRelativePosition(e, chart);\n            const index = Math.abs(chart.scales.y.getValueForPixel(canvasPosition.y));\n            fireEvent(this, \"hass-more-info\", {\n              // @ts-ignore\n              entityId: (_this$_chartData = this._chartData) === null || _this$_chartData === void 0 || (_this$_chartData = _this$_chartData.datasets[index]) === null || _this$_chartData === void 0 ? void 0 : _this$_chartData.label\n            });\n            chart.canvas.dispatchEvent(new Event(\"mouseout\")); // to hide tooltip\n          }\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_generateData\",\n      value: function _generateData() {\n        const computedStyles = getComputedStyle(this);\n        let stateHistory = this.data;\n        if (!stateHistory) {\n          stateHistory = [];\n        }\n        this._chartTime = new Date();\n        const startTime = this.startTime;\n        const endTime = this.endTime;\n        const labels = [];\n        const datasets = [];\n        const names = this.names || {};\n        // stateHistory is a list of lists of sorted state objects\n        stateHistory.forEach(stateInfo => {\n          let newLastChanged;\n          let prevState = null;\n          let locState = null;\n          let prevLastChanged = startTime;\n          const entityDisplay = names[stateInfo.entity_id] || stateInfo.name;\n          const dataRow = [];\n          stateInfo.data.forEach(entityState => {\n            let newState = entityState.state;\n            const timeStamp = new Date(entityState.last_changed);\n            if (!newState) {\n              newState = null;\n            }\n            if (timeStamp > endTime) {\n              // Drop datapoints that are after the requested endTime. This could happen if\n              // endTime is 'now' and client time is not in sync with server time.\n              return;\n            }\n            if (prevState === null) {\n              prevState = newState;\n              locState = entityState.state_localize;\n              prevLastChanged = new Date(entityState.last_changed);\n            } else if (newState !== prevState) {\n              newLastChanged = new Date(entityState.last_changed);\n              dataRow.push({\n                start: prevLastChanged,\n                end: newLastChanged,\n                label: locState,\n                color: computeTimelineColor(prevState, computedStyles, this.hass.states[stateInfo.entity_id])\n              });\n              prevState = newState;\n              locState = entityState.state_localize;\n              prevLastChanged = newLastChanged;\n            }\n          });\n          if (prevState !== null) {\n            dataRow.push({\n              start: prevLastChanged,\n              end: endTime,\n              label: locState,\n              color: computeTimelineColor(prevState, computedStyles, this.hass.states[stateInfo.entity_id])\n            });\n          }\n          datasets.push({\n            data: dataRow,\n            label: stateInfo.entity_id\n          });\n          labels.push(entityDisplay);\n        });\n        this._chartData = {\n          labels: labels,\n          datasets: datasets\n        };\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-chart-base {\n        --chart-max-height: none;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["getRelativePosition","css","html","LitElement","customElement","property","query","state","formatDateTimeWithSeconds","millisecondsToDuration","fireEvent","numberFormatToLocale","computeRTL","MIN_TIME_BETWEEN_UPDATES","computeTimelineColor","StateHistoryChartTimeline","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","Number","Date","options","_this$_chart","_chart","resize","render","hass","_chartData","_chartOptions","data","length","paddingYAxis","_yWidth","willUpdate","changedProps","hasUpdated","_createOptions","has","_chartTime","endTime","getTime","_generateData","narrow","maintainAspectRatio","parsing","animation","scales","x","position","adapters","date","locale","config","suggestedMin","startTime","suggestedMax","ticks","autoSkip","maxRotation","sampleSize","autoSkipPadding","major","enabled","font","context","tick","weight","grid","offset","time","tooltipFormat","y","barThickness","display","drawBorder","drawTicks","chunked","showNames","afterSetDimensions","maxWidth","chart","width","afterFit","scaleInstance","afterUpdate","_y$width","_y$left","yWidth","left","Math","floor","chartIndex","plugins","tooltip","mode","callbacks","title","labels","datasetIndex","beforeBody","dataset","label","item","dataIndex","durationInMs","end","start","formattedDuration","localize","labelColor","borderColor","color","backgroundColor","filler","propagate","onClick","e","_this$_chartData","clickForMoreInfo","native","MouseEvent","PointerEvent","pointerType","canvasPosition","index","abs","getValueForPixel","entityId","datasets","canvas","dispatchEvent","Event","computedStyles","getComputedStyle","stateHistory","names","forEach","stateInfo","newLastChanged","prevState","locState","prevLastChanged","entityDisplay","entity_id","name","dataRow","entityState","newState","timeStamp","last_changed","state_localize","push","states","static","styles"],"sources":["/workspaces/frontend/src/components/chart/state-history-chart-timeline.ts"],"sourcesContent":["import type { ChartData, ChartDataset, ChartOptions } from \"chart.js\";\nimport { getRelativePosition } from \"chart.js/helpers\";\nimport { css, CSSResultGroup, html, LitElement, PropertyValues } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { formatDateTimeWithSeconds } from \"../../common/datetime/format_date_time\";\nimport millisecondsToDuration from \"../../common/datetime/milliseconds_to_duration\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { numberFormatToLocale } from \"../../common/number/format_number\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport { TimelineEntity } from \"../../data/history\";\nimport { HomeAssistant } from \"../../types\";\nimport {\n  ChartResizeOptions,\n  HaChartBase,\n  MIN_TIME_BETWEEN_UPDATES,\n} from \"./ha-chart-base\";\nimport type { TimeLineData } from \"./timeline-chart/const\";\nimport { computeTimelineColor } from \"./timeline-chart/timeline-color\";\n\n@customElement(\"state-history-chart-timeline\")\nexport class StateHistoryChartTimeline extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public data: TimelineEntity[] = [];\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ attribute: false }) public names?: Record<string, string>;\n\n  @property() public unit?: string;\n\n  @property() public identifier?: string;\n\n  @property({ type: Boolean }) public showNames = true;\n\n  @property({ type: Boolean }) public clickForMoreInfo = true;\n\n  @property({ type: Boolean }) public chunked = false;\n\n  @property({ attribute: false }) public startTime!: Date;\n\n  @property({ attribute: false }) public endTime!: Date;\n\n  @property({ type: Number }) public paddingYAxis = 0;\n\n  @property({ type: Number }) public chartIndex?;\n\n  @state() private _chartData?: ChartData<\"timeline\">;\n\n  @state() private _chartOptions?: ChartOptions<\"timeline\">;\n\n  @state() private _yWidth = 0;\n\n  private _chartTime: Date = new Date();\n\n  @query(\"ha-chart-base\") private _chart?: HaChartBase;\n\n  public resize = (options?: ChartResizeOptions): void => {\n    this._chart?.resize(options);\n  };\n\n  protected render() {\n    return html`\n      <ha-chart-base\n        .hass=${this.hass}\n        .data=${this._chartData}\n        .options=${this._chartOptions}\n        .height=${this.data.length * 30 + 30}\n        .paddingYAxis=${this.paddingYAxis - this._yWidth}\n        chart-type=\"timeline\"\n      ></ha-chart-base>\n    `;\n  }\n\n  public willUpdate(changedProps: PropertyValues) {\n    if (!this.hasUpdated) {\n      this._createOptions();\n    }\n\n    if (\n      changedProps.has(\"startTime\") ||\n      changedProps.has(\"endTime\") ||\n      changedProps.has(\"data\") ||\n      this._chartTime <\n        new Date(this.endTime.getTime() - MIN_TIME_BETWEEN_UPDATES)\n    ) {\n      // If the line is more than 5 minutes old, re-gen it\n      // so the X axis grows even if there is no new data\n      this._generateData();\n    }\n\n    if (\n      changedProps.has(\"startTime\") ||\n      changedProps.has(\"endTime\") ||\n      changedProps.has(\"showNames\")\n    ) {\n      this._createOptions();\n    }\n  }\n\n  private _createOptions() {\n    const narrow = this.narrow;\n    this._chartOptions = {\n      maintainAspectRatio: false,\n      parsing: false,\n      animation: false,\n      scales: {\n        x: {\n          type: \"timeline\",\n          position: \"bottom\",\n          adapters: {\n            date: {\n              locale: this.hass.locale,\n              config: this.hass.config,\n            },\n          },\n          suggestedMin: this.startTime,\n          suggestedMax: this.endTime,\n          ticks: {\n            autoSkip: true,\n            maxRotation: 0,\n            sampleSize: 5,\n            autoSkipPadding: 20,\n            major: {\n              enabled: true,\n            },\n            font: (context) =>\n              context.tick && context.tick.major\n                ? ({ weight: \"bold\" } as any)\n                : {},\n          },\n          grid: {\n            offset: false,\n          },\n          time: {\n            tooltipFormat: \"datetimeseconds\",\n          },\n        },\n        y: {\n          type: \"category\",\n          barThickness: 20,\n          offset: true,\n          grid: {\n            display: false,\n            drawBorder: false,\n            drawTicks: false,\n          },\n          ticks: {\n            display: this.chunked || this.showNames,\n          },\n          afterSetDimensions: (y) => {\n            y.maxWidth = y.chart.width * 0.18;\n          },\n          afterFit: (scaleInstance) => {\n            if (this.chunked) {\n              // ensure all the chart labels are the same width\n              scaleInstance.width = narrow ? 105 : 185;\n            }\n          },\n          afterUpdate: (y) => {\n            const yWidth = this.showNames\n              ? y.width ?? 0\n              : computeRTL(this.hass)\n                ? 0\n                : y.left ?? 0;\n            if (\n              this._yWidth !== Math.floor(yWidth) &&\n              y.ticks.length === this.data.length\n            ) {\n              this._yWidth = Math.floor(yWidth);\n              fireEvent(this, \"y-width-changed\", {\n                value: this._yWidth,\n                chartIndex: this.chartIndex,\n              });\n            }\n          },\n          position: computeRTL(this.hass) ? \"right\" : \"left\",\n        },\n      },\n      plugins: {\n        tooltip: {\n          mode: \"nearest\",\n          callbacks: {\n            title: (context) =>\n              context![0].chart!.data!.labels![\n                context[0].datasetIndex\n              ] as string,\n            beforeBody: (context) => context[0].dataset.label || \"\",\n            label: (item) => {\n              const d = item.dataset.data[item.dataIndex] as TimeLineData;\n              const durationInMs = d.end.getTime() - d.start.getTime();\n              const formattedDuration = `${this.hass.localize(\n                \"ui.components.history_charts.duration\"\n              )}: ${millisecondsToDuration(durationInMs)}`;\n\n              return [\n                d.label || \"\",\n                formatDateTimeWithSeconds(\n                  d.start,\n                  this.hass.locale,\n                  this.hass.config\n                ),\n                formatDateTimeWithSeconds(\n                  d.end,\n                  this.hass.locale,\n                  this.hass.config\n                ),\n                formattedDuration,\n              ];\n            },\n            labelColor: (item) => ({\n              borderColor: (item.dataset.data[item.dataIndex] as TimeLineData)\n                .color!,\n              backgroundColor: (\n                item.dataset.data[item.dataIndex] as TimeLineData\n              ).color!,\n            }),\n          },\n        },\n        filler: {\n          propagate: true,\n        },\n      },\n      // @ts-expect-error\n      locale: numberFormatToLocale(this.hass.locale),\n      onClick: (e: any) => {\n        if (\n          !this.clickForMoreInfo ||\n          !(e.native instanceof MouseEvent) ||\n          (e.native instanceof PointerEvent && e.native.pointerType !== \"mouse\")\n        ) {\n          return;\n        }\n\n        const chart = e.chart;\n        const canvasPosition = getRelativePosition(e, chart);\n\n        const index = Math.abs(\n          chart.scales.y.getValueForPixel(canvasPosition.y)\n        );\n        fireEvent(this, \"hass-more-info\", {\n          // @ts-ignore\n          entityId: this._chartData?.datasets[index]?.label,\n        });\n        chart.canvas.dispatchEvent(new Event(\"mouseout\")); // to hide tooltip\n      },\n    };\n  }\n\n  private _generateData() {\n    const computedStyles = getComputedStyle(this);\n    let stateHistory = this.data;\n\n    if (!stateHistory) {\n      stateHistory = [];\n    }\n\n    this._chartTime = new Date();\n    const startTime = this.startTime;\n    const endTime = this.endTime;\n    const labels: string[] = [];\n    const datasets: ChartDataset<\"timeline\">[] = [];\n    const names = this.names || {};\n    // stateHistory is a list of lists of sorted state objects\n    stateHistory.forEach((stateInfo) => {\n      let newLastChanged: Date;\n      let prevState: string | null = null;\n      let locState: string | null = null;\n      let prevLastChanged = startTime;\n      const entityDisplay: string =\n        names[stateInfo.entity_id] || stateInfo.name;\n\n      const dataRow: TimeLineData[] = [];\n      stateInfo.data.forEach((entityState) => {\n        let newState: string | null = entityState.state;\n        const timeStamp = new Date(entityState.last_changed);\n        if (!newState) {\n          newState = null;\n        }\n        if (timeStamp > endTime) {\n          // Drop datapoints that are after the requested endTime. This could happen if\n          // endTime is 'now' and client time is not in sync with server time.\n          return;\n        }\n        if (prevState === null) {\n          prevState = newState;\n          locState = entityState.state_localize;\n          prevLastChanged = new Date(entityState.last_changed);\n        } else if (newState !== prevState) {\n          newLastChanged = new Date(entityState.last_changed);\n\n          dataRow.push({\n            start: prevLastChanged,\n            end: newLastChanged,\n            label: locState,\n            color: computeTimelineColor(\n              prevState,\n              computedStyles,\n              this.hass.states[stateInfo.entity_id]\n            ),\n          });\n\n          prevState = newState;\n          locState = entityState.state_localize;\n          prevLastChanged = newLastChanged;\n        }\n      });\n\n      if (prevState !== null) {\n        dataRow.push({\n          start: prevLastChanged,\n          end: endTime,\n          label: locState,\n          color: computeTimelineColor(\n            prevState,\n            computedStyles,\n            this.hass.states[stateInfo.entity_id]\n          ),\n        });\n      }\n      datasets.push({\n        data: dataRow,\n        label: stateInfo.entity_id,\n      });\n      labels.push(entityDisplay);\n    });\n\n    this._chartData = {\n      labels: labels,\n      datasets: datasets,\n    };\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-chart-base {\n        --chart-max-height: none;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-history-chart-timeline\": StateHistoryChartTimeline;\n  }\n}\n"],"mappings":";AACA,SAASA,mBAAmB,QAAQ,kBAAkB;AACtD,SAASC,GAAG,EAAkBC,IAAI,EAAEC,UAAU,QAAwB,KAAK;AAC3E,SAASC,aAAa,EAAEC,QAAQ,EAAEC,KAAK,EAAEC,KAAK,QAAQ,gBAAgB;AACtE,SAASC,yBAAyB,QAAQ,wCAAwC;AAClF,OAAOC,sBAAsB,MAAM,gDAAgD;AACnF,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,oBAAoB,QAAQ,mCAAmC;AACxE,SAASC,UAAU,QAAQ,+BAA+B;AAG1D,SAGEC,wBAAwB,QACnB,iBAAiB;AAExB,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE,WACaC,yBAAyB,GAAAC,SAAA,EADrCZ,aAAa,CAAC,8BAA8B,CAAC,aAAAa,WAAA,EAAAC,WAAA;EAA9C,MACaH,yBAAyB,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAgU1D;EAAC;IAAAI,CAAA,EAhUYN,yBAAyB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACnCnB,QAAQ,CAAC;QAAEoB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BnB,QAAQ,CAAC;QAAEoB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAiC,EAAE;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEjEnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEjDnB,QAAQ,CAAC;QAAEoB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BnB,QAAQ,CAAC,CAAC;MAAAqB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEVnB,QAAQ,CAAC,CAAC;MAAAqB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEVnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAAoB,IAAI;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEnDnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAA2B,IAAI;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE1DnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAAkB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAElDnB,QAAQ,CAAC;QAAEoB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BnB,QAAQ,CAAC;QAAEoB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEE;MAAO,CAAC,CAAC;MAAAJ,GAAA;MAAAC,MAAA;QAAA,OAAuB,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAElDnB,QAAQ,CAAC;QAAEuB,IAAI,EAAEE;MAAO,CAAC,CAAC;MAAAJ,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE1BjB,KAAK,CAAC,CAAC;MAAAmB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEPjB,KAAK,CAAC,CAAC;MAAAmB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAEPjB,KAAK,CAAC,CAAC;MAAAmB,GAAA;MAAAC,MAAA;QAAA,OAAmB,CAAC;MAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAED,IAAII,IAAI,CAAC,CAAC;MAAA;IAAA;MAAAR,IAAA;MAAAC,UAAA,GAEpClB,KAAK,CAAC,eAAe,CAAC;MAAAoB,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,MAAA;QAAA,OAENK,OAA4B,IAAW;UAAA,IAAAC,YAAA;UACtD,CAAAA,YAAA,OAAI,CAACC,MAAM,cAAAD,YAAA,eAAXA,YAAA,CAAaE,MAAM,CAACH,OAAO,CAAC;QAC9B,CAAC;MAAA;IAAA;MAAAT,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAS,OAAA,EAAmB;QACjB,OAAOlC,IAAK;AAChB;AACA,gBAAgB,IAAI,CAACmC,IAAK;AAC1B,gBAAgB,IAAI,CAACC,UAAW;AAChC,mBAAmB,IAAI,CAACC,aAAc;AACtC,kBAAkB,IAAI,CAACC,IAAI,CAACC,MAAM,GAAG,EAAE,GAAG,EAAG;AAC7C,wBAAwB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACC,OAAQ;AACzD;AACA;AACA,KAAK;MACH;IAAC;MAAApB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAiB,WAAkBC,YAA4B,EAAE;QAC9C,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;UACpB,IAAI,CAACC,cAAc,CAAC,CAAC;QACvB;QAEA,IACEF,YAAY,CAACG,GAAG,CAAC,WAAW,CAAC,IAC7BH,YAAY,CAACG,GAAG,CAAC,SAAS,CAAC,IAC3BH,YAAY,CAACG,GAAG,CAAC,MAAM,CAAC,IACxB,IAAI,CAACC,UAAU,GACb,IAAIlB,IAAI,CAAC,IAAI,CAACmB,OAAO,CAACC,OAAO,CAAC,CAAC,GAAGtC,wBAAwB,CAAC,EAC7D;UACA;UACA;UACA,IAAI,CAACuC,aAAa,CAAC,CAAC;QACtB;QAEA,IACEP,YAAY,CAACG,GAAG,CAAC,WAAW,CAAC,IAC7BH,YAAY,CAACG,GAAG,CAAC,SAAS,CAAC,IAC3BH,YAAY,CAACG,GAAG,CAAC,WAAW,CAAC,EAC7B;UACA,IAAI,CAACD,cAAc,CAAC,CAAC;QACvB;MACF;IAAC;MAAAxB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAoB,eAAA,EAAyB;QACvB,MAAMM,MAAM,GAAG,IAAI,CAACA,MAAM;QAC1B,IAAI,CAACd,aAAa,GAAG;UACnBe,mBAAmB,EAAE,KAAK;UAC1BC,OAAO,EAAE,KAAK;UACdC,SAAS,EAAE,KAAK;UAChBC,MAAM,EAAE;YACNC,CAAC,EAAE;cACD9B,IAAI,EAAE,UAAU;cAChB+B,QAAQ,EAAE,QAAQ;cAClBC,QAAQ,EAAE;gBACRC,IAAI,EAAE;kBACJC,MAAM,EAAE,IAAI,CAACzB,IAAI,CAACyB,MAAM;kBACxBC,MAAM,EAAE,IAAI,CAAC1B,IAAI,CAAC0B;gBACpB;cACF,CAAC;cACDC,YAAY,EAAE,IAAI,CAACC,SAAS;cAC5BC,YAAY,EAAE,IAAI,CAAChB,OAAO;cAC1BiB,KAAK,EAAE;gBACLC,QAAQ,EAAE,IAAI;gBACdC,WAAW,EAAE,CAAC;gBACdC,UAAU,EAAE,CAAC;gBACbC,eAAe,EAAE,EAAE;gBACnBC,KAAK,EAAE;kBACLC,OAAO,EAAE;gBACX,CAAC;gBACDC,IAAI,EAAGC,OAAO,IACZA,OAAO,CAACC,IAAI,IAAID,OAAO,CAACC,IAAI,CAACJ,KAAK,GAC7B;kBAAEK,MAAM,EAAE;gBAAO,CAAC,GACnB,CAAC;cACT,CAAC;cACDC,IAAI,EAAE;gBACJC,MAAM,EAAE;cACV,CAAC;cACDC,IAAI,EAAE;gBACJC,aAAa,EAAE;cACjB;YACF,CAAC;YACDC,CAAC,EAAE;cACDtD,IAAI,EAAE,UAAU;cAChBuD,YAAY,EAAE,EAAE;cAChBJ,MAAM,EAAE,IAAI;cACZD,IAAI,EAAE;gBACJM,OAAO,EAAE,KAAK;gBACdC,UAAU,EAAE,KAAK;gBACjBC,SAAS,EAAE;cACb,CAAC;cACDnB,KAAK,EAAE;gBACLiB,OAAO,EAAE,IAAI,CAACG,OAAO,IAAI,IAAI,CAACC;cAChC,CAAC;cACDC,kBAAkB,EAAGP,CAAC,IAAK;gBACzBA,CAAC,CAACQ,QAAQ,GAAGR,CAAC,CAACS,KAAK,CAACC,KAAK,GAAG,IAAI;cACnC,CAAC;cACDC,QAAQ,EAAGC,aAAa,IAAK;gBAC3B,IAAI,IAAI,CAACP,OAAO,EAAE;kBAChB;kBACAO,aAAa,CAACF,KAAK,GAAGvC,MAAM,GAAG,GAAG,GAAG,GAAG;gBAC1C;cACF,CAAC;cACD0C,WAAW,EAAGb,CAAC,IAAK;gBAAA,IAAAc,QAAA,EAAAC,OAAA;gBAClB,MAAMC,MAAM,GAAG,IAAI,CAACV,SAAS,IAAAQ,QAAA,GACzBd,CAAC,CAACU,KAAK,cAAAI,QAAA,cAAAA,QAAA,GAAI,CAAC,GACZpF,UAAU,CAAC,IAAI,CAACyB,IAAI,CAAC,GACnB,CAAC,IAAA4D,OAAA,GACDf,CAAC,CAACiB,IAAI,cAAAF,OAAA,cAAAA,OAAA,GAAI,CAAC;gBACjB,IACE,IAAI,CAACtD,OAAO,KAAKyD,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,IACnChB,CAAC,CAACf,KAAK,CAAC1B,MAAM,KAAK,IAAI,CAACD,IAAI,CAACC,MAAM,EACnC;kBACA,IAAI,CAACE,OAAO,GAAGyD,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC;kBACjCxF,SAAS,CAAC,IAAI,EAAE,iBAAiB,EAAE;oBACjCiB,KAAK,EAAE,IAAI,CAACgB,OAAO;oBACnB2D,UAAU,EAAE,IAAI,CAACA;kBACnB,CAAC,CAAC;gBACJ;cACF,CAAC;cACD3C,QAAQ,EAAE/C,UAAU,CAAC,IAAI,CAACyB,IAAI,CAAC,GAAG,OAAO,GAAG;YAC9C;UACF,CAAC;UACDkE,OAAO,EAAE;YACPC,OAAO,EAAE;cACPC,IAAI,EAAE,SAAS;cACfC,SAAS,EAAE;gBACTC,KAAK,EAAGhC,OAAO,IACbA,OAAO,CAAE,CAAC,CAAC,CAACgB,KAAK,CAAEnD,IAAI,CAAEoE,MAAM,CAC7BjC,OAAO,CAAC,CAAC,CAAC,CAACkC,YAAY,CACd;gBACbC,UAAU,EAAGnC,OAAO,IAAKA,OAAO,CAAC,CAAC,CAAC,CAACoC,OAAO,CAACC,KAAK,IAAI,EAAE;gBACvDA,KAAK,EAAGC,IAAI,IAAK;kBACf,MAAM3F,CAAC,GAAG2F,IAAI,CAACF,OAAO,CAACvE,IAAI,CAACyE,IAAI,CAACC,SAAS,CAAiB;kBAC3D,MAAMC,YAAY,GAAG7F,CAAC,CAAC8F,GAAG,CAACjE,OAAO,CAAC,CAAC,GAAG7B,CAAC,CAAC+F,KAAK,CAAClE,OAAO,CAAC,CAAC;kBACxD,MAAMmE,iBAAiB,GAAI,GAAE,IAAI,CAACjF,IAAI,CAACkF,QAAQ,CAC7C,uCACF,CAAE,KAAI9G,sBAAsB,CAAC0G,YAAY,CAAE,EAAC;kBAE5C,OAAO,CACL7F,CAAC,CAAC0F,KAAK,IAAI,EAAE,EACbxG,yBAAyB,CACvBc,CAAC,CAAC+F,KAAK,EACP,IAAI,CAAChF,IAAI,CAACyB,MAAM,EAChB,IAAI,CAACzB,IAAI,CAAC0B,MACZ,CAAC,EACDvD,yBAAyB,CACvBc,CAAC,CAAC8F,GAAG,EACL,IAAI,CAAC/E,IAAI,CAACyB,MAAM,EAChB,IAAI,CAACzB,IAAI,CAAC0B,MACZ,CAAC,EACDuD,iBAAiB,CAClB;gBACH,CAAC;gBACDE,UAAU,EAAGP,IAAI,KAAM;kBACrBQ,WAAW,EAAGR,IAAI,CAACF,OAAO,CAACvE,IAAI,CAACyE,IAAI,CAACC,SAAS,CAAC,CAC5CQ,KAAM;kBACTC,eAAe,EACbV,IAAI,CAACF,OAAO,CAACvE,IAAI,CAACyE,IAAI,CAACC,SAAS,CAAC,CACjCQ;gBACJ,CAAC;cACH;YACF,CAAC;YACDE,MAAM,EAAE;cACNC,SAAS,EAAE;YACb;UACF,CAAC;UACD;UACA/D,MAAM,EAAEnD,oBAAoB,CAAC,IAAI,CAAC0B,IAAI,CAACyB,MAAM,CAAC;UAC9CgE,OAAO,EAAGC,CAAM,IAAK;YAAA,IAAAC,gBAAA;YACnB,IACE,CAAC,IAAI,CAACC,gBAAgB,IACtB,EAAEF,CAAC,CAACG,MAAM,YAAYC,UAAU,CAAC,IAChCJ,CAAC,CAACG,MAAM,YAAYE,YAAY,IAAIL,CAAC,CAACG,MAAM,CAACG,WAAW,KAAK,OAAQ,EACtE;cACA;YACF;YAEA,MAAM1C,KAAK,GAAGoC,CAAC,CAACpC,KAAK;YACrB,MAAM2C,cAAc,GAAGtI,mBAAmB,CAAC+H,CAAC,EAAEpC,KAAK,CAAC;YAEpD,MAAM4C,KAAK,GAAGnC,IAAI,CAACoC,GAAG,CACpB7C,KAAK,CAAClC,MAAM,CAACyB,CAAC,CAACuD,gBAAgB,CAACH,cAAc,CAACpD,CAAC,CAClD,CAAC;YACDxE,SAAS,CAAC,IAAI,EAAE,gBAAgB,EAAE;cAChC;cACAgI,QAAQ,GAAAV,gBAAA,GAAE,IAAI,CAAC1F,UAAU,cAAA0F,gBAAA,gBAAAA,gBAAA,GAAfA,gBAAA,CAAiBW,QAAQ,CAACJ,KAAK,CAAC,cAAAP,gBAAA,uBAAhCA,gBAAA,CAAkChB;YAC9C,CAAC,CAAC;YACFrB,KAAK,CAACiD,MAAM,CAACC,aAAa,CAAC,IAAIC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;UACrD;QACF,CAAC;MACH;IAAC;MAAAvH,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAyB,cAAA,EAAwB;QACtB,MAAM2F,cAAc,GAAGC,gBAAgB,CAAC,IAAI,CAAC;QAC7C,IAAIC,YAAY,GAAG,IAAI,CAACzG,IAAI;QAE5B,IAAI,CAACyG,YAAY,EAAE;UACjBA,YAAY,GAAG,EAAE;QACnB;QAEA,IAAI,CAAChG,UAAU,GAAG,IAAIlB,IAAI,CAAC,CAAC;QAC5B,MAAMkC,SAAS,GAAG,IAAI,CAACA,SAAS;QAChC,MAAMf,OAAO,GAAG,IAAI,CAACA,OAAO;QAC5B,MAAM0D,MAAgB,GAAG,EAAE;QAC3B,MAAM+B,QAAoC,GAAG,EAAE;QAC/C,MAAMO,KAAK,GAAG,IAAI,CAACA,KAAK,IAAI,CAAC,CAAC;QAC9B;QACAD,YAAY,CAACE,OAAO,CAAEC,SAAS,IAAK;UAClC,IAAIC,cAAoB;UACxB,IAAIC,SAAwB,GAAG,IAAI;UACnC,IAAIC,QAAuB,GAAG,IAAI;UAClC,IAAIC,eAAe,GAAGvF,SAAS;UAC/B,MAAMwF,aAAqB,GACzBP,KAAK,CAACE,SAAS,CAACM,SAAS,CAAC,IAAIN,SAAS,CAACO,IAAI;UAE9C,MAAMC,OAAuB,GAAG,EAAE;UAClCR,SAAS,CAAC5G,IAAI,CAAC2G,OAAO,CAAEU,WAAW,IAAK;YACtC,IAAIC,QAAuB,GAAGD,WAAW,CAACtJ,KAAK;YAC/C,MAAMwJ,SAAS,GAAG,IAAIhI,IAAI,CAAC8H,WAAW,CAACG,YAAY,CAAC;YACpD,IAAI,CAACF,QAAQ,EAAE;cACbA,QAAQ,GAAG,IAAI;YACjB;YACA,IAAIC,SAAS,GAAG7G,OAAO,EAAE;cACvB;cACA;cACA;YACF;YACA,IAAIoG,SAAS,KAAK,IAAI,EAAE;cACtBA,SAAS,GAAGQ,QAAQ;cACpBP,QAAQ,GAAGM,WAAW,CAACI,cAAc;cACrCT,eAAe,GAAG,IAAIzH,IAAI,CAAC8H,WAAW,CAACG,YAAY,CAAC;YACtD,CAAC,MAAM,IAAIF,QAAQ,KAAKR,SAAS,EAAE;cACjCD,cAAc,GAAG,IAAItH,IAAI,CAAC8H,WAAW,CAACG,YAAY,CAAC;cAEnDJ,OAAO,CAACM,IAAI,CAAC;gBACX7C,KAAK,EAAEmC,eAAe;gBACtBpC,GAAG,EAAEiC,cAAc;gBACnBrC,KAAK,EAAEuC,QAAQ;gBACf7B,KAAK,EAAE5G,oBAAoB,CACzBwI,SAAS,EACTP,cAAc,EACd,IAAI,CAAC1G,IAAI,CAAC8H,MAAM,CAACf,SAAS,CAACM,SAAS,CACtC;cACF,CAAC,CAAC;cAEFJ,SAAS,GAAGQ,QAAQ;cACpBP,QAAQ,GAAGM,WAAW,CAACI,cAAc;cACrCT,eAAe,GAAGH,cAAc;YAClC;UACF,CAAC,CAAC;UAEF,IAAIC,SAAS,KAAK,IAAI,EAAE;YACtBM,OAAO,CAACM,IAAI,CAAC;cACX7C,KAAK,EAAEmC,eAAe;cACtBpC,GAAG,EAAElE,OAAO;cACZ8D,KAAK,EAAEuC,QAAQ;cACf7B,KAAK,EAAE5G,oBAAoB,CACzBwI,SAAS,EACTP,cAAc,EACd,IAAI,CAAC1G,IAAI,CAAC8H,MAAM,CAACf,SAAS,CAACM,SAAS,CACtC;YACF,CAAC,CAAC;UACJ;UACAf,QAAQ,CAACuB,IAAI,CAAC;YACZ1H,IAAI,EAAEoH,OAAO;YACb5C,KAAK,EAAEoC,SAAS,CAACM;UACnB,CAAC,CAAC;UACF9C,MAAM,CAACsD,IAAI,CAACT,aAAa,CAAC;QAC5B,CAAC,CAAC;QAEF,IAAI,CAACnH,UAAU,GAAG;UAChBsE,MAAM,EAAEA,MAAM;UACd+B,QAAQ,EAAEA;QACZ,CAAC;MACH;IAAC;MAAApH,IAAA;MAAA6I,MAAA;MAAA1I,GAAA;MAAAC,KAAA,EAED,SAAA0I,OAAA,EAAoC;QAClC,OAAOpK,GAAI;AACf;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GA/T4CE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}