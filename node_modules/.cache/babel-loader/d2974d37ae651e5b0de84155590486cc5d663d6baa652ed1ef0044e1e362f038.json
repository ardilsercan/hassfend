{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.fill.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.last-index-of.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.array.reverse.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.number.max-safe-integer.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.freeze.js\";\nimport \"core-js/modules/es.object.get-own-property-names.js\";\nimport \"core-js/modules/es.object.get-prototype-of.js\";\nimport \"core-js/modules/es.object.is-extensible.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.parse-float.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.string.starts-with.js\";\nimport \"core-js/modules/es.weak-map.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.reduce.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/*!\n * Chart.js v4.4.1\n * https://www.chartjs.org\n * (c) 2023 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as _color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as _getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\nvar Animator = /*#__PURE__*/function () {\n  function Animator() {\n    _classCallCheck(this, Animator);\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n  _createClass(Animator, [{\n    key: \"_notify\",\n    value: function _notify(chart, anims, date, type) {\n      var callbacks = anims.listeners[type];\n      var numSteps = anims.duration;\n      callbacks.forEach(function (fn) {\n        return fn({\n          chart: chart,\n          initial: anims.initial,\n          numSteps: numSteps,\n          currentStep: Math.min(date - anims.start, numSteps)\n        });\n      });\n    }\n  }, {\n    key: \"_refresh\",\n    value: function _refresh() {\n      var _this = this;\n      if (this._request) {\n        return;\n      }\n      this._running = true;\n      this._request = requestAnimFrame.call(window, function () {\n        _this._update();\n        _this._request = null;\n        if (_this._running) {\n          _this._refresh();\n        }\n      });\n    }\n  }, {\n    key: \"_update\",\n    value: function _update() {\n      var _this2 = this;\n      var date = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n      var remaining = 0;\n      this._charts.forEach(function (anims, chart) {\n        if (!anims.running || !anims.items.length) {\n          return;\n        }\n        var items = anims.items;\n        var i = items.length - 1;\n        var draw = false;\n        var item;\n        for (; i >= 0; --i) {\n          item = items[i];\n          if (item._active) {\n            if (item._total > anims.duration) {\n              anims.duration = item._total;\n            }\n            item.tick(date);\n            draw = true;\n          } else {\n            items[i] = items[items.length - 1];\n            items.pop();\n          }\n        }\n        if (draw) {\n          chart.draw();\n          _this2._notify(chart, anims, date, 'progress');\n        }\n        if (!items.length) {\n          anims.running = false;\n          _this2._notify(chart, anims, date, 'complete');\n          anims.initial = false;\n        }\n        remaining += items.length;\n      });\n      this._lastDate = date;\n      if (remaining === 0) {\n        this._running = false;\n      }\n    }\n  }, {\n    key: \"_getAnims\",\n    value: function _getAnims(chart) {\n      var charts = this._charts;\n      var anims = charts.get(chart);\n      if (!anims) {\n        anims = {\n          running: false,\n          initial: true,\n          items: [],\n          listeners: {\n            complete: [],\n            progress: []\n          }\n        };\n        charts.set(chart, anims);\n      }\n      return anims;\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(chart, event, cb) {\n      this._getAnims(chart).listeners[event].push(cb);\n    }\n  }, {\n    key: \"add\",\n    value: function add(chart, items) {\n      var _this$_getAnims$items;\n      if (!items || !items.length) {\n        return;\n      }\n      (_this$_getAnims$items = this._getAnims(chart).items).push.apply(_this$_getAnims$items, _toConsumableArray(items));\n    }\n  }, {\n    key: \"has\",\n    value: function has(chart) {\n      return this._getAnims(chart).items.length > 0;\n    }\n  }, {\n    key: \"start\",\n    value: function start(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims) {\n        return;\n      }\n      anims.running = true;\n      anims.start = Date.now();\n      anims.duration = anims.items.reduce(function (acc, cur) {\n        return Math.max(acc, cur._duration);\n      }, 0);\n      this._refresh();\n    }\n  }, {\n    key: \"running\",\n    value: function running(chart) {\n      if (!this._running) {\n        return false;\n      }\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.running || !anims.items.length) {\n        return false;\n      }\n      return true;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(chart) {\n      var anims = this._charts.get(chart);\n      if (!anims || !anims.items.length) {\n        return;\n      }\n      var items = anims.items;\n      var i = items.length - 1;\n      for (; i >= 0; --i) {\n        items[i].cancel();\n      }\n      anims.items = [];\n      this._notify(chart, anims, Date.now(), 'complete');\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(chart) {\n      return this._charts.delete(chart);\n    }\n  }]);\n  return Animator;\n}();\nvar animator = /* #__PURE__ */new Animator();\nvar transparent = 'transparent';\nvar interpolators = {\n  boolean: function boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  color: function color(from, to, factor) {\n    var c0 = _color(from || transparent);\n    var c1 = c0.valid && _color(to || transparent);\n    return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n  },\n  number: function number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\nvar Animation = /*#__PURE__*/function () {\n  function Animation(cfg, target, prop, to) {\n    _classCallCheck(this, Animation);\n    var currentValue = target[prop];\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    var from = resolve([cfg.from, currentValue, to]);\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || _typeof(from)];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n  _createClass(Animation, [{\n    key: \"active\",\n    value: function active() {\n      return this._active;\n    }\n  }, {\n    key: \"update\",\n    value: function update(cfg, to, date) {\n      if (this._active) {\n        this._notify(false);\n        var currentValue = this._target[this._prop];\n        var elapsed = date - this._start;\n        var remain = this._duration - elapsed;\n        this._start = date;\n        this._duration = Math.floor(Math.max(remain, cfg.duration));\n        this._total += elapsed;\n        this._loop = !!cfg.loop;\n        this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n        this._from = resolve([cfg.from, currentValue, to]);\n      }\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      if (this._active) {\n        this.tick(Date.now());\n        this._active = false;\n        this._notify(false);\n      }\n    }\n  }, {\n    key: \"tick\",\n    value: function tick(date) {\n      var elapsed = date - this._start;\n      var duration = this._duration;\n      var prop = this._prop;\n      var from = this._from;\n      var loop = this._loop;\n      var to = this._to;\n      var factor;\n      this._active = from !== to && (loop || elapsed < duration);\n      if (!this._active) {\n        this._target[prop] = to;\n        this._notify(true);\n        return;\n      }\n      if (elapsed < 0) {\n        this._target[prop] = from;\n        return;\n      }\n      factor = elapsed / duration % 2;\n      factor = loop && factor > 1 ? 2 - factor : factor;\n      factor = this._easing(Math.min(1, Math.max(0, factor)));\n      this._target[prop] = this._fn(from, to, factor);\n    }\n  }, {\n    key: \"wait\",\n    value: function wait() {\n      var promises = this._promises || (this._promises = []);\n      return new Promise(function (res, rej) {\n        promises.push({\n          res: res,\n          rej: rej\n        });\n      });\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(resolved) {\n      var method = resolved ? 'res' : 'rej';\n      var promises = this._promises || [];\n      for (var i = 0; i < promises.length; i++) {\n        promises[i][method]();\n      }\n    }\n  }]);\n  return Animation;\n}();\nvar Animations = /*#__PURE__*/function () {\n  function Animations(chart, config) {\n    _classCallCheck(this, Animations);\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n  _createClass(Animations, [{\n    key: \"configure\",\n    value: function configure(config) {\n      if (!isObject(config)) {\n        return;\n      }\n      var animationOptions = Object.keys(defaults.animation);\n      var animatedProps = this._properties;\n      Object.getOwnPropertyNames(config).forEach(function (key) {\n        var cfg = config[key];\n        if (!isObject(cfg)) {\n          return;\n        }\n        var resolved = {};\n        for (var _i = 0, _animationOptions = animationOptions; _i < _animationOptions.length; _i++) {\n          var option = _animationOptions[_i];\n          resolved[option] = cfg[option];\n        }\n        (isArray(cfg.properties) && cfg.properties || [key]).forEach(function (prop) {\n          if (prop === key || !animatedProps.has(prop)) {\n            animatedProps.set(prop, resolved);\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_animateOptions\",\n    value: function _animateOptions(target, values) {\n      var newOptions = values.options;\n      var options = resolveTargetOptions(target, newOptions);\n      if (!options) {\n        return [];\n      }\n      var animations = this._createAnimations(options, newOptions);\n      if (newOptions.$shared) {\n        awaitAll(target.options.$animations, newOptions).then(function () {\n          target.options = newOptions;\n        }, function () {});\n      }\n      return animations;\n    }\n  }, {\n    key: \"_createAnimations\",\n    value: function _createAnimations(target, values) {\n      var animatedProps = this._properties;\n      var animations = [];\n      var running = target.$animations || (target.$animations = {});\n      var props = Object.keys(values);\n      var date = Date.now();\n      var i;\n      for (i = props.length - 1; i >= 0; --i) {\n        var prop = props[i];\n        if (prop.charAt(0) === '$') {\n          continue;\n        }\n        if (prop === 'options') {\n          animations.push.apply(animations, _toConsumableArray(this._animateOptions(target, values)));\n          continue;\n        }\n        var value = values[prop];\n        var animation = running[prop];\n        var cfg = animatedProps.get(prop);\n        if (animation) {\n          if (cfg && animation.active()) {\n            animation.update(cfg, value, date);\n            continue;\n          } else {\n            animation.cancel();\n          }\n        }\n        if (!cfg || !cfg.duration) {\n          target[prop] = value;\n          continue;\n        }\n        running[prop] = animation = new Animation(cfg, target, prop, value);\n        animations.push(animation);\n      }\n      return animations;\n    }\n  }, {\n    key: \"update\",\n    value: function update(target, values) {\n      if (this._properties.size === 0) {\n        Object.assign(target, values);\n        return;\n      }\n      var animations = this._createAnimations(target, values);\n      if (animations.length) {\n        animator.add(this._chart, animations);\n        return true;\n      }\n    }\n  }]);\n  return Animations;\n}();\nfunction awaitAll(animations, properties) {\n  var running = [];\n  var keys = Object.keys(properties);\n  for (var i = 0; i < keys.length; i++) {\n    var anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  var options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    target.options = options = Object.assign({}, options, {\n      $shared: false,\n      $animations: {}\n    });\n  }\n  return options;\n}\nfunction scaleClip(scale, allowedOverflow) {\n  var opts = scale && scale.options || {};\n  var reverse = opts.reverse;\n  var min = opts.min === undefined ? allowedOverflow : 0;\n  var max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  var x = scaleClip(xScale, allowedOverflow);\n  var y = scaleClip(yScale, allowedOverflow);\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\nfunction toClip(value) {\n  var t, r, b, l;\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  var keys = [];\n  var metasets = chart._getSortedDatasetMetas(filterVisible);\n  var i, ilen;\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\nfunction _applyStack(stack, value, dsIndex) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var keys = stack.keys;\n  var singleMode = options.mode === 'single';\n  var i, ilen, datasetIndex, otherValue;\n  if (value === null) {\n    return;\n  }\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\nfunction convertObjectDataToArray(data) {\n  var keys = Object.keys(data);\n  var adata = new Array(keys.length);\n  var i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\nfunction isStacked(scale, meta) {\n  var stacked = scale && scale.options.stacked;\n  return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n  return \"\".concat(indexScale.id, \".\").concat(valueScale.id, \".\").concat(meta.stack || meta.type);\n}\nfunction getUserBounds(scale) {\n  var _scale$getUserBounds = scale.getUserBounds(),\n    min = _scale$getUserBounds.min,\n    max = _scale$getUserBounds.max,\n    minDefined = _scale$getUserBounds.minDefined,\n    maxDefined = _scale$getUserBounds.maxDefined;\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  var subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  var _iterator = _createForOfIteratorHelper(vScale.getMatchingVisibleMetas(type).reverse()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var meta = _step.value;\n      var value = stack[meta.index];\n      if (positive && value > 0 || !positive && value < 0) {\n        return meta.index;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return null;\n}\nfunction updateStacks(controller, parsed) {\n  var chart = controller.chart,\n    meta = controller._cachedMeta;\n  var stacks = chart._stacks || (chart._stacks = {});\n  var iScale = meta.iScale,\n    vScale = meta.vScale,\n    datasetIndex = meta.index;\n  var iAxis = iScale.axis;\n  var vAxis = vScale.axis;\n  var key = getStackKey(iScale, vScale, meta);\n  var ilen = parsed.length;\n  var stack;\n  for (var i = 0; i < ilen; ++i) {\n    var item = parsed[i];\n    var _index = item[iAxis],\n      value = item[vAxis];\n    var itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, _index);\n    stack[datasetIndex] = value;\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n    var visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\nfunction getFirstScaleId(chart, axis) {\n  var scales = chart.scales;\n  return Object.keys(scales).filter(function (key) {\n    return scales[key].axis === axis;\n  }).shift();\n}\nfunction createDatasetContext(parent, index) {\n  return createContext(parent, {\n    active: false,\n    dataset: undefined,\n    datasetIndex: index,\n    index: index,\n    mode: 'default',\n    type: 'dataset'\n  });\n}\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element: element,\n    index: index,\n    mode: 'default',\n    type: 'data'\n  });\n}\nfunction clearStacks(meta, items) {\n  var datasetIndex = meta.controller.index;\n  var axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n  items = items || meta._parsed;\n  var _iterator2 = _createForOfIteratorHelper(items),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var parsed = _step2.value;\n      var stacks = parsed._stacks;\n      if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n        return;\n      }\n      delete stacks[axis][datasetIndex];\n      if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n        delete stacks[axis]._visualValues[datasetIndex];\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n}\nvar isDirectUpdateMode = function isDirectUpdateMode(mode) {\n  return mode === 'reset' || mode === 'none';\n};\nvar cloneIfNotShared = function cloneIfNotShared(cached, shared) {\n  return shared ? cached : Object.assign({}, cached);\n};\nvar createStack = function createStack(canStack, meta, chart) {\n  return canStack && !meta.hidden && meta._stacked && {\n    keys: getSortedDatasetIndices(chart, true),\n    values: null\n  };\n};\nvar DatasetController = /*#__PURE__*/function () {\n  function DatasetController(chart, datasetIndex) {\n    _classCallCheck(this, DatasetController);\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = (this instanceof DatasetController ? this.constructor : void 0).datasetElementType;\n    this.dataElementType = (this instanceof DatasetController ? this.constructor : void 0).dataElementType;\n    this.initialize();\n  }\n  _createClass(DatasetController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      var meta = this._cachedMeta;\n      this.configure();\n      this.linkScales();\n      meta._stacked = isStacked(meta.vScale, meta);\n      this.addElements();\n      if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n        console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n      }\n    }\n  }, {\n    key: \"updateIndex\",\n    value: function updateIndex(datasetIndex) {\n      if (this.index !== datasetIndex) {\n        clearStacks(this._cachedMeta);\n      }\n      this.index = datasetIndex;\n    }\n  }, {\n    key: \"linkScales\",\n    value: function linkScales() {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var chooseId = function chooseId(axis, x, y, r) {\n        return axis === 'x' ? x : axis === 'r' ? r : y;\n      };\n      var xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n      var yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n      var rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n      var indexAxis = meta.indexAxis;\n      var iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n      var vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n      meta.xScale = this.getScaleForId(xid);\n      meta.yScale = this.getScaleForId(yid);\n      meta.rScale = this.getScaleForId(rid);\n      meta.iScale = this.getScaleForId(iid);\n      meta.vScale = this.getScaleForId(vid);\n    }\n  }, {\n    key: \"getDataset\",\n    value: function getDataset() {\n      return this.chart.data.datasets[this.index];\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta() {\n      return this.chart.getDatasetMeta(this.index);\n    }\n  }, {\n    key: \"getScaleForId\",\n    value: function getScaleForId(scaleID) {\n      return this.chart.scales[scaleID];\n    }\n  }, {\n    key: \"_getOtherScale\",\n    value: function _getOtherScale(scale) {\n      var meta = this._cachedMeta;\n      return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update('reset');\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      var meta = this._cachedMeta;\n      if (this._data) {\n        unlistenArrayEvents(this._data, this);\n      }\n      if (meta._stacked) {\n        clearStacks(meta);\n      }\n    }\n  }, {\n    key: \"_dataCheck\",\n    value: function _dataCheck() {\n      var dataset = this.getDataset();\n      var data = dataset.data || (dataset.data = []);\n      var _data = this._data;\n      if (isObject(data)) {\n        this._data = convertObjectDataToArray(data);\n      } else if (_data !== data) {\n        if (_data) {\n          unlistenArrayEvents(_data, this);\n          var meta = this._cachedMeta;\n          clearStacks(meta);\n          meta._parsed = [];\n        }\n        if (data && Object.isExtensible(data)) {\n          listenArrayEvents(data, this);\n        }\n        this._syncList = [];\n        this._data = data;\n      }\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var meta = this._cachedMeta;\n      this._dataCheck();\n      if (this.datasetElementType) {\n        meta.dataset = new this.datasetElementType();\n      }\n    }\n  }, {\n    key: \"buildOrUpdateElements\",\n    value: function buildOrUpdateElements(resetNewElements) {\n      var meta = this._cachedMeta;\n      var dataset = this.getDataset();\n      var stackChanged = false;\n      this._dataCheck();\n      var oldStacked = meta._stacked;\n      meta._stacked = isStacked(meta.vScale, meta);\n      if (meta.stack !== dataset.stack) {\n        stackChanged = true;\n        clearStacks(meta);\n        meta.stack = dataset.stack;\n      }\n      this._resyncElements(resetNewElements);\n      if (stackChanged || oldStacked !== meta._stacked) {\n        updateStacks(this, meta._parsed);\n      }\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var config = this.chart.config;\n      var scopeKeys = config.datasetScopeKeys(this._type);\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n      this.options = config.createResolver(scopes, this.getContext());\n      this._parsing = this.options.parsing;\n      this._cachedDataOpts = {};\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var meta = this._cachedMeta,\n        data = this._data;\n      var iScale = meta.iScale,\n        _stacked = meta._stacked;\n      var iAxis = iScale.axis;\n      var sorted = start === 0 && count === data.length ? true : meta._sorted;\n      var prev = start > 0 && meta._parsed[start - 1];\n      var i, cur, parsed;\n      if (this._parsing === false) {\n        meta._parsed = data;\n        meta._sorted = true;\n        parsed = data;\n      } else {\n        if (isArray(data[start])) {\n          parsed = this.parseArrayData(meta, data, start, count);\n        } else if (isObject(data[start])) {\n          parsed = this.parseObjectData(meta, data, start, count);\n        } else {\n          parsed = this.parsePrimitiveData(meta, data, start, count);\n        }\n        var isNotInOrderComparedToPrev = function isNotInOrderComparedToPrev() {\n          return cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n        };\n        for (i = 0; i < count; ++i) {\n          meta._parsed[i + start] = cur = parsed[i];\n          if (sorted) {\n            if (isNotInOrderComparedToPrev()) {\n              sorted = false;\n            }\n            prev = cur;\n          }\n        }\n        meta._sorted = sorted;\n      }\n      if (_stacked) {\n        updateStacks(this, parsed);\n      }\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var labels = iScale.getLabels();\n      var singleScale = iScale === vScale;\n      var parsed = new Array(count);\n      var i, ilen, index;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        parsed[i] = _defineProperty(_defineProperty({}, iAxis, singleScale || iScale.parse(labels[index], index)), vAxis, vScale.parse(data[index], index));\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(item[0], index),\n          y: yScale.parse(item[1], index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var _this$_parsing = this._parsing,\n        _this$_parsing$xAxisK = _this$_parsing.xAxisKey,\n        xAxisKey = _this$_parsing$xAxisK === void 0 ? 'x' : _this$_parsing$xAxisK,\n        _this$_parsing$yAxisK = _this$_parsing.yAxisKey,\n        yAxisKey = _this$_parsing$yAxisK === void 0 ? 'y' : _this$_parsing$yAxisK;\n      var parsed = new Array(count);\n      var i, ilen, index, item;\n      for (i = 0, ilen = count; i < ilen; ++i) {\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n          x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n          y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n        };\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getParsed\",\n    value: function getParsed(index) {\n      return this._cachedMeta._parsed[index];\n    }\n  }, {\n    key: \"getDataElement\",\n    value: function getDataElement(index) {\n      return this._cachedMeta.data[index];\n    }\n  }, {\n    key: \"applyStack\",\n    value: function applyStack(scale, parsed, mode) {\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var value = parsed[scale.axis];\n      var stack = {\n        keys: getSortedDatasetIndices(chart, true),\n        values: parsed._stacks[scale.axis]._visualValues\n      };\n      return _applyStack(stack, value, meta.index, {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      var parsedValue = parsed[scale.axis];\n      var value = parsedValue === null ? NaN : parsedValue;\n      var values = stack && parsed._stacks[scale.axis];\n      if (stack && values) {\n        stack.values = values;\n        value = _applyStack(stack, parsedValue, this._cachedMeta.index);\n      }\n      range.min = Math.min(range.min, value);\n      range.max = Math.max(range.max, value);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(scale, canStack) {\n      var meta = this._cachedMeta;\n      var _parsed = meta._parsed;\n      var sorted = meta._sorted && scale === meta.iScale;\n      var ilen = _parsed.length;\n      var otherScale = this._getOtherScale(scale);\n      var stack = createStack(canStack, meta, this.chart);\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      var _getUserBounds = getUserBounds(otherScale),\n        otherMin = _getUserBounds.min,\n        otherMax = _getUserBounds.max;\n      var i, parsed;\n      function _skip() {\n        parsed = _parsed[i];\n        var otherValue = parsed[otherScale.axis];\n        return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n      }\n      for (i = 0; i < ilen; ++i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        if (sorted) {\n          break;\n        }\n      }\n      if (sorted) {\n        for (i = ilen - 1; i >= 0; --i) {\n          if (_skip()) {\n            continue;\n          }\n          this.updateRangeFromParsed(range, scale, parsed, stack);\n          break;\n        }\n      }\n      return range;\n    }\n  }, {\n    key: \"getAllParsedValues\",\n    value: function getAllParsedValues(scale) {\n      var parsed = this._cachedMeta._parsed;\n      var values = [];\n      var i, ilen, value;\n      for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n        value = parsed[i][scale.axis];\n        if (isNumberFinite(value)) {\n          values.push(value);\n        }\n      }\n      return values;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return false;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n        value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n      };\n    }\n  }, {\n    key: \"_update\",\n    value: function _update(mode) {\n      var meta = this._cachedMeta;\n      this.update(mode || 'default');\n      meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {}\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this._ctx;\n      var chart = this.chart;\n      var meta = this._cachedMeta;\n      var elements = meta.data || [];\n      var area = chart.chartArea;\n      var active = [];\n      var start = this._drawStart || 0;\n      var count = this._drawCount || elements.length - start;\n      var drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n      var i;\n      if (meta.dataset) {\n        meta.dataset.draw(ctx, area, start, count);\n      }\n      for (i = start; i < start + count; ++i) {\n        var element = elements[i];\n        if (element.hidden) {\n          continue;\n        }\n        if (element.active && drawActiveElementsOnTop) {\n          active.push(element);\n        } else {\n          element.draw(ctx, area);\n        }\n      }\n      for (i = 0; i < active.length; ++i) {\n        active[i].draw(ctx, area);\n      }\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(index, active) {\n      var mode = active ? 'active' : 'default';\n      return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index, active, mode) {\n      var dataset = this.getDataset();\n      var context;\n      if (index >= 0 && index < this._cachedMeta.data.length) {\n        var element = this._cachedMeta.data[index];\n        context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n        context.parsed = this.getParsed(index);\n        context.raw = dataset.data[index];\n        context.index = context.dataIndex = index;\n      } else {\n        context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n        context.dataset = dataset;\n        context.index = context.datasetIndex = this.index;\n      }\n      context.active = !!active;\n      context.mode = mode;\n      return context;\n    }\n  }, {\n    key: \"resolveDatasetElementOptions\",\n    value: function resolveDatasetElementOptions(mode) {\n      return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n  }, {\n    key: \"_resolveElementOptions\",\n    value: function _resolveElementOptions(elementType) {\n      var _this3 = this;\n      var mode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';\n      var index = arguments.length > 2 ? arguments[2] : undefined;\n      var active = mode === 'active';\n      var cache = this._cachedDataOpts;\n      var cacheKey = elementType + '-' + mode;\n      var cached = cache[cacheKey];\n      var sharing = this.enableOptionSharing && defined(index);\n      if (cached) {\n        return cloneIfNotShared(cached, sharing);\n      }\n      var config = this.chart.config;\n      var scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n      var prefixes = active ? [\"\".concat(elementType, \"Hover\"), 'hover', elementType, ''] : [elementType, ''];\n      var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      var names = Object.keys(defaults.elements[elementType]);\n      var context = function context() {\n        return _this3.getContext(index, active, mode);\n      };\n      var values = config.resolveNamedOptions(scopes, names, context, prefixes);\n      if (values.$shared) {\n        values.$shared = sharing;\n        cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n      }\n      return values;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations(index, transition, active) {\n      var chart = this.chart;\n      var cache = this._cachedDataOpts;\n      var cacheKey = \"animation-\".concat(transition);\n      var cached = cache[cacheKey];\n      if (cached) {\n        return cached;\n      }\n      var options;\n      if (chart.options.animation !== false) {\n        var config = this.chart.config;\n        var scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n        var scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        options = config.createResolver(scopes, this.getContext(index, active, transition));\n      }\n      var animations = new Animations(chart, options && options.animations);\n      if (options && options._cacheable) {\n        cache[cacheKey] = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getSharedOptions\",\n    value: function getSharedOptions(options) {\n      if (!options.$shared) {\n        return;\n      }\n      return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n  }, {\n    key: \"includeOptions\",\n    value: function includeOptions(mode, sharedOptions) {\n      return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n  }, {\n    key: \"_getSharedOptions\",\n    value: function _getSharedOptions(start, mode) {\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var previouslySharedOptions = this._sharedOptions;\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n      return {\n        sharedOptions: sharedOptions,\n        includeOptions: includeOptions\n      };\n    }\n  }, {\n    key: \"updateElement\",\n    value: function updateElement(element, index, properties, mode) {\n      if (isDirectUpdateMode(mode)) {\n        Object.assign(element, properties);\n      } else {\n        this._resolveAnimations(index, mode).update(element, properties);\n      }\n    }\n  }, {\n    key: \"updateSharedOptions\",\n    value: function updateSharedOptions(sharedOptions, mode, newOptions) {\n      if (sharedOptions && !isDirectUpdateMode(mode)) {\n        this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n      }\n    }\n  }, {\n    key: \"_setStyle\",\n    value: function _setStyle(element, index, mode, active) {\n      element.active = active;\n      var options = this.getStyle(index, active);\n      this._resolveAnimations(index, mode, active).update(element, {\n        options: !active && this.getSharedOptions(options) || options\n      });\n    }\n  }, {\n    key: \"removeHoverStyle\",\n    value: function removeHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', false);\n    }\n  }, {\n    key: \"setHoverStyle\",\n    value: function setHoverStyle(element, datasetIndex, index) {\n      this._setStyle(element, index, 'active', true);\n    }\n  }, {\n    key: \"_removeDatasetHoverStyle\",\n    value: function _removeDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', false);\n      }\n    }\n  }, {\n    key: \"_setDatasetHoverStyle\",\n    value: function _setDatasetHoverStyle() {\n      var element = this._cachedMeta.dataset;\n      if (element) {\n        this._setStyle(element, undefined, 'active', true);\n      }\n    }\n  }, {\n    key: \"_resyncElements\",\n    value: function _resyncElements(resetNewElements) {\n      var data = this._data;\n      var elements = this._cachedMeta.data;\n      var _iterator3 = _createForOfIteratorHelper(this._syncList),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _step3$value = _slicedToArray(_step3.value, 3),\n            method = _step3$value[0],\n            arg1 = _step3$value[1],\n            arg2 = _step3$value[2];\n          this[method](arg1, arg2);\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      this._syncList = [];\n      var numMeta = elements.length;\n      var numData = data.length;\n      var count = Math.min(numData, numMeta);\n      if (count) {\n        this.parse(0, count);\n      }\n      if (numData > numMeta) {\n        this._insertElements(numMeta, numData - numMeta, resetNewElements);\n      } else if (numData < numMeta) {\n        this._removeElements(numData, numMeta - numData);\n      }\n    }\n  }, {\n    key: \"_insertElements\",\n    value: function _insertElements(start, count) {\n      var resetNewElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      var meta = this._cachedMeta;\n      var data = meta.data;\n      var end = start + count;\n      var i;\n      var move = function move(arr) {\n        arr.length += count;\n        for (i = arr.length - 1; i >= end; i--) {\n          arr[i] = arr[i - count];\n        }\n      };\n      move(data);\n      for (i = start; i < end; ++i) {\n        data[i] = new this.dataElementType();\n      }\n      if (this._parsing) {\n        move(meta._parsed);\n      }\n      this.parse(start, count);\n      if (resetNewElements) {\n        this.updateElements(data, start, count, 'reset');\n      }\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(element, start, count, mode) {}\n  }, {\n    key: \"_removeElements\",\n    value: function _removeElements(start, count) {\n      var meta = this._cachedMeta;\n      if (this._parsing) {\n        var removed = meta._parsed.splice(start, count);\n        if (meta._stacked) {\n          clearStacks(meta, removed);\n        }\n      }\n      meta.data.splice(start, count);\n    }\n  }, {\n    key: \"_sync\",\n    value: function _sync(args) {\n      if (this._parsing) {\n        this._syncList.push(args);\n      } else {\n        var _args2 = _slicedToArray(args, 3),\n          method = _args2[0],\n          arg1 = _args2[1],\n          arg2 = _args2[2];\n        this[method](arg1, arg2);\n      }\n      this.chart._dataChanges.push([this.index].concat(_toConsumableArray(args)));\n    }\n  }, {\n    key: \"_onDataPush\",\n    value: function _onDataPush() {\n      var count = arguments.length;\n      this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n    }\n  }, {\n    key: \"_onDataPop\",\n    value: function _onDataPop() {\n      this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n    }\n  }, {\n    key: \"_onDataShift\",\n    value: function _onDataShift() {\n      this._sync(['_removeElements', 0, 1]);\n    }\n  }, {\n    key: \"_onDataSplice\",\n    value: function _onDataSplice(start, count) {\n      if (count) {\n        this._sync(['_removeElements', start, count]);\n      }\n      var newCount = arguments.length - 2;\n      if (newCount) {\n        this._sync(['_insertElements', start, newCount]);\n      }\n    }\n  }, {\n    key: \"_onDataUnshift\",\n    value: function _onDataUnshift() {\n      this._sync(['_insertElements', 0, arguments.length]);\n    }\n  }]);\n  return DatasetController;\n}();\nDatasetController.defaults = {};\nDatasetController.datasetElementType = null;\nDatasetController.dataElementType = null;\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    var visibleMetas = scale.getMatchingVisibleMetas(type);\n    var values = [];\n    for (var i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort(function (a, b) {\n      return a - b;\n    }));\n  }\n  return scale._cache.$bar;\n}\nfunction computeMinSampleSize(meta) {\n  var scale = meta.iScale;\n  var values = getAllScaleValues(scale, meta.type);\n  var min = scale._length;\n  var i, ilen, curr, prev;\n  var updateMinAndPrev = function updateMinAndPrev() {\n    if (curr === 32767 || curr === -32768) {\n      return;\n    }\n    if (defined(prev)) {\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n  return min;\n}\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  var thickness = options.barThickness;\n  var size, ratio;\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n  return {\n    chunk: size / stackCount,\n    ratio: ratio,\n    start: ruler.pixels[index] - size / 2\n  };\n}\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  var pixels = ruler.pixels;\n  var curr = pixels[index];\n  var prev = index > 0 ? pixels[index - 1] : null;\n  var next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  var percent = options.categoryPercentage;\n  if (prev === null) {\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n  if (next === null) {\n    next = curr + curr - prev;\n  }\n  var start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  var size = Math.abs(next - prev) / 2 * percent;\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start: start\n  };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n  var startValue = vScale.parse(entry[0], i);\n  var endValue = vScale.parse(entry[1], i);\n  var min = Math.min(startValue, endValue);\n  var max = Math.max(startValue, endValue);\n  var barStart = min;\n  var barEnd = max;\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n  item[vScale.axis] = barEnd;\n  item._custom = {\n    barStart: barStart,\n    barEnd: barEnd,\n    start: startValue,\n    end: endValue,\n    min: min,\n    max: max\n  };\n}\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  var iScale = meta.iScale;\n  var vScale = meta.vScale;\n  var labels = iScale.getLabels();\n  var singleScale = iScale === vScale;\n  var parsed = [];\n  var i, ilen, item, entry;\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n  var reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {\n    start: start,\n    end: end,\n    reverse: reverse,\n    top: top,\n    bottom: bottom\n  };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n  var edge = options.borderSkipped;\n  var res = {};\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n  if (edge === true) {\n    properties.borderSkipped = {\n      top: true,\n      right: true,\n      bottom: true,\n      left: true\n    };\n    return;\n  }\n  var _borderProps = borderProps(properties),\n    start = _borderProps.start,\n    end = _borderProps.end,\n    reverse = _borderProps.reverse,\n    top = _borderProps.top,\n    bottom = _borderProps.bottom;\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, _ref, ratio) {\n  var inflateAmount = _ref.inflateAmount;\n  properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nvar BarController = /*#__PURE__*/function (_DatasetController2) {\n  _inherits(BarController, _DatasetController2);\n  function BarController() {\n    _classCallCheck(this, BarController);\n    return _callSuper(this, BarController, arguments);\n  }\n  _createClass(BarController, [{\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      return parseArrayOrPrimitive(meta, data, start, count);\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var _this$_parsing2 = this._parsing,\n        _this$_parsing2$xAxis = _this$_parsing2.xAxisKey,\n        xAxisKey = _this$_parsing2$xAxis === void 0 ? 'x' : _this$_parsing2$xAxis,\n        _this$_parsing2$yAxis = _this$_parsing2.yAxisKey,\n        yAxisKey = _this$_parsing2$yAxis === void 0 ? 'y' : _this$_parsing2$yAxis;\n      var iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n      var parsed = [];\n      var i, ilen, item, obj;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        obj = data[i];\n        item = {};\n        item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n        parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n      }\n      return parsed;\n    }\n  }, {\n    key: \"updateRangeFromParsed\",\n    value: function updateRangeFromParsed(range, scale, parsed, stack) {\n      _get(_getPrototypeOf(BarController.prototype), \"updateRangeFromParsed\", this).call(this, range, scale, parsed, stack);\n      var custom = parsed._custom;\n      if (custom && scale === this._cachedMeta.vScale) {\n        range.min = Math.min(range.min, custom.min);\n        range.max = Math.max(range.max, custom.max);\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale,\n        vScale = meta.vScale;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n      return {\n        label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n        value: value\n      };\n    }\n  }, {\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BarController.prototype), \"initialize\", this).call(this);\n      var meta = this._cachedMeta;\n      meta.stack = this.getDataset().stack;\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(bars, start, count, mode) {\n      var reset = mode === 'reset';\n      var index = this.index,\n        vScale = this._cachedMeta.vScale;\n      var base = vScale.getBasePixel();\n      var horizontal = vScale.isHorizontal();\n      var ruler = this._getRuler();\n      var _this$_getSharedOptio = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio.sharedOptions,\n        includeOptions = _this$_getSharedOptio.includeOptions;\n      for (var i = start; i < start + count; i++) {\n        var parsed = this.getParsed(i);\n        var vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n          base: base,\n          head: base\n        } : this._calculateBarValuePixels(i);\n        var ipixels = this._calculateBarIndexPixels(i, ruler);\n        var stack = (parsed._stacks || {})[vScale.axis];\n        var properties = {\n          horizontal: horizontal,\n          base: vpixels.base,\n          enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n          x: horizontal ? vpixels.head : ipixels.center,\n          y: horizontal ? ipixels.center : vpixels.head,\n          height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n          width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n        }\n        var options = properties.options || bars[i].options;\n        setBorderSkipped(properties, options, stack, index);\n        setInflateAmount(properties, options, ruler.ratio);\n        this.updateElement(bars[i], i, properties, mode);\n      }\n    }\n  }, {\n    key: \"_getStacks\",\n    value: function _getStacks(last, dataIndex) {\n      var iScale = this._cachedMeta.iScale;\n      var metasets = iScale.getMatchingVisibleMetas(this._type).filter(function (meta) {\n        return meta.controller.options.grouped;\n      });\n      var stacked = iScale.options.stacked;\n      var stacks = [];\n      var skipNull = function skipNull(meta) {\n        var parsed = meta.controller.getParsed(dataIndex);\n        var val = parsed && parsed[meta.vScale.axis];\n        if (isNullOrUndef(val) || isNaN(val)) {\n          return true;\n        }\n      };\n      var _iterator4 = _createForOfIteratorHelper(metasets),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var meta = _step4.value;\n          if (dataIndex !== undefined && skipNull(meta)) {\n            continue;\n          }\n          if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n            stacks.push(meta.stack);\n          }\n          if (meta.index === last) {\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      if (!stacks.length) {\n        stacks.push(undefined);\n      }\n      return stacks;\n    }\n  }, {\n    key: \"_getStackCount\",\n    value: function _getStackCount(index) {\n      return this._getStacks(undefined, index).length;\n    }\n  }, {\n    key: \"_getStackIndex\",\n    value: function _getStackIndex(datasetIndex, name, dataIndex) {\n      var stacks = this._getStacks(datasetIndex, dataIndex);\n      var index = name !== undefined ? stacks.indexOf(name) : -1;\n      return index === -1 ? stacks.length - 1 : index;\n    }\n  }, {\n    key: \"_getRuler\",\n    value: function _getRuler() {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var iScale = meta.iScale;\n      var pixels = [];\n      var i, ilen;\n      for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n        pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n      }\n      var barThickness = opts.barThickness;\n      var min = barThickness || computeMinSampleSize(meta);\n      return {\n        min: min,\n        pixels: pixels,\n        start: iScale._startPixel,\n        end: iScale._endPixel,\n        stackCount: this._getStackCount(),\n        scale: iScale,\n        grouped: opts.grouped,\n        ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n      };\n    }\n  }, {\n    key: \"_calculateBarValuePixels\",\n    value: function _calculateBarValuePixels(index) {\n      var _this$_cachedMeta = this._cachedMeta,\n        vScale = _this$_cachedMeta.vScale,\n        _stacked = _this$_cachedMeta._stacked,\n        datasetIndex = _this$_cachedMeta.index,\n        _this$options = this.options,\n        baseValue = _this$options.base,\n        minBarLength = _this$options.minBarLength;\n      var actualBase = baseValue || 0;\n      var parsed = this.getParsed(index);\n      var custom = parsed._custom;\n      var floating = isFloatBar(custom);\n      var value = parsed[vScale.axis];\n      var start = 0;\n      var length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n      var head, size;\n      if (length !== value) {\n        start = length - value;\n        length = value;\n      }\n      if (floating) {\n        value = custom.barStart;\n        length = custom.barEnd - custom.barStart;\n        if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n          start = 0;\n        }\n        start += value;\n      }\n      var startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n      var base = vScale.getPixelForValue(startValue);\n      if (this.chart.getDataVisibility(index)) {\n        head = vScale.getPixelForValue(start + length);\n      } else {\n        head = base;\n      }\n      size = head - base;\n      if (Math.abs(size) < minBarLength) {\n        size = barSign(size, vScale, actualBase) * minBarLength;\n        if (value === actualBase) {\n          base -= size / 2;\n        }\n        var startPixel = vScale.getPixelForDecimal(0);\n        var endPixel = vScale.getPixelForDecimal(1);\n        var min = Math.min(startPixel, endPixel);\n        var max = Math.max(startPixel, endPixel);\n        base = Math.max(Math.min(base, max), min);\n        head = base + size;\n        if (_stacked && !floating) {\n          parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n        }\n      }\n      if (base === vScale.getPixelForValue(actualBase)) {\n        var halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n        base += halfGrid;\n        size -= halfGrid;\n      }\n      return {\n        size: size,\n        base: base,\n        head: head,\n        center: head + size / 2\n      };\n    }\n  }, {\n    key: \"_calculateBarIndexPixels\",\n    value: function _calculateBarIndexPixels(index, ruler) {\n      var scale = ruler.scale;\n      var options = this.options;\n      var skipNull = options.skipNull;\n      var maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n      var center, size;\n      if (ruler.grouped) {\n        var stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n        var range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n        var stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n        center = range.start + range.chunk * stackIndex + range.chunk / 2;\n        size = Math.min(maxBarThickness, range.chunk * range.ratio);\n      } else {\n        center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n        size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n      }\n      return {\n        base: center - size / 2,\n        head: center + size / 2,\n        center: center,\n        size: size\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      var vScale = meta.vScale;\n      var rects = meta.data;\n      var ilen = rects.length;\n      var i = 0;\n      for (; i < ilen; ++i) {\n        if (this.getParsed(i)[vScale.axis] !== null) {\n          rects[i].draw(this._ctx);\n        }\n      }\n    }\n  }]);\n  return BarController;\n}(DatasetController);\nBarController.id = 'bar';\nBarController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'bar',\n  categoryPercentage: 0.8,\n  barPercentage: 0.9,\n  grouped: true,\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'base', 'width', 'height']\n    }\n  }\n};\nBarController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category',\n      offset: true,\n      grid: {\n        offset: true\n      }\n    },\n    _value_: {\n      type: 'linear',\n      beginAtZero: true\n    }\n  }\n};\nvar BubbleController = /*#__PURE__*/function (_DatasetController3) {\n  _inherits(BubbleController, _DatasetController3);\n  function BubbleController() {\n    _classCallCheck(this, BubbleController);\n    return _callSuper(this, BubbleController, arguments);\n  }\n  _createClass(BubbleController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      _get(_getPrototypeOf(BubbleController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"parsePrimitiveData\",\n    value: function parsePrimitiveData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parsePrimitiveData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseArrayData\",\n    value: function parseArrayData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseArrayData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      var parsed = _get(_getPrototypeOf(BubbleController.prototype), \"parseObjectData\", this).call(this, meta, data, start, count);\n      for (var i = 0; i < parsed.length; i++) {\n        var item = data[start + i];\n        parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n      }\n      return parsed;\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var data = this._cachedMeta.data;\n      var max = 0;\n      for (var i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      var r = parsed._custom;\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var points = this._cachedMeta.data;\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta2 = this._cachedMeta,\n        iScale = _this$_cachedMeta2.iScale,\n        vScale = _this$_cachedMeta2.vScale;\n      var _this$_getSharedOptio2 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio2.sharedOptions,\n        includeOptions = _this$_getSharedOptio2.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var parsed = !reset && this.getParsed(i);\n        var properties = {};\n        var iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n        var vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel);\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n          if (reset) {\n            properties.options.radius = 0;\n          }\n        }\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"resolveDataElementOptions\",\n    value: function resolveDataElementOptions(index, mode) {\n      var parsed = this.getParsed(index);\n      var values = _get(_getPrototypeOf(BubbleController.prototype), \"resolveDataElementOptions\", this).call(this, index, mode);\n      if (values.$shared) {\n        values = Object.assign({}, values, {\n          $shared: false\n        });\n      }\n      var radius = values.radius;\n      if (mode !== 'active') {\n        values.radius = 0;\n      }\n      values.radius += valueOrDefault(parsed && parsed._custom, radius);\n      return values;\n    }\n  }]);\n  return BubbleController;\n}(DatasetController);\nBubbleController.id = 'bubble';\nBubbleController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'borderWidth', 'radius']\n    }\n  }\n};\nBubbleController.overrides = {\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  var ratioX = 1;\n  var ratioY = 1;\n  var offsetX = 0;\n  var offsetY = 0;\n  if (circumference < TAU) {\n    var startAngle = rotation;\n    var endAngle = startAngle + circumference;\n    var startX = Math.cos(startAngle);\n    var startY = Math.sin(startAngle);\n    var endX = Math.cos(endAngle);\n    var endY = Math.sin(endAngle);\n    var calcMax = function calcMax(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    };\n    var calcMin = function calcMin(angle, a, b) {\n      return _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    };\n    var maxX = calcMax(0, startX, endX);\n    var maxY = calcMax(HALF_PI, startY, endY);\n    var minX = calcMin(PI, startX, endX);\n    var minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {\n    ratioX: ratioX,\n    ratioY: ratioY,\n    offsetX: offsetX,\n    offsetY: offsetY\n  };\n}\nvar DoughnutController = /*#__PURE__*/function (_DatasetController4) {\n  _inherits(DoughnutController, _DatasetController4);\n  function DoughnutController(chart, datasetIndex) {\n    var _this4;\n    _classCallCheck(this, DoughnutController);\n    _this4 = _callSuper(this, DoughnutController, [chart, datasetIndex]);\n    _this4.enableOptionSharing = true;\n    _this4.innerRadius = undefined;\n    _this4.outerRadius = undefined;\n    _this4.offsetX = undefined;\n    _this4.offsetY = undefined;\n    return _this4;\n  }\n  _createClass(DoughnutController, [{\n    key: \"linkScales\",\n    value: function linkScales() {}\n  }, {\n    key: \"parse\",\n    value: function parse(start, count) {\n      var data = this.getDataset().data;\n      var meta = this._cachedMeta;\n      if (this._parsing === false) {\n        meta._parsed = data;\n      } else {\n        var getter = function getter(i) {\n          return +data[i];\n        };\n        if (isObject(data[start])) {\n          var _this$_parsing$key = this._parsing.key,\n            key = _this$_parsing$key === void 0 ? 'value' : _this$_parsing$key;\n          getter = function getter(i) {\n            return +resolveObjectKey(data[i], key);\n          };\n        }\n        var i, ilen;\n        for (i = start, ilen = start + count; i < ilen; ++i) {\n          meta._parsed[i] = getter(i);\n        }\n      }\n    }\n  }, {\n    key: \"_getRotation\",\n    value: function _getRotation() {\n      return toRadians(this.options.rotation - 90);\n    }\n  }, {\n    key: \"_getCircumference\",\n    value: function _getCircumference() {\n      return toRadians(this.options.circumference);\n    }\n  }, {\n    key: \"_getRotationExtents\",\n    value: function _getRotationExtents() {\n      var min = TAU;\n      var max = -TAU;\n      for (var i = 0; i < this.chart.data.datasets.length; ++i) {\n        if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n          var controller = this.chart.getDatasetMeta(i).controller;\n          var rotation = controller._getRotation();\n          var circumference = controller._getCircumference();\n          min = Math.min(min, rotation);\n          max = Math.max(max, rotation + circumference);\n        }\n      }\n      return {\n        rotation: min,\n        circumference: max - min\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var meta = this._cachedMeta;\n      var arcs = meta.data;\n      var spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n      var maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n      var cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n      var chartWeight = this._getRingWeight(this.index);\n      var _this$_getRotationExt = this._getRotationExtents(),\n        circumference = _this$_getRotationExt.circumference,\n        rotation = _this$_getRotationExt.rotation;\n      var _getRatioAndOffset = getRatioAndOffset(rotation, circumference, cutout),\n        ratioX = _getRatioAndOffset.ratioX,\n        ratioY = _getRatioAndOffset.ratioY,\n        offsetX = _getRatioAndOffset.offsetX,\n        offsetY = _getRatioAndOffset.offsetY;\n      var maxWidth = (chartArea.width - spacing) / ratioX;\n      var maxHeight = (chartArea.height - spacing) / ratioY;\n      var maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n      var outerRadius = toDimension(this.options.radius, maxRadius);\n      var innerRadius = Math.max(outerRadius * cutout, 0);\n      var radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n      this.offsetX = offsetX * outerRadius;\n      this.offsetY = offsetY * outerRadius;\n      meta.total = this.calculateTotal();\n      this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n      this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"_circumference\",\n    value: function _circumference(i, reset) {\n      var opts = this.options;\n      var meta = this._cachedMeta;\n      var circumference = this._getCircumference();\n      if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n        return 0;\n      }\n      return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var centerX = (chartArea.left + chartArea.right) / 2;\n      var centerY = (chartArea.top + chartArea.bottom) / 2;\n      var animateScale = reset && animationOpts.animateScale;\n      var innerRadius = animateScale ? 0 : this.innerRadius;\n      var outerRadius = animateScale ? 0 : this.outerRadius;\n      var _this$_getSharedOptio3 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio3.sharedOptions,\n        includeOptions = _this$_getSharedOptio3.includeOptions;\n      var startAngle = this._getRotation();\n      var i;\n      for (i = 0; i < start; ++i) {\n        startAngle += this._circumference(i, reset);\n      }\n      for (i = start; i < start + count; ++i) {\n        var circumference = this._circumference(i, reset);\n        var arc = arcs[i];\n        var properties = {\n          x: centerX + this.offsetX,\n          y: centerY + this.offsetY,\n          startAngle: startAngle,\n          endAngle: startAngle + circumference,\n          circumference: circumference,\n          outerRadius: outerRadius,\n          innerRadius: innerRadius\n        };\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n        }\n        startAngle += circumference;\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"calculateTotal\",\n    value: function calculateTotal() {\n      var meta = this._cachedMeta;\n      var metaData = meta.data;\n      var total = 0;\n      var i;\n      for (i = 0; i < metaData.length; i++) {\n        var value = meta._parsed[i];\n        if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n          total += Math.abs(value);\n        }\n      }\n      return total;\n    }\n  }, {\n    key: \"calculateCircumference\",\n    value: function calculateCircumference(value) {\n      var total = this._cachedMeta.total;\n      if (total > 0 && !isNaN(value)) {\n        return TAU * (Math.abs(value) / total);\n      }\n      return 0;\n    }\n  }, {\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index], chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"getMaxBorderWidth\",\n    value: function getMaxBorderWidth(arcs) {\n      var max = 0;\n      var chart = this.chart;\n      var i, ilen, meta, controller, options;\n      if (!arcs) {\n        for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n          if (chart.isDatasetVisible(i)) {\n            meta = chart.getDatasetMeta(i);\n            arcs = meta.data;\n            controller = meta.controller;\n            break;\n          }\n        }\n      }\n      if (!arcs) {\n        return 0;\n      }\n      for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n        options = controller.resolveDataElementOptions(i);\n        if (options.borderAlign !== 'inner') {\n          max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n        }\n      }\n      return max;\n    }\n  }, {\n    key: \"getMaxOffset\",\n    value: function getMaxOffset(arcs) {\n      var max = 0;\n      for (var i = 0, ilen = arcs.length; i < ilen; ++i) {\n        var options = this.resolveDataElementOptions(i);\n        max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n      }\n      return max;\n    }\n  }, {\n    key: \"_getRingWeightOffset\",\n    value: function _getRingWeightOffset(datasetIndex) {\n      var ringWeightOffset = 0;\n      for (var i = 0; i < datasetIndex; ++i) {\n        if (this.chart.isDatasetVisible(i)) {\n          ringWeightOffset += this._getRingWeight(i);\n        }\n      }\n      return ringWeightOffset;\n    }\n  }, {\n    key: \"_getRingWeight\",\n    value: function _getRingWeight(datasetIndex) {\n      return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n  }, {\n    key: \"_getVisibleDatasetWeightTotal\",\n    value: function _getVisibleDatasetWeightTotal() {\n      return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n  }]);\n  return DoughnutController;\n}(DatasetController);\nDoughnutController.id = 'doughnut';\nDoughnutController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: false\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n    }\n  },\n  cutout: '50%',\n  rotation: 0,\n  circumference: 360,\n  radius: '100%',\n  spacing: 0,\n  indexAxis: 'r'\n};\nDoughnutController.descriptors = {\n  _scriptable: function _scriptable(name) {\n    return name !== 'spacing';\n  },\n  _indexable: function _indexable(name) {\n    return name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash');\n  }\n};\nDoughnutController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options2 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options2.pointStyle,\n              color = _chart$legend$options2.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  }\n};\nvar LineController = /*#__PURE__*/function (_DatasetController5) {\n  _inherits(LineController, _DatasetController5);\n  function LineController() {\n    _classCallCheck(this, LineController);\n    return _callSuper(this, LineController, arguments);\n  }\n  _createClass(LineController, [{\n    key: \"initialize\",\n    value: function initialize() {\n      this.enableOptionSharing = true;\n      this.supportsDecimation = true;\n      _get(_getPrototypeOf(LineController.prototype), \"initialize\", this).call(this);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset,\n        _meta$data = meta.data,\n        points = _meta$data === void 0 ? [] : _meta$data,\n        _dataset = meta._dataset;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi.start,\n        count = _getStartAndCountOfVi.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n      var options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options: options\n      }, mode);\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta3 = this._cachedMeta,\n        iScale = _this$_cachedMeta3.iScale,\n        vScale = _this$_cachedMeta3.vScale,\n        _stacked = _this$_cachedMeta3._stacked,\n        _dataset = _this$_cachedMeta3._dataset;\n      var _this$_getSharedOptio4 = this._getSharedOptions(start, mode),\n        sharedOptions = _this$_getSharedOptio4.sharedOptions,\n        includeOptions = _this$_getSharedOptio4.includeOptions;\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options2 = this.options,\n        spanGaps = _this$options2.spanGaps,\n        segment = _this$options2.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var end = start + count;\n      var pointsCount = points.length;\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = 0; i < pointsCount; ++i) {\n        var point = points[i];\n        var properties = directUpdate ? point : {};\n        if (i < start || i >= end) {\n          properties.skip = true;\n          continue;\n        }\n        var parsed = this.getParsed(i);\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      var data = meta.data || [];\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var meta = this._cachedMeta;\n      meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n      _get(_getPrototypeOf(LineController.prototype), \"draw\", this).call(this);\n    }\n  }]);\n  return LineController;\n}(DatasetController);\nLineController.id = 'line';\nLineController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  showLine: true,\n  spanGaps: false\n};\nLineController.overrides = {\n  scales: {\n    _index_: {\n      type: 'category'\n    },\n    _value_: {\n      type: 'linear'\n    }\n  }\n};\nvar PolarAreaController = /*#__PURE__*/function (_DatasetController6) {\n  _inherits(PolarAreaController, _DatasetController6);\n  function PolarAreaController(chart, datasetIndex) {\n    var _this5;\n    _classCallCheck(this, PolarAreaController);\n    _this5 = _callSuper(this, PolarAreaController, [chart, datasetIndex]);\n    _this5.innerRadius = undefined;\n    _this5.outerRadius = undefined;\n    return _this5;\n  }\n  _createClass(PolarAreaController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var chart = this.chart;\n      var labels = chart.data.labels || [];\n      var value = formatNumber(meta._parsed[index].r, chart.options.locale);\n      return {\n        label: labels[index] || '',\n        value: value\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var arcs = this._cachedMeta.data;\n      this._updateRadius();\n      this.updateElements(arcs, 0, arcs.length, mode);\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax() {\n      var _this6 = this;\n      var meta = this._cachedMeta;\n      var range = {\n        min: Number.POSITIVE_INFINITY,\n        max: Number.NEGATIVE_INFINITY\n      };\n      meta.data.forEach(function (element, index) {\n        var parsed = _this6.getParsed(index).r;\n        if (!isNaN(parsed) && _this6.chart.getDataVisibility(index)) {\n          if (parsed < range.min) {\n            range.min = parsed;\n          }\n          if (parsed > range.max) {\n            range.max = parsed;\n          }\n        }\n      });\n      return range;\n    }\n  }, {\n    key: \"_updateRadius\",\n    value: function _updateRadius() {\n      var chart = this.chart;\n      var chartArea = chart.chartArea;\n      var opts = chart.options;\n      var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n      var outerRadius = Math.max(minSize / 2, 0);\n      var innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n      var radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n      this.outerRadius = outerRadius - radiusLength * this.index;\n      this.innerRadius = this.outerRadius - radiusLength;\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(arcs, start, count, mode) {\n      var reset = mode === 'reset';\n      var chart = this.chart;\n      var opts = chart.options;\n      var animationOpts = opts.animation;\n      var scale = this._cachedMeta.rScale;\n      var centerX = scale.xCenter;\n      var centerY = scale.yCenter;\n      var datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n      var angle = datasetStartAngle;\n      var i;\n      var defaultAngle = 360 / this.countVisibleElements();\n      for (i = 0; i < start; ++i) {\n        angle += this._computeAngle(i, mode, defaultAngle);\n      }\n      for (i = start; i < start + count; i++) {\n        var arc = arcs[i];\n        var startAngle = angle;\n        var endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n        var outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n        angle = endAngle;\n        if (reset) {\n          if (animationOpts.animateScale) {\n            outerRadius = 0;\n          }\n          if (animationOpts.animateRotate) {\n            startAngle = endAngle = datasetStartAngle;\n          }\n        }\n        var properties = {\n          x: centerX,\n          y: centerY,\n          innerRadius: 0,\n          outerRadius: outerRadius,\n          startAngle: startAngle,\n          endAngle: endAngle,\n          options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n        };\n        this.updateElement(arc, i, properties, mode);\n      }\n    }\n  }, {\n    key: \"countVisibleElements\",\n    value: function countVisibleElements() {\n      var _this7 = this;\n      var meta = this._cachedMeta;\n      var count = 0;\n      meta.data.forEach(function (element, index) {\n        if (!isNaN(_this7.getParsed(index).r) && _this7.chart.getDataVisibility(index)) {\n          count++;\n        }\n      });\n      return count;\n    }\n  }, {\n    key: \"_computeAngle\",\n    value: function _computeAngle(index, mode, defaultAngle) {\n      return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n  }]);\n  return PolarAreaController;\n}(DatasetController);\nPolarAreaController.id = 'polarArea';\nPolarAreaController.defaults = {\n  dataElementType: 'arc',\n  animation: {\n    animateRotate: true,\n    animateScale: true\n  },\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n    }\n  },\n  indexAxis: 'r',\n  startAngle: 0\n};\nPolarAreaController.overrides = {\n  aspectRatio: 1,\n  plugins: {\n    legend: {\n      labels: {\n        generateLabels: function generateLabels(chart) {\n          var data = chart.data;\n          if (data.labels.length && data.datasets.length) {\n            var _chart$legend$options3 = chart.legend.options.labels,\n              pointStyle = _chart$legend$options3.pointStyle,\n              color = _chart$legend$options3.color;\n            return data.labels.map(function (label, i) {\n              var meta = chart.getDatasetMeta(0);\n              var style = meta.controller.getStyle(i);\n              return {\n                text: label,\n                fillStyle: style.backgroundColor,\n                strokeStyle: style.borderColor,\n                fontColor: color,\n                lineWidth: style.borderWidth,\n                pointStyle: pointStyle,\n                hidden: !chart.getDataVisibility(i),\n                index: i\n              };\n            });\n          }\n          return [];\n        }\n      },\n      onClick: function onClick(e, legendItem, legend) {\n        legend.chart.toggleDataVisibility(legendItem.index);\n        legend.chart.update();\n      }\n    }\n  },\n  scales: {\n    r: {\n      type: 'radialLinear',\n      angleLines: {\n        display: false\n      },\n      beginAtZero: true,\n      grid: {\n        circular: true\n      },\n      pointLabels: {\n        display: false\n      },\n      startAngle: 0\n    }\n  }\n};\nvar PieController = /*#__PURE__*/function (_DoughnutController2) {\n  _inherits(PieController, _DoughnutController2);\n  function PieController() {\n    _classCallCheck(this, PieController);\n    return _callSuper(this, PieController, arguments);\n  }\n  return _createClass(PieController);\n}(DoughnutController);\nPieController.id = 'pie';\nPieController.defaults = {\n  cutout: 0,\n  rotation: 0,\n  circumference: 360,\n  radius: '100%'\n};\nvar RadarController = /*#__PURE__*/function (_DatasetController7) {\n  _inherits(RadarController, _DatasetController7);\n  function RadarController() {\n    _classCallCheck(this, RadarController);\n    return _callSuper(this, RadarController, arguments);\n  }\n  _createClass(RadarController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var vScale = this._cachedMeta.vScale;\n      var parsed = this.getParsed(index);\n      return {\n        label: vScale.getLabels()[index],\n        value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n      };\n    }\n  }, {\n    key: \"parseObjectData\",\n    value: function parseObjectData(meta, data, start, count) {\n      return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var line = meta.dataset;\n      var points = meta.data || [];\n      var labels = meta.iScale.getLabels();\n      line.points = points;\n      if (mode !== 'resize') {\n        var options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n          options.borderWidth = 0;\n        }\n        var properties = {\n          _loop: true,\n          _fullLoop: labels.length === points.length,\n          options: options\n        };\n        this.updateElement(line, undefined, properties, mode);\n      }\n      this.updateElements(points, 0, points.length, mode);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var scale = this._cachedMeta.rScale;\n      var reset = mode === 'reset';\n      for (var i = start; i < start + count; i++) {\n        var point = points[i];\n        var options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        var pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n        var x = reset ? scale.xCenter : pointPosition.x;\n        var y = reset ? scale.yCenter : pointPosition.y;\n        var properties = {\n          x: x,\n          y: y,\n          angle: pointPosition.angle,\n          skip: isNaN(x) || isNaN(y),\n          options: options\n        };\n        this.updateElement(point, i, properties, mode);\n      }\n    }\n  }]);\n  return RadarController;\n}(DatasetController);\nRadarController.id = 'radar';\nRadarController.defaults = {\n  datasetElementType: 'line',\n  dataElementType: 'point',\n  indexAxis: 'r',\n  showLine: true,\n  elements: {\n    line: {\n      fill: 'start'\n    }\n  }\n};\nRadarController.overrides = {\n  aspectRatio: 1,\n  scales: {\n    r: {\n      type: 'radialLinear'\n    }\n  }\n};\nvar ScatterController = /*#__PURE__*/function (_DatasetController8) {\n  _inherits(ScatterController, _DatasetController8);\n  function ScatterController() {\n    _classCallCheck(this, ScatterController);\n    return _callSuper(this, ScatterController, arguments);\n  }\n  _createClass(ScatterController, [{\n    key: \"getLabelAndValue\",\n    value: function getLabelAndValue(index) {\n      var meta = this._cachedMeta;\n      var labels = this.chart.data.labels || [];\n      var xScale = meta.xScale,\n        yScale = meta.yScale;\n      var parsed = this.getParsed(index);\n      var x = xScale.getLabelForValue(parsed.x);\n      var y = yScale.getLabelForValue(parsed.y);\n      return {\n        label: labels[index] || '',\n        value: '(' + x + ', ' + y + ')'\n      };\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var meta = this._cachedMeta;\n      var _meta$data2 = meta.data,\n        points = _meta$data2 === void 0 ? [] : _meta$data2;\n      var animationsDisabled = this.chart._animationsDisabled;\n      var _getStartAndCountOfVi2 = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled),\n        start = _getStartAndCountOfVi2.start,\n        count = _getStartAndCountOfVi2.count;\n      this._drawStart = start;\n      this._drawCount = count;\n      if (_scaleRangesChanged(meta)) {\n        start = 0;\n        count = points.length;\n      }\n      if (this.options.showLine) {\n        if (!this.datasetElementType) {\n          this.addElements();\n        }\n        var line = meta.dataset,\n          _dataset = meta._dataset;\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        var options = this.resolveDatasetElementOptions(mode);\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n          animated: !animationsDisabled,\n          options: options\n        }, mode);\n      } else if (this.datasetElementType) {\n        delete meta.dataset;\n        this.datasetElementType = false;\n      }\n      this.updateElements(points, start, count, mode);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      var showLine = this.options.showLine;\n      if (!this.datasetElementType && showLine) {\n        this.datasetElementType = this.chart.registry.getElement('line');\n      }\n      _get(_getPrototypeOf(ScatterController.prototype), \"addElements\", this).call(this);\n    }\n  }, {\n    key: \"updateElements\",\n    value: function updateElements(points, start, count, mode) {\n      var reset = mode === 'reset';\n      var _this$_cachedMeta4 = this._cachedMeta,\n        iScale = _this$_cachedMeta4.iScale,\n        vScale = _this$_cachedMeta4.vScale,\n        _stacked = _this$_cachedMeta4._stacked,\n        _dataset = _this$_cachedMeta4._dataset;\n      var firstOpts = this.resolveDataElementOptions(start, mode);\n      var sharedOptions = this.getSharedOptions(firstOpts);\n      var includeOptions = this.includeOptions(mode, sharedOptions);\n      var iAxis = iScale.axis;\n      var vAxis = vScale.axis;\n      var _this$options3 = this.options,\n        spanGaps = _this$options3.spanGaps,\n        segment = _this$options3.segment;\n      var maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n      var directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n      var prevParsed = start > 0 && this.getParsed(start - 1);\n      for (var i = start; i < start + count; ++i) {\n        var point = points[i];\n        var parsed = this.getParsed(i);\n        var properties = directUpdate ? point : {};\n        var nullData = isNullOrUndef(parsed[vAxis]);\n        var iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n        var vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n        properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n        properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n        if (segment) {\n          properties.parsed = parsed;\n          properties.raw = _dataset.data[i];\n        }\n        if (includeOptions) {\n          properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n        }\n        if (!directUpdate) {\n          this.updateElement(point, i, properties, mode);\n        }\n        prevParsed = parsed;\n      }\n      this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n  }, {\n    key: \"getMaxOverflow\",\n    value: function getMaxOverflow() {\n      var meta = this._cachedMeta;\n      var data = meta.data || [];\n      if (!this.options.showLine) {\n        var max = 0;\n        for (var i = data.length - 1; i >= 0; --i) {\n          max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n      }\n      var dataset = meta.dataset;\n      var border = dataset.options && dataset.options.borderWidth || 0;\n      if (!data.length) {\n        return border;\n      }\n      var firstPoint = data[0].size(this.resolveDataElementOptions(0));\n      var lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n      return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n  }]);\n  return ScatterController;\n}(DatasetController);\nScatterController.id = 'scatter';\nScatterController.defaults = {\n  datasetElementType: false,\n  dataElementType: 'point',\n  showLine: false,\n  fill: false\n};\nScatterController.overrides = {\n  interaction: {\n    mode: 'point'\n  },\n  scales: {\n    x: {\n      type: 'linear'\n    },\n    y: {\n      type: 'linear'\n    }\n  }\n};\nvar controllers = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  BarController: BarController,\n  BubbleController: BubbleController,\n  DoughnutController: DoughnutController,\n  LineController: LineController,\n  PieController: PieController,\n  PolarAreaController: PolarAreaController,\n  RadarController: RadarController,\n  ScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\nfunction abstract() {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nvar DateAdapterBase = /*#__PURE__*/function () {\n  function DateAdapterBase(options) {\n    _classCallCheck(this, DateAdapterBase);\n    this.options = void 0;\n    this.options = options || {};\n  }\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  _createClass(DateAdapterBase, [{\n    key: \"init\",\n    value: function init() {}\n  }, {\n    key: \"formats\",\n    value: function formats() {\n      return abstract();\n    }\n  }, {\n    key: \"parse\",\n    value: function parse() {\n      return abstract();\n    }\n  }, {\n    key: \"format\",\n    value: function format() {\n      return abstract();\n    }\n  }, {\n    key: \"add\",\n    value: function add() {\n      return abstract();\n    }\n  }, {\n    key: \"diff\",\n    value: function diff() {\n      return abstract();\n    }\n  }, {\n    key: \"startOf\",\n    value: function startOf() {\n      return abstract();\n    }\n  }, {\n    key: \"endOf\",\n    value: function endOf() {\n      return abstract();\n    }\n  }], [{\n    key: \"override\",\n    value:\n    /**\n    * Override default date adapter methods.\n    * Accepts type parameter to define options type.\n    * @example\n    * Chart._adapters._date.override<{myAdapterOption: string}>({\n    *   init() {\n    *     console.log(this.options.myAdapterOption);\n    *   }\n    * })\n    */\n    function override(members) {\n      Object.assign(DateAdapterBase.prototype, members);\n    }\n  }]);\n  return DateAdapterBase;\n}();\nvar adapters = {\n  _date: DateAdapterBase\n};\nfunction binarySearch(metaset, axis, value, intersect) {\n  var controller = metaset.controller,\n    data = metaset.data,\n    _sorted = metaset._sorted;\n  var iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    var lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      var el = data[0];\n      var range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        var start = lookupMethod(data, axis, value - range);\n        var end = lookupMethod(data, axis, value + range);\n        return {\n          lo: start.lo,\n          hi: end.hi\n        };\n      }\n    }\n  }\n  return {\n    lo: 0,\n    hi: data.length - 1\n  };\n}\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  var metasets = chart.getSortedVisibleDatasetMetas();\n  var value = position[axis];\n  for (var i = 0, ilen = metasets.length; i < ilen; ++i) {\n    var _metasets$i = metasets[i],\n      _index2 = _metasets$i.index,\n      data = _metasets$i.data;\n    var _binarySearch = binarySearch(metasets[i], axis, value, intersect),\n      lo = _binarySearch.lo,\n      hi = _binarySearch.hi;\n    for (var j = lo; j <= hi; ++j) {\n      var element = data[j];\n      if (!element.skip) {\n        handler(element, _index2, j);\n      }\n    }\n  }\n}\nfunction getDistanceMetricForAxis(axis) {\n  var useX = axis.indexOf('x') !== -1;\n  var useY = axis.indexOf('y') !== -1;\n  return function (pt1, pt2) {\n    var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  var items = [];\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n  var evaluationFunc = function evaluationFunc(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  };\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  var items = [];\n  function evaluationFunc(element, datasetIndex, index) {\n    var _element$getProps = element.getProps(['startAngle', 'endAngle'], useFinalPosition),\n      startAngle = _element$getProps.startAngle,\n      endAngle = _element$getProps.endAngle;\n    var _getAngleFromPoint = getAngleFromPoint(element, {\n        x: position.x,\n        y: position.y\n      }),\n      angle = _getAngleFromPoint.angle;\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  var items = [];\n  var distanceMetric = getDistanceMetricForAxis(axis);\n  var minDistance = Number.POSITIVE_INFINITY;\n  function evaluationFunc(element, datasetIndex, index) {\n    var inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n    var center = element.getCenterPoint(useFinalPosition);\n    var pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n    var distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      }];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n    }\n  }\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n  return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  var items = [];\n  var rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  var intersectsItem = false;\n  evaluateInteractionItems(chart, axis, position, function (element, datasetIndex, index) {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({\n        element: element,\n        datasetIndex: datasetIndex,\n        index: index\n      });\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\nvar Interaction = {\n  evaluateInteractionItems: evaluateInteractionItems,\n  modes: {\n    index: function index(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'x';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      var elements = [];\n      if (!items.length) {\n        return [];\n      }\n      chart.getSortedVisibleDatasetMetas().forEach(function (meta) {\n        var index = items[0].index;\n        var element = meta.data[index];\n        if (element && !element.skip) {\n          elements.push({\n            element: element,\n            datasetIndex: meta.index,\n            index: index\n          });\n        }\n      });\n      return elements;\n    },\n    dataset: function dataset(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      var items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      if (items.length > 0) {\n        var datasetIndex = items[0].datasetIndex;\n        var data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (var i = 0; i < data.length; ++i) {\n          items.push({\n            element: data[i],\n            datasetIndex: datasetIndex,\n            index: i\n          });\n        }\n      }\n      return items;\n    },\n    point: function point(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n    nearest: function nearest(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      var axis = options.axis || 'xy';\n      var includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n    x: function x(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n    y: function y(chart, e, options, useFinalPosition) {\n      var position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\nvar STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\nfunction filterByPosition(array, position) {\n  return array.filter(function (v) {\n    return v.pos === position;\n  });\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(function (v) {\n    return STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis;\n  });\n}\nfunction sortByWeight(array, reverse) {\n  return array.sort(function (a, b) {\n    var v0 = reverse ? b : a;\n    var v1 = reverse ? a : b;\n    return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n  });\n}\nfunction wrapBoxes(boxes) {\n  var layoutBoxes = [];\n  var i, ilen, box, pos, stack, stackWeight;\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    var _box = box;\n    pos = _box.position;\n    var _box$options = _box.options;\n    stack = _box$options.stack;\n    var _box$options$stackWei = _box$options.stackWeight;\n    stackWeight = _box$options$stackWei === void 0 ? 1 : _box$options$stackWei;\n    layoutBoxes.push({\n      index: i,\n      box: box,\n      pos: pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && pos + stack,\n      stackWeight: stackWeight\n    });\n  }\n  return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n  var stacks = {};\n  var _iterator5 = _createForOfIteratorHelper(layouts),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var wrap = _step5.value;\n      var stack = wrap.stack,\n        pos = wrap.pos,\n        stackWeight = wrap.stackWeight;\n      if (!stack || !STATIC_POSITIONS.includes(pos)) {\n        continue;\n      }\n      var _stack = stacks[stack] || (stacks[stack] = {\n        count: 0,\n        placed: 0,\n        weight: 0,\n        size: 0\n      });\n      _stack.count++;\n      _stack.weight += stackWeight;\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  return stacks;\n}\nfunction setLayoutDims(layouts, params) {\n  var stacks = buildStacks(layouts);\n  var vBoxMaxWidth = params.vBoxMaxWidth,\n    hBoxMaxHeight = params.hBoxMaxHeight;\n  var i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    var fullSize = layout.box.fullSize;\n    var stack = stacks[layout.stack];\n    var factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n  var layoutBoxes = wrapBoxes(boxes);\n  var fullSize = sortByWeight(layoutBoxes.filter(function (wrap) {\n    return wrap.box.fullSize;\n  }), true);\n  var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  var centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  var centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n  return {\n    fullSize: fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n  var pos = layout.pos,\n    box = layout.box;\n  var maxPadding = chartArea.maxPadding;\n  if (!isObject(pos)) {\n    if (layout.size) {\n      chartArea[pos] -= layout.size;\n    }\n    var stack = stacks[layout.stack] || {\n      size: 0,\n      count: 1\n    };\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n  var newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  var newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  var widthChanged = newWidth !== chartArea.w;\n  var heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n  return layout.horizontal ? {\n    same: widthChanged,\n    other: heightChanged\n  } : {\n    same: heightChanged,\n    other: widthChanged\n  };\n}\nfunction handleMaxPadding(chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function updatePos(pos) {\n    var change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n  var maxPadding = chartArea.maxPadding;\n  function marginForPositions(positions) {\n    var margin = {\n      left: 0,\n      top: 0,\n      right: 0,\n      bottom: 0\n    };\n    positions.forEach(function (pos) {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n  return horizontal ? marginForPositions(['left', 'right']) : marginForPositions(['top', 'bottom']);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  var refitBoxes = [];\n  var i, ilen, layout, box, refit, changed;\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n    box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n    var _updateDims = updateDims(chartArea, params, layout, stacks),\n      same = _updateDims.same,\n      other = _updateDims.other;\n    refit |= same && refitBoxes.length;\n    changed = changed || other;\n    if (!box.fullSize) {\n      refitBoxes.push(layout);\n    }\n  }\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  var userPadding = params.padding;\n  var x = chartArea.x,\n    y = chartArea.y;\n  var _iterator6 = _createForOfIteratorHelper(boxes),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var layout = _step6.value;\n      var box = layout.box;\n      var stack = stacks[layout.stack] || {\n        count: 1,\n        placed: 0,\n        weight: 1\n      };\n      var weight = layout.stackWeight / stack.weight || 1;\n      if (layout.horizontal) {\n        var width = chartArea.w * weight;\n        var height = stack.size || box.height;\n        if (defined(stack.start)) {\n          y = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n        } else {\n          setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n        }\n        stack.start = y;\n        stack.placed += width;\n        y = box.bottom;\n      } else {\n        var _height = chartArea.h * weight;\n        var _width = stack.size || box.width;\n        if (defined(stack.start)) {\n          x = stack.start;\n        }\n        if (box.fullSize) {\n          setBoxDims(box, x, userPadding.top, _width, params.outerHeight - userPadding.bottom - userPadding.top);\n        } else {\n          setBoxDims(box, x, chartArea.top + stack.placed, _width, _height);\n        }\n        stack.start = x;\n        stack.placed += _height;\n        x = box.right;\n      }\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  chartArea.x = x;\n  chartArea.y = y;\n}\nvar layouts = {\n  addBox: function addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    item._layers = item._layers || function () {\n      return [{\n        z: 0,\n        draw: function draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n    chart.boxes.push(item);\n  },\n  removeBox: function removeBox(chart, layoutItem) {\n    var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n  configure: function configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n  update: function update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n    var padding = toPadding(chart.options.layout.padding);\n    var availableWidth = Math.max(width - padding.width, 0);\n    var availableHeight = Math.max(height - padding.height, 0);\n    var boxes = buildLayoutBoxes(chart.boxes);\n    var verticalBoxes = boxes.vertical;\n    var horizontalBoxes = boxes.horizontal;\n    each(chart.boxes, function (box) {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n    var visibleVerticalBoxCount = verticalBoxes.reduce(function (total, wrap) {\n      return wrap.box.options && wrap.box.options.display === false ? total : total + 1;\n    }, 0) || 1;\n    var params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding: padding,\n      availableWidth: availableWidth,\n      availableHeight: availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    var maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    var chartArea = Object.assign({\n      maxPadding: maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n    var stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n    handleMaxPadding(chartArea);\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w\n    };\n    each(boxes.chartArea, function (layout) {\n      var box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {\n        left: 0,\n        top: 0,\n        right: 0,\n        bottom: 0\n      });\n    });\n  }\n};\nvar BasePlatform = /*#__PURE__*/function () {\n  function BasePlatform() {\n    _classCallCheck(this, BasePlatform);\n  }\n  _createClass(BasePlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {}\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      return false;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {}\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type, listener) {}\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return 1;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(element, width, height, aspectRatio) {\n      width = Math.max(0, width || element.width);\n      height = height || element.height;\n      return {\n        width: width,\n        height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n      };\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      return true;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {}\n  }]);\n  return BasePlatform;\n}();\nvar BasicPlatform = /*#__PURE__*/function (_BasePlatform) {\n  _inherits(BasicPlatform, _BasePlatform);\n  function BasicPlatform() {\n    _classCallCheck(this, BasicPlatform);\n    return _callSuper(this, BasicPlatform, arguments);\n  }\n  _createClass(BasicPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(item) {\n      return item && item.getContext && item.getContext('2d') || null;\n    }\n  }, {\n    key: \"updateConfig\",\n    value: function updateConfig(config) {\n      config.options.animation = false;\n    }\n  }]);\n  return BasicPlatform;\n}(BasePlatform);\nvar EXPANDO_KEY = '$chartjs';\nvar EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\nvar isNullOrEmpty = function isNullOrEmpty(value) {\n  return value === null || value === '';\n};\nfunction initCanvas(canvas, aspectRatio) {\n  var style = canvas.style;\n  var renderHeight = canvas.getAttribute('height');\n  var renderWidth = canvas.getAttribute('width');\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n  style.display = style.display || 'block';\n  style.boxSizing = style.boxSizing || 'border-box';\n  if (isNullOrEmpty(renderWidth)) {\n    var displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      var displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n  return canvas;\n}\nvar eventListenerOptions = supportsEventListenerOptions ? {\n  passive: true\n} : false;\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\nfunction fromNativeEvent(event, chart) {\n  var type = EVENT_TYPES[event.type] || event.type;\n  var _getRelativePosition = getRelativePosition(event, chart),\n    x = _getRelativePosition.x,\n    y = _getRelativePosition.y;\n  return {\n    type: type,\n    chart: chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null\n  };\n}\nfunction nodeListContains(nodeList, canvas) {\n  var _iterator7 = _createForOfIteratorHelper(nodeList),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var node = _step7.value;\n      if (node === canvas || node.contains(canvas)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n}\nfunction createAttachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator8 = _createForOfIteratorHelper(entries),\n      _step8;\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var entry = _step8.value;\n        trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var observer = new MutationObserver(function (entries) {\n    var trigger = false;\n    var _iterator9 = _createForOfIteratorHelper(entries),\n      _step9;\n    try {\n      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n        var entry = _step9.value;\n        trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n        trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n      }\n    } catch (err) {\n      _iterator9.e(err);\n    } finally {\n      _iterator9.f();\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\nvar drpListeningCharts = new Map();\nvar oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n  var dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach(function (resize, chart) {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\nfunction createResizeObserver(chart, type, listener) {\n  var canvas = chart.canvas;\n  var container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  var resize = throttled(function (width, height) {\n    var w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      listener();\n    }\n  }, window);\n  var observer = new ResizeObserver(function (entries) {\n    var entry = entries[0];\n    var width = entry.contentRect.width;\n    var height = entry.contentRect.height;\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n  return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\nfunction createProxyAndListen(chart, type, listener) {\n  var canvas = chart.canvas;\n  var proxy = throttled(function (event) {\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n  addListener(canvas, type, proxy);\n  return proxy;\n}\nvar DomPlatform = /*#__PURE__*/function (_BasePlatform2) {\n  _inherits(DomPlatform, _BasePlatform2);\n  function DomPlatform() {\n    _classCallCheck(this, DomPlatform);\n    return _callSuper(this, DomPlatform, arguments);\n  }\n  _createClass(DomPlatform, [{\n    key: \"acquireContext\",\n    value: function acquireContext(canvas, aspectRatio) {\n      var context = canvas && canvas.getContext && canvas.getContext('2d');\n      if (context && context.canvas === canvas) {\n        initCanvas(canvas, aspectRatio);\n        return context;\n      }\n      return null;\n    }\n  }, {\n    key: \"releaseContext\",\n    value: function releaseContext(context) {\n      var canvas = context.canvas;\n      if (!canvas[EXPANDO_KEY]) {\n        return false;\n      }\n      var initial = canvas[EXPANDO_KEY].initial;\n      ['height', 'width'].forEach(function (prop) {\n        var value = initial[prop];\n        if (isNullOrUndef(value)) {\n          canvas.removeAttribute(prop);\n        } else {\n          canvas.setAttribute(prop, value);\n        }\n      });\n      var style = initial.style || {};\n      Object.keys(style).forEach(function (key) {\n        canvas.style[key] = style[key];\n      });\n      canvas.width = canvas.width;\n      delete canvas[EXPANDO_KEY];\n      return true;\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(chart, type, listener) {\n      this.removeEventListener(chart, type);\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var handlers = {\n        attach: createAttachObserver,\n        detach: createDetachObserver,\n        resize: createResizeObserver\n      };\n      var handler = handlers[type] || createProxyAndListen;\n      proxies[type] = handler(chart, type, listener);\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(chart, type) {\n      var proxies = chart.$proxies || (chart.$proxies = {});\n      var proxy = proxies[type];\n      if (!proxy) {\n        return;\n      }\n      var handlers = {\n        attach: releaseObserver,\n        detach: releaseObserver,\n        resize: releaseObserver\n      };\n      var handler = handlers[type] || removeListener;\n      handler(chart, type, proxy);\n      proxies[type] = undefined;\n    }\n  }, {\n    key: \"getDevicePixelRatio\",\n    value: function getDevicePixelRatio() {\n      return window.devicePixelRatio;\n    }\n  }, {\n    key: \"getMaximumSize\",\n    value: function getMaximumSize(canvas, width, height, aspectRatio) {\n      return _getMaximumSize(canvas, width, height, aspectRatio);\n    }\n  }, {\n    key: \"isAttached\",\n    value: function isAttached(canvas) {\n      var container = _getParentNode(canvas);\n      return !!(container && container.isConnected);\n    }\n  }]);\n  return DomPlatform;\n}(BasePlatform);\nfunction _detectPlatform(canvas) {\n  if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\nvar Element = /*#__PURE__*/function () {\n  function Element() {\n    _classCallCheck(this, Element);\n    this.x = void 0;\n    this.y = void 0;\n    this.active = false;\n    this.options = void 0;\n    this.$animations = void 0;\n  }\n  _createClass(Element, [{\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      var _this$getProps = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps.x,\n        y = _this$getProps.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"hasValue\",\n    value: function hasValue() {\n      return isNumber(this.x) && isNumber(this.y);\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps(props, final) {\n      var _this8 = this;\n      var anims = this.$animations;\n      if (!final || !anims) {\n        // let's not create an object, if not needed\n        return this;\n      }\n      var ret = {};\n      props.forEach(function (prop) {\n        ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : _this8[prop];\n      });\n      return ret;\n    }\n  }]);\n  return Element;\n}();\nElement.defaults = {};\nElement.defaultRoutes = undefined;\nfunction autoSkip(scale, ticks) {\n  var tickOpts = scale.options.ticks;\n  var determinedMaxTicks = determineMaxTicks(scale);\n  var ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  var numMajorIndices = majorIndices.length;\n  var first = majorIndices[0];\n  var last = majorIndices[numMajorIndices - 1];\n  var newTicks = [];\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n  var spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n  if (numMajorIndices > 0) {\n    var i, ilen;\n    var avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\nfunction determineMaxTicks(scale) {\n  var offset = scale.options.offset;\n  var tickLength = scale._tickSize();\n  var maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  var maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  var evenMajorSpacing = getEvenSpacing(majorIndices);\n  var spacing = ticks.length / ticksLimit;\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n  var factors = _factorize(evenMajorSpacing);\n  for (var i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    var factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\nfunction getMajorIndices(ticks) {\n  var result = [];\n  var i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  var count = 0;\n  var next = majorIndices[0];\n  var i;\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  var start = valueOrDefault(majorStart, 0);\n  var end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  var count = 0;\n  var length, i, next;\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n  next = start;\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\nfunction getEvenSpacing(arr) {\n  var len = arr.length;\n  var i, diff;\n  if (len < 2) {\n    return false;\n  }\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\nvar reverseAlign = function reverseAlign(align) {\n  return align === 'left' ? 'right' : align === 'right' ? 'left' : align;\n};\nvar offsetFromEdge = function offsetFromEdge(scale, edge, offset) {\n  return edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\n};\nvar getTicksLimit = function getTicksLimit(ticksLength, maxTicksLimit) {\n  return Math.min(maxTicksLimit || ticksLength, ticksLength);\n};\nfunction sample(arr, numItems) {\n  var result = [];\n  var increment = arr.length / numItems;\n  var len = arr.length;\n  var i = 0;\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  var length = scale.ticks.length;\n  var validIndex = Math.min(index, length - 1);\n  var start = scale._startPixel;\n  var end = scale._endPixel;\n  var epsilon = 1e-6;\n  var lineValue = scale.getPixelForTick(validIndex);\n  var offset;\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\nfunction garbageCollect(caches, length) {\n  each(caches, function (cache) {\n    var gc = cache.gc;\n    var gcLen = gc.length / 2;\n    var i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n  var font = toFont(options.font, fallback);\n  var padding = toPadding(options.padding);\n  var lines = isArray(options.text) ? options.text.length : 1;\n  return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale: scale,\n    type: 'scale'\n  });\n}\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick: tick,\n    index: index,\n    type: 'tick'\n  });\n}\nfunction titleAlign(align, position, reverse) {\n  var ret = _toLeftRightCenter(align);\n  if (reverse && position !== 'right' || !reverse && position === 'right') {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n  var top = scale.top,\n    left = scale.left,\n    bottom = scale.bottom,\n    right = scale.right,\n    chart = scale.chart;\n  var chartArea = chart.chartArea,\n    scales = chart.scales;\n  var rotation = 0;\n  var maxWidth, titleX, titleY;\n  var height = bottom - top;\n  var width = right - left;\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n    if (isObject(position)) {\n      var positionAxisID = Object.keys(position)[0];\n      var value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      var _positionAxisID = Object.keys(position)[0];\n      var _value = position[_positionAxisID];\n      titleX = scales[_positionAxisID].getPixelForValue(_value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {\n    titleX: titleX,\n    titleY: titleY,\n    maxWidth: maxWidth,\n    rotation: rotation\n  };\n}\nvar Scale = /*#__PURE__*/function (_Element2) {\n  _inherits(Scale, _Element2);\n  function Scale(cfg) {\n    var _this9;\n    _classCallCheck(this, Scale);\n    _this9 = _callSuper(this, Scale);\n    _this9.id = cfg.id;\n    _this9.type = cfg.type;\n    _this9.options = undefined;\n    _this9.ctx = cfg.ctx;\n    _this9.chart = cfg.chart;\n    _this9.top = undefined;\n    _this9.bottom = undefined;\n    _this9.left = undefined;\n    _this9.right = undefined;\n    _this9.width = undefined;\n    _this9.height = undefined;\n    _this9._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    _this9.maxWidth = undefined;\n    _this9.maxHeight = undefined;\n    _this9.paddingTop = undefined;\n    _this9.paddingBottom = undefined;\n    _this9.paddingLeft = undefined;\n    _this9.paddingRight = undefined;\n    _this9.axis = undefined;\n    _this9.labelRotation = undefined;\n    _this9.min = undefined;\n    _this9.max = undefined;\n    _this9._range = undefined;\n    _this9.ticks = [];\n    _this9._gridLineItems = null;\n    _this9._labelItems = null;\n    _this9._labelSizes = null;\n    _this9._length = 0;\n    _this9._maxLength = 0;\n    _this9._longestTextCache = {};\n    _this9._startPixel = undefined;\n    _this9._endPixel = undefined;\n    _this9._reversePixels = false;\n    _this9._userMax = undefined;\n    _this9._userMin = undefined;\n    _this9._suggestedMax = undefined;\n    _this9._suggestedMin = undefined;\n    _this9._ticksLength = 0;\n    _this9._borderValue = 0;\n    _this9._cache = {};\n    _this9._dataLimitsCached = false;\n    _this9.$context = undefined;\n    return _this9;\n  }\n  _createClass(Scale, [{\n    key: \"init\",\n    value: function init(options) {\n      this.options = options.setContext(this.getContext());\n      this.axis = options.axis;\n      this._userMin = this.parse(options.min);\n      this._userMax = this.parse(options.max);\n      this._suggestedMin = this.parse(options.suggestedMin);\n      this._suggestedMax = this.parse(options.suggestedMax);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      return raw;\n    }\n  }, {\n    key: \"getUserBounds\",\n    value: function getUserBounds() {\n      var _userMin = this._userMin,\n        _userMax = this._userMax,\n        _suggestedMin = this._suggestedMin,\n        _suggestedMax = this._suggestedMax;\n      _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n      _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n      _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n      _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n      return {\n        min: finiteOrDefault(_userMin, _suggestedMin),\n        max: finiteOrDefault(_userMax, _suggestedMax),\n        minDefined: isNumberFinite(_userMin),\n        maxDefined: isNumberFinite(_userMax)\n      };\n    }\n  }, {\n    key: \"getMinMax\",\n    value: function getMinMax(canStack) {\n      var _this$getUserBounds = this.getUserBounds(),\n        min = _this$getUserBounds.min,\n        max = _this$getUserBounds.max,\n        minDefined = _this$getUserBounds.minDefined,\n        maxDefined = _this$getUserBounds.maxDefined;\n      var range;\n      if (minDefined && maxDefined) {\n        return {\n          min: min,\n          max: max\n        };\n      }\n      var metas = this.getMatchingVisibleMetas();\n      for (var i = 0, ilen = metas.length; i < ilen; ++i) {\n        range = metas[i].controller.getMinMax(this, canStack);\n        if (!minDefined) {\n          min = Math.min(min, range.min);\n        }\n        if (!maxDefined) {\n          max = Math.max(max, range.max);\n        }\n      }\n      min = maxDefined && min > max ? max : min;\n      max = minDefined && min > max ? min : max;\n      return {\n        min: finiteOrDefault(min, finiteOrDefault(max, min)),\n        max: finiteOrDefault(max, finiteOrDefault(min, max))\n      };\n    }\n  }, {\n    key: \"getPadding\",\n    value: function getPadding() {\n      return {\n        left: this.paddingLeft || 0,\n        top: this.paddingTop || 0,\n        right: this.paddingRight || 0,\n        bottom: this.paddingBottom || 0\n      };\n    }\n  }, {\n    key: \"getTicks\",\n    value: function getTicks() {\n      return this.ticks;\n    }\n  }, {\n    key: \"getLabels\",\n    value: function getLabels() {\n      var data = this.chart.data;\n      return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n  }, {\n    key: \"getLabelItems\",\n    value: function getLabelItems() {\n      var chartArea = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.chart.chartArea;\n      var items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n      return items;\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      this._cache = {};\n      this._dataLimitsCached = false;\n    }\n  }, {\n    key: \"beforeUpdate\",\n    value: function beforeUpdate() {\n      callback(this.options.beforeUpdate, [this]);\n    }\n  }, {\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      var _this$options4 = this.options,\n        beginAtZero = _this$options4.beginAtZero,\n        grace = _this$options4.grace,\n        tickOpts = _this$options4.ticks;\n      var sampleSize = tickOpts.sampleSize;\n      this.beforeUpdate();\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins = Object.assign({\n        left: 0,\n        right: 0,\n        top: 0,\n        bottom: 0\n      }, margins);\n      this.ticks = null;\n      this._labelSizes = null;\n      this._gridLineItems = null;\n      this._labelItems = null;\n      this.beforeSetDimensions();\n      this.setDimensions();\n      this.afterSetDimensions();\n      this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n      if (!this._dataLimitsCached) {\n        this.beforeDataLimits();\n        this.determineDataLimits();\n        this.afterDataLimits();\n        this._range = _addGrace(this, grace, beginAtZero);\n        this._dataLimitsCached = true;\n      }\n      this.beforeBuildTicks();\n      this.ticks = this.buildTicks() || [];\n      this.afterBuildTicks();\n      var samplingEnabled = sampleSize < this.ticks.length;\n      this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n      this.configure();\n      this.beforeCalculateLabelRotation();\n      this.calculateLabelRotation();\n      this.afterCalculateLabelRotation();\n      if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n        this.ticks = autoSkip(this, this.ticks);\n        this._labelSizes = null;\n        this.afterAutoSkip();\n      }\n      if (samplingEnabled) {\n        this._convertTicksToLabels(this.ticks);\n      }\n      this.beforeFit();\n      this.fit();\n      this.afterFit();\n      this.afterUpdate();\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var reversePixels = this.options.reverse;\n      var startPixel, endPixel;\n      if (this.isHorizontal()) {\n        startPixel = this.left;\n        endPixel = this.right;\n      } else {\n        startPixel = this.top;\n        endPixel = this.bottom;\n        reversePixels = !reversePixels;\n      }\n      this._startPixel = startPixel;\n      this._endPixel = endPixel;\n      this._reversePixels = reversePixels;\n      this._length = endPixel - startPixel;\n      this._alignToPixels = this.options.alignToPixels;\n    }\n  }, {\n    key: \"afterUpdate\",\n    value: function afterUpdate() {\n      callback(this.options.afterUpdate, [this]);\n    }\n  }, {\n    key: \"beforeSetDimensions\",\n    value: function beforeSetDimensions() {\n      callback(this.options.beforeSetDimensions, [this]);\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = 0;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = 0;\n        this.bottom = this.height;\n      }\n      this.paddingLeft = 0;\n      this.paddingTop = 0;\n      this.paddingRight = 0;\n      this.paddingBottom = 0;\n    }\n  }, {\n    key: \"afterSetDimensions\",\n    value: function afterSetDimensions() {\n      callback(this.options.afterSetDimensions, [this]);\n    }\n  }, {\n    key: \"_callHooks\",\n    value: function _callHooks(name) {\n      this.chart.notifyPlugins(name, this.getContext());\n      callback(this.options[name], [this]);\n    }\n  }, {\n    key: \"beforeDataLimits\",\n    value: function beforeDataLimits() {\n      this._callHooks('beforeDataLimits');\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {}\n  }, {\n    key: \"afterDataLimits\",\n    value: function afterDataLimits() {\n      this._callHooks('afterDataLimits');\n    }\n  }, {\n    key: \"beforeBuildTicks\",\n    value: function beforeBuildTicks() {\n      this._callHooks('beforeBuildTicks');\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      return [];\n    }\n  }, {\n    key: \"afterBuildTicks\",\n    value: function afterBuildTicks() {\n      this._callHooks('afterBuildTicks');\n    }\n  }, {\n    key: \"beforeTickToLabelConversion\",\n    value: function beforeTickToLabelConversion() {\n      callback(this.options.beforeTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var tickOpts = this.options.ticks;\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        tick = ticks[i];\n        tick.label = callback(tickOpts.callback, [tick.value, i, ticks], this);\n      }\n    }\n  }, {\n    key: \"afterTickToLabelConversion\",\n    value: function afterTickToLabelConversion() {\n      callback(this.options.afterTickToLabelConversion, [this]);\n    }\n  }, {\n    key: \"beforeCalculateLabelRotation\",\n    value: function beforeCalculateLabelRotation() {\n      callback(this.options.beforeCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"calculateLabelRotation\",\n    value: function calculateLabelRotation() {\n      var options = this.options;\n      var tickOpts = options.ticks;\n      var numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n      var minRotation = tickOpts.minRotation || 0;\n      var maxRotation = tickOpts.maxRotation;\n      var labelRotation = minRotation;\n      var tickWidth, maxHeight, maxLabelDiagonal;\n      if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n        this.labelRotation = minRotation;\n        return;\n      }\n      var labelSizes = this._getLabelSizes();\n      var maxLabelWidth = labelSizes.widest.width;\n      var maxLabelHeight = labelSizes.highest.height;\n      var maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n      tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n      if (maxLabelWidth + 6 > tickWidth) {\n        tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n        maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n        maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n        labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n        labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n      }\n      this.labelRotation = labelRotation;\n    }\n  }, {\n    key: \"afterCalculateLabelRotation\",\n    value: function afterCalculateLabelRotation() {\n      callback(this.options.afterCalculateLabelRotation, [this]);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {}\n  }, {\n    key: \"beforeFit\",\n    value: function beforeFit() {\n      callback(this.options.beforeFit, [this]);\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var minSize = {\n        width: 0,\n        height: 0\n      };\n      var chart = this.chart,\n        _this$options5 = this.options,\n        tickOpts = _this$options5.ticks,\n        titleOpts = _this$options5.title,\n        gridOpts = _this$options5.grid;\n      var display = this._isVisible();\n      var isHorizontal = this.isHorizontal();\n      if (display) {\n        var titleHeight = getTitleHeight(titleOpts, chart.options.font);\n        if (isHorizontal) {\n          minSize.width = this.maxWidth;\n          minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n        } else {\n          minSize.height = this.maxHeight;\n          minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n        }\n        if (tickOpts.display && this.ticks.length) {\n          var _this$_getLabelSizes = this._getLabelSizes(),\n            first = _this$_getLabelSizes.first,\n            last = _this$_getLabelSizes.last,\n            widest = _this$_getLabelSizes.widest,\n            highest = _this$_getLabelSizes.highest;\n          var tickPadding = tickOpts.padding * 2;\n          var angleRadians = toRadians(this.labelRotation);\n          var cos = Math.cos(angleRadians);\n          var sin = Math.sin(angleRadians);\n          if (isHorizontal) {\n            var labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n            minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n          } else {\n            var labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n            minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n          }\n          this._calculatePadding(first, last, sin, cos);\n        }\n      }\n      this._handleMargins();\n      if (isHorizontal) {\n        this.width = this._length = chart.width - this._margins.left - this._margins.right;\n        this.height = minSize.height;\n      } else {\n        this.width = minSize.width;\n        this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n      }\n    }\n  }, {\n    key: \"_calculatePadding\",\n    value: function _calculatePadding(first, last, sin, cos) {\n      var _this$options6 = this.options,\n        _this$options6$ticks = _this$options6.ticks,\n        align = _this$options6$ticks.align,\n        padding = _this$options6$ticks.padding,\n        position = _this$options6.position;\n      var isRotated = this.labelRotation !== 0;\n      var labelsBelowTicks = position !== 'top' && this.axis === 'x';\n      if (this.isHorizontal()) {\n        var offsetLeft = this.getPixelForTick(0) - this.left;\n        var offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n        var paddingLeft = 0;\n        var paddingRight = 0;\n        if (isRotated) {\n          if (labelsBelowTicks) {\n            paddingLeft = cos * first.width;\n            paddingRight = sin * last.height;\n          } else {\n            paddingLeft = sin * first.height;\n            paddingRight = cos * last.width;\n          }\n        } else if (align === 'start') {\n          paddingRight = last.width;\n        } else if (align === 'end') {\n          paddingLeft = first.width;\n        } else if (align !== 'inner') {\n          paddingLeft = first.width / 2;\n          paddingRight = last.width / 2;\n        }\n        this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n        this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n      } else {\n        var paddingTop = last.height / 2;\n        var paddingBottom = first.height / 2;\n        if (align === 'start') {\n          paddingTop = 0;\n          paddingBottom = first.height;\n        } else if (align === 'end') {\n          paddingTop = last.height;\n          paddingBottom = 0;\n        }\n        this.paddingTop = paddingTop + padding;\n        this.paddingBottom = paddingBottom + padding;\n      }\n    }\n  }, {\n    key: \"_handleMargins\",\n    value: function _handleMargins() {\n      if (this._margins) {\n        this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n        this._margins.top = Math.max(this.paddingTop, this._margins.top);\n        this._margins.right = Math.max(this.paddingRight, this._margins.right);\n        this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n      }\n    }\n  }, {\n    key: \"afterFit\",\n    value: function afterFit() {\n      callback(this.options.afterFit, [this]);\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var _this$options7 = this.options,\n        axis = _this$options7.axis,\n        position = _this$options7.position;\n      return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n  }, {\n    key: \"isFullSize\",\n    value: function isFullSize() {\n      return this.options.fullSize;\n    }\n  }, {\n    key: \"_convertTicksToLabels\",\n    value: function _convertTicksToLabels(ticks) {\n      this.beforeTickToLabelConversion();\n      this.generateTickLabels(ticks);\n      var i, ilen;\n      for (i = 0, ilen = ticks.length; i < ilen; i++) {\n        if (isNullOrUndef(ticks[i].label)) {\n          ticks.splice(i, 1);\n          ilen--;\n          i--;\n        }\n      }\n      this.afterTickToLabelConversion();\n    }\n  }, {\n    key: \"_getLabelSizes\",\n    value: function _getLabelSizes() {\n      var labelSizes = this._labelSizes;\n      if (!labelSizes) {\n        var sampleSize = this.options.ticks.sampleSize;\n        var ticks = this.ticks;\n        if (sampleSize < ticks.length) {\n          ticks = sample(ticks, sampleSize);\n        }\n        this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n      }\n      return labelSizes;\n    }\n  }, {\n    key: \"_computeLabelSizes\",\n    value: function _computeLabelSizes(ticks, length, maxTicksLimit) {\n      var ctx = this.ctx,\n        caches = this._longestTextCache;\n      var widths = [];\n      var heights = [];\n      var increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n      var widestLabelSize = 0;\n      var highestLabelSize = 0;\n      var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n      for (i = 0; i < length; i += increment) {\n        label = ticks[i].label;\n        tickFont = this._resolveTickFontOptions(i);\n        ctx.font = fontString = tickFont.string;\n        cache = caches[fontString] = caches[fontString] || {\n          data: {},\n          gc: []\n        };\n        lineHeight = tickFont.lineHeight;\n        width = height = 0;\n        if (!isNullOrUndef(label) && !isArray(label)) {\n          width = _measureText(ctx, cache.data, cache.gc, width, label);\n          height = lineHeight;\n        } else if (isArray(label)) {\n          for (j = 0, jlen = label.length; j < jlen; ++j) {\n            nestedLabel = label[j];\n            if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n              width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n              height += lineHeight;\n            }\n          }\n        }\n        widths.push(width);\n        heights.push(height);\n        widestLabelSize = Math.max(width, widestLabelSize);\n        highestLabelSize = Math.max(height, highestLabelSize);\n      }\n      garbageCollect(caches, length);\n      var widest = widths.indexOf(widestLabelSize);\n      var highest = heights.indexOf(highestLabelSize);\n      var valueAt = function valueAt(idx) {\n        return {\n          width: widths[idx] || 0,\n          height: heights[idx] || 0\n        };\n      };\n      return {\n        first: valueAt(0),\n        last: valueAt(length - 1),\n        widest: valueAt(widest),\n        highest: valueAt(highest),\n        widths: widths,\n        heights: heights\n      };\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value;\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value, index) {\n      return NaN;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {}\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getPixelForDecimal\",\n    value: function getPixelForDecimal(decimal) {\n      if (this._reversePixels) {\n        decimal = 1 - decimal;\n      }\n      var pixel = this._startPixel + decimal * this._length;\n      return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n  }, {\n    key: \"getDecimalForPixel\",\n    value: function getDecimalForPixel(pixel) {\n      var decimal = (pixel - this._startPixel) / this._length;\n      return this._reversePixels ? 1 - decimal : decimal;\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.getPixelForValue(this.getBaseValue());\n    }\n  }, {\n    key: \"getBaseValue\",\n    value: function getBaseValue() {\n      var min = this.min,\n        max = this.max;\n      return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext(index) {\n      var ticks = this.ticks || [];\n      if (index >= 0 && index < ticks.length) {\n        var tick = ticks[index];\n        return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n      }\n      return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n  }, {\n    key: \"_tickSize\",\n    value: function _tickSize() {\n      var optionTicks = this.options.ticks;\n      var rot = toRadians(this.labelRotation);\n      var cos = Math.abs(Math.cos(rot));\n      var sin = Math.abs(Math.sin(rot));\n      var labelSizes = this._getLabelSizes();\n      var padding = optionTicks.autoSkipPadding || 0;\n      var w = labelSizes ? labelSizes.widest.width + padding : 0;\n      var h = labelSizes ? labelSizes.highest.height + padding : 0;\n      return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n  }, {\n    key: \"_isVisible\",\n    value: function _isVisible() {\n      var display = this.options.display;\n      if (display !== 'auto') {\n        return !!display;\n      }\n      return this.getMatchingVisibleMetas().length > 0;\n    }\n  }, {\n    key: \"_computeGridLineItems\",\n    value: function _computeGridLineItems(chartArea) {\n      var axis = this.axis;\n      var chart = this.chart;\n      var options = this.options;\n      var grid = options.grid,\n        position = options.position,\n        border = options.border;\n      var offset = grid.offset;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var ticksLength = ticks.length + (offset ? 1 : 0);\n      var tl = getTickMarkLength(grid);\n      var items = [];\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = borderOpts.display ? borderOpts.width : 0;\n      var axisHalfWidth = axisWidth / 2;\n      var alignBorderValue = function alignBorderValue(pixel) {\n        return _alignPixel(chart, pixel, axisWidth);\n      };\n      var borderValue, i, lineValue, alignedLineValue;\n      var tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n      if (position === 'top') {\n        borderValue = alignBorderValue(this.bottom);\n        ty1 = this.bottom - tl;\n        ty2 = borderValue - axisHalfWidth;\n        y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n        y2 = chartArea.bottom;\n      } else if (position === 'bottom') {\n        borderValue = alignBorderValue(this.top);\n        y1 = chartArea.top;\n        y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = this.top + tl;\n      } else if (position === 'left') {\n        borderValue = alignBorderValue(this.right);\n        tx1 = this.right - tl;\n        tx2 = borderValue - axisHalfWidth;\n        x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n        x2 = chartArea.right;\n      } else if (position === 'right') {\n        borderValue = alignBorderValue(this.left);\n        x1 = chartArea.left;\n        x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n        tx1 = borderValue + axisHalfWidth;\n        tx2 = this.left + tl;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n        }\n        y1 = chartArea.top;\n        y2 = chartArea.bottom;\n        ty1 = borderValue + axisHalfWidth;\n        ty2 = ty1 + tl;\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n        } else if (isObject(position)) {\n          var _positionAxisID2 = Object.keys(position)[0];\n          var _value2 = position[_positionAxisID2];\n          borderValue = alignBorderValue(this.chart.scales[_positionAxisID2].getPixelForValue(_value2));\n        }\n        tx1 = borderValue - axisHalfWidth;\n        tx2 = tx1 - tl;\n        x1 = chartArea.left;\n        x2 = chartArea.right;\n      }\n      var limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n      var step = Math.max(1, Math.ceil(ticksLength / limit));\n      for (i = 0; i < ticksLength; i += step) {\n        var context = this.getContext(i);\n        var optsAtIndex = grid.setContext(context);\n        var optsAtIndexBorder = border.setContext(context);\n        var lineWidth = optsAtIndex.lineWidth;\n        var lineColor = optsAtIndex.color;\n        var borderDash = optsAtIndexBorder.dash || [];\n        var borderDashOffset = optsAtIndexBorder.dashOffset;\n        var tickWidth = optsAtIndex.tickWidth;\n        var tickColor = optsAtIndex.tickColor;\n        var tickBorderDash = optsAtIndex.tickBorderDash || [];\n        var tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n        lineValue = getPixelForGridLine(this, i, offset);\n        if (lineValue === undefined) {\n          continue;\n        }\n        alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n        if (isHorizontal) {\n          tx1 = tx2 = x1 = x2 = alignedLineValue;\n        } else {\n          ty1 = ty2 = y1 = y2 = alignedLineValue;\n        }\n        items.push({\n          tx1: tx1,\n          ty1: ty1,\n          tx2: tx2,\n          ty2: ty2,\n          x1: x1,\n          y1: y1,\n          x2: x2,\n          y2: y2,\n          width: lineWidth,\n          color: lineColor,\n          borderDash: borderDash,\n          borderDashOffset: borderDashOffset,\n          tickWidth: tickWidth,\n          tickColor: tickColor,\n          tickBorderDash: tickBorderDash,\n          tickBorderDashOffset: tickBorderDashOffset\n        });\n      }\n      this._ticksLength = ticksLength;\n      this._borderValue = borderValue;\n      return items;\n    }\n  }, {\n    key: \"_computeLabelItems\",\n    value: function _computeLabelItems(chartArea) {\n      var axis = this.axis;\n      var options = this.options;\n      var position = options.position,\n        optionTicks = options.ticks;\n      var isHorizontal = this.isHorizontal();\n      var ticks = this.ticks;\n      var align = optionTicks.align,\n        crossAlign = optionTicks.crossAlign,\n        padding = optionTicks.padding,\n        mirror = optionTicks.mirror;\n      var tl = getTickMarkLength(options.grid);\n      var tickAndPadding = tl + padding;\n      var hTickAndPadding = mirror ? -padding : tickAndPadding;\n      var rotation = -toRadians(this.labelRotation);\n      var items = [];\n      var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n      var textBaseline = 'middle';\n      if (position === 'top') {\n        y = this.bottom - hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'bottom') {\n        y = this.top + hTickAndPadding;\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (position === 'left') {\n        var ret = this._getYAxisLabelAlignment(tl);\n        textAlign = ret.textAlign;\n        x = ret.x;\n      } else if (position === 'right') {\n        var _ret = this._getYAxisLabelAlignment(tl);\n        textAlign = _ret.textAlign;\n        x = _ret.x;\n      } else if (axis === 'x') {\n        if (position === 'center') {\n          y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n        } else if (isObject(position)) {\n          var positionAxisID = Object.keys(position)[0];\n          var value = position[positionAxisID];\n          y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n        }\n        textAlign = this._getXAxisLabelAlignment();\n      } else if (axis === 'y') {\n        if (position === 'center') {\n          x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n        } else if (isObject(position)) {\n          var _positionAxisID3 = Object.keys(position)[0];\n          var _value3 = position[_positionAxisID3];\n          x = this.chart.scales[_positionAxisID3].getPixelForValue(_value3);\n        }\n        textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n      }\n      if (axis === 'y') {\n        if (align === 'start') {\n          textBaseline = 'top';\n        } else if (align === 'end') {\n          textBaseline = 'bottom';\n        }\n      }\n      var labelSizes = this._getLabelSizes();\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        label = tick.label;\n        var optsAtIndex = optionTicks.setContext(this.getContext(i));\n        pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n        font = this._resolveTickFontOptions(i);\n        lineHeight = font.lineHeight;\n        lineCount = isArray(label) ? label.length : 1;\n        var halfCount = lineCount / 2;\n        var color = optsAtIndex.color;\n        var strokeColor = optsAtIndex.textStrokeColor;\n        var strokeWidth = optsAtIndex.textStrokeWidth;\n        var tickTextAlign = textAlign;\n        if (isHorizontal) {\n          x = pixel;\n          if (textAlign === 'inner') {\n            if (i === ilen - 1) {\n              tickTextAlign = !this.options.reverse ? 'right' : 'left';\n            } else if (i === 0) {\n              tickTextAlign = !this.options.reverse ? 'left' : 'right';\n            } else {\n              tickTextAlign = 'center';\n            }\n          }\n          if (position === 'top') {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = -lineCount * lineHeight + lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n            } else {\n              textOffset = -labelSizes.highest.height + lineHeight / 2;\n            }\n          } else {\n            if (crossAlign === 'near' || rotation !== 0) {\n              textOffset = lineHeight / 2;\n            } else if (crossAlign === 'center') {\n              textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n            } else {\n              textOffset = labelSizes.highest.height - lineCount * lineHeight;\n            }\n          }\n          if (mirror) {\n            textOffset *= -1;\n          }\n          if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n            x += lineHeight / 2 * Math.sin(rotation);\n          }\n        } else {\n          y = pixel;\n          textOffset = (1 - lineCount) * lineHeight / 2;\n        }\n        var backdrop = void 0;\n        if (optsAtIndex.showLabelBackdrop) {\n          var labelPadding = toPadding(optsAtIndex.backdropPadding);\n          var height = labelSizes.heights[i];\n          var width = labelSizes.widths[i];\n          var top = textOffset - labelPadding.top;\n          var left = 0 - labelPadding.left;\n          switch (textBaseline) {\n            case 'middle':\n              top -= height / 2;\n              break;\n            case 'bottom':\n              top -= height;\n              break;\n          }\n          switch (textAlign) {\n            case 'center':\n              left -= width / 2;\n              break;\n            case 'right':\n              left -= width;\n              break;\n            case 'inner':\n              if (i === ilen - 1) {\n                left -= width;\n              } else if (i > 0) {\n                left -= width / 2;\n              }\n              break;\n          }\n          backdrop = {\n            left: left,\n            top: top,\n            width: width + labelPadding.width,\n            height: height + labelPadding.height,\n            color: optsAtIndex.backdropColor\n          };\n        }\n        items.push({\n          label: label,\n          font: font,\n          textOffset: textOffset,\n          options: {\n            rotation: rotation,\n            color: color,\n            strokeColor: strokeColor,\n            strokeWidth: strokeWidth,\n            textAlign: tickTextAlign,\n            textBaseline: textBaseline,\n            translation: [x, y],\n            backdrop: backdrop\n          }\n        });\n      }\n      return items;\n    }\n  }, {\n    key: \"_getXAxisLabelAlignment\",\n    value: function _getXAxisLabelAlignment() {\n      var _this$options8 = this.options,\n        position = _this$options8.position,\n        ticks = _this$options8.ticks;\n      var rotation = -toRadians(this.labelRotation);\n      if (rotation) {\n        return position === 'top' ? 'left' : 'right';\n      }\n      var align = 'center';\n      if (ticks.align === 'start') {\n        align = 'left';\n      } else if (ticks.align === 'end') {\n        align = 'right';\n      } else if (ticks.align === 'inner') {\n        align = 'inner';\n      }\n      return align;\n    }\n  }, {\n    key: \"_getYAxisLabelAlignment\",\n    value: function _getYAxisLabelAlignment(tl) {\n      var _this$options9 = this.options,\n        position = _this$options9.position,\n        _this$options9$ticks = _this$options9.ticks,\n        crossAlign = _this$options9$ticks.crossAlign,\n        mirror = _this$options9$ticks.mirror,\n        padding = _this$options9$ticks.padding;\n      var labelSizes = this._getLabelSizes();\n      var tickAndPadding = tl + padding;\n      var widest = labelSizes.widest.width;\n      var textAlign;\n      var x;\n      if (position === 'left') {\n        if (mirror) {\n          x = this.right + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x += widest;\n          }\n        } else {\n          x = this.right - tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x = this.left;\n          }\n        }\n      } else if (position === 'right') {\n        if (mirror) {\n          x = this.left + padding;\n          if (crossAlign === 'near') {\n            textAlign = 'right';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x -= widest / 2;\n          } else {\n            textAlign = 'left';\n            x -= widest;\n          }\n        } else {\n          x = this.left + tickAndPadding;\n          if (crossAlign === 'near') {\n            textAlign = 'left';\n          } else if (crossAlign === 'center') {\n            textAlign = 'center';\n            x += widest / 2;\n          } else {\n            textAlign = 'right';\n            x = this.right;\n          }\n        }\n      } else {\n        textAlign = 'right';\n      }\n      return {\n        textAlign: textAlign,\n        x: x\n      };\n    }\n  }, {\n    key: \"_computeLabelArea\",\n    value: function _computeLabelArea() {\n      if (this.options.ticks.mirror) {\n        return;\n      }\n      var chart = this.chart;\n      var position = this.options.position;\n      if (position === 'left' || position === 'right') {\n        return {\n          top: 0,\n          left: this.left,\n          bottom: chart.height,\n          right: this.right\n        };\n      }\n      if (position === 'top' || position === 'bottom') {\n        return {\n          top: this.top,\n          left: 0,\n          bottom: this.bottom,\n          right: chart.width\n        };\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var ctx = this.ctx,\n        backgroundColor = this.options.backgroundColor,\n        left = this.left,\n        top = this.top,\n        width = this.width,\n        height = this.height;\n      if (backgroundColor) {\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        ctx.fillRect(left, top, width, height);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getLineWidthForValue\",\n    value: function getLineWidthForValue(value) {\n      var grid = this.options.grid;\n      if (!this._isVisible() || !grid.display) {\n        return 0;\n      }\n      var ticks = this.ticks;\n      var index = ticks.findIndex(function (t) {\n        return t.value === value;\n      });\n      if (index >= 0) {\n        var opts = grid.setContext(this.getContext(index));\n        return opts.lineWidth;\n      }\n      return 0;\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid(chartArea) {\n      var grid = this.options.grid;\n      var ctx = this.ctx;\n      var items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n      var i, ilen;\n      var drawLine = function drawLine(p1, p2, style) {\n        if (!style.width || !style.color) {\n          return;\n        }\n        ctx.save();\n        ctx.lineWidth = style.width;\n        ctx.strokeStyle = style.color;\n        ctx.setLineDash(style.borderDash || []);\n        ctx.lineDashOffset = style.borderDashOffset;\n        ctx.beginPath();\n        ctx.moveTo(p1.x, p1.y);\n        ctx.lineTo(p2.x, p2.y);\n        ctx.stroke();\n        ctx.restore();\n      };\n      if (grid.display) {\n        for (i = 0, ilen = items.length; i < ilen; ++i) {\n          var item = items[i];\n          if (grid.drawOnChartArea) {\n            drawLine({\n              x: item.x1,\n              y: item.y1\n            }, {\n              x: item.x2,\n              y: item.y2\n            }, item);\n          }\n          if (grid.drawTicks) {\n            drawLine({\n              x: item.tx1,\n              y: item.ty1\n            }, {\n              x: item.tx2,\n              y: item.ty2\n            }, {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            });\n          }\n        }\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {\n      var chart = this.chart,\n        ctx = this.ctx,\n        _this$options10 = this.options,\n        border = _this$options10.border,\n        grid = _this$options10.grid;\n      var borderOpts = border.setContext(this.getContext());\n      var axisWidth = border.display ? borderOpts.width : 0;\n      if (!axisWidth) {\n        return;\n      }\n      var lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n      var borderValue = this._borderValue;\n      var x1, x2, y1, y2;\n      if (this.isHorizontal()) {\n        x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n        x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n        y1 = y2 = borderValue;\n      } else {\n        y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n        y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n        x1 = x2 = borderValue;\n      }\n      ctx.save();\n      ctx.lineWidth = borderOpts.width;\n      ctx.strokeStyle = borderOpts.color;\n      ctx.beginPath();\n      ctx.moveTo(x1, y1);\n      ctx.lineTo(x2, y2);\n      ctx.stroke();\n      ctx.restore();\n    }\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels(chartArea) {\n      var optionTicks = this.options.ticks;\n      if (!optionTicks.display) {\n        return;\n      }\n      var ctx = this.ctx;\n      var area = this._computeLabelArea();\n      if (area) {\n        clipArea(ctx, area);\n      }\n      var items = this.getLabelItems(chartArea);\n      var _iterator10 = _createForOfIteratorHelper(items),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var item = _step10.value;\n          var renderTextOptions = item.options;\n          var tickFont = item.font;\n          var label = item.label;\n          var y = item.textOffset;\n          renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      if (area) {\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var ctx = this.ctx,\n        _this$options11 = this.options,\n        position = _this$options11.position,\n        title = _this$options11.title,\n        reverse = _this$options11.reverse;\n      if (!title.display) {\n        return;\n      }\n      var font = toFont(title.font);\n      var padding = toPadding(title.padding);\n      var align = title.align;\n      var offset = font.lineHeight / 2;\n      if (position === 'bottom' || position === 'center' || isObject(position)) {\n        offset += padding.bottom;\n        if (isArray(title.text)) {\n          offset += font.lineHeight * (title.text.length - 1);\n        }\n      } else {\n        offset += padding.top;\n      }\n      var _titleArgs = titleArgs(this, offset, position, align),\n        titleX = _titleArgs.titleX,\n        titleY = _titleArgs.titleY,\n        maxWidth = _titleArgs.maxWidth,\n        rotation = _titleArgs.rotation;\n      renderText(ctx, title.text, 0, 0, font, {\n        color: title.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: titleAlign(align, position, reverse),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(chartArea) {\n      if (!this._isVisible()) {\n        return;\n      }\n      this.drawBackground();\n      this.drawGrid(chartArea);\n      this.drawBorder();\n      this.drawTitle();\n      this.drawLabels(chartArea);\n    }\n  }, {\n    key: \"_layers\",\n    value: function _layers() {\n      var _this10 = this;\n      var opts = this.options;\n      var tz = opts.ticks && opts.ticks.z || 0;\n      var gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n      var bz = valueOrDefault(opts.border && opts.border.z, 0);\n      if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n        return [{\n          z: tz,\n          draw: function draw(chartArea) {\n            _this10.draw(chartArea);\n          }\n        }];\n      }\n      return [{\n        z: gz,\n        draw: function draw(chartArea) {\n          _this10.drawBackground();\n          _this10.drawGrid(chartArea);\n          _this10.drawTitle();\n        }\n      }, {\n        z: bz,\n        draw: function draw() {\n          _this10.drawBorder();\n        }\n      }, {\n        z: tz,\n        draw: function draw(chartArea) {\n          _this10.drawLabels(chartArea);\n        }\n      }];\n    }\n  }, {\n    key: \"getMatchingVisibleMetas\",\n    value: function getMatchingVisibleMetas(type) {\n      var metas = this.chart.getSortedVisibleDatasetMetas();\n      var axisID = this.axis + 'AxisID';\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        var meta = metas[i];\n        if (meta[axisID] === this.id && (!type || meta.type === type)) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"_resolveTickFontOptions\",\n    value: function _resolveTickFontOptions(index) {\n      var opts = this.options.ticks.setContext(this.getContext(index));\n      return toFont(opts.font);\n    }\n  }, {\n    key: \"_maxDigits\",\n    value: function _maxDigits() {\n      var fontSize = this._resolveTickFontOptions(0).lineHeight;\n      return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n  }]);\n  return Scale;\n}(Element);\nvar TypedRegistry = /*#__PURE__*/function () {\n  function TypedRegistry(type, scope, override) {\n    _classCallCheck(this, TypedRegistry);\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n  _createClass(TypedRegistry, [{\n    key: \"isForType\",\n    value: function isForType(type) {\n      return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n  }, {\n    key: \"register\",\n    value: function register(item) {\n      var proto = Object.getPrototypeOf(item);\n      var parentScope;\n      if (isIChartComponent(proto)) {\n        parentScope = this.register(proto);\n      }\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope + '.' + id;\n      if (!id) {\n        throw new Error('class does not have id: ' + item);\n      }\n      if (id in items) {\n        return scope;\n      }\n      items[id] = item;\n      registerDefaults(item, scope, parentScope);\n      if (this.override) {\n        defaults.override(item.id, item.overrides);\n      }\n      return scope;\n    }\n  }, {\n    key: \"get\",\n    value: function get(id) {\n      return this.items[id];\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister(item) {\n      var items = this.items;\n      var id = item.id;\n      var scope = this.scope;\n      if (id in items) {\n        delete items[id];\n      }\n      if (scope && id in defaults[scope]) {\n        delete defaults[scope][id];\n        if (this.override) {\n          delete overrides[id];\n        }\n      }\n    }\n  }]);\n  return TypedRegistry;\n}();\nfunction registerDefaults(item, scope, parentScope) {\n  var itemDefaults = merge(Object.create(null), [parentScope ? defaults.get(parentScope) : {}, defaults.get(scope), item.defaults]);\n  defaults.set(scope, itemDefaults);\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(function (property) {\n    var propertyParts = property.split('.');\n    var sourceName = propertyParts.pop();\n    var sourceScope = [scope].concat(propertyParts).join('.');\n    var parts = routes[property].split('.');\n    var targetName = parts.pop();\n    var targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\nvar Registry = /*#__PURE__*/function () {\n  function Registry() {\n    _classCallCheck(this, Registry);\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n  _createClass(Registry, [{\n    key: \"add\",\n    value: function add() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      this._each('register', args);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      this._each('unregister', args);\n    }\n  }, {\n    key: \"addControllers\",\n    value: function addControllers() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      this._each('register', args, this.controllers);\n    }\n  }, {\n    key: \"addElements\",\n    value: function addElements() {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      this._each('register', args, this.elements);\n    }\n  }, {\n    key: \"addPlugins\",\n    value: function addPlugins() {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      this._each('register', args, this.plugins);\n    }\n  }, {\n    key: \"addScales\",\n    value: function addScales() {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      this._each('register', args, this.scales);\n    }\n  }, {\n    key: \"getController\",\n    value: function getController(id) {\n      return this._get(id, this.controllers, 'controller');\n    }\n  }, {\n    key: \"getElement\",\n    value: function getElement(id) {\n      return this._get(id, this.elements, 'element');\n    }\n  }, {\n    key: \"getPlugin\",\n    value: function getPlugin(id) {\n      return this._get(id, this.plugins, 'plugin');\n    }\n  }, {\n    key: \"getScale\",\n    value: function getScale(id) {\n      return this._get(id, this.scales, 'scale');\n    }\n  }, {\n    key: \"removeControllers\",\n    value: function removeControllers() {\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      this._each('unregister', args, this.controllers);\n    }\n  }, {\n    key: \"removeElements\",\n    value: function removeElements() {\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      this._each('unregister', args, this.elements);\n    }\n  }, {\n    key: \"removePlugins\",\n    value: function removePlugins() {\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      this._each('unregister', args, this.plugins);\n    }\n  }, {\n    key: \"removeScales\",\n    value: function removeScales() {\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      this._each('unregister', args, this.scales);\n    }\n  }, {\n    key: \"_each\",\n    value: function _each(method, args, typedRegistry) {\n      var _this11 = this;\n      _toConsumableArray(args).forEach(function (arg) {\n        var reg = typedRegistry || _this11._getRegistryForType(arg);\n        if (typedRegistry || reg.isForType(arg) || reg === _this11.plugins && arg.id) {\n          _this11._exec(method, reg, arg);\n        } else {\n          each(arg, function (item) {\n            var itemReg = typedRegistry || _this11._getRegistryForType(item);\n            _this11._exec(method, itemReg, item);\n          });\n        }\n      });\n    }\n  }, {\n    key: \"_exec\",\n    value: function _exec(method, registry, component) {\n      var camelMethod = _capitalize(method);\n      callback(component['before' + camelMethod], [], component);\n      registry[method](component);\n      callback(component['after' + camelMethod], [], component);\n    }\n  }, {\n    key: \"_getRegistryForType\",\n    value: function _getRegistryForType(type) {\n      for (var i = 0; i < this._typedRegistries.length; i++) {\n        var reg = this._typedRegistries[i];\n        if (reg.isForType(type)) {\n          return reg;\n        }\n      }\n      return this.plugins;\n    }\n  }, {\n    key: \"_get\",\n    value: function _get(id, typedRegistry, type) {\n      var item = typedRegistry.get(id);\n      if (item === undefined) {\n        throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n      }\n      return item;\n    }\n  }]);\n  return Registry;\n}();\nvar registry = /* #__PURE__ */new Registry();\nvar PluginService = /*#__PURE__*/function () {\n  function PluginService() {\n    _classCallCheck(this, PluginService);\n    this._init = [];\n  }\n  _createClass(PluginService, [{\n    key: \"notify\",\n    value: function notify(chart, hook, args, filter) {\n      if (hook === 'beforeInit') {\n        this._init = this._createDescriptors(chart, true);\n        this._notify(this._init, chart, 'install');\n      }\n      var descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n      var result = this._notify(descriptors, chart, hook, args);\n      if (hook === 'afterDestroy') {\n        this._notify(descriptors, chart, 'stop');\n        this._notify(this._init, chart, 'uninstall');\n      }\n      return result;\n    }\n  }, {\n    key: \"_notify\",\n    value: function _notify(descriptors, chart, hook, args) {\n      args = args || {};\n      var _iterator11 = _createForOfIteratorHelper(descriptors),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var descriptor = _step11.value;\n          var plugin = descriptor.plugin;\n          var method = plugin[hook];\n          var params = [chart, args, descriptor.options];\n          if (callback(method, params, plugin) === false && args.cancelable) {\n            return false;\n          }\n        }\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return true;\n    }\n  }, {\n    key: \"invalidate\",\n    value: function invalidate() {\n      if (!isNullOrUndef(this._cache)) {\n        this._oldCache = this._cache;\n        this._cache = undefined;\n      }\n    }\n  }, {\n    key: \"_descriptors\",\n    value: function _descriptors(chart) {\n      if (this._cache) {\n        return this._cache;\n      }\n      var descriptors = this._cache = this._createDescriptors(chart);\n      this._notifyStateChanges(chart);\n      return descriptors;\n    }\n  }, {\n    key: \"_createDescriptors\",\n    value: function _createDescriptors(chart, all) {\n      var config = chart && chart.config;\n      var options = valueOrDefault(config.options && config.options.plugins, {});\n      var plugins = allPlugins(config);\n      return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n  }, {\n    key: \"_notifyStateChanges\",\n    value: function _notifyStateChanges(chart) {\n      var previousDescriptors = this._oldCache || [];\n      var descriptors = this._cache;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.plugin.id === y.plugin.id;\n          });\n        });\n      };\n      this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n      this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n  }]);\n  return PluginService;\n}();\nfunction allPlugins(config) {\n  var localIds = {};\n  var plugins = [];\n  var keys = Object.keys(registry.plugins.items);\n  for (var i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n  var local = config.plugins || [];\n  for (var _i2 = 0; _i2 < local.length; _i2++) {\n    var plugin = local[_i2];\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n  return {\n    plugins: plugins,\n    localIds: localIds\n  };\n}\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\nfunction createDescriptors(chart, _ref2, options, all) {\n  var plugins = _ref2.plugins,\n    localIds = _ref2.localIds;\n  var result = [];\n  var context = chart.getContext();\n  var _iterator12 = _createForOfIteratorHelper(plugins),\n    _step12;\n  try {\n    for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n      var plugin = _step12.value;\n      var id = plugin.id;\n      var opts = getOpts(options[id], all);\n      if (opts === null) {\n        continue;\n      }\n      result.push({\n        plugin: plugin,\n        options: pluginOpts(chart.config, {\n          plugin: plugin,\n          local: localIds[id]\n        }, opts, context)\n      });\n    }\n  } catch (err) {\n    _iterator12.e(err);\n  } finally {\n    _iterator12.f();\n  }\n  return result;\n}\nfunction pluginOpts(config, _ref3, opts, context) {\n  var plugin = _ref3.plugin,\n    local = _ref3.local;\n  var keys = config.pluginScopeKeys(plugin);\n  var scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\nfunction getIndexAxis(type, options) {\n  var datasetDefaults = defaults.datasets[type] || {};\n  var datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  var axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\nfunction determineAxis(id) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (var _len11 = arguments.length, scaleOptions = new Array(_len11 > 1 ? _len11 - 1 : 0), _key11 = 1; _key11 < _len11; _key11++) {\n    scaleOptions[_key11 - 1] = arguments[_key11];\n  }\n  for (var _i3 = 0, _scaleOptions = scaleOptions; _i3 < _scaleOptions.length; _i3++) {\n    var opts = _scaleOptions[_i3];\n    var axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(\"Cannot determine type of '\".concat(id, \"' axis. Please provide 'axis' or 'position' option.\"));\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {\n      axis: axis\n    };\n  }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    var boundDs = config.data.datasets.filter(function (d) {\n      return d.xAxisID === id || d.yAxisID === id;\n    });\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\nfunction mergeScaleConfig(config, options) {\n  var chartDefaults = overrides[config.type] || {\n    scales: {}\n  };\n  var configScales = options.scales || {};\n  var chartIndexAxis = getIndexAxis(config.type, options);\n  var scales = Object.create(null);\n  Object.keys(configScales).forEach(function (id) {\n    var scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(\"Invalid scale configuration for scale: \".concat(id));\n    }\n    if (scaleConf._proxy) {\n      return console.warn(\"Ignoring resolver passed as options for scale: \".concat(id));\n    }\n    var axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    var defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    var defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{\n      axis: axis\n    }, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n  config.data.datasets.forEach(function (dataset) {\n    var type = dataset.type || config.type;\n    var indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    var datasetDefaults = overrides[type] || {};\n    var defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(function (defaultID) {\n      var axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      var id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{\n        axis: axis\n      }, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n  Object.keys(scales).forEach(function (key) {\n    var scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n  return scales;\n}\nfunction initOptions(config) {\n  var options = config.options || (config.options = {});\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n  initOptions(config);\n  return config;\n}\nvar keyCache = new Map();\nvar keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n  var keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\nvar addIfFound = function addIfFound(set, obj, key) {\n  var opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\nvar Config = /*#__PURE__*/function () {\n  function Config(config) {\n    _classCallCheck(this, Config);\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n  _createClass(Config, [{\n    key: \"platform\",\n    get: function get() {\n      return this._config.platform;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._config.type;\n    },\n    set: function set(type) {\n      this._config.type = type;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this._config.data;\n    },\n    set: function set(data) {\n      this._config.data = initData(data);\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._config.options;\n    },\n    set: function set(options) {\n      this._config.options = options;\n    }\n  }, {\n    key: \"plugins\",\n    get: function get() {\n      return this._config.plugins;\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      var config = this._config;\n      this.clearCache();\n      initOptions(config);\n    }\n  }, {\n    key: \"clearCache\",\n    value: function clearCache() {\n      this._scopeCache.clear();\n      this._resolverCache.clear();\n    }\n  }, {\n    key: \"datasetScopeKeys\",\n    value: function datasetScopeKeys(datasetType) {\n      return cachedKeys(datasetType, function () {\n        return [[\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetAnimationScopeKeys\",\n    value: function datasetAnimationScopeKeys(datasetType, transition) {\n      return cachedKeys(\"\".concat(datasetType, \".transition.\").concat(transition), function () {\n        return [[\"datasets.\".concat(datasetType, \".transitions.\").concat(transition), \"transitions.\".concat(transition)], [\"datasets.\".concat(datasetType), '']];\n      });\n    }\n  }, {\n    key: \"datasetElementScopeKeys\",\n    value: function datasetElementScopeKeys(datasetType, elementType) {\n      return cachedKeys(\"\".concat(datasetType, \"-\").concat(elementType), function () {\n        return [[\"datasets.\".concat(datasetType, \".elements.\").concat(elementType), \"datasets.\".concat(datasetType), \"elements.\".concat(elementType), '']];\n      });\n    }\n  }, {\n    key: \"pluginScopeKeys\",\n    value: function pluginScopeKeys(plugin) {\n      var id = plugin.id;\n      var type = this.type;\n      return cachedKeys(\"\".concat(type, \"-plugin-\").concat(id), function () {\n        return [[\"plugins.\".concat(id)].concat(_toConsumableArray(plugin.additionalOptionScopes || []))];\n      });\n    }\n  }, {\n    key: \"_cachedScopes\",\n    value: function _cachedScopes(mainScope, resetCache) {\n      var _scopeCache = this._scopeCache;\n      var cache = _scopeCache.get(mainScope);\n      if (!cache || resetCache) {\n        cache = new Map();\n        _scopeCache.set(mainScope, cache);\n      }\n      return cache;\n    }\n  }, {\n    key: \"getOptionScopes\",\n    value: function getOptionScopes(mainScope, keyLists, resetCache) {\n      var options = this.options,\n        type = this.type;\n      var cache = this._cachedScopes(mainScope, resetCache);\n      var cached = cache.get(keyLists);\n      if (cached) {\n        return cached;\n      }\n      var scopes = new Set();\n      keyLists.forEach(function (keys) {\n        if (mainScope) {\n          scopes.add(mainScope);\n          keys.forEach(function (key) {\n            return addIfFound(scopes, mainScope, key);\n          });\n        }\n        keys.forEach(function (key) {\n          return addIfFound(scopes, options, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, overrides[type] || {}, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, defaults, key);\n        });\n        keys.forEach(function (key) {\n          return addIfFound(scopes, descriptors, key);\n        });\n      });\n      var array = Array.from(scopes);\n      if (array.length === 0) {\n        array.push(Object.create(null));\n      }\n      if (keysCached.has(keyLists)) {\n        cache.set(keyLists, array);\n      }\n      return array;\n    }\n  }, {\n    key: \"chartOptionScopes\",\n    value: function chartOptionScopes() {\n      var options = this.options,\n        type = this.type;\n      return [options, overrides[type] || {}, defaults.datasets[type] || {}, {\n        type: type\n      }, defaults, descriptors];\n    }\n  }, {\n    key: \"resolveNamedOptions\",\n    value: function resolveNamedOptions(scopes, names, context) {\n      var prefixes = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [''];\n      var result = {\n        $shared: true\n      };\n      var _getResolver = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver.resolver,\n        subPrefixes = _getResolver.subPrefixes;\n      var options = resolver;\n      if (needContext(resolver, names)) {\n        result.$shared = false;\n        context = isFunction(context) ? context() : context;\n        var subResolver = this.createResolver(scopes, context, subPrefixes);\n        options = _attachContext(resolver, context, subResolver);\n      }\n      var _iterator13 = _createForOfIteratorHelper(names),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var prop = _step13.value;\n          result[prop] = options[prop];\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n      return result;\n    }\n  }, {\n    key: \"createResolver\",\n    value: function createResolver(scopes, context) {\n      var prefixes = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [''];\n      var descriptorDefaults = arguments.length > 3 ? arguments[3] : undefined;\n      var _getResolver2 = getResolver(this._resolverCache, scopes, prefixes),\n        resolver = _getResolver2.resolver;\n      return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n  }]);\n  return Config;\n}();\nfunction getResolver(resolverCache, scopes, prefixes) {\n  var cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  var cacheKey = prefixes.join();\n  var cached = cache.get(cacheKey);\n  if (!cached) {\n    var resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver: resolver,\n      subPrefixes: prefixes.filter(function (p) {\n        return !p.toLowerCase().includes('hover');\n      })\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\nvar hasFunction = function hasFunction(value) {\n  return isObject(value) && Object.getOwnPropertyNames(value).some(function (key) {\n    return isFunction(value[key]);\n  });\n};\nfunction needContext(proxy, names) {\n  var _descriptors2 = _descriptors(proxy),\n    isScriptable = _descriptors2.isScriptable,\n    isIndexable = _descriptors2.isIndexable;\n  var _iterator14 = _createForOfIteratorHelper(names),\n    _step14;\n  try {\n    for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n      var prop = _step14.value;\n      var scriptable = isScriptable(prop);\n      var indexable = isIndexable(prop);\n      var value = (indexable || scriptable) && proxy[prop];\n      if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator14.e(err);\n  } finally {\n    _iterator14.f();\n  }\n  return false;\n}\nvar version = \"4.4.1\";\nvar KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n  return function (a, b) {\n    return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n  };\n}\nfunction onAnimationsComplete(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  chart.notifyPlugins('afterRender');\n  callback(animationOptions && animationOptions.onComplete, [context], chart);\n}\nfunction onAnimationProgress(context) {\n  var chart = context.chart;\n  var animationOptions = chart.options.animation;\n  callback(animationOptions && animationOptions.onProgress, [context], chart);\n}\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    item = item[0];\n  }\n  if (item && item.canvas) {\n    item = item.canvas;\n  }\n  return item;\n}\nvar instances = {};\nvar getChart = function getChart(key) {\n  var canvas = getCanvas(key);\n  return Object.values(instances).filter(function (c) {\n    return c.canvas === canvas;\n  }).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n  var keys = Object.keys(obj);\n  for (var _i4 = 0, _keys = keys; _i4 < _keys.length; _i4++) {\n    var key = _keys[_i4];\n    var intKey = +key;\n    if (intKey >= start) {\n      var value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n  var xScale = meta.xScale,\n    yScale = meta.yScale;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\nvar Chart = /*#__PURE__*/function () {\n  function Chart(item, userConfig) {\n    var _this12 = this;\n    _classCallCheck(this, Chart);\n    var config = this.config = new Config(userConfig);\n    var initialCanvas = getCanvas(item);\n    var existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n    }\n    var options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n    var context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    var canvas = context && context.canvas;\n    var height = canvas && canvas.height;\n    var width = canvas && canvas.width;\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(function (mode) {\n      return _this12.update(mode);\n    }, options.resizeDelay || 0);\n    this._dataChanges = [];\n    instances[this.id] = this;\n    if (!context || !canvas) {\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n  _createClass(Chart, [{\n    key: \"aspectRatio\",\n    get: function get() {\n      var _this$options12 = this.options,\n        aspectRatio = _this$options12.aspectRatio,\n        maintainAspectRatio = _this$options12.maintainAspectRatio,\n        width = this.width,\n        height = this.height,\n        _aspectRatio = this._aspectRatio;\n      if (!isNullOrUndef(aspectRatio)) {\n        return aspectRatio;\n      }\n      if (maintainAspectRatio && _aspectRatio) {\n        return _aspectRatio;\n      }\n      return height ? width / height : null;\n    }\n  }, {\n    key: \"data\",\n    get: function get() {\n      return this.config.data;\n    },\n    set: function set(data) {\n      this.config.data = data;\n    }\n  }, {\n    key: \"options\",\n    get: function get() {\n      return this._options;\n    },\n    set: function set(options) {\n      this.config.options = options;\n    }\n  }, {\n    key: \"registry\",\n    get: function get() {\n      return registry;\n    }\n  }, {\n    key: \"_initialize\",\n    value: function _initialize() {\n      this.notifyPlugins('beforeInit');\n      if (this.options.responsive) {\n        this.resize();\n      } else {\n        retinaScale(this, this.options.devicePixelRatio);\n      }\n      this.bindEvents();\n      this.notifyPlugins('afterInit');\n      return this;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      clearCanvas(this.canvas, this.ctx);\n      return this;\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      animator.stop(this);\n      return this;\n    }\n  }, {\n    key: \"resize\",\n    value: function resize(width, height) {\n      if (!animator.running(this)) {\n        this._resize(width, height);\n      } else {\n        this._resizeBeforeDraw = {\n          width: width,\n          height: height\n        };\n      }\n    }\n  }, {\n    key: \"_resize\",\n    value: function _resize(width, height) {\n      var options = this.options;\n      var canvas = this.canvas;\n      var aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n      var newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n      var newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n      var mode = this.width ? 'resize' : 'attach';\n      this.width = newSize.width;\n      this.height = newSize.height;\n      this._aspectRatio = this.aspectRatio;\n      if (!retinaScale(this, newRatio, true)) {\n        return;\n      }\n      this.notifyPlugins('resize', {\n        size: newSize\n      });\n      callback(options.onResize, [this, newSize], this);\n      if (this.attached) {\n        if (this._doResize(mode)) {\n          this.render();\n        }\n      }\n    }\n  }, {\n    key: \"ensureScalesHaveIDs\",\n    value: function ensureScalesHaveIDs() {\n      var options = this.options;\n      var scalesOptions = options.scales || {};\n      each(scalesOptions, function (axisOptions, axisID) {\n        axisOptions.id = axisID;\n      });\n    }\n  }, {\n    key: \"buildOrUpdateScales\",\n    value: function buildOrUpdateScales() {\n      var _this13 = this;\n      var options = this.options;\n      var scaleOpts = options.scales;\n      var scales = this.scales;\n      var updated = Object.keys(scales).reduce(function (obj, id) {\n        obj[id] = false;\n        return obj;\n      }, {});\n      var items = [];\n      if (scaleOpts) {\n        items = items.concat(Object.keys(scaleOpts).map(function (id) {\n          var scaleOptions = scaleOpts[id];\n          var axis = determineAxis(id, scaleOptions);\n          var isRadial = axis === 'r';\n          var isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        }));\n      }\n      each(items, function (item) {\n        var scaleOptions = item.options;\n        var id = scaleOptions.id;\n        var axis = determineAxis(id, scaleOptions);\n        var scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n        if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n          scaleOptions.position = item.dposition;\n        }\n        updated[id] = true;\n        var scale = null;\n        if (id in scales && scales[id].type === scaleType) {\n          scale = scales[id];\n        } else {\n          var scaleClass = registry.getScale(scaleType);\n          scale = new scaleClass({\n            id: id,\n            type: scaleType,\n            ctx: _this13.ctx,\n            chart: _this13\n          });\n          scales[scale.id] = scale;\n        }\n        scale.init(scaleOptions, options);\n      });\n      each(updated, function (hasUpdated, id) {\n        if (!hasUpdated) {\n          delete scales[id];\n        }\n      });\n      each(scales, function (scale) {\n        layouts.configure(_this13, scale, scale.options);\n        layouts.addBox(_this13, scale);\n      });\n    }\n  }, {\n    key: \"_updateMetasets\",\n    value: function _updateMetasets() {\n      var metasets = this._metasets;\n      var numData = this.data.datasets.length;\n      var numMeta = metasets.length;\n      metasets.sort(function (a, b) {\n        return a.index - b.index;\n      });\n      if (numMeta > numData) {\n        for (var i = numData; i < numMeta; ++i) {\n          this._destroyDatasetMeta(i);\n        }\n        metasets.splice(numData, numMeta - numData);\n      }\n      this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n  }, {\n    key: \"_removeUnreferencedMetasets\",\n    value: function _removeUnreferencedMetasets() {\n      var _this14 = this;\n      var metasets = this._metasets,\n        datasets = this.data.datasets;\n      if (metasets.length > datasets.length) {\n        delete this._stacks;\n      }\n      metasets.forEach(function (meta, index) {\n        if (datasets.filter(function (x) {\n          return x === meta._dataset;\n        }).length === 0) {\n          _this14._destroyDatasetMeta(index);\n        }\n      });\n    }\n  }, {\n    key: \"buildOrUpdateControllers\",\n    value: function buildOrUpdateControllers() {\n      var newControllers = [];\n      var datasets = this.data.datasets;\n      var i, ilen;\n      this._removeUnreferencedMetasets();\n      for (i = 0, ilen = datasets.length; i < ilen; i++) {\n        var dataset = datasets[i];\n        var meta = this.getDatasetMeta(i);\n        var type = dataset.type || this.config.type;\n        if (meta.type && meta.type !== type) {\n          this._destroyDatasetMeta(i);\n          meta = this.getDatasetMeta(i);\n        }\n        meta.type = type;\n        meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n        meta.order = dataset.order || 0;\n        meta.index = i;\n        meta.label = '' + dataset.label;\n        meta.visible = this.isDatasetVisible(i);\n        if (meta.controller) {\n          meta.controller.updateIndex(i);\n          meta.controller.linkScales();\n        } else {\n          var ControllerClass = registry.getController(type);\n          var _defaults$datasets$ty = defaults.datasets[type],\n            datasetElementType = _defaults$datasets$ty.datasetElementType,\n            dataElementType = _defaults$datasets$ty.dataElementType;\n          Object.assign(ControllerClass, {\n            dataElementType: registry.getElement(dataElementType),\n            datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n          });\n          meta.controller = new ControllerClass(this, i);\n          newControllers.push(meta.controller);\n        }\n      }\n      this._updateMetasets();\n      return newControllers;\n    }\n  }, {\n    key: \"_resetElements\",\n    value: function _resetElements() {\n      var _this15 = this;\n      each(this.data.datasets, function (dataset, datasetIndex) {\n        _this15.getDatasetMeta(datasetIndex).controller.reset();\n      }, this);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._resetElements();\n      this.notifyPlugins('reset');\n    }\n  }, {\n    key: \"update\",\n    value: function update(mode) {\n      var config = this.config;\n      config.update();\n      var options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n      var animsDisabled = this._animationsDisabled = !options.animation;\n      this._updateScales();\n      this._checkEventBindings();\n      this._updateHiddenIndices();\n      this._plugins.invalidate();\n      if (this.notifyPlugins('beforeUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var newControllers = this.buildOrUpdateControllers();\n      this.notifyPlugins('beforeElementsUpdate');\n      var minPadding = 0;\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n        var _this$getDatasetMeta = this.getDatasetMeta(i),\n          controller = _this$getDatasetMeta.controller;\n        var reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n        controller.buildOrUpdateElements(reset);\n        minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n      }\n      minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n      this._updateLayout(minPadding);\n      if (!animsDisabled) {\n        each(newControllers, function (controller) {\n          controller.reset();\n        });\n      }\n      this._updateDatasets(mode);\n      this.notifyPlugins('afterUpdate', {\n        mode: mode\n      });\n      this._layers.sort(compare2Level('z', '_idx'));\n      var _active = this._active,\n        _lastEvent = this._lastEvent;\n      if (_lastEvent) {\n        this._eventHandler(_lastEvent, true);\n      } else if (_active.length) {\n        this._updateHoverStyles(_active, _active, true);\n      }\n      this.render();\n    }\n  }, {\n    key: \"_updateScales\",\n    value: function _updateScales() {\n      var _this16 = this;\n      each(this.scales, function (scale) {\n        layouts.removeBox(_this16, scale);\n      });\n      this.ensureScalesHaveIDs();\n      this.buildOrUpdateScales();\n    }\n  }, {\n    key: \"_checkEventBindings\",\n    value: function _checkEventBindings() {\n      var options = this.options;\n      var existingEvents = new Set(Object.keys(this._listeners));\n      var newEvents = new Set(options.events);\n      if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n        this.unbindEvents();\n        this.bindEvents();\n      }\n    }\n  }, {\n    key: \"_updateHiddenIndices\",\n    value: function _updateHiddenIndices() {\n      var _hiddenIndices = this._hiddenIndices;\n      var changes = this._getUniformDataChanges() || [];\n      var _iterator15 = _createForOfIteratorHelper(changes),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var _step15$value = _step15.value,\n            method = _step15$value.method,\n            start = _step15$value.start,\n            count = _step15$value.count;\n          var move = method === '_removeElements' ? -count : count;\n          moveNumericKeys(_hiddenIndices, start, move);\n        }\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n    }\n  }, {\n    key: \"_getUniformDataChanges\",\n    value: function _getUniformDataChanges() {\n      var _dataChanges = this._dataChanges;\n      if (!_dataChanges || !_dataChanges.length) {\n        return;\n      }\n      this._dataChanges = [];\n      var datasetCount = this.data.datasets.length;\n      var makeSet = function makeSet(idx) {\n        return new Set(_dataChanges.filter(function (c) {\n          return c[0] === idx;\n        }).map(function (c, i) {\n          return i + ',' + c.splice(1).join(',');\n        }));\n      };\n      var changeSet = makeSet(0);\n      for (var i = 1; i < datasetCount; i++) {\n        if (!setsEqual(changeSet, makeSet(i))) {\n          return;\n        }\n      }\n      return Array.from(changeSet).map(function (c) {\n        return c.split(',');\n      }).map(function (a) {\n        return {\n          method: a[1],\n          start: +a[2],\n          count: +a[3]\n        };\n      });\n    }\n  }, {\n    key: \"_updateLayout\",\n    value: function _updateLayout(minPadding) {\n      var _this17 = this;\n      if (this.notifyPlugins('beforeLayout', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      layouts.update(this, this.width, this.height, minPadding);\n      var area = this.chartArea;\n      var noArea = area.width <= 0 || area.height <= 0;\n      this._layers = [];\n      each(this.boxes, function (box) {\n        var _this17$_layers;\n        if (noArea && box.position === 'chartArea') {\n          return;\n        }\n        if (box.configure) {\n          box.configure();\n        }\n        (_this17$_layers = _this17._layers).push.apply(_this17$_layers, _toConsumableArray(box._layers()));\n      }, this);\n      this._layers.forEach(function (item, index) {\n        item._idx = index;\n      });\n      this.notifyPlugins('afterLayout');\n    }\n  }, {\n    key: \"_updateDatasets\",\n    value: function _updateDatasets(mode) {\n      if (this.notifyPlugins('beforeDatasetsUpdate', {\n        mode: mode,\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this.getDatasetMeta(i).controller.configure();\n      }\n      for (var _i5 = 0, _ilen = this.data.datasets.length; _i5 < _ilen; ++_i5) {\n        this._updateDataset(_i5, isFunction(mode) ? mode({\n          datasetIndex: _i5\n        }) : mode);\n      }\n      this.notifyPlugins('afterDatasetsUpdate', {\n        mode: mode\n      });\n    }\n  }, {\n    key: \"_updateDataset\",\n    value: function _updateDataset(index, mode) {\n      var meta = this.getDatasetMeta(index);\n      var args = {\n        meta: meta,\n        index: index,\n        mode: mode,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n        return;\n      }\n      meta.controller._update(mode);\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetUpdate', args);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.notifyPlugins('beforeRender', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      if (animator.has(this)) {\n        if (this.attached && !animator.running(this)) {\n          animator.start(this);\n        }\n      } else {\n        this.draw();\n        onAnimationsComplete({\n          chart: this\n        });\n      }\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var i;\n      if (this._resizeBeforeDraw) {\n        var _this$_resizeBeforeDr = this._resizeBeforeDraw,\n          width = _this$_resizeBeforeDr.width,\n          height = _this$_resizeBeforeDr.height;\n        this._resize(width, height);\n        this._resizeBeforeDraw = null;\n      }\n      this.clear();\n      if (this.width <= 0 || this.height <= 0) {\n        return;\n      }\n      if (this.notifyPlugins('beforeDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var layers = this._layers;\n      for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this._drawDatasets();\n      for (; i < layers.length; ++i) {\n        layers[i].draw(this.chartArea);\n      }\n      this.notifyPlugins('afterDraw');\n    }\n  }, {\n    key: \"_getSortedDatasetMetas\",\n    value: function _getSortedDatasetMetas(filterVisible) {\n      var metasets = this._sortedMetasets;\n      var result = [];\n      var i, ilen;\n      for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n        var meta = metasets[i];\n        if (!filterVisible || meta.visible) {\n          result.push(meta);\n        }\n      }\n      return result;\n    }\n  }, {\n    key: \"getSortedVisibleDatasetMetas\",\n    value: function getSortedVisibleDatasetMetas() {\n      return this._getSortedDatasetMetas(true);\n    }\n  }, {\n    key: \"_drawDatasets\",\n    value: function _drawDatasets() {\n      if (this.notifyPlugins('beforeDatasetsDraw', {\n        cancelable: true\n      }) === false) {\n        return;\n      }\n      var metasets = this.getSortedVisibleDatasetMetas();\n      for (var i = metasets.length - 1; i >= 0; --i) {\n        this._drawDataset(metasets[i]);\n      }\n      this.notifyPlugins('afterDatasetsDraw');\n    }\n  }, {\n    key: \"_drawDataset\",\n    value: function _drawDataset(meta) {\n      var ctx = this.ctx;\n      var clip = meta._clip;\n      var useClip = !clip.disabled;\n      var area = getDatasetArea(meta, this.chartArea);\n      var args = {\n        meta: meta,\n        index: meta.index,\n        cancelable: true\n      };\n      if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n        return;\n      }\n      if (useClip) {\n        clipArea(ctx, {\n          left: clip.left === false ? 0 : area.left - clip.left,\n          right: clip.right === false ? this.width : area.right + clip.right,\n          top: clip.top === false ? 0 : area.top - clip.top,\n          bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n        });\n      }\n      meta.controller.draw();\n      if (useClip) {\n        unclipArea(ctx);\n      }\n      args.cancelable = false;\n      this.notifyPlugins('afterDatasetDraw', args);\n    }\n  }, {\n    key: \"isPointInArea\",\n    value: function isPointInArea(point) {\n      return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n  }, {\n    key: \"getElementsAtEventForMode\",\n    value: function getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n      var method = Interaction.modes[mode];\n      if (typeof method === 'function') {\n        return method(this, e, options, useFinalPosition);\n      }\n      return [];\n    }\n  }, {\n    key: \"getDatasetMeta\",\n    value: function getDatasetMeta(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      var metasets = this._metasets;\n      var meta = metasets.filter(function (x) {\n        return x && x._dataset === dataset;\n      }).pop();\n      if (!meta) {\n        meta = {\n          type: null,\n          data: [],\n          dataset: null,\n          controller: null,\n          hidden: null,\n          xAxisID: null,\n          yAxisID: null,\n          order: dataset && dataset.order || 0,\n          index: datasetIndex,\n          _dataset: dataset,\n          _parsed: [],\n          _sorted: false\n        };\n        metasets.push(meta);\n      }\n      return meta;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createContext(null, {\n        chart: this,\n        type: 'chart'\n      }));\n    }\n  }, {\n    key: \"getVisibleDatasetCount\",\n    value: function getVisibleDatasetCount() {\n      return this.getSortedVisibleDatasetMetas().length;\n    }\n  }, {\n    key: \"isDatasetVisible\",\n    value: function isDatasetVisible(datasetIndex) {\n      var dataset = this.data.datasets[datasetIndex];\n      if (!dataset) {\n        return false;\n      }\n      var meta = this.getDatasetMeta(datasetIndex);\n      return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n  }, {\n    key: \"setDatasetVisibility\",\n    value: function setDatasetVisibility(datasetIndex, visible) {\n      var meta = this.getDatasetMeta(datasetIndex);\n      meta.hidden = !visible;\n    }\n  }, {\n    key: \"toggleDataVisibility\",\n    value: function toggleDataVisibility(index) {\n      this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"getDataVisibility\",\n    value: function getDataVisibility(index) {\n      return !this._hiddenIndices[index];\n    }\n  }, {\n    key: \"_updateVisibility\",\n    value: function _updateVisibility(datasetIndex, dataIndex, visible) {\n      var mode = visible ? 'show' : 'hide';\n      var meta = this.getDatasetMeta(datasetIndex);\n      var anims = meta.controller._resolveAnimations(undefined, mode);\n      if (defined(dataIndex)) {\n        meta.data[dataIndex].hidden = !visible;\n        this.update();\n      } else {\n        this.setDatasetVisibility(datasetIndex, visible);\n        anims.update(meta, {\n          visible: visible\n        });\n        this.update(function (ctx) {\n          return ctx.datasetIndex === datasetIndex ? mode : undefined;\n        });\n      }\n    }\n  }, {\n    key: \"hide\",\n    value: function hide(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n  }, {\n    key: \"show\",\n    value: function show(datasetIndex, dataIndex) {\n      this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n  }, {\n    key: \"_destroyDatasetMeta\",\n    value: function _destroyDatasetMeta(datasetIndex) {\n      var meta = this._metasets[datasetIndex];\n      if (meta && meta.controller) {\n        meta.controller._destroy();\n      }\n      delete this._metasets[datasetIndex];\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop() {\n      var i, ilen;\n      this.stop();\n      animator.remove(this);\n      for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.notifyPlugins('beforeDestroy');\n      var canvas = this.canvas,\n        ctx = this.ctx;\n      this._stop();\n      this.config.clearCache();\n      if (canvas) {\n        this.unbindEvents();\n        clearCanvas(canvas, ctx);\n        this.platform.releaseContext(ctx);\n        this.canvas = null;\n        this.ctx = null;\n      }\n      delete instances[this.id];\n      this.notifyPlugins('afterDestroy');\n    }\n  }, {\n    key: \"toBase64Image\",\n    value: function toBase64Image() {\n      var _this$canvas;\n      return (_this$canvas = this.canvas).toDataURL.apply(_this$canvas, arguments);\n    }\n  }, {\n    key: \"bindEvents\",\n    value: function bindEvents() {\n      this.bindUserEvents();\n      if (this.options.responsive) {\n        this.bindResponsiveEvents();\n      } else {\n        this.attached = true;\n      }\n    }\n  }, {\n    key: \"bindUserEvents\",\n    value: function bindUserEvents() {\n      var _this18 = this;\n      var listeners = this._listeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this18, type, listener);\n        listeners[type] = listener;\n      };\n      var listener = function listener(e, x, y) {\n        e.offsetX = x;\n        e.offsetY = y;\n        _this18._eventHandler(e);\n      };\n      each(this.options.events, function (type) {\n        return _add(type, listener);\n      });\n    }\n  }, {\n    key: \"bindResponsiveEvents\",\n    value: function bindResponsiveEvents() {\n      var _this19 = this;\n      if (!this._responsiveListeners) {\n        this._responsiveListeners = {};\n      }\n      var listeners = this._responsiveListeners;\n      var platform = this.platform;\n      var _add = function _add(type, listener) {\n        platform.addEventListener(_this19, type, listener);\n        listeners[type] = listener;\n      };\n      var _remove = function _remove(type, listener) {\n        if (listeners[type]) {\n          platform.removeEventListener(_this19, type, listener);\n          delete listeners[type];\n        }\n      };\n      var listener = function listener(width, height) {\n        if (_this19.canvas) {\n          _this19.resize(width, height);\n        }\n      };\n      var detached;\n      var attached = function attached() {\n        _remove('attach', attached);\n        _this19.attached = true;\n        _this19.resize();\n        _add('resize', listener);\n        _add('detach', detached);\n      };\n      detached = function detached() {\n        _this19.attached = false;\n        _remove('resize', listener);\n        _this19._stop();\n        _this19._resize(0, 0);\n        _add('attach', attached);\n      };\n      if (platform.isAttached(this.canvas)) {\n        attached();\n      } else {\n        detached();\n      }\n    }\n  }, {\n    key: \"unbindEvents\",\n    value: function unbindEvents() {\n      var _this20 = this;\n      each(this._listeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._listeners = {};\n      each(this._responsiveListeners, function (listener, type) {\n        _this20.platform.removeEventListener(_this20, type, listener);\n      });\n      this._responsiveListeners = undefined;\n    }\n  }, {\n    key: \"updateHoverStyle\",\n    value: function updateHoverStyle(items, mode, enabled) {\n      var prefix = enabled ? 'set' : 'remove';\n      var meta, item, i, ilen;\n      if (mode === 'dataset') {\n        meta = this.getDatasetMeta(items[0].datasetIndex);\n        meta.controller['_' + prefix + 'DatasetHoverStyle']();\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        item = items[i];\n        var controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n        if (controller) {\n          controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n        }\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements) {\n      var _this21 = this;\n      var lastActive = this._active || [];\n      var active = activeElements.map(function (_ref4) {\n        var datasetIndex = _ref4.datasetIndex,\n          index = _ref4.index;\n        var meta = _this21.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('No dataset found at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed) {\n        this._active = active;\n        this._lastEvent = null;\n        this._updateHoverStyles(active, lastActive);\n      }\n    }\n  }, {\n    key: \"notifyPlugins\",\n    value: function notifyPlugins(hook, args, filter) {\n      return this._plugins.notify(this, hook, args, filter);\n    }\n  }, {\n    key: \"isPluginEnabled\",\n    value: function isPluginEnabled(pluginId) {\n      return this._plugins._cache.filter(function (p) {\n        return p.plugin.id === pluginId;\n      }).length === 1;\n    }\n  }, {\n    key: \"_updateHoverStyles\",\n    value: function _updateHoverStyles(active, lastActive, replay) {\n      var hoverOptions = this.options.hover;\n      var diff = function diff(a, b) {\n        return a.filter(function (x) {\n          return !b.some(function (y) {\n            return x.datasetIndex === y.datasetIndex && x.index === y.index;\n          });\n        });\n      };\n      var deactivated = diff(lastActive, active);\n      var activated = replay ? active : diff(active, lastActive);\n      if (deactivated.length) {\n        this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n      }\n      if (activated.length && hoverOptions.mode) {\n        this.updateHoverStyle(activated, hoverOptions.mode, true);\n      }\n    }\n  }, {\n    key: \"_eventHandler\",\n    value: function _eventHandler(e, replay) {\n      var _this22 = this;\n      var args = {\n        event: e,\n        replay: replay,\n        cancelable: true,\n        inChartArea: this.isPointInArea(e)\n      };\n      var eventFilter = function eventFilter(plugin) {\n        return (plugin.options.events || _this22.options.events).includes(e.native.type);\n      };\n      if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n        return;\n      }\n      var changed = this._handleEvent(e, replay, args.inChartArea);\n      args.cancelable = false;\n      this.notifyPlugins('afterEvent', args, eventFilter);\n      if (changed || args.changed) {\n        this.render();\n      }\n      return this;\n    }\n  }, {\n    key: \"_handleEvent\",\n    value: function _handleEvent(e, replay, inChartArea) {\n      var _this$_active = this._active,\n        lastActive = _this$_active === void 0 ? [] : _this$_active,\n        options = this.options;\n      var useFinalPosition = replay;\n      var active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n      var isClick = _isClickEvent(e);\n      var lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n      if (inChartArea) {\n        this._lastEvent = null;\n        callback(options.onHover, [e, active, this], this);\n        if (isClick) {\n          callback(options.onClick, [e, active, this], this);\n        }\n      }\n      var changed = !_elementsEqual(active, lastActive);\n      if (changed || replay) {\n        this._active = active;\n        this._updateHoverStyles(active, lastActive, replay);\n      }\n      this._lastEvent = lastEvent;\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive;\n      }\n      var hoverOptions = this.options.hover;\n      return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n  }], [{\n    key: \"register\",\n    value: function register() {\n      registry.add.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }, {\n    key: \"unregister\",\n    value: function unregister() {\n      registry.remove.apply(registry, arguments);\n      invalidatePlugins();\n    }\n  }]);\n  return Chart;\n}();\nChart.defaults = defaults;\nChart.instances = instances;\nChart.overrides = overrides;\nChart.registry = registry;\nChart.version = version;\nChart.getChart = getChart;\nfunction invalidatePlugins() {\n  return each(Chart.instances, function (chart) {\n    return chart._plugins.invalidate();\n  });\n}\nfunction clipArc(ctx, element, endAngle) {\n  var startAngle = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    x = element.x,\n    y = element.y,\n    outerRadius = element.outerRadius,\n    innerRadius = element.innerRadius;\n  var angleMargin = pixelMargin / outerRadius;\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n  var o = toRadiusCorners(arc.options.borderRadius);\n  var halfThickness = (outerRadius - innerRadius) / 2;\n  var innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  var computeOuterLimit = function computeOuterLimit(val) {\n    var outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n  };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r, theta, x, y) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta)\n  };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(ctx, element, offset, spacing, end, circular) {\n  var x = element.x,\n    y = element.y,\n    start = element.startAngle,\n    pixelMargin = element.pixelMargin,\n    innerR = element.innerRadius;\n  var outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  var innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n  var spacingOffset = 0;\n  var alpha = end - start;\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    var noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    var noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    var avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    var adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n  var beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  var angleOffset = (alpha - beta) / 2;\n  var startAngle = start + angleOffset + spacingOffset;\n  var endAngle = end - angleOffset - spacingOffset;\n  var _parseBorderRadius$ = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle),\n    outerStart = _parseBorderRadius$.outerStart,\n    outerEnd = _parseBorderRadius$.outerEnd,\n    innerStart = _parseBorderRadius$.innerStart,\n    innerEnd = _parseBorderRadius$.innerEnd;\n  var outerStartAdjustedRadius = outerRadius - outerStart;\n  var outerEndAdjustedRadius = outerRadius - outerEnd;\n  var outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  var outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n  var innerStartAdjustedRadius = innerRadius + innerStart;\n  var innerEndAdjustedRadius = innerRadius + innerEnd;\n  var innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  var innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n  ctx.beginPath();\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    var outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      var pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n    // The line from point 3 to point 4\n    var p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      var _pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(_pCenter.x, _pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n    // The inner arc from point 5 to point b to point 6\n    var innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      var _pCenter2 = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter2.x, _pCenter2.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n    // The line from point 7 to point 8\n    var p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      var _pCenter3 = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(_pCenter3.x, _pCenter3.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n    var outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    var outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n    var outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    var outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n  ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference;\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n  var fullCircles = element.fullCircles,\n    startAngle = element.startAngle,\n    circumference = element.circumference,\n    options = element.options;\n  var borderWidth = options.borderWidth,\n    borderJoinStyle = options.borderJoinStyle,\n    borderDash = options.borderDash,\n    borderDashOffset = options.borderDashOffset;\n  var inner = options.borderAlign === 'inner';\n  if (!borderWidth) {\n    return;\n  }\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n  var endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (var i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\nvar ArcElement = /*#__PURE__*/function (_Element3) {\n  _inherits(ArcElement, _Element3);\n  function ArcElement(cfg) {\n    var _this23;\n    _classCallCheck(this, ArcElement);\n    _this23 = _callSuper(this, ArcElement);\n    _this23.circumference = void 0;\n    _this23.endAngle = void 0;\n    _this23.fullCircles = void 0;\n    _this23.innerRadius = void 0;\n    _this23.outerRadius = void 0;\n    _this23.pixelMargin = void 0;\n    _this23.startAngle = void 0;\n    _this23.options = undefined;\n    _this23.circumference = undefined;\n    _this23.startAngle = undefined;\n    _this23.endAngle = undefined;\n    _this23.innerRadius = undefined;\n    _this23.outerRadius = undefined;\n    _this23.pixelMargin = 0;\n    _this23.fullCircles = 0;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this23), cfg);\n    }\n    return _this23;\n  }\n  _createClass(ArcElement, [{\n    key: \"inRange\",\n    value: function inRange(chartX, chartY, useFinalPosition) {\n      var point = this.getProps(['x', 'y'], useFinalPosition);\n      var _getAngleFromPoint2 = getAngleFromPoint(point, {\n          x: chartX,\n          y: chartY\n        }),\n        angle = _getAngleFromPoint2.angle,\n        distance = _getAngleFromPoint2.distance;\n      var _this$getProps2 = this.getProps(['startAngle', 'endAngle', 'innerRadius', 'outerRadius', 'circumference'], useFinalPosition),\n        startAngle = _this$getProps2.startAngle,\n        endAngle = _this$getProps2.endAngle,\n        innerRadius = _this$getProps2.innerRadius,\n        outerRadius = _this$getProps2.outerRadius,\n        circumference = _this$getProps2.circumference;\n      var rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n      var _circumference = valueOrDefault(circumference, endAngle - startAngle);\n      var betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n      var withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n      return betweenAngles && withinRadius;\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps3 = this.getProps(['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius'], useFinalPosition),\n        x = _this$getProps3.x,\n        y = _this$getProps3.y,\n        startAngle = _this$getProps3.startAngle,\n        endAngle = _this$getProps3.endAngle,\n        innerRadius = _this$getProps3.innerRadius,\n        outerRadius = _this$getProps3.outerRadius;\n      var _this$options13 = this.options,\n        offset = _this$options13.offset,\n        spacing = _this$options13.spacing;\n      var halfAngle = (startAngle + endAngle) / 2;\n      var halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n      return {\n        x: x + Math.cos(halfAngle) * halfRadius,\n        y: y + Math.sin(halfAngle) * halfRadius\n      };\n    }\n  }, {\n    key: \"tooltipPosition\",\n    value: function tooltipPosition(useFinalPosition) {\n      return this.getCenterPoint(useFinalPosition);\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options,\n        circumference = this.circumference;\n      var offset = (options.offset || 0) / 4;\n      var spacing = (options.spacing || 0) / 2;\n      var circular = options.circular;\n      this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n      this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n      if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n        return;\n      }\n      ctx.save();\n      var halfAngle = (this.startAngle + this.endAngle) / 2;\n      ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n      var fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n      var radiusOffset = offset * fix;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      drawArc(ctx, this, radiusOffset, spacing, circular);\n      drawBorder(ctx, this, radiusOffset, spacing, circular);\n      ctx.restore();\n    }\n  }]);\n  return ArcElement;\n}(Element);\nArcElement.id = 'arc';\nArcElement.defaults = {\n  borderAlign: 'center',\n  borderColor: '#fff',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: undefined,\n  borderRadius: 0,\n  borderWidth: 2,\n  offset: 0,\n  spacing: 0,\n  angle: undefined,\n  circular: true\n};\nArcElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor'\n};\nArcElement.descriptors = {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash';\n  }\n};\nfunction setStyle(ctx, options) {\n  var style = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : options;\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n  return lineTo;\n}\nfunction pathVars(points, segment) {\n  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var count = points.length;\n  var _params$start = params.start,\n    paramsStart = _params$start === void 0 ? 0 : _params$start,\n    _params$end = params.end,\n    paramsEnd = _params$end === void 0 ? count - 1 : _params$end;\n  var segmentStart = segment.start,\n    segmentEnd = segment.end;\n  var start = Math.max(paramsStart, segmentStart);\n  var end = Math.min(paramsEnd, segmentEnd);\n  var outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n  return {\n    count: count,\n    start: start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\nfunction pathSegment(ctx, line, segment, params) {\n  var points = line.points,\n    options = line.options;\n  var _pathVars = pathVars(points, segment, params),\n    count = _pathVars.count,\n    start = _pathVars.start,\n    loop = _pathVars.loop,\n    ilen = _pathVars.ilen;\n  var lineMethod = getLineMethod(options);\n  var _ref5 = params || {},\n    _ref5$move = _ref5.move,\n    move = _ref5$move === void 0 ? true : _ref5$move,\n    reverse = _ref5.reverse;\n  var i, point, prev;\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n    if (point.skip) {\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    prev = point;\n  }\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n  return !!loop;\n}\nfunction fastPathSegment(ctx, line, segment, params) {\n  var points = line.points;\n  var _pathVars2 = pathVars(points, segment, params),\n    count = _pathVars2.count,\n    start = _pathVars2.start,\n    ilen = _pathVars2.ilen;\n  var _ref6 = params || {},\n    _ref6$move = _ref6.move,\n    move = _ref6$move === void 0 ? true : _ref6$move,\n    reverse = _ref6.reverse;\n  var avgX = 0;\n  var countX = 0;\n  var i, point, prevX, minY, maxY, lastY;\n  var pointIndex = function pointIndex(index) {\n    return (start + (reverse ? ilen - index : index)) % count;\n  };\n  var drawX = function drawX() {\n    if (minY !== maxY) {\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n    if (point.skip) {\n      continue;\n    }\n    var x = point.x;\n    var y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      ctx.lineTo(x, y);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    lastY = y;\n  }\n  drawX();\n}\nfunction _getSegmentMethod(line) {\n  var opts = line.options;\n  var borderDash = opts.borderDash && opts.borderDash.length;\n  var useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n  return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n  var path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n  var segments = line.segments,\n    options = line.options;\n  var segmentMethod = _getSegmentMethod(line);\n  var _iterator16 = _createForOfIteratorHelper(segments),\n    _step16;\n  try {\n    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n      var segment = _step16.value;\n      setStyle(ctx, options, segment.style);\n      ctx.beginPath();\n      if (segmentMethod(ctx, line, segment, {\n        start: start,\n        end: start + count - 1\n      })) {\n        ctx.closePath();\n      }\n      ctx.stroke();\n    }\n  } catch (err) {\n    _iterator16.e(err);\n  } finally {\n    _iterator16.f();\n  }\n}\nvar usePath2D = typeof Path2D === 'function';\nfunction _draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\nvar LineElement = /*#__PURE__*/function (_Element4) {\n  _inherits(LineElement, _Element4);\n  function LineElement(cfg) {\n    var _this24;\n    _classCallCheck(this, LineElement);\n    _this24 = _callSuper(this, LineElement);\n    _this24.animated = true;\n    _this24.options = undefined;\n    _this24._chart = undefined;\n    _this24._loop = undefined;\n    _this24._fullLoop = undefined;\n    _this24._path = undefined;\n    _this24._points = undefined;\n    _this24._segments = undefined;\n    _this24._decimated = false;\n    _this24._pointsUpdated = false;\n    _this24._datasetIndex = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this24), cfg);\n    }\n    return _this24;\n  }\n  _createClass(LineElement, [{\n    key: \"updateControlPoints\",\n    value: function updateControlPoints(chartArea, indexAxis) {\n      var options = this.options;\n      if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n        var loop = options.spanGaps ? this._loop : this._fullLoop;\n        _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n        this._pointsUpdated = true;\n      }\n    }\n  }, {\n    key: \"points\",\n    get: function get() {\n      return this._points;\n    },\n    set: function set(points) {\n      this._points = points;\n      delete this._segments;\n      delete this._path;\n      this._pointsUpdated = false;\n    }\n  }, {\n    key: \"segments\",\n    get: function get() {\n      return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      var segments = this.segments;\n      var points = this.points;\n      return segments.length && points[segments[0].start];\n    }\n  }, {\n    key: \"last\",\n    value: function last() {\n      var segments = this.segments;\n      var points = this.points;\n      var count = segments.length;\n      return count && points[segments[count - 1].end];\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point, property) {\n      var options = this.options;\n      var value = point[property];\n      var points = this.points;\n      var segments = _boundSegments(this, {\n        property: property,\n        start: value,\n        end: value\n      });\n      if (!segments.length) {\n        return;\n      }\n      var result = [];\n      var _interpolate = _getInterpolationMethod(options);\n      var i, ilen;\n      for (i = 0, ilen = segments.length; i < ilen; ++i) {\n        var _segments$i = segments[i],\n          start = _segments$i.start,\n          end = _segments$i.end;\n        var p1 = points[start];\n        var p2 = points[end];\n        if (p1 === p2) {\n          result.push(p1);\n          continue;\n        }\n        var t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n        var interpolated = _interpolate(p1, p2, t, options.stepped);\n        interpolated[property] = point[property];\n        result.push(interpolated);\n      }\n      return result.length === 1 ? result[0] : result;\n    }\n  }, {\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, segment, params) {\n      var segmentMethod = _getSegmentMethod(this);\n      return segmentMethod(ctx, this, segment, params);\n    }\n  }, {\n    key: \"path\",\n    value: function path(ctx, start, count) {\n      var segments = this.segments;\n      var segmentMethod = _getSegmentMethod(this);\n      var loop = this._loop;\n      start = start || 0;\n      count = count || this.points.length - start;\n      var _iterator17 = _createForOfIteratorHelper(segments),\n        _step17;\n      try {\n        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n          var segment = _step17.value;\n          loop &= segmentMethod(ctx, this, segment, {\n            start: start,\n            end: start + count - 1\n          });\n        }\n      } catch (err) {\n        _iterator17.e(err);\n      } finally {\n        _iterator17.f();\n      }\n      return !!loop;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, chartArea, start, count) {\n      var options = this.options || {};\n      var points = this.points || [];\n      if (points.length && options.borderWidth) {\n        ctx.save();\n        _draw(ctx, this, start, count);\n        ctx.restore();\n      }\n      if (this.animated) {\n        this._pointsUpdated = false;\n        this._path = undefined;\n      }\n    }\n  }]);\n  return LineElement;\n}(Element);\nLineElement.id = 'line';\nLineElement.defaults = {\n  borderCapStyle: 'butt',\n  borderDash: [],\n  borderDashOffset: 0,\n  borderJoinStyle: 'miter',\n  borderWidth: 3,\n  capBezierPoints: true,\n  cubicInterpolationMode: 'default',\n  fill: false,\n  spanGaps: false,\n  stepped: false,\n  tension: 0\n};\nLineElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nLineElement.descriptors = {\n  _scriptable: true,\n  _indexable: function _indexable(name) {\n    return name !== 'borderDash' && name !== 'fill';\n  }\n};\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n  var options = el.options;\n  var _el$getProps = el.getProps([axis], useFinalPosition),\n    value = _el$getProps[axis];\n  return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nvar PointElement = /*#__PURE__*/function (_Element5) {\n  _inherits(PointElement, _Element5);\n  function PointElement(cfg) {\n    var _this25;\n    _classCallCheck(this, PointElement);\n    _this25 = _callSuper(this, PointElement);\n    _this25.parsed = void 0;\n    _this25.skip = void 0;\n    _this25.stop = void 0;\n    _this25.options = undefined;\n    _this25.parsed = undefined;\n    _this25.skip = undefined;\n    _this25.stop = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this25), cfg);\n    }\n    return _this25;\n  }\n  _createClass(PointElement, [{\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      var options = this.options;\n      var _this$getProps4 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps4.x,\n        y = _this$getProps4.y;\n      return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps5 = this.getProps(['x', 'y'], useFinalPosition),\n        x = _this$getProps5.x,\n        y = _this$getProps5.y;\n      return {\n        x: x,\n        y: y\n      };\n    }\n  }, {\n    key: \"size\",\n    value: function size(options) {\n      options = options || this.options || {};\n      var radius = options.radius || 0;\n      radius = Math.max(radius, radius && options.hoverRadius || 0);\n      var borderWidth = radius && options.borderWidth || 0;\n      return (radius + borderWidth) * 2;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx, area) {\n      var options = this.options;\n      if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n        return;\n      }\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.fillStyle = options.backgroundColor;\n      drawPoint(ctx, options, this.x, this.y);\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange() {\n      var options = this.options || {};\n      // @ts-expect-error Fallbacks should never be hit in practice\n      return options.radius + options.hitRadius;\n    }\n  }]);\n  return PointElement;\n}(Element);\nPointElement.id = 'point';\n/**\n* @type {any}\n*/\nPointElement.defaults = {\n  borderWidth: 1,\n  hitRadius: 1,\n  hoverBorderWidth: 1,\n  hoverRadius: 4,\n  pointStyle: 'circle',\n  radius: 3,\n  rotation: 0\n};\n/**\n* @type {any}\n*/\nPointElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nfunction getBarBounds(bar, useFinalPosition) {\n  var _bar$getProps = bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition),\n    x = _bar$getProps.x,\n    y = _bar$getProps.y,\n    base = _bar$getProps.base,\n    width = _bar$getProps.width,\n    height = _bar$getProps.height;\n  var left, right, top, bottom, half;\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n  return {\n    left: left,\n    top: top,\n    right: right,\n    bottom: bottom\n  };\n}\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n  var value = bar.options.borderWidth;\n  var skip = bar.borderSkipped;\n  var o = toTRBL(value);\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n  var _bar$getProps2 = bar.getProps(['enableBorderRadius']),\n    enableBorderRadius = _bar$getProps2.enableBorderRadius;\n  var value = bar.options.borderRadius;\n  var o = toTRBLCorners(value);\n  var maxR = Math.min(maxW, maxH);\n  var skip = bar.borderSkipped;\n  var enableBorder = enableBorderRadius || isObject(value);\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\nfunction boundingRects(bar) {\n  var bounds = getBarBounds(bar);\n  var width = bounds.right - bounds.left;\n  var height = bounds.bottom - bounds.top;\n  var border = parseBorderWidth(bar, width / 2, height / 2);\n  var radius = parseBorderRadius(bar, width / 2, height / 2);\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius: radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n      }\n    }\n  };\n}\nfunction _inRange(bar, x, y, useFinalPosition) {\n  var skipX = x === null;\n  var skipY = y === null;\n  var skipBoth = skipX && skipY;\n  var bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n  return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount) {\n  var refRect = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var x = rect.x !== refRect.x ? -amount : 0;\n  var y = rect.y !== refRect.y ? -amount : 0;\n  var w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  var h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\nvar BarElement = /*#__PURE__*/function (_Element6) {\n  _inherits(BarElement, _Element6);\n  function BarElement(cfg) {\n    var _this26;\n    _classCallCheck(this, BarElement);\n    _this26 = _callSuper(this, BarElement);\n    _this26.options = undefined;\n    _this26.horizontal = undefined;\n    _this26.base = undefined;\n    _this26.width = undefined;\n    _this26.height = undefined;\n    _this26.inflateAmount = undefined;\n    if (cfg) {\n      Object.assign(_assertThisInitialized(_this26), cfg);\n    }\n    return _this26;\n  }\n  _createClass(BarElement, [{\n    key: \"draw\",\n    value: function draw(ctx) {\n      var inflateAmount = this.inflateAmount,\n        _this$options14 = this.options,\n        borderColor = _this$options14.borderColor,\n        backgroundColor = _this$options14.backgroundColor;\n      var _boundingRects = boundingRects(this),\n        inner = _boundingRects.inner,\n        outer = _boundingRects.outer;\n      var addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n      ctx.save();\n      if (outer.w !== inner.w || outer.h !== inner.h) {\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n        ctx.clip();\n        addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n        ctx.fillStyle = borderColor;\n        ctx.fill('evenodd');\n      }\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(inner, inflateAmount));\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }, {\n    key: \"inRange\",\n    value: function inRange(mouseX, mouseY, useFinalPosition) {\n      return _inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"inXRange\",\n    value: function inXRange(mouseX, useFinalPosition) {\n      return _inRange(this, mouseX, null, useFinalPosition);\n    }\n  }, {\n    key: \"inYRange\",\n    value: function inYRange(mouseY, useFinalPosition) {\n      return _inRange(this, null, mouseY, useFinalPosition);\n    }\n  }, {\n    key: \"getCenterPoint\",\n    value: function getCenterPoint(useFinalPosition) {\n      var _this$getProps6 = this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition),\n        x = _this$getProps6.x,\n        y = _this$getProps6.y,\n        base = _this$getProps6.base,\n        horizontal = _this$getProps6.horizontal;\n      return {\n        x: horizontal ? (x + base) / 2 : x,\n        y: horizontal ? y : (y + base) / 2\n      };\n    }\n  }, {\n    key: \"getRange\",\n    value: function getRange(axis) {\n      return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n  }]);\n  return BarElement;\n}(Element);\nBarElement.id = 'bar';\nBarElement.defaults = {\n  borderSkipped: 'start',\n  borderWidth: 0,\n  borderRadius: 0,\n  inflateAmount: 'auto',\n  pointStyle: undefined\n};\nBarElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\nvar elements = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ArcElement: ArcElement,\n  BarElement: BarElement,\n  LineElement: LineElement,\n  PointElement: PointElement\n});\nvar BORDER_COLORS = ['rgb(54, 162, 235)', 'rgb(255, 99, 132)', 'rgb(255, 159, 64)', 'rgb(255, 205, 86)', 'rgb(75, 192, 192)', 'rgb(153, 102, 255)', 'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nvar BACKGROUND_COLORS = /* #__PURE__ */BORDER_COLORS.map(function (color) {\n  return color.replace('rgb(', 'rgba(').replace(')', ', 0.5)');\n});\nfunction getBorderColor(i) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n  return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBorderColor(i++);\n  });\n  return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n  dataset.backgroundColor = dataset.data.map(function () {\n    return getBackgroundColor(i++);\n  });\n  return i;\n}\nfunction getColorizer(chart) {\n  var i = 0;\n  return function (dataset, datasetIndex) {\n    var controller = chart.getDatasetMeta(datasetIndex).controller;\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\nfunction containsColorsDefinitions(descriptors) {\n  var k;\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n  return false;\n}\nfunction containsColorsDefinition(descriptor) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nvar plugin_colors = {\n  id: 'colors',\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  },\n  beforeLayout: function beforeLayout(chart, _args, options) {\n    if (!options.enabled) {\n      return;\n    }\n    var _chart$config = chart.config,\n      datasets = _chart$config.data.datasets,\n      chartOptions = _chart$config.options;\n    var elements = chartOptions.elements;\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) {\n      return;\n    }\n    var colorizer = getColorizer(chart);\n    datasets.forEach(colorizer);\n  }\n};\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  var samples = options.samples || availableWidth;\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n  var decimated = [];\n  var bucketWidth = (count - 2) / (samples - 2);\n  var sampledIndex = 0;\n  var endIndex = start + count - 1;\n  var a = start;\n  var i, maxAreaPoint, maxArea, area, nextA;\n  decimated[sampledIndex++] = data[a];\n  for (i = 0; i < samples - 2; i++) {\n    var avgX = 0;\n    var avgY = 0;\n    var j = void 0;\n    var avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    var avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    var avgRangeLength = avgRangeEnd - avgRangeStart;\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n    var rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    var rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    var _data$a = data[a],\n      pointAx = _data$a.x,\n      pointAy = _data$a.y;\n    maxArea = area = -1;\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n  decimated[sampledIndex++] = data[endIndex];\n  return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  var avgX = 0;\n  var countX = 0;\n  var i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  var decimated = [];\n  var endIndex = start + count - 1;\n  var xMin = data[start].x;\n  var xMax = data[endIndex].x;\n  var dx = xMax - xMin;\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    var truncX = x | 0;\n    if (truncX === prevX) {\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      var lastIndex = i - 1;\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        var intermediateIndex1 = Math.min(minIndex, maxIndex);\n        var intermediateIndex2 = Math.max(minIndex, maxIndex);\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push(Object.assign(Object.assign({}, data[intermediateIndex1]), {}, {\n            x: avgX\n          }));\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push(Object.assign(Object.assign({}, data[intermediateIndex2]), {}, {\n            x: avgX\n          }));\n        }\n      }\n      if (i > 0 && lastIndex !== startIndex) {\n        decimated.push(data[lastIndex]);\n      }\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n  return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    var data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data\n    });\n  }\n}\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach(function (dataset) {\n    cleanDecimatedDataset(dataset);\n  });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  var pointCount = points.length;\n  var start = 0;\n  var count;\n  var iScale = meta.iScale;\n  var _iScale$getUserBounds = iScale.getUserBounds(),\n    min = _iScale$getUserBounds.min,\n    max = _iScale$getUserBounds.max,\n    minDefined = _iScale$getUserBounds.minDefined,\n    maxDefined = _iScale$getUserBounds.maxDefined;\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n  return {\n    start: start,\n    count: count\n  };\n}\nvar plugin_decimation = {\n  id: 'decimation',\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false\n  },\n  beforeElementsUpdate: function beforeElementsUpdate(chart, args, options) {\n    if (!options.enabled) {\n      cleanDecimatedData(chart);\n      return;\n    }\n    var availableWidth = chart.width;\n    chart.data.datasets.forEach(function (dataset, datasetIndex) {\n      var _data = dataset._data,\n        indexAxis = dataset.indexAxis;\n      var meta = chart.getDatasetMeta(datasetIndex);\n      var data = _data || dataset.data;\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        return;\n      }\n      if (!meta.controller.supportsDecimation) {\n        return;\n      }\n      var xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        return;\n      }\n      if (chart.options.parsing) {\n        return;\n      }\n      var _getStartAndCountOfVi3 = getStartAndCountOfVisiblePointsSimplified(meta, data),\n        start = _getStartAndCountOfVi3.start,\n        count = _getStartAndCountOfVi3.count;\n      var threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n      if (isNullOrUndef(_data)) {\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function get() {\n            return this._decimated;\n          },\n          set: function set(d) {\n            this._data = d;\n          }\n        });\n      }\n      var decimated;\n      switch (options.algorithm) {\n        case 'lttb':\n          decimated = lttbDecimation(data, start, count, availableWidth, options);\n          break;\n        case 'min-max':\n          decimated = minMaxDecimation(data, start, count, availableWidth);\n          break;\n        default:\n          throw new Error(\"Unsupported decimation algorithm '\".concat(options.algorithm, \"'\"));\n      }\n      dataset._decimated = decimated;\n    });\n  },\n  destroy: function destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\nfunction _segments(line, target, property) {\n  var segments = line.segments;\n  var points = line.points;\n  var tpoints = target.points;\n  var parts = [];\n  var _iterator18 = _createForOfIteratorHelper(segments),\n    _step18;\n  try {\n    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {\n      var segment = _step18.value;\n      var start = segment.start,\n        end = segment.end;\n      end = _findSegmentEnd(start, end, points);\n      var bounds = _getBounds(property, points[start], points[end], segment.loop);\n      if (!target.segments) {\n        parts.push({\n          source: segment,\n          target: bounds,\n          start: points[start],\n          end: points[end]\n        });\n        continue;\n      }\n      var targetSegments = _boundSegments(target, bounds);\n      var _iterator19 = _createForOfIteratorHelper(targetSegments),\n        _step19;\n      try {\n        for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {\n          var tgt = _step19.value;\n          var subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n          var fillSources = _boundSegment(segment, points, subBounds);\n          var _iterator20 = _createForOfIteratorHelper(fillSources),\n            _step20;\n          try {\n            for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {\n              var fillSource = _step20.value;\n              parts.push({\n                source: fillSource,\n                target: tgt,\n                start: _defineProperty({}, property, _getEdge(bounds, subBounds, 'start', Math.max)),\n                end: _defineProperty({}, property, _getEdge(bounds, subBounds, 'end', Math.min))\n              });\n            }\n          } catch (err) {\n            _iterator20.e(err);\n          } finally {\n            _iterator20.f();\n          }\n        }\n      } catch (err) {\n        _iterator19.e(err);\n      } finally {\n        _iterator19.f();\n      }\n    }\n  } catch (err) {\n    _iterator18.e(err);\n  } finally {\n    _iterator18.f();\n  }\n  return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  var start = first[property];\n  var end = last[property];\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {\n    property: property,\n    start: start,\n    end: end\n  };\n}\nfunction _pointsFromSegments(boundary, line) {\n  var _ref7 = boundary || {},\n    _ref7$x = _ref7.x,\n    x = _ref7$x === void 0 ? null : _ref7$x,\n    _ref7$y = _ref7.y,\n    y = _ref7$y === void 0 ? null : _ref7$y;\n  var linePoints = line.points;\n  var points = [];\n  line.segments.forEach(function (_ref8) {\n    var start = _ref8.start,\n      end = _ref8.end;\n    end = _findSegmentEnd(start, end, linePoints);\n    var first = linePoints[start];\n    var last = linePoints[end];\n    if (y !== null) {\n      points.push({\n        x: first.x,\n        y: y\n      });\n      points.push({\n        x: last.x,\n        y: y\n      });\n    } else if (x !== null) {\n      points.push({\n        x: x,\n        y: first.y\n      });\n      points.push({\n        x: x,\n        y: last.y\n      });\n    }\n  });\n  return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n  for (; end > start; end--) {\n    var point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\nfunction _createBoundaryLine(boundary, line) {\n  var points = [];\n  var _loop = false;\n  if (isArray(boundary)) {\n    _loop = true;\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n  return points.length ? new LineElement({\n    points: points,\n    options: {\n      tension: 0\n    },\n    _loop: _loop,\n    _fullLoop: _loop\n  }) : null;\n}\nfunction _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\nfunction _resolveTarget(sources, index, propagate) {\n  var source = sources[index];\n  var fill = source.fill;\n  var visited = [index];\n  var target;\n  if (!propagate) {\n    return fill;\n  }\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isNumberFinite(fill)) {\n      return fill;\n    }\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n    if (target.visible) {\n      return fill;\n    }\n    visited.push(fill);\n    fill = target.fill;\n  }\n  return false;\n}\nfunction _decodeFill(line, index, count) {\n  var fill = parseFillOption(line);\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n  var target = parseFloat(fill);\n  if (isNumberFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n  return target;\n}\nfunction _getTargetPixel(fill, scale) {\n  var pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\nfunction _getTargetValue(fill, scale, startValue) {\n  var value;\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\nfunction parseFillOption(line) {\n  var options = line.options;\n  var fillOption = options.fill;\n  var fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n  if (fill === false || fill === null) {\n    return false;\n  }\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\nfunction _buildStackLine(source) {\n  var scale = source.scale,\n    index = source.index,\n    line = source.line;\n  var points = [];\n  var segments = line.segments;\n  var sourcePoints = line.points;\n  var linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({\n    x: null,\n    y: scale.bottom\n  }, line));\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    for (var j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({\n    points: points,\n    options: {}\n  });\n}\nfunction getLinesBelow(scale, index) {\n  var below = [];\n  var metas = scale.getMatchingVisibleMetas('line');\n  for (var i = 0; i < metas.length; i++) {\n    var meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  var postponed = [];\n  for (var j = 0; j < linesBelow.length; j++) {\n    var line = linesBelow[j];\n    var _findPoint = findPoint(line, sourcePoint, 'x'),\n      first = _findPoint.first,\n      last = _findPoint.last,\n      point = _findPoint.point;\n    if (!point || first && last) {\n      continue;\n    }\n    if (first) {\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        break;\n      }\n    }\n  }\n  points.push.apply(points, postponed);\n}\nfunction findPoint(line, sourcePoint, property) {\n  var point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n  var pointValue = point[property];\n  var segments = line.segments;\n  var linePoints = line.points;\n  var first = false;\n  var last = false;\n  for (var i = 0; i < segments.length; i++) {\n    var segment = segments[i];\n    var firstValue = linePoints[segment.start][property];\n    var lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {\n    first: first,\n    last: last,\n    point: point\n  };\n}\nvar simpleArc = /*#__PURE__*/function () {\n  function simpleArc(opts) {\n    _classCallCheck(this, simpleArc);\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n  _createClass(simpleArc, [{\n    key: \"pathSegment\",\n    value: function pathSegment(ctx, bounds, opts) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      bounds = bounds || {\n        start: 0,\n        end: TAU\n      };\n      ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n      return !opts.bounds;\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(point) {\n      var x = this.x,\n        y = this.y,\n        radius = this.radius;\n      var angle = point.angle;\n      return {\n        x: x + Math.cos(angle) * radius,\n        y: y + Math.sin(angle) * radius,\n        angle: angle\n      };\n    }\n  }]);\n  return simpleArc;\n}();\nfunction _getTarget(source) {\n  var chart = source.chart,\n    fill = source.fill,\n    line = source.line;\n  if (isNumberFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n  if (fill === 'shape') {\n    return true;\n  }\n  var boundary = computeBoundary(source);\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n  return _createBoundaryLine(boundary, line);\n}\nfunction getLineByIndex(chart, index) {\n  var meta = chart.getDatasetMeta(index);\n  var visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n  var scale = source.scale || {};\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n  var _source$scale = source.scale,\n    scale = _source$scale === void 0 ? {} : _source$scale,\n    fill = source.fill;\n  var pixel = _getTargetPixel(fill, scale);\n  if (isNumberFinite(pixel)) {\n    var horizontal = scale.isHorizontal();\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n  return null;\n}\nfunction computeCircularBoundary(source) {\n  var scale = source.scale,\n    fill = source.fill;\n  var options = scale.options;\n  var length = scale.getLabels().length;\n  var start = options.reverse ? scale.max : scale.min;\n  var value = _getTargetValue(fill, scale, start);\n  var target = [];\n  if (options.grid.circular) {\n    var center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n  for (var i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\nfunction _drawfill(ctx, source, area) {\n  var target = _getTarget(source);\n  var line = source.line,\n    scale = source.scale,\n    axis = source.axis;\n  var lineOpts = line.options;\n  var fillOption = lineOpts.fill;\n  var color = lineOpts.backgroundColor;\n  var _ref9 = fillOption || {},\n    _ref9$above = _ref9.above,\n    above = _ref9$above === void 0 ? color : _ref9$above,\n    _ref9$below = _ref9.below,\n    below = _ref9$below === void 0 ? color : _ref9$below;\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {\n      line: line,\n      target: target,\n      above: above,\n      below: below,\n      area: area,\n      scale: scale,\n      axis: axis\n    });\n    unclipArea(ctx);\n  }\n}\nfunction doFill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    above = cfg.above,\n    below = cfg.below,\n    area = cfg.area,\n    scale = cfg.scale;\n  var property = line._loop ? 'angle' : cfg.axis;\n  ctx.save();\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {\n      line: line,\n      target: target,\n      color: above,\n      scale: scale,\n      property: property\n    });\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {\n    line: line,\n    target: target,\n    color: below,\n    scale: scale,\n    property: property\n  });\n  ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n  var segments = target.segments,\n    points = target.points;\n  var first = true;\n  var lineLoop = false;\n  ctx.beginPath();\n  var _iterator21 = _createForOfIteratorHelper(segments),\n    _step21;\n  try {\n    for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {\n      var segment = _step21.value;\n      var start = segment.start,\n        end = segment.end;\n      var firstPoint = points[start];\n      var lastPoint = points[_findSegmentEnd(start, end, points)];\n      if (first) {\n        ctx.moveTo(firstPoint.x, firstPoint.y);\n        first = false;\n      } else {\n        ctx.lineTo(firstPoint.x, clipY);\n        ctx.lineTo(firstPoint.x, firstPoint.y);\n      }\n      lineLoop = !!target.pathSegment(ctx, segment, {\n        move: lineLoop\n      });\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        ctx.lineTo(lastPoint.x, clipY);\n      }\n    }\n  } catch (err) {\n    _iterator21.e(err);\n  } finally {\n    _iterator21.f();\n  }\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\nfunction fill(ctx, cfg) {\n  var line = cfg.line,\n    target = cfg.target,\n    property = cfg.property,\n    color = cfg.color,\n    scale = cfg.scale;\n  var segments = _segments(line, target, property);\n  var _iterator22 = _createForOfIteratorHelper(segments),\n    _step22;\n  try {\n    for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {\n      var _step22$value = _step22.value,\n        src = _step22$value.source,\n        tgt = _step22$value.target,\n        start = _step22$value.start,\n        end = _step22$value.end;\n      var _src$style = src.style,\n        _src$style2 = _src$style === void 0 ? {} : _src$style,\n        _src$style2$backgroun = _src$style2.backgroundColor,\n        backgroundColor = _src$style2$backgroun === void 0 ? color : _src$style2$backgroun;\n      var notShape = target !== true;\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n      ctx.beginPath();\n      var lineLoop = !!line.pathSegment(ctx, src);\n      var loop = void 0;\n      if (notShape) {\n        if (lineLoop) {\n          ctx.closePath();\n        } else {\n          interpolatedLineTo(ctx, target, end, property);\n        }\n        var targetLoop = !!target.pathSegment(ctx, tgt, {\n          move: lineLoop,\n          reverse: true\n        });\n        loop = lineLoop && targetLoop;\n        if (!loop) {\n          interpolatedLineTo(ctx, target, start, property);\n        }\n      }\n      ctx.closePath();\n      ctx.fill(loop ? 'evenodd' : 'nonzero');\n      ctx.restore();\n    }\n  } catch (err) {\n    _iterator22.e(err);\n  } finally {\n    _iterator22.f();\n  }\n}\nfunction clipBounds(ctx, scale, bounds) {\n  var _scale$chart$chartAre = scale.chart.chartArea,\n    top = _scale$chart$chartAre.top,\n    bottom = _scale$chart$chartAre.bottom;\n  var _ref10 = bounds || {},\n    property = _ref10.property,\n    start = _ref10.start,\n    end = _ref10.end;\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n  var interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\nvar index = {\n  id: 'filler',\n  afterDatasetsUpdate: function afterDatasetsUpdate(chart, _args, options) {\n    var count = (chart.data.datasets || []).length;\n    var sources = [];\n    var meta, i, line, source;\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart: chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line: line\n        };\n      }\n      meta.$filler = source;\n      sources.push(source);\n    }\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n  beforeDraw: function beforeDraw(chart, _args, options) {\n    var draw = options.drawTime === 'beforeDraw';\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    var area = chart.chartArea;\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n  beforeDatasetsDraw: function beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n    var metasets = chart.getSortedVisibleDatasetMetas();\n    for (var i = metasets.length - 1; i >= 0; --i) {\n      var source = metasets[i].$filler;\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n  beforeDatasetDraw: function beforeDatasetDraw(chart, args, options) {\n    var source = args.meta.$filler;\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\nvar getBoxSize = function getBoxSize(labelOpts, fontSize) {\n  var _labelOpts$boxHeight = labelOpts.boxHeight,\n    boxHeight = _labelOpts$boxHeight === void 0 ? fontSize : _labelOpts$boxHeight,\n    _labelOpts$boxWidth = labelOpts.boxWidth,\n    boxWidth = _labelOpts$boxWidth === void 0 ? fontSize : _labelOpts$boxWidth;\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n  return {\n    boxWidth: boxWidth,\n    boxHeight: boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\nvar itemsEqual = function itemsEqual(a, b) {\n  return a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n};\nvar Legend = /*#__PURE__*/function (_Element7) {\n  _inherits(Legend, _Element7);\n  function Legend(config) {\n    var _this27;\n    _classCallCheck(this, Legend);\n    _this27 = _callSuper(this, Legend);\n    _this27._added = false;\n    _this27.legendHitBoxes = [];\n    _this27._hoveredItem = null;\n    _this27.doughnutMode = false;\n    _this27.chart = config.chart;\n    _this27.options = config.options;\n    _this27.ctx = config.ctx;\n    _this27.legendItems = undefined;\n    _this27.columnSizes = undefined;\n    _this27.lineWidths = undefined;\n    _this27.maxHeight = undefined;\n    _this27.maxWidth = undefined;\n    _this27.top = undefined;\n    _this27.bottom = undefined;\n    _this27.left = undefined;\n    _this27.right = undefined;\n    _this27.height = undefined;\n    _this27.width = undefined;\n    _this27._margins = undefined;\n    _this27.position = undefined;\n    _this27.weight = undefined;\n    _this27.fullSize = undefined;\n    return _this27;\n  }\n  _createClass(Legend, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight, margins) {\n      this.maxWidth = maxWidth;\n      this.maxHeight = maxHeight;\n      this._margins = margins;\n      this.setDimensions();\n      this.buildLabels();\n      this.fit();\n    }\n  }, {\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      if (this.isHorizontal()) {\n        this.width = this.maxWidth;\n        this.left = this._margins.left;\n        this.right = this.width;\n      } else {\n        this.height = this.maxHeight;\n        this.top = this._margins.top;\n        this.bottom = this.height;\n      }\n    }\n  }, {\n    key: \"buildLabels\",\n    value: function buildLabels() {\n      var _this28 = this;\n      var labelOpts = this.options.labels || {};\n      var legendItems = callback(labelOpts.generateLabels, [this.chart], this) || [];\n      if (labelOpts.filter) {\n        legendItems = legendItems.filter(function (item) {\n          return labelOpts.filter(item, _this28.chart.data);\n        });\n      }\n      if (labelOpts.sort) {\n        legendItems = legendItems.sort(function (a, b) {\n          return labelOpts.sort(a, b, _this28.chart.data);\n        });\n      }\n      if (this.options.reverse) {\n        legendItems.reverse();\n      }\n      this.legendItems = legendItems;\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var options = this.options,\n        ctx = this.ctx;\n      if (!options.display) {\n        this.width = this.height = 0;\n        return;\n      }\n      var labelOpts = options.labels;\n      var labelFont = toFont(labelOpts.font);\n      var fontSize = labelFont.size;\n      var titleHeight = this._computeTitleHeight();\n      var _getBoxSize = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize.boxWidth,\n        itemHeight = _getBoxSize.itemHeight;\n      var width, height;\n      ctx.font = labelFont.string;\n      if (this.isHorizontal()) {\n        width = this.maxWidth;\n        height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n      } else {\n        height = this.maxHeight;\n        width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n      }\n      this.width = Math.min(width, options.maxWidth || this.maxWidth);\n      this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n  }, {\n    key: \"_fitRows\",\n    value: function _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n      var ctx = this.ctx,\n        maxWidth = this.maxWidth,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var lineWidths = this.lineWidths = [0];\n      var lineHeight = itemHeight + padding;\n      var totalHeight = titleHeight;\n      ctx.textAlign = 'left';\n      ctx.textBaseline = 'middle';\n      var row = -1;\n      var top = -lineHeight;\n      this.legendItems.forEach(function (legendItem, i) {\n        var itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n        if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n          totalHeight += lineHeight;\n          lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n          top += lineHeight;\n          row++;\n        }\n        hitboxes[i] = {\n          left: 0,\n          top: top,\n          row: row,\n          width: itemWidth,\n          height: itemHeight\n        };\n        lineWidths[lineWidths.length - 1] += itemWidth + padding;\n      });\n      return totalHeight;\n    }\n  }, {\n    key: \"_fitCols\",\n    value: function _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n      var ctx = this.ctx,\n        maxHeight = this.maxHeight,\n        padding = this.options.labels.padding;\n      var hitboxes = this.legendHitBoxes = [];\n      var columnSizes = this.columnSizes = [];\n      var heightLimit = maxHeight - titleHeight;\n      var totalWidth = padding;\n      var currentColWidth = 0;\n      var currentColHeight = 0;\n      var left = 0;\n      var col = 0;\n      this.legendItems.forEach(function (legendItem, i) {\n        var _calculateItemSize = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight),\n          itemWidth = _calculateItemSize.itemWidth,\n          itemHeight = _calculateItemSize.itemHeight;\n        if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n          totalWidth += currentColWidth + padding;\n          columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n          });\n          left += currentColWidth + padding;\n          col++;\n          currentColWidth = currentColHeight = 0;\n        }\n        hitboxes[i] = {\n          left: left,\n          top: currentColHeight,\n          col: col,\n          width: itemWidth,\n          height: itemHeight\n        };\n        currentColWidth = Math.max(currentColWidth, itemWidth);\n        currentColHeight += itemHeight + padding;\n      });\n      totalWidth += currentColWidth;\n      columnSizes.push({\n        width: currentColWidth,\n        height: currentColHeight\n      });\n      return totalWidth;\n    }\n  }, {\n    key: \"adjustHitBoxes\",\n    value: function adjustHitBoxes() {\n      if (!this.options.display) {\n        return;\n      }\n      var titleHeight = this._computeTitleHeight();\n      var hitboxes = this.legendHitBoxes,\n        _this$options15 = this.options,\n        align = _this$options15.align,\n        padding = _this$options15.labels.padding,\n        rtl = _this$options15.rtl;\n      var rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n      if (this.isHorizontal()) {\n        var row = 0;\n        var left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        var _iterator23 = _createForOfIteratorHelper(hitboxes),\n          _step23;\n        try {\n          for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {\n            var hitbox = _step23.value;\n            if (row !== hitbox.row) {\n              row = hitbox.row;\n              left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            }\n            hitbox.top += this.top + titleHeight + padding;\n            hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n            left += hitbox.width + padding;\n          }\n        } catch (err) {\n          _iterator23.e(err);\n        } finally {\n          _iterator23.f();\n        }\n      } else {\n        var col = 0;\n        var top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        var _iterator24 = _createForOfIteratorHelper(hitboxes),\n          _step24;\n        try {\n          for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {\n            var _hitbox = _step24.value;\n            if (_hitbox.col !== col) {\n              col = _hitbox.col;\n              top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            }\n            _hitbox.top = top;\n            _hitbox.left += this.left + padding;\n            _hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(_hitbox.left), _hitbox.width);\n            top += _hitbox.height + padding;\n          }\n        } catch (err) {\n          _iterator24.e(err);\n        } finally {\n          _iterator24.f();\n        }\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      if (this.options.display) {\n        var ctx = this.ctx;\n        clipArea(ctx, this);\n        this._draw();\n        unclipArea(ctx);\n      }\n    }\n  }, {\n    key: \"_draw\",\n    value: function _draw() {\n      var _this29 = this;\n      var opts = this.options,\n        columnSizes = this.columnSizes,\n        lineWidths = this.lineWidths,\n        ctx = this.ctx;\n      var align = opts.align,\n        labelOpts = opts.labels;\n      var defaultColor = defaults.color;\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var labelFont = toFont(labelOpts.font);\n      var padding = labelOpts.padding;\n      var fontSize = labelFont.size;\n      var halfFontSize = fontSize / 2;\n      var cursor;\n      this.drawTitle();\n      ctx.textAlign = rtlHelper.textAlign('left');\n      ctx.textBaseline = 'middle';\n      ctx.lineWidth = 0.5;\n      ctx.font = labelFont.string;\n      var _getBoxSize2 = getBoxSize(labelOpts, fontSize),\n        boxWidth = _getBoxSize2.boxWidth,\n        boxHeight = _getBoxSize2.boxHeight,\n        itemHeight = _getBoxSize2.itemHeight;\n      var drawLegendBox = function drawLegendBox(x, y, legendItem) {\n        if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n          return;\n        }\n        ctx.save();\n        var lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n        ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n        ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n        ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n        ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n        ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n        if (labelOpts.usePointStyle) {\n          var drawOptions = {\n            radius: boxHeight * Math.SQRT2 / 2,\n            pointStyle: legendItem.pointStyle,\n            rotation: legendItem.rotation,\n            borderWidth: lineWidth\n          };\n          var centerX = rtlHelper.xPlus(x, boxWidth / 2);\n          var centerY = y + halfFontSize;\n          drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n        } else {\n          var yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n          var xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n          var borderRadius = toTRBLCorners(legendItem.borderRadius);\n          ctx.beginPath();\n          if (Object.values(borderRadius).some(function (v) {\n            return v !== 0;\n          })) {\n            addRoundedRectPath(ctx, {\n              x: xBoxLeft,\n              y: yBoxTop,\n              w: boxWidth,\n              h: boxHeight,\n              radius: borderRadius\n            });\n          } else {\n            ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n          }\n          ctx.fill();\n          if (lineWidth !== 0) {\n            ctx.stroke();\n          }\n        }\n        ctx.restore();\n      };\n      var fillText = function fillText(x, y, legendItem) {\n        renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n          strikethrough: legendItem.hidden,\n          textAlign: rtlHelper.textAlign(legendItem.textAlign)\n        });\n      };\n      var isHorizontal = this.isHorizontal();\n      var titleHeight = this._computeTitleHeight();\n      if (isHorizontal) {\n        cursor = {\n          x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n          y: this.top + padding + titleHeight,\n          line: 0\n        };\n      } else {\n        cursor = {\n          x: this.left + padding,\n          y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n          line: 0\n        };\n      }\n      overrideTextDirection(this.ctx, opts.textDirection);\n      var lineHeight = itemHeight + padding;\n      this.legendItems.forEach(function (legendItem, i) {\n        ctx.strokeStyle = legendItem.fontColor;\n        ctx.fillStyle = legendItem.fontColor;\n        var textWidth = ctx.measureText(legendItem.text).width;\n        var textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n        var width = boxWidth + halfFontSize + textWidth;\n        var x = cursor.x;\n        var y = cursor.y;\n        rtlHelper.setWidth(_this29.width);\n        if (isHorizontal) {\n          if (i > 0 && x + width + padding > _this29.right) {\n            y = cursor.y += lineHeight;\n            cursor.line++;\n            x = cursor.x = _alignStartEnd(align, _this29.left + padding, _this29.right - lineWidths[cursor.line]);\n          }\n        } else if (i > 0 && y + lineHeight > _this29.bottom) {\n          x = cursor.x = x + columnSizes[cursor.line].width + padding;\n          cursor.line++;\n          y = cursor.y = _alignStartEnd(align, _this29.top + titleHeight + padding, _this29.bottom - columnSizes[cursor.line].height);\n        }\n        var realX = rtlHelper.x(x);\n        drawLegendBox(realX, y, legendItem);\n        x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : _this29.right, opts.rtl);\n        fillText(rtlHelper.x(x), y, legendItem);\n        if (isHorizontal) {\n          cursor.x += width + padding;\n        } else if (typeof legendItem.text !== 'string') {\n          var fontLineHeight = labelFont.lineHeight;\n          cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n        } else {\n          cursor.y += lineHeight;\n        }\n      });\n      restoreTextDirection(this.ctx, opts.textDirection);\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {\n      var opts = this.options;\n      var titleOpts = opts.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      if (!titleOpts.display) {\n        return;\n      }\n      var rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n      var ctx = this.ctx;\n      var position = titleOpts.position;\n      var halfFontSize = titleFont.size / 2;\n      var topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n      var y;\n      var left = this.left;\n      var maxWidth = this.width;\n      if (this.isHorizontal()) {\n        maxWidth = Math.max.apply(Math, _toConsumableArray(this.lineWidths));\n        y = this.top + topPaddingPlusHalfFontSize;\n        left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n      } else {\n        var maxHeight = this.columnSizes.reduce(function (acc, size) {\n          return Math.max(acc, size.height);\n        }, 0);\n        y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n      }\n      var x = _alignStartEnd(position, left, left + maxWidth);\n      ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n      ctx.textBaseline = 'middle';\n      ctx.strokeStyle = titleOpts.color;\n      ctx.fillStyle = titleOpts.color;\n      ctx.font = titleFont.string;\n      renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n  }, {\n    key: \"_computeTitleHeight\",\n    value: function _computeTitleHeight() {\n      var titleOpts = this.options.title;\n      var titleFont = toFont(titleOpts.font);\n      var titlePadding = toPadding(titleOpts.padding);\n      return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n  }, {\n    key: \"_getLegendItemAt\",\n    value: function _getLegendItemAt(x, y) {\n      var i, hitBox, lh;\n      if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n        lh = this.legendHitBoxes;\n        for (i = 0; i < lh.length; ++i) {\n          hitBox = lh[i];\n          if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n            return this.legendItems[i];\n          }\n        }\n      }\n      return null;\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e) {\n      var opts = this.options;\n      if (!isListened(e.type, opts)) {\n        return;\n      }\n      var hoveredItem = this._getLegendItemAt(e.x, e.y);\n      if (e.type === 'mousemove' || e.type === 'mouseout') {\n        var previous = this._hoveredItem;\n        var sameItem = itemsEqual(previous, hoveredItem);\n        if (previous && !sameItem) {\n          callback(opts.onLeave, [e, previous, this], this);\n        }\n        this._hoveredItem = hoveredItem;\n        if (hoveredItem && !sameItem) {\n          callback(opts.onHover, [e, hoveredItem, this], this);\n        }\n      } else if (hoveredItem) {\n        callback(opts.onClick, [e, hoveredItem, this], this);\n      }\n    }\n  }]);\n  return Legend;\n}(Element);\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  var itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  var itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {\n    itemWidth: itemWidth,\n    itemHeight: itemHeight\n  };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  var legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce(function (a, b) {\n      return a.length > b.length ? a : b;\n    });\n  }\n  return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  var itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  var labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\nvar plugin_legend = {\n  id: 'legend',\n  _element: Legend,\n  start: function start(chart, _args, options) {\n    var legend = chart.legend = new Legend({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n  afterUpdate: function afterUpdate(chart) {\n    var legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n    onClick: function onClick(e, legendItem, legend) {\n      var index = legendItem.datasetIndex;\n      var ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n    onHover: null,\n    onLeave: null,\n    labels: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      boxWidth: 40,\n      padding: 10,\n      generateLabels: function generateLabels(chart) {\n        var datasets = chart.data.datasets;\n        var _chart$legend$options = chart.legend.options.labels,\n          usePointStyle = _chart$legend$options.usePointStyle,\n          pointStyle = _chart$legend$options.pointStyle,\n          textAlign = _chart$legend$options.textAlign,\n          color = _chart$legend$options.color,\n          useBorderRadius = _chart$legend$options.useBorderRadius,\n          borderRadius = _chart$legend$options.borderRadius;\n        return chart._getSortedDatasetMetas().map(function (meta) {\n          var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          var borderWidth = toPadding(style.borderWidth);\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n    title: {\n      color: function color(ctx) {\n        return ctx.chart.options.color;\n      },\n      display: false,\n      position: 'center',\n      text: ''\n    }\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return !name.startsWith('on');\n    },\n    labels: {\n      _scriptable: function _scriptable(name) {\n        return !['generateLabels', 'filter', 'sort'].includes(name);\n      }\n    }\n  }\n};\nvar Title = /*#__PURE__*/function (_Element8) {\n  _inherits(Title, _Element8);\n  function Title(config) {\n    var _this30;\n    _classCallCheck(this, Title);\n    _this30 = _callSuper(this, Title);\n    _this30.chart = config.chart;\n    _this30.options = config.options;\n    _this30.ctx = config.ctx;\n    _this30._padding = undefined;\n    _this30.top = undefined;\n    _this30.bottom = undefined;\n    _this30.left = undefined;\n    _this30.right = undefined;\n    _this30.width = undefined;\n    _this30.height = undefined;\n    _this30.position = undefined;\n    _this30.weight = undefined;\n    _this30.fullSize = undefined;\n    return _this30;\n  }\n  _createClass(Title, [{\n    key: \"update\",\n    value: function update(maxWidth, maxHeight) {\n      var opts = this.options;\n      this.left = 0;\n      this.top = 0;\n      if (!opts.display) {\n        this.width = this.height = this.right = this.bottom = 0;\n        return;\n      }\n      this.width = this.right = maxWidth;\n      this.height = this.bottom = maxHeight;\n      var lineCount = isArray(opts.text) ? opts.text.length : 1;\n      this._padding = toPadding(opts.padding);\n      var textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n      if (this.isHorizontal()) {\n        this.height = textSize;\n      } else {\n        this.width = textSize;\n      }\n    }\n  }, {\n    key: \"isHorizontal\",\n    value: function isHorizontal() {\n      var pos = this.options.position;\n      return pos === 'top' || pos === 'bottom';\n    }\n  }, {\n    key: \"_drawArgs\",\n    value: function _drawArgs(offset) {\n      var top = this.top,\n        left = this.left,\n        bottom = this.bottom,\n        right = this.right,\n        options = this.options;\n      var align = options.align;\n      var rotation = 0;\n      var maxWidth, titleX, titleY;\n      if (this.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        titleY = top + offset;\n        maxWidth = right - left;\n      } else {\n        if (options.position === 'left') {\n          titleX = left + offset;\n          titleY = _alignStartEnd(align, bottom, top);\n          rotation = PI * -0.5;\n        } else {\n          titleX = right - offset;\n          titleY = _alignStartEnd(align, top, bottom);\n          rotation = PI * 0.5;\n        }\n        maxWidth = bottom - top;\n      }\n      return {\n        titleX: titleX,\n        titleY: titleY,\n        maxWidth: maxWidth,\n        rotation: rotation\n      };\n    }\n  }, {\n    key: \"draw\",\n    value: function draw() {\n      var ctx = this.ctx;\n      var opts = this.options;\n      if (!opts.display) {\n        return;\n      }\n      var fontOpts = toFont(opts.font);\n      var lineHeight = fontOpts.lineHeight;\n      var offset = lineHeight / 2 + this._padding.top;\n      var _this$_drawArgs = this._drawArgs(offset),\n        titleX = _this$_drawArgs.titleX,\n        titleY = _this$_drawArgs.titleY,\n        maxWidth = _this$_drawArgs.maxWidth,\n        rotation = _this$_drawArgs.rotation;\n      renderText(ctx, opts.text, 0, 0, fontOpts, {\n        color: opts.color,\n        maxWidth: maxWidth,\n        rotation: rotation,\n        textAlign: _toLeftRightCenter(opts.align),\n        textBaseline: 'middle',\n        translation: [titleX, titleY]\n      });\n    }\n  }]);\n  return Title;\n}(Element);\nfunction createTitle(chart, titleOpts) {\n  var title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart: chart\n  });\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\nvar plugin_title = {\n  id: 'title',\n  _element: Title,\n  start: function start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n  stop: function stop(chart) {\n    var titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold'\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar map = new WeakMap();\nvar plugin_subtitle = {\n  id: 'subtitle',\n  start: function start(chart, _args, options) {\n    var title = new Title({\n      ctx: chart.ctx,\n      options: options,\n      chart: chart\n    });\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n  stop: function stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    var title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal'\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500\n  },\n  defaultRoutes: {\n    color: 'color'\n  },\n  descriptors: {\n    _scriptable: true,\n    _indexable: false\n  }\n};\nvar positioners = {\n  average: function average(items) {\n    if (!items.length) {\n      return false;\n    }\n    var i, len;\n    var x = 0;\n    var y = 0;\n    var count = 0;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n  nearest: function nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n    var x = eventPosition.x;\n    var y = eventPosition.y;\n    var minDistance = Number.POSITIVE_INFINITY;\n    var i, len, nearestElement;\n    for (i = 0, len = items.length; i < len; ++i) {\n      var el = items[i].element;\n      if (el && el.hasValue()) {\n        var center = el.getCenterPoint();\n        var d = distanceBetweenPoints(eventPosition, center);\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n    if (nearestElement) {\n      var tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n    return {\n      x: x,\n      y: y\n    };\n  }\n};\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n  return base;\n}\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\nfunction createTooltipItem(chart, item) {\n  var element = item.element,\n    datasetIndex = item.datasetIndex,\n    index = item.index;\n  var controller = chart.getDatasetMeta(datasetIndex).controller;\n  var _controller$getLabelA = controller.getLabelAndValue(index),\n    label = _controller$getLabelA.label,\n    value = _controller$getLabelA.value;\n  return {\n    chart: chart,\n    label: label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex: datasetIndex,\n    element: element\n  };\n}\nfunction getTooltipSize(tooltip, options) {\n  var ctx = tooltip.chart.ctx;\n  var body = tooltip.body,\n    footer = tooltip.footer,\n    title = tooltip.title;\n  var boxWidth = options.boxWidth,\n    boxHeight = options.boxHeight;\n  var bodyFont = toFont(options.bodyFont);\n  var titleFont = toFont(options.titleFont);\n  var footerFont = toFont(options.footerFont);\n  var titleLineCount = title.length;\n  var footerLineCount = footer.length;\n  var bodyLineItemCount = body.length;\n  var padding = toPadding(options.padding);\n  var height = padding.height;\n  var width = 0;\n  var combinedBodyLength = body.reduce(function (count, bodyItem) {\n    return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;\n  }, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    var bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n  }\n  var widthPadding = 0;\n  var maxLineWidth = function maxLineWidth(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n  ctx.save();\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n  widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n  each(body, function (bodyItem) {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n  widthPadding = 0;\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n  ctx.restore();\n  width += padding.width;\n  return {\n    width: width,\n    height: height\n  };\n}\nfunction determineYAlign(chart, size) {\n  var y = size.y,\n    height = size.height;\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > chart.height - height / 2) {\n    return 'bottom';\n  }\n  return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  var x = size.x,\n    width = size.width;\n  var caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n  var x = size.x,\n    width = size.width;\n  var chartWidth = chart.width,\n    _chart$chartArea = chart.chartArea,\n    left = _chart$chartArea.left,\n    right = _chart$chartArea.right;\n  var xAlign = 'center';\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n  return xAlign;\n}\nfunction determineAlignment(chart, options, size) {\n  var yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign: yAlign\n  };\n}\nfunction alignX(size, xAlign) {\n  var x = size.x,\n    width = size.width;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= width / 2;\n  }\n  return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n  var y = size.y,\n    height = size.height;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= height / 2;\n  }\n  return y;\n}\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  var caretSize = options.caretSize,\n    caretPadding = options.caretPadding,\n    cornerRadius = options.cornerRadius;\n  var xAlign = alignment.xAlign,\n    yAlign = alignment.yAlign;\n  var paddingAndSize = caretSize + caretPadding;\n  var _toTRBLCorners = toTRBLCorners(cornerRadius),\n    topLeft = _toTRBLCorners.topLeft,\n    topRight = _toTRBLCorners.topRight,\n    bottomLeft = _toTRBLCorners.bottomLeft,\n    bottomRight = _toTRBLCorners.bottomRight;\n  var x = alignX(size, xAlign);\n  var y = alignY(size, yAlign, paddingAndSize);\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\nfunction getAlignedX(tooltip, align, options) {\n  var padding = toPadding(options.padding);\n  return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip: tooltip,\n    tooltipItems: tooltipItems,\n    type: 'tooltip'\n  });\n}\nfunction overrideCallbacks(callbacks, context) {\n  var override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\nvar defaultCallbacks = {\n  beforeTitle: noop,\n  title: function title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      var item = tooltipItems[0];\n      var labels = item.chart.data.labels;\n      var labelCount = labels ? labels.length : 0;\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n    return '';\n  },\n  afterTitle: noop,\n  beforeBody: noop,\n  beforeLabel: noop,\n  label: function label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n    var label = tooltipItem.dataset.label || '';\n    if (label) {\n      label += ': ';\n    }\n    var value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor: function labelColor(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0\n    };\n  },\n  labelTextColor: function labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle: function labelPointStyle(tooltipItem) {\n    var meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    var options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation\n    };\n  },\n  afterLabel: noop,\n  afterBody: noop,\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  var result = callbacks[name].call(ctx, arg);\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n  return result;\n}\nvar Tooltip = /*#__PURE__*/function (_Element9) {\n  _inherits(Tooltip, _Element9);\n  function Tooltip(config) {\n    var _this31;\n    _classCallCheck(this, Tooltip);\n    _this31 = _callSuper(this, Tooltip);\n    _this31.opacity = 0;\n    _this31._active = [];\n    _this31._eventPosition = undefined;\n    _this31._size = undefined;\n    _this31._cachedAnimations = undefined;\n    _this31._tooltipItems = [];\n    _this31.$animations = undefined;\n    _this31.$context = undefined;\n    _this31.chart = config.chart;\n    _this31.options = config.options;\n    _this31.dataPoints = undefined;\n    _this31.title = undefined;\n    _this31.beforeBody = undefined;\n    _this31.body = undefined;\n    _this31.afterBody = undefined;\n    _this31.footer = undefined;\n    _this31.xAlign = undefined;\n    _this31.yAlign = undefined;\n    _this31.x = undefined;\n    _this31.y = undefined;\n    _this31.height = undefined;\n    _this31.width = undefined;\n    _this31.caretX = undefined;\n    _this31.caretY = undefined;\n    _this31.labelColors = undefined;\n    _this31.labelPointStyles = undefined;\n    _this31.labelTextColors = undefined;\n    return _this31;\n  }\n  _createClass(Tooltip, [{\n    key: \"initialize\",\n    value: function initialize(options) {\n      this.options = options;\n      this._cachedAnimations = undefined;\n      this.$context = undefined;\n    }\n  }, {\n    key: \"_resolveAnimations\",\n    value: function _resolveAnimations() {\n      var cached = this._cachedAnimations;\n      if (cached) {\n        return cached;\n      }\n      var chart = this.chart;\n      var options = this.options.setContext(this.getContext());\n      var opts = options.enabled && chart.options.animation && options.animations;\n      var animations = new Animations(this.chart, opts);\n      if (opts._cacheable) {\n        this._cachedAnimations = Object.freeze(animations);\n      }\n      return animations;\n    }\n  }, {\n    key: \"getContext\",\n    value: function getContext() {\n      return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n  }, {\n    key: \"getTitle\",\n    value: function getTitle(context, options) {\n      var callbacks = options.callbacks;\n      var beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n      var title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n      var afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n      lines = pushOrConcat(lines, splitNewlines(title));\n      lines = pushOrConcat(lines, splitNewlines(afterTitle));\n      return lines;\n    }\n  }, {\n    key: \"getBeforeBody\",\n    value: function getBeforeBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getBody\",\n    value: function getBody(tooltipItems, options) {\n      var _this32 = this;\n      var callbacks = options.callbacks;\n      var bodyItems = [];\n      each(tooltipItems, function (context) {\n        var bodyItem = {\n          before: [],\n          lines: [],\n          after: []\n        };\n        var scoped = overrideCallbacks(callbacks, context);\n        pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', _this32, context)));\n        pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', _this32, context));\n        pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', _this32, context)));\n        bodyItems.push(bodyItem);\n      });\n      return bodyItems;\n    }\n  }, {\n    key: \"getAfterBody\",\n    value: function getAfterBody(tooltipItems, options) {\n      return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n  }, {\n    key: \"getFooter\",\n    value: function getFooter(tooltipItems, options) {\n      var callbacks = options.callbacks;\n      var beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n      var footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n      var afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n      var lines = [];\n      lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n      lines = pushOrConcat(lines, splitNewlines(footer));\n      lines = pushOrConcat(lines, splitNewlines(afterFooter));\n      return lines;\n    }\n  }, {\n    key: \"_createItems\",\n    value: function _createItems(options) {\n      var _this33 = this;\n      var active = this._active;\n      var data = this.chart.data;\n      var labelColors = [];\n      var labelPointStyles = [];\n      var labelTextColors = [];\n      var tooltipItems = [];\n      var i, len;\n      for (i = 0, len = active.length; i < len; ++i) {\n        tooltipItems.push(createTooltipItem(this.chart, active[i]));\n      }\n      if (options.filter) {\n        tooltipItems = tooltipItems.filter(function (element, index, array) {\n          return options.filter(element, index, array, data);\n        });\n      }\n      if (options.itemSort) {\n        tooltipItems = tooltipItems.sort(function (a, b) {\n          return options.itemSort(a, b, data);\n        });\n      }\n      each(tooltipItems, function (context) {\n        var scoped = overrideCallbacks(options.callbacks, context);\n        labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', _this33, context));\n        labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', _this33, context));\n        labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', _this33, context));\n      });\n      this.labelColors = labelColors;\n      this.labelPointStyles = labelPointStyles;\n      this.labelTextColors = labelTextColors;\n      this.dataPoints = tooltipItems;\n      return tooltipItems;\n    }\n  }, {\n    key: \"update\",\n    value: function update(changed, replay) {\n      var options = this.options.setContext(this.getContext());\n      var active = this._active;\n      var properties;\n      var tooltipItems = [];\n      if (!active.length) {\n        if (this.opacity !== 0) {\n          properties = {\n            opacity: 0\n          };\n        }\n      } else {\n        var position = positioners[options.position].call(this, active, this._eventPosition);\n        tooltipItems = this._createItems(options);\n        this.title = this.getTitle(tooltipItems, options);\n        this.beforeBody = this.getBeforeBody(tooltipItems, options);\n        this.body = this.getBody(tooltipItems, options);\n        this.afterBody = this.getAfterBody(tooltipItems, options);\n        this.footer = this.getFooter(tooltipItems, options);\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, size);\n        var alignment = determineAlignment(this.chart, options, positionAndSize);\n        var backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        properties = {\n          opacity: 1,\n          x: backgroundPoint.x,\n          y: backgroundPoint.y,\n          width: size.width,\n          height: size.height,\n          caretX: position.x,\n          caretY: position.y\n        };\n      }\n      this._tooltipItems = tooltipItems;\n      this.$context = undefined;\n      if (properties) {\n        this._resolveAnimations().update(this, properties);\n      }\n      if (changed && options.external) {\n        options.external.call(this, {\n          chart: this.chart,\n          tooltip: this,\n          replay: replay\n        });\n      }\n    }\n  }, {\n    key: \"drawCaret\",\n    value: function drawCaret(tooltipPoint, ctx, size, options) {\n      var caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n      ctx.lineTo(caretPosition.x1, caretPosition.y1);\n      ctx.lineTo(caretPosition.x2, caretPosition.y2);\n      ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n  }, {\n    key: \"getCaretPosition\",\n    value: function getCaretPosition(tooltipPoint, size, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var caretSize = options.caretSize,\n        cornerRadius = options.cornerRadius;\n      var _toTRBLCorners2 = toTRBLCorners(cornerRadius),\n        topLeft = _toTRBLCorners2.topLeft,\n        topRight = _toTRBLCorners2.topRight,\n        bottomLeft = _toTRBLCorners2.bottomLeft,\n        bottomRight = _toTRBLCorners2.bottomRight;\n      var ptX = tooltipPoint.x,\n        ptY = tooltipPoint.y;\n      var width = size.width,\n        height = size.height;\n      var x1, x2, x3, y1, y2, y3;\n      if (yAlign === 'center') {\n        y2 = ptY + height / 2;\n        if (xAlign === 'left') {\n          x1 = ptX;\n          x2 = x1 - caretSize;\n          y1 = y2 + caretSize;\n          y3 = y2 - caretSize;\n        } else {\n          x1 = ptX + width;\n          x2 = x1 + caretSize;\n          y1 = y2 - caretSize;\n          y3 = y2 + caretSize;\n        }\n        x3 = x1;\n      } else {\n        if (xAlign === 'left') {\n          x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n        } else if (xAlign === 'right') {\n          x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n        } else {\n          x2 = this.caretX;\n        }\n        if (yAlign === 'top') {\n          y1 = ptY;\n          y2 = y1 - caretSize;\n          x1 = x2 - caretSize;\n          x3 = x2 + caretSize;\n        } else {\n          y1 = ptY + height;\n          y2 = y1 + caretSize;\n          x1 = x2 + caretSize;\n          x3 = x2 - caretSize;\n        }\n        y3 = y1;\n      }\n      return {\n        x1: x1,\n        x2: x2,\n        x3: x3,\n        y1: y1,\n        y2: y2,\n        y3: y3\n      };\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle(pt, ctx, options) {\n      var title = this.title;\n      var length = title.length;\n      var titleFont, titleSpacing, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.titleAlign, options);\n        ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n        ctx.textBaseline = 'middle';\n        titleFont = toFont(options.titleFont);\n        titleSpacing = options.titleSpacing;\n        ctx.fillStyle = options.titleColor;\n        ctx.font = titleFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n          pt.y += titleFont.lineHeight + titleSpacing;\n          if (i + 1 === length) {\n            pt.y += options.titleMarginBottom - titleSpacing;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"_drawColorBox\",\n    value: function _drawColorBox(ctx, pt, i, rtlHelper, options) {\n      var labelColor = this.labelColors[i];\n      var labelPointStyle = this.labelPointStyles[i];\n      var boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth;\n      var bodyFont = toFont(options.bodyFont);\n      var colorX = getAlignedX(this, 'left', options);\n      var rtlColorX = rtlHelper.x(colorX);\n      var yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n      var colorY = pt.y + yOffSet;\n      if (options.usePointStyle) {\n        var drawOptions = {\n          radius: Math.min(boxWidth, boxHeight) / 2,\n          pointStyle: labelPointStyle.pointStyle,\n          rotation: labelPointStyle.rotation,\n          borderWidth: 1\n        };\n        var centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n        var centerY = colorY + boxHeight / 2;\n        ctx.strokeStyle = options.multiKeyBackground;\n        ctx.fillStyle = options.multiKeyBackground;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.fillStyle = labelColor.backgroundColor;\n        drawPoint(ctx, drawOptions, centerX, centerY);\n      } else {\n        ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max.apply(Math, _toConsumableArray(Object.values(labelColor.borderWidth))) : labelColor.borderWidth || 1;\n        ctx.strokeStyle = labelColor.borderColor;\n        ctx.setLineDash(labelColor.borderDash || []);\n        ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n        var outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n        var innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n        var borderRadius = toTRBLCorners(labelColor.borderRadius);\n        if (Object.values(borderRadius).some(function (v) {\n          return v !== 0;\n        })) {\n          ctx.beginPath();\n          ctx.fillStyle = options.multiKeyBackground;\n          addRoundedRectPath(ctx, {\n            x: outerX,\n            y: colorY,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius\n          });\n          ctx.fill();\n          ctx.stroke();\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.beginPath();\n          addRoundedRectPath(ctx, {\n            x: innerX,\n            y: colorY + 1,\n            w: boxWidth - 2,\n            h: boxHeight - 2,\n            radius: borderRadius\n          });\n          ctx.fill();\n        } else {\n          ctx.fillStyle = options.multiKeyBackground;\n          ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n          ctx.fillStyle = labelColor.backgroundColor;\n          ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n        }\n      }\n      ctx.fillStyle = this.labelTextColors[i];\n    }\n  }, {\n    key: \"drawBody\",\n    value: function drawBody(pt, ctx, options) {\n      var body = this.body;\n      var bodySpacing = options.bodySpacing,\n        bodyAlign = options.bodyAlign,\n        displayColors = options.displayColors,\n        boxHeight = options.boxHeight,\n        boxWidth = options.boxWidth,\n        boxPadding = options.boxPadding;\n      var bodyFont = toFont(options.bodyFont);\n      var bodyLineHeight = bodyFont.lineHeight;\n      var xLinePadding = 0;\n      var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n      var fillLineOfText = function fillLineOfText(line) {\n        ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n        pt.y += bodyLineHeight + bodySpacing;\n      };\n      var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n      var bodyItem, textColor, lines, i, j, ilen, jlen;\n      ctx.textAlign = bodyAlign;\n      ctx.textBaseline = 'middle';\n      ctx.font = bodyFont.string;\n      pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n      ctx.fillStyle = options.bodyColor;\n      each(this.beforeBody, fillLineOfText);\n      xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n      for (i = 0, ilen = body.length; i < ilen; ++i) {\n        bodyItem = body[i];\n        textColor = this.labelTextColors[i];\n        ctx.fillStyle = textColor;\n        each(bodyItem.before, fillLineOfText);\n        lines = bodyItem.lines;\n        if (displayColors && lines.length) {\n          this._drawColorBox(ctx, pt, i, rtlHelper, options);\n          bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n        }\n        for (j = 0, jlen = lines.length; j < jlen; ++j) {\n          fillLineOfText(lines[j]);\n          bodyLineHeight = bodyFont.lineHeight;\n        }\n        each(bodyItem.after, fillLineOfText);\n      }\n      xLinePadding = 0;\n      bodyLineHeight = bodyFont.lineHeight;\n      each(this.afterBody, fillLineOfText);\n      pt.y -= bodySpacing;\n    }\n  }, {\n    key: \"drawFooter\",\n    value: function drawFooter(pt, ctx, options) {\n      var footer = this.footer;\n      var length = footer.length;\n      var footerFont, i;\n      if (length) {\n        var rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        pt.x = getAlignedX(this, options.footerAlign, options);\n        pt.y += options.footerMarginTop;\n        ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n        ctx.textBaseline = 'middle';\n        footerFont = toFont(options.footerFont);\n        ctx.fillStyle = options.footerColor;\n        ctx.font = footerFont.string;\n        for (i = 0; i < length; ++i) {\n          ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n          pt.y += footerFont.lineHeight + options.footerSpacing;\n        }\n      }\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground(pt, ctx, tooltipSize, options) {\n      var xAlign = this.xAlign,\n        yAlign = this.yAlign;\n      var x = pt.x,\n        y = pt.y;\n      var width = tooltipSize.width,\n        height = tooltipSize.height;\n      var _toTRBLCorners3 = toTRBLCorners(options.cornerRadius),\n        topLeft = _toTRBLCorners3.topLeft,\n        topRight = _toTRBLCorners3.topRight,\n        bottomLeft = _toTRBLCorners3.bottomLeft,\n        bottomRight = _toTRBLCorners3.bottomRight;\n      ctx.fillStyle = options.backgroundColor;\n      ctx.strokeStyle = options.borderColor;\n      ctx.lineWidth = options.borderWidth;\n      ctx.beginPath();\n      ctx.moveTo(x + topLeft, y);\n      if (yAlign === 'top') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width - topRight, y);\n      ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n      if (yAlign === 'center' && xAlign === 'right') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + width, y + height - bottomRight);\n      ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n      if (yAlign === 'bottom') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x + bottomLeft, y + height);\n      ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n      if (yAlign === 'center' && xAlign === 'left') {\n        this.drawCaret(pt, ctx, tooltipSize, options);\n      }\n      ctx.lineTo(x, y + topLeft);\n      ctx.quadraticCurveTo(x, y, x + topLeft, y);\n      ctx.closePath();\n      ctx.fill();\n      if (options.borderWidth > 0) {\n        ctx.stroke();\n      }\n    }\n  }, {\n    key: \"_updateAnimationTarget\",\n    value: function _updateAnimationTarget(options) {\n      var chart = this.chart;\n      var anims = this.$animations;\n      var animX = anims && anims.x;\n      var animY = anims && anims.y;\n      if (animX || animY) {\n        var position = positioners[options.position].call(this, this._active, this._eventPosition);\n        if (!position) {\n          return;\n        }\n        var size = this._size = getTooltipSize(this, options);\n        var positionAndSize = Object.assign({}, position, this._size);\n        var alignment = determineAlignment(chart, options, positionAndSize);\n        var point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n        if (animX._to !== point.x || animY._to !== point.y) {\n          this.xAlign = alignment.xAlign;\n          this.yAlign = alignment.yAlign;\n          this.width = size.width;\n          this.height = size.height;\n          this.caretX = position.x;\n          this.caretY = position.y;\n          this._resolveAnimations().update(this, point);\n        }\n      }\n    }\n  }, {\n    key: \"_willRender\",\n    value: function _willRender() {\n      return !!this.opacity;\n    }\n  }, {\n    key: \"draw\",\n    value: function draw(ctx) {\n      var options = this.options.setContext(this.getContext());\n      var opacity = this.opacity;\n      if (!opacity) {\n        return;\n      }\n      this._updateAnimationTarget(options);\n      var tooltipSize = {\n        width: this.width,\n        height: this.height\n      };\n      var pt = {\n        x: this.x,\n        y: this.y\n      };\n      opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n      var padding = toPadding(options.padding);\n      var hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n      if (options.enabled && hasTooltipContent) {\n        ctx.save();\n        ctx.globalAlpha = opacity;\n        this.drawBackground(pt, ctx, tooltipSize, options);\n        overrideTextDirection(ctx, options.textDirection);\n        pt.y += padding.top;\n        this.drawTitle(pt, ctx, options);\n        this.drawBody(pt, ctx, options);\n        this.drawFooter(pt, ctx, options);\n        restoreTextDirection(ctx, options.textDirection);\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"getActiveElements\",\n    value: function getActiveElements() {\n      return this._active || [];\n    }\n  }, {\n    key: \"setActiveElements\",\n    value: function setActiveElements(activeElements, eventPosition) {\n      var _this34 = this;\n      var lastActive = this._active;\n      var active = activeElements.map(function (_ref11) {\n        var datasetIndex = _ref11.datasetIndex,\n          index = _ref11.index;\n        var meta = _this34.chart.getDatasetMeta(datasetIndex);\n        if (!meta) {\n          throw new Error('Cannot find a dataset at index ' + datasetIndex);\n        }\n        return {\n          datasetIndex: datasetIndex,\n          element: meta.data[index],\n          index: index\n        };\n      });\n      var changed = !_elementsEqual(lastActive, active);\n      var positionChanged = this._positionChanged(active, eventPosition);\n      if (changed || positionChanged) {\n        this._active = active;\n        this._eventPosition = eventPosition;\n        this._ignoreReplayEvents = true;\n        this.update(true);\n      }\n    }\n  }, {\n    key: \"handleEvent\",\n    value: function handleEvent(e, replay) {\n      var inChartArea = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n      if (replay && this._ignoreReplayEvents) {\n        return false;\n      }\n      this._ignoreReplayEvents = false;\n      var options = this.options;\n      var lastActive = this._active || [];\n      var active = this._getActiveElements(e, lastActive, replay, inChartArea);\n      var positionChanged = this._positionChanged(active, e);\n      var changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n      if (changed) {\n        this._active = active;\n        if (options.enabled || options.external) {\n          this._eventPosition = {\n            x: e.x,\n            y: e.y\n          };\n          this.update(true, replay);\n        }\n      }\n      return changed;\n    }\n  }, {\n    key: \"_getActiveElements\",\n    value: function _getActiveElements(e, lastActive, replay, inChartArea) {\n      var _this35 = this;\n      var options = this.options;\n      if (e.type === 'mouseout') {\n        return [];\n      }\n      if (!inChartArea) {\n        return lastActive.filter(function (i) {\n          return _this35.chart.data.datasets[i.datasetIndex] && _this35.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined;\n        });\n      }\n      var active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n      if (options.reverse) {\n        active.reverse();\n      }\n      return active;\n    }\n  }, {\n    key: \"_positionChanged\",\n    value: function _positionChanged(active, e) {\n      var caretX = this.caretX,\n        caretY = this.caretY,\n        options = this.options;\n      var position = positioners[options.position].call(this, active, e);\n      return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n  }]);\n  return Tooltip;\n}(Element);\nTooltip.positioners = positioners;\nvar plugin_tooltip = {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners: positioners,\n  afterInit: function afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({\n        chart: chart,\n        options: options\n      });\n    }\n  },\n  beforeUpdate: function beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  reset: function reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n  afterDraw: function afterDraw(chart) {\n    var tooltip = chart.tooltip;\n    if (tooltip && tooltip._willRender()) {\n      var args = {\n        tooltip: tooltip\n      };\n      if (chart.notifyPlugins('beforeTooltipDraw', Object.assign(Object.assign({}, args), {}, {\n        cancelable: true\n      })) === false) {\n        return;\n      }\n      tooltip.draw(chart.ctx);\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n  afterEvent: function afterEvent(chart, args) {\n    if (chart.tooltip) {\n      var useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        args.changed = true;\n      }\n    }\n  },\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold'\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {},\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold'\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: function boxHeight(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    boxWidth: function boxWidth(ctx, opts) {\n      return opts.bodyFont.size;\n    },\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart'\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY']\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n  descriptors: {\n    _scriptable: function _scriptable(name) {\n      return name !== 'filter' && name !== 'itemSort' && name !== 'external';\n    },\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n  additionalOptionScopes: ['interaction']\n};\nvar plugins = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Colors: plugin_colors,\n  Decimation: plugin_decimation,\n  Filler: index,\n  Legend: plugin_legend,\n  SubTitle: plugin_subtitle,\n  Title: plugin_title,\n  Tooltip: plugin_tooltip\n});\nvar addIfString = function addIfString(labels, raw, index, addedLabels) {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({\n      index: index,\n      label: raw\n    });\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  var first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  var last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\nvar validIndex = function validIndex(index, max) {\n  return index === null ? null : _limitValue(Math.round(index), 0, max);\n};\nfunction _getLabelForValue(value) {\n  var labels = this.getLabels();\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\nvar CategoryScale = /*#__PURE__*/function (_Scale) {\n  _inherits(CategoryScale, _Scale);\n  function CategoryScale(cfg) {\n    var _this36;\n    _classCallCheck(this, CategoryScale);\n    _this36 = _callSuper(this, CategoryScale, [cfg]);\n    _this36._startValue = undefined;\n    _this36._valueRange = 0;\n    _this36._addedLabels = [];\n    return _this36;\n  }\n  _createClass(CategoryScale, [{\n    key: \"init\",\n    value: function init(scaleOptions) {\n      var added = this._addedLabels;\n      if (added.length) {\n        var labels = this.getLabels();\n        var _iterator25 = _createForOfIteratorHelper(added),\n          _step25;\n        try {\n          for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {\n            var _step25$value = _step25.value,\n              _index3 = _step25$value.index,\n              label = _step25$value.label;\n            if (labels[_index3] === label) {\n              labels.splice(_index3, 1);\n            }\n          }\n        } catch (err) {\n          _iterator25.e(err);\n        } finally {\n          _iterator25.f();\n        }\n        this._addedLabels = [];\n      }\n      _get(_getPrototypeOf(CategoryScale.prototype), \"init\", this).call(this, scaleOptions);\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      var labels = this.getLabels();\n      index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n      return validIndex(index, labels.length - 1);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getUserBounds2 = this.getUserBounds(),\n        minDefined = _this$getUserBounds2.minDefined,\n        maxDefined = _this$getUserBounds2.maxDefined;\n      var _this$getMinMax = this.getMinMax(true),\n        min = _this$getMinMax.min,\n        max = _this$getMinMax.max;\n      if (this.options.bounds === 'ticks') {\n        if (!minDefined) {\n          min = 0;\n        }\n        if (!maxDefined) {\n          max = this.getLabels().length - 1;\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var min = this.min;\n      var max = this.max;\n      var offset = this.options.offset;\n      var ticks = [];\n      var labels = this.getLabels();\n      labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n      this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n      this._startValue = this.min - (offset ? 0.5 : 0);\n      for (var value = min; value <= max; value++) {\n        ticks.push({\n          value: value\n        });\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return _getLabelForValue.call(this, value);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      _get(_getPrototypeOf(CategoryScale.prototype), \"configure\", this).call(this);\n      if (!this.isHorizontal()) {\n        this._reversePixels = !this._reversePixels;\n      }\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (typeof value !== 'number') {\n        value = this.parse(value);\n      }\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getPixelForTick\",\n    value: function getPixelForTick(index) {\n      var ticks = this.ticks;\n      if (index < 0 || index > ticks.length - 1) {\n        return null;\n      }\n      return this.getPixelForValue(ticks[index].value);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n  }, {\n    key: \"getBasePixel\",\n    value: function getBasePixel() {\n      return this.bottom;\n    }\n  }]);\n  return CategoryScale;\n}(Scale);\nCategoryScale.id = 'category';\nCategoryScale.defaults = {\n  ticks: {\n    callback: _getLabelForValue\n  }\n};\nfunction generateTicks$1(generationOptions, dataRange) {\n  var ticks = [];\n  var MIN_SPACING = 1e-14;\n  var bounds = generationOptions.bounds,\n    step = generationOptions.step,\n    min = generationOptions.min,\n    max = generationOptions.max,\n    precision = generationOptions.precision,\n    count = generationOptions.count,\n    maxTicks = generationOptions.maxTicks,\n    maxDigits = generationOptions.maxDigits,\n    includeBounds = generationOptions.includeBounds;\n  var unit = step || 1;\n  var maxSpaces = maxTicks - 1;\n  var rmin = dataRange.min,\n    rmax = dataRange.max;\n  var minDefined = !isNullOrUndef(min);\n  var maxDefined = !isNullOrUndef(max);\n  var countDefined = !isNullOrUndef(count);\n  var minSpacing = (rmax - rmin) / (maxDigits + 1);\n  var spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  var factor, niceMin, niceMax, numSpaces;\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{\n      value: rmin\n    }, {\n      value: rmax\n    }];\n  }\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n  if (!isNullOrUndef(precision)) {\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    numSpaces = (niceMax - niceMin) / spacing;\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n  var decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n  var j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({\n        value: min\n      });\n      if (niceMin < min) {\n        j++;\n      }\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n  for (; j < numSpaces; ++j) {\n    var tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({\n      value: tickValue\n    });\n  }\n  if (maxDefined && includeBounds && niceMax !== max) {\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({\n        value: max\n      });\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({\n      value: niceMax\n    });\n  }\n  return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, _ref12) {\n  var horizontal = _ref12.horizontal,\n    minRotation = _ref12.minRotation;\n  var rad = toRadians(minRotation);\n  var ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  var length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\nvar LinearScaleBase = /*#__PURE__*/function (_Scale2) {\n  _inherits(LinearScaleBase, _Scale2);\n  function LinearScaleBase(cfg) {\n    var _this37;\n    _classCallCheck(this, LinearScaleBase);\n    _this37 = _callSuper(this, LinearScaleBase, [cfg]);\n    _this37.start = undefined;\n    _this37.end = undefined;\n    _this37._startValue = undefined;\n    _this37._endValue = undefined;\n    _this37._valueRange = 0;\n    return _this37;\n  }\n  _createClass(LinearScaleBase, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (isNullOrUndef(raw)) {\n        return null;\n      }\n      if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n        return null;\n      }\n      return +raw;\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var beginAtZero = this.options.beginAtZero;\n      var _this$getUserBounds3 = this.getUserBounds(),\n        minDefined = _this$getUserBounds3.minDefined,\n        maxDefined = _this$getUserBounds3.maxDefined;\n      var min = this.min,\n        max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (beginAtZero) {\n        var minSign = sign(min);\n        var maxSign = sign(max);\n        if (minSign < 0 && maxSign < 0) {\n          setMax(0);\n        } else if (minSign > 0 && maxSign > 0) {\n          setMin(0);\n        }\n      }\n      if (min === max) {\n        var offset = max === 0 ? 1 : Math.abs(max * 0.05);\n        setMax(max + offset);\n        if (!beginAtZero) {\n          setMin(min - offset);\n        }\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"getTickLimit\",\n    value: function getTickLimit() {\n      var tickOpts = this.options.ticks;\n      var maxTicksLimit = tickOpts.maxTicksLimit,\n        stepSize = tickOpts.stepSize;\n      var maxTicks;\n      if (stepSize) {\n        maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n        if (maxTicks > 1000) {\n          console.warn(\"scales.\".concat(this.id, \".ticks.stepSize: \").concat(stepSize, \" would result generating up to \").concat(maxTicks, \" ticks. Limiting to 1000.\"));\n          maxTicks = 1000;\n        }\n      } else {\n        maxTicks = this.computeTickLimit();\n        maxTicksLimit = maxTicksLimit || 11;\n      }\n      if (maxTicksLimit) {\n        maxTicks = Math.min(maxTicksLimit, maxTicks);\n      }\n      return maxTicks;\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Number.POSITIVE_INFINITY;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      var maxTicks = this.getTickLimit();\n      maxTicks = Math.max(2, maxTicks);\n      var numericGeneratorOptions = {\n        maxTicks: maxTicks,\n        bounds: opts.bounds,\n        min: opts.min,\n        max: opts.max,\n        precision: tickOpts.precision,\n        step: tickOpts.stepSize,\n        count: tickOpts.count,\n        maxDigits: this._maxDigits(),\n        horizontal: this.isHorizontal(),\n        minRotation: tickOpts.minRotation || 0,\n        includeBounds: tickOpts.includeBounds !== false\n      };\n      var dataRange = this._range || this;\n      var ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var ticks = this.ticks;\n      var start = this.min;\n      var end = this.max;\n      _get(_getPrototypeOf(LinearScaleBase.prototype), \"configure\", this).call(this);\n      if (this.options.offset && ticks.length) {\n        var offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n        start -= offset;\n        end += offset;\n      }\n      this._startValue = start;\n      this._endValue = end;\n      this._valueRange = end - start;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }]);\n  return LinearScaleBase;\n}(Scale);\nvar LinearScale = /*#__PURE__*/function (_LinearScaleBase) {\n  _inherits(LinearScale, _LinearScaleBase);\n  function LinearScale() {\n    _classCallCheck(this, LinearScale);\n    return _callSuper(this, LinearScale, arguments);\n  }\n  _createClass(LinearScale, [{\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax2 = this.getMinMax(true),\n        min = _this$getMinMax2.min,\n        max = _this$getMinMax2.max;\n      this.min = isNumberFinite(min) ? min : 0;\n      this.max = isNumberFinite(max) ? max : 1;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      var horizontal = this.isHorizontal();\n      var length = horizontal ? this.width : this.height;\n      var minRotation = toRadians(this.options.ticks.minRotation);\n      var ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n      var tickFont = this._resolveTickFontOptions(0);\n      return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n  }]);\n  return LinearScale;\n}(LinearScaleBase);\nLinearScale.id = 'linear';\nLinearScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.numeric\n  }\n};\nvar log10Floor = function log10Floor(v) {\n  return Math.floor(log10(v));\n};\nvar changeExponent = function changeExponent(v, m) {\n  return Math.pow(10, log10Floor(v) + m);\n};\nfunction isMajor(tickVal) {\n  var remain = tickVal / Math.pow(10, log10Floor(tickVal));\n  return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n  var rangeStep = Math.pow(10, rangeExp);\n  var start = Math.floor(min / rangeStep);\n  var end = Math.ceil(max / rangeStep);\n  return end - start;\n}\nfunction startExp(min, max) {\n  var range = max - min;\n  var rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\nfunction generateTicks(generationOptions, _ref13) {\n  var min = _ref13.min,\n    max = _ref13.max;\n  min = finiteOrDefault(generationOptions.min, min);\n  var ticks = [];\n  var minExp = log10Floor(min);\n  var exp = startExp(min, max);\n  var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  var stepSize = Math.pow(10, exp);\n  var base = minExp > exp ? Math.pow(10, minExp) : 0;\n  var start = Math.round((min - base) * precision) / precision;\n  var offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  var significand = Math.floor((start - offset) / Math.pow(10, exp));\n  var value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({\n      value: value,\n      major: isMajor(value),\n      significand: significand\n    });\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  var lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({\n    value: lastTick,\n    major: isMajor(lastTick),\n    significand: significand\n  });\n  return ticks;\n}\nvar LogarithmicScale = /*#__PURE__*/function (_Scale3) {\n  _inherits(LogarithmicScale, _Scale3);\n  function LogarithmicScale(cfg) {\n    var _this38;\n    _classCallCheck(this, LogarithmicScale);\n    _this38 = _callSuper(this, LogarithmicScale, [cfg]);\n    _this38.start = undefined;\n    _this38.end = undefined;\n    _this38._startValue = undefined;\n    _this38._valueRange = 0;\n    return _this38;\n  }\n  _createClass(LogarithmicScale, [{\n    key: \"parse\",\n    value: function parse(raw, index) {\n      var value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n      if (value === 0) {\n        this._zero = true;\n        return undefined;\n      }\n      return isNumberFinite(value) && value > 0 ? value : null;\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax3 = this.getMinMax(true),\n        min = _this$getMinMax3.min,\n        max = _this$getMinMax3.max;\n      this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n      this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n      if (this.options.beginAtZero) {\n        this._zero = true;\n      }\n      if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n        this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n      }\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"handleTickRangeOptions\",\n    value: function handleTickRangeOptions() {\n      var _this$getUserBounds4 = this.getUserBounds(),\n        minDefined = _this$getUserBounds4.minDefined,\n        maxDefined = _this$getUserBounds4.maxDefined;\n      var min = this.min;\n      var max = this.max;\n      var setMin = function setMin(v) {\n        return min = minDefined ? min : v;\n      };\n      var setMax = function setMax(v) {\n        return max = maxDefined ? max : v;\n      };\n      if (min === max) {\n        if (min <= 0) {\n          setMin(1);\n          setMax(10);\n        } else {\n          setMin(changeExponent(min, -1));\n          setMax(changeExponent(max, +1));\n        }\n      }\n      if (min <= 0) {\n        setMin(changeExponent(max, -1));\n      }\n      if (max <= 0) {\n        setMax(changeExponent(min, +1));\n      }\n      this.min = min;\n      this.max = max;\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var opts = this.options;\n      var generationOptions = {\n        min: this._userMin,\n        max: this._userMax\n      };\n      var ticks = generateTicks(generationOptions, this);\n      if (opts.bounds === 'ticks') {\n        _setMinAndMaxByKey(ticks, this, 'value');\n      }\n      if (opts.reverse) {\n        ticks.reverse();\n        this.start = this.max;\n        this.end = this.min;\n      } else {\n        this.start = this.min;\n        this.end = this.max;\n      }\n      return ticks;\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n  }, {\n    key: \"configure\",\n    value: function configure() {\n      var start = this.min;\n      _get(_getPrototypeOf(LogarithmicScale.prototype), \"configure\", this).call(this);\n      this._startValue = log10(start);\n      this._valueRange = log10(this.max) - log10(start);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      if (value === undefined || value === 0) {\n        value = this.min;\n      }\n      if (value === null || isNaN(value)) {\n        return NaN;\n      }\n      return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var decimal = this.getDecimalForPixel(pixel);\n      return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n  }]);\n  return LogarithmicScale;\n}(Scale);\nLogarithmicScale.id = 'logarithmic';\nLogarithmicScale.defaults = {\n  ticks: {\n    callback: Ticks.formatters.logarithmic,\n    major: {\n      enabled: true\n    }\n  }\n};\nfunction getTickBackdropHeight(opts) {\n  var tickOpts = opts.ticks;\n  if (tickOpts.display && opts.display) {\n    var padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - size / 2,\n      end: pos + size / 2\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\nfunction fitWithPointLabels(scale) {\n  var orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  var limits = Object.assign({}, orig);\n  var labelSizes = [];\n  var padding = [];\n  var valueCount = scale._pointLabels.length;\n  var pointLabelOpts = scale.options.pointLabels;\n  var additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n  for (var i = 0; i < valueCount; i++) {\n    var opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    var pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    var plFont = toFont(opts.font);\n    var textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n    var angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    var angle = Math.round(toDegrees(angleRadians));\n    var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n  scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  var sin = Math.abs(Math.sin(angle));\n  var cos = Math.abs(Math.cos(angle));\n  var x = 0;\n  var y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n  var outerDistance = scale.drawingArea;\n  var extra = itemOpts.extra,\n    additionalAngle = itemOpts.additionalAngle,\n    padding = itemOpts.padding,\n    size = itemOpts.size;\n  var pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  var angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  var y = yForAngle(pointLabelPosition.y, size.h, angle);\n  var textAlign = getTextAlignForAngle(angle);\n  var left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    visible: true,\n    x: pointLabelPosition.x,\n    y: y,\n    textAlign: textAlign,\n    left: left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var apexesInArea = _isPointInArea({\n    x: left,\n    y: top\n  }, area) || _isPointInArea({\n    x: left,\n    y: bottom\n  }, area) || _isPointInArea({\n    x: right,\n    y: top\n  }, area) || _isPointInArea({\n    x: right,\n    y: bottom\n  }, area);\n  return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  var items = [];\n  var valueCount = scale._pointLabels.length;\n  var opts = scale.options;\n  var _opts$pointLabels = opts.pointLabels,\n    centerPointLabels = _opts$pointLabels.centerPointLabels,\n    display = _opts$pointLabels.display;\n  var itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  var area;\n  for (var i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n    var item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n  return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= w / 2;\n  }\n  return x;\n}\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= h / 2;\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n  var left = item.left,\n    top = item.top,\n    right = item.right,\n    bottom = item.bottom;\n  var backdropColor = opts.backdropColor;\n  if (!isNullOrUndef(backdropColor)) {\n    var borderRadius = toTRBLCorners(opts.borderRadius);\n    var padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n    var backdropLeft = left - padding.left;\n    var backdropTop = top - padding.top;\n    var backdropWidth = right - left + padding.width;\n    var backdropHeight = bottom - top + padding.height;\n    if (Object.values(borderRadius).some(function (v) {\n      return v !== 0;\n    })) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\nfunction drawPointLabels(scale, labelCount) {\n  var ctx = scale.ctx,\n    pointLabels = scale.options.pointLabels;\n  for (var i = labelCount - 1; i >= 0; i--) {\n    var item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      continue;\n    }\n    var optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    var plFont = toFont(optsAtIndex.font);\n    var x = item.x,\n      y = item.y,\n      textAlign = item.textAlign;\n    renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n      color: optsAtIndex.color,\n      textAlign: textAlign,\n      textBaseline: 'middle'\n    });\n  }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  var ctx = scale.ctx;\n  if (circular) {\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    var pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n    for (var i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  var ctx = scale.ctx;\n  var circular = gridLineOpts.circular;\n  var color = gridLineOpts.color,\n    lineWidth = gridLineOpts.lineWidth;\n  if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n    return;\n  }\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label: label,\n    index: index,\n    type: 'pointLabel'\n  });\n}\nvar RadialLinearScale = /*#__PURE__*/function (_LinearScaleBase2) {\n  _inherits(RadialLinearScale, _LinearScaleBase2);\n  function RadialLinearScale(cfg) {\n    var _this39;\n    _classCallCheck(this, RadialLinearScale);\n    _this39 = _callSuper(this, RadialLinearScale, [cfg]);\n    _this39.xCenter = undefined;\n    _this39.yCenter = undefined;\n    _this39.drawingArea = undefined;\n    _this39._pointLabels = [];\n    _this39._pointLabelItems = [];\n    return _this39;\n  }\n  _createClass(RadialLinearScale, [{\n    key: \"setDimensions\",\n    value: function setDimensions() {\n      var padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n      var w = this.width = this.maxWidth - padding.width;\n      var h = this.height = this.maxHeight - padding.height;\n      this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n      this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n      this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var _this$getMinMax4 = this.getMinMax(false),\n        min = _this$getMinMax4.min,\n        max = _this$getMinMax4.max;\n      this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n      this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n      this.handleTickRangeOptions();\n    }\n  }, {\n    key: \"computeTickLimit\",\n    value: function computeTickLimit() {\n      return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var _this40 = this;\n      LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n      this._pointLabels = this.getLabels().map(function (value, index) {\n        var label = callback(_this40.options.pointLabels.callback, [value, index], _this40);\n        return label || label === 0 ? label : '';\n      }).filter(function (v, i) {\n        return _this40.chart.getDataVisibility(i);\n      });\n    }\n  }, {\n    key: \"fit\",\n    value: function fit() {\n      var opts = this.options;\n      if (opts.display && opts.pointLabels.display) {\n        fitWithPointLabels(this);\n      } else {\n        this.setCenterPoint(0, 0, 0, 0);\n      }\n    }\n  }, {\n    key: \"setCenterPoint\",\n    value: function setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n      this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n      this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n      this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n  }, {\n    key: \"getIndexAngle\",\n    value: function getIndexAngle(index) {\n      var angleMultiplier = TAU / (this._pointLabels.length || 1);\n      var startAngle = this.options.startAngle || 0;\n      return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n  }, {\n    key: \"getDistanceFromCenterForValue\",\n    value: function getDistanceFromCenterForValue(value) {\n      if (isNullOrUndef(value)) {\n        return NaN;\n      }\n      var scalingFactor = this.drawingArea / (this.max - this.min);\n      if (this.options.reverse) {\n        return (this.max - value) * scalingFactor;\n      }\n      return (value - this.min) * scalingFactor;\n    }\n  }, {\n    key: \"getValueForDistanceFromCenter\",\n    value: function getValueForDistanceFromCenter(distance) {\n      if (isNullOrUndef(distance)) {\n        return NaN;\n      }\n      var scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n      return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n  }, {\n    key: \"getPointLabelContext\",\n    value: function getPointLabelContext(index) {\n      var pointLabels = this._pointLabels || [];\n      if (index >= 0 && index < pointLabels.length) {\n        var pointLabel = pointLabels[index];\n        return createPointLabelContext(this.getContext(), index, pointLabel);\n      }\n    }\n  }, {\n    key: \"getPointPosition\",\n    value: function getPointPosition(index, distanceFromCenter) {\n      var additionalAngle = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n      return {\n        x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n        y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n        angle: angle\n      };\n    }\n  }, {\n    key: \"getPointPositionForValue\",\n    value: function getPointPositionForValue(index, value) {\n      return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n  }, {\n    key: \"getBasePosition\",\n    value: function getBasePosition(index) {\n      return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n  }, {\n    key: \"getPointLabelPosition\",\n    value: function getPointLabelPosition(index) {\n      var _this$_pointLabelItem = this._pointLabelItems[index],\n        left = _this$_pointLabelItem.left,\n        top = _this$_pointLabelItem.top,\n        right = _this$_pointLabelItem.right,\n        bottom = _this$_pointLabelItem.bottom;\n      return {\n        left: left,\n        top: top,\n        right: right,\n        bottom: bottom\n      };\n    }\n  }, {\n    key: \"drawBackground\",\n    value: function drawBackground() {\n      var _this$options16 = this.options,\n        backgroundColor = _this$options16.backgroundColor,\n        circular = _this$options16.grid.circular;\n      if (backgroundColor) {\n        var ctx = this.ctx;\n        ctx.save();\n        ctx.beginPath();\n        pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n        ctx.closePath();\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawGrid\",\n    value: function drawGrid() {\n      var _this41 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var angleLines = opts.angleLines,\n        grid = opts.grid,\n        border = opts.border;\n      var labelCount = this._pointLabels.length;\n      var i, offset, position;\n      if (opts.pointLabels.display) {\n        drawPointLabels(this, labelCount);\n      }\n      if (grid.display) {\n        this.ticks.forEach(function (tick, index) {\n          if (index !== 0) {\n            offset = _this41.getDistanceFromCenterForValue(tick.value);\n            var context = _this41.getContext(index);\n            var optsAtIndex = grid.setContext(context);\n            var optsAtIndexBorder = border.setContext(context);\n            drawRadiusLine(_this41, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n          }\n        });\n      }\n      if (angleLines.display) {\n        ctx.save();\n        for (i = labelCount - 1; i >= 0; i--) {\n          var optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n          var color = optsAtIndex.color,\n            lineWidth = optsAtIndex.lineWidth;\n          if (!lineWidth || !color) {\n            continue;\n          }\n          ctx.lineWidth = lineWidth;\n          ctx.strokeStyle = color;\n          ctx.setLineDash(optsAtIndex.borderDash);\n          ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n          offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n          position = this.getPointPosition(i, offset);\n          ctx.beginPath();\n          ctx.moveTo(this.xCenter, this.yCenter);\n          ctx.lineTo(position.x, position.y);\n          ctx.stroke();\n        }\n        ctx.restore();\n      }\n    }\n  }, {\n    key: \"drawBorder\",\n    value: function drawBorder() {}\n  }, {\n    key: \"drawLabels\",\n    value: function drawLabels() {\n      var _this42 = this;\n      var ctx = this.ctx;\n      var opts = this.options;\n      var tickOpts = opts.ticks;\n      if (!tickOpts.display) {\n        return;\n      }\n      var startAngle = this.getIndexAngle(0);\n      var offset, width;\n      ctx.save();\n      ctx.translate(this.xCenter, this.yCenter);\n      ctx.rotate(startAngle);\n      ctx.textAlign = 'center';\n      ctx.textBaseline = 'middle';\n      this.ticks.forEach(function (tick, index) {\n        if (index === 0 && !opts.reverse) {\n          return;\n        }\n        var optsAtIndex = tickOpts.setContext(_this42.getContext(index));\n        var tickFont = toFont(optsAtIndex.font);\n        offset = _this42.getDistanceFromCenterForValue(_this42.ticks[index].value);\n        if (optsAtIndex.showLabelBackdrop) {\n          ctx.font = tickFont.string;\n          width = ctx.measureText(tick.label).width;\n          ctx.fillStyle = optsAtIndex.backdropColor;\n          var padding = toPadding(optsAtIndex.backdropPadding);\n          ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n        }\n        renderText(ctx, tick.label, 0, -offset, tickFont, {\n          color: optsAtIndex.color,\n          strokeColor: optsAtIndex.textStrokeColor,\n          strokeWidth: optsAtIndex.textStrokeWidth\n        });\n      });\n      ctx.restore();\n    }\n  }, {\n    key: \"drawTitle\",\n    value: function drawTitle() {}\n  }]);\n  return RadialLinearScale;\n}(LinearScaleBase);\nRadialLinearScale.id = 'radialLinear';\nRadialLinearScale.defaults = {\n  display: true,\n  animate: true,\n  position: 'chartArea',\n  angleLines: {\n    display: true,\n    lineWidth: 1,\n    borderDash: [],\n    borderDashOffset: 0.0\n  },\n  grid: {\n    circular: false\n  },\n  startAngle: 0,\n  ticks: {\n    showLabelBackdrop: true,\n    callback: Ticks.formatters.numeric\n  },\n  pointLabels: {\n    backdropColor: undefined,\n    backdropPadding: 2,\n    display: true,\n    font: {\n      size: 10\n    },\n    callback: function callback(label) {\n      return label;\n    },\n    padding: 5,\n    centerPointLabels: false\n  }\n};\nRadialLinearScale.defaultRoutes = {\n  'angleLines.color': 'borderColor',\n  'pointLabels.color': 'color',\n  'ticks.color': 'color'\n};\nRadialLinearScale.descriptors = {\n  angleLines: {\n    _fallback: 'grid'\n  }\n};\nvar INTERVALS = {\n  millisecond: {\n    common: true,\n    size: 1,\n    steps: 1000\n  },\n  second: {\n    common: true,\n    size: 1000,\n    steps: 60\n  },\n  minute: {\n    common: true,\n    size: 60000,\n    steps: 60\n  },\n  hour: {\n    common: true,\n    size: 3600000,\n    steps: 24\n  },\n  day: {\n    common: true,\n    size: 86400000,\n    steps: 30\n  },\n  week: {\n    common: false,\n    size: 604800000,\n    steps: 4\n  },\n  month: {\n    common: true,\n    size: 2.628e9,\n    steps: 12\n  },\n  quarter: {\n    common: false,\n    size: 7.884e9,\n    steps: 4\n  },\n  year: {\n    common: true,\n    size: 3.154e10\n  }\n};\nvar UNITS = /* #__PURE__ */Object.keys(INTERVALS);\nfunction sorter(a, b) {\n  return a - b;\n}\nfunction _parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n  var adapter = scale._adapter;\n  var _scale$_parseOpts = scale._parseOpts,\n    parser = _scale$_parseOpts.parser,\n    round = _scale$_parseOpts.round,\n    isoWeekday = _scale$_parseOpts.isoWeekday;\n  var value = input;\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n  if (!isNumberFinite(value)) {\n    value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n  }\n  if (value === null) {\n    return null;\n  }\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n  }\n  return +value;\n}\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  var ilen = UNITS.length;\n  for (var i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    var interval = INTERVALS[UNITS[i]];\n    var factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n  return UNITS[ilen - 1];\n}\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (var i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    var unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\nfunction determineMajorUnit(unit) {\n  for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    var _lookup2 = _lookup(timestamps, time),\n      lo = _lookup2.lo,\n      hi = _lookup2.hi;\n    var timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  var adapter = scale._adapter;\n  var first = +adapter.startOf(ticks[0].value, majorUnit);\n  var last = ticks[ticks.length - 1].value;\n  var major, index;\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  var ticks = [];\n  var map = {};\n  var ilen = values.length;\n  var i, value;\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n    ticks.push({\n      value: value,\n      major: false\n    });\n  }\n  return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nvar TimeScale = /*#__PURE__*/function (_Scale4) {\n  _inherits(TimeScale, _Scale4);\n  function TimeScale(props) {\n    var _this43;\n    _classCallCheck(this, TimeScale);\n    _this43 = _callSuper(this, TimeScale, [props]);\n    _this43._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n    _this43._unit = 'day';\n    _this43._majorUnit = undefined;\n    _this43._offsets = {};\n    _this43._normalized = false;\n    _this43._parseOpts = undefined;\n    return _this43;\n  }\n  _createClass(TimeScale, [{\n    key: \"init\",\n    value: function init(scaleOpts) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var time = scaleOpts.time || (scaleOpts.time = {});\n      var adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n      adapter.init(opts);\n      mergeIf(time.displayFormats, adapter.formats());\n      this._parseOpts = {\n        parser: time.parser,\n        round: time.round,\n        isoWeekday: time.isoWeekday\n      };\n      _get(_getPrototypeOf(TimeScale.prototype), \"init\", this).call(this, scaleOpts);\n      this._normalized = opts.normalized;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(raw, index) {\n      if (raw === undefined) {\n        return null;\n      }\n      return _parse(this, raw);\n    }\n  }, {\n    key: \"beforeLayout\",\n    value: function beforeLayout() {\n      _get(_getPrototypeOf(TimeScale.prototype), \"beforeLayout\", this).call(this);\n      this._cache = {\n        data: [],\n        labels: [],\n        all: []\n      };\n    }\n  }, {\n    key: \"determineDataLimits\",\n    value: function determineDataLimits() {\n      var options = this.options;\n      var adapter = this._adapter;\n      var unit = options.time.unit || 'day';\n      var _this$getUserBounds5 = this.getUserBounds(),\n        min = _this$getUserBounds5.min,\n        max = _this$getUserBounds5.max,\n        minDefined = _this$getUserBounds5.minDefined,\n        maxDefined = _this$getUserBounds5.maxDefined;\n      function _applyBounds(bounds) {\n        if (!minDefined && !isNaN(bounds.min)) {\n          min = Math.min(min, bounds.min);\n        }\n        if (!maxDefined && !isNaN(bounds.max)) {\n          max = Math.max(max, bounds.max);\n        }\n      }\n      if (!minDefined || !maxDefined) {\n        _applyBounds(this._getLabelBounds());\n        if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n          _applyBounds(this.getMinMax(false));\n        }\n      }\n      min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n      max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n      this.min = Math.min(min, max - 1);\n      this.max = Math.max(min + 1, max);\n    }\n  }, {\n    key: \"_getLabelBounds\",\n    value: function _getLabelBounds() {\n      var arr = this.getLabelTimestamps();\n      var min = Number.POSITIVE_INFINITY;\n      var max = Number.NEGATIVE_INFINITY;\n      if (arr.length) {\n        min = arr[0];\n        max = arr[arr.length - 1];\n      }\n      return {\n        min: min,\n        max: max\n      };\n    }\n  }, {\n    key: \"buildTicks\",\n    value: function buildTicks() {\n      var options = this.options;\n      var timeOpts = options.time;\n      var tickOpts = options.ticks;\n      var timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n      if (options.bounds === 'ticks' && timestamps.length) {\n        this.min = this._userMin || timestamps[0];\n        this.max = this._userMax || timestamps[timestamps.length - 1];\n      }\n      var min = this.min;\n      var max = this.max;\n      var ticks = _filterBetween(timestamps, min, max);\n      this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n      this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n      this.initOffsets(timestamps);\n      if (options.reverse) {\n        ticks.reverse();\n      }\n      return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n  }, {\n    key: \"afterAutoSkip\",\n    value: function afterAutoSkip() {\n      if (this.options.offsetAfterAutoskip) {\n        this.initOffsets(this.ticks.map(function (tick) {\n          return +tick.value;\n        }));\n      }\n    }\n  }, {\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var start = 0;\n      var end = 0;\n      var first, last;\n      if (this.options.offset && timestamps.length) {\n        first = this.getDecimalForValue(timestamps[0]);\n        if (timestamps.length === 1) {\n          start = 1 - first;\n        } else {\n          start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n        }\n        last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n        if (timestamps.length === 1) {\n          end = last;\n        } else {\n          end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n        }\n      }\n      var limit = timestamps.length < 3 ? 0.5 : 0.25;\n      start = _limitValue(start, 0, limit);\n      end = _limitValue(end, 0, limit);\n      this._offsets = {\n        start: start,\n        end: end,\n        factor: 1 / (start + 1 + end)\n      };\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var adapter = this._adapter;\n      var min = this.min;\n      var max = this.max;\n      var options = this.options;\n      var timeOpts = options.time;\n      var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n      var stepSize = valueOrDefault(options.ticks.stepSize, 1);\n      var weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n      var hasWeekday = isNumber(weekday) || weekday === true;\n      var ticks = {};\n      var first = min;\n      var time, count;\n      if (hasWeekday) {\n        first = +adapter.startOf(first, 'isoWeek', weekday);\n      }\n      first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n      if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n        throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n      }\n      var timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n      for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n        addTick(ticks, time, timestamps);\n      }\n      if (time === max || options.bounds === 'ticks' || count === 1) {\n        addTick(ticks, time, timestamps);\n      }\n      return Object.keys(ticks).sort(sorter).map(function (x) {\n        return +x;\n      });\n    }\n  }, {\n    key: \"getLabelForValue\",\n    value: function getLabelForValue(value) {\n      var adapter = this._adapter;\n      var timeOpts = this.options.time;\n      if (timeOpts.tooltipFormat) {\n        return adapter.format(value, timeOpts.tooltipFormat);\n      }\n      return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n  }, {\n    key: \"format\",\n    value: function format(value, _format) {\n      var options = this.options;\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var fmt = _format || formats[unit];\n      return this._adapter.format(value, fmt);\n    }\n  }, {\n    key: \"_tickFormatFunction\",\n    value: function _tickFormatFunction(time, index, ticks, format) {\n      var options = this.options;\n      var formatter = options.ticks.callback;\n      if (formatter) {\n        return callback(formatter, [time, index, ticks], this);\n      }\n      var formats = options.time.displayFormats;\n      var unit = this._unit;\n      var majorUnit = this._majorUnit;\n      var minorFormat = unit && formats[unit];\n      var majorFormat = majorUnit && formats[majorUnit];\n      var tick = ticks[index];\n      var major = majorUnit && majorFormat && tick && tick.major;\n      return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n  }, {\n    key: \"generateTickLabels\",\n    value: function generateTickLabels(ticks) {\n      var i, ilen, tick;\n      for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n        tick = ticks[i];\n        tick.label = this._tickFormatFunction(tick.value, i, ticks);\n      }\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n  }, {\n    key: \"getPixelForValue\",\n    value: function getPixelForValue(value) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForValue(value);\n      return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return this.min + pos * (this.max - this.min);\n    }\n  }, {\n    key: \"_getLabelSize\",\n    value: function _getLabelSize(label) {\n      var ticksOpts = this.options.ticks;\n      var tickLabelWidth = this.ctx.measureText(label).width;\n      var angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n      var cosRotation = Math.cos(angle);\n      var sinRotation = Math.sin(angle);\n      var tickFontSize = this._resolveTickFontOptions(0).size;\n      return {\n        w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n        h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n      };\n    }\n  }, {\n    key: \"_getLabelCapacity\",\n    value: function _getLabelCapacity(exampleTime) {\n      var timeOpts = this.options.time;\n      var displayFormats = timeOpts.displayFormats;\n      var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n      var exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n      var size = this._getLabelSize(exampleLabel);\n      var capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n      return capacity > 0 ? capacity : 1;\n    }\n  }, {\n    key: \"getDataTimestamps\",\n    value: function getDataTimestamps() {\n      var timestamps = this._cache.data || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var metas = this.getMatchingVisibleMetas();\n      if (this._normalized && metas.length) {\n        return this._cache.data = metas[0].controller.getAllParsedValues(this);\n      }\n      for (i = 0, ilen = metas.length; i < ilen; ++i) {\n        timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n      }\n      return this._cache.data = this.normalize(timestamps);\n    }\n  }, {\n    key: \"getLabelTimestamps\",\n    value: function getLabelTimestamps() {\n      var timestamps = this._cache.labels || [];\n      var i, ilen;\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var labels = this.getLabels();\n      for (i = 0, ilen = labels.length; i < ilen; ++i) {\n        timestamps.push(_parse(this, labels[i]));\n      }\n      return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n  }, {\n    key: \"normalize\",\n    value: function normalize(values) {\n      return _arrayUnique(values.sort(sorter));\n    }\n  }]);\n  return TimeScale;\n}(Scale);\nTimeScale.id = 'time';\nTimeScale.defaults = {\n  bounds: 'data',\n  adapters: {},\n  time: {\n    parser: false,\n    unit: false,\n    round: false,\n    isoWeekday: false,\n    minUnit: 'millisecond',\n    displayFormats: {}\n  },\n  ticks: {\n    source: 'auto',\n    callback: false,\n    major: {\n      enabled: false\n    }\n  }\n};\nfunction interpolate(table, val, reverse) {\n  var lo = 0;\n  var hi = table.length - 1;\n  var prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      var _lookupByKey2 = _lookupByKey(table, 'pos', val);\n      lo = _lookupByKey2.lo;\n      hi = _lookupByKey2.hi;\n    }\n    var _table$lo = table[lo];\n    prevSource = _table$lo.pos;\n    prevTarget = _table$lo.time;\n    var _table$hi = table[hi];\n    nextSource = _table$hi.pos;\n    nextTarget = _table$hi.time;\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      var _lookupByKey3 = _lookupByKey(table, 'time', val);\n      lo = _lookupByKey3.lo;\n      hi = _lookupByKey3.hi;\n    }\n    var _table$lo2 = table[lo];\n    prevSource = _table$lo2.time;\n    prevTarget = _table$lo2.pos;\n    var _table$hi2 = table[hi];\n    nextSource = _table$hi2.time;\n    nextTarget = _table$hi2.pos;\n  }\n  var span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nvar TimeSeriesScale = /*#__PURE__*/function (_TimeScale2) {\n  _inherits(TimeSeriesScale, _TimeScale2);\n  function TimeSeriesScale(props) {\n    var _this44;\n    _classCallCheck(this, TimeSeriesScale);\n    _this44 = _callSuper(this, TimeSeriesScale, [props]);\n    _this44._table = [];\n    _this44._minPos = undefined;\n    _this44._tableRange = undefined;\n    return _this44;\n  }\n  _createClass(TimeSeriesScale, [{\n    key: \"initOffsets\",\n    value: function initOffsets() {\n      var timestamps = this._getTimestampsForTable();\n      var table = this._table = this.buildLookupTable(timestamps);\n      this._minPos = interpolate(table, this.min);\n      this._tableRange = interpolate(table, this.max) - this._minPos;\n      _get(_getPrototypeOf(TimeSeriesScale.prototype), \"initOffsets\", this).call(this, timestamps);\n    }\n  }, {\n    key: \"buildLookupTable\",\n    value: function buildLookupTable(timestamps) {\n      var min = this.min,\n        max = this.max;\n      var items = [];\n      var table = [];\n      var i, ilen, prev, curr, next;\n      for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n        curr = timestamps[i];\n        if (curr >= min && curr <= max) {\n          items.push(curr);\n        }\n      }\n      if (items.length < 2) {\n        return [{\n          time: min,\n          pos: 0\n        }, {\n          time: max,\n          pos: 1\n        }];\n      }\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        next = items[i + 1];\n        prev = items[i - 1];\n        curr = items[i];\n        if (Math.round((next + prev) / 2) !== curr) {\n          table.push({\n            time: curr,\n            pos: i / (ilen - 1)\n          });\n        }\n      }\n      return table;\n    }\n  }, {\n    key: \"_generate\",\n    value: function _generate() {\n      var min = this.min;\n      var max = this.max;\n      var timestamps = _get(_getPrototypeOf(TimeSeriesScale.prototype), \"getDataTimestamps\", this).call(this);\n      if (!timestamps.includes(min) || !timestamps.length) {\n        timestamps.splice(0, 0, min);\n      }\n      if (!timestamps.includes(max) || timestamps.length === 1) {\n        timestamps.push(max);\n      }\n      return timestamps.sort(function (a, b) {\n        return a - b;\n      });\n    }\n  }, {\n    key: \"_getTimestampsForTable\",\n    value: function _getTimestampsForTable() {\n      var timestamps = this._cache.all || [];\n      if (timestamps.length) {\n        return timestamps;\n      }\n      var data = this.getDataTimestamps();\n      var label = this.getLabelTimestamps();\n      if (data.length && label.length) {\n        timestamps = this.normalize(data.concat(label));\n      } else {\n        timestamps = data.length ? data : label;\n      }\n      timestamps = this._cache.all = timestamps;\n      return timestamps;\n    }\n  }, {\n    key: \"getDecimalForValue\",\n    value: function getDecimalForValue(value) {\n      return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n  }, {\n    key: \"getValueForPixel\",\n    value: function getValueForPixel(pixel) {\n      var offsets = this._offsets;\n      var decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n      return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n  }]);\n  return TimeSeriesScale;\n}(TimeScale);\nTimeSeriesScale.id = 'timeseries';\nTimeSeriesScale.defaults = TimeScale.defaults;\nvar scales = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  CategoryScale: CategoryScale,\n  LinearScale: LinearScale,\n  LogarithmicScale: LogarithmicScale,\n  RadialLinearScale: RadialLinearScale,\n  TimeScale: TimeScale,\n  TimeSeriesScale: TimeSeriesScale\n});\nvar registerables = [controllers, elements, plugins, scales];\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };","map":{"version":3,"names":["Animator","_classCallCheck","_request","_charts","Map","_running","_lastDate","undefined","_createClass","key","value","_notify","chart","anims","date","type","callbacks","listeners","numSteps","duration","forEach","fn","initial","currentStep","Math","min","start","_refresh","_this","requestAnimFrame","call","window","_update","_this2","arguments","length","Date","now","remaining","running","items","i","draw","item","_active","_total","tick","pop","_getAnims","charts","get","complete","progress","set","listen","event","cb","push","add","_this$_getAnims$items","apply","_toConsumableArray","has","reduce","acc","cur","max","_duration","stop","cancel","remove","delete","animator","transparent","interpolators","boolean","from","to","factor","color","c0","c1","valid","mix","hexString","number","Animation","cfg","target","prop","currentValue","resolve","_fn","_typeof","_easing","effects","easing","linear","_start","floor","delay","_loop","loop","_target","_prop","_from","_to","_promises","active","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","isObject","animationOptions","Object","keys","defaults","animation","animatedProps","getOwnPropertyNames","_i","_animationOptions","option","isArray","properties","_animateOptions","values","newOptions","options","resolveTargetOptions","animations","_createAnimations","$shared","awaitAll","$animations","then","props","charAt","size","assign","anim","all","scaleClip","scale","allowedOverflow","opts","reverse","end","defaultClip","xScale","yScale","x","y","top","right","bottom","left","toClip","t","r","b","l","disabled","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","ilen","index","applyStack","stack","dsIndex","singleMode","mode","datasetIndex","otherValue","isNumberFinite","sign","convertObjectDataToArray","data","adata","Array","isStacked","meta","stacked","getStackKey","indexScale","valueScale","concat","id","getUserBounds","_scale$getUserBounds","minDefined","maxDefined","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","_iterator","_createForOfIteratorHelper","getMatchingVisibleMetas","_step","s","n","done","err","e","f","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","itemStacks","_top","_bottom","visualValues","_visualValues","getFirstScaleId","scales","filter","shift","createDatasetContext","parent","createContext","dataset","createDataContext","element","dataIndex","raw","clearStacks","_parsed","_iterator2","_step2","isDirectUpdateMode","cloneIfNotShared","cached","shared","createStack","canStack","hidden","_stacked","DatasetController","_ctx","ctx","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","constructor","dataElementType","initialize","linkScales","addElements","fill","isPluginEnabled","console","warn","updateIndex","getDataset","chooseId","xid","xAxisID","valueOrDefault","yid","yAxisID","rid","rAxisID","indexAxis","iid","iAxisID","vid","vAxisID","getScaleForId","rScale","datasets","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","unlistenArrayEvents","_dataCheck","isExtensible","listenArrayEvents","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","scopes","getOptionScopes","createResolver","getContext","parsing","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","_defineProperty","_this$_parsing","_this$_parsing$xAxisK","xAxisKey","_this$_parsing$yAxisK","yAxisKey","resolveObjectKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","otherScale","_getUserBounds","otherMin","otherMax","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","clip","elements","area","chartArea","drawActiveElementsOnTop","getStyle","resolveDatasetElementOptions","resolveDataElementOptions","context","_resolveElementOptions","elementType","_this3","cache","cacheKey","sharing","defined","datasetElementScopeKeys","prefixes","names","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","_cacheable","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","_iterator3","_step3","_step3$value","_slicedToArray","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","arr","updateElements","removed","splice","_sync","args","_args2","_dataChanges","_onDataPush","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","getAllScaleValues","_cache","$bar","visibleMetas","_arrayUnique","sort","a","computeMinSampleSize","_length","curr","updateMinAndPrev","abs","getPixelForValue","ticks","getPixelForTick","computeFitCategoryTraits","ruler","stackCount","thickness","barThickness","ratio","isNullOrUndef","categoryPercentage","barPercentage","chunk","pixels","computeFlexCategoryTraits","next","percent","parseFloatBar","entry","startValue","endValue","barStart","barEnd","_custom","parseValue","parseArrayOrPrimitive","isFloatBar","custom","barSign","actualBase","isHorizontal","borderProps","horizontal","base","setBorderSkipped","edge","borderSkipped","_borderProps","enableBorderRadius","parseEdge","swap","startEnd","orig","v1","v2","v","setInflateAmount","_ref","inflateAmount","BarController","_DatasetController2","_inherits","_callSuper","_this$_parsing2","_this$_parsing2$xAxis","_this$_parsing2$yAxis","iAxisKey","vAxisKey","obj","_get","_getPrototypeOf","prototype","bars","getBasePixel","_getRuler","_this$_getSharedOptio","vpixels","head","_calculateBarValuePixels","ipixels","_calculateBarIndexPixels","center","height","width","_getStacks","last","grouped","skipNull","val","isNaN","_iterator4","_step4","indexOf","_getStackCount","_getStackIndex","name","_startPixel","_endPixel","_this$_cachedMeta","_this$options","baseValue","minBarLength","floating","getDataVisibility","startPixel","getPixelForDecimal","endPixel","getValueForPixel","halfGrid","getLineWidthForValue","maxBarThickness","Infinity","stackIndex","rects","numbers","overrides","_index_","offset","grid","_value_","beginAtZero","BubbleController","_DatasetController3","radius","points","_this$_cachedMeta2","_this$_getSharedOptio2","point","iPixel","vPixel","skip","getRatioAndOffset","rotation","circumference","cutout","ratioX","ratioY","offsetX","offsetY","TAU","startAngle","endAngle","startX","cos","startY","sin","endX","endY","calcMax","angle","_angleBetween","calcMin","maxX","maxY","HALF_PI","minX","PI","minY","DoughnutController","_DatasetController4","_this4","innerRadius","outerRadius","getter","_this$_parsing$key","_getRotation","toRadians","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","spacing","getMaxBorderWidth","getMaxOffset","maxSize","toPercentage","chartWeight","_getRingWeight","_this$_getRotationExt","_getRatioAndOffset","maxWidth","maxHeight","maxRadius","toDimension","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","animateRotate","calculateCircumference","animationOpts","centerX","centerY","animateScale","_this$_getSharedOptio3","arc","metaData","formatNumber","locale","borderAlign","borderWidth","hoverBorderWidth","hoverOffset","ringWeightOffset","weight","descriptors","_scriptable","_indexable","startsWith","aspectRatio","plugins","legend","generateLabels","_chart$legend$options2","pointStyle","map","style","text","fillStyle","backgroundColor","strokeStyle","borderColor","fontColor","lineWidth","onClick","legendItem","toggleDataVisibility","LineController","_DatasetController5","line","_meta$data","_dataset","animationsDisabled","_getStartAndCountOfVi","_getStartAndCountOfVisiblePoints","_scaleRangesChanged","_datasetIndex","_decimated","showLine","segment","animated","_this$_cachedMeta3","_this$_getSharedOptio4","_this$options2","spanGaps","maxGapLength","isNumber","directUpdate","pointsCount","prevParsed","nullData","border","firstPoint","lastPoint","updateControlPoints","PolarAreaController","_DatasetController6","_this5","_parseObjectDataRadialScale","bind","_updateRadius","_this6","minSize","cutoutPercentage","getVisibleDatasetCount","xCenter","yCenter","datasetStartAngle","getIndexAngle","defaultAngle","countVisibleElements","_computeAngle","getDistanceFromCenterForValue","_this7","_chart$legend$options3","angleLines","display","circular","pointLabels","PieController","_DoughnutController2","RadarController","_DatasetController7","_fullLoop","pointPosition","getPointPositionForValue","ScatterController","_DatasetController8","_meta$data2","_getStartAndCountOfVi2","registry","getElement","_this$_cachedMeta4","_this$options3","interaction","abstract","Error","DateAdapterBase","init","formats","format","diff","startOf","endOf","override","members","adapters","_date","binarySearch","metaset","intersect","lookupMethod","_reversePixels","_rlookupByKey","_lookupByKey","el","getRange","lo","hi","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","_metasets$i","_binarySearch","j","getDistanceMetricForAxis","useX","useY","pt1","pt2","deltaX","deltaY","sqrt","pow","getIntersectItems","useFinalPosition","includeInvisible","isPointInArea","evaluationFunc","_isPointInArea","inRange","getNearestRadialItems","_element$getProps","getProps","_getAngleFromPoint","getAngleFromPoint","getNearestCartesianItems","distanceMetric","minDistance","getCenterPoint","pointInArea","distance","getNearestItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","getRelativePosition","nearest","STATIC_POSITIONS","filterByPosition","array","pos","filterDynamicPositionByAxis","box","sortByWeight","v0","wrapBoxes","boxes","layoutBoxes","stackWeight","_box","_box$options","_box$options$stackWei","buildStacks","layouts","_iterator5","_step5","wrap","includes","_stack","placed","setLayoutDims","params","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","availableWidth","availableHeight","buildLayoutBoxes","centerHorizontal","centerVertical","leftAndTop","rightAndBottom","vertical","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","w","heightChanged","h","same","other","handleMaxPadding","updatePos","change","getMargins","marginForPositions","positions","margin","fitBoxes","refitBoxes","refit","changed","_updateDims","setBoxDims","placeBoxes","userPadding","padding","_iterator6","_step6","addBox","_layers","z","removeBox","layoutItem","minPadding","toPadding","verticalBoxes","horizontalBoxes","each","beforeLayout","visibleVerticalBoxCount","BasePlatform","acquireContext","canvas","releaseContext","addEventListener","listener","removeEventListener","getDevicePixelRatio","getMaximumSize","isAttached","updateConfig","BasicPlatform","_BasePlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","initCanvas","renderHeight","getAttribute","renderWidth","boxSizing","displayWidth","readUsedSize","displayHeight","eventListenerOptions","supportsEventListenerOptions","passive","addListener","node","removeListener","fromNativeEvent","_getRelativePosition","native","nodeListContains","nodeList","_iterator7","_step7","contains","createAttachObserver","observer","MutationObserver","entries","trigger","_iterator8","_step8","addedNodes","removedNodes","observe","document","childList","subtree","createDetachObserver","_iterator9","_step9","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","devicePixelRatio","resize","currentDevicePixelRatio","listenDevicePixelRatioChanges","unlistenDevicePixelRatioChanges","createResizeObserver","container","_getParentNode","throttled","clientWidth","ResizeObserver","contentRect","releaseObserver","disconnect","createProxyAndListen","proxy","DomPlatform","_BasePlatform2","removeAttribute","setAttribute","proxies","$proxies","handlers","attach","detach","isConnected","_detectPlatform","_isDomSupported","OffscreenCanvas","Element","tooltipPosition","_this$getProps","hasValue","final","_this8","ret","defaultRoutes","autoSkip","tickOpts","determinedMaxTicks","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","major","enabled","getMajorIndices","numMajorIndices","first","newTicks","skipMajors","calculateSpacing","avgMajorSpacing","round","tickLength","_tickSize","maxScale","maxChart","_maxLength","evenMajorSpacing","getEvenSpacing","factors","_factorize","result","ceil","majorStart","majorEnd","len","reverseAlign","align","offsetFromEdge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","epsilon","lineValue","garbageCollect","caches","gc","gcLen","getTickMarkLength","drawTicks","getTitleHeight","fallback","font","toFont","lines","lineHeight","createScaleContext","createTickContext","titleAlign","_toLeftRightCenter","titleArgs","titleX","titleY","_alignStartEnd","positionAxisID","Scale","_Element2","_this9","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_dataLimitsCached","setContext","suggestedMin","suggestedMax","finiteOrDefault","_this$getUserBounds","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","callback","margins","_this$options4","grace","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","source","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","minRotation","maxRotation","tickWidth","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","_limitValue","title","toDegrees","asin","_this$options5","titleOpts","gridOpts","titleHeight","_this$_getLabelSizes","tickPadding","angleRadians","labelHeight","mirror","labelWidth","_calculatePadding","_handleMargins","_this$options6","_this$options6$ticks","isRotated","labelsBelowTicks","offsetLeft","offsetRight","_this$options7","isFullSize","_computeLabelSizes","widths","heights","widestLabelSize","highestLabelSize","jlen","tickFont","fontString","nestedLabel","_resolveTickFontOptions","string","_measureText","valueAt","idx","pixel","decimal","_int16Range","_alignPixel","getDecimalForPixel","getBaseValue","optionTicks","rot","autoSkipPadding","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","dash","borderDashOffset","dashOffset","tickColor","tickBorderDash","tickBorderDashOffset","crossAlign","tickAndPadding","hTickAndPadding","textAlign","lineCount","textOffset","textBaseline","_getXAxisLabelAlignment","_getYAxisLabelAlignment","labelOffset","halfCount","strokeColor","textStrokeColor","strokeWidth","textStrokeWidth","tickTextAlign","showLabelBackdrop","backdrop","labelPadding","backdropPadding","backdropColor","translation","_this$options8","_this$options9","_this$options9$ticks","_computeLabelArea","drawBackground","save","fillRect","restore","findIndex","drawGrid","drawLine","p1","p2","setLineDash","lineDashOffset","beginPath","moveTo","lineTo","stroke","drawOnChartArea","drawBorder","_this$options10","lastLineWidth","drawLabels","clipArea","_iterator10","_step10","renderTextOptions","renderText","unclipArea","drawTitle","_this$options11","_titleArgs","_this10","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","scope","create","isForType","isPrototypeOf","register","proto","getPrototypeOf","parentScope","isIChartComponent","registerDefaults","unregister","itemDefaults","merge","routeDefaults","describe","routes","property","propertyParts","split","sourceName","sourceScope","join","parts","targetName","targetScope","route","Registry","controllers","_typedRegistries","_len","_key","_each","_len2","_key2","addControllers","_len3","_key3","_len4","_key4","addPlugins","_len5","_key5","addScales","_len6","_key6","getController","getPlugin","getScale","removeControllers","_len7","_key7","removeElements","_len8","_key8","removePlugins","_len9","_key9","removeScales","_len10","_key10","typedRegistry","_this11","arg","reg","_getRegistryForType","_exec","itemReg","component","camelMethod","_capitalize","PluginService","_init","notify","hook","_createDescriptors","_descriptors","_iterator11","_step11","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","allPlugins","createDescriptors","previousDescriptors","some","localIds","local","getOpts","_ref2","_iterator12","_step12","pluginOpts","_ref3","pluginScopeKeys","scriptable","indexable","allKeys","getIndexAxis","datasetDefaults","datasetOptions","getAxisFromDefaultScaleID","getDefaultScaleIDFromAxis","idMatchesAxis","axisFromPosition","determineAxis","_len11","scaleOptions","_key11","_i3","_scaleOptions","toLowerCase","getAxisFromDataset","retrieveAxisFromDatasets","boundDs","d","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","_proxy","defaultId","defaultScaleOptions","mergeIf","defaultID","initOptions","initData","initConfig","keyCache","keysCached","Set","cachedKeys","generate","addIfFound","Config","_config","_scopeCache","_resolverCache","platform","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","_getResolver","getResolver","resolver","subPrefixes","needContext","isFunction","subResolver","_attachContext","_iterator13","_step13","descriptorDefaults","_getResolver2","resolverCache","_createResolver","p","hasFunction","_descriptors2","isScriptable","isIndexable","_iterator14","_step14","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","c","moveNumericKeys","_i4","_keys","intKey","determineLastEvent","lastEvent","inChartArea","isClick","getSizeForArea","field","getDatasetArea","Chart","userConfig","_this12","initialCanvas","existingChart","uid","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","debounce","resizeDelay","_initialize","_this$options12","maintainAspectRatio","responsive","retinaScale","bindEvents","clearCanvas","_resize","_resizeBeforeDraw","newSize","newRatio","onResize","render","ensureScalesHaveIDs","scalesOptions","axisOptions","buildOrUpdateScales","_this13","scaleOpts","updated","isRadial","dposition","dtype","scaleType","scaleClass","hasUpdated","_updateMetasets","_destroyDatasetMeta","slice","_removeUnreferencedMetasets","_this14","buildOrUpdateControllers","newControllers","order","visible","ControllerClass","_defaults$datasets$ty","_resetElements","_this15","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_this$getDatasetMeta","_minPadding","autoPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","_this16","existingEvents","newEvents","events","setsEqual","unbindEvents","changes","_getUniformDataChanges","_iterator15","_step15","_step15$value","datasetCount","makeSet","changeSet","_this17","noArea","_this17$_layers","_idx","_updateDataset","_this$_resizeBeforeDr","layers","_drawDatasets","_drawDataset","useClip","getElementsAtEventForMode","setDatasetVisibility","_updateVisibility","hide","show","_stop","destroy","toBase64Image","_this$canvas","toDataURL","bindUserEvents","bindResponsiveEvents","_this18","_add","_this19","_remove","detached","_this20","updateHoverStyle","prefix","getActiveElements","setActiveElements","activeElements","_this21","lastActive","_ref4","_elementsEqual","pluginId","replay","hoverOptions","hover","deactivated","activated","_this22","eventFilter","_handleEvent","_this$_active","_getActiveElements","_isClickEvent","onHover","invalidatePlugins","version","clipArc","pixelMargin","angleMargin","closePath","toRadiusCorners","_readValueToProps","parseBorderRadius$1","angleDelta","o","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","innerR","spacingOffset","alpha","noSpacingInnerRadius","noSpacingOuterRadius","avNogSpacingRadius","adjustedAngle","beta","angleOffset","_parseBorderRadius$","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","drawArc","fullCircles","borderJoinStyle","inner","lineJoin","ArcElement","_Element3","_this23","_assertThisInitialized","chartX","chartY","_getAngleFromPoint2","_this$getProps2","rAdjust","betweenAngles","withinRadius","_isBetween","_this$getProps3","_this$options13","halfAngle","halfRadius","translate","fix","radiusOffset","setStyle","lineCap","borderCapStyle","previous","getLineMethod","stepped","_steppedLineTo","tension","cubicInterpolationMode","_bezierCurveTo","pathVars","_params$start","paramsStart","_params$end","paramsEnd","segmentStart","segmentEnd","outside","pathSegment","_pathVars","lineMethod","_ref5","_ref5$move","fastPathSegment","_pathVars2","_ref6","_ref6$move","avgX","countX","prevX","lastY","pointIndex","drawX","truncX","_getSegmentMethod","useFastPath","_getInterpolationMethod","_steppedInterpolation","_bezierInterpolation","_pointInLine","strokePathWithCache","path","_path","Path2D","strokePathDirect","segments","segmentMethod","_iterator16","_step16","usePath2D","LineElement","_Element4","_this24","_points","_segments","_pointsUpdated","_updateBezierControlPoints","_computeSegments","interpolate","_boundSegments","_interpolate","_segments$i","interpolated","_iterator17","_step17","capBezierPoints","inRange$1","_el$getProps","hitRadius","PointElement","_Element5","_this25","mouseX","mouseY","_this$getProps4","inXRange","inYRange","_this$getProps5","hoverRadius","drawPoint","getBarBounds","bar","_bar$getProps","half","skipOrLimit","parseBorderWidth","maxW","maxH","toTRBL","parseBorderRadius","_bar$getProps2","toTRBLCorners","maxR","enableBorder","topLeft","topRight","bottomLeft","bottomRight","boundingRects","bounds","outer","skipX","skipY","skipBoth","hasRadius","addNormalRectPath","rect","inflateRect","amount","refRect","BarElement","_Element6","_this26","_this$options14","_boundingRects","addRectPath","addRoundedRectPath","_this$getProps6","BORDER_COLORS","BACKGROUND_COLORS","replace","getBorderColor","getBackgroundColor","colorizeDefaultDataset","colorizeDoughnutDataset","colorizePolarAreaDataset","getColorizer","containsColorsDefinitions","k","containsColorsDefinition","plugin_colors","forceOverride","_args","_chart$config","chartOptions","colorizer","lttbDecimation","samples","decimated","bucketWidth","sampledIndex","endIndex","maxAreaPoint","maxArea","nextA","avgY","avgRangeStart","avgRangeEnd","avgRangeLength","rangeOffs","rangeTo","_data$a","pointAx","pointAy","minMaxDecimation","minIndex","maxIndex","startIndex","xMin","xMax","dx","lastIndex","intermediateIndex1","intermediateIndex2","cleanDecimatedDataset","defineProperty","configurable","enumerable","writable","cleanDecimatedData","getStartAndCountOfVisiblePointsSimplified","pointCount","_iScale$getUserBounds","plugin_decimation","algorithm","beforeElementsUpdate","xAxis","_getStartAndCountOfVi3","threshold","tpoints","_iterator18","_step18","_findSegmentEnd","_getBounds","targetSegments","_iterator19","_step19","tgt","subBounds","fillSources","_boundSegment","_iterator20","_step20","fillSource","_getEdge","_normalizeAngle","_pointsFromSegments","boundary","_ref7","_ref7$x","_ref7$y","linePoints","_ref8","_createBoundaryLine","_shouldApplyFill","_resolveTarget","sources","propagate","visited","_decodeFill","parseFillOption","parseFloat","decodeTargetIndex","firstCh","_getTargetPixel","_getTargetValue","fillOption","_buildStackLine","sourcePoints","linesBelow","getLinesBelow","addPointsBelow","below","unshift","sourcePoint","postponed","_findPoint","findPoint","pointValue","firstValue","lastValue","simpleArc","_getTarget","getLineByIndex","computeBoundary","computeCircularBoundary","computeLinearBoundary","_source$scale","_drawfill","lineOpts","_ref9","_ref9$above","above","_ref9$below","doFill","clipVertical","clipY","lineLoop","_iterator21","_step21","_iterator22","_step22","_step22$value","src","_src$style","_src$style2","_src$style2$backgroun","notShape","clipBounds","interpolatedLineTo","targetLoop","_scale$chart$chartAre","_ref10","interpolatedPoint","afterDatasetsUpdate","$filler","beforeDraw","drawTime","beforeDatasetsDraw","beforeDatasetDraw","getBoxSize","labelOpts","_labelOpts$boxHeight","boxHeight","_labelOpts$boxWidth","boxWidth","usePointStyle","pointStyleWidth","itemHeight","itemsEqual","Legend","_Element7","_this27","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","_this28","labelFont","_computeTitleHeight","_getBoxSize","_fitRows","_fitCols","hitboxes","totalHeight","row","itemWidth","measureText","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","_calculateItemSize","calculateItemSize","adjustHitBoxes","_this$options15","rtl","rtlHelper","getRtlAdapter","_iterator23","_step23","hitbox","leftForLtr","_iterator24","_step24","_draw","_this29","defaultColor","halfFontSize","cursor","_getBoxSize2","drawLegendBox","lineDash","drawOptions","SQRT2","xPlus","drawPointLegend","yBoxTop","xBoxLeft","fillText","strikethrough","overrideTextDirection","textDirection","textWidth","setWidth","realX","_textX","fontLineHeight","calculateLegendItemHeight","restoreTextDirection","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","isListened","hoveredItem","sameItem","onLeave","calculateItemWidth","calculateItemHeight","legendItemText","plugin_legend","_element","afterEvent","ci","_chart$legend$options","useBorderRadius","Title","_Element8","_this30","_padding","textSize","_drawArgs","fontOpts","_this$_drawArgs","createTitle","titleBlock","plugin_title","WeakMap","plugin_subtitle","positioners","average","eventPosition","nearestElement","distanceBetweenPoints","tp","pushOrConcat","toPush","splitNewlines","str","String","createTooltipItem","_controller$getLabelA","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","bodyLineHeight","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineYAlign","doesNotFitWithAlign","xAlign","caret","caretSize","caretPadding","determineXAlign","yAlign","chartWidth","_chart$chartArea","determineAlignment","alignX","alignY","paddingAndSize","getBackgroundPoint","alignment","cornerRadius","_toTRBLCorners","getAlignedX","getBeforeAfterBodyLines","createTooltipContext","tooltipItems","overrideCallbacks","defaultCallbacks","beforeTitle","noop","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","_Element9","_this31","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","_this32","bodyItems","scoped","getAfterBody","getFooter","_createItems","_this33","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","_toTRBLCorners2","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","_toTRBLCorners3","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","_this34","_ref11","positionChanged","_positionChanged","_ignoreReplayEvents","_this35","plugin_tooltip","afterInit","afterDraw","_fallback","addIfString","addedLabels","findOrAddLabel","lastIndexOf","_getLabelForValue","CategoryScale","_Scale","_this36","_startValue","_valueRange","_addedLabels","added","_iterator25","_step25","_step25$value","isFinite","_this$getUserBounds2","_this$getMinMax","generateTicks$1","generationOptions","dataRange","MIN_SPACING","precision","maxTicks","maxDigits","includeBounds","unit","maxSpaces","rmin","rmax","countDefined","minSpacing","niceNum","niceMin","niceMax","numSpaces","almostWhole","almostEquals","decimalPlaces","_decimalPlaces","relativeLabelSize","tickValue","_ref12","rad","LinearScaleBase","_Scale2","_this37","_endValue","handleTickRangeOptions","_this$getUserBounds3","setMin","setMax","minSign","maxSign","getTickLimit","stepSize","computeTickLimit","numericGeneratorOptions","_setMinAndMaxByKey","LinearScale","_LinearScaleBase","_this$getMinMax2","Ticks","formatters","numeric","log10Floor","log10","changeExponent","m","isMajor","tickVal","steps","rangeExp","rangeStep","startExp","generateTicks","_ref13","minExp","exp","significand","lastTick","LogarithmicScale","_Scale3","_this38","_zero","_this$getMinMax3","_this$getUserBounds4","logarithmic","getTickBackdropHeight","measureLabelSize","_longestText","determineLimits","fitWithPointLabels","limits","valueCount","_pointLabels","pointLabelOpts","additionalAngle","centerPointLabels","getPointLabelContext","getPointPosition","drawingArea","plFont","hLimits","vLimits","updateLimits","setCenterPoint","_pointLabelItems","buildPointLabelItems","createPointLabelItem","itemOpts","outerDistance","extra","pointLabelPosition","yForAngle","getTextAlignForAngle","leftForTextAlign","isNotOverlapped","apexesInArea","_opts$pointLabels","drawPointLabelBox","backdropLeft","backdropTop","backdropWidth","backdropHeight","drawPointLabels","pathRadiusLine","drawRadiusLine","gridLineOpts","createPointLabelContext","RadialLinearScale","_LinearScaleBase2","_this39","_this$getMinMax4","_this40","leftMovement","rightMovement","topMovement","bottomMovement","angleMultiplier","scalingFactor","getValueForDistanceFromCenter","scaledDistance","pointLabel","distanceFromCenter","getBasePosition","getPointLabelPosition","_this$_pointLabelItem","_this$options16","_this41","_this42","rotate","animate","INTERVALS","millisecond","common","second","minute","hour","day","week","month","quarter","year","UNITS","sorter","input","adapter","_adapter","_scale$_parseOpts","_parseOpts","parser","isoWeekday","determineUnitForAutoTicks","minUnit","capacity","interval","MAX_SAFE_INTEGER","determineUnitForFormatting","determineMajorUnit","addTick","time","timestamps","_lookup2","_lookup","timestamp","setMajorTicks","majorUnit","ticksFromTimestamps","TimeScale","_Scale4","_this43","_unit","_majorUnit","_offsets","_normalized","displayFormats","normalized","_this$getUserBounds5","_applyBounds","_getLabelBounds","getLabelTimestamps","timeOpts","_generate","_filterBetween","_getLabelCapacity","initOffsets","offsetAfterAutoskip","getDecimalForValue","minor","weekday","hasWeekday","getDataTimestamps","tooltipFormat","datetime","fmt","_tickFormatFunction","formatter","minorFormat","majorFormat","offsets","_getLabelSize","ticksOpts","tickLabelWidth","cosRotation","sinRotation","tickFontSize","exampleTime","exampleLabel","normalize","table","prevSource","nextSource","prevTarget","nextTarget","_lookupByKey2","_table$lo","_table$hi","_lookupByKey3","_table$lo2","_table$hi2","span","TimeSeriesScale","_TimeScale2","_this44","_table","_minPos","_tableRange","_getTimestampsForTable","buildLookupTable","registerables"],"sources":["../src/core/core.animator.js","../src/core/core.animation.js","../src/core/core.animations.js","../src/core/core.datasetController.js","../src/controllers/controller.bar.js","../src/controllers/controller.bubble.js","../src/controllers/controller.doughnut.js","../src/controllers/controller.line.js","../src/controllers/controller.polarArea.js","../src/controllers/controller.pie.js","../src/controllers/controller.radar.js","../src/controllers/controller.scatter.js","../src/core/core.adapters.ts","../src/core/core.interaction.js","../src/core/core.layouts.js","../src/platform/platform.base.js","../src/platform/platform.basic.js","../src/platform/platform.dom.js","../src/platform/index.js","../src/core/core.element.ts","../src/core/core.scale.autoskip.js","../src/core/core.scale.js","../src/core/core.typedRegistry.js","../src/core/core.registry.js","../src/core/core.plugins.js","../src/core/core.config.js","../src/core/core.controller.js","../src/elements/element.arc.ts","../src/elements/element.line.js","../src/elements/element.point.ts","../src/elements/element.bar.js","../src/plugins/plugin.colors.ts","../src/plugins/plugin.decimation.js","../src/plugins/plugin.filler/filler.segment.js","../src/plugins/plugin.filler/filler.helper.js","../src/plugins/plugin.filler/filler.options.js","../src/plugins/plugin.filler/filler.target.stack.js","../src/plugins/plugin.filler/simpleArc.js","../src/plugins/plugin.filler/filler.target.js","../src/plugins/plugin.filler/filler.drawing.js","../src/plugins/plugin.filler/index.js","../src/plugins/plugin.legend.js","../src/plugins/plugin.title.js","../src/plugins/plugin.subtitle.js","../src/plugins/plugin.tooltip.js","../src/scales/scale.category.js","../src/scales/scale.linearbase.js","../src/scales/scale.linear.js","../src/scales/scale.logarithmic.js","../src/scales/scale.radialLinear.js","../src/scales/scale.time.js","../src/scales/scale.timeseries.js","../src/index.ts"],"sourcesContent":["import {requestAnimFrame} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('./core.animation.js').default } Animation\n * @typedef { import('./core.controller.js').default } Chart\n */\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is export for typedoc\n */\nexport class Animator {\n  constructor() {\n    this._request = null;\n    this._charts = new Map();\n    this._running = false;\n    this._lastDate = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(chart, anims, date, type) {\n    const callbacks = anims.listeners[type];\n    const numSteps = anims.duration;\n\n    callbacks.forEach(fn => fn({\n      chart,\n      initial: anims.initial,\n      numSteps,\n      currentStep: Math.min(date - anims.start, numSteps)\n    }));\n  }\n\n  /**\n\t * @private\n\t */\n  _refresh() {\n    if (this._request) {\n      return;\n    }\n    this._running = true;\n\n    this._request = requestAnimFrame.call(window, () => {\n      this._update();\n      this._request = null;\n\n      if (this._running) {\n        this._refresh();\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _update(date = Date.now()) {\n    let remaining = 0;\n\n    this._charts.forEach((anims, chart) => {\n      if (!anims.running || !anims.items.length) {\n        return;\n      }\n      const items = anims.items;\n      let i = items.length - 1;\n      let draw = false;\n      let item;\n\n      for (; i >= 0; --i) {\n        item = items[i];\n\n        if (item._active) {\n          if (item._total > anims.duration) {\n            // if the animation has been updated and its duration prolonged,\n            // update to total duration of current animations run (for progress event)\n            anims.duration = item._total;\n          }\n          item.tick(date);\n          draw = true;\n        } else {\n          // Remove the item by replacing it with last item and removing the last\n          // A lot faster than splice.\n          items[i] = items[items.length - 1];\n          items.pop();\n        }\n      }\n\n      if (draw) {\n        chart.draw();\n        this._notify(chart, anims, date, 'progress');\n      }\n\n      if (!items.length) {\n        anims.running = false;\n        this._notify(chart, anims, date, 'complete');\n        anims.initial = false;\n      }\n\n      remaining += items.length;\n    });\n\n    this._lastDate = date;\n\n    if (remaining === 0) {\n      this._running = false;\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getAnims(chart) {\n    const charts = this._charts;\n    let anims = charts.get(chart);\n    if (!anims) {\n      anims = {\n        running: false,\n        initial: true,\n        items: [],\n        listeners: {\n          complete: [],\n          progress: []\n        }\n      };\n      charts.set(chart, anims);\n    }\n    return anims;\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} event - event name\n\t * @param {Function} cb - callback\n\t */\n  listen(chart, event, cb) {\n    this._getAnims(chart).listeners[event].push(cb);\n  }\n\n  /**\n\t * Add animations\n\t * @param {Chart} chart\n\t * @param {Animation[]} items - animations\n\t */\n  add(chart, items) {\n    if (!items || !items.length) {\n      return;\n    }\n    this._getAnims(chart).items.push(...items);\n  }\n\n  /**\n\t * Counts number of active animations for the chart\n\t * @param {Chart} chart\n\t */\n  has(chart) {\n    return this._getAnims(chart).items.length > 0;\n  }\n\n  /**\n\t * Start animating (all charts)\n\t * @param {Chart} chart\n\t */\n  start(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims) {\n      return;\n    }\n    anims.running = true;\n    anims.start = Date.now();\n    anims.duration = anims.items.reduce((acc, cur) => Math.max(acc, cur._duration), 0);\n    this._refresh();\n  }\n\n  running(chart) {\n    if (!this._running) {\n      return false;\n    }\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.running || !anims.items.length) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n\t * Stop all animations for the chart\n\t * @param {Chart} chart\n\t */\n  stop(chart) {\n    const anims = this._charts.get(chart);\n    if (!anims || !anims.items.length) {\n      return;\n    }\n    const items = anims.items;\n    let i = items.length - 1;\n\n    for (; i >= 0; --i) {\n      items[i].cancel();\n    }\n    anims.items = [];\n    this._notify(chart, anims, Date.now(), 'complete');\n  }\n\n  /**\n\t * Remove chart from Animator\n\t * @param {Chart} chart\n\t */\n  remove(chart) {\n    return this._charts.delete(chart);\n  }\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Animator();\n","import effects from '../helpers/helpers.easing.js';\nimport {resolve} from '../helpers/helpers.options.js';\nimport {color as helpersColor} from '../helpers/helpers.color.js';\n\nconst transparent = 'transparent';\nconst interpolators = {\n  boolean(from, to, factor) {\n    return factor > 0.5 ? to : from;\n  },\n  /**\n   * @param {string} from\n   * @param {string} to\n   * @param {number} factor\n   */\n  color(from, to, factor) {\n    const c0 = helpersColor(from || transparent);\n    const c1 = c0.valid && helpersColor(to || transparent);\n    return c1 && c1.valid\n      ? c1.mix(c0, factor).hexString()\n      : to;\n  },\n  number(from, to, factor) {\n    return from + (to - from) * factor;\n  }\n};\n\nexport default class Animation {\n  constructor(cfg, target, prop, to) {\n    const currentValue = target[prop];\n\n    to = resolve([cfg.to, to, currentValue, cfg.from]);\n    const from = resolve([cfg.from, currentValue, to]);\n\n    this._active = true;\n    this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n    this._easing = effects[cfg.easing] || effects.linear;\n    this._start = Math.floor(Date.now() + (cfg.delay || 0));\n    this._duration = this._total = Math.floor(cfg.duration);\n    this._loop = !!cfg.loop;\n    this._target = target;\n    this._prop = prop;\n    this._from = from;\n    this._to = to;\n    this._promises = undefined;\n  }\n\n  active() {\n    return this._active;\n  }\n\n  update(cfg, to, date) {\n    if (this._active) {\n      this._notify(false);\n\n      const currentValue = this._target[this._prop];\n      const elapsed = date - this._start;\n      const remain = this._duration - elapsed;\n      this._start = date;\n      this._duration = Math.floor(Math.max(remain, cfg.duration));\n      this._total += elapsed;\n      this._loop = !!cfg.loop;\n      this._to = resolve([cfg.to, to, currentValue, cfg.from]);\n      this._from = resolve([cfg.from, currentValue, to]);\n    }\n  }\n\n  cancel() {\n    if (this._active) {\n      // update current evaluated value, for smoother animations\n      this.tick(Date.now());\n      this._active = false;\n      this._notify(false);\n    }\n  }\n\n  tick(date) {\n    const elapsed = date - this._start;\n    const duration = this._duration;\n    const prop = this._prop;\n    const from = this._from;\n    const loop = this._loop;\n    const to = this._to;\n    let factor;\n\n    this._active = from !== to && (loop || (elapsed < duration));\n\n    if (!this._active) {\n      this._target[prop] = to;\n      this._notify(true);\n      return;\n    }\n\n    if (elapsed < 0) {\n      this._target[prop] = from;\n      return;\n    }\n\n    factor = (elapsed / duration) % 2;\n    factor = loop && factor > 1 ? 2 - factor : factor;\n    factor = this._easing(Math.min(1, Math.max(0, factor)));\n\n    this._target[prop] = this._fn(from, to, factor);\n  }\n\n  wait() {\n    const promises = this._promises || (this._promises = []);\n    return new Promise((res, rej) => {\n      promises.push({res, rej});\n    });\n  }\n\n  _notify(resolved) {\n    const method = resolved ? 'res' : 'rej';\n    const promises = this._promises || [];\n    for (let i = 0; i < promises.length; i++) {\n      promises[i][method]();\n    }\n  }\n}\n","import animator from './core.animator.js';\nimport Animation from './core.animation.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isObject} from '../helpers/helpers.core.js';\n\nexport default class Animations {\n  constructor(chart, config) {\n    this._chart = chart;\n    this._properties = new Map();\n    this.configure(config);\n  }\n\n  configure(config) {\n    if (!isObject(config)) {\n      return;\n    }\n\n    const animationOptions = Object.keys(defaults.animation);\n    const animatedProps = this._properties;\n\n    Object.getOwnPropertyNames(config).forEach(key => {\n      const cfg = config[key];\n      if (!isObject(cfg)) {\n        return;\n      }\n      const resolved = {};\n      for (const option of animationOptions) {\n        resolved[option] = cfg[option];\n      }\n\n      (isArray(cfg.properties) && cfg.properties || [key]).forEach((prop) => {\n        if (prop === key || !animatedProps.has(prop)) {\n          animatedProps.set(prop, resolved);\n        }\n      });\n    });\n  }\n\n  /**\n\t * Utility to handle animation of `options`.\n\t * @private\n\t */\n  _animateOptions(target, values) {\n    const newOptions = values.options;\n    const options = resolveTargetOptions(target, newOptions);\n    if (!options) {\n      return [];\n    }\n\n    const animations = this._createAnimations(options, newOptions);\n    if (newOptions.$shared) {\n      // Going to shared options:\n      // After all animations are done, assign the shared options object to the element\n      // So any new updates to the shared options are observed\n      awaitAll(target.options.$animations, newOptions).then(() => {\n        target.options = newOptions;\n      }, () => {\n        // rejected, noop\n      });\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @private\n\t */\n  _createAnimations(target, values) {\n    const animatedProps = this._properties;\n    const animations = [];\n    const running = target.$animations || (target.$animations = {});\n    const props = Object.keys(values);\n    const date = Date.now();\n    let i;\n\n    for (i = props.length - 1; i >= 0; --i) {\n      const prop = props[i];\n      if (prop.charAt(0) === '$') {\n        continue;\n      }\n\n      if (prop === 'options') {\n        animations.push(...this._animateOptions(target, values));\n        continue;\n      }\n      const value = values[prop];\n      let animation = running[prop];\n      const cfg = animatedProps.get(prop);\n\n      if (animation) {\n        if (cfg && animation.active()) {\n          // There is an existing active animation, let's update that\n          animation.update(cfg, value, date);\n          continue;\n        } else {\n          animation.cancel();\n        }\n      }\n      if (!cfg || !cfg.duration) {\n        // not animated, set directly to new value\n        target[prop] = value;\n        continue;\n      }\n\n      running[prop] = animation = new Animation(cfg, target, prop, value);\n      animations.push(animation);\n    }\n    return animations;\n  }\n\n\n  /**\n\t * Update `target` properties to new values, using configured animations\n\t * @param {object} target - object to update\n\t * @param {object} values - new target properties\n\t * @returns {boolean|undefined} - `true` if animations were started\n\t **/\n  update(target, values) {\n    if (this._properties.size === 0) {\n      // Nothing is animated, just apply the new values.\n      Object.assign(target, values);\n      return;\n    }\n\n    const animations = this._createAnimations(target, values);\n\n    if (animations.length) {\n      animator.add(this._chart, animations);\n      return true;\n    }\n  }\n}\n\nfunction awaitAll(animations, properties) {\n  const running = [];\n  const keys = Object.keys(properties);\n  for (let i = 0; i < keys.length; i++) {\n    const anim = animations[keys[i]];\n    if (anim && anim.active()) {\n      running.push(anim.wait());\n    }\n  }\n  // @ts-ignore\n  return Promise.all(running);\n}\n\nfunction resolveTargetOptions(target, newOptions) {\n  if (!newOptions) {\n    return;\n  }\n  let options = target.options;\n  if (!options) {\n    target.options = newOptions;\n    return;\n  }\n  if (options.$shared) {\n    // Going from shared options to distinct one:\n    // Create new options object containing the old shared values and start updating that.\n    target.options = options = Object.assign({}, options, {$shared: false, $animations: {}});\n  }\n  return options;\n}\n","import Animations from './core.animations.js';\nimport defaults from './core.defaults.js';\nimport {isArray, isFinite, isObject, valueOrDefault, resolveObjectKey, defined} from '../helpers/helpers.core.js';\nimport {listenArrayEvents, unlistenArrayEvents} from '../helpers/helpers.collection.js';\nimport {createContext, sign} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('./core.scale.js').default } Scale\n */\n\nfunction scaleClip(scale, allowedOverflow) {\n  const opts = scale && scale.options || {};\n  const reverse = opts.reverse;\n  const min = opts.min === undefined ? allowedOverflow : 0;\n  const max = opts.max === undefined ? allowedOverflow : 0;\n  return {\n    start: reverse ? max : min,\n    end: reverse ? min : max\n  };\n}\n\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n  if (allowedOverflow === false) {\n    return false;\n  }\n  const x = scaleClip(xScale, allowedOverflow);\n  const y = scaleClip(yScale, allowedOverflow);\n\n  return {\n    top: y.end,\n    right: x.end,\n    bottom: y.start,\n    left: x.start\n  };\n}\n\nfunction toClip(value) {\n  let t, r, b, l;\n\n  if (isObject(value)) {\n    t = value.top;\n    r = value.right;\n    b = value.bottom;\n    l = value.left;\n  } else {\n    t = r = b = l = value;\n  }\n\n  return {\n    top: t,\n    right: r,\n    bottom: b,\n    left: l,\n    disabled: value === false\n  };\n}\n\nfunction getSortedDatasetIndices(chart, filterVisible) {\n  const keys = [];\n  const metasets = chart._getSortedDatasetMetas(filterVisible);\n  let i, ilen;\n\n  for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n    keys.push(metasets[i].index);\n  }\n  return keys;\n}\n\nfunction applyStack(stack, value, dsIndex, options = {}) {\n  const keys = stack.keys;\n  const singleMode = options.mode === 'single';\n  let i, ilen, datasetIndex, otherValue;\n\n  if (value === null) {\n    return;\n  }\n\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    datasetIndex = +keys[i];\n    if (datasetIndex === dsIndex) {\n      if (options.all) {\n        continue;\n      }\n      break;\n    }\n    otherValue = stack.values[datasetIndex];\n    if (isFinite(otherValue) && (singleMode || (value === 0 || sign(value) === sign(otherValue)))) {\n      value += otherValue;\n    }\n  }\n  return value;\n}\n\nfunction convertObjectDataToArray(data) {\n  const keys = Object.keys(data);\n  const adata = new Array(keys.length);\n  let i, ilen, key;\n  for (i = 0, ilen = keys.length; i < ilen; ++i) {\n    key = keys[i];\n    adata[i] = {\n      x: key,\n      y: data[key]\n    };\n  }\n  return adata;\n}\n\nfunction isStacked(scale, meta) {\n  const stacked = scale && scale.options.stacked;\n  return stacked || (stacked === undefined && meta.stack !== undefined);\n}\n\nfunction getStackKey(indexScale, valueScale, meta) {\n  return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\n\nfunction getUserBounds(scale) {\n  const {min, max, minDefined, maxDefined} = scale.getUserBounds();\n  return {\n    min: minDefined ? min : Number.NEGATIVE_INFINITY,\n    max: maxDefined ? max : Number.POSITIVE_INFINITY\n  };\n}\n\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n  const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n  return subStack[indexValue] || (subStack[indexValue] = {});\n}\n\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n  for (const meta of vScale.getMatchingVisibleMetas(type).reverse()) {\n    const value = stack[meta.index];\n    if ((positive && value > 0) || (!positive && value < 0)) {\n      return meta.index;\n    }\n  }\n\n  return null;\n}\n\nfunction updateStacks(controller, parsed) {\n  const {chart, _cachedMeta: meta} = controller;\n  const stacks = chart._stacks || (chart._stacks = {}); // map structure is {stackKey: {datasetIndex: value}}\n  const {iScale, vScale, index: datasetIndex} = meta;\n  const iAxis = iScale.axis;\n  const vAxis = vScale.axis;\n  const key = getStackKey(iScale, vScale, meta);\n  const ilen = parsed.length;\n  let stack;\n\n  for (let i = 0; i < ilen; ++i) {\n    const item = parsed[i];\n    const {[iAxis]: index, [vAxis]: value} = item;\n    const itemStacks = item._stacks || (item._stacks = {});\n    stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n    stack[datasetIndex] = value;\n\n    stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n    stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n\n    const visualValues = stack._visualValues || (stack._visualValues = {});\n    visualValues[datasetIndex] = value;\n  }\n}\n\nfunction getFirstScaleId(chart, axis) {\n  const scales = chart.scales;\n  return Object.keys(scales).filter(key => scales[key].axis === axis).shift();\n}\n\nfunction createDatasetContext(parent, index) {\n  return createContext(parent,\n    {\n      active: false,\n      dataset: undefined,\n      datasetIndex: index,\n      index,\n      mode: 'default',\n      type: 'dataset'\n    }\n  );\n}\n\nfunction createDataContext(parent, index, element) {\n  return createContext(parent, {\n    active: false,\n    dataIndex: index,\n    parsed: undefined,\n    raw: undefined,\n    element,\n    index,\n    mode: 'default',\n    type: 'data'\n  });\n}\n\nfunction clearStacks(meta, items) {\n  // Not using meta.index here, because it might be already updated if the dataset changed location\n  const datasetIndex = meta.controller.index;\n  const axis = meta.vScale && meta.vScale.axis;\n  if (!axis) {\n    return;\n  }\n\n  items = items || meta._parsed;\n  for (const parsed of items) {\n    const stacks = parsed._stacks;\n    if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n      return;\n    }\n    delete stacks[axis][datasetIndex];\n    if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n      delete stacks[axis]._visualValues[datasetIndex];\n    }\n  }\n}\n\nconst isDirectUpdateMode = (mode) => mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared) => shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart) => canStack && !meta.hidden && meta._stacked\n  && {keys: getSortedDatasetIndices(chart, true), values: null};\n\nexport default class DatasetController {\n\n  /**\n   * @type {any}\n   */\n  static defaults = {};\n\n  /**\n   * Element type used to generate a meta dataset (e.g. Chart.element.LineElement).\n   */\n  static datasetElementType = null;\n\n  /**\n   * Element type used to generate a meta data (e.g. Chart.element.PointElement).\n   */\n  static dataElementType = null;\n\n  /**\n\t * @param {Chart} chart\n\t * @param {number} datasetIndex\n\t */\n  constructor(chart, datasetIndex) {\n    this.chart = chart;\n    this._ctx = chart.ctx;\n    this.index = datasetIndex;\n    this._cachedDataOpts = {};\n    this._cachedMeta = this.getMeta();\n    this._type = this._cachedMeta.type;\n    this.options = undefined;\n    /** @type {boolean | object} */\n    this._parsing = false;\n    this._data = undefined;\n    this._objectData = undefined;\n    this._sharedOptions = undefined;\n    this._drawStart = undefined;\n    this._drawCount = undefined;\n    this.enableOptionSharing = false;\n    this.supportsDecimation = false;\n    this.$context = undefined;\n    this._syncList = [];\n    this.datasetElementType = new.target.datasetElementType;\n    this.dataElementType = new.target.dataElementType;\n\n    this.initialize();\n  }\n\n  initialize() {\n    const meta = this._cachedMeta;\n    this.configure();\n    this.linkScales();\n    meta._stacked = isStacked(meta.vScale, meta);\n    this.addElements();\n\n    if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n      console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n    }\n  }\n\n  updateIndex(datasetIndex) {\n    if (this.index !== datasetIndex) {\n      clearStacks(this._cachedMeta);\n    }\n    this.index = datasetIndex;\n  }\n\n  linkScales() {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n\n    const chooseId = (axis, x, y, r) => axis === 'x' ? x : axis === 'r' ? r : y;\n\n    const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n    const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n    const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n    const indexAxis = meta.indexAxis;\n    const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n    const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n    meta.xScale = this.getScaleForId(xid);\n    meta.yScale = this.getScaleForId(yid);\n    meta.rScale = this.getScaleForId(rid);\n    meta.iScale = this.getScaleForId(iid);\n    meta.vScale = this.getScaleForId(vid);\n  }\n\n  getDataset() {\n    return this.chart.data.datasets[this.index];\n  }\n\n  getMeta() {\n    return this.chart.getDatasetMeta(this.index);\n  }\n\n  /**\n\t * @param {string} scaleID\n\t * @return {Scale}\n\t */\n  getScaleForId(scaleID) {\n    return this.chart.scales[scaleID];\n  }\n\n  /**\n\t * @private\n\t */\n  _getOtherScale(scale) {\n    const meta = this._cachedMeta;\n    return scale === meta.iScale\n      ? meta.vScale\n      : meta.iScale;\n  }\n\n  reset() {\n    this._update('reset');\n  }\n\n  /**\n\t * @private\n\t */\n  _destroy() {\n    const meta = this._cachedMeta;\n    if (this._data) {\n      unlistenArrayEvents(this._data, this);\n    }\n    if (meta._stacked) {\n      clearStacks(meta);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _dataCheck() {\n    const dataset = this.getDataset();\n    const data = dataset.data || (dataset.data = []);\n    const _data = this._data;\n\n    // In order to correctly handle data addition/deletion animation (and thus simulate\n    // real-time charts), we need to monitor these data modifications and synchronize\n    // the internal metadata accordingly.\n\n    if (isObject(data)) {\n      this._data = convertObjectDataToArray(data);\n    } else if (_data !== data) {\n      if (_data) {\n        // This case happens when the user replaced the data array instance.\n        unlistenArrayEvents(_data, this);\n        // Discard old parsed data and stacks\n        const meta = this._cachedMeta;\n        clearStacks(meta);\n        meta._parsed = [];\n      }\n      if (data && Object.isExtensible(data)) {\n        listenArrayEvents(data, this);\n      }\n      this._syncList = [];\n      this._data = data;\n    }\n  }\n\n  addElements() {\n    const meta = this._cachedMeta;\n\n    this._dataCheck();\n\n    if (this.datasetElementType) {\n      meta.dataset = new this.datasetElementType();\n    }\n  }\n\n  buildOrUpdateElements(resetNewElements) {\n    const meta = this._cachedMeta;\n    const dataset = this.getDataset();\n    let stackChanged = false;\n\n    this._dataCheck();\n\n    // make sure cached _stacked status is current\n    const oldStacked = meta._stacked;\n    meta._stacked = isStacked(meta.vScale, meta);\n\n    // detect change in stack option\n    if (meta.stack !== dataset.stack) {\n      stackChanged = true;\n      // remove values from old stack\n      clearStacks(meta);\n      meta.stack = dataset.stack;\n    }\n\n    // Re-sync meta data in case the user replaced the data array or if we missed\n    // any updates and so make sure that we handle number of datapoints changing.\n    this._resyncElements(resetNewElements);\n\n    // if stack changed, update stack values for the whole dataset\n    if (stackChanged || oldStacked !== meta._stacked) {\n      updateStacks(this, meta._parsed);\n    }\n  }\n\n  /**\n\t * Merges user-supplied and default dataset-level options\n\t * @private\n\t */\n  configure() {\n    const config = this.chart.config;\n    const scopeKeys = config.datasetScopeKeys(this._type);\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n    this.options = config.createResolver(scopes, this.getContext());\n    this._parsing = this.options.parsing;\n    this._cachedDataOpts = {};\n  }\n\n  /**\n\t * @param {number} start\n\t * @param {number} count\n\t */\n  parse(start, count) {\n    const {_cachedMeta: meta, _data: data} = this;\n    const {iScale, _stacked} = meta;\n    const iAxis = iScale.axis;\n\n    let sorted = start === 0 && count === data.length ? true : meta._sorted;\n    let prev = start > 0 && meta._parsed[start - 1];\n    let i, cur, parsed;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n      meta._sorted = true;\n      parsed = data;\n    } else {\n      if (isArray(data[start])) {\n        parsed = this.parseArrayData(meta, data, start, count);\n      } else if (isObject(data[start])) {\n        parsed = this.parseObjectData(meta, data, start, count);\n      } else {\n        parsed = this.parsePrimitiveData(meta, data, start, count);\n      }\n\n      const isNotInOrderComparedToPrev = () => cur[iAxis] === null || (prev && cur[iAxis] < prev[iAxis]);\n      for (i = 0; i < count; ++i) {\n        meta._parsed[i + start] = cur = parsed[i];\n        if (sorted) {\n          if (isNotInOrderComparedToPrev()) {\n            sorted = false;\n          }\n          prev = cur;\n        }\n      }\n      meta._sorted = sorted;\n    }\n\n    if (_stacked) {\n      updateStacks(this, parsed);\n    }\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [1,3,4]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {xScale0: 0, yScale0: 1}\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = new Array(count);\n    let i, ilen, index;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      parsed[i] = {\n        [iAxis]: singleScale || iScale.parse(labels[index], index),\n        [vAxis]: vScale.parse(data[index], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [[1,2],[3,4]]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id.\n\t * Example: {x: 0, y: 1}\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(item[0], index),\n        y: yScale.parse(item[1], index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @param {object} meta - dataset meta\n\t * @param {array} data - data array. Example [{x:1, y:5}, {x:2, y:10}]\n\t * @param {number} start - start index\n\t * @param {number} count - number of items to parse\n\t * @returns {object} parsed item - item containing index and a parsed value\n\t * for each scale id. _custom is optional\n\t * Example: {xScale0: 0, yScale0: 1, _custom: {r: 10, foo: 'bar'}}\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {xScale, yScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n\n    for (i = 0, ilen = count; i < ilen; ++i) {\n      index = i + start;\n      item = data[index];\n      parsed[i] = {\n        x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n        y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n      };\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getParsed(index) {\n    return this._cachedMeta._parsed[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataElement(index) {\n    return this._cachedMeta.data[index];\n  }\n\n  /**\n\t * @protected\n\t */\n  applyStack(scale, parsed, mode) {\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const value = parsed[scale.axis];\n    const stack = {\n      keys: getSortedDatasetIndices(chart, true),\n      values: parsed._stacks[scale.axis]._visualValues\n    };\n    return applyStack(stack, value, meta.index, {mode});\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    const parsedValue = parsed[scale.axis];\n    let value = parsedValue === null ? NaN : parsedValue;\n    const values = stack && parsed._stacks[scale.axis];\n    if (stack && values) {\n      stack.values = values;\n      value = applyStack(stack, parsedValue, this._cachedMeta.index);\n    }\n    range.min = Math.min(range.min, value);\n    range.max = Math.max(range.max, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMinMax(scale, canStack) {\n    const meta = this._cachedMeta;\n    const _parsed = meta._parsed;\n    const sorted = meta._sorted && scale === meta.iScale;\n    const ilen = _parsed.length;\n    const otherScale = this._getOtherScale(scale);\n    const stack = createStack(canStack, meta, this.chart);\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n    const {min: otherMin, max: otherMax} = getUserBounds(otherScale);\n    let i, parsed;\n\n    function _skip() {\n      parsed = _parsed[i];\n      const otherValue = parsed[otherScale.axis];\n      return !isFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n    }\n\n    for (i = 0; i < ilen; ++i) {\n      if (_skip()) {\n        continue;\n      }\n      this.updateRangeFromParsed(range, scale, parsed, stack);\n      if (sorted) {\n        // if the data is sorted, we don't need to check further from this end of array\n        break;\n      }\n    }\n    if (sorted) {\n      // in the sorted case, find first non-skipped value from other end of array\n      for (i = ilen - 1; i >= 0; --i) {\n        if (_skip()) {\n          continue;\n        }\n        this.updateRangeFromParsed(range, scale, parsed, stack);\n        break;\n      }\n    }\n    return range;\n  }\n\n  getAllParsedValues(scale) {\n    const parsed = this._cachedMeta._parsed;\n    const values = [];\n    let i, ilen, value;\n\n    for (i = 0, ilen = parsed.length; i < ilen; ++i) {\n      value = parsed[i][scale.axis];\n      if (isFinite(value)) {\n        values.push(value);\n      }\n    }\n    return values;\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return false;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const parsed = this.getParsed(index);\n    return {\n      label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n      value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _update(mode) {\n    const meta = this._cachedMeta;\n    this.update(mode || 'default');\n    meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {} // eslint-disable-line no-unused-vars\n\n  draw() {\n    const ctx = this._ctx;\n    const chart = this.chart;\n    const meta = this._cachedMeta;\n    const elements = meta.data || [];\n    const area = chart.chartArea;\n    const active = [];\n    const start = this._drawStart || 0;\n    const count = this._drawCount || (elements.length - start);\n    const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n    let i;\n\n    if (meta.dataset) {\n      meta.dataset.draw(ctx, area, start, count);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const element = elements[i];\n      if (element.hidden) {\n        continue;\n      }\n      if (element.active && drawActiveElementsOnTop) {\n        active.push(element);\n      } else {\n        element.draw(ctx, area);\n      }\n    }\n\n    for (i = 0; i < active.length; ++i) {\n      active[i].draw(ctx, area);\n    }\n  }\n\n  /**\n\t * Returns a set of predefined style properties that should be used to represent the dataset\n\t * or the data if the index is specified\n\t * @param {number} index - data index\n\t * @param {boolean} [active] - true if hover\n\t * @return {object} style object\n\t */\n  getStyle(index, active) {\n    const mode = active ? 'active' : 'default';\n    return index === undefined && this._cachedMeta.dataset\n      ? this.resolveDatasetElementOptions(mode)\n      : this.resolveDataElementOptions(index || 0, mode);\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index, active, mode) {\n    const dataset = this.getDataset();\n    let context;\n    if (index >= 0 && index < this._cachedMeta.data.length) {\n      const element = this._cachedMeta.data[index];\n      context = element.$context ||\n        (element.$context = createDataContext(this.getContext(), index, element));\n      context.parsed = this.getParsed(index);\n      context.raw = dataset.data[index];\n      context.index = context.dataIndex = index;\n    } else {\n      context = this.$context ||\n        (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n      context.dataset = dataset;\n      context.index = context.datasetIndex = this.index;\n    }\n\n    context.active = !!active;\n    context.mode = mode;\n    return context;\n  }\n\n  /**\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDatasetElementOptions(mode) {\n    return this._resolveElementOptions(this.datasetElementType.id, mode);\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    return this._resolveElementOptions(this.dataElementType.id, mode, index);\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveElementOptions(elementType, mode = 'default', index) {\n    const active = mode === 'active';\n    const cache = this._cachedDataOpts;\n    const cacheKey = elementType + '-' + mode;\n    const cached = cache[cacheKey];\n    const sharing = this.enableOptionSharing && defined(index);\n    if (cached) {\n      return cloneIfNotShared(cached, sharing);\n    }\n    const config = this.chart.config;\n    const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n    const prefixes = active ? [`${elementType}Hover`, 'hover', elementType, ''] : [elementType, ''];\n    const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n    const names = Object.keys(defaults.elements[elementType]);\n    // context is provided as a function, and is called only if needed,\n    // so we don't create a context for each element if not needed.\n    const context = () => this.getContext(index, active, mode);\n    const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n\n    if (values.$shared) {\n      // `$shared` indicates this set of options can be shared between multiple elements.\n      // Sharing is used to reduce number of properties to change during animation.\n      values.$shared = sharing;\n\n      // We cache options by `mode`, which can be 'active' for example. This enables us\n      // to have the 'active' element options and 'default' options to switch between\n      // when interacting.\n      cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n    }\n\n    return values;\n  }\n\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations(index, transition, active) {\n    const chart = this.chart;\n    const cache = this._cachedDataOpts;\n    const cacheKey = `animation-${transition}`;\n    const cached = cache[cacheKey];\n    if (cached) {\n      return cached;\n    }\n    let options;\n    if (chart.options.animation !== false) {\n      const config = this.chart.config;\n      const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n      const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n      options = config.createResolver(scopes, this.getContext(index, active, transition));\n    }\n    const animations = new Animations(chart, options && options.animations);\n    if (options && options._cacheable) {\n      cache[cacheKey] = Object.freeze(animations);\n    }\n    return animations;\n  }\n\n  /**\n\t * Utility for getting the options object shared between elements\n\t * @protected\n\t */\n  getSharedOptions(options) {\n    if (!options.$shared) {\n      return;\n    }\n    return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n  }\n\n  /**\n\t * Utility for determining if `options` should be included in the updated properties\n\t * @protected\n\t */\n  includeOptions(mode, sharedOptions) {\n    return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n  }\n\n  /**\n   * @todo v4, rename to getSharedOptions and remove excess functions\n   */\n  _getSharedOptions(start, mode) {\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const previouslySharedOptions = this._sharedOptions;\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions) || (sharedOptions !== previouslySharedOptions);\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    return {sharedOptions, includeOptions};\n  }\n\n  /**\n\t * Utility for updating an element with new properties, using animations when appropriate.\n\t * @protected\n\t */\n  updateElement(element, index, properties, mode) {\n    if (isDirectUpdateMode(mode)) {\n      Object.assign(element, properties);\n    } else {\n      this._resolveAnimations(index, mode).update(element, properties);\n    }\n  }\n\n  /**\n\t * Utility to animate the shared options, that are potentially affecting multiple elements.\n\t * @protected\n\t */\n  updateSharedOptions(sharedOptions, mode, newOptions) {\n    if (sharedOptions && !isDirectUpdateMode(mode)) {\n      this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setStyle(element, index, mode, active) {\n    element.active = active;\n    const options = this.getStyle(index, active);\n    this._resolveAnimations(index, mode, active).update(element, {\n      // When going from active to inactive, we need to update to the shared options.\n      // This way the once hovered element will end up with the same original shared options instance, after animation.\n      options: (!active && this.getSharedOptions(options)) || options\n    });\n  }\n\n  removeHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', false);\n  }\n\n  setHoverStyle(element, datasetIndex, index) {\n    this._setStyle(element, index, 'active', true);\n  }\n\n  /**\n\t * @private\n\t */\n  _removeDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', false);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _setDatasetHoverStyle() {\n    const element = this._cachedMeta.dataset;\n\n    if (element) {\n      this._setStyle(element, undefined, 'active', true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _resyncElements(resetNewElements) {\n    const data = this._data;\n    const elements = this._cachedMeta.data;\n\n    // Apply changes detected through array listeners\n    for (const [method, arg1, arg2] of this._syncList) {\n      this[method](arg1, arg2);\n    }\n    this._syncList = [];\n\n    const numMeta = elements.length;\n    const numData = data.length;\n    const count = Math.min(numData, numMeta);\n\n    if (count) {\n      // TODO: It is not optimal to always parse the old data\n      // This is done because we are not detecting direct assignments:\n      // chart.data.datasets[0].data[5] = 10;\n      // chart.data.datasets[0].data[5].y = 10;\n      this.parse(0, count);\n    }\n\n    if (numData > numMeta) {\n      this._insertElements(numMeta, numData - numMeta, resetNewElements);\n    } else if (numData < numMeta) {\n      this._removeElements(numData, numMeta - numData);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _insertElements(start, count, resetNewElements = true) {\n    const meta = this._cachedMeta;\n    const data = meta.data;\n    const end = start + count;\n    let i;\n\n    const move = (arr) => {\n      arr.length += count;\n      for (i = arr.length - 1; i >= end; i--) {\n        arr[i] = arr[i - count];\n      }\n    };\n    move(data);\n\n    for (i = start; i < end; ++i) {\n      data[i] = new this.dataElementType();\n    }\n\n    if (this._parsing) {\n      move(meta._parsed);\n    }\n    this.parse(start, count);\n\n    if (resetNewElements) {\n      this.updateElements(data, start, count, 'reset');\n    }\n  }\n\n  updateElements(element, start, count, mode) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @private\n\t */\n  _removeElements(start, count) {\n    const meta = this._cachedMeta;\n    if (this._parsing) {\n      const removed = meta._parsed.splice(start, count);\n      if (meta._stacked) {\n        clearStacks(meta, removed);\n      }\n    }\n    meta.data.splice(start, count);\n  }\n\n  /**\n\t * @private\n   */\n  _sync(args) {\n    if (this._parsing) {\n      this._syncList.push(args);\n    } else {\n      const [method, arg1, arg2] = args;\n      this[method](arg1, arg2);\n    }\n    this.chart._dataChanges.push([this.index, ...args]);\n  }\n\n  _onDataPush() {\n    const count = arguments.length;\n    this._sync(['_insertElements', this.getDataset().data.length - count, count]);\n  }\n\n  _onDataPop() {\n    this._sync(['_removeElements', this._cachedMeta.data.length - 1, 1]);\n  }\n\n  _onDataShift() {\n    this._sync(['_removeElements', 0, 1]);\n  }\n\n  _onDataSplice(start, count) {\n    if (count) {\n      this._sync(['_removeElements', start, count]);\n    }\n    const newCount = arguments.length - 2;\n    if (newCount) {\n      this._sync(['_insertElements', start, newCount]);\n    }\n  }\n\n  _onDataUnshift() {\n    this._sync(['_insertElements', 0, arguments.length]);\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {\n  _arrayUnique, isArray, isNullOrUndef,\n  valueOrDefault, resolveObjectKey, sign, defined\n} from '../helpers/index.js';\n\nfunction getAllScaleValues(scale, type) {\n  if (!scale._cache.$bar) {\n    const visibleMetas = scale.getMatchingVisibleMetas(type);\n    let values = [];\n\n    for (let i = 0, ilen = visibleMetas.length; i < ilen; i++) {\n      values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n    }\n    scale._cache.$bar = _arrayUnique(values.sort((a, b) => a - b));\n  }\n  return scale._cache.$bar;\n}\n\n/**\n * Computes the \"optimal\" sample size to maintain bars equally sized while preventing overlap.\n * @private\n */\nfunction computeMinSampleSize(meta) {\n  const scale = meta.iScale;\n  const values = getAllScaleValues(scale, meta.type);\n  let min = scale._length;\n  let i, ilen, curr, prev;\n  const updateMinAndPrev = () => {\n    if (curr === 32767 || curr === -32768) {\n      // Ignore truncated pixels\n      return;\n    }\n    if (defined(prev)) {\n      // curr - prev === 0 is ignored\n      min = Math.min(min, Math.abs(curr - prev) || min);\n    }\n    prev = curr;\n  };\n\n  for (i = 0, ilen = values.length; i < ilen; ++i) {\n    curr = scale.getPixelForValue(values[i]);\n    updateMinAndPrev();\n  }\n\n  prev = undefined;\n  for (i = 0, ilen = scale.ticks.length; i < ilen; ++i) {\n    curr = scale.getPixelForTick(i);\n    updateMinAndPrev();\n  }\n\n  return min;\n}\n\n/**\n * Computes an \"ideal\" category based on the absolute bar thickness or, if undefined or null,\n * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This\n * mode currently always generates bars equally sized (until we introduce scriptable options?).\n * @private\n */\nfunction computeFitCategoryTraits(index, ruler, options, stackCount) {\n  const thickness = options.barThickness;\n  let size, ratio;\n\n  if (isNullOrUndef(thickness)) {\n    size = ruler.min * options.categoryPercentage;\n    ratio = options.barPercentage;\n  } else {\n    // When bar thickness is enforced, category and bar percentages are ignored.\n    // Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')\n    // and deprecate barPercentage since this value is ignored when thickness is absolute.\n    size = thickness * stackCount;\n    ratio = 1;\n  }\n\n  return {\n    chunk: size / stackCount,\n    ratio,\n    start: ruler.pixels[index] - (size / 2)\n  };\n}\n\n/**\n * Computes an \"optimal\" category that globally arranges bars side by side (no gap when\n * percentage options are 1), based on the previous and following categories. This mode\n * generates bars with different widths when data are not evenly spaced.\n * @private\n */\nfunction computeFlexCategoryTraits(index, ruler, options, stackCount) {\n  const pixels = ruler.pixels;\n  const curr = pixels[index];\n  let prev = index > 0 ? pixels[index - 1] : null;\n  let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n  const percent = options.categoryPercentage;\n\n  if (prev === null) {\n    // first data: its size is double based on the next point or,\n    // if it's also the last data, we use the scale size.\n    prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n  }\n\n  if (next === null) {\n    // last data: its size is also double based on the previous point.\n    next = curr + curr - prev;\n  }\n\n  const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n  const size = Math.abs(next - prev) / 2 * percent;\n\n  return {\n    chunk: size / stackCount,\n    ratio: options.barPercentage,\n    start\n  };\n}\n\nfunction parseFloatBar(entry, item, vScale, i) {\n  const startValue = vScale.parse(entry[0], i);\n  const endValue = vScale.parse(entry[1], i);\n  const min = Math.min(startValue, endValue);\n  const max = Math.max(startValue, endValue);\n  let barStart = min;\n  let barEnd = max;\n\n  if (Math.abs(min) > Math.abs(max)) {\n    barStart = max;\n    barEnd = min;\n  }\n\n  // Store `barEnd` (furthest away from origin) as parsed value,\n  // to make stacking straight forward\n  item[vScale.axis] = barEnd;\n\n  item._custom = {\n    barStart,\n    barEnd,\n    start: startValue,\n    end: endValue,\n    min,\n    max\n  };\n}\n\nfunction parseValue(entry, item, vScale, i) {\n  if (isArray(entry)) {\n    parseFloatBar(entry, item, vScale, i);\n  } else {\n    item[vScale.axis] = vScale.parse(entry, i);\n  }\n  return item;\n}\n\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n  const iScale = meta.iScale;\n  const vScale = meta.vScale;\n  const labels = iScale.getLabels();\n  const singleScale = iScale === vScale;\n  const parsed = [];\n  let i, ilen, item, entry;\n\n  for (i = start, ilen = start + count; i < ilen; ++i) {\n    entry = data[i];\n    item = {};\n    item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n    parsed.push(parseValue(entry, item, vScale, i));\n  }\n  return parsed;\n}\n\nfunction isFloatBar(custom) {\n  return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\n\nfunction barSign(size, vScale, actualBase) {\n  if (size !== 0) {\n    return sign(size);\n  }\n  return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\n\nfunction borderProps(properties) {\n  let reverse, start, end, top, bottom;\n  if (properties.horizontal) {\n    reverse = properties.base > properties.x;\n    start = 'left';\n    end = 'right';\n  } else {\n    reverse = properties.base < properties.y;\n    start = 'bottom';\n    end = 'top';\n  }\n  if (reverse) {\n    top = 'end';\n    bottom = 'start';\n  } else {\n    top = 'start';\n    bottom = 'end';\n  }\n  return {start, end, reverse, top, bottom};\n}\n\nfunction setBorderSkipped(properties, options, stack, index) {\n  let edge = options.borderSkipped;\n  const res = {};\n\n  if (!edge) {\n    properties.borderSkipped = res;\n    return;\n  }\n\n  if (edge === true) {\n    properties.borderSkipped = {top: true, right: true, bottom: true, left: true};\n    return;\n  }\n\n  const {start, end, reverse, top, bottom} = borderProps(properties);\n\n  if (edge === 'middle' && stack) {\n    properties.enableBorderRadius = true;\n    if ((stack._top || 0) === index) {\n      edge = top;\n    } else if ((stack._bottom || 0) === index) {\n      edge = bottom;\n    } else {\n      res[parseEdge(bottom, start, end, reverse)] = true;\n      edge = top;\n    }\n  }\n\n  res[parseEdge(edge, start, end, reverse)] = true;\n  properties.borderSkipped = res;\n}\n\nfunction parseEdge(edge, a, b, reverse) {\n  if (reverse) {\n    edge = swap(edge, a, b);\n    edge = startEnd(edge, b, a);\n  } else {\n    edge = startEnd(edge, a, b);\n  }\n  return edge;\n}\n\nfunction swap(orig, v1, v2) {\n  return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\n\nfunction startEnd(v, start, end) {\n  return v === 'start' ? start : v === 'end' ? end : v;\n}\n\nfunction setInflateAmount(properties, {inflateAmount}, ratio) {\n  properties.inflateAmount = inflateAmount === 'auto'\n    ? ratio === 1 ? 0.33 : 0\n    : inflateAmount;\n}\n\nexport default class BarController extends DatasetController {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'bar',\n\n    categoryPercentage: 0.8,\n    barPercentage: 0.9,\n    grouped: true,\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'base', 'width', 'height']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n        offset: true,\n        grid: {\n          offset: true\n        }\n      },\n      _value_: {\n        type: 'linear',\n        beginAtZero: true,\n      }\n    }\n  };\n\n\n  /**\n\t * Overriding primitive data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding array data parsing since we support mixed primitive/array\n\t * data for float bars\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    return parseArrayOrPrimitive(meta, data, start, count);\n  }\n\n  /**\n\t * Overriding object data parsing since we support mixed primitive/array\n\t * value-scale data for float bars\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const {iScale, vScale} = meta;\n    const {xAxisKey = 'x', yAxisKey = 'y'} = this._parsing;\n    const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n    const parsed = [];\n    let i, ilen, item, obj;\n    for (i = start, ilen = start + count; i < ilen; ++i) {\n      obj = data[i];\n      item = {};\n      item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n      parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  updateRangeFromParsed(range, scale, parsed, stack) {\n    super.updateRangeFromParsed(range, scale, parsed, stack);\n    const custom = parsed._custom;\n    if (custom && scale === this._cachedMeta.vScale) {\n      // float bar: only one end of the bar is considered by `super`\n      range.min = Math.min(range.min, custom.min);\n      range.max = Math.max(range.max, custom.max);\n    }\n  }\n\n  /**\n\t * @return {number|boolean}\n\t * @protected\n\t */\n  getMaxOverflow() {\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const {iScale, vScale} = meta;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const value = isFloatBar(custom)\n      ? '[' + custom.start + ', ' + custom.end + ']'\n      : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n\n    return {\n      label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n      value\n    };\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n\n    super.initialize();\n\n    const meta = this._cachedMeta;\n    meta.stack = this.getDataset().stack;\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    this.updateElements(meta.data, 0, meta.data.length, mode);\n  }\n\n  updateElements(bars, start, count, mode) {\n    const reset = mode === 'reset';\n    const {index, _cachedMeta: {vScale}} = this;\n    const base = vScale.getBasePixel();\n    const horizontal = vScale.isHorizontal();\n    const ruler = this._getRuler();\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n\n    for (let i = start; i < start + count; i++) {\n      const parsed = this.getParsed(i);\n      const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {base, head: base} : this._calculateBarValuePixels(i);\n      const ipixels = this._calculateBarIndexPixels(i, ruler);\n      const stack = (parsed._stacks || {})[vScale.axis];\n\n      const properties = {\n        horizontal,\n        base: vpixels.base,\n        enableBorderRadius: !stack || isFloatBar(parsed._custom) || (index === stack._top || index === stack._bottom),\n        x: horizontal ? vpixels.head : ipixels.center,\n        y: horizontal ? ipixels.center : vpixels.head,\n        height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n        width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n      };\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n      }\n      const options = properties.options || bars[i].options;\n      setBorderSkipped(properties, options, stack, index);\n      setInflateAmount(properties, options, ruler.ratio);\n      this.updateElement(bars[i], i, properties, mode);\n    }\n  }\n\n  /**\n\t * Returns the stacks based on groups and bar visibility.\n\t * @param {number} [last] - The dataset index\n\t * @param {number} [dataIndex] - The data index of the ruler\n\t * @returns {string[]} The list of stack IDs\n\t * @private\n\t */\n  _getStacks(last, dataIndex) {\n    const {iScale} = this._cachedMeta;\n    const metasets = iScale.getMatchingVisibleMetas(this._type)\n      .filter(meta => meta.controller.options.grouped);\n    const stacked = iScale.options.stacked;\n    const stacks = [];\n\n    const skipNull = (meta) => {\n      const parsed = meta.controller.getParsed(dataIndex);\n      const val = parsed && parsed[meta.vScale.axis];\n\n      if (isNullOrUndef(val) || isNaN(val)) {\n        return true;\n      }\n    };\n\n    for (const meta of metasets) {\n      if (dataIndex !== undefined && skipNull(meta)) {\n        continue;\n      }\n\n      // stacked   | meta.stack\n      //           | found | not found | undefined\n      // false     |   x   |     x     |     x\n      // true      |       |     x     |\n      // undefined |       |     x     |     x\n      if (stacked === false || stacks.indexOf(meta.stack) === -1 ||\n\t\t\t\t(stacked === undefined && meta.stack === undefined)) {\n        stacks.push(meta.stack);\n      }\n      if (meta.index === last) {\n        break;\n      }\n    }\n\n    // No stacks? that means there is no visible data. Let's still initialize an `undefined`\n    // stack where possible invisible bars will be located.\n    // https://github.com/chartjs/Chart.js/issues/6368\n    if (!stacks.length) {\n      stacks.push(undefined);\n    }\n\n    return stacks;\n  }\n\n  /**\n\t * Returns the effective number of stacks based on groups and bar visibility.\n\t * @private\n\t */\n  _getStackCount(index) {\n    return this._getStacks(undefined, index).length;\n  }\n\n  /**\n\t * Returns the stack index for the given dataset based on groups and bar visibility.\n\t * @param {number} [datasetIndex] - The dataset index\n\t * @param {string} [name] - The stack name to find\n   * @param {number} [dataIndex]\n\t * @returns {number} The stack index\n\t * @private\n\t */\n  _getStackIndex(datasetIndex, name, dataIndex) {\n    const stacks = this._getStacks(datasetIndex, dataIndex);\n    const index = (name !== undefined)\n      ? stacks.indexOf(name)\n      : -1; // indexOf returns -1 if element is not present\n\n    return (index === -1)\n      ? stacks.length - 1\n      : index;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRuler() {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const iScale = meta.iScale;\n    const pixels = [];\n    let i, ilen;\n\n    for (i = 0, ilen = meta.data.length; i < ilen; ++i) {\n      pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n    }\n\n    const barThickness = opts.barThickness;\n    const min = barThickness || computeMinSampleSize(meta);\n\n    return {\n      min,\n      pixels,\n      start: iScale._startPixel,\n      end: iScale._endPixel,\n      stackCount: this._getStackCount(),\n      scale: iScale,\n      grouped: opts.grouped,\n      // bar thickness ratio used for non-grouped bars\n      ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n    };\n  }\n\n  /**\n\t * Note: pixel values are not clamped to the scale area.\n\t * @private\n\t */\n  _calculateBarValuePixels(index) {\n    const {_cachedMeta: {vScale, _stacked, index: datasetIndex}, options: {base: baseValue, minBarLength}} = this;\n    const actualBase = baseValue || 0;\n    const parsed = this.getParsed(index);\n    const custom = parsed._custom;\n    const floating = isFloatBar(custom);\n    let value = parsed[vScale.axis];\n    let start = 0;\n    let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n    let head, size;\n\n    if (length !== value) {\n      start = length - value;\n      length = value;\n    }\n\n    if (floating) {\n      value = custom.barStart;\n      length = custom.barEnd - custom.barStart;\n      // bars crossing origin are not stacked\n      if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n        start = 0;\n      }\n      start += value;\n    }\n\n    const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n    let base = vScale.getPixelForValue(startValue);\n\n    if (this.chart.getDataVisibility(index)) {\n      head = vScale.getPixelForValue(start + length);\n    } else {\n      // When not visible, no height\n      head = base;\n    }\n\n    size = head - base;\n\n    if (Math.abs(size) < minBarLength) {\n      size = barSign(size, vScale, actualBase) * minBarLength;\n      if (value === actualBase) {\n        base -= size / 2;\n      }\n      const startPixel = vScale.getPixelForDecimal(0);\n      const endPixel = vScale.getPixelForDecimal(1);\n      const min = Math.min(startPixel, endPixel);\n      const max = Math.max(startPixel, endPixel);\n      base = Math.max(Math.min(base, max), min);\n      head = base + size;\n\n      if (_stacked && !floating) {\n        // visual data coordinates after applying minBarLength\n        parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n      }\n    }\n\n    if (base === vScale.getPixelForValue(actualBase)) {\n      const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n      base += halfGrid;\n      size -= halfGrid;\n    }\n\n    return {\n      size,\n      base,\n      head,\n      center: head + size / 2\n    };\n  }\n\n  /**\n\t * @private\n\t */\n  _calculateBarIndexPixels(index, ruler) {\n    const scale = ruler.scale;\n    const options = this.options;\n    const skipNull = options.skipNull;\n    const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n    let center, size;\n    if (ruler.grouped) {\n      const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n      const range = options.barThickness === 'flex'\n        ? computeFlexCategoryTraits(index, ruler, options, stackCount)\n        : computeFitCategoryTraits(index, ruler, options, stackCount);\n\n      const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n      center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);\n      size = Math.min(maxBarThickness, range.chunk * range.ratio);\n    } else {\n      // For non-grouped bar charts, exact pixel values are used\n      center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n      size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n    }\n\n    return {\n      base: center - size / 2,\n      head: center + size / 2,\n      center,\n      size\n    };\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    const vScale = meta.vScale;\n    const rects = meta.data;\n    const ilen = rects.length;\n    let i = 0;\n\n    for (; i < ilen; ++i) {\n      if (this.getParsed(i)[vScale.axis] !== null) {\n        rects[i].draw(this._ctx);\n      }\n    }\n  }\n\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {valueOrDefault} from '../helpers/helpers.core.js';\n\nexport default class BubbleController extends DatasetController {\n\n  static id = 'bubble';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'borderWidth', 'radius']\n      }\n    }\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  /**\n\t * Parse array of primitive values\n\t * @protected\n\t */\n  parsePrimitiveData(meta, data, start, count) {\n    const parsed = super.parsePrimitiveData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of arrays\n\t * @protected\n\t */\n  parseArrayData(meta, data, start, count) {\n    const parsed = super.parseArrayData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * Parse array of objects\n\t * @protected\n\t */\n  parseObjectData(meta, data, start, count) {\n    const parsed = super.parseObjectData(meta, data, start, count);\n    for (let i = 0; i < parsed.length; i++) {\n      const item = data[start + i];\n      parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n    }\n    return parsed;\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const data = this._cachedMeta.data;\n\n    let max = 0;\n    for (let i = data.length - 1; i >= 0; --i) {\n      max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n    }\n    return max > 0 && max;\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n    const r = parsed._custom;\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n    };\n  }\n\n  update(mode) {\n    const points = this._cachedMeta.data;\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const parsed = !reset && this.getParsed(i);\n      const properties = {};\n      const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n      const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel);\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n\n        if (reset) {\n          properties.options.radius = 0;\n        }\n      }\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n\n  /**\n\t * @param {number} index\n\t * @param {string} [mode]\n\t * @protected\n\t */\n  resolveDataElementOptions(index, mode) {\n    const parsed = this.getParsed(index);\n    let values = super.resolveDataElementOptions(index, mode);\n\n    // In case values were cached (and thus frozen), we need to clone the values\n    if (values.$shared) {\n      values = Object.assign({}, values, {$shared: false});\n    }\n\n    // Custom radius resolution\n    const radius = values.radius;\n    if (mode !== 'active') {\n      values.radius = 0;\n    }\n    values.radius += valueOrDefault(parsed && parsed._custom, radius);\n\n    return values;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isObject, resolveObjectKey, toPercentage, toDimension, valueOrDefault} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {toRadians, PI, TAU, HALF_PI, _angleBetween} from '../helpers/helpers.math.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n  let ratioX = 1;\n  let ratioY = 1;\n  let offsetX = 0;\n  let offsetY = 0;\n  // If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc\n  if (circumference < TAU) {\n    const startAngle = rotation;\n    const endAngle = startAngle + circumference;\n    const startX = Math.cos(startAngle);\n    const startY = Math.sin(startAngle);\n    const endX = Math.cos(endAngle);\n    const endY = Math.sin(endAngle);\n    const calcMax = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n    const calcMin = (angle, a, b) => _angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n    const maxX = calcMax(0, startX, endX);\n    const maxY = calcMax(HALF_PI, startY, endY);\n    const minX = calcMin(PI, startX, endX);\n    const minY = calcMin(PI + HALF_PI, startY, endY);\n    ratioX = (maxX - minX) / 2;\n    ratioY = (maxY - minY) / 2;\n    offsetX = -(maxX + minX) / 2;\n    offsetY = -(maxY + minY) / 2;\n  }\n  return {ratioX, ratioY, offsetX, offsetY};\n}\n\nexport default class DoughnutController extends DatasetController {\n\n  static id = 'doughnut';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'arc',\n    animation: {\n      // Boolean - Whether we animate the rotation of the Doughnut\n      animateRotate: true,\n      // Boolean - Whether we animate scaling the Doughnut from the centre\n      animateScale: false\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['circumference', 'endAngle', 'innerRadius', 'outerRadius', 'startAngle', 'x', 'y', 'offset', 'borderWidth', 'spacing']\n      },\n    },\n    // The percentage of the chart that we cut out of the middle.\n    cutout: '50%',\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%',\n\n    // Spacing between arcs\n    spacing: 0,\n\n    indexAxis: 'r',\n  };\n\n  static descriptors = {\n    _scriptable: (name) => name !== 'spacing',\n    _indexable: (name) => name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash'),\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    // Need to override these to give a nice default\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.enableOptionSharing = true;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.offsetX = undefined;\n    this.offsetY = undefined;\n  }\n\n  linkScales() {}\n\n  /**\n\t * Override data parsing, since we are not using scales\n\t */\n  parse(start, count) {\n    const data = this.getDataset().data;\n    const meta = this._cachedMeta;\n\n    if (this._parsing === false) {\n      meta._parsed = data;\n    } else {\n      let getter = (i) => +data[i];\n\n      if (isObject(data[start])) {\n        const {key = 'value'} = this._parsing;\n        getter = (i) => +resolveObjectKey(data[i], key);\n      }\n\n      let i, ilen;\n      for (i = start, ilen = start + count; i < ilen; ++i) {\n        meta._parsed[i] = getter(i);\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _getRotation() {\n    return toRadians(this.options.rotation - 90);\n  }\n\n  /**\n\t * @private\n\t */\n  _getCircumference() {\n    return toRadians(this.options.circumference);\n  }\n\n  /**\n\t * Get the maximal rotation & circumference extents\n\t * across all visible datasets.\n\t */\n  _getRotationExtents() {\n    let min = TAU;\n    let max = -TAU;\n\n    for (let i = 0; i < this.chart.data.datasets.length; ++i) {\n      if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n        const controller = this.chart.getDatasetMeta(i).controller;\n        const rotation = controller._getRotation();\n        const circumference = controller._getCircumference();\n\n        min = Math.min(min, rotation);\n        max = Math.max(max, rotation + circumference);\n      }\n    }\n\n    return {\n      rotation: min,\n      circumference: max - min,\n    };\n  }\n\n  /**\n\t * @param {string} mode\n\t */\n  update(mode) {\n    const chart = this.chart;\n    const {chartArea} = chart;\n    const meta = this._cachedMeta;\n    const arcs = meta.data;\n    const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n    const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n    const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n    const chartWeight = this._getRingWeight(this.index);\n\n    // Compute the maximal rotation & circumference limits.\n    // If we only consider our dataset, this can cause problems when two datasets\n    // are both less than a circle with different rotations (starting angles)\n    const {circumference, rotation} = this._getRotationExtents();\n    const {ratioX, ratioY, offsetX, offsetY} = getRatioAndOffset(rotation, circumference, cutout);\n    const maxWidth = (chartArea.width - spacing) / ratioX;\n    const maxHeight = (chartArea.height - spacing) / ratioY;\n    const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n    const outerRadius = toDimension(this.options.radius, maxRadius);\n    const innerRadius = Math.max(outerRadius * cutout, 0);\n    const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n    this.offsetX = offsetX * outerRadius;\n    this.offsetY = offsetY * outerRadius;\n\n    meta.total = this.calculateTotal();\n\n    this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n    this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @private\n   */\n  _circumference(i, reset) {\n    const opts = this.options;\n    const meta = this._cachedMeta;\n    const circumference = this._getCircumference();\n    if ((reset && opts.animation.animateRotate) || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n      return 0;\n    }\n    return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const centerX = (chartArea.left + chartArea.right) / 2;\n    const centerY = (chartArea.top + chartArea.bottom) / 2;\n    const animateScale = reset && animationOpts.animateScale;\n    const innerRadius = animateScale ? 0 : this.innerRadius;\n    const outerRadius = animateScale ? 0 : this.outerRadius;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    let startAngle = this._getRotation();\n    let i;\n\n    for (i = 0; i < start; ++i) {\n      startAngle += this._circumference(i, reset);\n    }\n\n    for (i = start; i < start + count; ++i) {\n      const circumference = this._circumference(i, reset);\n      const arc = arcs[i];\n      const properties = {\n        x: centerX + this.offsetX,\n        y: centerY + this.offsetY,\n        startAngle,\n        endAngle: startAngle + circumference,\n        circumference,\n        outerRadius,\n        innerRadius\n      };\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n      }\n      startAngle += circumference;\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  calculateTotal() {\n    const meta = this._cachedMeta;\n    const metaData = meta.data;\n    let total = 0;\n    let i;\n\n    for (i = 0; i < metaData.length; i++) {\n      const value = meta._parsed[i];\n      if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n        total += Math.abs(value);\n      }\n    }\n\n    return total;\n  }\n\n  calculateCircumference(value) {\n    const total = this._cachedMeta.total;\n    if (total > 0 && !isNaN(value)) {\n      return TAU * (Math.abs(value) / total);\n    }\n    return 0;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index], chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  getMaxBorderWidth(arcs) {\n    let max = 0;\n    const chart = this.chart;\n    let i, ilen, meta, controller, options;\n\n    if (!arcs) {\n      // Find the outmost visible dataset\n      for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {\n        if (chart.isDatasetVisible(i)) {\n          meta = chart.getDatasetMeta(i);\n          arcs = meta.data;\n          controller = meta.controller;\n          break;\n        }\n      }\n    }\n\n    if (!arcs) {\n      return 0;\n    }\n\n    for (i = 0, ilen = arcs.length; i < ilen; ++i) {\n      options = controller.resolveDataElementOptions(i);\n      if (options.borderAlign !== 'inner') {\n        max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n      }\n    }\n    return max;\n  }\n\n  getMaxOffset(arcs) {\n    let max = 0;\n\n    for (let i = 0, ilen = arcs.length; i < ilen; ++i) {\n      const options = this.resolveDataElementOptions(i);\n      max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n    }\n    return max;\n  }\n\n  /**\n\t * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly\n\t * @private\n\t */\n  _getRingWeightOffset(datasetIndex) {\n    let ringWeightOffset = 0;\n\n    for (let i = 0; i < datasetIndex; ++i) {\n      if (this.chart.isDatasetVisible(i)) {\n        ringWeightOffset += this._getRingWeight(i);\n      }\n    }\n\n    return ringWeightOffset;\n  }\n\n  /**\n\t * @private\n\t */\n  _getRingWeight(datasetIndex) {\n    return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n  }\n\n  /**\n\t * Returns the sum of all visible data set weights.\n\t * @private\n\t */\n  _getVisibleDatasetWeightTotal() {\n    return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class LineController extends DatasetController {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n\n    showLine: true,\n    spanGaps: false,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    scales: {\n      _index_: {\n        type: 'category',\n      },\n      _value_: {\n        type: 'linear',\n      },\n    }\n  };\n\n  initialize() {\n    this.enableOptionSharing = true;\n    this.supportsDecimation = true;\n    super.initialize();\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {dataset: line, data: points = [], _dataset} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    // Update Line\n    line._chart = this.chart;\n    line._datasetIndex = this.index;\n    line._decimated = !!_dataset._decimated;\n    line.points = points;\n\n    const options = this.resolveDatasetElementOptions(mode);\n    if (!this.options.showLine) {\n      options.borderWidth = 0;\n    }\n    options.segment = this.options.segment;\n    this.updateElement(line, undefined, {\n      animated: !animationsDisabled,\n      options\n    }, mode);\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const {sharedOptions, includeOptions} = this._getSharedOptions(start, mode);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    const end = start + count;\n    const pointsCount = points.length;\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = 0; i < pointsCount; ++i) {\n      const point = points[i];\n      const properties = directUpdate ? point : {};\n\n      if (i < start || i >= end) {\n        properties.skip = true;\n        continue;\n      }\n\n      const parsed = this.getParsed(i);\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n    const data = meta.data || [];\n    if (!data.length) {\n      return border;\n    }\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n\n  draw() {\n    const meta = this._cachedMeta;\n    meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n    super.draw();\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {toRadians, PI, formatNumber, _parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class PolarAreaController extends DatasetController {\n\n  static id = 'polarArea';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    dataElementType: 'arc',\n    animation: {\n      animateRotate: true,\n      animateScale: true\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'startAngle', 'endAngle', 'innerRadius', 'outerRadius']\n      },\n    },\n    indexAxis: 'r',\n    startAngle: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    plugins: {\n      legend: {\n        labels: {\n          generateLabels(chart) {\n            const data = chart.data;\n            if (data.labels.length && data.datasets.length) {\n              const {labels: {pointStyle, color}} = chart.legend.options;\n\n              return data.labels.map((label, i) => {\n                const meta = chart.getDatasetMeta(0);\n                const style = meta.controller.getStyle(i);\n\n                return {\n                  text: label,\n                  fillStyle: style.backgroundColor,\n                  strokeStyle: style.borderColor,\n                  fontColor: color,\n                  lineWidth: style.borderWidth,\n                  pointStyle: pointStyle,\n                  hidden: !chart.getDataVisibility(i),\n\n                  // Extra data used for toggling the correct item\n                  index: i\n                };\n              });\n            }\n            return [];\n          }\n        },\n\n        onClick(e, legendItem, legend) {\n          legend.chart.toggleDataVisibility(legendItem.index);\n          legend.chart.update();\n        }\n      }\n    },\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n        angleLines: {\n          display: false\n        },\n        beginAtZero: true,\n        grid: {\n          circular: true\n        },\n        pointLabels: {\n          display: false\n        },\n        startAngle: 0\n      }\n    }\n  };\n\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n  }\n\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const chart = this.chart;\n    const labels = chart.data.labels || [];\n    const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n\n    return {\n      label: labels[index] || '',\n      value,\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const arcs = this._cachedMeta.data;\n\n    this._updateRadius();\n    this.updateElements(arcs, 0, arcs.length, mode);\n  }\n\n  /**\n   * @protected\n   */\n  getMinMax() {\n    const meta = this._cachedMeta;\n    const range = {min: Number.POSITIVE_INFINITY, max: Number.NEGATIVE_INFINITY};\n\n    meta.data.forEach((element, index) => {\n      const parsed = this.getParsed(index).r;\n\n      if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n        if (parsed < range.min) {\n          range.min = parsed;\n        }\n\n        if (parsed > range.max) {\n          range.max = parsed;\n        }\n      }\n    });\n\n    return range;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateRadius() {\n    const chart = this.chart;\n    const chartArea = chart.chartArea;\n    const opts = chart.options;\n    const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n\n    const outerRadius = Math.max(minSize / 2, 0);\n    const innerRadius = Math.max(opts.cutoutPercentage ? (outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);\n    const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n\n    this.outerRadius = outerRadius - (radiusLength * this.index);\n    this.innerRadius = this.outerRadius - radiusLength;\n  }\n\n  updateElements(arcs, start, count, mode) {\n    const reset = mode === 'reset';\n    const chart = this.chart;\n    const opts = chart.options;\n    const animationOpts = opts.animation;\n    const scale = this._cachedMeta.rScale;\n    const centerX = scale.xCenter;\n    const centerY = scale.yCenter;\n    const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n    let angle = datasetStartAngle;\n    let i;\n\n    const defaultAngle = 360 / this.countVisibleElements();\n\n    for (i = 0; i < start; ++i) {\n      angle += this._computeAngle(i, mode, defaultAngle);\n    }\n    for (i = start; i < start + count; i++) {\n      const arc = arcs[i];\n      let startAngle = angle;\n      let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n      let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n      angle = endAngle;\n\n      if (reset) {\n        if (animationOpts.animateScale) {\n          outerRadius = 0;\n        }\n        if (animationOpts.animateRotate) {\n          startAngle = endAngle = datasetStartAngle;\n        }\n      }\n\n      const properties = {\n        x: centerX,\n        y: centerY,\n        innerRadius: 0,\n        outerRadius,\n        startAngle,\n        endAngle,\n        options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n      };\n\n      this.updateElement(arc, i, properties, mode);\n    }\n  }\n\n  countVisibleElements() {\n    const meta = this._cachedMeta;\n    let count = 0;\n\n    meta.data.forEach((element, index) => {\n      if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n        count++;\n      }\n    });\n\n    return count;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeAngle(index, mode, defaultAngle) {\n    return this.chart.getDataVisibility(index)\n      ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle)\n      : 0;\n  }\n}\n","import DoughnutController from './controller.doughnut.js';\n\n// Pie charts are Doughnut chart with different defaults\nexport default class PieController extends DoughnutController {\n\n  static id = 'pie';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    // The percentage of the chart that we cut out of the middle.\n    cutout: 0,\n\n    // The rotation of the chart, where the first data arc begins.\n    rotation: 0,\n\n    // The total circumference of the chart.\n    circumference: 360,\n\n    // The outer radius of the chart\n    radius: '100%'\n  };\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {_parseObjectDataRadialScale} from '../helpers/index.js';\n\nexport default class RadarController extends DatasetController {\n\n  static id = 'radar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: 'line',\n    dataElementType: 'point',\n    indexAxis: 'r',\n    showLine: true,\n    elements: {\n      line: {\n        fill: 'start'\n      }\n    },\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n    aspectRatio: 1,\n\n    scales: {\n      r: {\n        type: 'radialLinear',\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const vScale = this._cachedMeta.vScale;\n    const parsed = this.getParsed(index);\n\n    return {\n      label: vScale.getLabels()[index],\n      value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n    };\n  }\n\n  parseObjectData(meta, data, start, count) {\n    return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const line = meta.dataset;\n    const points = meta.data || [];\n    const labels = meta.iScale.getLabels();\n\n    // Update Line\n    line.points = points;\n    // In resize mode only point locations change, so no need to set the points or options.\n    if (mode !== 'resize') {\n      const options = this.resolveDatasetElementOptions(mode);\n      if (!this.options.showLine) {\n        options.borderWidth = 0;\n      }\n\n      const properties = {\n        _loop: true,\n        _fullLoop: labels.length === points.length,\n        options\n      };\n\n      this.updateElement(line, undefined, properties, mode);\n    }\n\n    // Update Points\n    this.updateElements(points, 0, points.length, mode);\n  }\n\n  updateElements(points, start, count, mode) {\n    const scale = this._cachedMeta.rScale;\n    const reset = mode === 'reset';\n\n    for (let i = start; i < start + count; i++) {\n      const point = points[i];\n      const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n\n      const x = reset ? scale.xCenter : pointPosition.x;\n      const y = reset ? scale.yCenter : pointPosition.y;\n\n      const properties = {\n        x,\n        y,\n        angle: pointPosition.angle,\n        skip: isNaN(x) || isNaN(y),\n        options\n      };\n\n      this.updateElement(point, i, properties, mode);\n    }\n  }\n}\n","import DatasetController from '../core/core.datasetController.js';\nimport {isNullOrUndef} from '../helpers/index.js';\nimport {isNumber} from '../helpers/helpers.math.js';\nimport {_getStartAndCountOfVisiblePoints, _scaleRangesChanged} from '../helpers/helpers.extras.js';\n\nexport default class ScatterController extends DatasetController {\n\n  static id = 'scatter';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    datasetElementType: false,\n    dataElementType: 'point',\n    showLine: false,\n    fill: false\n  };\n\n  /**\n   * @type {any}\n   */\n  static overrides = {\n\n    interaction: {\n      mode: 'point'\n    },\n\n    scales: {\n      x: {\n        type: 'linear'\n      },\n      y: {\n        type: 'linear'\n      }\n    }\n  };\n\n  /**\n\t * @protected\n\t */\n  getLabelAndValue(index) {\n    const meta = this._cachedMeta;\n    const labels = this.chart.data.labels || [];\n    const {xScale, yScale} = meta;\n    const parsed = this.getParsed(index);\n    const x = xScale.getLabelForValue(parsed.x);\n    const y = yScale.getLabelForValue(parsed.y);\n\n    return {\n      label: labels[index] || '',\n      value: '(' + x + ', ' + y + ')'\n    };\n  }\n\n  update(mode) {\n    const meta = this._cachedMeta;\n    const {data: points = []} = meta;\n    // @ts-ignore\n    const animationsDisabled = this.chart._animationsDisabled;\n    let {start, count} = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n\n    this._drawStart = start;\n    this._drawCount = count;\n\n    if (_scaleRangesChanged(meta)) {\n      start = 0;\n      count = points.length;\n    }\n\n    if (this.options.showLine) {\n\n      // https://github.com/chartjs/Chart.js/issues/11333\n      if (!this.datasetElementType) {\n        this.addElements();\n      }\n      const {dataset: line, _dataset} = meta;\n\n      // Update Line\n      line._chart = this.chart;\n      line._datasetIndex = this.index;\n      line._decimated = !!_dataset._decimated;\n      line.points = points;\n\n      const options = this.resolveDatasetElementOptions(mode);\n      options.segment = this.options.segment;\n      this.updateElement(line, undefined, {\n        animated: !animationsDisabled,\n        options\n      }, mode);\n    } else if (this.datasetElementType) {\n      // https://github.com/chartjs/Chart.js/issues/11333\n      delete meta.dataset;\n      this.datasetElementType = false;\n    }\n\n    // Update Points\n    this.updateElements(points, start, count, mode);\n  }\n\n  addElements() {\n    const {showLine} = this.options;\n\n    if (!this.datasetElementType && showLine) {\n      this.datasetElementType = this.chart.registry.getElement('line');\n    }\n\n    super.addElements();\n  }\n\n  updateElements(points, start, count, mode) {\n    const reset = mode === 'reset';\n    const {iScale, vScale, _stacked, _dataset} = this._cachedMeta;\n    const firstOpts = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const {spanGaps, segment} = this.options;\n    const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n    const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n    let prevParsed = start > 0 && this.getParsed(start - 1);\n\n    for (let i = start; i < start + count; ++i) {\n      const point = points[i];\n      const parsed = this.getParsed(i);\n      const properties = directUpdate ? point : {};\n      const nullData = isNullOrUndef(parsed[vAxis]);\n      const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n      const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n\n      properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n      properties.stop = i > 0 && (Math.abs(parsed[iAxis] - prevParsed[iAxis])) > maxGapLength;\n      if (segment) {\n        properties.parsed = parsed;\n        properties.raw = _dataset.data[i];\n      }\n\n      if (includeOptions) {\n        properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n      }\n\n      if (!directUpdate) {\n        this.updateElement(point, i, properties, mode);\n      }\n\n      prevParsed = parsed;\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  /**\n\t * @protected\n\t */\n  getMaxOverflow() {\n    const meta = this._cachedMeta;\n    const data = meta.data || [];\n\n    if (!this.options.showLine) {\n      let max = 0;\n      for (let i = data.length - 1; i >= 0; --i) {\n        max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n      }\n      return max > 0 && max;\n    }\n\n    const dataset = meta.dataset;\n    const border = dataset.options && dataset.options.borderWidth || 0;\n\n    if (!data.length) {\n      return border;\n    }\n\n    const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n    const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n    return Math.max(border, firstPoint, lastPoint) / 2;\n  }\n}\n","/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */\n\nimport type {AnyObject} from '../types/basic.js';\nimport type {ChartOptions} from '../types/index.js';\n\nexport type TimeUnit = 'millisecond' | 'second' | 'minute' | 'hour' | 'day' | 'week' | 'month' | 'quarter' | 'year';\n\nexport interface DateAdapter<T extends AnyObject = AnyObject> {\n  readonly options: T;\n  /**\n   * Will called with chart options after adapter creation.\n   */\n  init(this: DateAdapter<T>, chartOptions: ChartOptions): void;\n  /**\n   * Returns a map of time formats for the supported formatting units defined\n   * in Unit as well as 'datetime' representing a detailed date/time string.\n   */\n  formats(this: DateAdapter<T>): Record<string, string>;\n  /**\n   * Parses the given `value` and return the associated timestamp.\n   * @param value - the value to parse (usually comes from the data)\n   * @param [format] - the expected data format\n   */\n  parse(this: DateAdapter<T>, value: unknown, format?: TimeUnit): number | null;\n  /**\n   * Returns the formatted date in the specified `format` for a given `timestamp`.\n   * @param timestamp - the timestamp to format\n   * @param format - the date/time token\n   */\n  format(this: DateAdapter<T>, timestamp: number, format: TimeUnit): string;\n  /**\n   * Adds the specified `amount` of `unit` to the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param amount - the amount to add\n   * @param unit - the unit as string\n   */\n  add(this: DateAdapter<T>, timestamp: number, amount: number, unit: TimeUnit): number;\n  /**\n   * Returns the number of `unit` between the given timestamps.\n   * @param a - the input timestamp (reference)\n   * @param b - the timestamp to subtract\n   * @param unit - the unit as string\n   */\n  diff(this: DateAdapter<T>, a: number, b: number, unit: TimeUnit): number;\n  /**\n   * Returns start of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   * @param [weekday] - the ISO day of the week with 1 being Monday\n   * and 7 being Sunday (only needed if param *unit* is `isoWeek`).\n   */\n  startOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek', weekday?: number): number;\n  /**\n   * Returns end of `unit` for the given `timestamp`.\n   * @param timestamp - the input timestamp\n   * @param unit - the unit as string\n   */\n  endOf(this: DateAdapter<T>, timestamp: number, unit: TimeUnit | 'isoWeek'): number;\n}\n\nfunction abstract<T = void>(): T {\n  throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */\nclass DateAdapterBase implements DateAdapter {\n\n  /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */\n  static override<T extends AnyObject = AnyObject>(\n    members: Partial<Omit<DateAdapter<T>, 'options'>>\n  ) {\n    Object.assign(DateAdapterBase.prototype, members);\n  }\n\n  readonly options: AnyObject;\n\n  constructor(options: AnyObject) {\n    this.options = options || {};\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\n  init() {}\n\n  formats(): Record<string, string> {\n    return abstract();\n  }\n\n  parse(): number | null {\n    return abstract();\n  }\n\n  format(): string {\n    return abstract();\n  }\n\n  add(): number {\n    return abstract();\n  }\n\n  diff(): number {\n    return abstract();\n  }\n\n  startOf(): number {\n    return abstract();\n  }\n\n  endOf(): number {\n    return abstract();\n  }\n}\n\nexport default {\n  _date: DateAdapterBase\n};\n","import {_lookupByKey, _rlookupByKey} from '../helpers/helpers.collection.js';\nimport {getRelativePosition} from '../helpers/helpers.dom.js';\nimport {_angleBetween, getAngleFromPoint} from '../helpers/helpers.math.js';\nimport {_isPointInArea} from '../helpers/index.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef {{axis?: string, intersect?: boolean, includeInvisible?: boolean}} InteractionOptions\n * @typedef {{datasetIndex: number, index: number, element: import('./core.element.js').default}} InteractionItem\n * @typedef { import('../types/index.js').Point } Point\n */\n\n/**\n * Helper function to do binary search when possible\n * @param {object} metaset - the dataset meta\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {number} value - the value to find\n * @param {boolean} [intersect] - should the element intersect\n * @returns {{lo:number, hi:number}} indices to search data array between\n */\nfunction binarySearch(metaset, axis, value, intersect) {\n  const {controller, data, _sorted} = metaset;\n  const iScale = controller._cachedMeta.iScale;\n  if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n    const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n    if (!intersect) {\n      return lookupMethod(data, axis, value);\n    } else if (controller._sharedOptions) {\n      // _sharedOptions indicates that each element has equal options -> equal proportions\n      // So we can do a ranged binary search based on the range of first element and\n      // be confident to get the full range of indices that can intersect with the value.\n      const el = data[0];\n      const range = typeof el.getRange === 'function' && el.getRange(axis);\n      if (range) {\n        const start = lookupMethod(data, axis, value - range);\n        const end = lookupMethod(data, axis, value + range);\n        return {lo: start.lo, hi: end.hi};\n      }\n    }\n  }\n  // Default to all elements, when binary search can not be used.\n  return {lo: 0, hi: data.length - 1};\n}\n\n/**\n * Helper function to select candidate elements for interaction\n * @param {Chart} chart - the chart\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {function} handler - the callback to execute for each visible item\n * @param {boolean} [intersect] - consider intersecting items\n */\nfunction evaluateInteractionItems(chart, axis, position, handler, intersect) {\n  const metasets = chart.getSortedVisibleDatasetMetas();\n  const value = position[axis];\n  for (let i = 0, ilen = metasets.length; i < ilen; ++i) {\n    const {index, data} = metasets[i];\n    const {lo, hi} = binarySearch(metasets[i], axis, value, intersect);\n    for (let j = lo; j <= hi; ++j) {\n      const element = data[j];\n      if (!element.skip) {\n        handler(element, index, j);\n      }\n    }\n  }\n}\n\n/**\n * Get a distance metric function for two points based on the\n * axis mode setting\n * @param {string} axis - the axis mode. x|y|xy|r\n */\nfunction getDistanceMetricForAxis(axis) {\n  const useX = axis.indexOf('x') !== -1;\n  const useY = axis.indexOf('y') !== -1;\n\n  return function(pt1, pt2) {\n    const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n    const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n    return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n  };\n}\n\n/**\n * Helper function to get the items that intersect the event position\n * @param {Chart} chart - the chart\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis mode. x|y|xy|r\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n  const items = [];\n\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return items;\n  }\n\n  const evaluationFunc = function(element, datasetIndex, index) {\n    if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n      return;\n    }\n    if (element.inRange(position.x, position.y, useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n    }\n  };\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a radial chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestRadialItems(chart, position, axis, useFinalPosition) {\n  let items = [];\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const {startAngle, endAngle} = element.getProps(['startAngle', 'endAngle'], useFinalPosition);\n    const {angle} = getAngleFromPoint(element, {x: position.x, y: position.y});\n\n    if (_angleBetween(angle, startAngle, endAngle)) {\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position for a cartesian chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  let items = [];\n  const distanceMetric = getDistanceMetricForAxis(axis);\n  let minDistance = Number.POSITIVE_INFINITY;\n\n  function evaluationFunc(element, datasetIndex, index) {\n    const inRange = element.inRange(position.x, position.y, useFinalPosition);\n    if (intersect && !inRange) {\n      return;\n    }\n\n    const center = element.getCenterPoint(useFinalPosition);\n    const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n    if (!pointInArea && !inRange) {\n      return;\n    }\n\n    const distance = distanceMetric(position, center);\n    if (distance < minDistance) {\n      items = [{element, datasetIndex, index}];\n      minDistance = distance;\n    } else if (distance === minDistance) {\n      // Can have multiple items at the same distance in which case we sort by size\n      items.push({element, datasetIndex, index});\n    }\n  }\n\n  evaluateInteractionItems(chart, axis, position, evaluationFunc);\n  return items;\n}\n\n/**\n * Helper function to get the items nearest to the event position considering all visible items in the chart\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axes along which to measure distance\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @param {boolean} [includeInvisible] - include invisible points that are outside of the chart area\n * @return {InteractionItem[]} the nearest items\n */\nfunction getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n  if (!includeInvisible && !chart.isPointInArea(position)) {\n    return [];\n  }\n\n  return axis === 'r' && !intersect\n    ? getNearestRadialItems(chart, position, axis, useFinalPosition)\n    : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n\n/**\n * Helper function to get the items matching along the given X or Y axis\n * @param {Chart} chart - the chart to look at elements from\n * @param {Point} position - the point to be nearest to, in relative coordinates\n * @param {string} axis - the axis to match\n * @param {boolean} [intersect] - if true, only consider items that intersect the position\n * @param {boolean} [useFinalPosition] - use the element's animation target instead of current position\n * @return {InteractionItem[]} the nearest items\n */\nfunction getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n  const items = [];\n  const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n  let intersectsItem = false;\n\n  evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index) => {\n    if (element[rangeMethod](position[axis], useFinalPosition)) {\n      items.push({element, datasetIndex, index});\n      intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n    }\n  });\n\n  // If we want to trigger on an intersect and we don't have any items\n  // that intersect the position, return nothing\n  if (intersect && !intersectsItem) {\n    return [];\n  }\n  return items;\n}\n\n/**\n * Contains interaction related functions\n * @namespace Chart.Interaction\n */\nexport default {\n  // Part of the public API to facilitate developers creating their own modes\n  evaluateInteractionItems,\n\n  // Helper function for different modes\n  modes: {\n    /**\n\t\t * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item\n\t\t * @function Chart.Interaction.modes.index\n\t\t * @since v2.4.0\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    index(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      // Default axis for index mode is 'x' to match old behaviour\n      const axis = options.axis || 'x';\n      const includeInvisible = options.includeInvisible || false;\n      const items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible)\n        : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n      const elements = [];\n\n      if (!items.length) {\n        return [];\n      }\n\n      chart.getSortedVisibleDatasetMetas().forEach((meta) => {\n        const index = items[0].index;\n        const element = meta.data[index];\n\n        // don't count items that are skipped (null data)\n        if (element && !element.skip) {\n          elements.push({element, datasetIndex: meta.index, index});\n        }\n      });\n\n      return elements;\n    },\n\n    /**\n\t\t * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something\n\t\t * If the options.intersect is false, we find the nearest item and return the items in that dataset\n\t\t * @function Chart.Interaction.modes.dataset\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    dataset(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      let items = options.intersect\n        ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) :\n        getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n\n      if (items.length > 0) {\n        const datasetIndex = items[0].datasetIndex;\n        const data = chart.getDatasetMeta(datasetIndex).data;\n        items = [];\n        for (let i = 0; i < data.length; ++i) {\n          items.push({element: data[i], datasetIndex, index: i});\n        }\n      }\n\n      return items;\n    },\n\n    /**\n\t\t * Point mode returns all elements that hit test based on the event position\n\t\t * of the event\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    point(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * nearest mode returns the element closest to the point\n\t\t * @function Chart.Interaction.modes.intersect\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    nearest(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      const axis = options.axis || 'xy';\n      const includeInvisible = options.includeInvisible || false;\n      return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n    },\n\n    /**\n\t\t * x mode returns the elements that hit-test at the current x coordinate\n\t\t * @function Chart.Interaction.modes.x\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    x(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n    },\n\n    /**\n\t\t * y mode returns the elements that hit-test at the current y coordinate\n\t\t * @function Chart.Interaction.modes.y\n\t\t * @param {Chart} chart - the chart we are returning items from\n\t\t * @param {Event} e - the event we are find things at\n\t\t * @param {InteractionOptions} options - options to use\n\t\t * @param {boolean} [useFinalPosition] - use final element position (animation target)\n\t\t * @return {InteractionItem[]} - items that are found\n\t\t */\n    y(chart, e, options, useFinalPosition) {\n      const position = getRelativePosition(e, chart);\n      return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n    }\n  }\n};\n","import {defined, each, isObject} from '../helpers/helpers.core.js';\nimport {toPadding} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n */\n\nconst STATIC_POSITIONS = ['left', 'top', 'right', 'bottom'];\n\nfunction filterByPosition(array, position) {\n  return array.filter(v => v.pos === position);\n}\n\nfunction filterDynamicPositionByAxis(array, axis) {\n  return array.filter(v => STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\n\nfunction sortByWeight(array, reverse) {\n  return array.sort((a, b) => {\n    const v0 = reverse ? b : a;\n    const v1 = reverse ? a : b;\n    return v0.weight === v1.weight ?\n      v0.index - v1.index :\n      v0.weight - v1.weight;\n  });\n}\n\nfunction wrapBoxes(boxes) {\n  const layoutBoxes = [];\n  let i, ilen, box, pos, stack, stackWeight;\n\n  for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {\n    box = boxes[i];\n    ({position: pos, options: {stack, stackWeight = 1}} = box);\n    layoutBoxes.push({\n      index: i,\n      box,\n      pos,\n      horizontal: box.isHorizontal(),\n      weight: box.weight,\n      stack: stack && (pos + stack),\n      stackWeight\n    });\n  }\n  return layoutBoxes;\n}\n\nfunction buildStacks(layouts) {\n  const stacks = {};\n  for (const wrap of layouts) {\n    const {stack, pos, stackWeight} = wrap;\n    if (!stack || !STATIC_POSITIONS.includes(pos)) {\n      continue;\n    }\n    const _stack = stacks[stack] || (stacks[stack] = {count: 0, placed: 0, weight: 0, size: 0});\n    _stack.count++;\n    _stack.weight += stackWeight;\n  }\n  return stacks;\n}\n\n/**\n * store dimensions used instead of available chartArea in fitBoxes\n **/\nfunction setLayoutDims(layouts, params) {\n  const stacks = buildStacks(layouts);\n  const {vBoxMaxWidth, hBoxMaxHeight} = params;\n  let i, ilen, layout;\n  for (i = 0, ilen = layouts.length; i < ilen; ++i) {\n    layout = layouts[i];\n    const {fullSize} = layout.box;\n    const stack = stacks[layout.stack];\n    const factor = stack && layout.stackWeight / stack.weight;\n    if (layout.horizontal) {\n      layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n      layout.height = hBoxMaxHeight;\n    } else {\n      layout.width = vBoxMaxWidth;\n      layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n    }\n  }\n  return stacks;\n}\n\nfunction buildLayoutBoxes(boxes) {\n  const layoutBoxes = wrapBoxes(boxes);\n  const fullSize = sortByWeight(layoutBoxes.filter(wrap => wrap.box.fullSize), true);\n  const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n  const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n  const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n  const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n  const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n  const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n\n  return {\n    fullSize,\n    leftAndTop: left.concat(top),\n    rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n    chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n    vertical: left.concat(right).concat(centerVertical),\n    horizontal: top.concat(bottom).concat(centerHorizontal)\n  };\n}\n\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n  return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\n\nfunction updateMaxPadding(maxPadding, boxPadding) {\n  maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n  maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n  maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n  maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\n\nfunction updateDims(chartArea, params, layout, stacks) {\n  const {pos, box} = layout;\n  const maxPadding = chartArea.maxPadding;\n\n  // dynamically placed boxes size is not considered\n  if (!isObject(pos)) {\n    if (layout.size) {\n      // this layout was already counted for, lets first reduce old size\n      chartArea[pos] -= layout.size;\n    }\n    const stack = stacks[layout.stack] || {size: 0, count: 1};\n    stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n    layout.size = stack.size / stack.count;\n    chartArea[pos] += layout.size;\n  }\n\n  if (box.getPadding) {\n    updateMaxPadding(maxPadding, box.getPadding());\n  }\n\n  const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n  const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n  const widthChanged = newWidth !== chartArea.w;\n  const heightChanged = newHeight !== chartArea.h;\n  chartArea.w = newWidth;\n  chartArea.h = newHeight;\n\n  // return booleans on the changes per direction\n  return layout.horizontal\n    ? {same: widthChanged, other: heightChanged}\n    : {same: heightChanged, other: widthChanged};\n}\n\nfunction handleMaxPadding(chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function updatePos(pos) {\n    const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n    chartArea[pos] += change;\n    return change;\n  }\n  chartArea.y += updatePos('top');\n  chartArea.x += updatePos('left');\n  updatePos('right');\n  updatePos('bottom');\n}\n\nfunction getMargins(horizontal, chartArea) {\n  const maxPadding = chartArea.maxPadding;\n\n  function marginForPositions(positions) {\n    const margin = {left: 0, top: 0, right: 0, bottom: 0};\n    positions.forEach((pos) => {\n      margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n    });\n    return margin;\n  }\n\n  return horizontal\n    ? marginForPositions(['left', 'right'])\n    : marginForPositions(['top', 'bottom']);\n}\n\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n  const refitBoxes = [];\n  let i, ilen, layout, box, refit, changed;\n\n  for (i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i) {\n    layout = boxes[i];\n    box = layout.box;\n\n    box.update(\n      layout.width || chartArea.w,\n      layout.height || chartArea.h,\n      getMargins(layout.horizontal, chartArea)\n    );\n    const {same, other} = updateDims(chartArea, params, layout, stacks);\n\n    // Dimensions changed and there were non full width boxes before this\n    // -> we have to refit those\n    refit |= same && refitBoxes.length;\n\n    // Chart area changed in the opposite direction\n    changed = changed || other;\n\n    if (!box.fullSize) { // fullSize boxes don't need to be re-fitted in any case\n      refitBoxes.push(layout);\n    }\n  }\n\n  return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\n\nfunction setBoxDims(box, left, top, width, height) {\n  box.top = top;\n  box.left = left;\n  box.right = left + width;\n  box.bottom = top + height;\n  box.width = width;\n  box.height = height;\n}\n\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n  const userPadding = params.padding;\n  let {x, y} = chartArea;\n\n  for (const layout of boxes) {\n    const box = layout.box;\n    const stack = stacks[layout.stack] || {count: 1, placed: 0, weight: 1};\n    const weight = (layout.stackWeight / stack.weight) || 1;\n    if (layout.horizontal) {\n      const width = chartArea.w * weight;\n      const height = stack.size || box.height;\n      if (defined(stack.start)) {\n        y = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n      } else {\n        setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n      }\n      stack.start = y;\n      stack.placed += width;\n      y = box.bottom;\n    } else {\n      const height = chartArea.h * weight;\n      const width = stack.size || box.width;\n      if (defined(stack.start)) {\n        x = stack.start;\n      }\n      if (box.fullSize) {\n        setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n      } else {\n        setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n      }\n      stack.start = x;\n      stack.placed += height;\n      x = box.right;\n    }\n  }\n\n  chartArea.x = x;\n  chartArea.y = y;\n}\n\n/**\n * @interface LayoutItem\n * @typedef {object} LayoutItem\n * @prop {string} position - The position of the item in the chart layout. Possible values are\n * 'left', 'top', 'right', 'bottom', and 'chartArea'\n * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area\n * @prop {boolean} fullSize - if true, and the item is horizontal, then push vertical boxes down\n * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)\n * @prop {function} update - Takes two parameters: width and height. Returns size of item\n * @prop {function} draw - Draws the element\n * @prop {function} [getPadding] -  Returns an object with padding on the edges\n * @prop {number} width - Width of item. Must be valid after update()\n * @prop {number} height - Height of item. Must be valid after update()\n * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update\n * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update\n * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update\n * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update\n */\n\n// The layout service is very self explanatory.  It's responsible for the layout within a chart.\n// Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need\n// It is this service's responsibility of carrying out that layout.\nexport default {\n\n  /**\n\t * Register a box to a chart.\n\t * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.\n\t * @param {Chart} chart - the chart to use\n\t * @param {LayoutItem} item - the item to add to be laid out\n\t */\n  addBox(chart, item) {\n    if (!chart.boxes) {\n      chart.boxes = [];\n    }\n\n    // initialize item with default values\n    item.fullSize = item.fullSize || false;\n    item.position = item.position || 'top';\n    item.weight = item.weight || 0;\n    // @ts-ignore\n    item._layers = item._layers || function() {\n      return [{\n        z: 0,\n        draw(chartArea) {\n          item.draw(chartArea);\n        }\n      }];\n    };\n\n    chart.boxes.push(item);\n  },\n\n  /**\n\t * Remove a layoutItem from a chart\n\t * @param {Chart} chart - the chart to remove the box from\n\t * @param {LayoutItem} layoutItem - the item to remove from the layout\n\t */\n  removeBox(chart, layoutItem) {\n    const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n    if (index !== -1) {\n      chart.boxes.splice(index, 1);\n    }\n  },\n\n  /**\n\t * Sets (or updates) options on the given `item`.\n\t * @param {Chart} chart - the chart in which the item lives (or will be added to)\n\t * @param {LayoutItem} item - the item to configure with the given options\n\t * @param {object} options - the new item options.\n\t */\n  configure(chart, item, options) {\n    item.fullSize = options.fullSize;\n    item.position = options.position;\n    item.weight = options.weight;\n  },\n\n  /**\n\t * Fits boxes of the given chart into the given size by having each box measure itself\n\t * then running a fitting algorithm\n\t * @param {Chart} chart - the chart\n\t * @param {number} width - the width to fit into\n\t * @param {number} height - the height to fit into\n   * @param {number} minPadding - minimum padding required for each side of chart area\n\t */\n  update(chart, width, height, minPadding) {\n    if (!chart) {\n      return;\n    }\n\n    const padding = toPadding(chart.options.layout.padding);\n    const availableWidth = Math.max(width - padding.width, 0);\n    const availableHeight = Math.max(height - padding.height, 0);\n    const boxes = buildLayoutBoxes(chart.boxes);\n    const verticalBoxes = boxes.vertical;\n    const horizontalBoxes = boxes.horizontal;\n\n    // Before any changes are made, notify boxes that an update is about to being\n    // This is used to clear any cached data (e.g. scale limits)\n    each(chart.boxes, box => {\n      if (typeof box.beforeLayout === 'function') {\n        box.beforeLayout();\n      }\n    });\n\n    // Essentially we now have any number of boxes on each of the 4 sides.\n    // Our canvas looks like the following.\n    // The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and\n    // B1 is the bottom axis\n    // There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays\n    // These locations are single-box locations only, when trying to register a chartArea location that is already taken,\n    // an error will be thrown.\n    //\n    // |----------------------------------------------------|\n    // |                  T1 (Full Width)                   |\n    // |----------------------------------------------------|\n    // |    |    |                 T2                  |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    | C1 |                           | C2 |    |\n    // |    |    |----|                           |----|    |\n    // |    |    |                                     |    |\n    // | L1 | L2 |           ChartArea (C0)            | R1 |\n    // |    |    |                                     |    |\n    // |    |    |----|                           |----|    |\n    // |    |    | C3 |                           | C4 |    |\n    // |    |----|-------------------------------------|----|\n    // |    |    |                 B1                  |    |\n    // |----------------------------------------------------|\n    // |                  B2 (Full Width)                   |\n    // |----------------------------------------------------|\n    //\n\n    const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap) =>\n      wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n\n    const params = Object.freeze({\n      outerWidth: width,\n      outerHeight: height,\n      padding,\n      availableWidth,\n      availableHeight,\n      vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n      hBoxMaxHeight: availableHeight / 2\n    });\n    const maxPadding = Object.assign({}, padding);\n    updateMaxPadding(maxPadding, toPadding(minPadding));\n    const chartArea = Object.assign({\n      maxPadding,\n      w: availableWidth,\n      h: availableHeight,\n      x: padding.left,\n      y: padding.top\n    }, padding);\n\n    const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n\n    // First fit the fullSize boxes, to reduce probability of re-fitting.\n    fitBoxes(boxes.fullSize, chartArea, params, stacks);\n\n    // Then fit vertical boxes\n    fitBoxes(verticalBoxes, chartArea, params, stacks);\n\n    // Then fit horizontal boxes\n    if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n      // if the area changed, re-fit vertical boxes\n      fitBoxes(verticalBoxes, chartArea, params, stacks);\n    }\n\n    handleMaxPadding(chartArea);\n\n    // Finally place the boxes to correct coordinates\n    placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n\n    // Move to opposite side of chart\n    chartArea.x += chartArea.w;\n    chartArea.y += chartArea.h;\n\n    placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n\n    chart.chartArea = {\n      left: chartArea.left,\n      top: chartArea.top,\n      right: chartArea.left + chartArea.w,\n      bottom: chartArea.top + chartArea.h,\n      height: chartArea.h,\n      width: chartArea.w,\n    };\n\n    // Finally update boxes in chartArea (radial scale for example)\n    each(boxes.chartArea, (layout) => {\n      const box = layout.box;\n      Object.assign(box, chart.chartArea);\n      box.update(chartArea.w, chartArea.h, {left: 0, top: 0, right: 0, bottom: 0});\n    });\n  }\n};\n","\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\n/**\n * Abstract class that allows abstracting platform dependencies away from the chart.\n */\nexport default class BasePlatform {\n  /**\n\t * Called at chart construction time, returns a context2d instance implementing\n\t * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.\n\t * @param {HTMLCanvasElement} canvas - The canvas from which to acquire context (platform specific)\n\t * @param {number} [aspectRatio] - The chart options\n\t */\n  acquireContext(canvas, aspectRatio) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Called at chart destruction time, releases any resources associated to the context\n\t * previously returned by the acquireContext() method.\n\t * @param {CanvasRenderingContext2D} context - The context2d instance\n\t * @returns {boolean} true if the method succeeded, else false\n\t */\n  releaseContext(context) { // eslint-disable-line no-unused-vars\n    return false;\n  }\n\n  /**\n\t * Registers the specified listener on the given chart.\n\t * @param {Chart} chart - Chart from which to listen for event\n\t * @param {string} type - The ({@link ChartEvent}) type to listen for\n\t * @param {function} listener - Receives a notification (an object that implements\n\t * the {@link ChartEvent} interface) when an event of the specified type occurs.\n\t */\n  addEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Removes the specified listener previously registered with addEventListener.\n\t * @param {Chart} chart - Chart from which to remove the listener\n\t * @param {string} type - The ({@link ChartEvent}) type to remove\n\t * @param {function} listener - The listener function to remove from the event target.\n\t */\n  removeEventListener(chart, type, listener) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * @returns {number} the current devicePixelRatio of the device this platform is connected to.\n\t */\n  getDevicePixelRatio() {\n    return 1;\n  }\n\n  /**\n\t * Returns the maximum size in pixels of given canvas element.\n\t * @param {HTMLCanvasElement} element\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(element, width, height, aspectRatio) {\n    width = Math.max(0, width || element.width);\n    height = height || element.height;\n    return {\n      width,\n      height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n    };\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @returns {boolean} true if the canvas is attached to the platform, false if not.\n\t */\n  isAttached(canvas) { // eslint-disable-line no-unused-vars\n    return true;\n  }\n\n  /**\n   * Updates config with platform specific requirements\n   * @param {import('../core/core.config.js').default} config\n   */\n  updateConfig(config) { // eslint-disable-line no-unused-vars\n    // no-op\n  }\n}\n","/**\n * Platform fallback implementation (minimal).\n * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939\n */\n\nimport BasePlatform from './platform.base.js';\n\n/**\n * Platform class for charts without access to the DOM or to many element properties\n * This platform is used by default for any chart passed an OffscreenCanvas.\n * @extends BasePlatform\n */\nexport default class BasicPlatform extends BasePlatform {\n  acquireContext(item) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    return item && item.getContext && item.getContext('2d') || null;\n  }\n  updateConfig(config) {\n    config.options.animation = false;\n  }\n}\n","/**\n * Chart.Platform implementation for targeting a web browser\n */\n\nimport BasePlatform from './platform.base.js';\nimport {_getParentNode, getRelativePosition, supportsEventListenerOptions, readUsedSize, getMaximumSize} from '../helpers/helpers.dom.js';\nimport {throttled} from '../helpers/helpers.extras.js';\nimport {isNullOrUndef} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../core/core.controller.js').default } Chart\n */\n\nconst EXPANDO_KEY = '$chartjs';\n\n/**\n * DOM event types -> Chart.js event types.\n * Note: only events with different types are mapped.\n * @see https://developer.mozilla.org/en-US/docs/Web/Events\n */\nconst EVENT_TYPES = {\n  touchstart: 'mousedown',\n  touchmove: 'mousemove',\n  touchend: 'mouseup',\n  pointerenter: 'mouseenter',\n  pointerdown: 'mousedown',\n  pointermove: 'mousemove',\n  pointerup: 'mouseup',\n  pointerleave: 'mouseout',\n  pointerout: 'mouseout'\n};\n\nconst isNullOrEmpty = value => value === null || value === '';\n/**\n * Initializes the canvas style and render size without modifying the canvas display size,\n * since responsiveness is handled by the controller.resize() method. The config is used\n * to determine the aspect ratio to apply in case no explicit height has been specified.\n * @param {HTMLCanvasElement} canvas\n * @param {number} [aspectRatio]\n */\nfunction initCanvas(canvas, aspectRatio) {\n  const style = canvas.style;\n\n  // NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it\n  // returns null or '' if no explicit value has been set to the canvas attribute.\n  const renderHeight = canvas.getAttribute('height');\n  const renderWidth = canvas.getAttribute('width');\n\n  // Chart.js modifies some canvas values that we want to restore on destroy\n  canvas[EXPANDO_KEY] = {\n    initial: {\n      height: renderHeight,\n      width: renderWidth,\n      style: {\n        display: style.display,\n        height: style.height,\n        width: style.width\n      }\n    }\n  };\n\n  // Force canvas to display as block to avoid extra space caused by inline\n  // elements, which would interfere with the responsive resize process.\n  // https://github.com/chartjs/Chart.js/issues/2538\n  style.display = style.display || 'block';\n  // Include possible borders in the size\n  style.boxSizing = style.boxSizing || 'border-box';\n\n  if (isNullOrEmpty(renderWidth)) {\n    const displayWidth = readUsedSize(canvas, 'width');\n    if (displayWidth !== undefined) {\n      canvas.width = displayWidth;\n    }\n  }\n\n  if (isNullOrEmpty(renderHeight)) {\n    if (canvas.style.height === '') {\n      // If no explicit render height and style height, let's apply the aspect ratio,\n      // which one can be specified by the user but also by charts as default option\n      // (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.\n      canvas.height = canvas.width / (aspectRatio || 2);\n    } else {\n      const displayHeight = readUsedSize(canvas, 'height');\n      if (displayHeight !== undefined) {\n        canvas.height = displayHeight;\n      }\n    }\n  }\n\n  return canvas;\n}\n\n// Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.\n// https://github.com/chartjs/Chart.js/issues/4287\nconst eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;\n\nfunction addListener(node, type, listener) {\n  node.addEventListener(type, listener, eventListenerOptions);\n}\n\nfunction removeListener(chart, type, listener) {\n  chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n}\n\nfunction fromNativeEvent(event, chart) {\n  const type = EVENT_TYPES[event.type] || event.type;\n  const {x, y} = getRelativePosition(event, chart);\n  return {\n    type,\n    chart,\n    native: event,\n    x: x !== undefined ? x : null,\n    y: y !== undefined ? y : null,\n  };\n}\n\nfunction nodeListContains(nodeList, canvas) {\n  for (const node of nodeList) {\n    if (node === canvas || node.contains(canvas)) {\n      return true;\n    }\n  }\n}\n\nfunction createAttachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nfunction createDetachObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const observer = new MutationObserver(entries => {\n    let trigger = false;\n    for (const entry of entries) {\n      trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n      trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n    }\n    if (trigger) {\n      listener();\n    }\n  });\n  observer.observe(document, {childList: true, subtree: true});\n  return observer;\n}\n\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\n\nfunction onWindowResize() {\n  const dpr = window.devicePixelRatio;\n  if (dpr === oldDevicePixelRatio) {\n    return;\n  }\n  oldDevicePixelRatio = dpr;\n  drpListeningCharts.forEach((resize, chart) => {\n    if (chart.currentDevicePixelRatio !== dpr) {\n      resize();\n    }\n  });\n}\n\nfunction listenDevicePixelRatioChanges(chart, resize) {\n  if (!drpListeningCharts.size) {\n    window.addEventListener('resize', onWindowResize);\n  }\n  drpListeningCharts.set(chart, resize);\n}\n\nfunction unlistenDevicePixelRatioChanges(chart) {\n  drpListeningCharts.delete(chart);\n  if (!drpListeningCharts.size) {\n    window.removeEventListener('resize', onWindowResize);\n  }\n}\n\nfunction createResizeObserver(chart, type, listener) {\n  const canvas = chart.canvas;\n  const container = canvas && _getParentNode(canvas);\n  if (!container) {\n    return;\n  }\n  const resize = throttled((width, height) => {\n    const w = container.clientWidth;\n    listener(width, height);\n    if (w < container.clientWidth) {\n      // If the container size shrank during chart resize, let's assume\n      // scrollbar appeared. So we resize again with the scrollbar visible -\n      // effectively making chart smaller and the scrollbar hidden again.\n      // Because we are inside `throttled`, and currently `ticking`, scroll\n      // events are ignored during this whole 2 resize process.\n      // If we assumed wrong and something else happened, we are resizing\n      // twice in a frame (potential performance issue)\n      listener();\n    }\n  }, window);\n\n  // @ts-ignore until https://github.com/microsoft/TypeScript/issues/37861 implemented\n  const observer = new ResizeObserver(entries => {\n    const entry = entries[0];\n    const width = entry.contentRect.width;\n    const height = entry.contentRect.height;\n    // When its container's display is set to 'none' the callback will be called with a\n    // size of (0, 0), which will cause the chart to lose its original height, so skip\n    // resizing in such case.\n    if (width === 0 && height === 0) {\n      return;\n    }\n    resize(width, height);\n  });\n  observer.observe(container);\n  listenDevicePixelRatioChanges(chart, resize);\n\n  return observer;\n}\n\nfunction releaseObserver(chart, type, observer) {\n  if (observer) {\n    observer.disconnect();\n  }\n  if (type === 'resize') {\n    unlistenDevicePixelRatioChanges(chart);\n  }\n}\n\nfunction createProxyAndListen(chart, type, listener) {\n  const canvas = chart.canvas;\n  const proxy = throttled((event) => {\n    // This case can occur if the chart is destroyed while waiting\n    // for the throttled function to occur. We prevent crashes by checking\n    // for a destroyed chart\n    if (chart.ctx !== null) {\n      listener(fromNativeEvent(event, chart));\n    }\n  }, chart);\n\n  addListener(canvas, type, proxy);\n\n  return proxy;\n}\n\n/**\n * Platform class for charts that can access the DOM and global window/document properties\n * @extends BasePlatform\n */\nexport default class DomPlatform extends BasePlatform {\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [aspectRatio]\n\t * @return {CanvasRenderingContext2D|null}\n\t */\n  acquireContext(canvas, aspectRatio) {\n    // To prevent canvas fingerprinting, some add-ons undefine the getContext\n    // method, for example: https://github.com/kkapsner/CanvasBlocker\n    // https://github.com/chartjs/Chart.js/issues/2807\n    const context = canvas && canvas.getContext && canvas.getContext('2d');\n\n    // `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the canvas is\n    // inside an iframe or when running in a protected environment. We could guess the\n    // types from their toString() value but let's keep things flexible and assume it's\n    // a sufficient condition if the canvas has a context2D which has canvas as `canvas`.\n    // https://github.com/chartjs/Chart.js/issues/3887\n    // https://github.com/chartjs/Chart.js/issues/4102\n    // https://github.com/chartjs/Chart.js/issues/4152\n    if (context && context.canvas === canvas) {\n      // Load platform resources on first chart creation, to make it possible to\n      // import the library before setting platform options.\n      initCanvas(canvas, aspectRatio);\n      return context;\n    }\n\n    return null;\n  }\n\n  /**\n\t * @param {CanvasRenderingContext2D} context\n\t */\n  releaseContext(context) {\n    const canvas = context.canvas;\n    if (!canvas[EXPANDO_KEY]) {\n      return false;\n    }\n\n    const initial = canvas[EXPANDO_KEY].initial;\n    ['height', 'width'].forEach((prop) => {\n      const value = initial[prop];\n      if (isNullOrUndef(value)) {\n        canvas.removeAttribute(prop);\n      } else {\n        canvas.setAttribute(prop, value);\n      }\n    });\n\n    const style = initial.style || {};\n    Object.keys(style).forEach((key) => {\n      canvas.style[key] = style[key];\n    });\n\n    // The canvas render size might have been changed (and thus the state stack discarded),\n    // we can't use save() and restore() to restore the initial state. So make sure that at\n    // least the canvas context is reset to the default state by setting the canvas width.\n    // https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html\n    // eslint-disable-next-line no-self-assign\n    canvas.width = canvas.width;\n\n    delete canvas[EXPANDO_KEY];\n    return true;\n  }\n\n  /**\n\t *\n\t * @param {Chart} chart\n\t * @param {string} type\n\t * @param {function} listener\n\t */\n  addEventListener(chart, type, listener) {\n    // Can have only one listener per type, so make sure previous is removed\n    this.removeEventListener(chart, type);\n\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const handlers = {\n      attach: createAttachObserver,\n      detach: createDetachObserver,\n      resize: createResizeObserver\n    };\n    const handler = handlers[type] || createProxyAndListen;\n    proxies[type] = handler(chart, type, listener);\n  }\n\n\n  /**\n\t * @param {Chart} chart\n\t * @param {string} type\n\t */\n  removeEventListener(chart, type) {\n    const proxies = chart.$proxies || (chart.$proxies = {});\n    const proxy = proxies[type];\n\n    if (!proxy) {\n      return;\n    }\n\n    const handlers = {\n      attach: releaseObserver,\n      detach: releaseObserver,\n      resize: releaseObserver\n    };\n    const handler = handlers[type] || removeListener;\n    handler(chart, type, proxy);\n    proxies[type] = undefined;\n  }\n\n  getDevicePixelRatio() {\n    return window.devicePixelRatio;\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t * @param {number} [width] - content width of parent element\n\t * @param {number} [height] - content height of parent element\n\t * @param {number} [aspectRatio] - aspect ratio to maintain\n\t */\n  getMaximumSize(canvas, width, height, aspectRatio) {\n    return getMaximumSize(canvas, width, height, aspectRatio);\n  }\n\n  /**\n\t * @param {HTMLCanvasElement} canvas\n\t */\n  isAttached(canvas) {\n    const container = _getParentNode(canvas);\n    return !!(container && container.isConnected);\n  }\n}\n","import {_isDomSupported} from '../helpers/index.js';\nimport BasePlatform from './platform.base.js';\nimport BasicPlatform from './platform.basic.js';\nimport DomPlatform from './platform.dom.js';\n\nexport function _detectPlatform(canvas) {\n  if (!_isDomSupported() || (typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas)) {\n    return BasicPlatform;\n  }\n  return DomPlatform;\n}\n\nexport {BasePlatform, BasicPlatform, DomPlatform};\n","import type {AnyObject} from '../types/basic.js';\nimport type {Point} from '../types/geometric.js';\nimport type {Animation} from '../types/animation.js';\nimport {isNumber} from '../helpers/helpers.math.js';\n\nexport default class Element<T = AnyObject, O = AnyObject> {\n\n  static defaults = {};\n  static defaultRoutes = undefined;\n\n  x: number;\n  y: number;\n  active = false;\n  options: O;\n  $animations: Record<keyof T, Animation>;\n\n  tooltipPosition(useFinalPosition: boolean): Point {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y} as Point;\n  }\n\n  hasValue() {\n    return isNumber(this.x) && isNumber(this.y);\n  }\n\n  /**\n   * Gets the current or final value of each prop. Can return extra properties (whole object).\n   * @param props - properties to get\n   * @param [final] - get the final value (animation target)\n   */\n  getProps<P extends (keyof T)[]>(props: P, final?: boolean): Pick<T, P[number]>;\n  getProps<P extends string>(props: P[], final?: boolean): Partial<Record<P, unknown>>;\n  getProps(props: string[], final?: boolean): Partial<Record<string, unknown>> {\n    const anims = this.$animations;\n    if (!final || !anims) {\n      // let's not create an object, if not needed\n      return this as Record<string, unknown>;\n    }\n    const ret: Record<string, unknown> = {};\n    props.forEach((prop) => {\n      ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop as string];\n    });\n    return ret;\n  }\n}\n","import {isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\nimport {_factorize} from '../helpers/helpers.math.js';\n\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a subset of ticks to be plotted to avoid overlapping labels.\n * @param {import('./core.scale.js').default} scale\n * @param {Tick[]} ticks\n * @return {Tick[]}\n * @private\n */\nexport function autoSkip(scale, ticks) {\n  const tickOpts = scale.options.ticks;\n  const determinedMaxTicks = determineMaxTicks(scale);\n  const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n  const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n  const numMajorIndices = majorIndices.length;\n  const first = majorIndices[0];\n  const last = majorIndices[numMajorIndices - 1];\n  const newTicks = [];\n\n  // If there are too many major ticks to display them all\n  if (numMajorIndices > ticksLimit) {\n    skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n    return newTicks;\n  }\n\n  const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n\n  if (numMajorIndices > 0) {\n    let i, ilen;\n    const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n    skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n    for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {\n      skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n    }\n    skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n    return newTicks;\n  }\n  skip(ticks, newTicks, spacing);\n  return newTicks;\n}\n\nfunction determineMaxTicks(scale) {\n  const offset = scale.options.offset;\n  const tickLength = scale._tickSize();\n  const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n  const maxChart = scale._maxLength / tickLength;\n  return Math.floor(Math.min(maxScale, maxChart));\n}\n\n/**\n * @param {number[]} majorIndices\n * @param {Tick[]} ticks\n * @param {number} ticksLimit\n */\nfunction calculateSpacing(majorIndices, ticks, ticksLimit) {\n  const evenMajorSpacing = getEvenSpacing(majorIndices);\n  const spacing = ticks.length / ticksLimit;\n\n  // If the major ticks are evenly spaced apart, place the minor ticks\n  // so that they divide the major ticks into even chunks\n  if (!evenMajorSpacing) {\n    return Math.max(spacing, 1);\n  }\n\n  const factors = _factorize(evenMajorSpacing);\n  for (let i = 0, ilen = factors.length - 1; i < ilen; i++) {\n    const factor = factors[i];\n    if (factor > spacing) {\n      return factor;\n    }\n  }\n  return Math.max(spacing, 1);\n}\n\n/**\n * @param {Tick[]} ticks\n */\nfunction getMajorIndices(ticks) {\n  const result = [];\n  let i, ilen;\n  for (i = 0, ilen = ticks.length; i < ilen; i++) {\n    if (ticks[i].major) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number[]} majorIndices\n * @param {number} spacing\n */\nfunction skipMajors(ticks, newTicks, majorIndices, spacing) {\n  let count = 0;\n  let next = majorIndices[0];\n  let i;\n\n  spacing = Math.ceil(spacing);\n  for (i = 0; i < ticks.length; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = majorIndices[count * spacing];\n    }\n  }\n}\n\n/**\n * @param {Tick[]} ticks\n * @param {Tick[]} newTicks\n * @param {number} spacing\n * @param {number} [majorStart]\n * @param {number} [majorEnd]\n */\nfunction skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n  const start = valueOrDefault(majorStart, 0);\n  const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n  let count = 0;\n  let length, i, next;\n\n  spacing = Math.ceil(spacing);\n  if (majorEnd) {\n    length = majorEnd - majorStart;\n    spacing = length / Math.floor(length / spacing);\n  }\n\n  next = start;\n\n  while (next < 0) {\n    count++;\n    next = Math.round(start + count * spacing);\n  }\n\n  for (i = Math.max(start, 0); i < end; i++) {\n    if (i === next) {\n      newTicks.push(ticks[i]);\n      count++;\n      next = Math.round(start + count * spacing);\n    }\n  }\n}\n\n\n/**\n * @param {number[]} arr\n */\nfunction getEvenSpacing(arr) {\n  const len = arr.length;\n  let i, diff;\n\n  if (len < 2) {\n    return false;\n  }\n\n  for (diff = arr[0], i = 1; i < len; ++i) {\n    if (arr[i] - arr[i - 1] !== diff) {\n      return false;\n    }\n  }\n  return diff;\n}\n","import Element from './core.element.js';\nimport {_alignPixel, _measureText, renderText, clipArea, unclipArea} from '../helpers/helpers.canvas.js';\nimport {callback as call, each, finiteOrDefault, isArray, isFinite, isNullOrUndef, isObject, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toDegrees, toRadians, _int16Range, _limitValue, HALF_PI} from '../helpers/helpers.math.js';\nimport {_alignStartEnd, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {createContext, toFont, toPadding, _addGrace} from '../helpers/helpers.options.js';\nimport {autoSkip} from './core.scale.autoskip.js';\n\nconst reverseAlign = (align) => align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset) => edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit) => Math.min(maxTicksLimit || ticksLength, ticksLength);\n\n/**\n * @typedef { import('../types/index.js').Chart } Chart\n * @typedef {{value:number | string, label?:string, major?:boolean, $context?:any}} Tick\n */\n\n/**\n * Returns a new array containing numItems from arr\n * @param {any[]} arr\n * @param {number} numItems\n */\nfunction sample(arr, numItems) {\n  const result = [];\n  const increment = arr.length / numItems;\n  const len = arr.length;\n  let i = 0;\n\n  for (; i < len; i += increment) {\n    result.push(arr[Math.floor(i)]);\n  }\n  return result;\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @param {boolean} offsetGridLines\n */\nfunction getPixelForGridLine(scale, index, offsetGridLines) {\n  const length = scale.ticks.length;\n  const validIndex = Math.min(index, length - 1);\n  const start = scale._startPixel;\n  const end = scale._endPixel;\n  const epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.\n  let lineValue = scale.getPixelForTick(validIndex);\n  let offset;\n\n  if (offsetGridLines) {\n    if (length === 1) {\n      offset = Math.max(lineValue - start, end - lineValue);\n    } else if (index === 0) {\n      offset = (scale.getPixelForTick(1) - lineValue) / 2;\n    } else {\n      offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n    }\n    lineValue += validIndex < index ? offset : -offset;\n\n    // Return undefined if the pixel is out of the range\n    if (lineValue < start - epsilon || lineValue > end + epsilon) {\n      return;\n    }\n  }\n  return lineValue;\n}\n\n/**\n * @param {object} caches\n * @param {number} length\n */\nfunction garbageCollect(caches, length) {\n  each(caches, (cache) => {\n    const gc = cache.gc;\n    const gcLen = gc.length / 2;\n    let i;\n    if (gcLen > length) {\n      for (i = 0; i < gcLen; ++i) {\n        delete cache.data[gc[i]];\n      }\n      gc.splice(0, gcLen);\n    }\n  });\n}\n\n/**\n * @param {object} options\n */\nfunction getTickMarkLength(options) {\n  return options.drawTicks ? options.tickLength : 0;\n}\n\n/**\n * @param {object} options\n */\nfunction getTitleHeight(options, fallback) {\n  if (!options.display) {\n    return 0;\n  }\n\n  const font = toFont(options.font, fallback);\n  const padding = toPadding(options.padding);\n  const lines = isArray(options.text) ? options.text.length : 1;\n\n  return (lines * font.lineHeight) + padding.height;\n}\n\nfunction createScaleContext(parent, scale) {\n  return createContext(parent, {\n    scale,\n    type: 'scale'\n  });\n}\n\nfunction createTickContext(parent, index, tick) {\n  return createContext(parent, {\n    tick,\n    index,\n    type: 'tick'\n  });\n}\n\nfunction titleAlign(align, position, reverse) {\n  /** @type {CanvasTextAlign} */\n  let ret = _toLeftRightCenter(align);\n  if ((reverse && position !== 'right') || (!reverse && position === 'right')) {\n    ret = reverseAlign(ret);\n  }\n  return ret;\n}\n\nfunction titleArgs(scale, offset, position, align) {\n  const {top, left, bottom, right, chart} = scale;\n  const {chartArea, scales} = chart;\n  let rotation = 0;\n  let maxWidth, titleX, titleY;\n  const height = bottom - top;\n  const width = right - left;\n\n  if (scale.isHorizontal()) {\n    titleX = _alignStartEnd(align, left, right);\n\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n    } else if (position === 'center') {\n      titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n    } else {\n      titleY = offsetFromEdge(scale, position, offset);\n    }\n    maxWidth = right - left;\n  } else {\n    if (isObject(position)) {\n      const positionAxisID = Object.keys(position)[0];\n      const value = position[positionAxisID];\n      titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n    } else if (position === 'center') {\n      titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n    } else {\n      titleX = offsetFromEdge(scale, position, offset);\n    }\n    titleY = _alignStartEnd(align, bottom, top);\n    rotation = position === 'left' ? -HALF_PI : HALF_PI;\n  }\n  return {titleX, titleY, maxWidth, rotation};\n}\n\nexport default class Scale extends Element {\n\n  // eslint-disable-next-line max-statements\n  constructor(cfg) {\n    super();\n\n    /** @type {string} */\n    this.id = cfg.id;\n    /** @type {string} */\n    this.type = cfg.type;\n    /** @type {any} */\n    this.options = undefined;\n    /** @type {CanvasRenderingContext2D} */\n    this.ctx = cfg.ctx;\n    /** @type {Chart} */\n    this.chart = cfg.chart;\n\n    // implements box\n    /** @type {number} */\n    this.top = undefined;\n    /** @type {number} */\n    this.bottom = undefined;\n    /** @type {number} */\n    this.left = undefined;\n    /** @type {number} */\n    this.right = undefined;\n    /** @type {number} */\n    this.width = undefined;\n    /** @type {number} */\n    this.height = undefined;\n    this._margins = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    /** @type {number} */\n    this.maxWidth = undefined;\n    /** @type {number} */\n    this.maxHeight = undefined;\n    /** @type {number} */\n    this.paddingTop = undefined;\n    /** @type {number} */\n    this.paddingBottom = undefined;\n    /** @type {number} */\n    this.paddingLeft = undefined;\n    /** @type {number} */\n    this.paddingRight = undefined;\n\n    // scale-specific properties\n    /** @type {string=} */\n    this.axis = undefined;\n    /** @type {number=} */\n    this.labelRotation = undefined;\n    this.min = undefined;\n    this.max = undefined;\n    this._range = undefined;\n    /** @type {Tick[]} */\n    this.ticks = [];\n    /** @type {object[]|null} */\n    this._gridLineItems = null;\n    /** @type {object[]|null} */\n    this._labelItems = null;\n    /** @type {object|null} */\n    this._labelSizes = null;\n    this._length = 0;\n    this._maxLength = 0;\n    this._longestTextCache = {};\n    /** @type {number} */\n    this._startPixel = undefined;\n    /** @type {number} */\n    this._endPixel = undefined;\n    this._reversePixels = false;\n    this._userMax = undefined;\n    this._userMin = undefined;\n    this._suggestedMax = undefined;\n    this._suggestedMin = undefined;\n    this._ticksLength = 0;\n    this._borderValue = 0;\n    this._cache = {};\n    this._dataLimitsCached = false;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @param {any} options\n\t * @since 3.0\n\t */\n  init(options) {\n    this.options = options.setContext(this.getContext());\n\n    this.axis = options.axis;\n\n    // parse min/max value, so we can properly determine min/max for other scales\n    this._userMin = this.parse(options.min);\n    this._userMax = this.parse(options.max);\n    this._suggestedMin = this.parse(options.suggestedMin);\n    this._suggestedMax = this.parse(options.suggestedMax);\n  }\n\n  /**\n\t * Parse a supported input value to internal representation.\n\t * @param {*} raw\n\t * @param {number} [index]\n\t * @since 3.0\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    return raw;\n  }\n\n  /**\n\t * @return {{min: number, max: number, minDefined: boolean, maxDefined: boolean}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getUserBounds() {\n    let {_userMin, _userMax, _suggestedMin, _suggestedMax} = this;\n    _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n    _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n    _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n    _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n    return {\n      min: finiteOrDefault(_userMin, _suggestedMin),\n      max: finiteOrDefault(_userMax, _suggestedMax),\n      minDefined: isFinite(_userMin),\n      maxDefined: isFinite(_userMax)\n    };\n  }\n\n  /**\n\t * @param {boolean} canStack\n\t * @return {{min: number, max: number}}\n\t * @protected\n\t * @since 3.0\n\t */\n  getMinMax(canStack) {\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n    let range;\n\n    if (minDefined && maxDefined) {\n      return {min, max};\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n    for (let i = 0, ilen = metas.length; i < ilen; ++i) {\n      range = metas[i].controller.getMinMax(this, canStack);\n      if (!minDefined) {\n        min = Math.min(min, range.min);\n      }\n      if (!maxDefined) {\n        max = Math.max(max, range.max);\n      }\n    }\n\n    // Make sure min <= max when only min or max is defined by user and the data is outside that range\n    min = maxDefined && min > max ? max : min;\n    max = minDefined && min > max ? min : max;\n\n    return {\n      min: finiteOrDefault(min, finiteOrDefault(max, min)),\n      max: finiteOrDefault(max, finiteOrDefault(min, max))\n    };\n  }\n\n  /**\n\t * Get the padding needed for the scale\n\t * @return {{top: number, left: number, bottom: number, right: number}} the necessary padding\n\t * @private\n\t */\n  getPadding() {\n    return {\n      left: this.paddingLeft || 0,\n      top: this.paddingTop || 0,\n      right: this.paddingRight || 0,\n      bottom: this.paddingBottom || 0\n    };\n  }\n\n  /**\n\t * Returns the scale tick objects\n\t * @return {Tick[]}\n\t * @since 2.7\n\t */\n  getTicks() {\n    return this.ticks;\n  }\n\n  /**\n\t * @return {string[]}\n\t */\n  getLabels() {\n    const data = this.chart.data;\n    return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n  }\n\n  /**\n   * @return {import('../types.js').LabelItem[]}\n   */\n  getLabelItems(chartArea = this.chart.chartArea) {\n    const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n    return items;\n  }\n\n  // When a new layout is created, reset the data limits cache\n  beforeLayout() {\n    this._cache = {};\n    this._dataLimitsCached = false;\n  }\n\n  // These methods are ordered by lifecycle. Utilities then follow.\n  // Any function defined here is inherited by all scale types.\n  // Any function can be extended by the scale type\n\n  beforeUpdate() {\n    call(this.options.beforeUpdate, [this]);\n  }\n\n  /**\n\t * @param {number} maxWidth - the max width in pixels\n\t * @param {number} maxHeight - the max height in pixels\n\t * @param {{top: number, left: number, bottom: number, right: number}} margins - the space between the edge of the other scales and edge of the chart\n\t *   This space comes from two sources:\n\t *     - padding - space that's required to show the labels at the edges of the scale\n\t *     - thickness of scales or legends in another orientation\n\t */\n  update(maxWidth, maxHeight, margins) {\n    const {beginAtZero, grace, ticks: tickOpts} = this.options;\n    const sampleSize = tickOpts.sampleSize;\n\n    // Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)\n    this.beforeUpdate();\n\n    // Absorb the master measurements\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins = Object.assign({\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    }, margins);\n\n    this.ticks = null;\n    this._labelSizes = null;\n    this._gridLineItems = null;\n    this._labelItems = null;\n\n    // Dimensions\n    this.beforeSetDimensions();\n    this.setDimensions();\n    this.afterSetDimensions();\n\n    this._maxLength = this.isHorizontal()\n      ? this.width + margins.left + margins.right\n      : this.height + margins.top + margins.bottom;\n\n    // Data min/max\n    if (!this._dataLimitsCached) {\n      this.beforeDataLimits();\n      this.determineDataLimits();\n      this.afterDataLimits();\n      this._range = _addGrace(this, grace, beginAtZero);\n      this._dataLimitsCached = true;\n    }\n\n    this.beforeBuildTicks();\n\n    this.ticks = this.buildTicks() || [];\n\n    // Allow modification of ticks in callback.\n    this.afterBuildTicks();\n\n    // Compute tick rotation and fit using a sampled subset of labels\n    // We generally don't need to compute the size of every single label for determining scale size\n    const samplingEnabled = sampleSize < this.ticks.length;\n    this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n\n    // configure is called twice, once here, once from core.controller.updateLayout.\n    // Here we haven't been positioned yet, but dimensions are correct.\n    // Variables set in configure are needed for calculateLabelRotation, and\n    // it's ok that coordinates are not correct there, only dimensions matter.\n    this.configure();\n\n    // Tick Rotation\n    this.beforeCalculateLabelRotation();\n    this.calculateLabelRotation(); // Preconditions: number of ticks and sizes of largest labels must be calculated beforehand\n    this.afterCalculateLabelRotation();\n\n    // Auto-skip\n    if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n      this.ticks = autoSkip(this, this.ticks);\n      this._labelSizes = null;\n      this.afterAutoSkip();\n    }\n\n    if (samplingEnabled) {\n      // Generate labels using all non-skipped ticks\n      this._convertTicksToLabels(this.ticks);\n    }\n\n    this.beforeFit();\n    this.fit(); // Preconditions: label rotation and label sizes must be calculated beforehand\n    this.afterFit();\n\n    // IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!\n\n    this.afterUpdate();\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    let reversePixels = this.options.reverse;\n    let startPixel, endPixel;\n\n    if (this.isHorizontal()) {\n      startPixel = this.left;\n      endPixel = this.right;\n    } else {\n      startPixel = this.top;\n      endPixel = this.bottom;\n      // by default vertical scales are from bottom to top, so pixels are reversed\n      reversePixels = !reversePixels;\n    }\n    this._startPixel = startPixel;\n    this._endPixel = endPixel;\n    this._reversePixels = reversePixels;\n    this._length = endPixel - startPixel;\n    this._alignToPixels = this.options.alignToPixels;\n  }\n\n  afterUpdate() {\n    call(this.options.afterUpdate, [this]);\n  }\n\n  //\n\n  beforeSetDimensions() {\n    call(this.options.beforeSetDimensions, [this]);\n  }\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    if (this.isHorizontal()) {\n      // Reset position before calculating rotation\n      this.width = this.maxWidth;\n      this.left = 0;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n\n      // Reset position before calculating rotation\n      this.top = 0;\n      this.bottom = this.height;\n    }\n\n    // Reset padding\n    this.paddingLeft = 0;\n    this.paddingTop = 0;\n    this.paddingRight = 0;\n    this.paddingBottom = 0;\n  }\n  afterSetDimensions() {\n    call(this.options.afterSetDimensions, [this]);\n  }\n\n  _callHooks(name) {\n    this.chart.notifyPlugins(name, this.getContext());\n    call(this.options[name], [this]);\n  }\n\n  // Data limits\n  beforeDataLimits() {\n    this._callHooks('beforeDataLimits');\n  }\n  determineDataLimits() {}\n  afterDataLimits() {\n    this._callHooks('afterDataLimits');\n  }\n\n  //\n  beforeBuildTicks() {\n    this._callHooks('beforeBuildTicks');\n  }\n  /**\n\t * @return {object[]} the ticks\n\t */\n  buildTicks() {\n    return [];\n  }\n  afterBuildTicks() {\n    this._callHooks('afterBuildTicks');\n  }\n\n  beforeTickToLabelConversion() {\n    call(this.options.beforeTickToLabelConversion, [this]);\n  }\n  /**\n\t * Convert ticks to label strings\n\t * @param {Tick[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    const tickOpts = this.options.ticks;\n    let i, ilen, tick;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      tick = ticks[i];\n      tick.label = call(tickOpts.callback, [tick.value, i, ticks], this);\n    }\n  }\n  afterTickToLabelConversion() {\n    call(this.options.afterTickToLabelConversion, [this]);\n  }\n\n  //\n\n  beforeCalculateLabelRotation() {\n    call(this.options.beforeCalculateLabelRotation, [this]);\n  }\n  calculateLabelRotation() {\n    const options = this.options;\n    const tickOpts = options.ticks;\n    const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n    const minRotation = tickOpts.minRotation || 0;\n    const maxRotation = tickOpts.maxRotation;\n    let labelRotation = minRotation;\n    let tickWidth, maxHeight, maxLabelDiagonal;\n\n    if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n      this.labelRotation = minRotation;\n      return;\n    }\n\n    const labelSizes = this._getLabelSizes();\n    const maxLabelWidth = labelSizes.widest.width;\n    const maxLabelHeight = labelSizes.highest.height;\n\n    // Estimate the width of each grid based on the canvas width, the maximum\n    // label width and the number of tick intervals\n    const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n    tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n\n    // Allow 3 pixels x2 padding either side for label readability\n    if (maxLabelWidth + 6 > tickWidth) {\n      tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n      maxHeight = this.maxHeight - getTickMarkLength(options.grid)\n\t\t\t\t- tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n      maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n      labelRotation = toDegrees(Math.min(\n        Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)),\n        Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))\n      ));\n      labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n    }\n\n    this.labelRotation = labelRotation;\n  }\n  afterCalculateLabelRotation() {\n    call(this.options.afterCalculateLabelRotation, [this]);\n  }\n  afterAutoSkip() {}\n\n  //\n\n  beforeFit() {\n    call(this.options.beforeFit, [this]);\n  }\n  fit() {\n    // Reset\n    const minSize = {\n      width: 0,\n      height: 0\n    };\n\n    const {chart, options: {ticks: tickOpts, title: titleOpts, grid: gridOpts}} = this;\n    const display = this._isVisible();\n    const isHorizontal = this.isHorizontal();\n\n    if (display) {\n      const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n      if (isHorizontal) {\n        minSize.width = this.maxWidth;\n        minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n      } else {\n        minSize.height = this.maxHeight; // fill all the height\n        minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n      }\n\n      // Don't bother fitting the ticks if we are not showing the labels\n      if (tickOpts.display && this.ticks.length) {\n        const {first, last, widest, highest} = this._getLabelSizes();\n        const tickPadding = tickOpts.padding * 2;\n        const angleRadians = toRadians(this.labelRotation);\n        const cos = Math.cos(angleRadians);\n        const sin = Math.sin(angleRadians);\n\n        if (isHorizontal) {\n        // A horizontal axis is more constrained by the height.\n          const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n          minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n        } else {\n        // A vertical axis is more constrained by the width. Labels are the\n        // dominant factor here, so get that length first and account for padding\n          const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n\n          minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n        }\n        this._calculatePadding(first, last, sin, cos);\n      }\n    }\n\n    this._handleMargins();\n\n    if (isHorizontal) {\n      this.width = this._length = chart.width - this._margins.left - this._margins.right;\n      this.height = minSize.height;\n    } else {\n      this.width = minSize.width;\n      this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n    }\n  }\n\n  _calculatePadding(first, last, sin, cos) {\n    const {ticks: {align, padding}, position} = this.options;\n    const isRotated = this.labelRotation !== 0;\n    const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n\n    if (this.isHorizontal()) {\n      const offsetLeft = this.getPixelForTick(0) - this.left;\n      const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n      let paddingLeft = 0;\n      let paddingRight = 0;\n\n      // Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned\n      // which means that the right padding is dominated by the font height\n      if (isRotated) {\n        if (labelsBelowTicks) {\n          paddingLeft = cos * first.width;\n          paddingRight = sin * last.height;\n        } else {\n          paddingLeft = sin * first.height;\n          paddingRight = cos * last.width;\n        }\n      } else if (align === 'start') {\n        paddingRight = last.width;\n      } else if (align === 'end') {\n        paddingLeft = first.width;\n      } else if (align !== 'inner') {\n        paddingLeft = first.width / 2;\n        paddingRight = last.width / 2;\n      }\n\n      // Adjust padding taking into account changes in offsets\n      this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n      this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n    } else {\n      let paddingTop = last.height / 2;\n      let paddingBottom = first.height / 2;\n\n      if (align === 'start') {\n        paddingTop = 0;\n        paddingBottom = first.height;\n      } else if (align === 'end') {\n        paddingTop = last.height;\n        paddingBottom = 0;\n      }\n\n      this.paddingTop = paddingTop + padding;\n      this.paddingBottom = paddingBottom + padding;\n    }\n  }\n\n  /**\n\t * Handle margins and padding interactions\n\t * @private\n\t */\n  _handleMargins() {\n    if (this._margins) {\n      this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n      this._margins.top = Math.max(this.paddingTop, this._margins.top);\n      this._margins.right = Math.max(this.paddingRight, this._margins.right);\n      this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n    }\n  }\n\n  afterFit() {\n    call(this.options.afterFit, [this]);\n  }\n\n  // Shared Methods\n  /**\n\t * @return {boolean}\n\t */\n  isHorizontal() {\n    const {axis, position} = this.options;\n    return position === 'top' || position === 'bottom' || axis === 'x';\n  }\n  /**\n\t * @return {boolean}\n\t */\n  isFullSize() {\n    return this.options.fullSize;\n  }\n\n  /**\n\t * @param {Tick[]} ticks\n\t * @private\n\t */\n  _convertTicksToLabels(ticks) {\n    this.beforeTickToLabelConversion();\n\n    this.generateTickLabels(ticks);\n\n    // Ticks should be skipped when callback returns null or undef, so lets remove those.\n    let i, ilen;\n    for (i = 0, ilen = ticks.length; i < ilen; i++) {\n      if (isNullOrUndef(ticks[i].label)) {\n        ticks.splice(i, 1);\n        ilen--;\n        i--;\n      }\n    }\n\n    this.afterTickToLabelConversion();\n  }\n\n  /**\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _getLabelSizes() {\n    let labelSizes = this._labelSizes;\n\n    if (!labelSizes) {\n      const sampleSize = this.options.ticks.sampleSize;\n      let ticks = this.ticks;\n      if (sampleSize < ticks.length) {\n        ticks = sample(ticks, sampleSize);\n      }\n\n      this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n    }\n\n    return labelSizes;\n  }\n\n  /**\n\t * Returns {width, height, offset} objects for the first, last, widest, highest tick\n\t * labels where offset indicates the anchor point offset from the top in pixels.\n\t * @return {{ first: object, last: object, widest: object, highest: object, widths: Array, heights: array }}\n\t * @private\n\t */\n  _computeLabelSizes(ticks, length, maxTicksLimit) {\n    const {ctx, _longestTextCache: caches} = this;\n    const widths = [];\n    const heights = [];\n    const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n    let widestLabelSize = 0;\n    let highestLabelSize = 0;\n    let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n\n    for (i = 0; i < length; i += increment) {\n      label = ticks[i].label;\n      tickFont = this._resolveTickFontOptions(i);\n      ctx.font = fontString = tickFont.string;\n      cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};\n      lineHeight = tickFont.lineHeight;\n      width = height = 0;\n      // Undefined labels and arrays should not be measured\n      if (!isNullOrUndef(label) && !isArray(label)) {\n        width = _measureText(ctx, cache.data, cache.gc, width, label);\n        height = lineHeight;\n      } else if (isArray(label)) {\n        // if it is an array let's measure each element\n        for (j = 0, jlen = label.length; j < jlen; ++j) {\n          nestedLabel = /** @type {string} */ (label[j]);\n          // Undefined labels and arrays should not be measured\n          if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n            width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n            height += lineHeight;\n          }\n        }\n      }\n      widths.push(width);\n      heights.push(height);\n      widestLabelSize = Math.max(width, widestLabelSize);\n      highestLabelSize = Math.max(height, highestLabelSize);\n    }\n    garbageCollect(caches, length);\n\n    const widest = widths.indexOf(widestLabelSize);\n    const highest = heights.indexOf(highestLabelSize);\n\n    const valueAt = (idx) => ({width: widths[idx] || 0, height: heights[idx] || 0});\n\n    return {\n      first: valueAt(0),\n      last: valueAt(length - 1),\n      widest: valueAt(widest),\n      highest: valueAt(highest),\n      widths,\n      heights,\n    };\n  }\n\n  /**\n\t * Used to get the label to display in the tooltip for the given value\n\t * @param {*} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value;\n  }\n\n  /**\n\t * Returns the location of the given data point. Value can either be an index or a numerical value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {*} value\n\t * @param {number} [index]\n\t * @return {number}\n\t */\n  getPixelForValue(value, index) { // eslint-disable-line no-unused-vars\n    return NaN;\n  }\n\n  /**\n\t * Used to get the data value from a given pixel. This is the inverse of getPixelForValue\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} pixel\n\t * @return {*}\n\t */\n  getValueForPixel(pixel) {} // eslint-disable-line no-unused-vars\n\n  /**\n\t * Returns the location of the tick at the given index\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} index\n\t * @return {number}\n\t */\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  /**\n\t * Utility for getting the pixel location of a percentage of scale\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @param {number} decimal\n\t * @return {number}\n\t */\n  getPixelForDecimal(decimal) {\n    if (this._reversePixels) {\n      decimal = 1 - decimal;\n    }\n\n    const pixel = this._startPixel + decimal * this._length;\n    return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getDecimalForPixel(pixel) {\n    const decimal = (pixel - this._startPixel) / this._length;\n    return this._reversePixels ? 1 - decimal : decimal;\n  }\n\n  /**\n\t * Returns the pixel for the minimum chart value\n\t * The coordinate (0, 0) is at the upper-left corner of the canvas\n\t * @return {number}\n\t */\n  getBasePixel() {\n    return this.getPixelForValue(this.getBaseValue());\n  }\n\n  /**\n\t * @return {number}\n\t */\n  getBaseValue() {\n    const {min, max} = this;\n\n    return min < 0 && max < 0 ? max :\n      min > 0 && max > 0 ? min :\n      0;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext(index) {\n    const ticks = this.ticks || [];\n\n    if (index >= 0 && index < ticks.length) {\n      const tick = ticks[index];\n      return tick.$context ||\n\t\t\t\t(tick.$context = createTickContext(this.getContext(), index, tick));\n    }\n    return this.$context ||\n\t\t\t(this.$context = createScaleContext(this.chart.getContext(), this));\n  }\n\n  /**\n\t * @return {number}\n\t * @private\n\t */\n  _tickSize() {\n    const optionTicks = this.options.ticks;\n\n    // Calculate space needed by label in axis direction.\n    const rot = toRadians(this.labelRotation);\n    const cos = Math.abs(Math.cos(rot));\n    const sin = Math.abs(Math.sin(rot));\n\n    const labelSizes = this._getLabelSizes();\n    const padding = optionTicks.autoSkipPadding || 0;\n    const w = labelSizes ? labelSizes.widest.width + padding : 0;\n    const h = labelSizes ? labelSizes.highest.height + padding : 0;\n\n    // Calculate space needed for 1 tick in axis direction.\n    return this.isHorizontal()\n      ? h * cos > w * sin ? w / cos : h / sin\n      : h * sin < w * cos ? h / cos : w / sin;\n  }\n\n  /**\n\t * @return {boolean}\n\t * @private\n\t */\n  _isVisible() {\n    const display = this.options.display;\n\n    if (display !== 'auto') {\n      return !!display;\n    }\n\n    return this.getMatchingVisibleMetas().length > 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeGridLineItems(chartArea) {\n    const axis = this.axis;\n    const chart = this.chart;\n    const options = this.options;\n    const {grid, position, border} = options;\n    const offset = grid.offset;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const ticksLength = ticks.length + (offset ? 1 : 0);\n    const tl = getTickMarkLength(grid);\n    const items = [];\n\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = borderOpts.display ? borderOpts.width : 0;\n    const axisHalfWidth = axisWidth / 2;\n    const alignBorderValue = function(pixel) {\n      return _alignPixel(chart, pixel, axisWidth);\n    };\n    let borderValue, i, lineValue, alignedLineValue;\n    let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n\n    if (position === 'top') {\n      borderValue = alignBorderValue(this.bottom);\n      ty1 = this.bottom - tl;\n      ty2 = borderValue - axisHalfWidth;\n      y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n      y2 = chartArea.bottom;\n    } else if (position === 'bottom') {\n      borderValue = alignBorderValue(this.top);\n      y1 = chartArea.top;\n      y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = this.top + tl;\n    } else if (position === 'left') {\n      borderValue = alignBorderValue(this.right);\n      tx1 = this.right - tl;\n      tx2 = borderValue - axisHalfWidth;\n      x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n      x2 = chartArea.right;\n    } else if (position === 'right') {\n      borderValue = alignBorderValue(this.left);\n      x1 = chartArea.left;\n      x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n      tx1 = borderValue + axisHalfWidth;\n      tx2 = this.left + tl;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      y1 = chartArea.top;\n      y2 = chartArea.bottom;\n      ty1 = borderValue + axisHalfWidth;\n      ty2 = ty1 + tl;\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n      }\n\n      tx1 = borderValue - axisHalfWidth;\n      tx2 = tx1 - tl;\n      x1 = chartArea.left;\n      x2 = chartArea.right;\n    }\n\n    const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n    const step = Math.max(1, Math.ceil(ticksLength / limit));\n    for (i = 0; i < ticksLength; i += step) {\n      const context = this.getContext(i);\n      const optsAtIndex = grid.setContext(context);\n      const optsAtIndexBorder = border.setContext(context);\n\n      const lineWidth = optsAtIndex.lineWidth;\n      const lineColor = optsAtIndex.color;\n      const borderDash = optsAtIndexBorder.dash || [];\n      const borderDashOffset = optsAtIndexBorder.dashOffset;\n\n      const tickWidth = optsAtIndex.tickWidth;\n      const tickColor = optsAtIndex.tickColor;\n      const tickBorderDash = optsAtIndex.tickBorderDash || [];\n      const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n\n      lineValue = getPixelForGridLine(this, i, offset);\n\n      // Skip if the pixel is out of the range\n      if (lineValue === undefined) {\n        continue;\n      }\n\n      alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n\n      if (isHorizontal) {\n        tx1 = tx2 = x1 = x2 = alignedLineValue;\n      } else {\n        ty1 = ty2 = y1 = y2 = alignedLineValue;\n      }\n\n      items.push({\n        tx1,\n        ty1,\n        tx2,\n        ty2,\n        x1,\n        y1,\n        x2,\n        y2,\n        width: lineWidth,\n        color: lineColor,\n        borderDash,\n        borderDashOffset,\n        tickWidth,\n        tickColor,\n        tickBorderDash,\n        tickBorderDashOffset,\n      });\n    }\n\n    this._ticksLength = ticksLength;\n    this._borderValue = borderValue;\n\n    return items;\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelItems(chartArea) {\n    const axis = this.axis;\n    const options = this.options;\n    const {position, ticks: optionTicks} = options;\n    const isHorizontal = this.isHorizontal();\n    const ticks = this.ticks;\n    const {align, crossAlign, padding, mirror} = optionTicks;\n    const tl = getTickMarkLength(options.grid);\n    const tickAndPadding = tl + padding;\n    const hTickAndPadding = mirror ? -padding : tickAndPadding;\n    const rotation = -toRadians(this.labelRotation);\n    const items = [];\n    let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n    let textBaseline = 'middle';\n\n    if (position === 'top') {\n      y = this.bottom - hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'bottom') {\n      y = this.top + hTickAndPadding;\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (position === 'left') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (position === 'right') {\n      const ret = this._getYAxisLabelAlignment(tl);\n      textAlign = ret.textAlign;\n      x = ret.x;\n    } else if (axis === 'x') {\n      if (position === 'center') {\n        y = ((chartArea.top + chartArea.bottom) / 2) + tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n      }\n      textAlign = this._getXAxisLabelAlignment();\n    } else if (axis === 'y') {\n      if (position === 'center') {\n        x = ((chartArea.left + chartArea.right) / 2) - tickAndPadding;\n      } else if (isObject(position)) {\n        const positionAxisID = Object.keys(position)[0];\n        const value = position[positionAxisID];\n        x = this.chart.scales[positionAxisID].getPixelForValue(value);\n      }\n      textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n    }\n\n    if (axis === 'y') {\n      if (align === 'start') {\n        textBaseline = 'top';\n      } else if (align === 'end') {\n        textBaseline = 'bottom';\n      }\n    }\n\n    const labelSizes = this._getLabelSizes();\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      label = tick.label;\n\n      const optsAtIndex = optionTicks.setContext(this.getContext(i));\n      pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n      font = this._resolveTickFontOptions(i);\n      lineHeight = font.lineHeight;\n      lineCount = isArray(label) ? label.length : 1;\n      const halfCount = lineCount / 2;\n      const color = optsAtIndex.color;\n      const strokeColor = optsAtIndex.textStrokeColor;\n      const strokeWidth = optsAtIndex.textStrokeWidth;\n      let tickTextAlign = textAlign;\n\n      if (isHorizontal) {\n        x = pixel;\n\n        if (textAlign === 'inner') {\n          if (i === ilen - 1) {\n            tickTextAlign = !this.options.reverse ? 'right' : 'left';\n          } else if (i === 0) {\n            tickTextAlign = !this.options.reverse ? 'left' : 'right';\n          } else {\n            tickTextAlign = 'center';\n          }\n        }\n\n        if (position === 'top') {\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = -lineCount * lineHeight + lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n          } else {\n            textOffset = -labelSizes.highest.height + lineHeight / 2;\n          }\n        } else {\n          // eslint-disable-next-line no-lonely-if\n          if (crossAlign === 'near' || rotation !== 0) {\n            textOffset = lineHeight / 2;\n          } else if (crossAlign === 'center') {\n            textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n          } else {\n            textOffset = labelSizes.highest.height - lineCount * lineHeight;\n          }\n        }\n        if (mirror) {\n          textOffset *= -1;\n        }\n        if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n          x += (lineHeight / 2) * Math.sin(rotation);\n        }\n      } else {\n        y = pixel;\n        textOffset = (1 - lineCount) * lineHeight / 2;\n      }\n\n      let backdrop;\n\n      if (optsAtIndex.showLabelBackdrop) {\n        const labelPadding = toPadding(optsAtIndex.backdropPadding);\n        const height = labelSizes.heights[i];\n        const width = labelSizes.widths[i];\n\n        let top = textOffset - labelPadding.top;\n        let left = 0 - labelPadding.left;\n\n        switch (textBaseline) {\n        case 'middle':\n          top -= height / 2;\n          break;\n        case 'bottom':\n          top -= height;\n          break;\n        default:\n          break;\n        }\n\n        switch (textAlign) {\n        case 'center':\n          left -= width / 2;\n          break;\n        case 'right':\n          left -= width;\n          break;\n        case 'inner':\n          if (i === ilen - 1) {\n            left -= width;\n          } else if (i > 0) {\n            left -= width / 2;\n          }\n          break;\n        default:\n          break;\n        }\n\n        backdrop = {\n          left,\n          top,\n          width: width + labelPadding.width,\n          height: height + labelPadding.height,\n\n          color: optsAtIndex.backdropColor,\n        };\n      }\n\n      items.push({\n        label,\n        font,\n        textOffset,\n        options: {\n          rotation,\n          color,\n          strokeColor,\n          strokeWidth,\n          textAlign: tickTextAlign,\n          textBaseline,\n          translation: [x, y],\n          backdrop,\n        }\n      });\n    }\n\n    return items;\n  }\n\n  _getXAxisLabelAlignment() {\n    const {position, ticks} = this.options;\n    const rotation = -toRadians(this.labelRotation);\n\n    if (rotation) {\n      return position === 'top' ? 'left' : 'right';\n    }\n\n    let align = 'center';\n\n    if (ticks.align === 'start') {\n      align = 'left';\n    } else if (ticks.align === 'end') {\n      align = 'right';\n    } else if (ticks.align === 'inner') {\n      align = 'inner';\n    }\n\n    return align;\n  }\n\n  _getYAxisLabelAlignment(tl) {\n    const {position, ticks: {crossAlign, mirror, padding}} = this.options;\n    const labelSizes = this._getLabelSizes();\n    const tickAndPadding = tl + padding;\n    const widest = labelSizes.widest.width;\n\n    let textAlign;\n    let x;\n\n    if (position === 'left') {\n      if (mirror) {\n        x = this.right + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += (widest / 2);\n        } else {\n          textAlign = 'right';\n          x += widest;\n        }\n      } else {\n        x = this.right - tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x = this.left;\n        }\n      }\n    } else if (position === 'right') {\n      if (mirror) {\n        x = this.left + padding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'right';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x -= (widest / 2);\n        } else {\n          textAlign = 'left';\n          x -= widest;\n        }\n      } else {\n        x = this.left + tickAndPadding;\n\n        if (crossAlign === 'near') {\n          textAlign = 'left';\n        } else if (crossAlign === 'center') {\n          textAlign = 'center';\n          x += widest / 2;\n        } else {\n          textAlign = 'right';\n          x = this.right;\n        }\n      }\n    } else {\n      textAlign = 'right';\n    }\n\n    return {textAlign, x};\n  }\n\n  /**\n\t * @private\n\t */\n  _computeLabelArea() {\n    if (this.options.ticks.mirror) {\n      return;\n    }\n\n    const chart = this.chart;\n    const position = this.options.position;\n\n    if (position === 'left' || position === 'right') {\n      return {top: 0, left: this.left, bottom: chart.height, right: this.right};\n    } if (position === 'top' || position === 'bottom') {\n      return {top: this.top, left: 0, bottom: this.bottom, right: chart.width};\n    }\n  }\n\n  /**\n   * @protected\n   */\n  drawBackground() {\n    const {ctx, options: {backgroundColor}, left, top, width, height} = this;\n    if (backgroundColor) {\n      ctx.save();\n      ctx.fillStyle = backgroundColor;\n      ctx.fillRect(left, top, width, height);\n      ctx.restore();\n    }\n  }\n\n  getLineWidthForValue(value) {\n    const grid = this.options.grid;\n    if (!this._isVisible() || !grid.display) {\n      return 0;\n    }\n    const ticks = this.ticks;\n    const index = ticks.findIndex(t => t.value === value);\n    if (index >= 0) {\n      const opts = grid.setContext(this.getContext(index));\n      return opts.lineWidth;\n    }\n    return 0;\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid(chartArea) {\n    const grid = this.options.grid;\n    const ctx = this.ctx;\n    const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n    let i, ilen;\n\n    const drawLine = (p1, p2, style) => {\n      if (!style.width || !style.color) {\n        return;\n      }\n      ctx.save();\n      ctx.lineWidth = style.width;\n      ctx.strokeStyle = style.color;\n      ctx.setLineDash(style.borderDash || []);\n      ctx.lineDashOffset = style.borderDashOffset;\n\n      ctx.beginPath();\n      ctx.moveTo(p1.x, p1.y);\n      ctx.lineTo(p2.x, p2.y);\n      ctx.stroke();\n      ctx.restore();\n    };\n\n    if (grid.display) {\n      for (i = 0, ilen = items.length; i < ilen; ++i) {\n        const item = items[i];\n\n        if (grid.drawOnChartArea) {\n          drawLine(\n            {x: item.x1, y: item.y1},\n            {x: item.x2, y: item.y2},\n            item\n          );\n        }\n\n        if (grid.drawTicks) {\n          drawLine(\n            {x: item.tx1, y: item.ty1},\n            {x: item.tx2, y: item.ty2},\n            {\n              color: item.tickColor,\n              width: item.tickWidth,\n              borderDash: item.tickBorderDash,\n              borderDashOffset: item.tickBorderDashOffset\n            }\n          );\n        }\n      }\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {\n    const {chart, ctx, options: {border, grid}} = this;\n    const borderOpts = border.setContext(this.getContext());\n    const axisWidth = border.display ? borderOpts.width : 0;\n    if (!axisWidth) {\n      return;\n    }\n    const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n    const borderValue = this._borderValue;\n    let x1, x2, y1, y2;\n\n    if (this.isHorizontal()) {\n      x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n      x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n      y1 = y2 = borderValue;\n    } else {\n      y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n      y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n      x1 = x2 = borderValue;\n    }\n    ctx.save();\n    ctx.lineWidth = borderOpts.width;\n    ctx.strokeStyle = borderOpts.color;\n\n    ctx.beginPath();\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawLabels(chartArea) {\n    const optionTicks = this.options.ticks;\n\n    if (!optionTicks.display) {\n      return;\n    }\n\n    const ctx = this.ctx;\n\n    const area = this._computeLabelArea();\n    if (area) {\n      clipArea(ctx, area);\n    }\n\n    const items = this.getLabelItems(chartArea);\n    for (const item of items) {\n      const renderTextOptions = item.options;\n      const tickFont = item.font;\n      const label = item.label;\n      const y = item.textOffset;\n      renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n    }\n\n    if (area) {\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const {ctx, options: {position, title, reverse}} = this;\n\n    if (!title.display) {\n      return;\n    }\n\n    const font = toFont(title.font);\n    const padding = toPadding(title.padding);\n    const align = title.align;\n    let offset = font.lineHeight / 2;\n\n    if (position === 'bottom' || position === 'center' || isObject(position)) {\n      offset += padding.bottom;\n      if (isArray(title.text)) {\n        offset += font.lineHeight * (title.text.length - 1);\n      }\n    } else {\n      offset += padding.top;\n    }\n\n    const {titleX, titleY, maxWidth, rotation} = titleArgs(this, offset, position, align);\n\n    renderText(ctx, title.text, 0, 0, font, {\n      color: title.color,\n      maxWidth,\n      rotation,\n      textAlign: titleAlign(align, position, reverse),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n\n  draw(chartArea) {\n    if (!this._isVisible()) {\n      return;\n    }\n\n    this.drawBackground();\n    this.drawGrid(chartArea);\n    this.drawBorder();\n    this.drawTitle();\n    this.drawLabels(chartArea);\n  }\n\n  /**\n\t * @return {object[]}\n\t * @private\n\t */\n  _layers() {\n    const opts = this.options;\n    const tz = opts.ticks && opts.ticks.z || 0;\n    const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n    const bz = valueOrDefault(opts.border && opts.border.z, 0);\n\n    if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n      // backward compatibility: draw has been overridden by custom scale\n      return [{\n        z: tz,\n        draw: (chartArea) => {\n          this.draw(chartArea);\n        }\n      }];\n    }\n\n    return [{\n      z: gz,\n      draw: (chartArea) => {\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawTitle();\n      }\n    }, {\n      z: bz,\n      draw: () => {\n        this.drawBorder();\n      }\n    }, {\n      z: tz,\n      draw: (chartArea) => {\n        this.drawLabels(chartArea);\n      }\n    }];\n  }\n\n  /**\n\t * Returns visible dataset metas that are attached to this scale\n\t * @param {string} [type] - if specified, also filter by dataset type\n\t * @return {object[]}\n\t */\n  getMatchingVisibleMetas(type) {\n    const metas = this.chart.getSortedVisibleDatasetMetas();\n    const axisID = this.axis + 'AxisID';\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      const meta = metas[i];\n      if (meta[axisID] === this.id && (!type || meta.type === type)) {\n        result.push(meta);\n      }\n    }\n    return result;\n  }\n\n  /**\n\t * @param {number} index\n\t * @return {object}\n\t * @protected\n \t */\n  _resolveTickFontOptions(index) {\n    const opts = this.options.ticks.setContext(this.getContext(index));\n    return toFont(opts.font);\n  }\n\n  /**\n   * @protected\n   */\n  _maxDigits() {\n    const fontSize = this._resolveTickFontOptions(0).lineHeight;\n    return (this.isHorizontal() ? this.width : this.height) / fontSize;\n  }\n}\n","import {merge} from '../helpers/index.js';\nimport defaults, {overrides} from './core.defaults.js';\n\n/**\n * @typedef {{id: string, defaults: any, overrides?: any, defaultRoutes: any}} IChartComponent\n */\n\nexport default class TypedRegistry {\n  constructor(type, scope, override) {\n    this.type = type;\n    this.scope = scope;\n    this.override = override;\n    this.items = Object.create(null);\n  }\n\n  isForType(type) {\n    return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t * @returns {string} The scope where items defaults were registered to.\n\t */\n  register(item) {\n    const proto = Object.getPrototypeOf(item);\n    let parentScope;\n\n    if (isIChartComponent(proto)) {\n      // Make sure the parent is registered and note the scope where its defaults are.\n      parentScope = this.register(proto);\n    }\n\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope + '.' + id;\n\n    if (!id) {\n      throw new Error('class does not have id: ' + item);\n    }\n\n    if (id in items) {\n      // already registered\n      return scope;\n    }\n\n    items[id] = item;\n    registerDefaults(item, scope, parentScope);\n    if (this.override) {\n      defaults.override(item.id, item.overrides);\n    }\n\n    return scope;\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object?}\n\t */\n  get(id) {\n    return this.items[id];\n  }\n\n  /**\n\t * @param {IChartComponent} item\n\t */\n  unregister(item) {\n    const items = this.items;\n    const id = item.id;\n    const scope = this.scope;\n\n    if (id in items) {\n      delete items[id];\n    }\n\n    if (scope && id in defaults[scope]) {\n      delete defaults[scope][id];\n      if (this.override) {\n        delete overrides[id];\n      }\n    }\n  }\n}\n\nfunction registerDefaults(item, scope, parentScope) {\n  // Inherit the parent's defaults and keep existing defaults\n  const itemDefaults = merge(Object.create(null), [\n    parentScope ? defaults.get(parentScope) : {},\n    defaults.get(scope),\n    item.defaults\n  ]);\n\n  defaults.set(scope, itemDefaults);\n\n  if (item.defaultRoutes) {\n    routeDefaults(scope, item.defaultRoutes);\n  }\n\n  if (item.descriptors) {\n    defaults.describe(scope, item.descriptors);\n  }\n}\n\nfunction routeDefaults(scope, routes) {\n  Object.keys(routes).forEach(property => {\n    const propertyParts = property.split('.');\n    const sourceName = propertyParts.pop();\n    const sourceScope = [scope].concat(propertyParts).join('.');\n    const parts = routes[property].split('.');\n    const targetName = parts.pop();\n    const targetScope = parts.join('.');\n    defaults.route(sourceScope, sourceName, targetScope, targetName);\n  });\n}\n\nfunction isIChartComponent(proto) {\n  return 'id' in proto && 'defaults' in proto;\n}\n","import DatasetController from './core.datasetController.js';\nimport Element from './core.element.js';\nimport Scale from './core.scale.js';\nimport TypedRegistry from './core.typedRegistry.js';\nimport {each, callback as call, _capitalize} from '../helpers/helpers.core.js';\n\n/**\n * Please use the module's default export which provides a singleton instance\n * Note: class is exported for typedoc\n */\nexport class Registry {\n  constructor() {\n    this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n    this.elements = new TypedRegistry(Element, 'elements');\n    this.plugins = new TypedRegistry(Object, 'plugins');\n    this.scales = new TypedRegistry(Scale, 'scales');\n    // Order is important, Scale has Element in prototype chain,\n    // so Scales must be before Elements. Plugins are a fallback, so not listed here.\n    this._typedRegistries = [this.controllers, this.scales, this.elements];\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  add(...args) {\n    this._each('register', args);\n  }\n\n  remove(...args) {\n    this._each('unregister', args);\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  addControllers(...args) {\n    this._each('register', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  addElements(...args) {\n    this._each('register', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  addPlugins(...args) {\n    this._each('register', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  addScales(...args) {\n    this._each('register', args, this.scales);\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof DatasetController}\n\t */\n  getController(id) {\n    return this._get(id, this.controllers, 'controller');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Element}\n\t */\n  getElement(id) {\n    return this._get(id, this.elements, 'element');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {object}\n\t */\n  getPlugin(id) {\n    return this._get(id, this.plugins, 'plugin');\n  }\n\n  /**\n\t * @param {string} id\n\t * @returns {typeof Scale}\n\t */\n  getScale(id) {\n    return this._get(id, this.scales, 'scale');\n  }\n\n  /**\n\t * @param  {...typeof DatasetController} args\n\t */\n  removeControllers(...args) {\n    this._each('unregister', args, this.controllers);\n  }\n\n  /**\n\t * @param  {...typeof Element} args\n\t */\n  removeElements(...args) {\n    this._each('unregister', args, this.elements);\n  }\n\n  /**\n\t * @param  {...any} args\n\t */\n  removePlugins(...args) {\n    this._each('unregister', args, this.plugins);\n  }\n\n  /**\n\t * @param  {...typeof Scale} args\n\t */\n  removeScales(...args) {\n    this._each('unregister', args, this.scales);\n  }\n\n  /**\n\t * @private\n\t */\n  _each(method, args, typedRegistry) {\n    [...args].forEach(arg => {\n      const reg = typedRegistry || this._getRegistryForType(arg);\n      if (typedRegistry || reg.isForType(arg) || (reg === this.plugins && arg.id)) {\n        this._exec(method, reg, arg);\n      } else {\n        // Handle loopable args\n        // Use case:\n        //  import * as plugins from './plugins.js';\n        //  Chart.register(plugins);\n        each(arg, item => {\n          // If there are mixed types in the loopable, make sure those are\n          // registered in correct registry\n          // Use case: (treemap exporting controller, elements etc)\n          //  import * as treemap from 'chartjs-chart-treemap.js';\n          //  Chart.register(treemap);\n\n          const itemReg = typedRegistry || this._getRegistryForType(item);\n          this._exec(method, itemReg, item);\n        });\n      }\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _exec(method, registry, component) {\n    const camelMethod = _capitalize(method);\n    call(component['before' + camelMethod], [], component); // beforeRegister / beforeUnregister\n    registry[method](component);\n    call(component['after' + camelMethod], [], component); // afterRegister / afterUnregister\n  }\n\n  /**\n\t * @private\n\t */\n  _getRegistryForType(type) {\n    for (let i = 0; i < this._typedRegistries.length; i++) {\n      const reg = this._typedRegistries[i];\n      if (reg.isForType(type)) {\n        return reg;\n      }\n    }\n    // plugins is the fallback registry\n    return this.plugins;\n  }\n\n  /**\n\t * @private\n\t */\n  _get(id, typedRegistry, type) {\n    const item = typedRegistry.get(id);\n    if (item === undefined) {\n      throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n    }\n    return item;\n  }\n\n}\n\n// singleton instance\nexport default /* #__PURE__ */ new Registry();\n","import registry from './core.registry.js';\nimport {callback as callCallback, isNullOrUndef, valueOrDefault} from '../helpers/helpers.core.js';\n\n/**\n * @typedef { import('./core.controller.js').default } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../plugins/plugin.tooltip.js').default } Tooltip\n */\n\n/**\n * @callback filterCallback\n * @param {{plugin: object, options: object}} value\n * @param {number} [index]\n * @param {array} [array]\n * @param {object} [thisArg]\n * @return {boolean}\n */\n\n\nexport default class PluginService {\n  constructor() {\n    this._init = [];\n  }\n\n  /**\n\t * Calls enabled plugins for `chart` on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {Chart} chart - The chart instance for which plugins should be called.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {object} [args] - Extra arguments to apply to the hook call.\n   * @param {filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notify(chart, hook, args, filter) {\n    if (hook === 'beforeInit') {\n      this._init = this._createDescriptors(chart, true);\n      this._notify(this._init, chart, 'install');\n    }\n\n    const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n    const result = this._notify(descriptors, chart, hook, args);\n\n    if (hook === 'afterDestroy') {\n      this._notify(descriptors, chart, 'stop');\n      this._notify(this._init, chart, 'uninstall');\n    }\n    return result;\n  }\n\n  /**\n\t * @private\n\t */\n  _notify(descriptors, chart, hook, args) {\n    args = args || {};\n    for (const descriptor of descriptors) {\n      const plugin = descriptor.plugin;\n      const method = plugin[hook];\n      const params = [chart, args, descriptor.options];\n      if (callCallback(method, params, plugin) === false && args.cancelable) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  invalidate() {\n    // When plugins are registered, there is the possibility of a double\n    // invalidate situation. In this case, we only want to invalidate once.\n    // If we invalidate multiple times, the `_oldCache` is lost and all of the\n    // plugins are restarted without being correctly stopped.\n    // See https://github.com/chartjs/Chart.js/issues/8147\n    if (!isNullOrUndef(this._cache)) {\n      this._oldCache = this._cache;\n      this._cache = undefined;\n    }\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _descriptors(chart) {\n    if (this._cache) {\n      return this._cache;\n    }\n\n    const descriptors = this._cache = this._createDescriptors(chart);\n\n    this._notifyStateChanges(chart);\n\n    return descriptors;\n  }\n\n  _createDescriptors(chart, all) {\n    const config = chart && chart.config;\n    const options = valueOrDefault(config.options && config.options.plugins, {});\n    const plugins = allPlugins(config);\n    // options === false => all plugins are disabled\n    return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n  }\n\n  /**\n\t * @param {Chart} chart\n\t * @private\n\t */\n  _notifyStateChanges(chart) {\n    const previousDescriptors = this._oldCache || [];\n    const descriptors = this._cache;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.plugin.id === y.plugin.id));\n    this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n    this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n  }\n}\n\n/**\n * @param {import('./core.config.js').default} config\n */\nfunction allPlugins(config) {\n  const localIds = {};\n  const plugins = [];\n  const keys = Object.keys(registry.plugins.items);\n  for (let i = 0; i < keys.length; i++) {\n    plugins.push(registry.getPlugin(keys[i]));\n  }\n\n  const local = config.plugins || [];\n  for (let i = 0; i < local.length; i++) {\n    const plugin = local[i];\n\n    if (plugins.indexOf(plugin) === -1) {\n      plugins.push(plugin);\n      localIds[plugin.id] = true;\n    }\n  }\n\n  return {plugins, localIds};\n}\n\nfunction getOpts(options, all) {\n  if (!all && options === false) {\n    return null;\n  }\n  if (options === true) {\n    return {};\n  }\n  return options;\n}\n\nfunction createDescriptors(chart, {plugins, localIds}, options, all) {\n  const result = [];\n  const context = chart.getContext();\n\n  for (const plugin of plugins) {\n    const id = plugin.id;\n    const opts = getOpts(options[id], all);\n    if (opts === null) {\n      continue;\n    }\n    result.push({\n      plugin,\n      options: pluginOpts(chart.config, {plugin, local: localIds[id]}, opts, context)\n    });\n  }\n\n  return result;\n}\n\nfunction pluginOpts(config, {plugin, local}, opts, context) {\n  const keys = config.pluginScopeKeys(plugin);\n  const scopes = config.getOptionScopes(opts, keys);\n  if (local && plugin.defaults) {\n    // make sure plugin defaults are in scopes for local (not registered) plugins\n    scopes.push(plugin.defaults);\n  }\n  return config.createResolver(scopes, context, [''], {\n    // These are just defaults that plugins can override\n    scriptable: false,\n    indexable: false,\n    allKeys: true\n  });\n}\n","import defaults, {overrides, descriptors} from './core.defaults.js';\nimport {mergeIf, resolveObjectKey, isArray, isFunction, valueOrDefault, isObject} from '../helpers/helpers.core.js';\nimport {_attachContext, _createResolver, _descriptors} from '../helpers/helpers.config.js';\n\nexport function getIndexAxis(type, options) {\n  const datasetDefaults = defaults.datasets[type] || {};\n  const datasetOptions = (options.datasets || {})[type] || {};\n  return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\n\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n  let axis = id;\n  if (id === '_index_') {\n    axis = indexAxis;\n  } else if (id === '_value_') {\n    axis = indexAxis === 'x' ? 'y' : 'x';\n  }\n  return axis;\n}\n\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n  return axis === indexAxis ? '_index_' : '_value_';\n}\n\nfunction idMatchesAxis(id) {\n  if (id === 'x' || id === 'y' || id === 'r') {\n    return id;\n  }\n}\n\nfunction axisFromPosition(position) {\n  if (position === 'top' || position === 'bottom') {\n    return 'x';\n  }\n  if (position === 'left' || position === 'right') {\n    return 'y';\n  }\n}\n\nexport function determineAxis(id, ...scaleOptions) {\n  if (idMatchesAxis(id)) {\n    return id;\n  }\n  for (const opts of scaleOptions) {\n    const axis = opts.axis\n      || axisFromPosition(opts.position)\n      || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n    if (axis) {\n      return axis;\n    }\n  }\n  throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\n\nfunction getAxisFromDataset(id, axis, dataset) {\n  if (dataset[axis + 'AxisID'] === id) {\n    return {axis};\n  }\n}\n\nfunction retrieveAxisFromDatasets(id, config) {\n  if (config.data && config.data.datasets) {\n    const boundDs = config.data.datasets.filter((d) => d.xAxisID === id || d.yAxisID === id);\n    if (boundDs.length) {\n      return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n    }\n  }\n  return {};\n}\n\nfunction mergeScaleConfig(config, options) {\n  const chartDefaults = overrides[config.type] || {scales: {}};\n  const configScales = options.scales || {};\n  const chartIndexAxis = getIndexAxis(config.type, options);\n  const scales = Object.create(null);\n\n  // First figure out first scale id's per axis.\n  Object.keys(configScales).forEach(id => {\n    const scaleConf = configScales[id];\n    if (!isObject(scaleConf)) {\n      return console.error(`Invalid scale configuration for scale: ${id}`);\n    }\n    if (scaleConf._proxy) {\n      return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n    }\n    const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n    const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n    const defaultScaleOptions = chartDefaults.scales || {};\n    scales[id] = mergeIf(Object.create(null), [{axis}, scaleConf, defaultScaleOptions[axis], defaultScaleOptions[defaultId]]);\n  });\n\n  // Then merge dataset defaults to scale configs\n  config.data.datasets.forEach(dataset => {\n    const type = dataset.type || config.type;\n    const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n    const datasetDefaults = overrides[type] || {};\n    const defaultScaleOptions = datasetDefaults.scales || {};\n    Object.keys(defaultScaleOptions).forEach(defaultID => {\n      const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n      const id = dataset[axis + 'AxisID'] || axis;\n      scales[id] = scales[id] || Object.create(null);\n      mergeIf(scales[id], [{axis}, configScales[id], defaultScaleOptions[defaultID]]);\n    });\n  });\n\n  // apply scale defaults, if not overridden by dataset defaults\n  Object.keys(scales).forEach(key => {\n    const scale = scales[key];\n    mergeIf(scale, [defaults.scales[scale.type], defaults.scale]);\n  });\n\n  return scales;\n}\n\nfunction initOptions(config) {\n  const options = config.options || (config.options = {});\n\n  options.plugins = valueOrDefault(options.plugins, {});\n  options.scales = mergeScaleConfig(config, options);\n}\n\nfunction initData(data) {\n  data = data || {};\n  data.datasets = data.datasets || [];\n  data.labels = data.labels || [];\n  return data;\n}\n\nfunction initConfig(config) {\n  config = config || {};\n  config.data = initData(config.data);\n\n  initOptions(config);\n\n  return config;\n}\n\nconst keyCache = new Map();\nconst keysCached = new Set();\n\nfunction cachedKeys(cacheKey, generate) {\n  let keys = keyCache.get(cacheKey);\n  if (!keys) {\n    keys = generate();\n    keyCache.set(cacheKey, keys);\n    keysCached.add(keys);\n  }\n  return keys;\n}\n\nconst addIfFound = (set, obj, key) => {\n  const opts = resolveObjectKey(obj, key);\n  if (opts !== undefined) {\n    set.add(opts);\n  }\n};\n\nexport default class Config {\n  constructor(config) {\n    this._config = initConfig(config);\n    this._scopeCache = new Map();\n    this._resolverCache = new Map();\n  }\n\n  get platform() {\n    return this._config.platform;\n  }\n\n  get type() {\n    return this._config.type;\n  }\n\n  set type(type) {\n    this._config.type = type;\n  }\n\n  get data() {\n    return this._config.data;\n  }\n\n  set data(data) {\n    this._config.data = initData(data);\n  }\n\n  get options() {\n    return this._config.options;\n  }\n\n  set options(options) {\n    this._config.options = options;\n  }\n\n  get plugins() {\n    return this._config.plugins;\n  }\n\n  update() {\n    const config = this._config;\n    this.clearCache();\n    initOptions(config);\n  }\n\n  clearCache() {\n    this._scopeCache.clear();\n    this._resolverCache.clear();\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @return {string[][]}\n   */\n  datasetScopeKeys(datasetType) {\n    return cachedKeys(datasetType,\n      () => [[\n        `datasets.${datasetType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the option scope keys for resolving dataset animation options.\n   * These keys do not include the dataset itself, because it is not under options.\n   * @param {string} datasetType\n   * @param {string} transition\n   * @return {string[][]}\n   */\n  datasetAnimationScopeKeys(datasetType, transition) {\n    return cachedKeys(`${datasetType}.transition.${transition}`,\n      () => [\n        [\n          `datasets.${datasetType}.transitions.${transition}`,\n          `transitions.${transition}`,\n        ],\n        // The following are used for looking up the `animations` and `animation` keys\n        [\n          `datasets.${datasetType}`,\n          ''\n        ]\n      ]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving element options that belong\n   * to an dataset. These keys do not include the dataset itself, because it\n   * is not under options.\n   * @param {string} datasetType\n   * @param {string} elementType\n   * @return {string[][]}\n   */\n  datasetElementScopeKeys(datasetType, elementType) {\n    return cachedKeys(`${datasetType}-${elementType}`,\n      () => [[\n        `datasets.${datasetType}.elements.${elementType}`,\n        `datasets.${datasetType}`,\n        `elements.${elementType}`,\n        ''\n      ]]);\n  }\n\n  /**\n   * Returns the options scope keys for resolving plugin options.\n   * @param {{id: string, additionalOptionScopes?: string[]}} plugin\n   * @return {string[][]}\n   */\n  pluginScopeKeys(plugin) {\n    const id = plugin.id;\n    const type = this.type;\n    return cachedKeys(`${type}-plugin-${id}`,\n      () => [[\n        `plugins.${id}`,\n        ...plugin.additionalOptionScopes || [],\n      ]]);\n  }\n\n  /**\n   * @private\n   */\n  _cachedScopes(mainScope, resetCache) {\n    const _scopeCache = this._scopeCache;\n    let cache = _scopeCache.get(mainScope);\n    if (!cache || resetCache) {\n      cache = new Map();\n      _scopeCache.set(mainScope, cache);\n    }\n    return cache;\n  }\n\n  /**\n   * Resolves the objects from options and defaults for option value resolution.\n   * @param {object} mainScope - The main scope object for options\n   * @param {string[][]} keyLists - The arrays of keys in resolution order\n   * @param {boolean} [resetCache] - reset the cache for this mainScope\n   */\n  getOptionScopes(mainScope, keyLists, resetCache) {\n    const {options, type} = this;\n    const cache = this._cachedScopes(mainScope, resetCache);\n    const cached = cache.get(keyLists);\n    if (cached) {\n      return cached;\n    }\n\n    const scopes = new Set();\n\n    keyLists.forEach(keys => {\n      if (mainScope) {\n        scopes.add(mainScope);\n        keys.forEach(key => addIfFound(scopes, mainScope, key));\n      }\n      keys.forEach(key => addIfFound(scopes, options, key));\n      keys.forEach(key => addIfFound(scopes, overrides[type] || {}, key));\n      keys.forEach(key => addIfFound(scopes, defaults, key));\n      keys.forEach(key => addIfFound(scopes, descriptors, key));\n    });\n\n    const array = Array.from(scopes);\n    if (array.length === 0) {\n      array.push(Object.create(null));\n    }\n    if (keysCached.has(keyLists)) {\n      cache.set(keyLists, array);\n    }\n    return array;\n  }\n\n  /**\n   * Returns the option scopes for resolving chart options\n   * @return {object[]}\n   */\n  chartOptionScopes() {\n    const {options, type} = this;\n\n    return [\n      options,\n      overrides[type] || {},\n      defaults.datasets[type] || {}, // https://github.com/chartjs/Chart.js/issues/8531\n      {type},\n      defaults,\n      descriptors\n    ];\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {string[]} names\n   * @param {function|object} context\n   * @param {string[]} [prefixes]\n   * @return {object}\n   */\n  resolveNamedOptions(scopes, names, context, prefixes = ['']) {\n    const result = {$shared: true};\n    const {resolver, subPrefixes} = getResolver(this._resolverCache, scopes, prefixes);\n    let options = resolver;\n    if (needContext(resolver, names)) {\n      result.$shared = false;\n      context = isFunction(context) ? context() : context;\n      // subResolver is passed to scriptable options. It should not resolve to hover options.\n      const subResolver = this.createResolver(scopes, context, subPrefixes);\n      options = _attachContext(resolver, context, subResolver);\n    }\n\n    for (const prop of names) {\n      result[prop] = options[prop];\n    }\n    return result;\n  }\n\n  /**\n   * @param {object[]} scopes\n   * @param {object} [context]\n   * @param {string[]} [prefixes]\n   * @param {{scriptable: boolean, indexable: boolean, allKeys?: boolean}} [descriptorDefaults]\n   */\n  createResolver(scopes, context, prefixes = [''], descriptorDefaults) {\n    const {resolver} = getResolver(this._resolverCache, scopes, prefixes);\n    return isObject(context)\n      ? _attachContext(resolver, context, undefined, descriptorDefaults)\n      : resolver;\n  }\n}\n\nfunction getResolver(resolverCache, scopes, prefixes) {\n  let cache = resolverCache.get(scopes);\n  if (!cache) {\n    cache = new Map();\n    resolverCache.set(scopes, cache);\n  }\n  const cacheKey = prefixes.join();\n  let cached = cache.get(cacheKey);\n  if (!cached) {\n    const resolver = _createResolver(scopes, prefixes);\n    cached = {\n      resolver,\n      subPrefixes: prefixes.filter(p => !p.toLowerCase().includes('hover'))\n    };\n    cache.set(cacheKey, cached);\n  }\n  return cached;\n}\n\nconst hasFunction = value => isObject(value)\n  && Object.getOwnPropertyNames(value).some((key) => isFunction(value[key]));\n\nfunction needContext(proxy, names) {\n  const {isScriptable, isIndexable} = _descriptors(proxy);\n\n  for (const prop of names) {\n    const scriptable = isScriptable(prop);\n    const indexable = isIndexable(prop);\n    const value = (indexable || scriptable) && proxy[prop];\n    if ((scriptable && (isFunction(value) || hasFunction(value)))\n      || (indexable && isArray(value))) {\n      return true;\n    }\n  }\n  return false;\n}\n","import animator from './core.animator.js';\nimport defaults, {overrides} from './core.defaults.js';\nimport Interaction from './core.interaction.js';\nimport layouts from './core.layouts.js';\nimport {_detectPlatform} from '../platform/index.js';\nimport PluginService from './core.plugins.js';\nimport registry from './core.registry.js';\nimport Config, {determineAxis, getIndexAxis} from './core.config.js';\nimport {retinaScale, _isDomSupported} from '../helpers/helpers.dom.js';\nimport {each, callback as callCallback, uid, valueOrDefault, _elementsEqual, isNullOrUndef, setsEqual, defined, isFunction, _isClickEvent} from '../helpers/helpers.core.js';\nimport {clearCanvas, clipArea, createContext, unclipArea, _isPointInArea} from '../helpers/index.js';\n// @ts-ignore\nimport {version} from '../../package.json';\nimport {debounce} from '../helpers/helpers.extras.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').Point } Point\n */\n\nconst KNOWN_POSITIONS = ['top', 'bottom', 'left', 'right', 'chartArea'];\nfunction positionIsHorizontal(position, axis) {\n  return position === 'top' || position === 'bottom' || (KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x');\n}\n\nfunction compare2Level(l1, l2) {\n  return function(a, b) {\n    return a[l1] === b[l1]\n      ? a[l2] - b[l2]\n      : a[l1] - b[l1];\n  };\n}\n\nfunction onAnimationsComplete(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n\n  chart.notifyPlugins('afterRender');\n  callCallback(animationOptions && animationOptions.onComplete, [context], chart);\n}\n\nfunction onAnimationProgress(context) {\n  const chart = context.chart;\n  const animationOptions = chart.options.animation;\n  callCallback(animationOptions && animationOptions.onProgress, [context], chart);\n}\n\n/**\n * Chart.js can take a string id of a canvas element, a 2d context, or a canvas element itself.\n * Attempt to unwrap the item passed into the chart constructor so that it is a canvas element (if possible).\n */\nfunction getCanvas(item) {\n  if (_isDomSupported() && typeof item === 'string') {\n    item = document.getElementById(item);\n  } else if (item && item.length) {\n    // Support for array based queries (such as jQuery)\n    item = item[0];\n  }\n\n  if (item && item.canvas) {\n    // Support for any object associated to a canvas (including a context2d)\n    item = item.canvas;\n  }\n  return item;\n}\n\nconst instances = {};\nconst getChart = (key) => {\n  const canvas = getCanvas(key);\n  return Object.values(instances).filter((c) => c.canvas === canvas).pop();\n};\n\nfunction moveNumericKeys(obj, start, move) {\n  const keys = Object.keys(obj);\n  for (const key of keys) {\n    const intKey = +key;\n    if (intKey >= start) {\n      const value = obj[key];\n      delete obj[key];\n      if (move > 0 || intKey > start) {\n        obj[intKey + move] = value;\n      }\n    }\n  }\n}\n\n/**\n * @param {ChartEvent} e\n * @param {ChartEvent|null} lastEvent\n * @param {boolean} inChartArea\n * @param {boolean} isClick\n * @returns {ChartEvent|null}\n */\nfunction determineLastEvent(e, lastEvent, inChartArea, isClick) {\n  if (!inChartArea || e.type === 'mouseout') {\n    return null;\n  }\n  if (isClick) {\n    return lastEvent;\n  }\n  return e;\n}\n\nfunction getSizeForArea(scale, chartArea, field) {\n  return scale.options.clip ? scale[field] : chartArea[field];\n}\n\nfunction getDatasetArea(meta, chartArea) {\n  const {xScale, yScale} = meta;\n  if (xScale && yScale) {\n    return {\n      left: getSizeForArea(xScale, chartArea, 'left'),\n      right: getSizeForArea(xScale, chartArea, 'right'),\n      top: getSizeForArea(yScale, chartArea, 'top'),\n      bottom: getSizeForArea(yScale, chartArea, 'bottom')\n    };\n  }\n  return chartArea;\n}\n\nclass Chart {\n\n  static defaults = defaults;\n  static instances = instances;\n  static overrides = overrides;\n  static registry = registry;\n  static version = version;\n  static getChart = getChart;\n\n  static register(...items) {\n    registry.add(...items);\n    invalidatePlugins();\n  }\n\n  static unregister(...items) {\n    registry.remove(...items);\n    invalidatePlugins();\n  }\n\n  // eslint-disable-next-line max-statements\n  constructor(item, userConfig) {\n    const config = this.config = new Config(userConfig);\n    const initialCanvas = getCanvas(item);\n    const existingChart = getChart(initialCanvas);\n    if (existingChart) {\n      throw new Error(\n        'Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' +\n\t\t\t\t' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.'\n      );\n    }\n\n    const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n\n    this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n    this.platform.updateConfig(config);\n\n    const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n    const canvas = context && context.canvas;\n    const height = canvas && canvas.height;\n    const width = canvas && canvas.width;\n\n    this.id = uid();\n    this.ctx = context;\n    this.canvas = canvas;\n    this.width = width;\n    this.height = height;\n    this._options = options;\n    // Store the previously used aspect ratio to determine if a resize\n    // is needed during updates. Do this after _options is set since\n    // aspectRatio uses a getter\n    this._aspectRatio = this.aspectRatio;\n    this._layers = [];\n    this._metasets = [];\n    this._stacks = undefined;\n    this.boxes = [];\n    this.currentDevicePixelRatio = undefined;\n    this.chartArea = undefined;\n    this._active = [];\n    this._lastEvent = undefined;\n    this._listeners = {};\n    /** @type {?{attach?: function, detach?: function, resize?: function}} */\n    this._responsiveListeners = undefined;\n    this._sortedMetasets = [];\n    this.scales = {};\n    this._plugins = new PluginService();\n    this.$proxies = {};\n    this._hiddenIndices = {};\n    this.attached = false;\n    this._animationsDisabled = undefined;\n    this.$context = undefined;\n    this._doResize = debounce(mode => this.update(mode), options.resizeDelay || 0);\n    this._dataChanges = [];\n\n    // Add the chart instance to the global namespace\n    instances[this.id] = this;\n\n    if (!context || !canvas) {\n      // The given item is not a compatible context2d element, let's return before finalizing\n      // the chart initialization but after setting basic chart / controller properties that\n      // can help to figure out that the chart is not valid (e.g chart.canvas !== null);\n      // https://github.com/chartjs/Chart.js/issues/2807\n      console.error(\"Failed to create chart: can't acquire context from the given item\");\n      return;\n    }\n\n    animator.listen(this, 'complete', onAnimationsComplete);\n    animator.listen(this, 'progress', onAnimationProgress);\n\n    this._initialize();\n    if (this.attached) {\n      this.update();\n    }\n  }\n\n  get aspectRatio() {\n    const {options: {aspectRatio, maintainAspectRatio}, width, height, _aspectRatio} = this;\n    if (!isNullOrUndef(aspectRatio)) {\n      // If aspectRatio is defined in options, use that.\n      return aspectRatio;\n    }\n\n    if (maintainAspectRatio && _aspectRatio) {\n      // If maintainAspectRatio is truthly and we had previously determined _aspectRatio, use that\n      return _aspectRatio;\n    }\n\n    // Calculate\n    return height ? width / height : null;\n  }\n\n  get data() {\n    return this.config.data;\n  }\n\n  set data(data) {\n    this.config.data = data;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  set options(options) {\n    this.config.options = options;\n  }\n\n  get registry() {\n    return registry;\n  }\n\n  /**\n\t * @private\n\t */\n  _initialize() {\n    // Before init plugin notification\n    this.notifyPlugins('beforeInit');\n\n    if (this.options.responsive) {\n      this.resize();\n    } else {\n      retinaScale(this, this.options.devicePixelRatio);\n    }\n\n    this.bindEvents();\n\n    // After init plugin notification\n    this.notifyPlugins('afterInit');\n\n    return this;\n  }\n\n  clear() {\n    clearCanvas(this.canvas, this.ctx);\n    return this;\n  }\n\n  stop() {\n    animator.stop(this);\n    return this;\n  }\n\n  /**\n\t * Resize the chart to its container or to explicit dimensions.\n\t * @param {number} [width]\n\t * @param {number} [height]\n\t */\n  resize(width, height) {\n    if (!animator.running(this)) {\n      this._resize(width, height);\n    } else {\n      this._resizeBeforeDraw = {width, height};\n    }\n  }\n\n  _resize(width, height) {\n    const options = this.options;\n    const canvas = this.canvas;\n    const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n    const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n    const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n    const mode = this.width ? 'resize' : 'attach';\n\n    this.width = newSize.width;\n    this.height = newSize.height;\n    this._aspectRatio = this.aspectRatio;\n    if (!retinaScale(this, newRatio, true)) {\n      return;\n    }\n\n    this.notifyPlugins('resize', {size: newSize});\n\n    callCallback(options.onResize, [this, newSize], this);\n\n    if (this.attached) {\n      if (this._doResize(mode)) {\n        // The resize update is delayed, only draw without updating.\n        this.render();\n      }\n    }\n  }\n\n  ensureScalesHaveIDs() {\n    const options = this.options;\n    const scalesOptions = options.scales || {};\n\n    each(scalesOptions, (axisOptions, axisID) => {\n      axisOptions.id = axisID;\n    });\n  }\n\n  /**\n\t * Builds a map of scale ID to scale object for future lookup.\n\t */\n  buildOrUpdateScales() {\n    const options = this.options;\n    const scaleOpts = options.scales;\n    const scales = this.scales;\n    const updated = Object.keys(scales).reduce((obj, id) => {\n      obj[id] = false;\n      return obj;\n    }, {});\n    let items = [];\n\n    if (scaleOpts) {\n      items = items.concat(\n        Object.keys(scaleOpts).map((id) => {\n          const scaleOptions = scaleOpts[id];\n          const axis = determineAxis(id, scaleOptions);\n          const isRadial = axis === 'r';\n          const isHorizontal = axis === 'x';\n          return {\n            options: scaleOptions,\n            dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n            dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n          };\n        })\n      );\n    }\n\n    each(items, (item) => {\n      const scaleOptions = item.options;\n      const id = scaleOptions.id;\n      const axis = determineAxis(id, scaleOptions);\n      const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n\n      if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n        scaleOptions.position = item.dposition;\n      }\n\n      updated[id] = true;\n      let scale = null;\n      if (id in scales && scales[id].type === scaleType) {\n        scale = scales[id];\n      } else {\n        const scaleClass = registry.getScale(scaleType);\n        scale = new scaleClass({\n          id,\n          type: scaleType,\n          ctx: this.ctx,\n          chart: this\n        });\n        scales[scale.id] = scale;\n      }\n\n      scale.init(scaleOptions, options);\n    });\n    // clear up discarded scales\n    each(updated, (hasUpdated, id) => {\n      if (!hasUpdated) {\n        delete scales[id];\n      }\n    });\n\n    each(scales, (scale) => {\n      layouts.configure(this, scale, scale.options);\n      layouts.addBox(this, scale);\n    });\n  }\n\n  /**\n\t * @private\n\t */\n  _updateMetasets() {\n    const metasets = this._metasets;\n    const numData = this.data.datasets.length;\n    const numMeta = metasets.length;\n\n    metasets.sort((a, b) => a.index - b.index);\n    if (numMeta > numData) {\n      for (let i = numData; i < numMeta; ++i) {\n        this._destroyDatasetMeta(i);\n      }\n      metasets.splice(numData, numMeta - numData);\n    }\n    this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n  }\n\n  /**\n\t * @private\n\t */\n  _removeUnreferencedMetasets() {\n    const {_metasets: metasets, data: {datasets}} = this;\n    if (metasets.length > datasets.length) {\n      delete this._stacks;\n    }\n    metasets.forEach((meta, index) => {\n      if (datasets.filter(x => x === meta._dataset).length === 0) {\n        this._destroyDatasetMeta(index);\n      }\n    });\n  }\n\n  buildOrUpdateControllers() {\n    const newControllers = [];\n    const datasets = this.data.datasets;\n    let i, ilen;\n\n    this._removeUnreferencedMetasets();\n\n    for (i = 0, ilen = datasets.length; i < ilen; i++) {\n      const dataset = datasets[i];\n      let meta = this.getDatasetMeta(i);\n      const type = dataset.type || this.config.type;\n\n      if (meta.type && meta.type !== type) {\n        this._destroyDatasetMeta(i);\n        meta = this.getDatasetMeta(i);\n      }\n      meta.type = type;\n      meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n      meta.order = dataset.order || 0;\n      meta.index = i;\n      meta.label = '' + dataset.label;\n      meta.visible = this.isDatasetVisible(i);\n\n      if (meta.controller) {\n        meta.controller.updateIndex(i);\n        meta.controller.linkScales();\n      } else {\n        const ControllerClass = registry.getController(type);\n        const {datasetElementType, dataElementType} = defaults.datasets[type];\n        Object.assign(ControllerClass, {\n          dataElementType: registry.getElement(dataElementType),\n          datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n        });\n        meta.controller = new ControllerClass(this, i);\n        newControllers.push(meta.controller);\n      }\n    }\n\n    this._updateMetasets();\n    return newControllers;\n  }\n\n  /**\n\t * Reset the elements of all datasets\n\t * @private\n\t */\n  _resetElements() {\n    each(this.data.datasets, (dataset, datasetIndex) => {\n      this.getDatasetMeta(datasetIndex).controller.reset();\n    }, this);\n  }\n\n  /**\n\t* Resets the chart back to its state before the initial animation\n\t*/\n  reset() {\n    this._resetElements();\n    this.notifyPlugins('reset');\n  }\n\n  update(mode) {\n    const config = this.config;\n\n    config.update();\n    const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n    const animsDisabled = this._animationsDisabled = !options.animation;\n\n    this._updateScales();\n    this._checkEventBindings();\n    this._updateHiddenIndices();\n\n    // plugins options references might have change, let's invalidate the cache\n    // https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167\n    this._plugins.invalidate();\n\n    if (this.notifyPlugins('beforeUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    // Make sure dataset controllers are updated and new controllers are reset\n    const newControllers = this.buildOrUpdateControllers();\n\n    this.notifyPlugins('beforeElementsUpdate');\n\n    // Make sure all dataset controllers have correct meta data counts\n    let minPadding = 0;\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; i++) {\n      const {controller} = this.getDatasetMeta(i);\n      const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n      // New controllers will be reset after the layout pass, so we only want to modify\n      // elements added to new datasets\n      controller.buildOrUpdateElements(reset);\n      minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n    }\n    minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n    this._updateLayout(minPadding);\n\n    // Only reset the controllers if we have animations\n    if (!animsDisabled) {\n      // Can only reset the new controllers after the scales have been updated\n      // Reset is done to get the starting point for the initial animation\n      each(newControllers, (controller) => {\n        controller.reset();\n      });\n    }\n\n    this._updateDatasets(mode);\n\n    // Do this before render so that any plugins that need final scale updates can use it\n    this.notifyPlugins('afterUpdate', {mode});\n\n    this._layers.sort(compare2Level('z', '_idx'));\n\n    // Replay last event from before update, or set hover styles on active elements\n    const {_active, _lastEvent} = this;\n    if (_lastEvent) {\n      this._eventHandler(_lastEvent, true);\n    } else if (_active.length) {\n      this._updateHoverStyles(_active, _active, true);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  _updateScales() {\n    each(this.scales, (scale) => {\n      layouts.removeBox(this, scale);\n    });\n\n    this.ensureScalesHaveIDs();\n    this.buildOrUpdateScales();\n  }\n\n  /**\n   * @private\n   */\n  _checkEventBindings() {\n    const options = this.options;\n    const existingEvents = new Set(Object.keys(this._listeners));\n    const newEvents = new Set(options.events);\n\n    if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n      // The configured events have changed. Rebind.\n      this.unbindEvents();\n      this.bindEvents();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _updateHiddenIndices() {\n    const {_hiddenIndices} = this;\n    const changes = this._getUniformDataChanges() || [];\n    for (const {method, start, count} of changes) {\n      const move = method === '_removeElements' ? -count : count;\n      moveNumericKeys(_hiddenIndices, start, move);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _getUniformDataChanges() {\n    const _dataChanges = this._dataChanges;\n    if (!_dataChanges || !_dataChanges.length) {\n      return;\n    }\n\n    this._dataChanges = [];\n    const datasetCount = this.data.datasets.length;\n    const makeSet = (idx) => new Set(\n      _dataChanges\n        .filter(c => c[0] === idx)\n        .map((c, i) => i + ',' + c.splice(1).join(','))\n    );\n\n    const changeSet = makeSet(0);\n    for (let i = 1; i < datasetCount; i++) {\n      if (!setsEqual(changeSet, makeSet(i))) {\n        return;\n      }\n    }\n    return Array.from(changeSet)\n      .map(c => c.split(','))\n      .map(a => ({method: a[1], start: +a[2], count: +a[3]}));\n  }\n\n  /**\n\t * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`\n\t * hook, in which case, plugins will not be called on `afterLayout`.\n\t * @private\n\t */\n  _updateLayout(minPadding) {\n    if (this.notifyPlugins('beforeLayout', {cancelable: true}) === false) {\n      return;\n    }\n\n    layouts.update(this, this.width, this.height, minPadding);\n\n    const area = this.chartArea;\n    const noArea = area.width <= 0 || area.height <= 0;\n\n    this._layers = [];\n    each(this.boxes, (box) => {\n      if (noArea && box.position === 'chartArea') {\n        // Skip drawing and configuring chartArea boxes when chartArea is zero or negative\n        return;\n      }\n\n      // configure is called twice, once in core.scale.update and once here.\n      // Here the boxes are fully updated and at their final positions.\n      if (box.configure) {\n        box.configure();\n      }\n      this._layers.push(...box._layers());\n    }, this);\n\n    this._layers.forEach((item, index) => {\n      item._idx = index;\n    });\n\n    this.notifyPlugins('afterLayout');\n  }\n\n  /**\n\t * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.\n\t * @private\n\t */\n  _updateDatasets(mode) {\n    if (this.notifyPlugins('beforeDatasetsUpdate', {mode, cancelable: true}) === false) {\n      return;\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this.getDatasetMeta(i).controller.configure();\n    }\n\n    for (let i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._updateDataset(i, isFunction(mode) ? mode({datasetIndex: i}) : mode);\n    }\n\n    this.notifyPlugins('afterDatasetsUpdate', {mode});\n  }\n\n  /**\n\t * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`\n\t * hook, in which case, plugins will not be called on `afterDatasetUpdate`.\n\t * @private\n\t */\n  _updateDataset(index, mode) {\n    const meta = this.getDatasetMeta(index);\n    const args = {meta, index, mode, cancelable: true};\n\n    if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n      return;\n    }\n\n    meta.controller._update(mode);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetUpdate', args);\n  }\n\n  render() {\n    if (this.notifyPlugins('beforeRender', {cancelable: true}) === false) {\n      return;\n    }\n\n    if (animator.has(this)) {\n      if (this.attached && !animator.running(this)) {\n        animator.start(this);\n      }\n    } else {\n      this.draw();\n      onAnimationsComplete({chart: this});\n    }\n  }\n\n  draw() {\n    let i;\n    if (this._resizeBeforeDraw) {\n      const {width, height} = this._resizeBeforeDraw;\n      this._resize(width, height);\n      this._resizeBeforeDraw = null;\n    }\n    this.clear();\n\n    if (this.width <= 0 || this.height <= 0) {\n      return;\n    }\n\n    if (this.notifyPlugins('beforeDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    // Because of plugin hooks (before/afterDatasetsDraw), datasets can't\n    // currently be part of layers. Instead, we draw\n    // layers <= 0 before(default, backward compat), and the rest after\n    const layers = this._layers;\n    for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this._drawDatasets();\n\n    // Rest of layers\n    for (; i < layers.length; ++i) {\n      layers[i].draw(this.chartArea);\n    }\n\n    this.notifyPlugins('afterDraw');\n  }\n\n  /**\n\t * @private\n\t */\n  _getSortedDatasetMetas(filterVisible) {\n    const metasets = this._sortedMetasets;\n    const result = [];\n    let i, ilen;\n\n    for (i = 0, ilen = metasets.length; i < ilen; ++i) {\n      const meta = metasets[i];\n      if (!filterVisible || meta.visible) {\n        result.push(meta);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n\t * Gets the visible dataset metas in drawing order\n\t * @return {object[]}\n\t */\n  getSortedVisibleDatasetMetas() {\n    return this._getSortedDatasetMetas(true);\n  }\n\n  /**\n\t * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetsDraw`.\n\t * @private\n\t */\n  _drawDatasets() {\n    if (this.notifyPlugins('beforeDatasetsDraw', {cancelable: true}) === false) {\n      return;\n    }\n\n    const metasets = this.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      this._drawDataset(metasets[i]);\n    }\n\n    this.notifyPlugins('afterDatasetsDraw');\n  }\n\n  /**\n\t * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`\n\t * hook, in which case, plugins will not be called on `afterDatasetDraw`.\n\t * @private\n\t */\n  _drawDataset(meta) {\n    const ctx = this.ctx;\n    const clip = meta._clip;\n    const useClip = !clip.disabled;\n    const area = getDatasetArea(meta, this.chartArea);\n    const args = {\n      meta,\n      index: meta.index,\n      cancelable: true\n    };\n\n    if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n      return;\n    }\n\n    if (useClip) {\n      clipArea(ctx, {\n        left: clip.left === false ? 0 : area.left - clip.left,\n        right: clip.right === false ? this.width : area.right + clip.right,\n        top: clip.top === false ? 0 : area.top - clip.top,\n        bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n      });\n    }\n\n    meta.controller.draw();\n\n    if (useClip) {\n      unclipArea(ctx);\n    }\n\n    args.cancelable = false;\n    this.notifyPlugins('afterDatasetDraw', args);\n  }\n\n  /**\n   * Checks whether the given point is in the chart area.\n   * @param {Point} point - in relative coordinates (see, e.g., getRelativePosition)\n   * @returns {boolean}\n   */\n  isPointInArea(point) {\n    return _isPointInArea(point, this.chartArea, this._minPadding);\n  }\n\n  getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n    const method = Interaction.modes[mode];\n    if (typeof method === 'function') {\n      return method(this, e, options, useFinalPosition);\n    }\n\n    return [];\n  }\n\n  getDatasetMeta(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    const metasets = this._metasets;\n    let meta = metasets.filter(x => x && x._dataset === dataset).pop();\n\n    if (!meta) {\n      meta = {\n        type: null,\n        data: [],\n        dataset: null,\n        controller: null,\n        hidden: null,\t\t\t// See isDatasetVisible() comment\n        xAxisID: null,\n        yAxisID: null,\n        order: dataset && dataset.order || 0,\n        index: datasetIndex,\n        _dataset: dataset,\n        _parsed: [],\n        _sorted: false\n      };\n      metasets.push(meta);\n    }\n\n    return meta;\n  }\n\n  getContext() {\n    return this.$context || (this.$context = createContext(null, {chart: this, type: 'chart'}));\n  }\n\n  getVisibleDatasetCount() {\n    return this.getSortedVisibleDatasetMetas().length;\n  }\n\n  isDatasetVisible(datasetIndex) {\n    const dataset = this.data.datasets[datasetIndex];\n    if (!dataset) {\n      return false;\n    }\n\n    const meta = this.getDatasetMeta(datasetIndex);\n\n    // meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,\n    // the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.\n    return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n  }\n\n  setDatasetVisibility(datasetIndex, visible) {\n    const meta = this.getDatasetMeta(datasetIndex);\n    meta.hidden = !visible;\n  }\n\n  toggleDataVisibility(index) {\n    this._hiddenIndices[index] = !this._hiddenIndices[index];\n  }\n\n  getDataVisibility(index) {\n    return !this._hiddenIndices[index];\n  }\n\n  /**\n\t * @private\n\t */\n  _updateVisibility(datasetIndex, dataIndex, visible) {\n    const mode = visible ? 'show' : 'hide';\n    const meta = this.getDatasetMeta(datasetIndex);\n    const anims = meta.controller._resolveAnimations(undefined, mode);\n\n    if (defined(dataIndex)) {\n      meta.data[dataIndex].hidden = !visible;\n      this.update();\n    } else {\n      this.setDatasetVisibility(datasetIndex, visible);\n      // Animate visible state, so hide animation can be seen. This could be handled better if update / updateDataset returned a Promise.\n      anims.update(meta, {visible});\n      this.update((ctx) => ctx.datasetIndex === datasetIndex ? mode : undefined);\n    }\n  }\n\n  hide(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, false);\n  }\n\n  show(datasetIndex, dataIndex) {\n    this._updateVisibility(datasetIndex, dataIndex, true);\n  }\n\n  /**\n\t * @private\n\t */\n  _destroyDatasetMeta(datasetIndex) {\n    const meta = this._metasets[datasetIndex];\n    if (meta && meta.controller) {\n      meta.controller._destroy();\n    }\n    delete this._metasets[datasetIndex];\n  }\n\n  _stop() {\n    let i, ilen;\n    this.stop();\n    animator.remove(this);\n\n    for (i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {\n      this._destroyDatasetMeta(i);\n    }\n  }\n\n  destroy() {\n    this.notifyPlugins('beforeDestroy');\n    const {canvas, ctx} = this;\n\n    this._stop();\n    this.config.clearCache();\n\n    if (canvas) {\n      this.unbindEvents();\n      clearCanvas(canvas, ctx);\n      this.platform.releaseContext(ctx);\n      this.canvas = null;\n      this.ctx = null;\n    }\n\n    delete instances[this.id];\n\n    this.notifyPlugins('afterDestroy');\n  }\n\n  toBase64Image(...args) {\n    return this.canvas.toDataURL(...args);\n  }\n\n  /**\n\t * @private\n\t */\n  bindEvents() {\n    this.bindUserEvents();\n    if (this.options.responsive) {\n      this.bindResponsiveEvents();\n    } else {\n      this.attached = true;\n    }\n  }\n\n  /**\n   * @private\n   */\n  bindUserEvents() {\n    const listeners = this._listeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n\n    const listener = (e, x, y) => {\n      e.offsetX = x;\n      e.offsetY = y;\n      this._eventHandler(e);\n    };\n\n    each(this.options.events, (type) => _add(type, listener));\n  }\n\n  /**\n   * @private\n   */\n  bindResponsiveEvents() {\n    if (!this._responsiveListeners) {\n      this._responsiveListeners = {};\n    }\n    const listeners = this._responsiveListeners;\n    const platform = this.platform;\n\n    const _add = (type, listener) => {\n      platform.addEventListener(this, type, listener);\n      listeners[type] = listener;\n    };\n    const _remove = (type, listener) => {\n      if (listeners[type]) {\n        platform.removeEventListener(this, type, listener);\n        delete listeners[type];\n      }\n    };\n\n    const listener = (width, height) => {\n      if (this.canvas) {\n        this.resize(width, height);\n      }\n    };\n\n    let detached; // eslint-disable-line prefer-const\n    const attached = () => {\n      _remove('attach', attached);\n\n      this.attached = true;\n      this.resize();\n\n      _add('resize', listener);\n      _add('detach', detached);\n    };\n\n    detached = () => {\n      this.attached = false;\n\n      _remove('resize', listener);\n\n      // Stop animating and remove metasets, so when re-attached, the animations start from beginning.\n      this._stop();\n      this._resize(0, 0);\n\n      _add('attach', attached);\n    };\n\n    if (platform.isAttached(this.canvas)) {\n      attached();\n    } else {\n      detached();\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  unbindEvents() {\n    each(this._listeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._listeners = {};\n\n    each(this._responsiveListeners, (listener, type) => {\n      this.platform.removeEventListener(this, type, listener);\n    });\n    this._responsiveListeners = undefined;\n  }\n\n  updateHoverStyle(items, mode, enabled) {\n    const prefix = enabled ? 'set' : 'remove';\n    let meta, item, i, ilen;\n\n    if (mode === 'dataset') {\n      meta = this.getDatasetMeta(items[0].datasetIndex);\n      meta.controller['_' + prefix + 'DatasetHoverStyle']();\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      item = items[i];\n      const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n      if (controller) {\n        controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n      }\n    }\n  }\n\n  /**\n\t * Get active (hovered) elements\n\t * @returns array\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active (hovered) elements\n\t * @param {array} activeElements New active data points\n\t */\n  setActiveElements(activeElements) {\n    const lastActive = this._active || [];\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.getDatasetMeta(datasetIndex);\n      if (!meta) {\n        throw new Error('No dataset found at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(active, lastActive);\n\n    if (changed) {\n      this._active = active;\n      // Make sure we don't use the previous mouse event to override the active elements in update.\n      this._lastEvent = null;\n      this._updateHoverStyles(active, lastActive);\n    }\n  }\n\n  /**\n\t * Calls enabled plugins on the specified hook and with the given args.\n\t * This method immediately returns as soon as a plugin explicitly returns false. The\n\t * returned value can be used, for instance, to interrupt the current action.\n\t * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').\n\t * @param {Object} [args] - Extra arguments to apply to the hook call.\n   * @param {import('./core.plugins.js').filterCallback} [filter] - Filtering function for limiting which plugins are notified\n\t * @returns {boolean} false if any of the plugins return false, else returns true.\n\t */\n  notifyPlugins(hook, args, filter) {\n    return this._plugins.notify(this, hook, args, filter);\n  }\n\n  /**\n   * Check if a plugin with the specific ID is registered and enabled\n   * @param {string} pluginId - The ID of the plugin of which to check if it is enabled\n   * @returns {boolean}\n   */\n  isPluginEnabled(pluginId) {\n    return this._plugins._cache.filter(p => p.plugin.id === pluginId).length === 1;\n  }\n\n  /**\n\t * @private\n\t */\n  _updateHoverStyles(active, lastActive, replay) {\n    const hoverOptions = this.options.hover;\n    const diff = (a, b) => a.filter(x => !b.some(y => x.datasetIndex === y.datasetIndex && x.index === y.index));\n    const deactivated = diff(lastActive, active);\n    const activated = replay ? active : diff(active, lastActive);\n\n    if (deactivated.length) {\n      this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n    }\n\n    if (activated.length && hoverOptions.mode) {\n      this.updateHoverStyle(activated, hoverOptions.mode, true);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _eventHandler(e, replay) {\n    const args = {\n      event: e,\n      replay,\n      cancelable: true,\n      inChartArea: this.isPointInArea(e)\n    };\n    const eventFilter = (plugin) => (plugin.options.events || this.options.events).includes(e.native.type);\n\n    if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n      return;\n    }\n\n    const changed = this._handleEvent(e, replay, args.inChartArea);\n\n    args.cancelable = false;\n    this.notifyPlugins('afterEvent', args, eventFilter);\n\n    if (changed || args.changed) {\n      this.render();\n    }\n\n    return this;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e the event to handle\n\t * @param {boolean} [replay] - true if the event was replayed by `update`\n   * @param {boolean} [inChartArea] - true if the event is inside chartArea\n\t * @return {boolean} true if the chart needs to re-render\n\t * @private\n\t */\n  _handleEvent(e, replay, inChartArea) {\n    const {_active: lastActive = [], options} = this;\n\n    // If the event is replayed from `update`, we should evaluate with the final positions.\n    //\n    // The `replay`:\n    // It's the last event (excluding click) that has occurred before `update`.\n    // So mouse has not moved. It's also over the chart, because there is a `replay`.\n    //\n    // The why:\n    // If animations are active, the elements haven't moved yet compared to state before update.\n    // But if they will, we are activating the elements that would be active, if this check\n    // was done after the animations have completed. => \"final positions\".\n    // If there is no animations, the \"final\" and \"current\" positions are equal.\n    // This is done so we do not have to evaluate the active elements each animation frame\n    // - it would be expensive.\n    const useFinalPosition = replay;\n    const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n    const isClick = _isClickEvent(e);\n    const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n\n    if (inChartArea) {\n      // Set _lastEvent to null while we are processing the event handlers.\n      // This prevents recursion if the handler calls chart.update()\n      this._lastEvent = null;\n\n      // Invoke onHover hook\n      callCallback(options.onHover, [e, active, this], this);\n\n      if (isClick) {\n        callCallback(options.onClick, [e, active, this], this);\n      }\n    }\n\n    const changed = !_elementsEqual(active, lastActive);\n    if (changed || replay) {\n      this._active = active;\n      this._updateHoverStyles(active, lastActive, replay);\n    }\n\n    this._lastEvent = lastEvent;\n\n    return changed;\n  }\n\n  /**\n   * @param {ChartEvent} e - The event\n   * @param {import('../types/index.js').ActiveElement[]} lastActive - Previously active elements\n   * @param {boolean} inChartArea - Is the envent inside chartArea\n   * @param {boolean} useFinalPosition - Should the evaluation be done with current or final (after animation) element positions\n   * @returns {import('../types/index.js').ActiveElement[]} - The active elements\n   * @pravate\n   */\n  _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      return lastActive;\n    }\n\n    const hoverOptions = this.options.hover;\n    return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n  }\n}\n\n// @ts-ignore\nfunction invalidatePlugins() {\n  return each(Chart.instances, (chart) => chart._plugins.invalidate());\n}\n\nexport default Chart;\n","import Element from '../core/core.element.js';\nimport {_angleBetween, getAngleFromPoint, TAU, HALF_PI, valueOrDefault} from '../helpers/index.js';\nimport {PI, _isBetween, _limitValue} from '../helpers/helpers.math.js';\nimport {_readValueToProps} from '../helpers/helpers.options.js';\nimport type {ArcOptions, Point} from '../types/index.js';\n\n\nfunction clipArc(ctx: CanvasRenderingContext2D, element: ArcElement, endAngle: number) {\n  const {startAngle, pixelMargin, x, y, outerRadius, innerRadius} = element;\n  let angleMargin = pixelMargin / outerRadius;\n\n  // Draw an inner border by clipping the arc and drawing a double-width border\n  // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n  ctx.beginPath();\n  ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n  if (innerRadius > pixelMargin) {\n    angleMargin = pixelMargin / innerRadius;\n    ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n  } else {\n    ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n  }\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction toRadiusCorners(value) {\n  return _readValueToProps(value, ['outerStart', 'outerEnd', 'innerStart', 'innerEnd']);\n}\n\n/**\n * Parse border radius from the provided options\n */\nfunction parseBorderRadius(arc: ArcElement, innerRadius: number, outerRadius: number, angleDelta: number) {\n  const o = toRadiusCorners(arc.options.borderRadius);\n  const halfThickness = (outerRadius - innerRadius) / 2;\n  const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n\n  // Outer limits are complicated. We want to compute the available angular distance at\n  // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n  // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n  //\n  // If the borderRadius is large, that value can become negative.\n  // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n  // we know that the thickness term will dominate and compute the limits at that point\n  const computeOuterLimit = (val) => {\n    const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n    return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n  };\n\n  return {\n    outerStart: computeOuterLimit(o.outerStart),\n    outerEnd: computeOuterLimit(o.outerEnd),\n    innerStart: _limitValue(o.innerStart, 0, innerLimit),\n    innerEnd: _limitValue(o.innerEnd, 0, innerLimit),\n  };\n}\n\n/**\n * Convert (r, 𝜃) to (x, y)\n */\nfunction rThetaToXY(r: number, theta: number, x: number, y: number) {\n  return {\n    x: x + r * Math.cos(theta),\n    y: y + r * Math.sin(theta),\n  };\n}\n\n\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */\nfunction pathArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  end: number,\n  circular: boolean,\n) {\n  const {x, y, startAngle: start, pixelMargin, innerRadius: innerR} = element;\n\n  const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n  const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n\n  let spacingOffset = 0;\n  const alpha = end - start;\n\n  if (spacing) {\n    // When spacing is present, it is the same for all items\n    // So we adjust the start and end angle of the arc such that\n    // the distance is the same as it would be without the spacing\n    const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n    const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n    const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n    const adjustedAngle = avNogSpacingRadius !== 0 ? (alpha * avNogSpacingRadius) / (avNogSpacingRadius + spacing) : alpha;\n    spacingOffset = (alpha - adjustedAngle) / 2;\n  }\n\n  const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n  const angleOffset = (alpha - beta) / 2;\n  const startAngle = start + angleOffset + spacingOffset;\n  const endAngle = end - angleOffset - spacingOffset;\n  const {outerStart, outerEnd, innerStart, innerEnd} = parseBorderRadius(element, innerRadius, outerRadius, endAngle - startAngle);\n\n  const outerStartAdjustedRadius = outerRadius - outerStart;\n  const outerEndAdjustedRadius = outerRadius - outerEnd;\n  const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n  const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n\n  const innerStartAdjustedRadius = innerRadius + innerStart;\n  const innerEndAdjustedRadius = innerRadius + innerEnd;\n  const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n  const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n\n  ctx.beginPath();\n\n  if (circular) {\n    // The first arc segments from point 1 to point a to point 2\n    const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n    ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n    ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n\n    // The corner segment from point 2 to point 3\n    if (outerEnd > 0) {\n      const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n    }\n\n    // The line from point 3 to point 4\n    const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n    ctx.lineTo(p4.x, p4.y);\n\n    // The corner segment from point 4 to point 5\n    if (innerEnd > 0) {\n      const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n    }\n\n    // The inner arc from point 5 to point b to point 6\n    const innerMidAdjustedAngle = ((endAngle - (innerEnd / innerRadius)) + (startAngle + (innerStart / innerRadius))) / 2;\n    ctx.arc(x, y, innerRadius, endAngle - (innerEnd / innerRadius), innerMidAdjustedAngle, true);\n    ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + (innerStart / innerRadius), true);\n\n    // The corner segment from point 6 to point 7\n    if (innerStart > 0) {\n      const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n    }\n\n    // The line from point 7 to point 8\n    const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n    ctx.lineTo(p8.x, p8.y);\n\n    // The corner segment from point 8 to point 1\n    if (outerStart > 0) {\n      const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n      ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n    }\n  } else {\n    ctx.moveTo(x, y);\n\n    const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n    const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerStartX, outerStartY);\n\n    const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n    const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n    ctx.lineTo(outerEndX, outerEndY);\n  }\n\n  ctx.closePath();\n}\n\nfunction drawArc(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference} = element;\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.fill();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n  pathArc(ctx, element, offset, spacing, endAngle, circular);\n  ctx.fill();\n  return endAngle;\n}\n\nfunction drawBorder(\n  ctx: CanvasRenderingContext2D,\n  element: ArcElement,\n  offset: number,\n  spacing: number,\n  circular: boolean,\n) {\n  const {fullCircles, startAngle, circumference, options} = element;\n  const {borderWidth, borderJoinStyle, borderDash, borderDashOffset} = options;\n  const inner = options.borderAlign === 'inner';\n\n  if (!borderWidth) {\n    return;\n  }\n\n  ctx.setLineDash(borderDash || []);\n  ctx.lineDashOffset = borderDashOffset;\n\n  if (inner) {\n    ctx.lineWidth = borderWidth * 2;\n    ctx.lineJoin = borderJoinStyle || 'round';\n  } else {\n    ctx.lineWidth = borderWidth;\n    ctx.lineJoin = borderJoinStyle || 'bevel';\n  }\n\n  let endAngle = element.endAngle;\n  if (fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    for (let i = 0; i < fullCircles; ++i) {\n      ctx.stroke();\n    }\n    if (!isNaN(circumference)) {\n      endAngle = startAngle + (circumference % TAU || TAU);\n    }\n  }\n\n  if (inner) {\n    clipArc(ctx, element, endAngle);\n  }\n\n  if (!fullCircles) {\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.stroke();\n  }\n}\n\nexport interface ArcProps extends Point {\n  startAngle: number;\n  endAngle: number;\n  innerRadius: number;\n  outerRadius: number;\n  circumference: number;\n}\n\nexport default class ArcElement extends Element<ArcProps, ArcOptions> {\n\n  static id = 'arc';\n\n  static defaults = {\n    borderAlign: 'center',\n    borderColor: '#fff',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: undefined,\n    borderRadius: 0,\n    borderWidth: 2,\n    offset: 0,\n    spacing: 0,\n    angle: undefined,\n    circular: true,\n  };\n\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor'\n  };\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash'\n  };\n\n  circumference: number;\n  endAngle: number;\n  fullCircles: number;\n  innerRadius: number;\n  outerRadius: number;\n  pixelMargin: number;\n  startAngle: number;\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.circumference = undefined;\n    this.startAngle = undefined;\n    this.endAngle = undefined;\n    this.innerRadius = undefined;\n    this.outerRadius = undefined;\n    this.pixelMargin = 0;\n    this.fullCircles = 0;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(chartX: number, chartY: number, useFinalPosition: boolean) {\n    const point = this.getProps(['x', 'y'], useFinalPosition);\n    const {angle, distance} = getAngleFromPoint(point, {x: chartX, y: chartY});\n    const {startAngle, endAngle, innerRadius, outerRadius, circumference} = this.getProps([\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius',\n      'circumference'\n    ], useFinalPosition);\n    const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n    const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n    const betweenAngles = _circumference >= TAU || _angleBetween(angle, startAngle, endAngle);\n    const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n\n    return (betweenAngles && withinRadius);\n  }\n\n  getCenterPoint(useFinalPosition: boolean) {\n    const {x, y, startAngle, endAngle, innerRadius, outerRadius} = this.getProps([\n      'x',\n      'y',\n      'startAngle',\n      'endAngle',\n      'innerRadius',\n      'outerRadius'\n    ], useFinalPosition);\n    const {offset, spacing} = this.options;\n    const halfAngle = (startAngle + endAngle) / 2;\n    const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n    return {\n      x: x + Math.cos(halfAngle) * halfRadius,\n      y: y + Math.sin(halfAngle) * halfRadius\n    };\n  }\n\n  tooltipPosition(useFinalPosition: boolean) {\n    return this.getCenterPoint(useFinalPosition);\n  }\n\n  draw(ctx: CanvasRenderingContext2D) {\n    const {options, circumference} = this;\n    const offset = (options.offset || 0) / 4;\n    const spacing = (options.spacing || 0) / 2;\n    const circular = options.circular;\n    this.pixelMargin = (options.borderAlign === 'inner') ? 0.33 : 0;\n    this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n\n    if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n      return;\n    }\n\n    ctx.save();\n\n    const halfAngle = (this.startAngle + this.endAngle) / 2;\n    ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n    const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n    const radiusOffset = offset * fix;\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n\n    drawArc(ctx, this, radiusOffset, spacing, circular);\n    drawBorder(ctx, this, radiusOffset, spacing, circular);\n\n    ctx.restore();\n  }\n}\n","import Element from '../core/core.element.js';\nimport {_bezierInterpolation, _pointInLine, _steppedInterpolation} from '../helpers/helpers.interpolation.js';\nimport {_computeSegments, _boundSegments} from '../helpers/helpers.segment.js';\nimport {_steppedLineTo, _bezierCurveTo} from '../helpers/helpers.canvas.js';\nimport {_updateBezierControlPoints} from '../helpers/helpers.curve.js';\nimport {valueOrDefault} from '../helpers/index.js';\n\n/**\n * @typedef { import('./element.point.js').default } PointElement\n */\n\nfunction setStyle(ctx, options, style = options) {\n  ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n  ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n  ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n  ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n  ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n  ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\n\nfunction lineTo(ctx, previous, target) {\n  ctx.lineTo(target.x, target.y);\n}\n\n/**\n * @returns {any}\n */\nfunction getLineMethod(options) {\n  if (options.stepped) {\n    return _steppedLineTo;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierCurveTo;\n  }\n\n  return lineTo;\n}\n\nfunction pathVars(points, segment, params = {}) {\n  const count = points.length;\n  const {start: paramsStart = 0, end: paramsEnd = count - 1} = params;\n  const {start: segmentStart, end: segmentEnd} = segment;\n  const start = Math.max(paramsStart, segmentStart);\n  const end = Math.min(paramsEnd, segmentEnd);\n  const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n\n  return {\n    count,\n    start,\n    loop: segment.loop,\n    ilen: end < start && !outside ? count + end - start : end - start\n  };\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction pathSegment(ctx, line, segment, params) {\n  const {points, options} = line;\n  const {count, start, loop, ilen} = pathVars(points, segment, params);\n  const lineMethod = getLineMethod(options);\n  // eslint-disable-next-line prefer-const\n  let {move = true, reverse} = params || {};\n  let i, point, prev;\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[(start + (reverse ? ilen - i : i)) % count];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    } else if (move) {\n      ctx.moveTo(point.x, point.y);\n      move = false;\n    } else {\n      lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n\n    prev = point;\n  }\n\n  if (loop) {\n    point = points[(start + (reverse ? ilen : 0)) % count];\n    lineMethod(ctx, prev, point, reverse, options.stepped);\n  }\n\n  return !!loop;\n}\n\n/**\n * Create path from points, grouping by truncated x-coordinate\n * Points need to be in order by x-coordinate for this to work efficiently\n * @param {CanvasRenderingContext2D|Path2D} ctx - Context\n * @param {LineElement} line\n * @param {object} segment\n * @param {number} segment.start - start index of the segment, referring the points array\n * @param {number} segment.end - end index of the segment, referring the points array\n * @param {boolean} segment.loop - indicates that the segment is a loop\n * @param {object} params\n * @param {boolean} params.move - move to starting point (vs line to it)\n * @param {boolean} params.reverse - path the segment from end to start\n * @param {number} params.start - limit segment to points starting from `start` index\n * @param {number} params.end - limit segment to points ending at `start` + `count` index\n */\nfunction fastPathSegment(ctx, line, segment, params) {\n  const points = line.points;\n  const {count, start, ilen} = pathVars(points, segment, params);\n  const {move = true, reverse} = params || {};\n  let avgX = 0;\n  let countX = 0;\n  let i, point, prevX, minY, maxY, lastY;\n\n  const pointIndex = (index) => (start + (reverse ? ilen - index : index)) % count;\n  const drawX = () => {\n    if (minY !== maxY) {\n      // Draw line to maxY and minY, using the average x-coordinate\n      ctx.lineTo(avgX, maxY);\n      ctx.lineTo(avgX, minY);\n      // Line to y-value of last point in group. So the line continues\n      // from correct position. Not using move, to have solid path.\n      ctx.lineTo(avgX, lastY);\n    }\n  };\n\n  if (move) {\n    point = points[pointIndex(0)];\n    ctx.moveTo(point.x, point.y);\n  }\n\n  for (i = 0; i <= ilen; ++i) {\n    point = points[pointIndex(i)];\n\n    if (point.skip) {\n      // If there is a skipped point inside a segment, spanGaps must be true\n      continue;\n    }\n\n    const x = point.x;\n    const y = point.y;\n    const truncX = x | 0; // truncated x-coordinate\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n      } else if (y > maxY) {\n        maxY = y;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      avgX = (countX * avgX + x) / ++countX;\n    } else {\n      drawX();\n      // Draw line to next x-position, using the first (or only)\n      // y-value in that group\n      ctx.lineTo(x, y);\n\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n    }\n    // Keep track of the last y-value in group\n    lastY = y;\n  }\n  drawX();\n}\n\n/**\n * @param {LineElement} line - the line\n * @returns {function}\n * @private\n */\nfunction _getSegmentMethod(line) {\n  const opts = line.options;\n  const borderDash = opts.borderDash && opts.borderDash.length;\n  const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n  return useFastPath ? fastPathSegment : pathSegment;\n}\n\n/**\n * @private\n */\nfunction _getInterpolationMethod(options) {\n  if (options.stepped) {\n    return _steppedInterpolation;\n  }\n\n  if (options.tension || options.cubicInterpolationMode === 'monotone') {\n    return _bezierInterpolation;\n  }\n\n  return _pointInLine;\n}\n\nfunction strokePathWithCache(ctx, line, start, count) {\n  let path = line._path;\n  if (!path) {\n    path = line._path = new Path2D();\n    if (line.path(path, start, count)) {\n      path.closePath();\n    }\n  }\n  setStyle(ctx, line.options);\n  ctx.stroke(path);\n}\n\nfunction strokePathDirect(ctx, line, start, count) {\n  const {segments, options} = line;\n  const segmentMethod = _getSegmentMethod(line);\n\n  for (const segment of segments) {\n    setStyle(ctx, options, segment.style);\n    ctx.beginPath();\n    if (segmentMethod(ctx, line, segment, {start, end: start + count - 1})) {\n      ctx.closePath();\n    }\n    ctx.stroke();\n  }\n}\n\nconst usePath2D = typeof Path2D === 'function';\n\nfunction draw(ctx, line, start, count) {\n  if (usePath2D && !line.options.segment) {\n    strokePathWithCache(ctx, line, start, count);\n  } else {\n    strokePathDirect(ctx, line, start, count);\n  }\n}\n\nexport default class LineElement extends Element {\n\n  static id = 'line';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderCapStyle: 'butt',\n    borderDash: [],\n    borderDashOffset: 0,\n    borderJoinStyle: 'miter',\n    borderWidth: 3,\n    capBezierPoints: true,\n    cubicInterpolationMode: 'default',\n    fill: false,\n    spanGaps: false,\n    stepped: false,\n    tension: 0,\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n\n  static descriptors = {\n    _scriptable: true,\n    _indexable: (name) => name !== 'borderDash' && name !== 'fill',\n  };\n\n\n  constructor(cfg) {\n    super();\n\n    this.animated = true;\n    this.options = undefined;\n    this._chart = undefined;\n    this._loop = undefined;\n    this._fullLoop = undefined;\n    this._path = undefined;\n    this._points = undefined;\n    this._segments = undefined;\n    this._decimated = false;\n    this._pointsUpdated = false;\n    this._datasetIndex = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  updateControlPoints(chartArea, indexAxis) {\n    const options = this.options;\n    if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n      const loop = options.spanGaps ? this._loop : this._fullLoop;\n      _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n      this._pointsUpdated = true;\n    }\n  }\n\n  set points(points) {\n    this._points = points;\n    delete this._segments;\n    delete this._path;\n    this._pointsUpdated = false;\n  }\n\n  get points() {\n    return this._points;\n  }\n\n  get segments() {\n    return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n  }\n\n  /**\n\t * First non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  first() {\n    const segments = this.segments;\n    const points = this.points;\n    return segments.length && points[segments[0].start];\n  }\n\n  /**\n\t * Last non-skipped point on this line\n\t * @returns {PointElement|undefined}\n\t */\n  last() {\n    const segments = this.segments;\n    const points = this.points;\n    const count = segments.length;\n    return count && points[segments[count - 1].end];\n  }\n\n  /**\n\t * Interpolate a point in this line at the same value on `property` as\n\t * the reference `point` provided\n\t * @param {PointElement} point - the reference point\n\t * @param {string} property - the property to match on\n\t * @returns {PointElement|undefined}\n\t */\n  interpolate(point, property) {\n    const options = this.options;\n    const value = point[property];\n    const points = this.points;\n    const segments = _boundSegments(this, {property, start: value, end: value});\n\n    if (!segments.length) {\n      return;\n    }\n\n    const result = [];\n    const _interpolate = _getInterpolationMethod(options);\n    let i, ilen;\n    for (i = 0, ilen = segments.length; i < ilen; ++i) {\n      const {start, end} = segments[i];\n      const p1 = points[start];\n      const p2 = points[end];\n      if (p1 === p2) {\n        result.push(p1);\n        continue;\n      }\n      const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n      const interpolated = _interpolate(p1, p2, t, options.stepped);\n      interpolated[property] = point[property];\n      result.push(interpolated);\n    }\n    return result.length === 1 ? result[0] : result;\n  }\n\n  /**\n\t * Append a segment of this line to current path.\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} segment\n\t * @param {number} segment.start - start index of the segment, referring the points array\n \t * @param {number} segment.end - end index of the segment, referring the points array\n \t * @param {boolean} segment.loop - indicates that the segment is a loop\n\t * @param {object} params\n\t * @param {boolean} params.move - move to starting point (vs line to it)\n\t * @param {boolean} params.reverse - path the segment from end to start\n\t * @param {number} params.start - limit segment to points starting from `start` index\n\t * @param {number} params.end - limit segment to points ending at `start` + `count` index\n\t * @returns {undefined|boolean} - true if the segment is a full loop (path should be closed)\n\t */\n  pathSegment(ctx, segment, params) {\n    const segmentMethod = _getSegmentMethod(this);\n    return segmentMethod(ctx, this, segment, params);\n  }\n\n  /**\n\t * Append all segments of this line to current path.\n\t * @param {CanvasRenderingContext2D|Path2D} ctx\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t * @returns {undefined|boolean} - true if line is a full loop (path should be closed)\n\t */\n  path(ctx, start, count) {\n    const segments = this.segments;\n    const segmentMethod = _getSegmentMethod(this);\n    let loop = this._loop;\n\n    start = start || 0;\n    count = count || (this.points.length - start);\n\n    for (const segment of segments) {\n      loop &= segmentMethod(ctx, this, segment, {start, end: start + count - 1});\n    }\n    return !!loop;\n  }\n\n  /**\n\t * Draw\n\t * @param {CanvasRenderingContext2D} ctx\n\t * @param {object} chartArea\n\t * @param {number} [start]\n\t * @param {number} [count]\n\t */\n  draw(ctx, chartArea, start, count) {\n    const options = this.options || {};\n    const points = this.points || [];\n\n    if (points.length && options.borderWidth) {\n      ctx.save();\n\n      draw(ctx, this, start, count);\n\n      ctx.restore();\n    }\n\n    if (this.animated) {\n      // When line is animated, the control points and path are not cached.\n      this._pointsUpdated = false;\n      this._path = undefined;\n    }\n  }\n}\n","import Element from '../core/core.element.js';\nimport {drawPoint, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport type {\n  CartesianParsedData,\n  ChartArea,\n  Point,\n  PointHoverOptions,\n  PointOptions,\n} from '../types/index.js';\n\nfunction inRange(el: PointElement, pos: number, axis: 'x' | 'y', useFinalPosition?: boolean) {\n  const options = el.options;\n  const {[axis]: value} = el.getProps([axis], useFinalPosition);\n\n  return (Math.abs(pos - value) < options.radius + options.hitRadius);\n}\n\nexport type PointProps = Point\n\nexport default class PointElement extends Element<PointProps, PointOptions & PointHoverOptions> {\n\n  static id = 'point';\n\n  parsed: CartesianParsedData;\n  skip?: boolean;\n  stop?: boolean;\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderWidth: 1,\n    hitRadius: 1,\n    hoverBorderWidth: 1,\n    hoverRadius: 4,\n    pointStyle: 'circle',\n    radius: 3,\n    rotation: 0\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.parsed = undefined;\n    this.skip = undefined;\n    this.stop = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  inRange(mouseX: number, mouseY: number, useFinalPosition?: boolean) {\n    const options = this.options;\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return ((Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2)) < Math.pow(options.hitRadius + options.radius, 2));\n  }\n\n  inXRange(mouseX: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseX, 'x', useFinalPosition);\n  }\n\n  inYRange(mouseY: number, useFinalPosition?: boolean) {\n    return inRange(this, mouseY, 'y', useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition?: boolean) {\n    const {x, y} = this.getProps(['x', 'y'], useFinalPosition);\n    return {x, y};\n  }\n\n  size(options?: Partial<PointOptions & PointHoverOptions>) {\n    options = options || this.options || {};\n    let radius = options.radius || 0;\n    radius = Math.max(radius, radius && options.hoverRadius || 0);\n    const borderWidth = radius && options.borderWidth || 0;\n    return (radius + borderWidth) * 2;\n  }\n\n  draw(ctx: CanvasRenderingContext2D, area: ChartArea) {\n    const options = this.options;\n\n    if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n      return;\n    }\n\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n    ctx.fillStyle = options.backgroundColor;\n    drawPoint(ctx, options, this.x, this.y);\n  }\n\n  getRange() {\n    const options = this.options || {};\n    // @ts-expect-error Fallbacks should never be hit in practice\n    return options.radius + options.hitRadius;\n  }\n}\n","import Element from '../core/core.element.js';\nimport {isObject, _isBetween, _limitValue} from '../helpers/index.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {toTRBL, toTRBLCorners} from '../helpers/helpers.options.js';\n\n/** @typedef {{ x: number, y: number, base: number, horizontal: boolean, width: number, height: number }} BarProps */\n\n/**\n * Helper function to get the bounds of the bar regardless of the orientation\n * @param {BarElement} bar the bar\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the bar\n * @private\n */\nfunction getBarBounds(bar, useFinalPosition) {\n  const {x, y, base, width, height} = /** @type {BarProps} */ (bar.getProps(['x', 'y', 'base', 'width', 'height'], useFinalPosition));\n\n  let left, right, top, bottom, half;\n\n  if (bar.horizontal) {\n    half = height / 2;\n    left = Math.min(x, base);\n    right = Math.max(x, base);\n    top = y - half;\n    bottom = y + half;\n  } else {\n    half = width / 2;\n    left = x - half;\n    right = x + half;\n    top = Math.min(y, base);\n    bottom = Math.max(y, base);\n  }\n\n  return {left, top, right, bottom};\n}\n\nfunction skipOrLimit(skip, value, min, max) {\n  return skip ? 0 : _limitValue(value, min, max);\n}\n\nfunction parseBorderWidth(bar, maxW, maxH) {\n  const value = bar.options.borderWidth;\n  const skip = bar.borderSkipped;\n  const o = toTRBL(value);\n\n  return {\n    t: skipOrLimit(skip.top, o.top, 0, maxH),\n    r: skipOrLimit(skip.right, o.right, 0, maxW),\n    b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n    l: skipOrLimit(skip.left, o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(bar, maxW, maxH) {\n  const {enableBorderRadius} = bar.getProps(['enableBorderRadius']);\n  const value = bar.options.borderRadius;\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n  const skip = bar.borderSkipped;\n\n  // If the value is an object, assume the user knows what they are doing\n  // and apply as directed.\n  const enableBorder = enableBorderRadius || isObject(value);\n\n  return {\n    topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n    topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n    bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n    bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(bar) {\n  const bounds = getBarBounds(bar);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(bar, width / 2, height / 2);\n  const radius = parseBorderRadius(bar, width / 2, height / 2);\n\n  return {\n    outer: {\n      x: bounds.left,\n      y: bounds.top,\n      w: width,\n      h: height,\n      radius\n    },\n    inner: {\n      x: bounds.left + border.l,\n      y: bounds.top + border.t,\n      w: width - border.l - border.r,\n      h: height - border.t - border.b,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(bar, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const skipBoth = skipX && skipY;\n  const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || _isBetween(x, bounds.left, bounds.right))\n\t\t&& (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction inflateRect(rect, amount, refRect = {}) {\n  const x = rect.x !== refRect.x ? -amount : 0;\n  const y = rect.y !== refRect.y ? -amount : 0;\n  const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n  const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n  return {\n    x: rect.x + x,\n    y: rect.y + y,\n    w: rect.w + w,\n    h: rect.h + h,\n    radius: rect.radius\n  };\n}\n\nexport default class BarElement extends Element {\n\n  static id = 'bar';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    borderSkipped: 'start',\n    borderWidth: 0,\n    borderRadius: 0,\n    inflateAmount: 'auto',\n    pointStyle: undefined\n  };\n\n  /**\n   * @type {any}\n   */\n  static defaultRoutes = {\n    backgroundColor: 'backgroundColor',\n    borderColor: 'borderColor'\n  };\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.horizontal = undefined;\n    this.base = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.inflateAmount = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx) {\n    const {inflateAmount, options: {borderColor, backgroundColor}} = this;\n    const {inner, outer} = boundingRects(this);\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n      ctx.clip();\n      addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n      ctx.fillStyle = borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inflateRect(inner, inflateAmount));\n    ctx.fillStyle = backgroundColor;\n    ctx.fill();\n\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, base, horizontal} = /** @type {BarProps} */ (this.getProps(['x', 'y', 'base', 'horizontal'], useFinalPosition));\n    return {\n      x: horizontal ? (x + base) / 2 : x,\n      y: horizontal ? y : (y + base) / 2\n    };\n  }\n\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n","import {DoughnutController, PolarAreaController} from '../index.js';\nimport type {Chart, ChartDataset} from '../types.js';\n\nexport interface ColorsPluginOptions {\n  enabled?: boolean;\n  forceOverride?: boolean;\n}\n\ninterface ColorsDescriptor {\n  backgroundColor?: unknown;\n  borderColor?: unknown;\n}\n\nconst BORDER_COLORS = [\n  'rgb(54, 162, 235)', // blue\n  'rgb(255, 99, 132)', // red\n  'rgb(255, 159, 64)', // orange\n  'rgb(255, 205, 86)', // yellow\n  'rgb(75, 192, 192)', // green\n  'rgb(153, 102, 255)', // purple\n  'rgb(201, 203, 207)' // grey\n];\n\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map(color => color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\n\nfunction getBorderColor(i: number) {\n  return BORDER_COLORS[i % BORDER_COLORS.length];\n}\n\nfunction getBackgroundColor(i: number) {\n  return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\n\nfunction colorizeDefaultDataset(dataset: ChartDataset, i: number) {\n  dataset.borderColor = getBorderColor(i);\n  dataset.backgroundColor = getBackgroundColor(i);\n\n  return ++i;\n}\n\nfunction colorizeDoughnutDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBorderColor(i++));\n\n  return i;\n}\n\nfunction colorizePolarAreaDataset(dataset: ChartDataset, i: number) {\n  dataset.backgroundColor = dataset.data.map(() => getBackgroundColor(i++));\n\n  return i;\n}\n\nfunction getColorizer(chart: Chart) {\n  let i = 0;\n\n  return (dataset: ChartDataset, datasetIndex: number) => {\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n\n    if (controller instanceof DoughnutController) {\n      i = colorizeDoughnutDataset(dataset, i);\n    } else if (controller instanceof PolarAreaController) {\n      i = colorizePolarAreaDataset(dataset, i);\n    } else if (controller) {\n      i = colorizeDefaultDataset(dataset, i);\n    }\n  };\n}\n\nfunction containsColorsDefinitions(\n  descriptors: ColorsDescriptor[] | Record<string, ColorsDescriptor>\n) {\n  let k: number | string;\n\n  for (k in descriptors) {\n    if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction containsColorsDefinition(\n  descriptor: ColorsDescriptor\n) {\n  return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\n\nexport default {\n  id: 'colors',\n\n  defaults: {\n    enabled: true,\n    forceOverride: false\n  } as ColorsPluginOptions,\n\n  beforeLayout(chart: Chart, _args, options: ColorsPluginOptions) {\n    if (!options.enabled) {\n      return;\n    }\n\n    const {\n      data: {datasets},\n      options: chartOptions\n    } = chart.config;\n    const {elements} = chartOptions;\n\n    if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || (elements && containsColorsDefinitions(elements)))) {\n      return;\n    }\n\n    const colorizer = getColorizer(chart);\n\n    datasets.forEach(colorizer);\n  }\n};\n","import {_limitValue, _lookupByKey, isNullOrUndef, resolve} from '../helpers/index.js';\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n  /**\n   * Implementation of the Largest Triangle Three Buckets algorithm.\n   *\n   * This implementation is based on the original implementation by Sveinn Steinarsson\n   * in https://github.com/sveinn-steinarsson/flot-downsample/blob/master/jquery.flot.downsample.js\n   *\n   * The original implementation is MIT licensed.\n   */\n  const samples = options.samples || availableWidth;\n  // There are less points than the threshold, returning the whole array\n  if (samples >= count) {\n    return data.slice(start, start + count);\n  }\n\n  const decimated = [];\n\n  const bucketWidth = (count - 2) / (samples - 2);\n  let sampledIndex = 0;\n  const endIndex = start + count - 1;\n  // Starting from offset\n  let a = start;\n  let i, maxAreaPoint, maxArea, area, nextA;\n\n  decimated[sampledIndex++] = data[a];\n\n  for (i = 0; i < samples - 2; i++) {\n    let avgX = 0;\n    let avgY = 0;\n    let j;\n\n    // Adding offset\n    const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n    const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n    const avgRangeLength = avgRangeEnd - avgRangeStart;\n\n    for (j = avgRangeStart; j < avgRangeEnd; j++) {\n      avgX += data[j].x;\n      avgY += data[j].y;\n    }\n\n    avgX /= avgRangeLength;\n    avgY /= avgRangeLength;\n\n    // Adding offset\n    const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n    const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n    const {x: pointAx, y: pointAy} = data[a];\n\n    // Note that this is changed from the original algorithm which initializes these\n    // values to 1. The reason for this change is that if the area is small, nextA\n    // would never be set and thus a crash would occur in the next loop as `a` would become\n    // `undefined`. Since the area is always positive, but could be 0 in the case of a flat trace,\n    // initializing with a negative number is the correct solution.\n    maxArea = area = -1;\n\n    for (j = rangeOffs; j < rangeTo; j++) {\n      area = 0.5 * Math.abs(\n        (pointAx - avgX) * (data[j].y - pointAy) -\n        (pointAx - data[j].x) * (avgY - pointAy)\n      );\n\n      if (area > maxArea) {\n        maxArea = area;\n        maxAreaPoint = data[j];\n        nextA = j;\n      }\n    }\n\n    decimated[sampledIndex++] = maxAreaPoint;\n    a = nextA;\n  }\n\n  // Include the last point\n  decimated[sampledIndex++] = data[endIndex];\n\n  return decimated;\n}\n\nfunction minMaxDecimation(data, start, count, availableWidth) {\n  let avgX = 0;\n  let countX = 0;\n  let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n  const decimated = [];\n  const endIndex = start + count - 1;\n\n  const xMin = data[start].x;\n  const xMax = data[endIndex].x;\n  const dx = xMax - xMin;\n\n  for (i = start; i < start + count; ++i) {\n    point = data[i];\n    x = (point.x - xMin) / dx * availableWidth;\n    y = point.y;\n    const truncX = x | 0;\n\n    if (truncX === prevX) {\n      // Determine `minY` / `maxY` and `avgX` while we stay within same x-position\n      if (y < minY) {\n        minY = y;\n        minIndex = i;\n      } else if (y > maxY) {\n        maxY = y;\n        maxIndex = i;\n      }\n      // For first point in group, countX is `0`, so average will be `x` / 1.\n      // Use point.x here because we're computing the average data `x` value\n      avgX = (countX * avgX + point.x) / ++countX;\n    } else {\n      // Push up to 4 points, 3 for the last interval and the first point for this interval\n      const lastIndex = i - 1;\n\n      if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n        // The interval is defined by 4 points: start, min, max, end.\n        // The starting point is already considered at this point, so we need to determine which\n        // of the other points to add. We need to sort these points to ensure the decimated data\n        // is still sorted and then ensure there are no duplicates.\n        const intermediateIndex1 = Math.min(minIndex, maxIndex);\n        const intermediateIndex2 = Math.max(minIndex, maxIndex);\n\n        if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex1],\n            x: avgX,\n          });\n        }\n        if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n          decimated.push({\n            ...data[intermediateIndex2],\n            x: avgX\n          });\n        }\n      }\n\n      // lastIndex === startIndex will occur when a range has only 1 point which could\n      // happen with very uneven data\n      if (i > 0 && lastIndex !== startIndex) {\n        // Last point in the previous interval\n        decimated.push(data[lastIndex]);\n      }\n\n      // Start of the new interval\n      decimated.push(point);\n      prevX = truncX;\n      countX = 0;\n      minY = maxY = y;\n      minIndex = maxIndex = startIndex = i;\n    }\n  }\n\n  return decimated;\n}\n\nfunction cleanDecimatedDataset(dataset) {\n  if (dataset._decimated) {\n    const data = dataset._data;\n    delete dataset._decimated;\n    delete dataset._data;\n    Object.defineProperty(dataset, 'data', {\n      configurable: true,\n      enumerable: true,\n      writable: true,\n      value: data,\n    });\n  }\n}\n\nfunction cleanDecimatedData(chart) {\n  chart.data.datasets.forEach((dataset) => {\n    cleanDecimatedDataset(dataset);\n  });\n}\n\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n  const pointCount = points.length;\n\n  let start = 0;\n  let count;\n\n  const {iScale} = meta;\n  const {min, max, minDefined, maxDefined} = iScale.getUserBounds();\n\n  if (minDefined) {\n    start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n  }\n  if (maxDefined) {\n    count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n  } else {\n    count = pointCount - start;\n  }\n\n  return {start, count};\n}\n\nexport default {\n  id: 'decimation',\n\n  defaults: {\n    algorithm: 'min-max',\n    enabled: false,\n  },\n\n  beforeElementsUpdate: (chart, args, options) => {\n    if (!options.enabled) {\n      // The decimation plugin may have been previously enabled. Need to remove old `dataset._data` handlers\n      cleanDecimatedData(chart);\n      return;\n    }\n\n    // Assume the entire chart is available to show a few more points than needed\n    const availableWidth = chart.width;\n\n    chart.data.datasets.forEach((dataset, datasetIndex) => {\n      const {_data, indexAxis} = dataset;\n      const meta = chart.getDatasetMeta(datasetIndex);\n      const data = _data || dataset.data;\n\n      if (resolve([indexAxis, chart.options.indexAxis]) === 'y') {\n        // Decimation is only supported for lines that have an X indexAxis\n        return;\n      }\n\n      if (!meta.controller.supportsDecimation) {\n        // Only line datasets are supported\n        return;\n      }\n\n      const xAxis = chart.scales[meta.xAxisID];\n      if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n        // Only linear interpolation is supported\n        return;\n      }\n\n      if (chart.options.parsing) {\n        // Plugin only supports data that does not need parsing\n        return;\n      }\n\n      let {start, count} = getStartAndCountOfVisiblePointsSimplified(meta, data);\n      const threshold = options.threshold || 4 * availableWidth;\n      if (count <= threshold) {\n        // No decimation is required until we are above this threshold\n        cleanDecimatedDataset(dataset);\n        return;\n      }\n\n      if (isNullOrUndef(_data)) {\n        // First time we are seeing this dataset\n        // We override the 'data' property with a setter that stores the\n        // raw data in _data, but reads the decimated data from _decimated\n        dataset._data = data;\n        delete dataset.data;\n        Object.defineProperty(dataset, 'data', {\n          configurable: true,\n          enumerable: true,\n          get: function() {\n            return this._decimated;\n          },\n          set: function(d) {\n            this._data = d;\n          }\n        });\n      }\n\n      // Point the chart to the decimated data\n      let decimated;\n      switch (options.algorithm) {\n      case 'lttb':\n        decimated = lttbDecimation(data, start, count, availableWidth, options);\n        break;\n      case 'min-max':\n        decimated = minMaxDecimation(data, start, count, availableWidth);\n        break;\n      default:\n        throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n      }\n\n      dataset._decimated = decimated;\n    });\n  },\n\n  destroy(chart) {\n    cleanDecimatedData(chart);\n  }\n};\n","import {_boundSegment, _boundSegments, _normalizeAngle} from '../../helpers/index.js';\n\nexport function _segments(line, target, property) {\n  const segments = line.segments;\n  const points = line.points;\n  const tpoints = target.points;\n  const parts = [];\n\n  for (const segment of segments) {\n    let {start, end} = segment;\n    end = _findSegmentEnd(start, end, points);\n\n    const bounds = _getBounds(property, points[start], points[end], segment.loop);\n\n    if (!target.segments) {\n      // Special case for boundary not supporting `segments` (simpleArc)\n      // Bounds are provided as `target` for partial circle, or undefined for full circle\n      parts.push({\n        source: segment,\n        target: bounds,\n        start: points[start],\n        end: points[end]\n      });\n      continue;\n    }\n\n    // Get all segments from `target` that intersect the bounds of current segment of `line`\n    const targetSegments = _boundSegments(target, bounds);\n\n    for (const tgt of targetSegments) {\n      const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n      const fillSources = _boundSegment(segment, points, subBounds);\n\n      for (const fillSource of fillSources) {\n        parts.push({\n          source: fillSource,\n          target: tgt,\n          start: {\n            [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n          },\n          end: {\n            [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n          }\n        });\n      }\n    }\n  }\n  return parts;\n}\n\nexport function _getBounds(property, first, last, loop) {\n  if (loop) {\n    return;\n  }\n  let start = first[property];\n  let end = last[property];\n\n  if (property === 'angle') {\n    start = _normalizeAngle(start);\n    end = _normalizeAngle(end);\n  }\n  return {property, start, end};\n}\n\nexport function _pointsFromSegments(boundary, line) {\n  const {x = null, y = null} = boundary || {};\n  const linePoints = line.points;\n  const points = [];\n  line.segments.forEach(({start, end}) => {\n    end = _findSegmentEnd(start, end, linePoints);\n    const first = linePoints[start];\n    const last = linePoints[end];\n    if (y !== null) {\n      points.push({x: first.x, y});\n      points.push({x: last.x, y});\n    } else if (x !== null) {\n      points.push({x, y: first.y});\n      points.push({x, y: last.y});\n    }\n  });\n  return points;\n}\n\nexport function _findSegmentEnd(start, end, points) {\n  for (;end > start; end--) {\n    const point = points[end];\n    if (!isNaN(point.x) && !isNaN(point.y)) {\n      break;\n    }\n  }\n  return end;\n}\n\nfunction _getEdge(a, b, prop, fn) {\n  if (a && b) {\n    return fn(a[prop], b[prop]);\n  }\n  return a ? a[prop] : b ? b[prop] : 0;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {isArray} from '../../helpers/index.js';\nimport {_pointsFromSegments} from './filler.segment.js';\n\n/**\n * @param {PointElement[] | { x: number; y: number; }} boundary\n * @param {LineElement} line\n * @return {LineElement?}\n */\nexport function _createBoundaryLine(boundary, line) {\n  let points = [];\n  let _loop = false;\n\n  if (isArray(boundary)) {\n    _loop = true;\n    // @ts-ignore\n    points = boundary;\n  } else {\n    points = _pointsFromSegments(boundary, line);\n  }\n\n  return points.length ? new LineElement({\n    points,\n    options: {tension: 0},\n    _loop,\n    _fullLoop: _loop\n  }) : null;\n}\n\nexport function _shouldApplyFill(source) {\n  return source && source.fill !== false;\n}\n","import {isObject, isFinite, valueOrDefault} from '../../helpers/helpers.core.js';\n\n/**\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.line.js').default } LineElement\n * @typedef { import('../../types/index.js').FillTarget } FillTarget\n * @typedef { import('../../types/index.js').ComplexFillTarget } ComplexFillTarget\n */\n\nexport function _resolveTarget(sources, index, propagate) {\n  const source = sources[index];\n  let fill = source.fill;\n  const visited = [index];\n  let target;\n\n  if (!propagate) {\n    return fill;\n  }\n\n  while (fill !== false && visited.indexOf(fill) === -1) {\n    if (!isFinite(fill)) {\n      return fill;\n    }\n\n    target = sources[fill];\n    if (!target) {\n      return false;\n    }\n\n    if (target.visible) {\n      return fill;\n    }\n\n    visited.push(fill);\n    fill = target.fill;\n  }\n\n  return false;\n}\n\n/**\n * @param {LineElement} line\n * @param {number} index\n * @param {number} count\n */\nexport function _decodeFill(line, index, count) {\n  /** @type {string | {value: number}} */\n  const fill = parseFillOption(line);\n\n  if (isObject(fill)) {\n    return isNaN(fill.value) ? false : fill;\n  }\n\n  let target = parseFloat(fill);\n\n  if (isFinite(target) && Math.floor(target) === target) {\n    return decodeTargetIndex(fill[0], index, target, count);\n  }\n\n  return ['origin', 'start', 'end', 'stack', 'shape'].indexOf(fill) >= 0 && fill;\n}\n\nfunction decodeTargetIndex(firstCh, index, target, count) {\n  if (firstCh === '-' || firstCh === '+') {\n    target = index + target;\n  }\n\n  if (target === index || target < 0 || target >= count) {\n    return false;\n  }\n\n  return target;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @returns {number | null}\n */\nexport function _getTargetPixel(fill, scale) {\n  let pixel = null;\n  if (fill === 'start') {\n    pixel = scale.bottom;\n  } else if (fill === 'end') {\n    pixel = scale.top;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    pixel = scale.getPixelForValue(fill.value);\n  } else if (scale.getBasePixel) {\n    pixel = scale.getBasePixel();\n  }\n  return pixel;\n}\n\n/**\n * @param {FillTarget | ComplexFillTarget} fill\n * @param {Scale} scale\n * @param {number} startValue\n * @returns {number | undefined}\n */\nexport function _getTargetValue(fill, scale, startValue) {\n  let value;\n\n  if (fill === 'start') {\n    value = startValue;\n  } else if (fill === 'end') {\n    value = scale.options.reverse ? scale.min : scale.max;\n  } else if (isObject(fill)) {\n    // @ts-ignore\n    value = fill.value;\n  } else {\n    value = scale.getBaseValue();\n  }\n  return value;\n}\n\n/**\n * @param {LineElement} line\n */\nfunction parseFillOption(line) {\n  const options = line.options;\n  const fillOption = options.fill;\n  let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n\n  if (fill === undefined) {\n    fill = !!options.backgroundColor;\n  }\n\n  if (fill === false || fill === null) {\n    return false;\n  }\n\n  if (fill === true) {\n    return 'origin';\n  }\n  return fill;\n}\n","/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nimport {LineElement} from '../../elements/index.js';\nimport {_isBetween} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\n\n/**\n * @param {{ chart: Chart; scale: Scale; index: number; line: LineElement; }} source\n * @return {LineElement}\n */\nexport function _buildStackLine(source) {\n  const {scale, index, line} = source;\n  const points = [];\n  const segments = line.segments;\n  const sourcePoints = line.points;\n  const linesBelow = getLinesBelow(scale, index);\n  linesBelow.push(_createBoundaryLine({x: null, y: scale.bottom}, line));\n\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    for (let j = segment.start; j <= segment.end; j++) {\n      addPointsBelow(points, sourcePoints[j], linesBelow);\n    }\n  }\n  return new LineElement({points, options: {}});\n}\n\n/**\n * @param {Scale} scale\n * @param {number} index\n * @return {LineElement[]}\n */\nfunction getLinesBelow(scale, index) {\n  const below = [];\n  const metas = scale.getMatchingVisibleMetas('line');\n\n  for (let i = 0; i < metas.length; i++) {\n    const meta = metas[i];\n    if (meta.index === index) {\n      break;\n    }\n    if (!meta.hidden) {\n      below.unshift(meta.dataset);\n    }\n  }\n  return below;\n}\n\n/**\n * @param {PointElement[]} points\n * @param {PointElement} sourcePoint\n * @param {LineElement[]} linesBelow\n */\nfunction addPointsBelow(points, sourcePoint, linesBelow) {\n  const postponed = [];\n  for (let j = 0; j < linesBelow.length; j++) {\n    const line = linesBelow[j];\n    const {first, last, point} = findPoint(line, sourcePoint, 'x');\n\n    if (!point || (first && last)) {\n      continue;\n    }\n    if (first) {\n      // First point of an segment -> need to add another point before this,\n      // from next line below.\n      postponed.unshift(point);\n    } else {\n      points.push(point);\n      if (!last) {\n        // In the middle of an segment, no need to add more points.\n        break;\n      }\n    }\n  }\n  points.push(...postponed);\n}\n\n/**\n * @param {LineElement} line\n * @param {PointElement} sourcePoint\n * @param {string} property\n * @returns {{point?: PointElement, first?: boolean, last?: boolean}}\n */\nfunction findPoint(line, sourcePoint, property) {\n  const point = line.interpolate(sourcePoint, property);\n  if (!point) {\n    return {};\n  }\n\n  const pointValue = point[property];\n  const segments = line.segments;\n  const linePoints = line.points;\n  let first = false;\n  let last = false;\n  for (let i = 0; i < segments.length; i++) {\n    const segment = segments[i];\n    const firstValue = linePoints[segment.start][property];\n    const lastValue = linePoints[segment.end][property];\n    if (_isBetween(pointValue, firstValue, lastValue)) {\n      first = pointValue === firstValue;\n      last = pointValue === lastValue;\n      break;\n    }\n  }\n  return {first, last, point};\n}\n","import {TAU} from '../../helpers/index.js';\n\n// TODO: use elements.ArcElement instead\nexport class simpleArc {\n  constructor(opts) {\n    this.x = opts.x;\n    this.y = opts.y;\n    this.radius = opts.radius;\n  }\n\n  pathSegment(ctx, bounds, opts) {\n    const {x, y, radius} = this;\n    bounds = bounds || {start: 0, end: TAU};\n    ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n    return !opts.bounds;\n  }\n\n  interpolate(point) {\n    const {x, y, radius} = this;\n    const angle = point.angle;\n    return {\n      x: x + Math.cos(angle) * radius,\n      y: y + Math.sin(angle) * radius,\n      angle\n    };\n  }\n}\n","import {isFinite} from '../../helpers/index.js';\nimport {_createBoundaryLine} from './filler.helper.js';\nimport {_getTargetPixel, _getTargetValue} from './filler.options.js';\nimport {_buildStackLine} from './filler.target.stack.js';\nimport {simpleArc} from './simpleArc.js';\n\n/**\n * @typedef { import('../../core/core.controller.js').default } Chart\n * @typedef { import('../../core/core.scale.js').default } Scale\n * @typedef { import('../../elements/element.point.js').default } PointElement\n */\n\nexport function _getTarget(source) {\n  const {chart, fill, line} = source;\n\n  if (isFinite(fill)) {\n    return getLineByIndex(chart, fill);\n  }\n\n  if (fill === 'stack') {\n    return _buildStackLine(source);\n  }\n\n  if (fill === 'shape') {\n    return true;\n  }\n\n  const boundary = computeBoundary(source);\n\n  if (boundary instanceof simpleArc) {\n    return boundary;\n  }\n\n  return _createBoundaryLine(boundary, line);\n}\n\n/**\n * @param {Chart} chart\n * @param {number} index\n */\nfunction getLineByIndex(chart, index) {\n  const meta = chart.getDatasetMeta(index);\n  const visible = meta && chart.isDatasetVisible(index);\n  return visible ? meta.dataset : null;\n}\n\nfunction computeBoundary(source) {\n  const scale = source.scale || {};\n\n  if (scale.getPointPositionForValue) {\n    return computeCircularBoundary(source);\n  }\n  return computeLinearBoundary(source);\n}\n\n\nfunction computeLinearBoundary(source) {\n  const {scale = {}, fill} = source;\n  const pixel = _getTargetPixel(fill, scale);\n\n  if (isFinite(pixel)) {\n    const horizontal = scale.isHorizontal();\n\n    return {\n      x: horizontal ? pixel : null,\n      y: horizontal ? null : pixel\n    };\n  }\n\n  return null;\n}\n\nfunction computeCircularBoundary(source) {\n  const {scale, fill} = source;\n  const options = scale.options;\n  const length = scale.getLabels().length;\n  const start = options.reverse ? scale.max : scale.min;\n  const value = _getTargetValue(fill, scale, start);\n  const target = [];\n\n  if (options.grid.circular) {\n    const center = scale.getPointPositionForValue(0, start);\n    return new simpleArc({\n      x: center.x,\n      y: center.y,\n      radius: scale.getDistanceFromCenterForValue(value)\n    });\n  }\n\n  for (let i = 0; i < length; ++i) {\n    target.push(scale.getPointPositionForValue(i, value));\n  }\n  return target;\n}\n\n","import {clipArea, unclipArea} from '../../helpers/index.js';\nimport {_findSegmentEnd, _getBounds, _segments} from './filler.segment.js';\nimport {_getTarget} from './filler.target.js';\n\nexport function _drawfill(ctx, source, area) {\n  const target = _getTarget(source);\n  const {line, scale, axis} = source;\n  const lineOpts = line.options;\n  const fillOption = lineOpts.fill;\n  const color = lineOpts.backgroundColor;\n  const {above = color, below = color} = fillOption || {};\n  if (target && line.points.length) {\n    clipArea(ctx, area);\n    doFill(ctx, {line, target, above, below, area, scale, axis});\n    unclipArea(ctx);\n  }\n}\n\nfunction doFill(ctx, cfg) {\n  const {line, target, above, below, area, scale} = cfg;\n  const property = line._loop ? 'angle' : cfg.axis;\n\n  ctx.save();\n\n  if (property === 'x' && below !== above) {\n    clipVertical(ctx, target, area.top);\n    fill(ctx, {line, target, color: above, scale, property});\n    ctx.restore();\n    ctx.save();\n    clipVertical(ctx, target, area.bottom);\n  }\n  fill(ctx, {line, target, color: below, scale, property});\n\n  ctx.restore();\n}\n\nfunction clipVertical(ctx, target, clipY) {\n  const {segments, points} = target;\n  let first = true;\n  let lineLoop = false;\n\n  ctx.beginPath();\n  for (const segment of segments) {\n    const {start, end} = segment;\n    const firstPoint = points[start];\n    const lastPoint = points[_findSegmentEnd(start, end, points)];\n    if (first) {\n      ctx.moveTo(firstPoint.x, firstPoint.y);\n      first = false;\n    } else {\n      ctx.lineTo(firstPoint.x, clipY);\n      ctx.lineTo(firstPoint.x, firstPoint.y);\n    }\n    lineLoop = !!target.pathSegment(ctx, segment, {move: lineLoop});\n    if (lineLoop) {\n      ctx.closePath();\n    } else {\n      ctx.lineTo(lastPoint.x, clipY);\n    }\n  }\n\n  ctx.lineTo(target.first().x, clipY);\n  ctx.closePath();\n  ctx.clip();\n}\n\nfunction fill(ctx, cfg) {\n  const {line, target, property, color, scale} = cfg;\n  const segments = _segments(line, target, property);\n\n  for (const {source: src, target: tgt, start, end} of segments) {\n    const {style: {backgroundColor = color} = {}} = src;\n    const notShape = target !== true;\n\n    ctx.save();\n    ctx.fillStyle = backgroundColor;\n\n    clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n\n    ctx.beginPath();\n\n    const lineLoop = !!line.pathSegment(ctx, src);\n\n    let loop;\n    if (notShape) {\n      if (lineLoop) {\n        ctx.closePath();\n      } else {\n        interpolatedLineTo(ctx, target, end, property);\n      }\n\n      const targetLoop = !!target.pathSegment(ctx, tgt, {move: lineLoop, reverse: true});\n      loop = lineLoop && targetLoop;\n      if (!loop) {\n        interpolatedLineTo(ctx, target, start, property);\n      }\n    }\n\n    ctx.closePath();\n    ctx.fill(loop ? 'evenodd' : 'nonzero');\n\n    ctx.restore();\n  }\n}\n\nfunction clipBounds(ctx, scale, bounds) {\n  const {top, bottom} = scale.chart.chartArea;\n  const {property, start, end} = bounds || {};\n  if (property === 'x') {\n    ctx.beginPath();\n    ctx.rect(start, top, end - start, bottom - top);\n    ctx.clip();\n  }\n}\n\nfunction interpolatedLineTo(ctx, target, point, property) {\n  const interpolatedPoint = target.interpolate(point, property);\n  if (interpolatedPoint) {\n    ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n  }\n}\n\n","/**\n * Plugin based on discussion from the following Chart.js issues:\n * @see https://github.com/chartjs/Chart.js/issues/2380#issuecomment-279961569\n * @see https://github.com/chartjs/Chart.js/issues/2440#issuecomment-256461897\n */\n\nimport LineElement from '../../elements/element.line.js';\nimport {_drawfill} from './filler.drawing.js';\nimport {_shouldApplyFill} from './filler.helper.js';\nimport {_decodeFill, _resolveTarget} from './filler.options.js';\n\nexport default {\n  id: 'filler',\n\n  afterDatasetsUpdate(chart, _args, options) {\n    const count = (chart.data.datasets || []).length;\n    const sources = [];\n    let meta, i, line, source;\n\n    for (i = 0; i < count; ++i) {\n      meta = chart.getDatasetMeta(i);\n      line = meta.dataset;\n      source = null;\n\n      if (line && line.options && line instanceof LineElement) {\n        source = {\n          visible: chart.isDatasetVisible(i),\n          index: i,\n          fill: _decodeFill(line, i, count),\n          chart,\n          axis: meta.controller.options.indexAxis,\n          scale: meta.vScale,\n          line,\n        };\n      }\n\n      meta.$filler = source;\n      sources.push(source);\n    }\n\n    for (i = 0; i < count; ++i) {\n      source = sources[i];\n      if (!source || source.fill === false) {\n        continue;\n      }\n\n      source.fill = _resolveTarget(sources, i, options.propagate);\n    }\n  },\n\n  beforeDraw(chart, _args, options) {\n    const draw = options.drawTime === 'beforeDraw';\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const area = chart.chartArea;\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n      if (!source) {\n        continue;\n      }\n\n      source.line.updateControlPoints(area, source.axis);\n      if (draw && source.fill) {\n        _drawfill(chart.ctx, source, area);\n      }\n    }\n  },\n\n  beforeDatasetsDraw(chart, _args, options) {\n    if (options.drawTime !== 'beforeDatasetsDraw') {\n      return;\n    }\n\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    for (let i = metasets.length - 1; i >= 0; --i) {\n      const source = metasets[i].$filler;\n\n      if (_shouldApplyFill(source)) {\n        _drawfill(chart.ctx, source, chart.chartArea);\n      }\n    }\n  },\n\n  beforeDatasetDraw(chart, args, options) {\n    const source = args.meta.$filler;\n\n    if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n      return;\n    }\n\n    _drawfill(chart.ctx, source, chart.chartArea);\n  },\n\n  defaults: {\n    propagate: true,\n    drawTime: 'beforeDatasetDraw'\n  }\n};\n","import defaults from '../core/core.defaults.js';\nimport Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {addRoundedRectPath, drawPointLegend, renderText} from '../helpers/helpers.canvas.js';\nimport {\n  _isBetween,\n  callback as call,\n  clipArea,\n  getRtlAdapter,\n  overrideTextDirection,\n  restoreTextDirection,\n  toFont,\n  toPadding,\n  unclipArea,\n  valueOrDefault,\n} from '../helpers/index.js';\nimport {_alignStartEnd, _textX, _toLeftRightCenter} from '../helpers/helpers.extras.js';\nimport {toTRBLCorners} from '../helpers/helpers.options.js';\n\n/**\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n */\n\nconst getBoxSize = (labelOpts, fontSize) => {\n  let {boxHeight = fontSize, boxWidth = fontSize} = labelOpts;\n\n  if (labelOpts.usePointStyle) {\n    boxHeight = Math.min(boxHeight, fontSize);\n    boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n  }\n\n  return {\n    boxWidth,\n    boxHeight,\n    itemHeight: Math.max(fontSize, boxHeight)\n  };\n};\n\nconst itemsEqual = (a, b) => a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\n\nexport class Legend extends Element {\n\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this._added = false;\n\n    // Contains hit boxes for each dataset (in dataset order)\n    this.legendHitBoxes = [];\n\n    /**\n \t\t * @private\n \t\t */\n    this._hoveredItem = null;\n\n    // Are we in doughnut mode which has a different data type\n    this.doughnutMode = false;\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this.legendItems = undefined;\n    this.columnSizes = undefined;\n    this.lineWidths = undefined;\n    this.maxHeight = undefined;\n    this.maxWidth = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this._margins = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight, margins) {\n    this.maxWidth = maxWidth;\n    this.maxHeight = maxHeight;\n    this._margins = margins;\n\n    this.setDimensions();\n    this.buildLabels();\n    this.fit();\n  }\n\n  setDimensions() {\n    if (this.isHorizontal()) {\n      this.width = this.maxWidth;\n      this.left = this._margins.left;\n      this.right = this.width;\n    } else {\n      this.height = this.maxHeight;\n      this.top = this._margins.top;\n      this.bottom = this.height;\n    }\n  }\n\n  buildLabels() {\n    const labelOpts = this.options.labels || {};\n    let legendItems = call(labelOpts.generateLabels, [this.chart], this) || [];\n\n    if (labelOpts.filter) {\n      legendItems = legendItems.filter((item) => labelOpts.filter(item, this.chart.data));\n    }\n\n    if (labelOpts.sort) {\n      legendItems = legendItems.sort((a, b) => labelOpts.sort(a, b, this.chart.data));\n    }\n\n    if (this.options.reverse) {\n      legendItems.reverse();\n    }\n\n    this.legendItems = legendItems;\n  }\n\n  fit() {\n    const {options, ctx} = this;\n\n    // The legend may not be displayed for a variety of reasons including\n    // the fact that the defaults got set to `false`.\n    // When the legend is not displayed, there are no guarantees that the options\n    // are correctly formatted so we need to bail out as early as possible.\n    if (!options.display) {\n      this.width = this.height = 0;\n      return;\n    }\n\n    const labelOpts = options.labels;\n    const labelFont = toFont(labelOpts.font);\n    const fontSize = labelFont.size;\n    const titleHeight = this._computeTitleHeight();\n    const {boxWidth, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    let width, height;\n\n    ctx.font = labelFont.string;\n\n    if (this.isHorizontal()) {\n      width = this.maxWidth; // fill all the width\n      height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n    } else {\n      height = this.maxHeight; // fill all the height\n      width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n    }\n\n    this.width = Math.min(width, options.maxWidth || this.maxWidth);\n    this.height = Math.min(height, options.maxHeight || this.maxHeight);\n  }\n\n  /**\n\t * @private\n\t */\n  _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n    const {ctx, maxWidth, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    // Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one\n    const lineWidths = this.lineWidths = [0];\n    const lineHeight = itemHeight + padding;\n    let totalHeight = titleHeight;\n\n    ctx.textAlign = 'left';\n    ctx.textBaseline = 'middle';\n\n    let row = -1;\n    let top = -lineHeight;\n    this.legendItems.forEach((legendItem, i) => {\n      const itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;\n\n      if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n        totalHeight += lineHeight;\n        lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n        top += lineHeight;\n        row++;\n      }\n\n      hitboxes[i] = {left: 0, top, row, width: itemWidth, height: itemHeight};\n\n      lineWidths[lineWidths.length - 1] += itemWidth + padding;\n    });\n\n    return totalHeight;\n  }\n\n  _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n    const {ctx, maxHeight, options: {labels: {padding}}} = this;\n    const hitboxes = this.legendHitBoxes = [];\n    const columnSizes = this.columnSizes = [];\n    const heightLimit = maxHeight - titleHeight;\n\n    let totalWidth = padding;\n    let currentColWidth = 0;\n    let currentColHeight = 0;\n\n    let left = 0;\n    let col = 0;\n\n    this.legendItems.forEach((legendItem, i) => {\n      const {itemWidth, itemHeight} = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n\n      // If too tall, go to new column\n      if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n        totalWidth += currentColWidth + padding;\n        columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n        left += currentColWidth + padding;\n        col++;\n        currentColWidth = currentColHeight = 0;\n      }\n\n      // Store the hitbox width and height here. Final position will be updated in `draw`\n      hitboxes[i] = {left, top: currentColHeight, col, width: itemWidth, height: itemHeight};\n\n      // Get max width\n      currentColWidth = Math.max(currentColWidth, itemWidth);\n      currentColHeight += itemHeight + padding;\n    });\n\n    totalWidth += currentColWidth;\n    columnSizes.push({width: currentColWidth, height: currentColHeight}); // previous column size\n\n    return totalWidth;\n  }\n\n  adjustHitBoxes() {\n    if (!this.options.display) {\n      return;\n    }\n    const titleHeight = this._computeTitleHeight();\n    const {legendHitBoxes: hitboxes, options: {align, labels: {padding}, rtl}} = this;\n    const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n    if (this.isHorizontal()) {\n      let row = 0;\n      let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n      for (const hitbox of hitboxes) {\n        if (row !== hitbox.row) {\n          row = hitbox.row;\n          left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n        }\n        hitbox.top += this.top + titleHeight + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n        left += hitbox.width + padding;\n      }\n    } else {\n      let col = 0;\n      let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n      for (const hitbox of hitboxes) {\n        if (hitbox.col !== col) {\n          col = hitbox.col;\n          top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n        }\n        hitbox.top = top;\n        hitbox.left += this.left + padding;\n        hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n        top += hitbox.height + padding;\n      }\n    }\n  }\n\n  isHorizontal() {\n    return this.options.position === 'top' || this.options.position === 'bottom';\n  }\n\n  draw() {\n    if (this.options.display) {\n      const ctx = this.ctx;\n      clipArea(ctx, this);\n\n      this._draw();\n\n      unclipArea(ctx);\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _draw() {\n    const {options: opts, columnSizes, lineWidths, ctx} = this;\n    const {align, labels: labelOpts} = opts;\n    const defaultColor = defaults.color;\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const labelFont = toFont(labelOpts.font);\n    const {padding} = labelOpts;\n    const fontSize = labelFont.size;\n    const halfFontSize = fontSize / 2;\n    let cursor;\n\n    this.drawTitle();\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign('left');\n    ctx.textBaseline = 'middle';\n    ctx.lineWidth = 0.5;\n    ctx.font = labelFont.string;\n\n    const {boxWidth, boxHeight, itemHeight} = getBoxSize(labelOpts, fontSize);\n\n    // current position\n    const drawLegendBox = function(x, y, legendItem) {\n      if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n        return;\n      }\n\n      // Set the ctx for the box\n      ctx.save();\n\n      const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n      ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n      ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n      ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n      ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n      ctx.lineWidth = lineWidth;\n      ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n\n      ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n\n      if (labelOpts.usePointStyle) {\n        // Recalculate x and y for drawPoint() because its expecting\n        // x and y to be center of figure (instead of top left)\n        const drawOptions = {\n          radius: boxHeight * Math.SQRT2 / 2,\n          pointStyle: legendItem.pointStyle,\n          rotation: legendItem.rotation,\n          borderWidth: lineWidth\n        };\n        const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n        const centerY = y + halfFontSize;\n\n        // Draw pointStyle as legend symbol\n        drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n      } else {\n        // Draw box as legend symbol\n        // Adjust position when boxHeight < fontSize (want it centered)\n        const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n        const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n        const borderRadius = toTRBLCorners(legendItem.borderRadius);\n\n        ctx.beginPath();\n\n        if (Object.values(borderRadius).some(v => v !== 0)) {\n          addRoundedRectPath(ctx, {\n            x: xBoxLeft,\n            y: yBoxTop,\n            w: boxWidth,\n            h: boxHeight,\n            radius: borderRadius,\n          });\n        } else {\n          ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n        }\n\n        ctx.fill();\n        if (lineWidth !== 0) {\n          ctx.stroke();\n        }\n      }\n\n      ctx.restore();\n    };\n\n    const fillText = function(x, y, legendItem) {\n      renderText(ctx, legendItem.text, x, y + (itemHeight / 2), labelFont, {\n        strikethrough: legendItem.hidden,\n        textAlign: rtlHelper.textAlign(legendItem.textAlign)\n      });\n    };\n\n    // Horizontal\n    const isHorizontal = this.isHorizontal();\n    const titleHeight = this._computeTitleHeight();\n    if (isHorizontal) {\n      cursor = {\n        x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n        y: this.top + padding + titleHeight,\n        line: 0\n      };\n    } else {\n      cursor = {\n        x: this.left + padding,\n        y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n        line: 0\n      };\n    }\n\n    overrideTextDirection(this.ctx, opts.textDirection);\n\n    const lineHeight = itemHeight + padding;\n    this.legendItems.forEach((legendItem, i) => {\n      ctx.strokeStyle = legendItem.fontColor; // for strikethrough effect\n      ctx.fillStyle = legendItem.fontColor; // render in correct colour\n\n      const textWidth = ctx.measureText(legendItem.text).width;\n      const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n      const width = boxWidth + halfFontSize + textWidth;\n      let x = cursor.x;\n      let y = cursor.y;\n\n      rtlHelper.setWidth(this.width);\n\n      if (isHorizontal) {\n        if (i > 0 && x + width + padding > this.right) {\n          y = cursor.y += lineHeight;\n          cursor.line++;\n          x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n        }\n      } else if (i > 0 && y + lineHeight > this.bottom) {\n        x = cursor.x = x + columnSizes[cursor.line].width + padding;\n        cursor.line++;\n        y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n      }\n\n      const realX = rtlHelper.x(x);\n\n      drawLegendBox(realX, y, legendItem);\n\n      x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n\n      // Fill the actual label\n      fillText(rtlHelper.x(x), y, legendItem);\n\n      if (isHorizontal) {\n        cursor.x += width + padding;\n      } else if (typeof legendItem.text !== 'string') {\n        const fontLineHeight = labelFont.lineHeight;\n        cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n      } else {\n        cursor.y += lineHeight;\n      }\n    });\n\n    restoreTextDirection(this.ctx, opts.textDirection);\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {\n    const opts = this.options;\n    const titleOpts = opts.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n\n    if (!titleOpts.display) {\n      return;\n    }\n\n    const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n    const ctx = this.ctx;\n    const position = titleOpts.position;\n    const halfFontSize = titleFont.size / 2;\n    const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n    let y;\n\n    // These defaults are used when the legend is vertical.\n    // When horizontal, they are computed below.\n    let left = this.left;\n    let maxWidth = this.width;\n\n    if (this.isHorizontal()) {\n      // Move left / right so that the title is above the legend lines\n      maxWidth = Math.max(...this.lineWidths);\n      y = this.top + topPaddingPlusHalfFontSize;\n      left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n    } else {\n      // Move down so that the title is above the legend stack in every alignment\n      const maxHeight = this.columnSizes.reduce((acc, size) => Math.max(acc, size.height), 0);\n      y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n    }\n\n    // Now that we know the left edge of the inner legend box, compute the correct\n    // X coordinate from the title alignment\n    const x = _alignStartEnd(position, left, left + maxWidth);\n\n    // Canvas setup\n    ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n    ctx.textBaseline = 'middle';\n    ctx.strokeStyle = titleOpts.color;\n    ctx.fillStyle = titleOpts.color;\n    ctx.font = titleFont.string;\n\n    renderText(ctx, titleOpts.text, x, y, titleFont);\n  }\n\n  /**\n\t * @private\n\t */\n  _computeTitleHeight() {\n    const titleOpts = this.options.title;\n    const titleFont = toFont(titleOpts.font);\n    const titlePadding = toPadding(titleOpts.padding);\n    return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n  }\n\n  /**\n\t * @private\n\t */\n  _getLegendItemAt(x, y) {\n    let i, hitBox, lh;\n\n    if (_isBetween(x, this.left, this.right)\n      && _isBetween(y, this.top, this.bottom)) {\n      // See if we are touching one of the dataset boxes\n      lh = this.legendHitBoxes;\n      for (i = 0; i < lh.length; ++i) {\n        hitBox = lh[i];\n\n        if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width)\n          && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n          // Touching an element\n          return this.legendItems[i];\n        }\n      }\n    }\n\n    return null;\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t */\n  handleEvent(e) {\n    const opts = this.options;\n    if (!isListened(e.type, opts)) {\n      return;\n    }\n\n    // Chart event already has relative position in it\n    const hoveredItem = this._getLegendItemAt(e.x, e.y);\n\n    if (e.type === 'mousemove' || e.type === 'mouseout') {\n      const previous = this._hoveredItem;\n      const sameItem = itemsEqual(previous, hoveredItem);\n      if (previous && !sameItem) {\n        call(opts.onLeave, [e, previous, this], this);\n      }\n\n      this._hoveredItem = hoveredItem;\n\n      if (hoveredItem && !sameItem) {\n        call(opts.onHover, [e, hoveredItem, this], this);\n      }\n    } else if (hoveredItem) {\n      call(opts.onClick, [e, hoveredItem, this], this);\n    }\n  }\n}\n\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n  const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n  const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n  return {itemWidth, itemHeight};\n}\n\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n  let legendItemText = legendItem.text;\n  if (legendItemText && typeof legendItemText !== 'string') {\n    legendItemText = legendItemText.reduce((a, b) => a.length > b.length ? a : b);\n  }\n  return boxWidth + (labelFont.size / 2) + ctx.measureText(legendItemText).width;\n}\n\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n  let itemHeight = _itemHeight;\n  if (typeof legendItem.text !== 'string') {\n    itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n  }\n  return itemHeight;\n}\n\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n  const labelHeight = legendItem.text ? legendItem.text.length : 0;\n  return fontLineHeight * labelHeight;\n}\n\nfunction isListened(type, opts) {\n  if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n    return true;\n  }\n  if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n    return true;\n  }\n  return false;\n}\n\nexport default {\n  id: 'legend',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Legend,\n\n  start(chart, _args, options) {\n    const legend = chart.legend = new Legend({ctx: chart.ctx, options, chart});\n    layouts.configure(chart, legend, options);\n    layouts.addBox(chart, legend);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, chart.legend);\n    delete chart.legend;\n  },\n\n  // During the beforeUpdate step, the layout configuration needs to run\n  // This ensures that if the legend position changes (via an option update)\n  // the layout system respects the change. See https://github.com/chartjs/Chart.js/issues/7527\n  beforeUpdate(chart, _args, options) {\n    const legend = chart.legend;\n    layouts.configure(chart, legend, options);\n    legend.options = options;\n  },\n\n  // The labels need to be built after datasets are updated to ensure that colors\n  // and other styling are correct. See https://github.com/chartjs/Chart.js/issues/6968\n  afterUpdate(chart) {\n    const legend = chart.legend;\n    legend.buildLabels();\n    legend.adjustHitBoxes();\n  },\n\n\n  afterEvent(chart, args) {\n    if (!args.replay) {\n      chart.legend.handleEvent(args.event);\n    }\n  },\n\n  defaults: {\n    display: true,\n    position: 'top',\n    align: 'center',\n    fullSize: true,\n    reverse: false,\n    weight: 1000,\n\n    // a callback that will handle\n    onClick(e, legendItem, legend) {\n      const index = legendItem.datasetIndex;\n      const ci = legend.chart;\n      if (ci.isDatasetVisible(index)) {\n        ci.hide(index);\n        legendItem.hidden = true;\n      } else {\n        ci.show(index);\n        legendItem.hidden = false;\n      }\n    },\n\n    onHover: null,\n    onLeave: null,\n\n    labels: {\n      color: (ctx) => ctx.chart.options.color,\n      boxWidth: 40,\n      padding: 10,\n      // Generates labels shown in the legend\n      // Valid properties to return:\n      // text : text to display\n      // fillStyle : fill of coloured box\n      // strokeStyle: stroke of coloured box\n      // hidden : if this legend item refers to a hidden item\n      // lineCap : cap style for line\n      // lineDash\n      // lineDashOffset :\n      // lineJoin :\n      // lineWidth :\n      generateLabels(chart) {\n        const datasets = chart.data.datasets;\n        const {labels: {usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius}} = chart.legend.options;\n\n        return chart._getSortedDatasetMetas().map((meta) => {\n          const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n          const borderWidth = toPadding(style.borderWidth);\n\n          return {\n            text: datasets[meta.index].label,\n            fillStyle: style.backgroundColor,\n            fontColor: color,\n            hidden: !meta.visible,\n            lineCap: style.borderCapStyle,\n            lineDash: style.borderDash,\n            lineDashOffset: style.borderDashOffset,\n            lineJoin: style.borderJoinStyle,\n            lineWidth: (borderWidth.width + borderWidth.height) / 4,\n            strokeStyle: style.borderColor,\n            pointStyle: pointStyle || style.pointStyle,\n            rotation: style.rotation,\n            textAlign: textAlign || style.textAlign,\n            borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n\n            // Below is extra data used for toggling the datasets\n            datasetIndex: meta.index\n          };\n        }, this);\n      }\n    },\n\n    title: {\n      color: (ctx) => ctx.chart.options.color,\n      display: false,\n      position: 'center',\n      text: '',\n    }\n  },\n\n  descriptors: {\n    _scriptable: (name) => !name.startsWith('on'),\n    labels: {\n      _scriptable: (name) => !['generateLabels', 'filter', 'sort'].includes(name),\n    }\n  },\n};\n","import Element from '../core/core.element.js';\nimport layouts from '../core/core.layouts.js';\nimport {PI, isArray, toPadding, toFont} from '../helpers/index.js';\nimport {_toLeftRightCenter, _alignStartEnd} from '../helpers/helpers.extras.js';\nimport {renderText} from '../helpers/helpers.canvas.js';\n\nexport class Title extends Element {\n  /**\n\t * @param {{ ctx: any; options: any; chart: any; }} config\n\t */\n  constructor(config) {\n    super();\n\n    this.chart = config.chart;\n    this.options = config.options;\n    this.ctx = config.ctx;\n    this._padding = undefined;\n    this.top = undefined;\n    this.bottom = undefined;\n    this.left = undefined;\n    this.right = undefined;\n    this.width = undefined;\n    this.height = undefined;\n    this.position = undefined;\n    this.weight = undefined;\n    this.fullSize = undefined;\n  }\n\n  update(maxWidth, maxHeight) {\n    const opts = this.options;\n\n    this.left = 0;\n    this.top = 0;\n\n    if (!opts.display) {\n      this.width = this.height = this.right = this.bottom = 0;\n      return;\n    }\n\n    this.width = this.right = maxWidth;\n    this.height = this.bottom = maxHeight;\n\n    const lineCount = isArray(opts.text) ? opts.text.length : 1;\n    this._padding = toPadding(opts.padding);\n    const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n\n    if (this.isHorizontal()) {\n      this.height = textSize;\n    } else {\n      this.width = textSize;\n    }\n  }\n\n  isHorizontal() {\n    const pos = this.options.position;\n    return pos === 'top' || pos === 'bottom';\n  }\n\n  _drawArgs(offset) {\n    const {top, left, bottom, right, options} = this;\n    const align = options.align;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n\n    if (this.isHorizontal()) {\n      titleX = _alignStartEnd(align, left, right);\n      titleY = top + offset;\n      maxWidth = right - left;\n    } else {\n      if (options.position === 'left') {\n        titleX = left + offset;\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = PI * -0.5;\n      } else {\n        titleX = right - offset;\n        titleY = _alignStartEnd(align, top, bottom);\n        rotation = PI * 0.5;\n      }\n      maxWidth = bottom - top;\n    }\n    return {titleX, titleY, maxWidth, rotation};\n  }\n\n  draw() {\n    const ctx = this.ctx;\n    const opts = this.options;\n\n    if (!opts.display) {\n      return;\n    }\n\n    const fontOpts = toFont(opts.font);\n    const lineHeight = fontOpts.lineHeight;\n    const offset = lineHeight / 2 + this._padding.top;\n    const {titleX, titleY, maxWidth, rotation} = this._drawArgs(offset);\n\n    renderText(ctx, opts.text, 0, 0, fontOpts, {\n      color: opts.color,\n      maxWidth,\n      rotation,\n      textAlign: _toLeftRightCenter(opts.align),\n      textBaseline: 'middle',\n      translation: [titleX, titleY],\n    });\n  }\n}\n\nfunction createTitle(chart, titleOpts) {\n  const title = new Title({\n    ctx: chart.ctx,\n    options: titleOpts,\n    chart\n  });\n\n  layouts.configure(chart, title, titleOpts);\n  layouts.addBox(chart, title);\n  chart.titleBlock = title;\n}\n\nexport default {\n  id: 'title',\n\n  /**\n\t * For tests\n\t * @private\n\t */\n  _element: Title,\n\n  start(chart, _args, options) {\n    createTitle(chart, options);\n  },\n\n  stop(chart) {\n    const titleBlock = chart.titleBlock;\n    layouts.removeBox(chart, titleBlock);\n    delete chart.titleBlock;\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = chart.titleBlock;\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'bold',\n    },\n    fullSize: true,\n    padding: 10,\n    position: 'top',\n    text: '',\n    weight: 2000         // by default greater than legend (1000) to be above\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import {Title} from './plugin.title.js';\nimport layouts from '../core/core.layouts.js';\n\nconst map = new WeakMap();\n\nexport default {\n  id: 'subtitle',\n\n  start(chart, _args, options) {\n    const title = new Title({\n      ctx: chart.ctx,\n      options,\n      chart\n    });\n\n    layouts.configure(chart, title, options);\n    layouts.addBox(chart, title);\n    map.set(chart, title);\n  },\n\n  stop(chart) {\n    layouts.removeBox(chart, map.get(chart));\n    map.delete(chart);\n  },\n\n  beforeUpdate(chart, _args, options) {\n    const title = map.get(chart);\n    layouts.configure(chart, title, options);\n    title.options = options;\n  },\n\n  defaults: {\n    align: 'center',\n    display: false,\n    font: {\n      weight: 'normal',\n    },\n    fullSize: true,\n    padding: 0,\n    position: 'top',\n    text: '',\n    weight: 1500         // by default greater than legend (1000) and smaller than title (2000)\n  },\n\n  defaultRoutes: {\n    color: 'color'\n  },\n\n  descriptors: {\n    _scriptable: true,\n    _indexable: false,\n  },\n};\n","import Animations from '../core/core.animations.js';\nimport Element from '../core/core.element.js';\nimport {addRoundedRectPath} from '../helpers/helpers.canvas.js';\nimport {each, noop, isNullOrUndef, isArray, _elementsEqual, isObject} from '../helpers/helpers.core.js';\nimport {toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\nimport {getRtlAdapter, overrideTextDirection, restoreTextDirection} from '../helpers/helpers.rtl.js';\nimport {distanceBetweenPoints, _limitValue} from '../helpers/helpers.math.js';\nimport {createContext, drawPoint} from '../helpers/index.js';\n\n/**\n * @typedef { import('../platform/platform.base.js').Chart } Chart\n * @typedef { import('../types/index.js').ChartEvent } ChartEvent\n * @typedef { import('../types/index.js').ActiveElement } ActiveElement\n * @typedef { import('../core/core.interaction.js').InteractionItem } InteractionItem\n */\n\nconst positioners = {\n  /**\n\t * Average mode places the tooltip at the average position of the elements shown\n\t */\n  average(items) {\n    if (!items.length) {\n      return false;\n    }\n\n    let i, len;\n    let x = 0;\n    let y = 0;\n    let count = 0;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const pos = el.tooltipPosition();\n        x += pos.x;\n        y += pos.y;\n        ++count;\n      }\n    }\n\n    return {\n      x: x / count,\n      y: y / count\n    };\n  },\n\n  /**\n\t * Gets the tooltip position nearest of the item nearest to the event position\n\t */\n  nearest(items, eventPosition) {\n    if (!items.length) {\n      return false;\n    }\n\n    let x = eventPosition.x;\n    let y = eventPosition.y;\n    let minDistance = Number.POSITIVE_INFINITY;\n    let i, len, nearestElement;\n\n    for (i = 0, len = items.length; i < len; ++i) {\n      const el = items[i].element;\n      if (el && el.hasValue()) {\n        const center = el.getCenterPoint();\n        const d = distanceBetweenPoints(eventPosition, center);\n\n        if (d < minDistance) {\n          minDistance = d;\n          nearestElement = el;\n        }\n      }\n    }\n\n    if (nearestElement) {\n      const tp = nearestElement.tooltipPosition();\n      x = tp.x;\n      y = tp.y;\n    }\n\n    return {\n      x,\n      y\n    };\n  }\n};\n\n// Helper to push or concat based on if the 2nd parameter is an array or not\nfunction pushOrConcat(base, toPush) {\n  if (toPush) {\n    if (isArray(toPush)) {\n      // base = base.concat(toPush);\n      Array.prototype.push.apply(base, toPush);\n    } else {\n      base.push(toPush);\n    }\n  }\n\n  return base;\n}\n\n/**\n * Returns array of strings split by newline\n * @param {*} str - The value to split by newline.\n * @returns {string|string[]} value if newline present - Returned from String split() method\n * @function\n */\nfunction splitNewlines(str) {\n  if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n    return str.split('\\n');\n  }\n  return str;\n}\n\n\n/**\n * Private helper to create a tooltip item model\n * @param {Chart} chart\n * @param {ActiveElement} item - {element, index, datasetIndex} to create the tooltip item for\n * @return new tooltip item\n */\nfunction createTooltipItem(chart, item) {\n  const {element, datasetIndex, index} = item;\n  const controller = chart.getDatasetMeta(datasetIndex).controller;\n  const {label, value} = controller.getLabelAndValue(index);\n\n  return {\n    chart,\n    label,\n    parsed: controller.getParsed(index),\n    raw: chart.data.datasets[datasetIndex].data[index],\n    formattedValue: value,\n    dataset: controller.getDataset(),\n    dataIndex: index,\n    datasetIndex,\n    element\n  };\n}\n\n/**\n * Get the size of the tooltip\n */\nfunction getTooltipSize(tooltip, options) {\n  const ctx = tooltip.chart.ctx;\n  const {body, footer, title} = tooltip;\n  const {boxWidth, boxHeight} = options;\n  const bodyFont = toFont(options.bodyFont);\n  const titleFont = toFont(options.titleFont);\n  const footerFont = toFont(options.footerFont);\n  const titleLineCount = title.length;\n  const footerLineCount = footer.length;\n  const bodyLineItemCount = body.length;\n\n  const padding = toPadding(options.padding);\n  let height = padding.height;\n  let width = 0;\n\n  // Count of all lines in the body\n  let combinedBodyLength = body.reduce((count, bodyItem) => count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n  combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n\n  if (titleLineCount) {\n    height += titleLineCount * titleFont.lineHeight\n\t\t\t+ (titleLineCount - 1) * options.titleSpacing\n\t\t\t+ options.titleMarginBottom;\n  }\n  if (combinedBodyLength) {\n    // Body lines may include some extra height depending on boxHeight\n    const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n    height += bodyLineItemCount * bodyLineHeight\n\t\t\t+ (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight\n\t\t\t+ (combinedBodyLength - 1) * options.bodySpacing;\n  }\n  if (footerLineCount) {\n    height += options.footerMarginTop\n\t\t\t+ footerLineCount * footerFont.lineHeight\n\t\t\t+ (footerLineCount - 1) * options.footerSpacing;\n  }\n\n  // Title width\n  let widthPadding = 0;\n  const maxLineWidth = function(line) {\n    width = Math.max(width, ctx.measureText(line).width + widthPadding);\n  };\n\n  ctx.save();\n\n  ctx.font = titleFont.string;\n  each(tooltip.title, maxLineWidth);\n\n  // Body width\n  ctx.font = bodyFont.string;\n  each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n\n  // Body lines may include some extra width due to the color box\n  widthPadding = options.displayColors ? (boxWidth + 2 + options.boxPadding) : 0;\n  each(body, (bodyItem) => {\n    each(bodyItem.before, maxLineWidth);\n    each(bodyItem.lines, maxLineWidth);\n    each(bodyItem.after, maxLineWidth);\n  });\n\n  // Reset back to 0\n  widthPadding = 0;\n\n  // Footer width\n  ctx.font = footerFont.string;\n  each(tooltip.footer, maxLineWidth);\n\n  ctx.restore();\n\n  // Add padding\n  width += padding.width;\n\n  return {width, height};\n}\n\nfunction determineYAlign(chart, size) {\n  const {y, height} = size;\n\n  if (y < height / 2) {\n    return 'top';\n  } else if (y > (chart.height - height / 2)) {\n    return 'bottom';\n  }\n  return 'center';\n}\n\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n  const {x, width} = size;\n  const caret = options.caretSize + options.caretPadding;\n  if (xAlign === 'left' && x + width + caret > chart.width) {\n    return true;\n  }\n\n  if (xAlign === 'right' && x - width - caret < 0) {\n    return true;\n  }\n}\n\nfunction determineXAlign(chart, options, size, yAlign) {\n  const {x, width} = size;\n  const {width: chartWidth, chartArea: {left, right}} = chart;\n  let xAlign = 'center';\n\n  if (yAlign === 'center') {\n    xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n  } else if (x <= width / 2) {\n    xAlign = 'left';\n  } else if (x >= chartWidth - width / 2) {\n    xAlign = 'right';\n  }\n\n  if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n    xAlign = 'center';\n  }\n\n  return xAlign;\n}\n\n/**\n * Helper to get the alignment of a tooltip given the size\n */\nfunction determineAlignment(chart, options, size) {\n  const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n\n  return {\n    xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n    yAlign\n  };\n}\n\nfunction alignX(size, xAlign) {\n  let {x, width} = size;\n  if (xAlign === 'right') {\n    x -= width;\n  } else if (xAlign === 'center') {\n    x -= (width / 2);\n  }\n  return x;\n}\n\nfunction alignY(size, yAlign, paddingAndSize) {\n  // eslint-disable-next-line prefer-const\n  let {y, height} = size;\n  if (yAlign === 'top') {\n    y += paddingAndSize;\n  } else if (yAlign === 'bottom') {\n    y -= height + paddingAndSize;\n  } else {\n    y -= (height / 2);\n  }\n  return y;\n}\n\n/**\n * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment\n */\nfunction getBackgroundPoint(options, size, alignment, chart) {\n  const {caretSize, caretPadding, cornerRadius} = options;\n  const {xAlign, yAlign} = alignment;\n  const paddingAndSize = caretSize + caretPadding;\n  const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n\n  let x = alignX(size, xAlign);\n  const y = alignY(size, yAlign, paddingAndSize);\n\n  if (yAlign === 'center') {\n    if (xAlign === 'left') {\n      x += paddingAndSize;\n    } else if (xAlign === 'right') {\n      x -= paddingAndSize;\n    }\n  } else if (xAlign === 'left') {\n    x -= Math.max(topLeft, bottomLeft) + caretSize;\n  } else if (xAlign === 'right') {\n    x += Math.max(topRight, bottomRight) + caretSize;\n  }\n\n  return {\n    x: _limitValue(x, 0, chart.width - size.width),\n    y: _limitValue(y, 0, chart.height - size.height)\n  };\n}\n\nfunction getAlignedX(tooltip, align, options) {\n  const padding = toPadding(options.padding);\n\n  return align === 'center'\n    ? tooltip.x + tooltip.width / 2\n    : align === 'right'\n      ? tooltip.x + tooltip.width - padding.right\n      : tooltip.x + padding.left;\n}\n\n/**\n * Helper to build before and after body lines\n */\nfunction getBeforeAfterBodyLines(callback) {\n  return pushOrConcat([], splitNewlines(callback));\n}\n\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n  return createContext(parent, {\n    tooltip,\n    tooltipItems,\n    type: 'tooltip'\n  });\n}\n\nfunction overrideCallbacks(callbacks, context) {\n  const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n  return override ? callbacks.override(override) : callbacks;\n}\n\nconst defaultCallbacks = {\n  // Args are: (tooltipItems, data)\n  beforeTitle: noop,\n  title(tooltipItems) {\n    if (tooltipItems.length > 0) {\n      const item = tooltipItems[0];\n      const labels = item.chart.data.labels;\n      const labelCount = labels ? labels.length : 0;\n\n      if (this && this.options && this.options.mode === 'dataset') {\n        return item.dataset.label || '';\n      } else if (item.label) {\n        return item.label;\n      } else if (labelCount > 0 && item.dataIndex < labelCount) {\n        return labels[item.dataIndex];\n      }\n    }\n\n    return '';\n  },\n  afterTitle: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeBody: noop,\n\n  // Args are: (tooltipItem, data)\n  beforeLabel: noop,\n  label(tooltipItem) {\n    if (this && this.options && this.options.mode === 'dataset') {\n      return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n    }\n\n    let label = tooltipItem.dataset.label || '';\n\n    if (label) {\n      label += ': ';\n    }\n    const value = tooltipItem.formattedValue;\n    if (!isNullOrUndef(value)) {\n      label += value;\n    }\n    return label;\n  },\n  labelColor(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      borderColor: options.borderColor,\n      backgroundColor: options.backgroundColor,\n      borderWidth: options.borderWidth,\n      borderDash: options.borderDash,\n      borderDashOffset: options.borderDashOffset,\n      borderRadius: 0,\n    };\n  },\n  labelTextColor() {\n    return this.options.bodyColor;\n  },\n  labelPointStyle(tooltipItem) {\n    const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n    const options = meta.controller.getStyle(tooltipItem.dataIndex);\n    return {\n      pointStyle: options.pointStyle,\n      rotation: options.rotation,\n    };\n  },\n  afterLabel: noop,\n\n  // Args are: (tooltipItems, data)\n  afterBody: noop,\n\n  // Args are: (tooltipItems, data)\n  beforeFooter: noop,\n  footer: noop,\n  afterFooter: noop\n};\n\n/**\n * Invoke callback from object with context and arguments.\n * If callback returns `undefined`, then will be invoked default callback.\n * @param {Record<keyof typeof defaultCallbacks, Function>} callbacks\n * @param {keyof typeof defaultCallbacks} name\n * @param {*} ctx\n * @param {*} arg\n * @returns {any}\n */\nfunction invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n  const result = callbacks[name].call(ctx, arg);\n\n  if (typeof result === 'undefined') {\n    return defaultCallbacks[name].call(ctx, arg);\n  }\n\n  return result;\n}\n\nexport class Tooltip extends Element {\n\n  /**\n   * @namespace Chart.Tooltip.positioners\n   */\n  static positioners = positioners;\n\n  constructor(config) {\n    super();\n\n    this.opacity = 0;\n    this._active = [];\n    this._eventPosition = undefined;\n    this._size = undefined;\n    this._cachedAnimations = undefined;\n    this._tooltipItems = [];\n    this.$animations = undefined;\n    this.$context = undefined;\n    this.chart = config.chart;\n    this.options = config.options;\n    this.dataPoints = undefined;\n    this.title = undefined;\n    this.beforeBody = undefined;\n    this.body = undefined;\n    this.afterBody = undefined;\n    this.footer = undefined;\n    this.xAlign = undefined;\n    this.yAlign = undefined;\n    this.x = undefined;\n    this.y = undefined;\n    this.height = undefined;\n    this.width = undefined;\n    this.caretX = undefined;\n    this.caretY = undefined;\n    // TODO: V4, make this private, rename to `_labelStyles`, and combine with `labelPointStyles`\n    // and `labelTextColors` to create a single variable\n    this.labelColors = undefined;\n    this.labelPointStyles = undefined;\n    this.labelTextColors = undefined;\n  }\n\n  initialize(options) {\n    this.options = options;\n    this._cachedAnimations = undefined;\n    this.$context = undefined;\n  }\n\n  /**\n\t * @private\n\t */\n  _resolveAnimations() {\n    const cached = this._cachedAnimations;\n\n    if (cached) {\n      return cached;\n    }\n\n    const chart = this.chart;\n    const options = this.options.setContext(this.getContext());\n    const opts = options.enabled && chart.options.animation && options.animations;\n    const animations = new Animations(this.chart, opts);\n    if (opts._cacheable) {\n      this._cachedAnimations = Object.freeze(animations);\n    }\n\n    return animations;\n  }\n\n  /**\n\t * @protected\n\t */\n  getContext() {\n    return this.$context ||\n\t\t\t(this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n  }\n\n  getTitle(context, options) {\n    const {callbacks} = options;\n\n    const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n    const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n    const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n    lines = pushOrConcat(lines, splitNewlines(title));\n    lines = pushOrConcat(lines, splitNewlines(afterTitle));\n\n    return lines;\n  }\n\n  getBeforeBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems)\n    );\n  }\n\n  getBody(tooltipItems, options) {\n    const {callbacks} = options;\n    const bodyItems = [];\n\n    each(tooltipItems, (context) => {\n      const bodyItem = {\n        before: [],\n        lines: [],\n        after: []\n      };\n      const scoped = overrideCallbacks(callbacks, context);\n      pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n      pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n      pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n\n      bodyItems.push(bodyItem);\n    });\n\n    return bodyItems;\n  }\n\n  getAfterBody(tooltipItems, options) {\n    return getBeforeAfterBodyLines(\n      invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems)\n    );\n  }\n\n  // Get the footer and beforeFooter and afterFooter lines\n  getFooter(tooltipItems, options) {\n    const {callbacks} = options;\n\n    const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n    const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n    const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n\n    let lines = [];\n    lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n    lines = pushOrConcat(lines, splitNewlines(footer));\n    lines = pushOrConcat(lines, splitNewlines(afterFooter));\n\n    return lines;\n  }\n\n  /**\n\t * @private\n\t */\n  _createItems(options) {\n    const active = this._active;\n    const data = this.chart.data;\n    const labelColors = [];\n    const labelPointStyles = [];\n    const labelTextColors = [];\n    let tooltipItems = [];\n    let i, len;\n\n    for (i = 0, len = active.length; i < len; ++i) {\n      tooltipItems.push(createTooltipItem(this.chart, active[i]));\n    }\n\n    // If the user provided a filter function, use it to modify the tooltip items\n    if (options.filter) {\n      tooltipItems = tooltipItems.filter((element, index, array) => options.filter(element, index, array, data));\n    }\n\n    // If the user provided a sorting function, use it to modify the tooltip items\n    if (options.itemSort) {\n      tooltipItems = tooltipItems.sort((a, b) => options.itemSort(a, b, data));\n    }\n\n    // Determine colors for boxes\n    each(tooltipItems, (context) => {\n      const scoped = overrideCallbacks(options.callbacks, context);\n      labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n      labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n      labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n    });\n\n    this.labelColors = labelColors;\n    this.labelPointStyles = labelPointStyles;\n    this.labelTextColors = labelTextColors;\n    this.dataPoints = tooltipItems;\n    return tooltipItems;\n  }\n\n  update(changed, replay) {\n    const options = this.options.setContext(this.getContext());\n    const active = this._active;\n    let properties;\n    let tooltipItems = [];\n\n    if (!active.length) {\n      if (this.opacity !== 0) {\n        properties = {\n          opacity: 0\n        };\n      }\n    } else {\n      const position = positioners[options.position].call(this, active, this._eventPosition);\n      tooltipItems = this._createItems(options);\n\n      this.title = this.getTitle(tooltipItems, options);\n      this.beforeBody = this.getBeforeBody(tooltipItems, options);\n      this.body = this.getBody(tooltipItems, options);\n      this.afterBody = this.getAfterBody(tooltipItems, options);\n      this.footer = this.getFooter(tooltipItems, options);\n\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, size);\n      const alignment = determineAlignment(this.chart, options, positionAndSize);\n      const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n\n      this.xAlign = alignment.xAlign;\n      this.yAlign = alignment.yAlign;\n\n      properties = {\n        opacity: 1,\n        x: backgroundPoint.x,\n        y: backgroundPoint.y,\n        width: size.width,\n        height: size.height,\n        caretX: position.x,\n        caretY: position.y\n      };\n    }\n\n    this._tooltipItems = tooltipItems;\n    this.$context = undefined;\n\n    if (properties) {\n      this._resolveAnimations().update(this, properties);\n    }\n\n    if (changed && options.external) {\n      options.external.call(this, {chart: this.chart, tooltip: this, replay});\n    }\n  }\n\n  drawCaret(tooltipPoint, ctx, size, options) {\n    const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n\n    ctx.lineTo(caretPosition.x1, caretPosition.y1);\n    ctx.lineTo(caretPosition.x2, caretPosition.y2);\n    ctx.lineTo(caretPosition.x3, caretPosition.y3);\n  }\n\n  getCaretPosition(tooltipPoint, size, options) {\n    const {xAlign, yAlign} = this;\n    const {caretSize, cornerRadius} = options;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(cornerRadius);\n    const {x: ptX, y: ptY} = tooltipPoint;\n    const {width, height} = size;\n    let x1, x2, x3, y1, y2, y3;\n\n    if (yAlign === 'center') {\n      y2 = ptY + (height / 2);\n\n      if (xAlign === 'left') {\n        x1 = ptX;\n        x2 = x1 - caretSize;\n\n        // Left draws bottom -> top, this y1 is on the bottom\n        y1 = y2 + caretSize;\n        y3 = y2 - caretSize;\n      } else {\n        x1 = ptX + width;\n        x2 = x1 + caretSize;\n\n        // Right draws top -> bottom, thus y1 is on the top\n        y1 = y2 - caretSize;\n        y3 = y2 + caretSize;\n      }\n\n      x3 = x1;\n    } else {\n      if (xAlign === 'left') {\n        x2 = ptX + Math.max(topLeft, bottomLeft) + (caretSize);\n      } else if (xAlign === 'right') {\n        x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n      } else {\n        x2 = this.caretX;\n      }\n\n      if (yAlign === 'top') {\n        y1 = ptY;\n        y2 = y1 - caretSize;\n\n        // Top draws left -> right, thus x1 is on the left\n        x1 = x2 - caretSize;\n        x3 = x2 + caretSize;\n      } else {\n        y1 = ptY + height;\n        y2 = y1 + caretSize;\n\n        // Bottom draws right -> left, thus x1 is on the right\n        x1 = x2 + caretSize;\n        x3 = x2 - caretSize;\n      }\n      y3 = y1;\n    }\n    return {x1, x2, x3, y1, y2, y3};\n  }\n\n  drawTitle(pt, ctx, options) {\n    const title = this.title;\n    const length = title.length;\n    let titleFont, titleSpacing, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.titleAlign, options);\n\n      ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n      ctx.textBaseline = 'middle';\n\n      titleFont = toFont(options.titleFont);\n      titleSpacing = options.titleSpacing;\n\n      ctx.fillStyle = options.titleColor;\n      ctx.font = titleFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n        pt.y += titleFont.lineHeight + titleSpacing; // Line Height and spacing\n\n        if (i + 1 === length) {\n          pt.y += options.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing\n        }\n      }\n    }\n  }\n\n  /**\n\t * @private\n\t */\n  _drawColorBox(ctx, pt, i, rtlHelper, options) {\n    const labelColor = this.labelColors[i];\n    const labelPointStyle = this.labelPointStyles[i];\n    const {boxHeight, boxWidth} = options;\n    const bodyFont = toFont(options.bodyFont);\n    const colorX = getAlignedX(this, 'left', options);\n    const rtlColorX = rtlHelper.x(colorX);\n    const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n    const colorY = pt.y + yOffSet;\n\n    if (options.usePointStyle) {\n      const drawOptions = {\n        radius: Math.min(boxWidth, boxHeight) / 2, // fit the circle in the box\n        pointStyle: labelPointStyle.pointStyle,\n        rotation: labelPointStyle.rotation,\n        borderWidth: 1\n      };\n      // Recalculate x and y for drawPoint() because its expecting\n      // x and y to be center of figure (instead of top left)\n      const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n      const centerY = colorY + boxHeight / 2;\n\n      // Fill the point with white so that colours merge nicely if the opacity is < 1\n      ctx.strokeStyle = options.multiKeyBackground;\n      ctx.fillStyle = options.multiKeyBackground;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n\n      // Draw the point\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.fillStyle = labelColor.backgroundColor;\n      drawPoint(ctx, drawOptions, centerX, centerY);\n    } else {\n      // Border\n      ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : (labelColor.borderWidth || 1); // TODO, v4 remove fallback\n      ctx.strokeStyle = labelColor.borderColor;\n      ctx.setLineDash(labelColor.borderDash || []);\n      ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n\n      // Fill a white rect so that colours merge nicely if the opacity is < 1\n      const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n      const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n      const borderRadius = toTRBLCorners(labelColor.borderRadius);\n\n      if (Object.values(borderRadius).some(v => v !== 0)) {\n        ctx.beginPath();\n        ctx.fillStyle = options.multiKeyBackground;\n        addRoundedRectPath(ctx, {\n          x: outerX,\n          y: colorY,\n          w: boxWidth,\n          h: boxHeight,\n          radius: borderRadius,\n        });\n        ctx.fill();\n        ctx.stroke();\n\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.beginPath();\n        addRoundedRectPath(ctx, {\n          x: innerX,\n          y: colorY + 1,\n          w: boxWidth - 2,\n          h: boxHeight - 2,\n          radius: borderRadius,\n        });\n        ctx.fill();\n      } else {\n        // Normal rect\n        ctx.fillStyle = options.multiKeyBackground;\n        ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n        ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n        // Inner square\n        ctx.fillStyle = labelColor.backgroundColor;\n        ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n      }\n    }\n\n    // restore fillStyle\n    ctx.fillStyle = this.labelTextColors[i];\n  }\n\n  drawBody(pt, ctx, options) {\n    const {body} = this;\n    const {bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding} = options;\n    const bodyFont = toFont(options.bodyFont);\n    let bodyLineHeight = bodyFont.lineHeight;\n    let xLinePadding = 0;\n\n    const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n    const fillLineOfText = function(line) {\n      ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n      pt.y += bodyLineHeight + bodySpacing;\n    };\n\n    const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n    let bodyItem, textColor, lines, i, j, ilen, jlen;\n\n    ctx.textAlign = bodyAlign;\n    ctx.textBaseline = 'middle';\n    ctx.font = bodyFont.string;\n\n    pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n\n    // Before body lines\n    ctx.fillStyle = options.bodyColor;\n    each(this.beforeBody, fillLineOfText);\n\n    xLinePadding = displayColors && bodyAlignForCalculation !== 'right'\n      ? bodyAlign === 'center' ? (boxWidth / 2 + boxPadding) : (boxWidth + 2 + boxPadding)\n      : 0;\n\n    // Draw body lines now\n    for (i = 0, ilen = body.length; i < ilen; ++i) {\n      bodyItem = body[i];\n      textColor = this.labelTextColors[i];\n\n      ctx.fillStyle = textColor;\n      each(bodyItem.before, fillLineOfText);\n\n      lines = bodyItem.lines;\n      // Draw Legend-like boxes if needed\n      if (displayColors && lines.length) {\n        this._drawColorBox(ctx, pt, i, rtlHelper, options);\n        bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n      }\n\n      for (j = 0, jlen = lines.length; j < jlen; ++j) {\n        fillLineOfText(lines[j]);\n        // Reset for any lines that don't include colorbox\n        bodyLineHeight = bodyFont.lineHeight;\n      }\n\n      each(bodyItem.after, fillLineOfText);\n    }\n\n    // Reset back to 0 for after body\n    xLinePadding = 0;\n    bodyLineHeight = bodyFont.lineHeight;\n\n    // After body lines\n    each(this.afterBody, fillLineOfText);\n    pt.y -= bodySpacing; // Remove last body spacing\n  }\n\n  drawFooter(pt, ctx, options) {\n    const footer = this.footer;\n    const length = footer.length;\n    let footerFont, i;\n\n    if (length) {\n      const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n\n      pt.x = getAlignedX(this, options.footerAlign, options);\n      pt.y += options.footerMarginTop;\n\n      ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n      ctx.textBaseline = 'middle';\n\n      footerFont = toFont(options.footerFont);\n\n      ctx.fillStyle = options.footerColor;\n      ctx.font = footerFont.string;\n\n      for (i = 0; i < length; ++i) {\n        ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n        pt.y += footerFont.lineHeight + options.footerSpacing;\n      }\n    }\n  }\n\n  drawBackground(pt, ctx, tooltipSize, options) {\n    const {xAlign, yAlign} = this;\n    const {x, y} = pt;\n    const {width, height} = tooltipSize;\n    const {topLeft, topRight, bottomLeft, bottomRight} = toTRBLCorners(options.cornerRadius);\n\n    ctx.fillStyle = options.backgroundColor;\n    ctx.strokeStyle = options.borderColor;\n    ctx.lineWidth = options.borderWidth;\n\n    ctx.beginPath();\n    ctx.moveTo(x + topLeft, y);\n    if (yAlign === 'top') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width - topRight, y);\n    ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n    if (yAlign === 'center' && xAlign === 'right') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + width, y + height - bottomRight);\n    ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n    if (yAlign === 'bottom') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x + bottomLeft, y + height);\n    ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n    if (yAlign === 'center' && xAlign === 'left') {\n      this.drawCaret(pt, ctx, tooltipSize, options);\n    }\n    ctx.lineTo(x, y + topLeft);\n    ctx.quadraticCurveTo(x, y, x + topLeft, y);\n    ctx.closePath();\n\n    ctx.fill();\n\n    if (options.borderWidth > 0) {\n      ctx.stroke();\n    }\n  }\n\n  /**\n\t * Update x/y animation targets when _active elements are animating too\n\t * @private\n\t */\n  _updateAnimationTarget(options) {\n    const chart = this.chart;\n    const anims = this.$animations;\n    const animX = anims && anims.x;\n    const animY = anims && anims.y;\n    if (animX || animY) {\n      const position = positioners[options.position].call(this, this._active, this._eventPosition);\n      if (!position) {\n        return;\n      }\n      const size = this._size = getTooltipSize(this, options);\n      const positionAndSize = Object.assign({}, position, this._size);\n      const alignment = determineAlignment(chart, options, positionAndSize);\n      const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n      if (animX._to !== point.x || animY._to !== point.y) {\n        this.xAlign = alignment.xAlign;\n        this.yAlign = alignment.yAlign;\n        this.width = size.width;\n        this.height = size.height;\n        this.caretX = position.x;\n        this.caretY = position.y;\n        this._resolveAnimations().update(this, point);\n      }\n    }\n  }\n\n  /**\n   * Determine if the tooltip will draw anything\n   * @returns {boolean} True if the tooltip will render\n   */\n  _willRender() {\n    return !!this.opacity;\n  }\n\n  draw(ctx) {\n    const options = this.options.setContext(this.getContext());\n    let opacity = this.opacity;\n\n    if (!opacity) {\n      return;\n    }\n\n    this._updateAnimationTarget(options);\n\n    const tooltipSize = {\n      width: this.width,\n      height: this.height\n    };\n    const pt = {\n      x: this.x,\n      y: this.y\n    };\n\n    // IE11/Edge does not like very small opacities, so snap to 0\n    opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n\n    const padding = toPadding(options.padding);\n\n    // Truthy/falsey value for empty tooltip\n    const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n\n    if (options.enabled && hasTooltipContent) {\n      ctx.save();\n      ctx.globalAlpha = opacity;\n\n      // Draw Background\n      this.drawBackground(pt, ctx, tooltipSize, options);\n\n      overrideTextDirection(ctx, options.textDirection);\n\n      pt.y += padding.top;\n\n      // Titles\n      this.drawTitle(pt, ctx, options);\n\n      // Body\n      this.drawBody(pt, ctx, options);\n\n      // Footer\n      this.drawFooter(pt, ctx, options);\n\n      restoreTextDirection(ctx, options.textDirection);\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * Get active elements in the tooltip\n\t * @returns {Array} Array of elements that are active in the tooltip\n\t */\n  getActiveElements() {\n    return this._active || [];\n  }\n\n  /**\n\t * Set active elements in the tooltip\n\t * @param {array} activeElements Array of active datasetIndex/index pairs.\n\t * @param {object} eventPosition Synthetic event position used in positioning\n\t */\n  setActiveElements(activeElements, eventPosition) {\n    const lastActive = this._active;\n    const active = activeElements.map(({datasetIndex, index}) => {\n      const meta = this.chart.getDatasetMeta(datasetIndex);\n\n      if (!meta) {\n        throw new Error('Cannot find a dataset at index ' + datasetIndex);\n      }\n\n      return {\n        datasetIndex,\n        element: meta.data[index],\n        index,\n      };\n    });\n    const changed = !_elementsEqual(lastActive, active);\n    const positionChanged = this._positionChanged(active, eventPosition);\n\n    if (changed || positionChanged) {\n      this._active = active;\n      this._eventPosition = eventPosition;\n      this._ignoreReplayEvents = true;\n      this.update(true);\n    }\n  }\n\n  /**\n\t * Handle an event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {boolean} true if the tooltip changed\n\t */\n  handleEvent(e, replay, inChartArea = true) {\n    if (replay && this._ignoreReplayEvents) {\n      return false;\n    }\n    this._ignoreReplayEvents = false;\n\n    const options = this.options;\n    const lastActive = this._active || [];\n    const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n\n    // When there are multiple items shown, but the tooltip position is nearest mode\n    // an update may need to be made because our position may have changed even though\n    // the items are the same as before.\n    const positionChanged = this._positionChanged(active, e);\n\n    // Remember Last Actives\n    const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n\n    // Only handle target event on tooltip change\n    if (changed) {\n      this._active = active;\n\n      if (options.enabled || options.external) {\n        this._eventPosition = {\n          x: e.x,\n          y: e.y\n        };\n\n        this.update(true, replay);\n      }\n    }\n\n    return changed;\n  }\n\n  /**\n\t * Helper for determining the active elements for event\n\t * @param {ChartEvent} e - The event to handle\n\t * @param {InteractionItem[]} lastActive - Previously active elements\n\t * @param {boolean} [replay] - This is a replayed event (from update)\n\t * @param {boolean} [inChartArea] - The event is inside chartArea\n\t * @returns {InteractionItem[]} - Active elements\n\t * @private\n\t */\n  _getActiveElements(e, lastActive, replay, inChartArea) {\n    const options = this.options;\n\n    if (e.type === 'mouseout') {\n      return [];\n    }\n\n    if (!inChartArea) {\n      // Let user control the active elements outside chartArea. Eg. using Legend.\n      // But make sure that active elements are still valid.\n      return lastActive.filter(i =>\n        this.chart.data.datasets[i.datasetIndex] &&\n        this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined\n      );\n    }\n\n    // Find Active Elements for tooltips\n    const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n\n    if (options.reverse) {\n      active.reverse();\n    }\n\n    return active;\n  }\n\n  /**\n\t * Determine if the active elements + event combination changes the\n\t * tooltip position\n\t * @param {array} active - Active elements\n\t * @param {ChartEvent} e - Event that triggered the position change\n\t * @returns {boolean} True if the position has changed\n\t */\n  _positionChanged(active, e) {\n    const {caretX, caretY, options} = this;\n    const position = positioners[options.position].call(this, active, e);\n    return position !== false && (caretX !== position.x || caretY !== position.y);\n  }\n}\n\nexport default {\n  id: 'tooltip',\n  _element: Tooltip,\n  positioners,\n\n  afterInit(chart, _args, options) {\n    if (options) {\n      chart.tooltip = new Tooltip({chart, options});\n    }\n  },\n\n  beforeUpdate(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  reset(chart, _args, options) {\n    if (chart.tooltip) {\n      chart.tooltip.initialize(options);\n    }\n  },\n\n  afterDraw(chart) {\n    const tooltip = chart.tooltip;\n\n    if (tooltip && tooltip._willRender()) {\n      const args = {\n        tooltip\n      };\n\n      if (chart.notifyPlugins('beforeTooltipDraw', {...args, cancelable: true}) === false) {\n        return;\n      }\n\n      tooltip.draw(chart.ctx);\n\n      chart.notifyPlugins('afterTooltipDraw', args);\n    }\n  },\n\n  afterEvent(chart, args) {\n    if (chart.tooltip) {\n      // If the event is replayed from `update`, we should evaluate with the final positions.\n      const useFinalPosition = args.replay;\n      if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n        // notify chart about the change, so it will render\n        args.changed = true;\n      }\n    }\n  },\n\n  defaults: {\n    enabled: true,\n    external: null,\n    position: 'average',\n    backgroundColor: 'rgba(0,0,0,0.8)',\n    titleColor: '#fff',\n    titleFont: {\n      weight: 'bold',\n    },\n    titleSpacing: 2,\n    titleMarginBottom: 6,\n    titleAlign: 'left',\n    bodyColor: '#fff',\n    bodySpacing: 2,\n    bodyFont: {\n    },\n    bodyAlign: 'left',\n    footerColor: '#fff',\n    footerSpacing: 2,\n    footerMarginTop: 6,\n    footerFont: {\n      weight: 'bold',\n    },\n    footerAlign: 'left',\n    padding: 6,\n    caretPadding: 2,\n    caretSize: 5,\n    cornerRadius: 6,\n    boxHeight: (ctx, opts) => opts.bodyFont.size,\n    boxWidth: (ctx, opts) => opts.bodyFont.size,\n    multiKeyBackground: '#fff',\n    displayColors: true,\n    boxPadding: 0,\n    borderColor: 'rgba(0,0,0,0)',\n    borderWidth: 0,\n    animation: {\n      duration: 400,\n      easing: 'easeOutQuart',\n    },\n    animations: {\n      numbers: {\n        type: 'number',\n        properties: ['x', 'y', 'width', 'height', 'caretX', 'caretY'],\n      },\n      opacity: {\n        easing: 'linear',\n        duration: 200\n      }\n    },\n    callbacks: defaultCallbacks\n  },\n\n  defaultRoutes: {\n    bodyFont: 'font',\n    footerFont: 'font',\n    titleFont: 'font'\n  },\n\n  descriptors: {\n    _scriptable: (name) => name !== 'filter' && name !== 'itemSort' && name !== 'external',\n    _indexable: false,\n    callbacks: {\n      _scriptable: false,\n      _indexable: false,\n    },\n    animation: {\n      _fallback: false\n    },\n    animations: {\n      _fallback: 'animation'\n    }\n  },\n\n  // Resolve additionally from `interaction` options and defaults.\n  additionalOptionScopes: ['interaction']\n};\n","import Scale from '../core/core.scale.js';\nimport {isNullOrUndef, valueOrDefault, _limitValue} from '../helpers/index.js';\n\nconst addIfString = (labels, raw, index, addedLabels) => {\n  if (typeof raw === 'string') {\n    index = labels.push(raw) - 1;\n    addedLabels.unshift({index, label: raw});\n  } else if (isNaN(raw)) {\n    index = null;\n  }\n  return index;\n};\n\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n  const first = labels.indexOf(raw);\n  if (first === -1) {\n    return addIfString(labels, raw, index, addedLabels);\n  }\n  const last = labels.lastIndexOf(raw);\n  return first !== last ? index : first;\n}\n\nconst validIndex = (index, max) => index === null ? null : _limitValue(Math.round(index), 0, max);\n\nfunction _getLabelForValue(value) {\n  const labels = this.getLabels();\n\n  if (value >= 0 && value < labels.length) {\n    return labels[value];\n  }\n  return value;\n}\n\nexport default class CategoryScale extends Scale {\n\n  static id = 'category';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: _getLabelForValue\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n    this._addedLabels = [];\n  }\n\n  init(scaleOptions) {\n    const added = this._addedLabels;\n    if (added.length) {\n      const labels = this.getLabels();\n      for (const {index, label} of added) {\n        if (labels[index] === label) {\n          labels.splice(index, 1);\n        }\n      }\n      this._addedLabels = [];\n    }\n    super.init(scaleOptions);\n  }\n\n  parse(raw, index) {\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    const labels = this.getLabels();\n    index = isFinite(index) && labels[index] === raw ? index\n      : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n    return validIndex(index, labels.length - 1);\n  }\n\n  determineDataLimits() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this.getMinMax(true);\n\n    if (this.options.bounds === 'ticks') {\n      if (!minDefined) {\n        min = 0;\n      }\n      if (!maxDefined) {\n        max = this.getLabels().length - 1;\n      }\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const min = this.min;\n    const max = this.max;\n    const offset = this.options.offset;\n    const ticks = [];\n    let labels = this.getLabels();\n\n    // If we are viewing some subset of labels, slice the original array\n    labels = (min === 0 && max === labels.length - 1) ? labels : labels.slice(min, max + 1);\n\n    this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n    this._startValue = this.min - (offset ? 0.5 : 0);\n\n    for (let value = min; value <= max; value++) {\n      ticks.push({value});\n    }\n    return ticks;\n  }\n\n  getLabelForValue(value) {\n    return _getLabelForValue.call(this, value);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    super.configure();\n\n    if (!this.isHorizontal()) {\n      // For backward compatibility, vertical category scale reverse is inverted.\n      this._reversePixels = !this._reversePixels;\n    }\n  }\n\n  // Used to get data value locations. Value can either be an index or a numerical value\n  getPixelForValue(value) {\n    if (typeof value !== 'number') {\n      value = this.parse(value);\n    }\n\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  // Must override base implementation because it calls getPixelForValue\n  // and category scale can have duplicate values\n  getPixelForTick(index) {\n    const ticks = this.ticks;\n    if (index < 0 || index > ticks.length - 1) {\n      return null;\n    }\n    return this.getPixelForValue(ticks[index].value);\n  }\n\n  getValueForPixel(pixel) {\n    return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n  }\n\n  getBasePixel() {\n    return this.bottom;\n  }\n}\n","import {isNullOrUndef} from '../helpers/helpers.core.js';\nimport {almostEquals, almostWhole, niceNum, _decimalPlaces, _setMinAndMaxByKey, sign, toRadians} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\n\n/**\n * Generate a set of linear ticks for an axis\n * 1. If generationOptions.min, generationOptions.max, and generationOptions.step are defined:\n *    if (max - min) / step is an integer, ticks are generated as [min, min + step, ..., max]\n *    Note that the generationOptions.maxCount setting is respected in this scenario\n *\n * 2. If generationOptions.min, generationOptions.max, and generationOptions.count is defined\n *    spacing = (max - min) / count\n *    Ticks are generated as [min, min + spacing, ..., max]\n *\n * 3. If generationOptions.count is defined\n *    spacing = (niceMax - niceMin) / count\n *\n * 4. Compute optimal spacing of ticks using niceNum algorithm\n *\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, dataRange) {\n  const ticks = [];\n  // To get a \"nice\" value for the tick spacing, we will use the appropriately named\n  // \"nice number\" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks\n  // for details.\n\n  const MIN_SPACING = 1e-14;\n  const {bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds} = generationOptions;\n  const unit = step || 1;\n  const maxSpaces = maxTicks - 1;\n  const {min: rmin, max: rmax} = dataRange;\n  const minDefined = !isNullOrUndef(min);\n  const maxDefined = !isNullOrUndef(max);\n  const countDefined = !isNullOrUndef(count);\n  const minSpacing = (rmax - rmin) / (maxDigits + 1);\n  let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n  let factor, niceMin, niceMax, numSpaces;\n\n  // Beyond MIN_SPACING floating point numbers being to lose precision\n  // such that we can't do the math necessary to generate ticks\n  if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n    return [{value: rmin}, {value: rmax}];\n  }\n\n  numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n  if (numSpaces > maxSpaces) {\n    // If the calculated num of spaces exceeds maxNumSpaces, recalculate it\n    spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n  }\n\n  if (!isNullOrUndef(precision)) {\n    // If the user specified a precision, round to that number of decimal places\n    factor = Math.pow(10, precision);\n    spacing = Math.ceil(spacing * factor) / factor;\n  }\n\n  if (bounds === 'ticks') {\n    niceMin = Math.floor(rmin / spacing) * spacing;\n    niceMax = Math.ceil(rmax / spacing) * spacing;\n  } else {\n    niceMin = rmin;\n    niceMax = rmax;\n  }\n\n  if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n    // Case 1: If min, max and stepSize are set and they make an evenly spaced scale use it.\n    // spacing = step;\n    // numSpaces = (max - min) / spacing;\n    // Note that we round here to handle the case where almostWhole translated an FP error\n    numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n    spacing = (max - min) / numSpaces;\n    niceMin = min;\n    niceMax = max;\n  } else if (countDefined) {\n    // Cases 2 & 3, we have a count specified. Handle optional user defined edges to the range.\n    // Sometimes these are no-ops, but it makes the code a lot clearer\n    // and when a user defined range is specified, we want the correct ticks\n    niceMin = minDefined ? min : niceMin;\n    niceMax = maxDefined ? max : niceMax;\n    numSpaces = count - 1;\n    spacing = (niceMax - niceMin) / numSpaces;\n  } else {\n    // Case 4\n    numSpaces = (niceMax - niceMin) / spacing;\n\n    // If very close to our rounded value, use it.\n    if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n      numSpaces = Math.round(numSpaces);\n    } else {\n      numSpaces = Math.ceil(numSpaces);\n    }\n  }\n\n  // The spacing will have changed in cases 1, 2, and 3 so the factor cannot be computed\n  // until this point\n  const decimalPlaces = Math.max(\n    _decimalPlaces(spacing),\n    _decimalPlaces(niceMin)\n  );\n  factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n  niceMin = Math.round(niceMin * factor) / factor;\n  niceMax = Math.round(niceMax * factor) / factor;\n\n  let j = 0;\n  if (minDefined) {\n    if (includeBounds && niceMin !== min) {\n      ticks.push({value: min});\n\n      if (niceMin < min) {\n        j++; // Skip niceMin\n      }\n      // If the next nice tick is close to min, skip it\n      if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n        j++;\n      }\n    } else if (niceMin < min) {\n      j++;\n    }\n  }\n\n  for (; j < numSpaces; ++j) {\n    const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n    if (maxDefined && tickValue > max) {\n      break;\n    }\n    ticks.push({value: tickValue});\n  }\n\n  if (maxDefined && includeBounds && niceMax !== max) {\n    // If the previous tick is too close to max, replace it with max, else add max\n    if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n      ticks[ticks.length - 1].value = max;\n    } else {\n      ticks.push({value: max});\n    }\n  } else if (!maxDefined || niceMax === max) {\n    ticks.push({value: niceMax});\n  }\n\n  return ticks;\n}\n\nfunction relativeLabelSize(value, minSpacing, {horizontal, minRotation}) {\n  const rad = toRadians(minRotation);\n  const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n  const length = 0.75 * minSpacing * ('' + value).length;\n  return Math.min(minSpacing / ratio, length);\n}\n\nexport default class LinearScaleBase extends Scale {\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    /** @type {number} */\n    this._endValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (isNullOrUndef(raw)) {\n      return null;\n    }\n    if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n      return null;\n    }\n\n    return +raw;\n  }\n\n  handleTickRangeOptions() {\n    const {beginAtZero} = this.options;\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let {min, max} = this;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (beginAtZero) {\n      const minSign = sign(min);\n      const maxSign = sign(max);\n\n      if (minSign < 0 && maxSign < 0) {\n        setMax(0);\n      } else if (minSign > 0 && maxSign > 0) {\n        setMin(0);\n      }\n    }\n\n    if (min === max) {\n      let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n\n      setMax(max + offset);\n\n      if (!beginAtZero) {\n        setMin(min - offset);\n      }\n    }\n    this.min = min;\n    this.max = max;\n  }\n\n  getTickLimit() {\n    const tickOpts = this.options.ticks;\n    // eslint-disable-next-line prefer-const\n    let {maxTicksLimit, stepSize} = tickOpts;\n    let maxTicks;\n\n    if (stepSize) {\n      maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n      if (maxTicks > 1000) {\n        console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n        maxTicks = 1000;\n      }\n    } else {\n      maxTicks = this.computeTickLimit();\n      maxTicksLimit = maxTicksLimit || 11;\n    }\n\n    if (maxTicksLimit) {\n      maxTicks = Math.min(maxTicksLimit, maxTicks);\n    }\n\n    return maxTicks;\n  }\n\n  /**\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Number.POSITIVE_INFINITY;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    // Figure out what the max number of ticks we can support it is based on the size of\n    // the axis area. For now, we say that the minimum tick spacing in pixels must be 40\n    // We also limit the maximum number of ticks to 11 which gives a nice 10 squares on\n    // the graph. Make sure we always have at least 2 ticks\n    let maxTicks = this.getTickLimit();\n    maxTicks = Math.max(2, maxTicks);\n\n    const numericGeneratorOptions = {\n      maxTicks,\n      bounds: opts.bounds,\n      min: opts.min,\n      max: opts.max,\n      precision: tickOpts.precision,\n      step: tickOpts.stepSize,\n      count: tickOpts.count,\n      maxDigits: this._maxDigits(),\n      horizontal: this.isHorizontal(),\n      minRotation: tickOpts.minRotation || 0,\n      includeBounds: tickOpts.includeBounds !== false\n    };\n    const dataRange = this._range || this;\n    const ticks = generateTicks(numericGeneratorOptions, dataRange);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const ticks = this.ticks;\n    let start = this.min;\n    let end = this.max;\n\n    super.configure();\n\n    if (this.options.offset && ticks.length) {\n      const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n      start -= offset;\n      end += offset;\n    }\n    this._startValue = start;\n    this._endValue = end;\n    this._valueRange = end - start;\n  }\n\n  getLabelForValue(value) {\n    return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n}\n","import {isFinite} from '../helpers/helpers.core.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {toRadians} from '../helpers/index.js';\n\nexport default class LinearScale extends LinearScaleBase {\n\n  static id = 'linear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.numeric\n    }\n  };\n\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? min : 0;\n    this.max = isFinite(max) ? max : 1;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n \t */\n  computeTickLimit() {\n    const horizontal = this.isHorizontal();\n    const length = horizontal ? this.width : this.height;\n    const minRotation = toRadians(this.options.ticks.minRotation);\n    const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n    const tickFont = this._resolveTickFontOptions(0);\n    return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n  }\n\n  // Utils\n  getPixelForValue(value) {\n    return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n  }\n}\n","import {finiteOrDefault, isFinite} from '../helpers/helpers.core.js';\nimport {formatNumber} from '../helpers/helpers.intl.js';\nimport {_setMinAndMaxByKey, log10} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\n\nconst log10Floor = v => Math.floor(log10(v));\nconst changeExponent = (v, m) => Math.pow(10, log10Floor(v) + m);\n\nfunction isMajor(tickVal) {\n  const remain = tickVal / (Math.pow(10, log10Floor(tickVal)));\n  return remain === 1;\n}\n\nfunction steps(min, max, rangeExp) {\n  const rangeStep = Math.pow(10, rangeExp);\n  const start = Math.floor(min / rangeStep);\n  const end = Math.ceil(max / rangeStep);\n  return end - start;\n}\n\nfunction startExp(min, max) {\n  const range = max - min;\n  let rangeExp = log10Floor(range);\n  while (steps(min, max, rangeExp) > 10) {\n    rangeExp++;\n  }\n  while (steps(min, max, rangeExp) < 10) {\n    rangeExp--;\n  }\n  return Math.min(rangeExp, log10Floor(min));\n}\n\n\n/**\n * Generate a set of logarithmic ticks\n * @param generationOptions the options used to generate the ticks\n * @param dataRange the range of the data\n * @returns {object[]} array of tick objects\n */\nfunction generateTicks(generationOptions, {min, max}) {\n  min = finiteOrDefault(generationOptions.min, min);\n  const ticks = [];\n  const minExp = log10Floor(min);\n  let exp = startExp(min, max);\n  let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n  const stepSize = Math.pow(10, exp);\n  const base = minExp > exp ? Math.pow(10, minExp) : 0;\n  const start = Math.round((min - base) * precision) / precision;\n  const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n  let significand = Math.floor((start - offset) / Math.pow(10, exp));\n  let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n  while (value < max) {\n    ticks.push({value, major: isMajor(value), significand});\n    if (significand >= 10) {\n      significand = significand < 15 ? 15 : 20;\n    } else {\n      significand++;\n    }\n    if (significand >= 20) {\n      exp++;\n      significand = 2;\n      precision = exp >= 0 ? 1 : precision;\n    }\n    value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n  }\n  const lastTick = finiteOrDefault(generationOptions.max, value);\n  ticks.push({value: lastTick, major: isMajor(lastTick), significand});\n\n  return ticks;\n}\n\nexport default class LogarithmicScale extends Scale {\n\n  static id = 'logarithmic';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    ticks: {\n      callback: Ticks.formatters.logarithmic,\n      major: {\n        enabled: true\n      }\n    }\n  };\n\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.start = undefined;\n    /** @type {number} */\n    this.end = undefined;\n    /** @type {number} */\n    this._startValue = undefined;\n    this._valueRange = 0;\n  }\n\n  parse(raw, index) {\n    const value = LinearScaleBase.prototype.parse.apply(this, [raw, index]);\n    if (value === 0) {\n      this._zero = true;\n      return undefined;\n    }\n    return isFinite(value) && value > 0 ? value : null;\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(true);\n\n    this.min = isFinite(min) ? Math.max(0, min) : null;\n    this.max = isFinite(max) ? Math.max(0, max) : null;\n\n    if (this.options.beginAtZero) {\n      this._zero = true;\n    }\n\n    // if data has `0` in it or `beginAtZero` is true, min (non zero) value is at bottom\n    // of scale, and it does not equal suggestedMin, lower the min bound by one exp.\n    if (this._zero && this.min !== this._suggestedMin && !isFinite(this._userMin)) {\n      this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n    }\n\n    this.handleTickRangeOptions();\n  }\n\n  handleTickRangeOptions() {\n    const {minDefined, maxDefined} = this.getUserBounds();\n    let min = this.min;\n    let max = this.max;\n\n    const setMin = v => (min = minDefined ? min : v);\n    const setMax = v => (max = maxDefined ? max : v);\n\n    if (min === max) {\n      if (min <= 0) { // includes null\n        setMin(1);\n        setMax(10);\n      } else {\n        setMin(changeExponent(min, -1));\n        setMax(changeExponent(max, +1));\n      }\n    }\n    if (min <= 0) {\n      setMin(changeExponent(max, -1));\n    }\n    if (max <= 0) {\n\n      setMax(changeExponent(min, +1));\n    }\n\n    this.min = min;\n    this.max = max;\n  }\n\n  buildTicks() {\n    const opts = this.options;\n\n    const generationOptions = {\n      min: this._userMin,\n      max: this._userMax\n    };\n    const ticks = generateTicks(generationOptions, this);\n\n    // At this point, we need to update our max and min given the tick values,\n    // since we probably have expanded the range of the scale\n    if (opts.bounds === 'ticks') {\n      _setMinAndMaxByKey(ticks, this, 'value');\n    }\n\n    if (opts.reverse) {\n      ticks.reverse();\n\n      this.start = this.max;\n      this.end = this.min;\n    } else {\n      this.start = this.min;\n      this.end = this.max;\n    }\n\n    return ticks;\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    return value === undefined\n      ? '0'\n      : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n  }\n\n  /**\n\t * @protected\n\t */\n  configure() {\n    const start = this.min;\n\n    super.configure();\n\n    this._startValue = log10(start);\n    this._valueRange = log10(this.max) - log10(start);\n  }\n\n  getPixelForValue(value) {\n    if (value === undefined || value === 0) {\n      value = this.min;\n    }\n    if (value === null || isNaN(value)) {\n      return NaN;\n    }\n    return this.getPixelForDecimal(value === this.min\n      ? 0\n      : (log10(value) - this._startValue) / this._valueRange);\n  }\n\n  getValueForPixel(pixel) {\n    const decimal = this.getDecimalForPixel(pixel);\n    return Math.pow(10, this._startValue + decimal * this._valueRange);\n  }\n}\n","import defaults from '../core/core.defaults.js';\nimport {_longestText, addRoundedRectPath, renderText, _isPointInArea} from '../helpers/helpers.canvas.js';\nimport {HALF_PI, TAU, toDegrees, toRadians, _normalizeAngle, PI} from '../helpers/helpers.math.js';\nimport LinearScaleBase from './scale.linearbase.js';\nimport Ticks from '../core/core.ticks.js';\nimport {valueOrDefault, isArray, isFinite, callback as callCallback, isNullOrUndef} from '../helpers/helpers.core.js';\nimport {createContext, toFont, toPadding, toTRBLCorners} from '../helpers/helpers.options.js';\n\nfunction getTickBackdropHeight(opts) {\n  const tickOpts = opts.ticks;\n\n  if (tickOpts.display && opts.display) {\n    const padding = toPadding(tickOpts.backdropPadding);\n    return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n  }\n  return 0;\n}\n\nfunction measureLabelSize(ctx, font, label) {\n  label = isArray(label) ? label : [label];\n  return {\n    w: _longestText(ctx, font.string, label),\n    h: label.length * font.lineHeight\n  };\n}\n\nfunction determineLimits(angle, pos, size, min, max) {\n  if (angle === min || angle === max) {\n    return {\n      start: pos - (size / 2),\n      end: pos + (size / 2)\n    };\n  } else if (angle < min || angle > max) {\n    return {\n      start: pos - size,\n      end: pos\n    };\n  }\n\n  return {\n    start: pos,\n    end: pos + size\n  };\n}\n\n/**\n * Helper function to fit a radial linear scale with point labels\n */\nfunction fitWithPointLabels(scale) {\n\n  // Right, this is really confusing and there is a lot of maths going on here\n  // The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9\n  //\n  // Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif\n  //\n  // Solution:\n  //\n  // We assume the radius of the polygon is half the size of the canvas at first\n  // at each index we check if the text overlaps.\n  //\n  // Where it does, we store that angle and that index.\n  //\n  // After finding the largest index and angle we calculate how much we need to remove\n  // from the shape radius to move the point inwards by that x.\n  //\n  // We average the left and right distances to get the maximum shape radius that can fit in the box\n  // along with labels.\n  //\n  // Once we have that, we can find the centre point for the chart, by taking the x text protrusion\n  // on each side, removing that from the size, halving it and adding the left x protrusion width.\n  //\n  // This will mean we have a shape fitted to the canvas, as large as it can be with the labels\n  // and position it in the most space efficient manner\n  //\n  // https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif\n\n  // Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.\n  // Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points\n  const orig = {\n    l: scale.left + scale._padding.left,\n    r: scale.right - scale._padding.right,\n    t: scale.top + scale._padding.top,\n    b: scale.bottom - scale._padding.bottom\n  };\n  const limits = Object.assign({}, orig);\n  const labelSizes = [];\n  const padding = [];\n  const valueCount = scale._pointLabels.length;\n  const pointLabelOpts = scale.options.pointLabels;\n  const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n\n  for (let i = 0; i < valueCount; i++) {\n    const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n    padding[i] = opts.padding;\n    const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n    const plFont = toFont(opts.font);\n    const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n    labelSizes[i] = textSize;\n\n    const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n    const angle = Math.round(toDegrees(angleRadians));\n    const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n    const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n    updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n  }\n\n  scale.setCenterPoint(\n    orig.l - limits.l,\n    limits.r - orig.r,\n    orig.t - limits.t,\n    limits.b - orig.b\n  );\n\n  // Now that text size is determined, compute the full positions\n  scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\n\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n  const sin = Math.abs(Math.sin(angle));\n  const cos = Math.abs(Math.cos(angle));\n  let x = 0;\n  let y = 0;\n  if (hLimits.start < orig.l) {\n    x = (orig.l - hLimits.start) / sin;\n    limits.l = Math.min(limits.l, orig.l - x);\n  } else if (hLimits.end > orig.r) {\n    x = (hLimits.end - orig.r) / sin;\n    limits.r = Math.max(limits.r, orig.r + x);\n  }\n  if (vLimits.start < orig.t) {\n    y = (orig.t - vLimits.start) / cos;\n    limits.t = Math.min(limits.t, orig.t - y);\n  } else if (vLimits.end > orig.b) {\n    y = (vLimits.end - orig.b) / cos;\n    limits.b = Math.max(limits.b, orig.b + y);\n  }\n}\n\nfunction createPointLabelItem(scale, index, itemOpts) {\n  const outerDistance = scale.drawingArea;\n  const {extra, additionalAngle, padding, size} = itemOpts;\n  const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n  const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n  const y = yForAngle(pointLabelPosition.y, size.h, angle);\n  const textAlign = getTextAlignForAngle(angle);\n  const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n  return {\n    // if to draw or overlapped\n    visible: true,\n\n    // Text position\n    x: pointLabelPosition.x,\n    y,\n\n    // Text rendering data\n    textAlign,\n\n    // Bounding box\n    left,\n    top: y,\n    right: left + size.w,\n    bottom: y + size.h\n  };\n}\n\nfunction isNotOverlapped(item, area) {\n  if (!area) {\n    return true;\n  }\n  const {left, top, right, bottom} = item;\n  const apexesInArea = _isPointInArea({x: left, y: top}, area) || _isPointInArea({x: left, y: bottom}, area) ||\n    _isPointInArea({x: right, y: top}, area) || _isPointInArea({x: right, y: bottom}, area);\n  return !apexesInArea;\n}\n\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n  const items = [];\n  const valueCount = scale._pointLabels.length;\n  const opts = scale.options;\n  const {centerPointLabels, display} = opts.pointLabels;\n  const itemOpts = {\n    extra: getTickBackdropHeight(opts) / 2,\n    additionalAngle: centerPointLabels ? PI / valueCount : 0\n  };\n  let area;\n\n  for (let i = 0; i < valueCount; i++) {\n    itemOpts.padding = padding[i];\n    itemOpts.size = labelSizes[i];\n\n    const item = createPointLabelItem(scale, i, itemOpts);\n    items.push(item);\n    if (display === 'auto') {\n      item.visible = isNotOverlapped(item, area);\n      if (item.visible) {\n        area = item;\n      }\n    }\n  }\n  return items;\n}\n\nfunction getTextAlignForAngle(angle) {\n  if (angle === 0 || angle === 180) {\n    return 'center';\n  } else if (angle < 180) {\n    return 'left';\n  }\n\n  return 'right';\n}\n\nfunction leftForTextAlign(x, w, align) {\n  if (align === 'right') {\n    x -= w;\n  } else if (align === 'center') {\n    x -= (w / 2);\n  }\n  return x;\n}\n\nfunction yForAngle(y, h, angle) {\n  if (angle === 90 || angle === 270) {\n    y -= (h / 2);\n  } else if (angle > 270 || angle < 90) {\n    y -= h;\n  }\n  return y;\n}\n\nfunction drawPointLabelBox(ctx, opts, item) {\n  const {left, top, right, bottom} = item;\n  const {backdropColor} = opts;\n\n  if (!isNullOrUndef(backdropColor)) {\n    const borderRadius = toTRBLCorners(opts.borderRadius);\n    const padding = toPadding(opts.backdropPadding);\n    ctx.fillStyle = backdropColor;\n\n    const backdropLeft = left - padding.left;\n    const backdropTop = top - padding.top;\n    const backdropWidth = right - left + padding.width;\n    const backdropHeight = bottom - top + padding.height;\n\n    if (Object.values(borderRadius).some(v => v !== 0)) {\n      ctx.beginPath();\n      addRoundedRectPath(ctx, {\n        x: backdropLeft,\n        y: backdropTop,\n        w: backdropWidth,\n        h: backdropHeight,\n        radius: borderRadius,\n      });\n      ctx.fill();\n    } else {\n      ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n    }\n  }\n}\n\nfunction drawPointLabels(scale, labelCount) {\n  const {ctx, options: {pointLabels}} = scale;\n\n  for (let i = labelCount - 1; i >= 0; i--) {\n    const item = scale._pointLabelItems[i];\n    if (!item.visible) {\n      // overlapping\n      continue;\n    }\n    const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n    drawPointLabelBox(ctx, optsAtIndex, item);\n    const plFont = toFont(optsAtIndex.font);\n    const {x, y, textAlign} = item;\n\n    renderText(\n      ctx,\n      scale._pointLabels[i],\n      x,\n      y + (plFont.lineHeight / 2),\n      plFont,\n      {\n        color: optsAtIndex.color,\n        textAlign: textAlign,\n        textBaseline: 'middle'\n      }\n    );\n  }\n}\n\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n  const {ctx} = scale;\n  if (circular) {\n    // Draw circular arcs between the points\n    ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n  } else {\n    // Draw straight lines connecting each index\n    let pointPosition = scale.getPointPosition(0, radius);\n    ctx.moveTo(pointPosition.x, pointPosition.y);\n\n    for (let i = 1; i < labelCount; i++) {\n      pointPosition = scale.getPointPosition(i, radius);\n      ctx.lineTo(pointPosition.x, pointPosition.y);\n    }\n  }\n}\n\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n  const ctx = scale.ctx;\n  const circular = gridLineOpts.circular;\n\n  const {color, lineWidth} = gridLineOpts;\n\n  if ((!circular && !labelCount) || !color || !lineWidth || radius < 0) {\n    return;\n  }\n\n  ctx.save();\n  ctx.strokeStyle = color;\n  ctx.lineWidth = lineWidth;\n  ctx.setLineDash(borderOpts.dash);\n  ctx.lineDashOffset = borderOpts.dashOffset;\n\n  ctx.beginPath();\n  pathRadiusLine(scale, radius, circular, labelCount);\n  ctx.closePath();\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction createPointLabelContext(parent, index, label) {\n  return createContext(parent, {\n    label,\n    index,\n    type: 'pointLabel'\n  });\n}\n\nexport default class RadialLinearScale extends LinearScaleBase {\n\n  static id = 'radialLinear';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    display: true,\n\n    // Boolean - Whether to animate scaling the chart from the centre\n    animate: true,\n    position: 'chartArea',\n\n    angleLines: {\n      display: true,\n      lineWidth: 1,\n      borderDash: [],\n      borderDashOffset: 0.0\n    },\n\n    grid: {\n      circular: false\n    },\n\n    startAngle: 0,\n\n    // label settings\n    ticks: {\n      // Boolean - Show a backdrop to the scale label\n      showLabelBackdrop: true,\n\n      callback: Ticks.formatters.numeric\n    },\n\n    pointLabels: {\n      backdropColor: undefined,\n\n      // Number - The backdrop padding above & below the label in pixels\n      backdropPadding: 2,\n\n      // Boolean - if true, show point labels\n      display: true,\n\n      // Number - Point label font size in pixels\n      font: {\n        size: 10\n      },\n\n      // Function - Used to convert point labels\n      callback(label) {\n        return label;\n      },\n\n      // Number - Additionl padding between scale and pointLabel\n      padding: 5,\n\n      // Boolean - if true, center point labels to slices in polar chart\n      centerPointLabels: false\n    }\n  };\n\n  static defaultRoutes = {\n    'angleLines.color': 'borderColor',\n    'pointLabels.color': 'color',\n    'ticks.color': 'color'\n  };\n\n  static descriptors = {\n    angleLines: {\n      _fallback: 'grid'\n    }\n  };\n\n  constructor(cfg) {\n    super(cfg);\n\n    /** @type {number} */\n    this.xCenter = undefined;\n    /** @type {number} */\n    this.yCenter = undefined;\n    /** @type {number} */\n    this.drawingArea = undefined;\n    /** @type {string[]} */\n    this._pointLabels = [];\n    this._pointLabelItems = [];\n  }\n\n  setDimensions() {\n    // Set the unconstrained dimension before label rotation\n    const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n    const w = this.width = this.maxWidth - padding.width;\n    const h = this.height = this.maxHeight - padding.height;\n    this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n    this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n    this.drawingArea = Math.floor(Math.min(w, h) / 2);\n  }\n\n  determineDataLimits() {\n    const {min, max} = this.getMinMax(false);\n\n    this.min = isFinite(min) && !isNaN(min) ? min : 0;\n    this.max = isFinite(max) && !isNaN(max) ? max : 0;\n\n    // Common base implementation to handle min, max, beginAtZero\n    this.handleTickRangeOptions();\n  }\n\n  /**\n\t * Returns the maximum number of ticks based on the scale dimension\n\t * @protected\n\t */\n  computeTickLimit() {\n    return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n  }\n\n  generateTickLabels(ticks) {\n    LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n\n    // Point labels\n    this._pointLabels = this.getLabels()\n      .map((value, index) => {\n        const label = callCallback(this.options.pointLabels.callback, [value, index], this);\n        return label || label === 0 ? label : '';\n      })\n      .filter((v, i) => this.chart.getDataVisibility(i));\n  }\n\n  fit() {\n    const opts = this.options;\n\n    if (opts.display && opts.pointLabels.display) {\n      fitWithPointLabels(this);\n    } else {\n      this.setCenterPoint(0, 0, 0, 0);\n    }\n  }\n\n  setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n    this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n    this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n    this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n  }\n\n  getIndexAngle(index) {\n    const angleMultiplier = TAU / (this._pointLabels.length || 1);\n    const startAngle = this.options.startAngle || 0;\n\n    return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n  }\n\n  getDistanceFromCenterForValue(value) {\n    if (isNullOrUndef(value)) {\n      return NaN;\n    }\n\n    // Take into account half font size + the yPadding of the top value\n    const scalingFactor = this.drawingArea / (this.max - this.min);\n    if (this.options.reverse) {\n      return (this.max - value) * scalingFactor;\n    }\n    return (value - this.min) * scalingFactor;\n  }\n\n  getValueForDistanceFromCenter(distance) {\n    if (isNullOrUndef(distance)) {\n      return NaN;\n    }\n\n    const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n    return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n  }\n\n  getPointLabelContext(index) {\n    const pointLabels = this._pointLabels || [];\n\n    if (index >= 0 && index < pointLabels.length) {\n      const pointLabel = pointLabels[index];\n      return createPointLabelContext(this.getContext(), index, pointLabel);\n    }\n  }\n\n  getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n    const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n    return {\n      x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n      y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n      angle\n    };\n  }\n\n  getPointPositionForValue(index, value) {\n    return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n  }\n\n  getBasePosition(index) {\n    return this.getPointPositionForValue(index || 0, this.getBaseValue());\n  }\n\n  getPointLabelPosition(index) {\n    const {left, top, right, bottom} = this._pointLabelItems[index];\n    return {\n      left,\n      top,\n      right,\n      bottom,\n    };\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBackground() {\n    const {backgroundColor, grid: {circular}} = this.options;\n    if (backgroundColor) {\n      const ctx = this.ctx;\n      ctx.save();\n      ctx.beginPath();\n      pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n      ctx.closePath();\n      ctx.fillStyle = backgroundColor;\n      ctx.fill();\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawGrid() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const {angleLines, grid, border} = opts;\n    const labelCount = this._pointLabels.length;\n\n    let i, offset, position;\n\n    if (opts.pointLabels.display) {\n      drawPointLabels(this, labelCount);\n    }\n\n    if (grid.display) {\n      this.ticks.forEach((tick, index) => {\n        if (index !== 0) {\n          offset = this.getDistanceFromCenterForValue(tick.value);\n          const context = this.getContext(index);\n          const optsAtIndex = grid.setContext(context);\n          const optsAtIndexBorder = border.setContext(context);\n\n          drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n        }\n      });\n    }\n\n    if (angleLines.display) {\n      ctx.save();\n\n      for (i = labelCount - 1; i >= 0; i--) {\n        const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n        const {color, lineWidth} = optsAtIndex;\n\n        if (!lineWidth || !color) {\n          continue;\n        }\n\n        ctx.lineWidth = lineWidth;\n        ctx.strokeStyle = color;\n\n        ctx.setLineDash(optsAtIndex.borderDash);\n        ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n\n        offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);\n        position = this.getPointPosition(i, offset);\n        ctx.beginPath();\n        ctx.moveTo(this.xCenter, this.yCenter);\n        ctx.lineTo(position.x, position.y);\n        ctx.stroke();\n      }\n\n      ctx.restore();\n    }\n  }\n\n  /**\n\t * @protected\n\t */\n  drawBorder() {}\n\n  /**\n\t * @protected\n\t */\n  drawLabels() {\n    const ctx = this.ctx;\n    const opts = this.options;\n    const tickOpts = opts.ticks;\n\n    if (!tickOpts.display) {\n      return;\n    }\n\n    const startAngle = this.getIndexAngle(0);\n    let offset, width;\n\n    ctx.save();\n    ctx.translate(this.xCenter, this.yCenter);\n    ctx.rotate(startAngle);\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    this.ticks.forEach((tick, index) => {\n      if (index === 0 && !opts.reverse) {\n        return;\n      }\n\n      const optsAtIndex = tickOpts.setContext(this.getContext(index));\n      const tickFont = toFont(optsAtIndex.font);\n      offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n\n      if (optsAtIndex.showLabelBackdrop) {\n        ctx.font = tickFont.string;\n        width = ctx.measureText(tick.label).width;\n        ctx.fillStyle = optsAtIndex.backdropColor;\n\n        const padding = toPadding(optsAtIndex.backdropPadding);\n        ctx.fillRect(\n          -width / 2 - padding.left,\n          -offset - tickFont.size / 2 - padding.top,\n          width + padding.width,\n          tickFont.size + padding.height\n        );\n      }\n\n      renderText(ctx, tick.label, 0, -offset, tickFont, {\n        color: optsAtIndex.color,\n        strokeColor: optsAtIndex.textStrokeColor,\n        strokeWidth: optsAtIndex.textStrokeWidth,\n      });\n    });\n\n    ctx.restore();\n  }\n\n  /**\n\t * @protected\n\t */\n  drawTitle() {}\n}\n","import adapters from '../core/core.adapters.js';\nimport {callback as call, isFinite, isNullOrUndef, mergeIf, valueOrDefault} from '../helpers/helpers.core.js';\nimport {toRadians, isNumber, _limitValue} from '../helpers/helpers.math.js';\nimport Scale from '../core/core.scale.js';\nimport {_arrayUnique, _filterBetween, _lookup} from '../helpers/helpers.collection.js';\n\n/**\n * @typedef { import('../core/core.adapters.js').TimeUnit } Unit\n * @typedef {{common: boolean, size: number, steps?: number}} Interval\n * @typedef { import('../core/core.adapters.js').DateAdapter } DateAdapter\n */\n\n/**\n * @type {Object<Unit, Interval>}\n */\nconst INTERVALS = {\n  millisecond: {common: true, size: 1, steps: 1000},\n  second: {common: true, size: 1000, steps: 60},\n  minute: {common: true, size: 60000, steps: 60},\n  hour: {common: true, size: 3600000, steps: 24},\n  day: {common: true, size: 86400000, steps: 30},\n  week: {common: false, size: 604800000, steps: 4},\n  month: {common: true, size: 2.628e9, steps: 12},\n  quarter: {common: false, size: 7.884e9, steps: 4},\n  year: {common: true, size: 3.154e10}\n};\n\n/**\n * @type {Unit[]}\n */\nconst UNITS = /** @type Unit[] */ /* #__PURE__ */ (Object.keys(INTERVALS));\n\n/**\n * @param {number} a\n * @param {number} b\n */\nfunction sorter(a, b) {\n  return a - b;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {*} input\n * @return {number}\n */\nfunction parse(scale, input) {\n  if (isNullOrUndef(input)) {\n    return null;\n  }\n\n  const adapter = scale._adapter;\n  const {parser, round, isoWeekday} = scale._parseOpts;\n  let value = input;\n\n  if (typeof parser === 'function') {\n    value = parser(value);\n  }\n\n  // Only parse if it's not a timestamp already\n  if (!isFinite(value)) {\n    value = typeof parser === 'string'\n      ? adapter.parse(value, /** @type {Unit} */ (parser))\n      : adapter.parse(value);\n  }\n\n  if (value === null) {\n    return null;\n  }\n\n  if (round) {\n    value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true)\n      ? adapter.startOf(value, 'isoWeek', isoWeekday)\n      : adapter.startOf(value, round);\n  }\n\n  return +value;\n}\n\n/**\n * Figures out what unit results in an appropriate number of auto-generated ticks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @param {number} capacity\n * @return {object}\n */\nfunction determineUnitForAutoTicks(minUnit, min, max, capacity) {\n  const ilen = UNITS.length;\n\n  for (let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {\n    const interval = INTERVALS[UNITS[i]];\n    const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n\n    if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n      return UNITS[i];\n    }\n  }\n\n  return UNITS[ilen - 1];\n}\n\n/**\n * Figures out what unit to format a set of ticks with\n * @param {TimeScale} scale\n * @param {number} numTicks\n * @param {Unit} minUnit\n * @param {number} min\n * @param {number} max\n * @return {Unit}\n */\nfunction determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n  for (let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {\n    const unit = UNITS[i];\n    if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n      return unit;\n    }\n  }\n\n  return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n\n/**\n * @param {Unit} unit\n * @return {object}\n */\nfunction determineMajorUnit(unit) {\n  for (let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {\n    if (INTERVALS[UNITS[i]].common) {\n      return UNITS[i];\n    }\n  }\n}\n\n/**\n * @param {object} ticks\n * @param {number} time\n * @param {number[]} [timestamps] - if defined, snap to these timestamps\n */\nfunction addTick(ticks, time, timestamps) {\n  if (!timestamps) {\n    ticks[time] = true;\n  } else if (timestamps.length) {\n    const {lo, hi} = _lookup(timestamps, time);\n    const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n    ticks[timestamp] = true;\n  }\n}\n\n/**\n * @param {TimeScale} scale\n * @param {object[]} ticks\n * @param {object} map\n * @param {Unit} majorUnit\n * @return {object[]}\n */\nfunction setMajorTicks(scale, ticks, map, majorUnit) {\n  const adapter = scale._adapter;\n  const first = +adapter.startOf(ticks[0].value, majorUnit);\n  const last = ticks[ticks.length - 1].value;\n  let major, index;\n\n  for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {\n    index = map[major];\n    if (index >= 0) {\n      ticks[index].major = true;\n    }\n  }\n  return ticks;\n}\n\n/**\n * @param {TimeScale} scale\n * @param {number[]} values\n * @param {Unit|undefined} [majorUnit]\n * @return {object[]}\n */\nfunction ticksFromTimestamps(scale, values, majorUnit) {\n  const ticks = [];\n  /** @type {Object<number,object>} */\n  const map = {};\n  const ilen = values.length;\n  let i, value;\n\n  for (i = 0; i < ilen; ++i) {\n    value = values[i];\n    map[value] = i;\n\n    ticks.push({\n      value,\n      major: false\n    });\n  }\n\n  // We set the major ticks separately from the above loop because calling startOf for every tick\n  // is expensive when there is a large number of ticks\n  return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\n\nexport default class TimeScale extends Scale {\n\n  static id = 'time';\n\n  /**\n   * @type {any}\n   */\n  static defaults = {\n    /**\n     * Scale boundary strategy (bypassed by min/max time options)\n     * - `data`: make sure data are fully visible, ticks outside are removed\n     * - `ticks`: make sure ticks are fully visible, data outside are truncated\n     * @see https://github.com/chartjs/Chart.js/pull/4556\n     * @since 2.7.0\n     */\n    bounds: 'data',\n\n    adapters: {},\n    time: {\n      parser: false, // false == a pattern string from or a custom callback that converts its argument to a timestamp\n      unit: false, // false == automatic or override with week, month, year, etc.\n      round: false, // none, or override with week, month, year, etc.\n      isoWeekday: false, // override week start day\n      minUnit: 'millisecond',\n      displayFormats: {}\n    },\n    ticks: {\n      /**\n       * Ticks generation input values:\n       * - 'auto': generates \"optimal\" ticks based on scale size and time options.\n       * - 'data': generates ticks from data (including labels from data {t|x|y} objects).\n       * - 'labels': generates ticks from user given `data.labels` values ONLY.\n       * @see https://github.com/chartjs/Chart.js/pull/4507\n       * @since 2.7.0\n       */\n      source: 'auto',\n\n      callback: false,\n\n      major: {\n        enabled: false\n      }\n    }\n  };\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {{data: number[], labels: number[], all: number[]}} */\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n\n    /** @type {Unit} */\n    this._unit = 'day';\n    /** @type {Unit=} */\n    this._majorUnit = undefined;\n    this._offsets = {};\n    this._normalized = false;\n    this._parseOpts = undefined;\n  }\n\n  init(scaleOpts, opts = {}) {\n    const time = scaleOpts.time || (scaleOpts.time = {});\n    /** @type {DateAdapter} */\n    const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n\n    adapter.init(opts);\n\n    // Backward compatibility: before introducing adapter, `displayFormats` was\n    // supposed to contain *all* unit/string pairs but this can't be resolved\n    // when loading the scale (adapters are loaded afterward), so let's populate\n    // missing formats on update\n    mergeIf(time.displayFormats, adapter.formats());\n\n    this._parseOpts = {\n      parser: time.parser,\n      round: time.round,\n      isoWeekday: time.isoWeekday\n    };\n\n    super.init(scaleOpts);\n\n    this._normalized = opts.normalized;\n  }\n\n  /**\n\t * @param {*} raw\n\t * @param {number?} [index]\n\t * @return {number}\n\t */\n  parse(raw, index) { // eslint-disable-line no-unused-vars\n    if (raw === undefined) {\n      return null;\n    }\n    return parse(this, raw);\n  }\n\n  beforeLayout() {\n    super.beforeLayout();\n    this._cache = {\n      data: [],\n      labels: [],\n      all: []\n    };\n  }\n\n  determineDataLimits() {\n    const options = this.options;\n    const adapter = this._adapter;\n    const unit = options.time.unit || 'day';\n    // eslint-disable-next-line prefer-const\n    let {min, max, minDefined, maxDefined} = this.getUserBounds();\n\n    /**\n\t\t * @param {object} bounds\n\t\t */\n    function _applyBounds(bounds) {\n      if (!minDefined && !isNaN(bounds.min)) {\n        min = Math.min(min, bounds.min);\n      }\n      if (!maxDefined && !isNaN(bounds.max)) {\n        max = Math.max(max, bounds.max);\n      }\n    }\n\n    // If we have user provided `min` and `max` labels / data bounds can be ignored\n    if (!minDefined || !maxDefined) {\n      // Labels are always considered, when user did not force bounds\n      _applyBounds(this._getLabelBounds());\n\n      // If `bounds` is `'ticks'` and `ticks.source` is `'labels'`,\n      // data bounds are ignored (and don't need to be determined)\n      if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n        _applyBounds(this.getMinMax(false));\n      }\n    }\n\n    min = isFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n    max = isFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n\n    // Make sure that max is strictly higher than min (required by the timeseries lookup table)\n    this.min = Math.min(min, max - 1);\n    this.max = Math.max(min + 1, max);\n  }\n\n  /**\n\t * @private\n\t */\n  _getLabelBounds() {\n    const arr = this.getLabelTimestamps();\n    let min = Number.POSITIVE_INFINITY;\n    let max = Number.NEGATIVE_INFINITY;\n\n    if (arr.length) {\n      min = arr[0];\n      max = arr[arr.length - 1];\n    }\n    return {min, max};\n  }\n\n  /**\n\t * @return {object[]}\n\t */\n  buildTicks() {\n    const options = this.options;\n    const timeOpts = options.time;\n    const tickOpts = options.ticks;\n    const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n\n    if (options.bounds === 'ticks' && timestamps.length) {\n      this.min = this._userMin || timestamps[0];\n      this.max = this._userMax || timestamps[timestamps.length - 1];\n    }\n\n    const min = this.min;\n    const max = this.max;\n\n    const ticks = _filterBetween(timestamps, min, max);\n\n    // PRIVATE\n    // determineUnitForFormatting relies on the number of ticks so we don't use it when\n    // autoSkip is enabled because we don't yet know what the final number of ticks will be\n    this._unit = timeOpts.unit || (tickOpts.autoSkip\n      ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min))\n      : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n    this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined\n      : determineMajorUnit(this._unit);\n    this.initOffsets(timestamps);\n\n    if (options.reverse) {\n      ticks.reverse();\n    }\n\n    return ticksFromTimestamps(this, ticks, this._majorUnit);\n  }\n\n  afterAutoSkip() {\n    // Offsets for bar charts need to be handled with the auto skipped\n    // ticks. Once ticks have been skipped, we re-compute the offsets.\n    if (this.options.offsetAfterAutoskip) {\n      this.initOffsets(this.ticks.map(tick => +tick.value));\n    }\n  }\n\n  /**\n\t * Returns the start and end offsets from edges in the form of {start, end}\n\t * where each value is a relative width to the scale and ranges between 0 and 1.\n\t * They add extra margins on the both sides by scaling down the original scale.\n\t * Offsets are added when the `offset` option is true.\n\t * @param {number[]} timestamps\n\t * @protected\n\t */\n  initOffsets(timestamps = []) {\n    let start = 0;\n    let end = 0;\n    let first, last;\n\n    if (this.options.offset && timestamps.length) {\n      first = this.getDecimalForValue(timestamps[0]);\n      if (timestamps.length === 1) {\n        start = 1 - first;\n      } else {\n        start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n      }\n      last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n      if (timestamps.length === 1) {\n        end = last;\n      } else {\n        end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n      }\n    }\n    const limit = timestamps.length < 3 ? 0.5 : 0.25;\n    start = _limitValue(start, 0, limit);\n    end = _limitValue(end, 0, limit);\n\n    this._offsets = {start, end, factor: 1 / (start + 1 + end)};\n  }\n\n  /**\n\t * Generates a maximum of `capacity` timestamps between min and max, rounded to the\n\t * `minor` unit using the given scale time `options`.\n\t * Important: this method can return ticks outside the min and max range, it's the\n\t * responsibility of the calling code to clamp values if needed.\n\t * @protected\n\t */\n  _generate() {\n    const adapter = this._adapter;\n    const min = this.min;\n    const max = this.max;\n    const options = this.options;\n    const timeOpts = options.time;\n    // @ts-ignore\n    const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n    const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n    const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n    const hasWeekday = isNumber(weekday) || weekday === true;\n    const ticks = {};\n    let first = min;\n    let time, count;\n\n    // For 'week' unit, handle the first day of week option\n    if (hasWeekday) {\n      first = +adapter.startOf(first, 'isoWeek', weekday);\n    }\n\n    // Align first ticks on unit\n    first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n\n    // Prevent browser from freezing in case user options request millions of milliseconds\n    if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n      throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n    }\n\n    const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n    for (time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++) {\n      addTick(ticks, time, timestamps);\n    }\n\n    if (time === max || options.bounds === 'ticks' || count === 1) {\n      addTick(ticks, time, timestamps);\n    }\n\n    // @ts-ignore\n    return Object.keys(ticks).sort(sorter).map(x => +x);\n  }\n\n  /**\n\t * @param {number} value\n\t * @return {string}\n\t */\n  getLabelForValue(value) {\n    const adapter = this._adapter;\n    const timeOpts = this.options.time;\n\n    if (timeOpts.tooltipFormat) {\n      return adapter.format(value, timeOpts.tooltipFormat);\n    }\n    return adapter.format(value, timeOpts.displayFormats.datetime);\n  }\n\n  /**\n\t * @param {number} value\n\t * @param {string|undefined} format\n\t * @return {string}\n\t */\n  format(value, format) {\n    const options = this.options;\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const fmt = format || formats[unit];\n    return this._adapter.format(value, fmt);\n  }\n\n  /**\n\t * Function to format an individual tick mark\n\t * @param {number} time\n\t * @param {number} index\n\t * @param {object[]} ticks\n\t * @param {string|undefined} [format]\n\t * @return {string}\n\t * @private\n\t */\n  _tickFormatFunction(time, index, ticks, format) {\n    const options = this.options;\n    const formatter = options.ticks.callback;\n\n    if (formatter) {\n      return call(formatter, [time, index, ticks], this);\n    }\n\n    const formats = options.time.displayFormats;\n    const unit = this._unit;\n    const majorUnit = this._majorUnit;\n    const minorFormat = unit && formats[unit];\n    const majorFormat = majorUnit && formats[majorUnit];\n    const tick = ticks[index];\n    const major = majorUnit && majorFormat && tick && tick.major;\n\n    return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n  }\n\n  /**\n\t * @param {object[]} ticks\n\t */\n  generateTickLabels(ticks) {\n    let i, ilen, tick;\n\n    for (i = 0, ilen = ticks.length; i < ilen; ++i) {\n      tick = ticks[i];\n      tick.label = this._tickFormatFunction(tick.value, i, ticks);\n    }\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return value === null ? NaN : (value - this.min) / (this.max - this.min);\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getPixelForValue(value) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForValue(value);\n    return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return this.min + pos * (this.max - this.min);\n  }\n\n  /**\n\t * @param {string} label\n\t * @return {{w:number, h:number}}\n\t * @private\n\t */\n  _getLabelSize(label) {\n    const ticksOpts = this.options.ticks;\n    const tickLabelWidth = this.ctx.measureText(label).width;\n    const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n    const cosRotation = Math.cos(angle);\n    const sinRotation = Math.sin(angle);\n    const tickFontSize = this._resolveTickFontOptions(0).size;\n\n    return {\n      w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),\n      h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)\n    };\n  }\n\n  /**\n\t * @param {number} exampleTime\n\t * @return {number}\n\t * @private\n\t */\n  _getLabelCapacity(exampleTime) {\n    const timeOpts = this.options.time;\n    const displayFormats = timeOpts.displayFormats;\n\n    // pick the longest format (milliseconds) for guesstimation\n    const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n    const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [exampleTime], this._majorUnit), format);\n    const size = this._getLabelSize(exampleLabel);\n    // subtract 1 - if offset then there's one less label than tick\n    // if not offset then one half label padding is added to each end leaving room for one less label\n    const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n    return capacity > 0 ? capacity : 1;\n  }\n\n  /**\n\t * @protected\n\t */\n  getDataTimestamps() {\n    let timestamps = this._cache.data || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const metas = this.getMatchingVisibleMetas();\n\n    if (this._normalized && metas.length) {\n      return (this._cache.data = metas[0].controller.getAllParsedValues(this));\n    }\n\n    for (i = 0, ilen = metas.length; i < ilen; ++i) {\n      timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n    }\n\n    return (this._cache.data = this.normalize(timestamps));\n  }\n\n  /**\n\t * @protected\n\t */\n  getLabelTimestamps() {\n    const timestamps = this._cache.labels || [];\n    let i, ilen;\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const labels = this.getLabels();\n    for (i = 0, ilen = labels.length; i < ilen; ++i) {\n      timestamps.push(parse(this, labels[i]));\n    }\n\n    return (this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps));\n  }\n\n  /**\n\t * @param {number[]} values\n\t * @protected\n\t */\n  normalize(values) {\n    // It seems to be somewhat faster to do sorting first\n    return _arrayUnique(values.sort(sorter));\n  }\n}\n","import TimeScale from './scale.time.js';\nimport {_lookupByKey} from '../helpers/helpers.collection.js';\n\n/**\n * Linearly interpolates the given source `val` using the table. If value is out of bounds, values\n * at edges are used for the interpolation.\n * @param {object} table\n * @param {number} val\n * @param {boolean} [reverse] lookup time based on position instead of vice versa\n * @return {object}\n */\nfunction interpolate(table, val, reverse) {\n  let lo = 0;\n  let hi = table.length - 1;\n  let prevSource, nextSource, prevTarget, nextTarget;\n  if (reverse) {\n    if (val >= table[lo].pos && val <= table[hi].pos) {\n      ({lo, hi} = _lookupByKey(table, 'pos', val));\n    }\n    ({pos: prevSource, time: prevTarget} = table[lo]);\n    ({pos: nextSource, time: nextTarget} = table[hi]);\n  } else {\n    if (val >= table[lo].time && val <= table[hi].time) {\n      ({lo, hi} = _lookupByKey(table, 'time', val));\n    }\n    ({time: prevSource, pos: prevTarget} = table[lo]);\n    ({time: nextSource, pos: nextTarget} = table[hi]);\n  }\n\n  const span = nextSource - prevSource;\n  return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\n\nclass TimeSeriesScale extends TimeScale {\n\n  static id = 'timeseries';\n\n  /**\n   * @type {any}\n   */\n  static defaults = TimeScale.defaults;\n\n  /**\n\t * @param {object} props\n\t */\n  constructor(props) {\n    super(props);\n\n    /** @type {object[]} */\n    this._table = [];\n    /** @type {number} */\n    this._minPos = undefined;\n    /** @type {number} */\n    this._tableRange = undefined;\n  }\n\n  /**\n\t * @protected\n\t */\n  initOffsets() {\n    const timestamps = this._getTimestampsForTable();\n    const table = this._table = this.buildLookupTable(timestamps);\n    this._minPos = interpolate(table, this.min);\n    this._tableRange = interpolate(table, this.max) - this._minPos;\n    super.initOffsets(timestamps);\n  }\n\n  /**\n\t * Returns an array of {time, pos} objects used to interpolate a specific `time` or position\n\t * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is\n\t * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other\n\t * extremity (left + width or top + height). Note that it would be more optimized to directly\n\t * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need\n\t * to create the lookup table. The table ALWAYS contains at least two items: min and max.\n\t * @param {number[]} timestamps\n\t * @return {object[]}\n\t * @protected\n\t */\n  buildLookupTable(timestamps) {\n    const {min, max} = this;\n    const items = [];\n    const table = [];\n    let i, ilen, prev, curr, next;\n\n    for (i = 0, ilen = timestamps.length; i < ilen; ++i) {\n      curr = timestamps[i];\n      if (curr >= min && curr <= max) {\n        items.push(curr);\n      }\n    }\n\n    if (items.length < 2) {\n      // In case there is less that 2 timestamps between min and max, the scale is defined by min and max\n      return [\n        {time: min, pos: 0},\n        {time: max, pos: 1}\n      ];\n    }\n\n    for (i = 0, ilen = items.length; i < ilen; ++i) {\n      next = items[i + 1];\n      prev = items[i - 1];\n      curr = items[i];\n\n      // only add points that breaks the scale linearity\n      if (Math.round((next + prev) / 2) !== curr) {\n        table.push({time: curr, pos: i / (ilen - 1)});\n      }\n    }\n    return table;\n  }\n\n  /**\n    * Generates all timestamps defined in the data.\n    * Important: this method can return ticks outside the min and max range, it's the\n    * responsibility of the calling code to clamp values if needed.\n    * @protected\n    */\n  _generate() {\n    const min = this.min;\n    const max = this.max;\n    let timestamps = super.getDataTimestamps();\n    if (!timestamps.includes(min) || !timestamps.length) {\n      timestamps.splice(0, 0, min);\n    }\n    if (!timestamps.includes(max) || timestamps.length === 1) {\n      timestamps.push(max);\n    }\n    return timestamps.sort((a, b) => a - b);\n  }\n\n  /**\n\t * Returns all timestamps\n\t * @return {number[]}\n\t * @private\n\t */\n  _getTimestampsForTable() {\n    let timestamps = this._cache.all || [];\n\n    if (timestamps.length) {\n      return timestamps;\n    }\n\n    const data = this.getDataTimestamps();\n    const label = this.getLabelTimestamps();\n    if (data.length && label.length) {\n      // If combining labels and data (data might not contain all labels),\n      // we need to recheck uniqueness and sort\n      timestamps = this.normalize(data.concat(label));\n    } else {\n      timestamps = data.length ? data : label;\n    }\n    timestamps = this._cache.all = timestamps;\n\n    return timestamps;\n  }\n\n  /**\n\t * @param {number} value - Milliseconds since epoch (1 January 1970 00:00:00 UTC)\n\t * @return {number}\n\t */\n  getDecimalForValue(value) {\n    return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n  }\n\n  /**\n\t * @param {number} pixel\n\t * @return {number}\n\t */\n  getValueForPixel(pixel) {\n    const offsets = this._offsets;\n    const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n    return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n  }\n}\n\nexport default TimeSeriesScale;\n","export * from './controllers/index.js';\nexport * from './core/index.js';\nexport * from './elements/index.js';\nexport * from './platform/index.js';\nexport * from './plugins/index.js';\nexport * from './scales/index.js';\n\nimport * as controllers from './controllers/index.js';\nimport * as elements from './elements/index.js';\nimport * as plugins from './plugins/index.js';\nimport * as scales from './scales/index.js';\n\nexport {\n  controllers,\n  elements,\n  plugins,\n  scales,\n};\n\nexport const registerables = [\n  controllers,\n  elements,\n  plugins,\n  scales,\n];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}