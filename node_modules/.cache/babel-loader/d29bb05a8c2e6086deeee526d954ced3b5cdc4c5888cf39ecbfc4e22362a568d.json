{"ast":null,"code":"/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\nconst domBindBase = GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));\n\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\nexport class DomBind extends domBindBase {\n  static get observedAttributes() {\n    return ['mutable-data'];\n  }\n  constructor() {\n    super();\n    if (strictTemplatePolicy) {\n      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);\n    }\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    this.render();\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n  __removeChildren() {\n    if (this.__children) {\n      for (let i = 0; i < this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n  render() {\n    let template;\n    if (!this.__children) {\n      template = /** @type {?HTMLTemplateElement} */template || this.querySelector('template');\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template = /** @type {HTMLTemplateElement} */this.querySelector('template');\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {\n          childList: true\n        });\n        return;\n      }\n      this.root = this._stampTemplate( /** @type {!HTMLTemplateElement} */template);\n      this.$ = this.root.$;\n      this.__children = [];\n      for (let n = this.root.firstChild; n; n = n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n      this._enableProperties();\n    }\n    this.__insertChildren();\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n}\ncustomElements.define('dom-bind', DomBind);","map":{"version":3,"names":["PropertyEffects","OptionalMutableData","GestureEventListeners","strictTemplatePolicy","wrap","hideElementsGlobally","domBindBase","HTMLElement","DomBind","observedAttributes","constructor","Error","root","$","__children","attributeChangedCallback","name","old","value","namespace","mutableData","connectedCallback","style","display","render","disconnectedCallback","__removeChildren","__insertChildren","parentNode","insertBefore","i","length","appendChild","template","querySelector","observer","MutationObserver","disconnect","observe","childList","_stampTemplate","n","firstChild","nextSibling","_enableProperties","dispatchEvent","CustomEvent","bubbles","composed","customElements","define"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/polymer/lib/elements/dom-bind.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nimport '../utils/boot.js';\n\nimport { PropertyEffects } from '../mixins/property-effects.js';\nimport { OptionalMutableData } from '../mixins/mutable-data.js';\nimport { GestureEventListeners } from '../mixins/gesture-event-listeners.js';\nimport { strictTemplatePolicy } from '../utils/settings.js';\nimport { wrap } from '../utils/wrap.js';\nimport { hideElementsGlobally } from '../utils/hide-template-controls.js';\n\n/**\n * @constructor\n * @extends {HTMLElement}\n * @implements {Polymer_PropertyEffects}\n * @implements {Polymer_OptionalMutableData}\n * @implements {Polymer_GestureEventListeners}\n * @private\n */\nconst domBindBase =\n  GestureEventListeners(\n    OptionalMutableData(\n      PropertyEffects(HTMLElement)));\n\n/**\n * Custom element to allow using Polymer's template features (data binding,\n * declarative event listeners, etc.) in the main document without defining\n * a new custom element.\n *\n * `<template>` tags utilizing bindings may be wrapped with the `<dom-bind>`\n * element, which will immediately stamp the wrapped template into the main\n * document and bind elements to the `dom-bind` element itself as the\n * binding scope.\n *\n * @polymer\n * @customElement\n * @appliesMixin PropertyEffects\n * @appliesMixin OptionalMutableData\n * @appliesMixin GestureEventListeners\n * @extends {domBindBase}\n * @summary Custom element to allow using Polymer's template features (data\n *   binding, declarative event listeners, etc.) in the main document.\n */\nexport class DomBind extends domBindBase {\n\n  static get observedAttributes() { return ['mutable-data']; }\n\n  constructor() {\n    super();\n    if (strictTemplatePolicy) {\n      throw new Error(`strictTemplatePolicy: dom-bind not allowed`);\n    }\n    this.root = null;\n    this.$ = null;\n    this.__children = null;\n  }\n\n  /* eslint-disable no-unused-vars */\n  /**\n   * @override\n   * @param {string} name Name of attribute that changed\n   * @param {?string} old Old attribute value\n   * @param {?string} value New attribute value\n   * @param {?string} namespace Attribute namespace.\n   * @return {void}\n   */\n  attributeChangedCallback(name, old, value, namespace) {\n    // assumes only one observed attribute\n    this.mutableData = true;\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  connectedCallback() {\n    if (!hideElementsGlobally()) {\n      this.style.display = 'none';\n    }\n    this.render();\n  }\n\n  /**\n   * @override\n   * @return {void}\n   */\n  disconnectedCallback() {\n    this.__removeChildren();\n  }\n\n  __insertChildren() {\n    wrap(wrap(this).parentNode).insertBefore(this.root, this);\n  }\n\n  __removeChildren() {\n    if (this.__children) {\n      for (let i=0; i<this.__children.length; i++) {\n        this.root.appendChild(this.__children[i]);\n      }\n    }\n  }\n\n  /**\n   * Forces the element to render its content. This is typically only\n   * necessary to call if HTMLImports with the async attribute are used.\n   * @return {void}\n   */\n  render() {\n    let template;\n    if (!this.__children) {\n      template = /** @type {?HTMLTemplateElement} */(template || this.querySelector('template'));\n      if (!template) {\n        // Wait until childList changes and template should be there by then\n        let observer = new MutationObserver(() => {\n          template = /** @type {HTMLTemplateElement} */(this.querySelector('template'));\n          if (template) {\n            observer.disconnect();\n            this.render();\n          } else {\n            throw new Error('dom-bind requires a <template> child');\n          }\n        });\n        observer.observe(this, {childList: true});\n        return;\n      }\n      this.root = this._stampTemplate(\n        /** @type {!HTMLTemplateElement} */(template));\n      this.$ = this.root.$;\n      this.__children = [];\n      for (let n=this.root.firstChild; n; n=n.nextSibling) {\n        this.__children[this.__children.length] = n;\n      }\n      this._enableProperties();\n    }\n    this.__insertChildren();\n    this.dispatchEvent(new CustomEvent('dom-change', {\n      bubbles: true,\n      composed: true\n    }));\n  }\n\n}\n\ncustomElements.define('dom-bind', DomBind);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}