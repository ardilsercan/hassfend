{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nvar HaLabelBadge = _decorate([customElement(\"ha-label-badge\")], function (_initialize, _LitElement) {\n  var HaLabelBadge = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaLabelBadge, _LitElement2);\n    function HaLabelBadge() {\n      var _this;\n      _classCallCheck(this, HaLabelBadge);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaLabelBadge, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaLabelBadge);\n  }(_LitElement);\n  return {\n    F: HaLabelBadge,\n    d: [{\n      kind: \"field\",\n      decorators: [property()],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"description\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"image\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <div class=\\\"badge-container\\\">\\n        <div class=\\\"label-badge\\\" id=\\\"badge\\\">\\n          <div class=\\\"value\\\">\\n            <slot></slot>\\n          </div>\\n          \", \"\\n        </div>\\n        \", \"\\n      </div>\\n    \"])), this.label ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n                <div\\n                  class=\", \"\\n                >\\n                  <span>\", \"</span>\\n                </div>\\n              \"])), classMap({\n          label: true,\n          big: this.label.length > 5\n        }), this.label) : \"\", this.description ? html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"<div class=\\\"title\\\">\", \"</div>\"])), this.description) : \"\");\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [css(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n        .badge-container {\\n          display: inline-block;\\n          text-align: center;\\n          vertical-align: top;\\n          padding: var(--ha-label-badge-padding, 0 0 0 0);\\n        }\\n        .label-badge {\\n          position: relative;\\n          display: block;\\n          margin: 0 auto;\\n          width: var(--ha-label-badge-size, 2.5em);\\n          text-align: center;\\n          height: var(--ha-label-badge-size, 2.5em);\\n          line-height: var(--ha-label-badge-size, 2.5em);\\n          font-size: var(--ha-label-badge-font-size, 1.5em);\\n          border-radius: var(--ha-label-badge-border-radius, 50%);\\n          border: 0.1em solid var(--ha-label-badge-color, var(--primary-color));\\n          color: var(--label-badge-text-color, rgb(76, 76, 76));\\n\\n          white-space: nowrap;\\n          background-color: var(--label-badge-background-color, white);\\n          background-size: cover;\\n          transition: border 0.3s ease-in-out;\\n        }\\n        .label-badge .label.big span {\\n          font-size: 90%;\\n          padding: 10% 12% 7% 12%; /* push smaller text a bit down to center vertically */\\n        }\\n        .label-badge .value {\\n          font-size: 90%;\\n          overflow: hidden;\\n          text-overflow: ellipsis;\\n        }\\n        .label-badge .label {\\n          position: absolute;\\n          bottom: -1em;\\n          /* Make the label as wide as container+border. (parent_borderwidth / font-size) */\\n          left: -0.2em;\\n          right: -0.2em;\\n          line-height: 1em;\\n          font-size: 0.5em;\\n        }\\n        .label-badge .label span {\\n          box-sizing: border-box;\\n          max-width: 100%;\\n          display: inline-block;\\n          background-color: var(--ha-label-badge-color, var(--primary-color));\\n          color: var(--ha-label-badge-label-color, white);\\n          border-radius: 1em;\\n          padding: 9% 16% 8% 16%; /* mostly apitalized text, not much descenders => bit more top margin */\\n          font-weight: 500;\\n          overflow: hidden;\\n          text-transform: uppercase;\\n          text-overflow: ellipsis;\\n          transition: background-color 0.3s ease-in-out;\\n          text-transform: var(--ha-label-badge-label-text-transform, uppercase);\\n        }\\n        .badge-container .title {\\n          margin-top: 1em;\\n          font-size: var(--ha-label-badge-title-font-size, 0.9em);\\n          width: var(--ha-label-badge-title-width, 5em);\\n          font-weight: var(--ha-label-badge-title-font-weight, 400);\\n          overflow: hidden;\\n          text-overflow: ellipsis;\\n          line-height: normal;\\n        }\\n      \"])))];\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        _get(_getPrototypeOf(HaLabelBadge.prototype), \"updated\", this).call(this, changedProperties);\n        if (changedProperties.has(\"image\")) {\n          this.shadowRoot.getElementById(\"badge\").style.backgroundImage = this.image ? \"url(\".concat(this.image, \")\") : \"\";\n        }\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","classMap","HaLabelBadge","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","key","value","render","_templateObject","_taggedTemplateLiteral","label","_templateObject2","big","description","_templateObject3","static","styles","_templateObject4","updated","changedProperties","_get","_getPrototypeOf","prototype","call","has","shadowRoot","getElementById","style","backgroundImage","image"],"sources":["/workspaces/frontend/src/components/ha-label-badge.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\n\n@customElement(\"ha-label-badge\")\nclass HaLabelBadge extends LitElement {\n  @property() public label?: string;\n\n  @property() public description?: string;\n\n  @property() public image?: string;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"badge-container\">\n        <div class=\"label-badge\" id=\"badge\">\n          <div class=\"value\">\n            <slot></slot>\n          </div>\n          ${this.label\n            ? html`\n                <div\n                  class=${classMap({\n                    label: true,\n                    big: this.label.length > 5,\n                  })}\n                >\n                  <span>${this.label}</span>\n                </div>\n              `\n            : \"\"}\n        </div>\n        ${this.description\n          ? html`<div class=\"title\">${this.description}</div>`\n          : \"\"}\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        .badge-container {\n          display: inline-block;\n          text-align: center;\n          vertical-align: top;\n          padding: var(--ha-label-badge-padding, 0 0 0 0);\n        }\n        .label-badge {\n          position: relative;\n          display: block;\n          margin: 0 auto;\n          width: var(--ha-label-badge-size, 2.5em);\n          text-align: center;\n          height: var(--ha-label-badge-size, 2.5em);\n          line-height: var(--ha-label-badge-size, 2.5em);\n          font-size: var(--ha-label-badge-font-size, 1.5em);\n          border-radius: var(--ha-label-badge-border-radius, 50%);\n          border: 0.1em solid var(--ha-label-badge-color, var(--primary-color));\n          color: var(--label-badge-text-color, rgb(76, 76, 76));\n\n          white-space: nowrap;\n          background-color: var(--label-badge-background-color, white);\n          background-size: cover;\n          transition: border 0.3s ease-in-out;\n        }\n        .label-badge .label.big span {\n          font-size: 90%;\n          padding: 10% 12% 7% 12%; /* push smaller text a bit down to center vertically */\n        }\n        .label-badge .value {\n          font-size: 90%;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        .label-badge .label {\n          position: absolute;\n          bottom: -1em;\n          /* Make the label as wide as container+border. (parent_borderwidth / font-size) */\n          left: -0.2em;\n          right: -0.2em;\n          line-height: 1em;\n          font-size: 0.5em;\n        }\n        .label-badge .label span {\n          box-sizing: border-box;\n          max-width: 100%;\n          display: inline-block;\n          background-color: var(--ha-label-badge-color, var(--primary-color));\n          color: var(--ha-label-badge-label-color, white);\n          border-radius: 1em;\n          padding: 9% 16% 8% 16%; /* mostly apitalized text, not much descenders => bit more top margin */\n          font-weight: 500;\n          overflow: hidden;\n          text-transform: uppercase;\n          text-overflow: ellipsis;\n          transition: background-color 0.3s ease-in-out;\n          text-transform: var(--ha-label-badge-label-text-transform, uppercase);\n        }\n        .badge-container .title {\n          margin-top: 1em;\n          font-size: var(--ha-label-badge-title-font-size, 0.9em);\n          width: var(--ha-label-badge-title-width, 5em);\n          font-weight: var(--ha-label-badge-title-font-weight, 400);\n          overflow: hidden;\n          text-overflow: ellipsis;\n          line-height: normal;\n        }\n      `,\n    ];\n  }\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n    if (changedProperties.has(\"image\")) {\n      this.shadowRoot!.getElementById(\"badge\")!.style.backgroundImage = this\n        .image\n        ? `url(${this.image})`\n        : \"\";\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-label-badge\": HaLabelBadge;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;AAAA,SACEA,GAAG,EAEHC,IAAI,EACJC,UAAU,QAGL,KAAK;AACZ,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SAASC,QAAQ,QAAQ,0BAA0B;AAAC,IAG9CC,YAAY,GAAAC,SAAA,EADjBJ,aAAa,CAAC,gBAAgB,CAAC,aAAAK,WAAA,EAAAC,WAAA;EAAA,IAC1BH,YAAY,0BAAAI,YAAA;IAAAC,SAAA,CAAAL,YAAA,EAAAI,YAAA;IAAA,SAAAJ,aAAA;MAAA,IAAAM,KAAA;MAAAC,eAAA,OAAAP,YAAA;MAAA,SAAAQ,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAAAC,IAAA,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;QAAAF,IAAA,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;MAAA;MAAAP,KAAA,GAAAQ,UAAA,OAAAd,YAAA,KAAAe,MAAA,CAAAJ,IAAA;MAAAT,WAAA,CAAAc,sBAAA,CAAAV,KAAA;MAAA,OAAAA,KAAA;IAAA;IAAA,OAAAW,YAAA,CAAAjB,YAAA;EAAA,EAAAG,WAAA;EAAA;IAAAe,CAAA,EAAZlB,YAAY;IAAAmB,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACfvB,QAAQ,CAAC,CAAC;MAAAwB,GAAA;MAAAC,KAAA;IAAA;MAAAH,IAAA;MAAAC,UAAA,GAEVvB,QAAQ,CAAC,CAAC;MAAAwB,GAAA;MAAAC,KAAA;IAAA;MAAAH,IAAA;MAAAC,UAAA,GAEVvB,QAAQ,CAAC,CAAC;MAAAwB,GAAA;MAAAC,KAAA;IAAA;MAAAH,IAAA;MAAAE,GAAA;MAAAC,KAAA,EAEX,SAAAC,OAAA,EAAmC;QACjC,OAAO7B,IAAI,CAAA8B,eAAA,KAAAA,eAAA,GAAAC,sBAAA,kPAMH,IAAI,CAACC,KAAK,GACRhC,IAAI,CAAAiC,gBAAA,KAAAA,gBAAA,GAAAF,sBAAA,6JAEQ3B,QAAQ,CAAC;UACf4B,KAAK,EAAE,IAAI;UACXE,GAAG,EAAE,IAAI,CAACF,KAAK,CAACjB,MAAM,GAAG;QAC3B,CAAC,CAAC,EAEM,IAAI,CAACiB,KAAK,IAGtB,EAAE,EAEN,IAAI,CAACG,WAAW,GACdnC,IAAI,CAAAoC,gBAAA,KAAAA,gBAAA,GAAAL,sBAAA,wCAAsB,IAAI,CAACI,WAAW,IAC1C,EAAE;MAGZ;IAAC;MAAAV,IAAA;MAAAY,MAAA;MAAAV,GAAA;MAAAC,KAAA,EAED,SAAAU,OAAA,EAAoC;QAClC,OAAO,CACLvC,GAAG,CAAAwC,gBAAA,KAAAA,gBAAA,GAAAR,sBAAA,ymFAoEJ;MACH;IAAC;MAAAN,IAAA;MAAAE,GAAA;MAAAC,KAAA,EAED,SAAAY,QAAkBC,iBAAiC,EAAQ;QACzDC,IAAA,CAAAC,eAAA,CA5GEtC,YAAY,CAAAuC,SAAA,oBAAAC,IAAA,OA4GAJ,iBAAiB;QAC/B,IAAIA,iBAAiB,CAACK,GAAG,CAAC,OAAO,CAAC,EAAE;UAClC,IAAI,CAACC,UAAU,CAAEC,cAAc,CAAC,OAAO,CAAC,CAAEC,KAAK,CAACC,eAAe,GAAG,IAAI,CACnEC,KAAK,UAAA/B,MAAA,CACG,IAAI,CAAC+B,KAAK,SACjB,EAAE;QACR;MACF;IAAC;EAAA;AAAA,GAnHwBlD,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}