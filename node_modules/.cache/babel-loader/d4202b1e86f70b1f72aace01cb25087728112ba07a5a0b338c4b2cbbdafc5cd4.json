{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { IronA11yKeysBehavior } from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport { IronMultiSelectableBehavior, IronMultiSelectableBehaviorImpl } from '@polymer/iron-selector/iron-multi-selectable.js';\nimport { IronSelectableBehavior } from '@polymer/iron-selector/iron-selectable.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `IronMenuBehavior` implements accessible menu behavior.\n *\n * @demo demo/index.html\n * @polymerBehavior IronMenuBehavior\n */\nexport const IronMenuBehaviorImpl = {\n  properties: {\n    /**\n     * Returns the currently focused item.\n     * @type {?Object}\n     */\n    focusedItem: {\n      observer: '_focusedItemChanged',\n      readOnly: true,\n      type: Object\n    },\n    /**\n     * The attribute to use on menu items to look up the item title. Typing the\n     * first letter of an item when the menu is open focuses that item. If\n     * unset, `textContent` will be used.\n     */\n    attrForItemTitle: {\n      type: String\n    },\n    /**\n     * @type {boolean}\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      observer: '_disabledChanged'\n    }\n  },\n  /**\n   * The list of keys has been taken from\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n   * @private\n   */\n  _MODIFIER_KEYS: ['Alt', 'AltGraph', 'CapsLock', 'Control', 'Fn', 'FnLock', 'Hyper', 'Meta', 'NumLock', 'OS', 'ScrollLock', 'Shift', 'Super', 'Symbol', 'SymbolLock'],\n  /** @private */\n  _SEARCH_RESET_TIMEOUT_MS: 1000,\n  /** @private */\n  _previousTabIndex: 0,\n  hostAttributes: {\n    'role': 'menu'\n  },\n  observers: ['_updateMultiselectable(multi)'],\n  listeners: {\n    'focus': '_onFocus',\n    'keydown': '_onKeydown',\n    'iron-items-changed': '_onIronItemsChanged'\n  },\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'up': '_onUpKey',\n    'down': '_onDownKey',\n    'esc': '_onEscKey',\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n  attached: function () {\n    this._resetTabindices();\n  },\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @param {string|number} value the value to select.\n   */\n  select: function (value) {\n    // Cancel automatically focusing a default item if the menu received focus\n    // through a user action selecting a particular item.\n    if (this._defaultFocusAsync) {\n      this.cancelAsync(this._defaultFocusAsync);\n      this._defaultFocusAsync = null;\n    }\n    var item = this._valueToItem(value);\n    if (item && item.hasAttribute('disabled')) return;\n    this._setFocusedItem(item);\n    IronMultiSelectableBehaviorImpl.select.apply(this, arguments);\n  },\n  /**\n   * Resets all tabindex attributes to the appropriate value based on the\n   * current selection state. The appropriate value is `0` (focusable) for\n   * the default selected item, and `-1` (not keyboard focusable) for all\n   * other items. Also sets the correct initial values for aria-selected\n   * attribute, true for default selected item and false for others.\n   */\n  _resetTabindices: function () {\n    var firstSelectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;\n    this.items.forEach(function (item) {\n      item.setAttribute('tabindex', item === firstSelectedItem ? '0' : '-1');\n      item.setAttribute('aria-selected', this._selection.isSelected(item));\n    }, this);\n  },\n  /**\n   * Sets appropriate ARIA based on whether or not the menu is meant to be\n   * multi-selectable.\n   *\n   * @param {boolean} multi True if the menu should be multi-selectable.\n   */\n  _updateMultiselectable: function (multi) {\n    if (multi) {\n      this.setAttribute('aria-multiselectable', 'true');\n    } else {\n      this.removeAttribute('aria-multiselectable');\n    }\n  },\n  /**\n   * Given a KeyboardEvent, this method will focus the appropriate item in the\n   * menu (if there is a relevant item, and it is possible to focus it).\n   *\n   * @param {KeyboardEvent} event A KeyboardEvent.\n   */\n  _focusWithKeyboardEvent: function (event) {\n    // Make sure that the key pressed is not a modifier key.\n    // getModifierState is not being used, as it is not available in Safari\n    // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)\n    if (this._MODIFIER_KEYS.indexOf(event.key) !== -1) return;\n    this.cancelDebouncer('_clearSearchText');\n    var searchText = this._searchText || '';\n    var key = event.key && event.key.length == 1 ? event.key : String.fromCharCode(event.keyCode);\n    searchText += key.toLocaleLowerCase();\n    var searchLength = searchText.length;\n    for (var i = 0, item; item = this.items[i]; i++) {\n      if (item.hasAttribute('disabled')) {\n        continue;\n      }\n      var attr = this.attrForItemTitle || 'textContent';\n      var title = (item[attr] || item.getAttribute(attr) || '').trim();\n      if (title.length < searchLength) {\n        continue;\n      }\n      if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) {\n        this._setFocusedItem(item);\n        break;\n      }\n    }\n    this._searchText = searchText;\n    this.debounce('_clearSearchText', this._clearSearchText, this._SEARCH_RESET_TIMEOUT_MS);\n  },\n  _clearSearchText: function () {\n    this._searchText = '';\n  },\n  /**\n   * Focuses the previous item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusPrevious: function () {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex - i + length) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n  /**\n   * Focuses the next item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusNext: function () {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex + i) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n  /**\n   * Mutates items in the menu based on provided selection details, so that\n   * all items correctly reflect selection state.\n   *\n   * @param {Element} item An item in the menu.\n   * @param {boolean} isSelected True if the item should be shown in a\n   * selected state, otherwise false.\n   */\n  _applySelection: function (item, isSelected) {\n    if (isSelected) {\n      item.setAttribute('aria-selected', 'true');\n    } else {\n      item.setAttribute('aria-selected', 'false');\n    }\n    IronSelectableBehavior._applySelection.apply(this, arguments);\n  },\n  /**\n   * Discretely updates tabindex values among menu items as the focused item\n   * changes.\n   *\n   * @param {Element} focusedItem The element that is currently focused.\n   * @param {?Element} old The last element that was considered focused, if\n   * applicable.\n   */\n  _focusedItemChanged: function (focusedItem, old) {\n    old && old.setAttribute('tabindex', '-1');\n    if (focusedItem && !focusedItem.hasAttribute('disabled') && !this.disabled) {\n      focusedItem.setAttribute('tabindex', '0');\n      focusedItem.focus();\n    }\n  },\n  /**\n   * A handler that responds to mutation changes related to the list of items\n   * in the menu.\n   *\n   * @param {CustomEvent} event An event containing mutation records as its\n   * detail.\n   */\n  _onIronItemsChanged: function (event) {\n    if (event.detail.addedNodes.length) {\n      this._resetTabindices();\n    }\n  },\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function (event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n    IronMenuBehaviorImpl._shiftTabPressed = true;\n    this._setFocusedItem(null);\n    this.setAttribute('tabindex', '-1');\n    this.async(function () {\n      this.setAttribute('tabindex', oldTabIndex);\n      IronMenuBehaviorImpl._shiftTabPressed = false;\n      // NOTE(cdata): polymer/polymer#1305\n    }, 1);\n  },\n  /**\n   * Handler that is called when the menu receives focus.\n   *\n   * @param {FocusEvent} event A focus event.\n   */\n  _onFocus: function (event) {\n    if (IronMenuBehaviorImpl._shiftTabPressed) {\n      // do not focus the menu itself\n      return;\n    }\n\n    // Do not focus the selected tab if the deepest target is part of the\n    // menu element's local DOM and is focusable.\n    var rootTarget = /** @type {?HTMLElement} */dom(event).rootTarget;\n    if (rootTarget !== this && typeof rootTarget.tabIndex !== 'undefined' && !this.isLightDescendant(rootTarget)) {\n      return;\n    }\n\n    // clear the cached focus item\n    this._defaultFocusAsync = this.async(function () {\n      // focus the selected item when the menu receives focus, or the first item\n      // if no item is selected\n      var firstSelectedItem = this.multi ? this.selectedItems && this.selectedItems[0] : this.selectedItem;\n      this._setFocusedItem(null);\n      if (firstSelectedItem) {\n        this._setFocusedItem(firstSelectedItem);\n      } else if (this.items[0]) {\n        // We find the first none-disabled item (if one exists)\n        this._focusNext();\n      }\n    });\n  },\n  /**\n   * Handler that is called when the up key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onUpKey: function (event) {\n    // up and down arrows moves the focus\n    this._focusPrevious();\n    event.detail.keyboardEvent.preventDefault();\n  },\n  /**\n   * Handler that is called when the down key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onDownKey: function (event) {\n    this._focusNext();\n    event.detail.keyboardEvent.preventDefault();\n  },\n  /**\n   * Handler that is called when the esc key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onEscKey: function (event) {\n    var focusedItem = this.focusedItem;\n    if (focusedItem) {\n      focusedItem.blur();\n    }\n  },\n  /**\n   * Handler that is called when a keydown event is detected.\n   *\n   * @param {KeyboardEvent} event A keyboard event.\n   */\n  _onKeydown: function (event) {\n    if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {\n      // all other keys focus the menu item starting with that character\n      this._focusWithKeyboardEvent(event);\n    }\n    event.stopPropagation();\n  },\n  // override _activateHandler\n  _activateHandler: function (event) {\n    IronSelectableBehavior._activateHandler.call(this, event);\n    event.stopPropagation();\n  },\n  /**\n   * Updates this element's tab index when it's enabled/disabled.\n   * @param {boolean} disabled\n   */\n  _disabledChanged: function (disabled) {\n    if (disabled) {\n      this._previousTabIndex = this.hasAttribute('tabindex') ? this.tabIndex : 0;\n      this.removeAttribute('tabindex'); // No tabindex means not tab-able or select-able.\n    } else if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', this._previousTabIndex);\n    }\n  }\n};\nIronMenuBehaviorImpl._shiftTabPressed = false;\n\n/** @polymerBehavior */\nexport const IronMenuBehavior = [IronMultiSelectableBehavior, IronA11yKeysBehavior, IronMenuBehaviorImpl];","map":{"version":3,"names":["IronA11yKeysBehavior","IronMultiSelectableBehavior","IronMultiSelectableBehaviorImpl","IronSelectableBehavior","dom","IronMenuBehaviorImpl","properties","focusedItem","observer","readOnly","type","Object","attrForItemTitle","String","disabled","Boolean","value","_MODIFIER_KEYS","_SEARCH_RESET_TIMEOUT_MS","_previousTabIndex","hostAttributes","observers","listeners","keyBindings","attached","_resetTabindices","select","_defaultFocusAsync","cancelAsync","item","_valueToItem","hasAttribute","_setFocusedItem","apply","arguments","firstSelectedItem","multi","selectedItems","selectedItem","items","forEach","setAttribute","_selection","isSelected","_updateMultiselectable","removeAttribute","_focusWithKeyboardEvent","event","indexOf","key","cancelDebouncer","searchText","_searchText","length","fromCharCode","keyCode","toLocaleLowerCase","searchLength","i","attr","title","getAttribute","trim","slice","debounce","_clearSearchText","_focusPrevious","curFocusIndex","Number","owner","getOwnerRoot","document","activeElement","_focusNext","_applySelection","_focusedItemChanged","old","focus","_onIronItemsChanged","detail","addedNodes","_onShiftTabDown","oldTabIndex","_shiftTabPressed","async","_onFocus","rootTarget","tabIndex","isLightDescendant","_onUpKey","keyboardEvent","preventDefault","_onDownKey","_onEscKey","blur","_onKeydown","keyboardEventMatchesKeys","stopPropagation","_activateHandler","call","_disabledChanged","IronMenuBehavior"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/iron-menu-behavior/iron-menu-behavior.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronMultiSelectableBehavior, IronMultiSelectableBehaviorImpl} from '@polymer/iron-selector/iron-multi-selectable.js';\nimport {IronSelectableBehavior} from '@polymer/iron-selector/iron-selectable.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `IronMenuBehavior` implements accessible menu behavior.\n *\n * @demo demo/index.html\n * @polymerBehavior IronMenuBehavior\n */\nexport const IronMenuBehaviorImpl = {\n\n  properties: {\n\n    /**\n     * Returns the currently focused item.\n     * @type {?Object}\n     */\n    focusedItem:\n        {observer: '_focusedItemChanged', readOnly: true, type: Object},\n\n    /**\n     * The attribute to use on menu items to look up the item title. Typing the\n     * first letter of an item when the menu is open focuses that item. If\n     * unset, `textContent` will be used.\n     */\n    attrForItemTitle: {type: String},\n\n    /**\n     * @type {boolean}\n     */\n    disabled: {\n      type: Boolean,\n      value: false,\n      observer: '_disabledChanged',\n    },\n  },\n\n  /**\n   * The list of keys has been taken from\n   * https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/getModifierState\n   * @private\n   */\n  _MODIFIER_KEYS: [\n    'Alt',\n    'AltGraph',\n    'CapsLock',\n    'Control',\n    'Fn',\n    'FnLock',\n    'Hyper',\n    'Meta',\n    'NumLock',\n    'OS',\n    'ScrollLock',\n    'Shift',\n    'Super',\n    'Symbol',\n    'SymbolLock'\n  ],\n\n  /** @private */\n  _SEARCH_RESET_TIMEOUT_MS: 1000,\n\n  /** @private */\n  _previousTabIndex: 0,\n\n  hostAttributes: {\n    'role': 'menu',\n  },\n\n  observers: ['_updateMultiselectable(multi)'],\n\n  listeners: {\n    'focus': '_onFocus',\n    'keydown': '_onKeydown',\n    'iron-items-changed': '_onIronItemsChanged'\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'up': '_onUpKey',\n    'down': '_onDownKey',\n    'esc': '_onEscKey',\n    'shift+tab:keydown': '_onShiftTabDown'\n  },\n\n  attached: function() {\n    this._resetTabindices();\n  },\n\n  /**\n   * Selects the given value. If the `multi` property is true, then the selected\n   * state of the `value` will be toggled; otherwise the `value` will be\n   * selected.\n   *\n   * @param {string|number} value the value to select.\n   */\n  select: function(value) {\n    // Cancel automatically focusing a default item if the menu received focus\n    // through a user action selecting a particular item.\n    if (this._defaultFocusAsync) {\n      this.cancelAsync(this._defaultFocusAsync);\n      this._defaultFocusAsync = null;\n    }\n    var item = this._valueToItem(value);\n    if (item && item.hasAttribute('disabled'))\n      return;\n    this._setFocusedItem(item);\n    IronMultiSelectableBehaviorImpl.select.apply(this, arguments);\n  },\n\n  /**\n   * Resets all tabindex attributes to the appropriate value based on the\n   * current selection state. The appropriate value is `0` (focusable) for\n   * the default selected item, and `-1` (not keyboard focusable) for all\n   * other items. Also sets the correct initial values for aria-selected\n   * attribute, true for default selected item and false for others.\n   */\n  _resetTabindices: function() {\n    var firstSelectedItem = this.multi ?\n        (this.selectedItems && this.selectedItems[0]) :\n        this.selectedItem;\n\n    this.items.forEach(function(item) {\n      item.setAttribute('tabindex', item === firstSelectedItem ? '0' : '-1');\n      item.setAttribute('aria-selected', this._selection.isSelected(item));\n    }, this);\n  },\n\n  /**\n   * Sets appropriate ARIA based on whether or not the menu is meant to be\n   * multi-selectable.\n   *\n   * @param {boolean} multi True if the menu should be multi-selectable.\n   */\n  _updateMultiselectable: function(multi) {\n    if (multi) {\n      this.setAttribute('aria-multiselectable', 'true');\n    } else {\n      this.removeAttribute('aria-multiselectable');\n    }\n  },\n\n  /**\n   * Given a KeyboardEvent, this method will focus the appropriate item in the\n   * menu (if there is a relevant item, and it is possible to focus it).\n   *\n   * @param {KeyboardEvent} event A KeyboardEvent.\n   */\n  _focusWithKeyboardEvent: function(event) {\n    // Make sure that the key pressed is not a modifier key.\n    // getModifierState is not being used, as it is not available in Safari\n    // earlier than 10.0.2 (https://trac.webkit.org/changeset/206725/webkit)\n    if (this._MODIFIER_KEYS.indexOf(event.key) !== -1)\n      return;\n\n    this.cancelDebouncer('_clearSearchText');\n\n    var searchText = this._searchText || '';\n    var key = event.key && event.key.length == 1 ?\n        event.key :\n        String.fromCharCode(event.keyCode);\n    searchText += key.toLocaleLowerCase();\n\n    var searchLength = searchText.length;\n\n    for (var i = 0, item; item = this.items[i]; i++) {\n      if (item.hasAttribute('disabled')) {\n        continue;\n      }\n\n      var attr = this.attrForItemTitle || 'textContent';\n      var title = (item[attr] || item.getAttribute(attr) || '').trim();\n\n      if (title.length < searchLength) {\n        continue;\n      }\n\n      if (title.slice(0, searchLength).toLocaleLowerCase() == searchText) {\n        this._setFocusedItem(item);\n        break;\n      }\n    }\n\n    this._searchText = searchText;\n    this.debounce(\n        '_clearSearchText',\n        this._clearSearchText,\n        this._SEARCH_RESET_TIMEOUT_MS);\n  },\n\n  _clearSearchText: function() {\n    this._searchText = '';\n  },\n\n  /**\n   * Focuses the previous item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusPrevious: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex - i + length) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Focuses the next item (relative to the currently focused item) in the\n   * menu, disabled items will be skipped.\n   * Loop until length + 1 to handle case of single item in menu.\n   */\n  _focusNext: function() {\n    var length = this.items.length;\n    var curFocusIndex = Number(this.indexOf(this.focusedItem));\n\n    for (var i = 1; i < length + 1; i++) {\n      var item = this.items[(curFocusIndex + i) % length];\n      if (!item.hasAttribute('disabled')) {\n        var owner = dom(item).getOwnerRoot() || document;\n        this._setFocusedItem(item);\n\n        // Focus might not have worked, if the element was hidden or not\n        // focusable. In that case, try again.\n        if (dom(owner).activeElement == item) {\n          return;\n        }\n      }\n    }\n  },\n\n  /**\n   * Mutates items in the menu based on provided selection details, so that\n   * all items correctly reflect selection state.\n   *\n   * @param {Element} item An item in the menu.\n   * @param {boolean} isSelected True if the item should be shown in a\n   * selected state, otherwise false.\n   */\n  _applySelection: function(item, isSelected) {\n    if (isSelected) {\n      item.setAttribute('aria-selected', 'true');\n    } else {\n      item.setAttribute('aria-selected', 'false');\n    }\n    IronSelectableBehavior._applySelection.apply(this, arguments);\n  },\n\n  /**\n   * Discretely updates tabindex values among menu items as the focused item\n   * changes.\n   *\n   * @param {Element} focusedItem The element that is currently focused.\n   * @param {?Element} old The last element that was considered focused, if\n   * applicable.\n   */\n  _focusedItemChanged: function(focusedItem, old) {\n    old && old.setAttribute('tabindex', '-1');\n    if (focusedItem && !focusedItem.hasAttribute('disabled') &&\n        !this.disabled) {\n      focusedItem.setAttribute('tabindex', '0');\n      focusedItem.focus();\n    }\n  },\n\n  /**\n   * A handler that responds to mutation changes related to the list of items\n   * in the menu.\n   *\n   * @param {CustomEvent} event An event containing mutation records as its\n   * detail.\n   */\n  _onIronItemsChanged: function(event) {\n    if (event.detail.addedNodes.length) {\n      this._resetTabindices();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n\n    IronMenuBehaviorImpl._shiftTabPressed = true;\n\n    this._setFocusedItem(null);\n\n    this.setAttribute('tabindex', '-1');\n\n    this.async(function() {\n      this.setAttribute('tabindex', oldTabIndex);\n      IronMenuBehaviorImpl._shiftTabPressed = false;\n      // NOTE(cdata): polymer/polymer#1305\n    }, 1);\n  },\n\n  /**\n   * Handler that is called when the menu receives focus.\n   *\n   * @param {FocusEvent} event A focus event.\n   */\n  _onFocus: function(event) {\n    if (IronMenuBehaviorImpl._shiftTabPressed) {\n      // do not focus the menu itself\n      return;\n    }\n\n    // Do not focus the selected tab if the deepest target is part of the\n    // menu element's local DOM and is focusable.\n    var rootTarget =\n        /** @type {?HTMLElement} */ (dom(event).rootTarget);\n    if (rootTarget !== this && typeof rootTarget.tabIndex !== 'undefined' &&\n        !this.isLightDescendant(rootTarget)) {\n      return;\n    }\n\n    // clear the cached focus item\n    this._defaultFocusAsync = this.async(function() {\n      // focus the selected item when the menu receives focus, or the first item\n      // if no item is selected\n      var firstSelectedItem = this.multi ?\n          (this.selectedItems && this.selectedItems[0]) :\n          this.selectedItem;\n\n      this._setFocusedItem(null);\n\n      if (firstSelectedItem) {\n        this._setFocusedItem(firstSelectedItem);\n      } else if (this.items[0]) {\n        // We find the first none-disabled item (if one exists)\n        this._focusNext();\n      }\n    });\n  },\n\n  /**\n   * Handler that is called when the up key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onUpKey: function(event) {\n    // up and down arrows moves the focus\n    this._focusPrevious();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the down key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onDownKey: function(event) {\n    this._focusNext();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  /**\n   * Handler that is called when the esc key is pressed.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onEscKey: function(event) {\n    var focusedItem = this.focusedItem;\n    if (focusedItem) {\n      focusedItem.blur();\n    }\n  },\n\n  /**\n   * Handler that is called when a keydown event is detected.\n   *\n   * @param {KeyboardEvent} event A keyboard event.\n   */\n  _onKeydown: function(event) {\n    if (!this.keyboardEventMatchesKeys(event, 'up down esc')) {\n      // all other keys focus the menu item starting with that character\n      this._focusWithKeyboardEvent(event);\n    }\n    event.stopPropagation();\n  },\n\n  // override _activateHandler\n  _activateHandler: function(event) {\n    IronSelectableBehavior._activateHandler.call(this, event);\n    event.stopPropagation();\n  },\n\n  /**\n   * Updates this element's tab index when it's enabled/disabled.\n   * @param {boolean} disabled\n   */\n  _disabledChanged: function(disabled) {\n    if (disabled) {\n      this._previousTabIndex =\n          this.hasAttribute('tabindex') ? this.tabIndex : 0;\n      this.removeAttribute(\n          'tabindex');  // No tabindex means not tab-able or select-able.\n    } else if (!this.hasAttribute('tabindex')) {\n      this.setAttribute('tabindex', this._previousTabIndex);\n    }\n  }\n};\n\nIronMenuBehaviorImpl._shiftTabPressed = false;\n\n/** @polymerBehavior */\nexport const IronMenuBehavior =\n    [IronMultiSelectableBehavior, IronA11yKeysBehavior, IronMenuBehaviorImpl];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}