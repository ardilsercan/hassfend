{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { __decorate } from \"tslib\";\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\nimport { html, LitElement, nothing } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { classMap } from 'lit/directives/class-map.js';\nimport { literal, html as staticHtml } from 'lit/static-html.js';\nimport { requestUpdateOnAriaChange } from '../../internal/aria/delegate.js';\nimport { setupFormSubmitter } from '../../internal/controller/form-submitter.js';\nimport { isRtl } from '../../internal/controller/is-rtl.js';\nimport { internals, mixinElementInternals } from '../../labs/behaviors/element-internals.js';\n// Separate variable needed for closure.\nconst iconButtonBaseClass = mixinElementInternals(LitElement);\n/**\n * A button for rendering icons.\n *\n * @fires input {InputEvent} Dispatched when a toggle button toggles --bubbles\n * --composed\n * @fires change {Event} Dispatched when a toggle button toggles --bubbles\n */\nexport class IconButton extends iconButtonBaseClass {\n  constructor() {\n    super(...arguments);\n    /**\n     * Disables the icon button and makes it non-interactive.\n     */\n    this.disabled = false;\n    /**\n     * Flips the icon if it is in an RTL context at startup.\n     */\n    this.flipIconInRtl = false;\n    /**\n     * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n     */\n    this.href = '';\n    /**\n     * Sets the underlying `HTMLAnchorElement`'s `target` attribute.\n     */\n    this.target = '';\n    /**\n     * The `aria-label` of the button when the button is toggleable and selected.\n     */\n    this.ariaLabelSelected = '';\n    /**\n     * When true, the button will toggle between selected and unselected\n     * states\n     */\n    this.toggle = false;\n    /**\n     * Sets the selected state. When false, displays the default icon. When true,\n     * displays the selected icon, or the default icon If no `slot=\"selected\"`\n     * icon is provided.\n     */\n    this.selected = false;\n    /**\n     * The default behavior of the button. May be \"text\", \"reset\", or \"submit\"\n     * (default).\n     */\n    this.type = 'submit';\n    /**\n     * The value added to a form with the button's name when the button submits a\n     * form.\n     */\n    this.value = '';\n    this.flipIcon = isRtl(this, this.flipIconInRtl);\n  }\n  get name() {\n    var _this$getAttribute;\n    return (_this$getAttribute = this.getAttribute('name')) !== null && _this$getAttribute !== void 0 ? _this$getAttribute : '';\n  }\n  set name(name) {\n    this.setAttribute('name', name);\n  }\n  /**\n   * The associated form element with which this element's value will submit.\n   */\n  get form() {\n    return this[internals].form;\n  }\n  /**\n   * The labels this element is associated with.\n   */\n  get labels() {\n    return this[internals].labels;\n  }\n  /**\n   * Link buttons cannot be disabled.\n   */\n  willUpdate() {\n    if (this.href) {\n      this.disabled = false;\n    }\n  }\n  render() {\n    const tag = this.href ? literal`div` : literal`button`;\n    // Needed for closure conformance\n    const {\n      ariaLabel,\n      ariaHasPopup,\n      ariaExpanded\n    } = this;\n    const hasToggledAriaLabel = ariaLabel && this.ariaLabelSelected;\n    const ariaPressedValue = !this.toggle ? nothing : this.selected;\n    let ariaLabelValue = nothing;\n    if (!this.href) {\n      ariaLabelValue = hasToggledAriaLabel && this.selected ? this.ariaLabelSelected : ariaLabel;\n    }\n    return staticHtml`<${tag}\n        class=\"icon-button ${classMap(this.getRenderClasses())}\"\n        id=\"button\"\n        aria-label=\"${ariaLabelValue || nothing}\"\n        aria-haspopup=\"${!this.href && ariaHasPopup || nothing}\"\n        aria-expanded=\"${!this.href && ariaExpanded || nothing}\"\n        aria-pressed=\"${ariaPressedValue}\"\n        ?disabled=\"${!this.href && this.disabled}\"\n        @click=\"${this.handleClick}\">\n        ${this.renderFocusRing()}\n        ${this.renderRipple()}\n        ${!this.selected ? this.renderIcon() : nothing}\n        ${this.selected ? this.renderSelectedIcon() : nothing}\n        ${this.renderTouchTarget()}\n        ${this.href && this.renderLink()}\n  </${tag}>`;\n  }\n  renderLink() {\n    // Needed for closure conformance\n    const {\n      ariaLabel\n    } = this;\n    return html`\n      <a\n        class=\"link\"\n        id=\"link\"\n        href=\"${this.href}\"\n        target=\"${this.target || nothing}\"\n        aria-label=\"${ariaLabel || nothing}\"></a>\n    `;\n  }\n  getRenderClasses() {\n    return {\n      'flip-icon': this.flipIcon,\n      'selected': this.toggle && this.selected\n    };\n  }\n  renderIcon() {\n    return html`<span class=\"icon\"><slot></slot></span>`;\n  }\n  renderSelectedIcon() {\n    // Use default slot as fallback to not require specifying multiple icons\n    return html`<span class=\"icon icon--selected\"\n      ><slot name=\"selected\"><slot></slot></slot\n    ></span>`;\n  }\n  renderTouchTarget() {\n    return html`<span class=\"touch\"></span>`;\n  }\n  renderFocusRing() {\n    // TODO(b/310046938): use the same id for both elements\n    return html`<md-focus-ring\n      part=\"focus-ring\"\n      for=${this.href ? 'link' : 'button'}></md-focus-ring>`;\n  }\n  renderRipple() {\n    // TODO(b/310046938): use the same id for both elements\n    return html`<md-ripple\n      for=${this.href ? 'link' : nothing}\n      ?disabled=\"${!this.href && this.disabled}\"></md-ripple>`;\n  }\n  connectedCallback() {\n    this.flipIcon = isRtl(this, this.flipIconInRtl);\n    super.connectedCallback();\n  }\n  async handleClick(event) {\n    // Allow the event to propagate\n    await 0;\n    if (!this.toggle || this.disabled || event.defaultPrevented) {\n      return;\n    }\n    this.selected = !this.selected;\n    this.dispatchEvent(new InputEvent('input', {\n      bubbles: true,\n      composed: true\n    }));\n    // Bubbles but does not compose to mimic native browser <input> & <select>\n    // Additionally, native change event is not an InputEvent.\n    this.dispatchEvent(new Event('change', {\n      bubbles: true\n    }));\n  }\n}\n(() => {\n  requestUpdateOnAriaChange(IconButton);\n  setupFormSubmitter(IconButton);\n})();\n/** @nocollapse */\nIconButton.formAssociated = true;\n/** @nocollapse */\nIconButton.shadowRootOptions = {\n  mode: 'open',\n  delegatesFocus: true\n};\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IconButton.prototype, \"disabled\", void 0);\n__decorate([property({\n  type: Boolean,\n  attribute: 'flip-icon-in-rtl'\n})], IconButton.prototype, \"flipIconInRtl\", void 0);\n__decorate([property()], IconButton.prototype, \"href\", void 0);\n__decorate([property()], IconButton.prototype, \"target\", void 0);\n__decorate([property({\n  attribute: 'aria-label-selected'\n})], IconButton.prototype, \"ariaLabelSelected\", void 0);\n__decorate([property({\n  type: Boolean\n})], IconButton.prototype, \"toggle\", void 0);\n__decorate([property({\n  type: Boolean,\n  reflect: true\n})], IconButton.prototype, \"selected\", void 0);\n__decorate([property()], IconButton.prototype, \"type\", void 0);\n__decorate([property({\n  reflect: true\n})], IconButton.prototype, \"value\", void 0);\n__decorate([state()], IconButton.prototype, \"flipIcon\", void 0);","map":{"version":3,"names":["html","LitElement","nothing","property","state","classMap","literal","staticHtml","requestUpdateOnAriaChange","setupFormSubmitter","isRtl","internals","mixinElementInternals","iconButtonBaseClass","IconButton","constructor","disabled","flipIconInRtl","href","target","ariaLabelSelected","toggle","selected","type","value","flipIcon","name","_this$getAttribute","getAttribute","setAttribute","form","labels","willUpdate","render","tag","ariaLabel","ariaHasPopup","ariaExpanded","hasToggledAriaLabel","ariaPressedValue","ariaLabelValue","getRenderClasses","handleClick","renderFocusRing","renderRipple","renderIcon","renderSelectedIcon","renderTouchTarget","renderLink","connectedCallback","event","defaultPrevented","dispatchEvent","InputEvent","bubbles","composed","Event","formAssociated","shadowRootOptions","mode","delegatesFocus","__decorate","Boolean","reflect","attribute"],"sources":["icon-button.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport '../../focus/md-focus-ring.js';\nimport '../../ripple/ripple.js';\n\nimport {html, LitElement, nothing} from 'lit';\nimport {property, state} from 'lit/decorators.js';\nimport {classMap} from 'lit/directives/class-map.js';\nimport {literal, html as staticHtml} from 'lit/static-html.js';\n\nimport {ARIAMixinStrict} from '../../internal/aria/aria.js';\nimport {requestUpdateOnAriaChange} from '../../internal/aria/delegate.js';\nimport {\n  FormSubmitter,\n  setupFormSubmitter,\n  type FormSubmitterType,\n} from '../../internal/controller/form-submitter.js';\nimport {isRtl} from '../../internal/controller/is-rtl.js';\nimport {\n  internals,\n  mixinElementInternals,\n} from '../../labs/behaviors/element-internals.js';\n\ntype LinkTarget = '_blank' | '_parent' | '_self' | '_top';\n\n// Separate variable needed for closure.\nconst iconButtonBaseClass = mixinElementInternals(LitElement);\n\n/**\n * A button for rendering icons.\n *\n * @fires input {InputEvent} Dispatched when a toggle button toggles --bubbles\n * --composed\n * @fires change {Event} Dispatched when a toggle button toggles --bubbles\n */\nexport class IconButton extends iconButtonBaseClass implements FormSubmitter {\n  static {\n    requestUpdateOnAriaChange(IconButton);\n    setupFormSubmitter(IconButton);\n  }\n\n  /** @nocollapse */\n  static readonly formAssociated = true;\n\n  /** @nocollapse */\n  static override shadowRootOptions: ShadowRootInit = {\n    mode: 'open',\n    delegatesFocus: true,\n  };\n\n  /**\n   * Disables the icon button and makes it non-interactive.\n   */\n  @property({type: Boolean, reflect: true}) disabled = false;\n\n  /**\n   * Flips the icon if it is in an RTL context at startup.\n   */\n  @property({type: Boolean, attribute: 'flip-icon-in-rtl'})\n  flipIconInRtl = false;\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `href` resource attribute.\n   */\n  @property() href = '';\n\n  /**\n   * Sets the underlying `HTMLAnchorElement`'s `target` attribute.\n   */\n  @property() target: LinkTarget | '' = '';\n\n  /**\n   * The `aria-label` of the button when the button is toggleable and selected.\n   */\n  @property({attribute: 'aria-label-selected'}) ariaLabelSelected = '';\n\n  /**\n   * When true, the button will toggle between selected and unselected\n   * states\n   */\n  @property({type: Boolean}) toggle = false;\n\n  /**\n   * Sets the selected state. When false, displays the default icon. When true,\n   * displays the selected icon, or the default icon If no `slot=\"selected\"`\n   * icon is provided.\n   */\n  @property({type: Boolean, reflect: true}) selected = false;\n\n  /**\n   * The default behavior of the button. May be \"text\", \"reset\", or \"submit\"\n   * (default).\n   */\n  @property() type: FormSubmitterType = 'submit';\n\n  /**\n   * The value added to a form with the button's name when the button submits a\n   * form.\n   */\n  @property({reflect: true}) value = '';\n\n  get name() {\n    return this.getAttribute('name') ?? '';\n  }\n  set name(name: string) {\n    this.setAttribute('name', name);\n  }\n\n  /**\n   * The associated form element with which this element's value will submit.\n   */\n  get form() {\n    return this[internals].form;\n  }\n\n  /**\n   * The labels this element is associated with.\n   */\n  get labels() {\n    return this[internals].labels;\n  }\n\n  @state() private flipIcon = isRtl(this, this.flipIconInRtl);\n\n  /**\n   * Link buttons cannot be disabled.\n   */\n  protected override willUpdate() {\n    if (this.href) {\n      this.disabled = false;\n    }\n  }\n\n  protected override render() {\n    const tag = this.href ? literal`div` : literal`button`;\n    // Needed for closure conformance\n    const {ariaLabel, ariaHasPopup, ariaExpanded} = this as ARIAMixinStrict;\n    const hasToggledAriaLabel = ariaLabel && this.ariaLabelSelected;\n    const ariaPressedValue = !this.toggle ? nothing : this.selected;\n    let ariaLabelValue: string | null | typeof nothing = nothing;\n    if (!this.href) {\n      ariaLabelValue =\n        hasToggledAriaLabel && this.selected\n          ? this.ariaLabelSelected\n          : ariaLabel;\n    }\n    return staticHtml`<${tag}\n        class=\"icon-button ${classMap(this.getRenderClasses())}\"\n        id=\"button\"\n        aria-label=\"${ariaLabelValue || nothing}\"\n        aria-haspopup=\"${(!this.href && ariaHasPopup) || nothing}\"\n        aria-expanded=\"${(!this.href && ariaExpanded) || nothing}\"\n        aria-pressed=\"${ariaPressedValue}\"\n        ?disabled=\"${!this.href && this.disabled}\"\n        @click=\"${this.handleClick}\">\n        ${this.renderFocusRing()}\n        ${this.renderRipple()}\n        ${!this.selected ? this.renderIcon() : nothing}\n        ${this.selected ? this.renderSelectedIcon() : nothing}\n        ${this.renderTouchTarget()}\n        ${this.href && this.renderLink()}\n  </${tag}>`;\n  }\n\n  private renderLink() {\n    // Needed for closure conformance\n    const {ariaLabel} = this as ARIAMixinStrict;\n    return html`\n      <a\n        class=\"link\"\n        id=\"link\"\n        href=\"${this.href}\"\n        target=\"${this.target || nothing}\"\n        aria-label=\"${ariaLabel || nothing}\"></a>\n    `;\n  }\n\n  protected getRenderClasses() {\n    return {\n      'flip-icon': this.flipIcon,\n      'selected': this.toggle && this.selected,\n    };\n  }\n\n  private renderIcon() {\n    return html`<span class=\"icon\"><slot></slot></span>`;\n  }\n\n  private renderSelectedIcon() {\n    // Use default slot as fallback to not require specifying multiple icons\n    return html`<span class=\"icon icon--selected\"\n      ><slot name=\"selected\"><slot></slot></slot\n    ></span>`;\n  }\n\n  private renderTouchTarget() {\n    return html`<span class=\"touch\"></span>`;\n  }\n\n  private renderFocusRing() {\n    // TODO(b/310046938): use the same id for both elements\n    return html`<md-focus-ring\n      part=\"focus-ring\"\n      for=${this.href ? 'link' : 'button'}></md-focus-ring>`;\n  }\n\n  private renderRipple() {\n    // TODO(b/310046938): use the same id for both elements\n    return html`<md-ripple\n      for=${this.href ? 'link' : nothing}\n      ?disabled=\"${!this.href && this.disabled}\"></md-ripple>`;\n  }\n\n  override connectedCallback() {\n    this.flipIcon = isRtl(this, this.flipIconInRtl);\n    super.connectedCallback();\n  }\n\n  private async handleClick(event: Event) {\n    // Allow the event to propagate\n    await 0;\n    if (!this.toggle || this.disabled || event.defaultPrevented) {\n      return;\n    }\n\n    this.selected = !this.selected;\n    this.dispatchEvent(\n      new InputEvent('input', {bubbles: true, composed: true}),\n    );\n    // Bubbles but does not compose to mimic native browser <input> & <select>\n    // Additionally, native change event is not an InputEvent.\n    this.dispatchEvent(new Event('change', {bubbles: true}));\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}