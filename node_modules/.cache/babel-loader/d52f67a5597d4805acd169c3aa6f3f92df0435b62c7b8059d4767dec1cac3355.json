{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiImageFilterCenterFocus = \"M12,9A3,3 0 0,0 9,12A3,3 0 0,0 12,15A3,3 0 0,0 15,12A3,3 0 0,0 12,9M19,19H15V21H19A2,2 0 0,0 21,19V15H19M19,3H15V5H19V9H21V5A2,2 0 0,0 19,3M5,5H9V3H5A2,2 0 0,0 3,5V9H5M5,15H3V19A2,2 0 0,0 5,21H9V19H5V15Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { getColorByIndex } from \"../../../common/color/colors\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { deepEqual } from \"../../../common/util/deep-equal\";\nimport parseAspectRatio from \"../../../common/util/parse-aspect-ratio\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/map/ha-map\";\nimport { subscribeHistoryStatesTimeWindow } from \"../../../data/history\";\nimport { hasConfigChanged, hasConfigOrEntitiesChanged } from \"../common/has-changed\";\nimport { findEntities } from \"../common/find-entities\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nexport const DEFAULT_HOURS_TO_SHOW = 0;\nexport const DEFAULT_ZOOM = 14;\nlet HuiMapCard = _decorate([customElement(\"hui-map-card\")], function (_initialize, _LitElement) {\n  class HuiMapCard extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiMapCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"isPanel\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_stateHistory\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-map\")],\n      key: \"_map\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_configEntities\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_mapEntities\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_colorDict\",\n      value() {\n        return {};\n      }\n    }, {\n      kind: \"field\",\n      key: \"_colorIndex\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_subscribed\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        var _config$entities;\n        if (!config) {\n          throw new Error(\"Error in card configuration.\");\n        }\n        if (!((_config$entities = config.entities) !== null && _config$entities !== void 0 && _config$entities.length) && !config.geo_location_sources) {\n          throw new Error(\"Either entities or geo_location_sources must be specified\");\n        }\n        if (config.entities && !Array.isArray(config.entities)) {\n          throw new Error(\"Entities need to be an array\");\n        }\n        if (config.geo_location_sources && !Array.isArray(config.geo_location_sources)) {\n          throw new Error(\"Parameter geo_location_sources needs to be an array\");\n        }\n        this._config = config;\n        this._configEntities = config.entities ? processConfigEntities(config.entities) : [];\n        this._mapEntities = this._getMapEntities();\n      }\n    }, {\n      kind: \"method\",\n      key: \"getCardSize\",\n      value: function getCardSize() {\n        var _this$_config;\n        if (!((_this$_config = this._config) !== null && _this$_config !== void 0 && _this$_config.aspect_ratio)) {\n          return 7;\n        }\n        const ratio = parseAspectRatio(this._config.aspect_ratio);\n        const ar = ratio && ratio.w > 0 && ratio.h > 0 ? `${(100 * ratio.h / ratio.w).toFixed(2)}` : \"100\";\n        return 1 + Math.floor(Number(ar) / 25) || 3;\n      }\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getConfigElement\",\n      value: async function getConfigElement() {\n        await import(\"../editor/config-elements/hui-map-card-editor\");\n        return document.createElement(\"hui-map-card-editor\");\n      }\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig(hass, entities, entitiesFallback) {\n        const includeDomains = [\"device_tracker\"];\n        const maxEntities = 2;\n        const foundEntities = findEntities(hass, maxEntities, entities, entitiesFallback, includeDomains);\n        return {\n          type: \"map\",\n          entities: foundEntities\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_config$default;\n        if (!this._config) {\n          return nothing;\n        }\n        if (this._error) {\n          return html`<ha-alert alert-type=\"error\">\n        ${this.hass.localize(\"ui.components.map.error\")}: ${this._error.message}\n        (${this._error.code})\n      </ha-alert>`;\n        }\n        return html`\n      <ha-card id=\"card\" .header=${this._config.title}>\n        <div id=\"root\">\n          <ha-map\n            .hass=${this.hass}\n            .entities=${this._mapEntities}\n            .zoom=${(_this$_config$default = this._config.default_zoom) !== null && _this$_config$default !== void 0 ? _this$_config$default : DEFAULT_ZOOM}\n            .paths=${this._getHistoryPaths(this._config, this._stateHistory)}\n            .autoFit=${this._config.auto_fit || false}\n            .fitZones=${this._config.fit_zones}\n            ?darkMode=${this._config.dark_mode}\n            interactiveZones\n            renderPassive\n          ></ha-map>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.panel.lovelace.cards.map.reset_focus\")}\n            .path=${mdiImageFilterCenterFocus}\n            @click=${this._fitMap}\n            tabindex=\"0\"\n          ></ha-icon-button>\n        </div>\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        var _this$_config2, _this$_config3;\n        if (!changedProps.has(\"hass\") || changedProps.size > 1) {\n          return true;\n        }\n        const oldHass = changedProps.get(\"hass\");\n        if (!oldHass || !this._configEntities) {\n          return true;\n        }\n        if (oldHass.themes.darkMode !== this.hass.themes.darkMode) {\n          return true;\n        }\n        if (changedProps.has(\"_stateHistory\")) {\n          return true;\n        }\n        if ((_this$_config2 = this._config) !== null && _this$_config2 !== void 0 && _this$_config2.geo_location_sources) {\n          if (oldHass.states !== this.hass.states) {\n            return true;\n          }\n        }\n        return (_this$_config3 = this._config) !== null && _this$_config3 !== void 0 && _this$_config3.entities ? hasConfigOrEntitiesChanged(this, changedProps) : hasConfigChanged(this, changedProps);\n      }\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        var _this$_config4, _changedProps$get;\n        _get(_getPrototypeOf(HuiMapCard.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"hass\") && (_this$_config4 = this._config) !== null && _this$_config4 !== void 0 && _this$_config4.geo_location_sources && !deepEqual(this._getSourceEntities((_changedProps$get = changedProps.get(\"hass\")) === null || _changedProps$get === void 0 ? void 0 : _changedProps$get.states), this._getSourceEntities(this.hass.states))) {\n          this._mapEntities = this._getMapEntities();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        var _this$_configEntities;\n        _get(_getPrototypeOf(HuiMapCard.prototype), \"connectedCallback\", this).call(this);\n        if (this.hasUpdated && (_this$_configEntities = this._configEntities) !== null && _this$_configEntities !== void 0 && _this$_configEntities.length) {\n          this._subscribeHistory();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(HuiMapCard.prototype), \"disconnectedCallback\", this).call(this);\n        this._unsubscribeHistory();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_subscribeHistory\",\n      value: function _subscribeHistory() {\n        var _this$_config$hours_t, _this$_config5, _ref;\n        if (!isComponentLoaded(this.hass, \"history\") || this._subscribed || !((_this$_config$hours_t = (_this$_config5 = this._config) === null || _this$_config5 === void 0 ? void 0 : _this$_config5.hours_to_show) !== null && _this$_config$hours_t !== void 0 ? _this$_config$hours_t : DEFAULT_HOURS_TO_SHOW)) {\n          return;\n        }\n        this._subscribed = subscribeHistoryStatesTimeWindow(this.hass, combinedHistory => {\n          if (!this._subscribed) {\n            // Message came in before we had a chance to unload\n            return;\n          }\n          this._stateHistory = combinedHistory;\n        }, (_ref = this._config.hours_to_show) !== null && _ref !== void 0 ? _ref : DEFAULT_HOURS_TO_SHOW, (this._configEntities || []).map(entity => entity.entity), false, false, false).catch(err => {\n          this._subscribed = undefined;\n          this._error = err;\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_unsubscribeHistory\",\n      value: function _unsubscribeHistory() {\n        if (this._subscribed) {\n          this._subscribed.then(unsub => unsub === null || unsub === void 0 ? void 0 : unsub());\n          this._subscribed = undefined;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        var _this$_configEntities2;\n        if ((_this$_configEntities2 = this._configEntities) !== null && _this$_configEntities2 !== void 0 && _this$_configEntities2.length) {\n          if (!this._subscribed || changedProps.has(\"_config\")) {\n            this._unsubscribeHistory();\n            this._subscribeHistory();\n          }\n        } else {\n          this._unsubscribeHistory();\n        }\n        if (changedProps.has(\"_config\")) {\n          this._computePadding();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computePadding\",\n      value: function _computePadding() {\n        const root = this.shadowRoot.getElementById(\"root\");\n        if (!this._config || this.isPanel || !root) {\n          return;\n        }\n        if (!this._config.aspect_ratio) {\n          root.style.paddingBottom = \"100%\";\n          return;\n        }\n        root.style.height = \"auto\";\n        const ratio = parseAspectRatio(this._config.aspect_ratio);\n        root.style.paddingBottom = ratio && ratio.w > 0 && ratio.h > 0 ? `${(100 * ratio.h / ratio.w).toFixed(2)}%` : root.style.paddingBottom = \"100%\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fitMap\",\n      value: function _fitMap() {\n        var _this$_map;\n        (_this$_map = this._map) === null || _this$_map === void 0 || _this$_map.fitMap();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getColor\",\n      value: function _getColor(entityId) {\n        let color = this._colorDict[entityId];\n        if (color) {\n          return color;\n        }\n        color = getColorByIndex(this._colorIndex);\n        this._colorIndex++;\n        this._colorDict[entityId] = color;\n        return color;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getSourceEntities\",\n      value: function _getSourceEntities(states) {\n        var _this$_config6;\n        if (!states || !((_this$_config6 = this._config) !== null && _this$_config6 !== void 0 && _this$_config6.geo_location_sources)) {\n          return [];\n        }\n        const geoEntities = [];\n        // Calculate visible geo location sources\n        const includesAll = this._config.geo_location_sources.includes(\"all\");\n        for (const stateObj of Object.values(states)) {\n          if (computeDomain(stateObj.entity_id) === \"geo_location\" && (includesAll || this._config.geo_location_sources.includes(stateObj.attributes.source))) {\n            geoEntities.push(stateObj.entity_id);\n          }\n        }\n        return geoEntities;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getMapEntities\",\n      value: function _getMapEntities() {\n        var _this$hass;\n        return [...(this._configEntities || []).map(entityConf => ({\n          entity_id: entityConf.entity,\n          color: this._getColor(entityConf.entity),\n          label_mode: entityConf.label_mode,\n          focus: entityConf.focus,\n          name: entityConf.name\n        })), ...this._getSourceEntities((_this$hass = this.hass) === null || _this$hass === void 0 ? void 0 : _this$hass.states).map(entity => ({\n          entity_id: entity,\n          color: this._getColor(entity)\n        }))];\n      }\n    }, {\n      kind: \"field\",\n      key: \"_getHistoryPaths\",\n      value() {\n        return memoizeOne((config, history) => {\n          var _config$hours_to_show;\n          if (!history || !((_config$hours_to_show = config.hours_to_show) !== null && _config$hours_to_show !== void 0 ? _config$hours_to_show : DEFAULT_HOURS_TO_SHOW)) {\n            return undefined;\n          }\n          const paths = [];\n          for (const entityId of Object.keys(history)) {\n            var _this$_configEntities3, _entityConfig$name, _config$hours_to_show2;\n            if (computeDomain(entityId) === \"zone\") {\n              continue;\n            }\n            const entityStates = history[entityId];\n            if (!(entityStates !== null && entityStates !== void 0 && entityStates.length)) {\n              continue;\n            }\n            // filter location data from states and remove all invalid locations\n            const points = [];\n            for (const entityState of entityStates) {\n              const latitude = entityState.a.latitude;\n              const longitude = entityState.a.longitude;\n              if (!latitude || !longitude) {\n                continue;\n              }\n              const p = {};\n              p.point = [latitude, longitude];\n              p.timestamp = new Date(entityState.lu * 1000);\n              points.push(p);\n            }\n            const entityConfig = (_this$_configEntities3 = this._configEntities) === null || _this$_configEntities3 === void 0 ? void 0 : _this$_configEntities3.find(e => e.entity === entityId);\n            const name = (_entityConfig$name = entityConfig === null || entityConfig === void 0 ? void 0 : entityConfig.name) !== null && _entityConfig$name !== void 0 ? _entityConfig$name : entityId in this.hass.states ? computeStateName(this.hass.states[entityId]) : entityId;\n            paths.push({\n              points,\n              name,\n              fullDatetime: ((_config$hours_to_show2 = config.hours_to_show) !== null && _config$hours_to_show2 !== void 0 ? _config$hours_to_show2 : DEFAULT_HOURS_TO_SHOW) > 144,\n              color: this._getColor(entityId),\n              gradualOpacity: 0.8\n            });\n          }\n          return paths;\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-card {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      ha-map {\n        z-index: 0;\n        border: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: inherit;\n      }\n\n      ha-icon-button {\n        position: absolute;\n        top: 75px;\n        left: 3px;\n        outline: none;\n      }\n\n      #root {\n        position: relative;\n        height: 100%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","query","state","memoizeOne","getColorByIndex","isComponentLoaded","computeDomain","computeStateName","deepEqual","parseAspectRatio","subscribeHistoryStatesTimeWindow","hasConfigChanged","hasConfigOrEntitiesChanged","findEntities","processConfigEntities","DEFAULT_HOURS_TO_SHOW","DEFAULT_ZOOM","HuiMapCard","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","reflect","setConfig","config","_config$entities","Error","entities","length","geo_location_sources","Array","isArray","_config","_configEntities","_mapEntities","_getMapEntities","getCardSize","_this$_config","aspect_ratio","ratio","ar","w","h","toFixed","Math","floor","Number","static","getConfigElement","document","createElement","getStubConfig","hass","entitiesFallback","includeDomains","maxEntities","foundEntities","render","_this$_config$default","_error","localize","message","code","title","default_zoom","_getHistoryPaths","_stateHistory","auto_fit","fit_zones","dark_mode","mdiImageFilterCenterFocus","_fitMap","shouldUpdate","changedProps","_this$_config2","_this$_config3","has","size","oldHass","get","themes","darkMode","states","willUpdate","_this$_config4","_changedProps$get","_get","_getPrototypeOf","prototype","call","_getSourceEntities","connectedCallback","_this$_configEntities","hasUpdated","_subscribeHistory","disconnectedCallback","_unsubscribeHistory","_this$_config$hours_t","_this$_config5","_ref","_subscribed","hours_to_show","combinedHistory","map","entity","catch","err","undefined","then","unsub","updated","_this$_configEntities2","_computePadding","root","shadowRoot","getElementById","isPanel","style","paddingBottom","height","_this$_map","_map","fitMap","_getColor","entityId","color","_colorDict","_colorIndex","_this$_config6","geoEntities","includesAll","includes","stateObj","Object","values","entity_id","attributes","source","push","_this$hass","entityConf","label_mode","focus","name","history","_config$hours_to_show","paths","keys","_this$_configEntities3","_entityConfig$name","_config$hours_to_show2","entityStates","points","entityState","latitude","a","longitude","p","point","timestamp","Date","lu","entityConfig","find","e","fullDatetime","gradualOpacity","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/cards/hui-map-card.ts"],"sourcesContent":["import { mdiImageFilterCenterFocus } from \"@mdi/js\";\nimport { HassEntities } from \"home-assistant-js-websocket\";\nimport { LatLngTuple } from \"leaflet\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { getColorByIndex } from \"../../../common/color/colors\";\nimport { isComponentLoaded } from \"../../../common/config/is_component_loaded\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { deepEqual } from \"../../../common/util/deep-equal\";\nimport parseAspectRatio from \"../../../common/util/parse-aspect-ratio\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-alert\";\nimport \"../../../components/ha-icon-button\";\nimport \"../../../components/map/ha-map\";\nimport type {\n  HaMap,\n  HaMapEntity,\n  HaMapPathPoint,\n  HaMapPaths,\n} from \"../../../components/map/ha-map\";\nimport {\n  HistoryStates,\n  subscribeHistoryStatesTimeWindow,\n} from \"../../../data/history\";\nimport {\n  hasConfigChanged,\n  hasConfigOrEntitiesChanged,\n} from \"../common/has-changed\";\nimport { HomeAssistant } from \"../../../types\";\nimport { findEntities } from \"../common/find-entities\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { LovelaceCard } from \"../types\";\nimport { MapCardConfig } from \"./types\";\n\nexport const DEFAULT_HOURS_TO_SHOW = 0;\nexport const DEFAULT_ZOOM = 14;\n\ninterface MapEntityConfig extends EntityConfig {\n  label_mode?: \"state\" | \"name\";\n  focus?: boolean;\n}\n\n@customElement(\"hui-map-card\")\nclass HuiMapCard extends LitElement implements LovelaceCard {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ type: Boolean, reflect: true })\n  public isPanel = false;\n\n  @state() private _stateHistory?: HistoryStates;\n\n  @state()\n  private _config?: MapCardConfig;\n\n  @query(\"ha-map\")\n  private _map?: HaMap;\n\n  private _configEntities?: MapEntityConfig[];\n\n  @state() private _mapEntities: HaMapEntity[] = [];\n\n  private _colorDict: Record<string, string> = {};\n\n  private _colorIndex = 0;\n\n  @state() private _error?: { code: string; message: string };\n\n  private _subscribed?: Promise<(() => Promise<void>) | void>;\n\n  public setConfig(config: MapCardConfig): void {\n    if (!config) {\n      throw new Error(\"Error in card configuration.\");\n    }\n\n    if (!config.entities?.length && !config.geo_location_sources) {\n      throw new Error(\n        \"Either entities or geo_location_sources must be specified\"\n      );\n    }\n    if (config.entities && !Array.isArray(config.entities)) {\n      throw new Error(\"Entities need to be an array\");\n    }\n    if (\n      config.geo_location_sources &&\n      !Array.isArray(config.geo_location_sources)\n    ) {\n      throw new Error(\"Parameter geo_location_sources needs to be an array\");\n    }\n\n    this._config = config;\n    this._configEntities = config.entities\n      ? processConfigEntities<MapEntityConfig>(config.entities)\n      : [];\n    this._mapEntities = this._getMapEntities();\n  }\n\n  public getCardSize(): number {\n    if (!this._config?.aspect_ratio) {\n      return 7;\n    }\n\n    const ratio = parseAspectRatio(this._config.aspect_ratio);\n    const ar =\n      ratio && ratio.w > 0 && ratio.h > 0\n        ? `${((100 * ratio.h) / ratio.w).toFixed(2)}`\n        : \"100\";\n\n    return 1 + Math.floor(Number(ar) / 25) || 3;\n  }\n\n  public static async getConfigElement() {\n    await import(\"../editor/config-elements/hui-map-card-editor\");\n    return document.createElement(\"hui-map-card-editor\");\n  }\n\n  public static getStubConfig(\n    hass: HomeAssistant,\n    entities: string[],\n    entitiesFallback: string[]\n  ): MapCardConfig {\n    const includeDomains = [\"device_tracker\"];\n    const maxEntities = 2;\n    const foundEntities = findEntities(\n      hass,\n      maxEntities,\n      entities,\n      entitiesFallback,\n      includeDomains\n    );\n\n    return { type: \"map\", entities: foundEntities };\n  }\n\n  protected render() {\n    if (!this._config) {\n      return nothing;\n    }\n    if (this._error) {\n      return html`<ha-alert alert-type=\"error\">\n        ${this.hass.localize(\"ui.components.map.error\")}: ${this._error.message}\n        (${this._error.code})\n      </ha-alert>`;\n    }\n    return html`\n      <ha-card id=\"card\" .header=${this._config.title}>\n        <div id=\"root\">\n          <ha-map\n            .hass=${this.hass}\n            .entities=${this._mapEntities}\n            .zoom=${this._config.default_zoom ?? DEFAULT_ZOOM}\n            .paths=${this._getHistoryPaths(this._config, this._stateHistory)}\n            .autoFit=${this._config.auto_fit || false}\n            .fitZones=${this._config.fit_zones}\n            ?darkMode=${this._config.dark_mode}\n            interactiveZones\n            renderPassive\n          ></ha-map>\n          <ha-icon-button\n            .label=${this.hass!.localize(\n              \"ui.panel.lovelace.cards.map.reset_focus\"\n            )}\n            .path=${mdiImageFilterCenterFocus}\n            @click=${this._fitMap}\n            tabindex=\"0\"\n          ></ha-icon-button>\n        </div>\n      </ha-card>\n    `;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues) {\n    if (!changedProps.has(\"hass\") || changedProps.size > 1) {\n      return true;\n    }\n\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n    if (!oldHass || !this._configEntities) {\n      return true;\n    }\n\n    if (oldHass.themes.darkMode !== this.hass.themes.darkMode) {\n      return true;\n    }\n\n    if (changedProps.has(\"_stateHistory\")) {\n      return true;\n    }\n\n    if (this._config?.geo_location_sources) {\n      if (oldHass.states !== this.hass.states) {\n        return true;\n      }\n    }\n\n    return this._config?.entities\n      ? hasConfigOrEntitiesChanged(this, changedProps)\n      : hasConfigChanged(this, changedProps);\n  }\n\n  protected willUpdate(changedProps: PropertyValues): void {\n    super.willUpdate(changedProps);\n    if (\n      changedProps.has(\"hass\") &&\n      this._config?.geo_location_sources &&\n      !deepEqual(\n        this._getSourceEntities(changedProps.get(\"hass\")?.states),\n        this._getSourceEntities(this.hass.states)\n      )\n    ) {\n      this._mapEntities = this._getMapEntities();\n    }\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (this.hasUpdated && this._configEntities?.length) {\n      this._subscribeHistory();\n    }\n  }\n\n  public disconnectedCallback() {\n    super.disconnectedCallback();\n    this._unsubscribeHistory();\n  }\n\n  private _subscribeHistory() {\n    if (\n      !isComponentLoaded(this.hass!, \"history\") ||\n      this._subscribed ||\n      !(this._config?.hours_to_show ?? DEFAULT_HOURS_TO_SHOW)\n    ) {\n      return;\n    }\n    this._subscribed = subscribeHistoryStatesTimeWindow(\n      this.hass!,\n      (combinedHistory) => {\n        if (!this._subscribed) {\n          // Message came in before we had a chance to unload\n          return;\n        }\n        this._stateHistory = combinedHistory;\n      },\n      this._config!.hours_to_show! ?? DEFAULT_HOURS_TO_SHOW,\n      (this._configEntities || []).map((entity) => entity.entity)!,\n      false,\n      false,\n      false\n    ).catch((err) => {\n      this._subscribed = undefined;\n      this._error = err;\n    });\n  }\n\n  private _unsubscribeHistory() {\n    if (this._subscribed) {\n      this._subscribed.then((unsub) => unsub?.());\n      this._subscribed = undefined;\n    }\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (this._configEntities?.length) {\n      if (!this._subscribed || changedProps.has(\"_config\")) {\n        this._unsubscribeHistory();\n        this._subscribeHistory();\n      }\n    } else {\n      this._unsubscribeHistory();\n    }\n    if (changedProps.has(\"_config\")) {\n      this._computePadding();\n    }\n  }\n\n  private _computePadding(): void {\n    const root = this.shadowRoot!.getElementById(\"root\");\n    if (!this._config || this.isPanel || !root) {\n      return;\n    }\n\n    if (!this._config.aspect_ratio) {\n      root.style.paddingBottom = \"100%\";\n      return;\n    }\n\n    root.style.height = \"auto\";\n\n    const ratio = parseAspectRatio(this._config.aspect_ratio);\n\n    root.style.paddingBottom =\n      ratio && ratio.w > 0 && ratio.h > 0\n        ? `${((100 * ratio.h) / ratio.w).toFixed(2)}%`\n        : (root.style.paddingBottom = \"100%\");\n  }\n\n  private _fitMap() {\n    this._map?.fitMap();\n  }\n\n  private _getColor(entityId: string): string {\n    let color = this._colorDict[entityId];\n    if (color) {\n      return color;\n    }\n    color = getColorByIndex(this._colorIndex);\n    this._colorIndex++;\n    this._colorDict[entityId] = color;\n    return color;\n  }\n\n  private _getSourceEntities(states?: HassEntities): string[] {\n    if (!states || !this._config?.geo_location_sources) {\n      return [];\n    }\n\n    const geoEntities: string[] = [];\n    // Calculate visible geo location sources\n    const includesAll = this._config.geo_location_sources.includes(\"all\");\n    for (const stateObj of Object.values(states)) {\n      if (\n        computeDomain(stateObj.entity_id) === \"geo_location\" &&\n        (includesAll ||\n          this._config.geo_location_sources.includes(\n            stateObj.attributes.source\n          ))\n      ) {\n        geoEntities.push(stateObj.entity_id);\n      }\n    }\n    return geoEntities;\n  }\n\n  private _getMapEntities(): HaMapEntity[] {\n    return [\n      ...(this._configEntities || []).map((entityConf) => ({\n        entity_id: entityConf.entity,\n        color: this._getColor(entityConf.entity),\n        label_mode: entityConf.label_mode,\n        focus: entityConf.focus,\n        name: entityConf.name,\n      })),\n      ...this._getSourceEntities(this.hass?.states).map((entity) => ({\n        entity_id: entity,\n        color: this._getColor(entity),\n      })),\n    ];\n  }\n\n  private _getHistoryPaths = memoizeOne(\n    (\n      config: MapCardConfig,\n      history?: HistoryStates\n    ): HaMapPaths[] | undefined => {\n      if (!history || !(config.hours_to_show ?? DEFAULT_HOURS_TO_SHOW)) {\n        return undefined;\n      }\n\n      const paths: HaMapPaths[] = [];\n\n      for (const entityId of Object.keys(history)) {\n        if (computeDomain(entityId) === \"zone\") {\n          continue;\n        }\n        const entityStates = history[entityId];\n        if (!entityStates?.length) {\n          continue;\n        }\n        // filter location data from states and remove all invalid locations\n        const points: HaMapPathPoint[] = [];\n        for (const entityState of entityStates) {\n          const latitude = entityState.a.latitude;\n          const longitude = entityState.a.longitude;\n          if (!latitude || !longitude) {\n            continue;\n          }\n          const p = {} as HaMapPathPoint;\n          p.point = [latitude, longitude] as LatLngTuple;\n          p.timestamp = new Date(entityState.lu * 1000);\n          points.push(p);\n        }\n\n        const entityConfig = this._configEntities?.find(\n          (e) => e.entity === entityId\n        );\n        const name =\n          entityConfig?.name ??\n          (entityId in this.hass.states\n            ? computeStateName(this.hass.states[entityId])\n            : entityId);\n\n        paths.push({\n          points,\n          name,\n          fullDatetime: (config.hours_to_show ?? DEFAULT_HOURS_TO_SHOW) > 144,\n          color: this._getColor(entityId),\n          gradualOpacity: 0.8,\n        });\n      }\n      return paths;\n    }\n  );\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-card {\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        display: flex;\n        flex-direction: column;\n      }\n\n      ha-map {\n        z-index: 0;\n        border: none;\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: inherit;\n      }\n\n      ha-icon-button {\n        position: absolute;\n        top: 75px;\n        left: 3px;\n        outline: none;\n      }\n\n      #root {\n        position: relative;\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-map-card\": HuiMapCard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}