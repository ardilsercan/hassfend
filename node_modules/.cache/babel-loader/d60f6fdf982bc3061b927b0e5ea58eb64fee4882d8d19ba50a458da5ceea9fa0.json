{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { splitByGroups } from \"../../../common/entity/split_by_groups\";\nimport { stripPrefixFromEntityName } from \"../../../common/entity/strip_prefix_from_entity_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { domainToName } from \"../../../data/integration\";\nimport { computeUserInitials } from \"../../../data/user\";\nimport { HELPER_DOMAINS } from \"../../config/helpers/const\";\nimport { areaCompare } from \"../../../data/area_registry\";\nvar HIDE_DOMAIN = new Set([\"automation\", \"configurator\", \"device_tracker\", \"geo_location\", \"persistent_notification\", \"script\", \"sun\", \"zone\", \"event\", \"tts\", \"stt\", \"todo\"]);\nvar HIDE_PLATFORM = new Set([\"mobile_app\"]);\nvar splitByAreaDevice = function splitByAreaDevice(areaEntries, deviceEntries, entityEntries, entities) {\n  var allEntities = Object.assign({}, entities);\n  var areasWithEntities = {};\n  var devicesWithEntities = {};\n  for (var _i = 0, _Object$values = Object.values(entityEntries); _i < _Object$values.length; _i++) {\n    var _deviceEntries$entity;\n    var entity = _Object$values[_i];\n    var _areaId = entity.area_id || entity.device_id && ((_deviceEntries$entity = deviceEntries[entity.device_id]) === null || _deviceEntries$entity === void 0 ? void 0 : _deviceEntries$entity.area_id);\n    if (_areaId && _areaId in areaEntries && entity.entity_id in allEntities) {\n      if (!(_areaId in areasWithEntities)) {\n        areasWithEntities[_areaId] = [];\n      }\n      areasWithEntities[_areaId].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    } else if (entity.device_id && entity.device_id in deviceEntries && entity.entity_id in allEntities) {\n      if (!(entity.device_id in devicesWithEntities)) {\n        devicesWithEntities[entity.device_id] = [];\n      }\n      devicesWithEntities[entity.device_id].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    }\n  }\n  for (var _i2 = 0, _Object$entries = Object.entries(devicesWithEntities); _i2 < _Object$entries.length; _i2++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n      _deviceId = _Object$entries$_i[0],\n      deviceEntities = _Object$entries$_i[1];\n    if (deviceEntities.length === 1) {\n      allEntities[deviceEntities[0].entity_id] = deviceEntities[0];\n      delete devicesWithEntities[_deviceId];\n    }\n  }\n  return {\n    areasWithEntities: areasWithEntities,\n    devicesWithEntities: devicesWithEntities,\n    otherEntities: allEntities\n  };\n};\nexport var computeCards = function computeCards(states, entityIds, entityCardOptions) {\n  var renderFooterEntities = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var cards = [];\n\n  // For entity card\n  var entitiesConf = [];\n  var titlePrefix = entityCardOptions.title ? entityCardOptions.title.toLowerCase() : undefined;\n  var footerEntities = [];\n  var _iterator = _createForOfIteratorHelper(entityIds),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var entityId = _step.value;\n      var stateObj = states[entityId];\n      var _domain = computeDomain(entityId);\n      if (_domain === \"alarm_control_panel\") {\n        var cardConfig = {\n          type: \"alarm-panel\",\n          entity: entityId\n        };\n        cards.push(cardConfig);\n      } else if (_domain === \"camera\") {\n        var _cardConfig = {\n          type: \"picture-entity\",\n          entity: entityId\n        };\n        cards.push(_cardConfig);\n      } else if (_domain === \"image\") {\n        var _cardConfig2 = {\n          type: \"picture\",\n          image_entity: entityId\n        };\n        cards.push(_cardConfig2);\n      } else if (_domain === \"climate\") {\n        var _states$entityId$attr, _states$entityId, _states$entityId2;\n        var _cardConfig3 = {\n          type: \"thermostat\",\n          entity: entityId,\n          features: ((_states$entityId$attr = (_states$entityId = states[entityId]) === null || _states$entityId === void 0 || (_states$entityId = _states$entityId.attributes) === null || _states$entityId === void 0 || (_states$entityId = _states$entityId.hvac_modes) === null || _states$entityId === void 0 ? void 0 : _states$entityId.length) !== null && _states$entityId$attr !== void 0 ? _states$entityId$attr : 0) > 1 ? [{\n            type: \"climate-hvac-modes\",\n            hvac_modes: (_states$entityId2 = states[entityId]) === null || _states$entityId2 === void 0 || (_states$entityId2 = _states$entityId2.attributes) === null || _states$entityId2 === void 0 ? void 0 : _states$entityId2.hvac_modes\n          }] : undefined\n        };\n        cards.push(_cardConfig3);\n      } else if (_domain === \"humidifier\") {\n        var _cardConfig4 = {\n          type: \"humidifier\",\n          entity: entityId,\n          features: [{\n            type: \"humidifier-toggle\"\n          }]\n        };\n        cards.push(_cardConfig4);\n      } else if (_domain === \"media_player\") {\n        var _cardConfig5 = {\n          type: \"media-control\",\n          entity: entityId\n        };\n        cards.push(_cardConfig5);\n      } else if (_domain === \"plant\") {\n        var _cardConfig6 = {\n          type: \"plant-status\",\n          entity: entityId\n        };\n        cards.push(_cardConfig6);\n      } else if (_domain === \"weather\") {\n        var _cardConfig7 = {\n          type: \"weather-forecast\",\n          entity: entityId,\n          show_forecast: false\n        };\n        cards.push(_cardConfig7);\n      } else if (renderFooterEntities && (_domain === \"scene\" || _domain === \"script\")) {\n        var conf = {\n          entity: entityId,\n          show_icon: true,\n          show_name: true\n        };\n        var name = void 0;\n        if (titlePrefix && stateObj && (\n        // eslint-disable-next-line no-cond-assign\n        name = stripPrefixFromEntityName(computeStateName(stateObj), titlePrefix))) {\n          conf.name = name;\n        }\n        footerEntities.push(conf);\n      } else {\n        var _name = void 0;\n        var entityConf = titlePrefix && stateObj && (\n        // eslint-disable-next-line no-cond-assign\n        _name = stripPrefixFromEntityName(computeStateName(stateObj), titlePrefix)) ? {\n          entity: entityId,\n          name: _name\n        } : entityId;\n        entitiesConf.push(entityConf);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  entitiesConf.sort(function (a, b) {\n    var entityIdA = typeof a === \"string\" ? a : a.entity;\n    var entityIdB = typeof b === \"string\" ? b : b.entity;\n    var categoryA = SENSOR_ENTITIES.includes(computeDomain(entityIdA)) ? \"sensor\" : \"control\";\n    var categoryB = SENSOR_ENTITIES.includes(computeDomain(entityIdB)) ? \"sensor\" : \"control\";\n    if (categoryA !== categoryB) {\n      return categoryA === \"sensor\" ? 1 : -1;\n    }\n    return stringCompare(typeof a === \"string\" ? states[a] ? computeStateName(states[a]) : \"\" : a.name || \"\", typeof b === \"string\" ? states[b] ? computeStateName(states[b]) : \"\" : b.name || \"\");\n  });\n\n  // If we ended up with footer entities but no normal entities,\n  // render the footer entities as normal entities.\n  if (entitiesConf.length === 0 && footerEntities.length > 0) {\n    return computeCards(states, entityIds, entityCardOptions, false);\n  }\n  if (entitiesConf.length > 0 || footerEntities.length > 0) {\n    var card = Object.assign({\n      type: \"entities\",\n      entities: entitiesConf\n    }, entityCardOptions);\n    if (footerEntities.length > 0) {\n      card.footer = {\n        type: \"buttons\",\n        entities: footerEntities\n      };\n    }\n    cards.unshift(card);\n  }\n  if (cards.length < 2) {\n    return cards;\n  }\n  return [{\n    type: \"grid\",\n    square: false,\n    columns: 1,\n    cards: cards\n  }];\n};\nvar computeDefaultViewStates = function computeDefaultViewStates(entities, entityEntries) {\n  var states = {};\n  var hiddenEntities = new Set(Object.values(entityEntries).filter(function (entry) {\n    return entry.entity_category || entry.platform && HIDE_PLATFORM.has(entry.platform) || entry.hidden;\n  }).map(function (entry) {\n    return entry.entity_id;\n  }));\n  for (var _i3 = 0, _Object$keys = Object.keys(entities); _i3 < _Object$keys.length; _i3++) {\n    var entityId = _Object$keys[_i3];\n    var stateObj = entities[entityId];\n    if (!HIDE_DOMAIN.has(computeStateDomain(stateObj)) && !hiddenEntities.has(stateObj.entity_id)) {\n      states[entityId] = entities[entityId];\n    }\n  }\n  return states;\n};\nexport var generateViewConfig = function generateViewConfig(localize, path, title, icon, entities) {\n  var ungroupedEntitites = {};\n\n  // Organize ungrouped entities in ungrouped things\n  for (var _i4 = 0, _Object$keys2 = Object.keys(entities); _i4 < _Object$keys2.length; _i4++) {\n    var entityId = _Object$keys2[_i4];\n    var state = entities[entityId];\n    var _domain2 = computeStateDomain(state);\n    if (!(_domain2 in ungroupedEntitites)) {\n      ungroupedEntitites[_domain2] = [];\n    }\n    ungroupedEntitites[_domain2].push(state.entity_id);\n  }\n  var cards = [];\n  if (\"person\" in ungroupedEntitites) {\n    var personCards = [];\n    if (ungroupedEntitites.person.length === 1) {\n      cards.push({\n        type: \"entities\",\n        entities: ungroupedEntitites.person\n      });\n    } else {\n      var backgroundColor;\n      var foregroundColor = \"\";\n      var _iterator2 = _createForOfIteratorHelper(ungroupedEntitites.person),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var personEntityId = _step2.value;\n          var stateObj = entities[personEntityId];\n          var image = stateObj.attributes.entity_picture;\n          if (!image) {\n            if (backgroundColor === undefined) {\n              var computedStyle = getComputedStyle(document.body);\n              backgroundColor = encodeURIComponent(computedStyle.getPropertyValue(\"--light-primary-color\").trim());\n              foregroundColor = encodeURIComponent((computedStyle.getPropertyValue(\"--text-light-primary-color\") || computedStyle.getPropertyValue(\"--primary-text-color\")).trim());\n            }\n            var initials = computeUserInitials(stateObj.attributes.friendly_name || \"\");\n            image = \"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' width='50' height='50' style='background-color:\".concat(backgroundColor, \"'%3E%3Cg%3E%3Ctext font-family='roboto' x='50%25' y='50%25' text-anchor='middle' stroke='\").concat(foregroundColor, \"' font-size='1.3em' dy='.3em'%3E\").concat(initials, \"%3C/text%3E%3C/g%3E%3C/svg%3E\");\n          }\n          personCards.push({\n            type: \"picture-entity\",\n            entity: personEntityId,\n            aspect_ratio: \"1\",\n            show_name: false,\n            image: image\n          });\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      cards.push({\n        type: \"grid\",\n        square: true,\n        columns: 3,\n        cards: personCards\n      });\n    }\n    delete ungroupedEntitites.person;\n  }\n\n  // Group helper entities in a single card\n  var helperEntities = [];\n  var _iterator3 = _createForOfIteratorHelper(HELPER_DOMAINS),\n    _step3;\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      var _domain4 = _step3.value;\n      if (!(_domain4 in ungroupedEntitites)) {\n        continue;\n      }\n      helperEntities.push.apply(helperEntities, _toConsumableArray(ungroupedEntitites[_domain4]));\n      delete ungroupedEntitites[_domain4];\n    }\n\n    // Prepare translations for cards\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n  var domainTranslations = {};\n  for (var _i5 = 0, _Object$keys3 = Object.keys(ungroupedEntitites); _i5 < _Object$keys3.length; _i5++) {\n    var _domain3 = _Object$keys3[_i5];\n    domainTranslations[_domain3] = domainToName(localize, _domain3);\n  }\n  if (helperEntities.length) {\n    ungroupedEntitites._helpers = helperEntities;\n    domainTranslations._helpers = localize(\"ui.panel.lovelace.strategy.original-states.helpers\");\n  }\n  Object.keys(ungroupedEntitites).sort(function (domain1, domain2) {\n    return stringCompare(domainTranslations[domain1], domainTranslations[domain2]);\n  }).forEach(function (domain) {\n    cards.push.apply(cards, _toConsumableArray(computeCards(entities, ungroupedEntitites[domain].sort(function (a, b) {\n      return stringCompare(computeStateName(entities[a]), computeStateName(entities[b]));\n    }), {\n      title: domainTranslations[domain]\n    })));\n  });\n  var view = {\n    path: path,\n    title: title,\n    cards: cards\n  };\n  if (icon) {\n    view.icon = icon;\n  }\n  return view;\n};\nexport var generateDefaultViewConfig = function generateDefaultViewConfig(areaEntries, deviceEntries, entityEntries, entities, localize, energyPrefs, areasPrefs, hideEntitiesWithoutAreas, hideEnergy) {\n  var _ref, _ref2;\n  var states = computeDefaultViewStates(entities, entityEntries);\n  var path = \"default_view\";\n  var title = \"Home\";\n  var icon = undefined;\n\n  // In the case of a default view, we want to use the group order attribute\n  var groupOrders = {};\n  for (var _i6 = 0, _Object$keys4 = Object.keys(states); _i6 < _Object$keys4.length; _i6++) {\n    var entityId = _Object$keys4[_i6];\n    var stateObj = states[entityId];\n    if (stateObj.attributes.order) {\n      groupOrders[entityId] = stateObj.attributes.order;\n    }\n  }\n  var splittedByAreaDevice = splitByAreaDevice(areaEntries, deviceEntries, entityEntries, states);\n  if (areasPrefs !== null && areasPrefs !== void 0 && areasPrefs.hidden) {\n    var _iterator4 = _createForOfIteratorHelper(areasPrefs.hidden),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var area = _step4.value;\n        delete splittedByAreaDevice.areasWithEntities[area];\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }\n  if (hideEntitiesWithoutAreas) {\n    splittedByAreaDevice.devicesWithEntities = {};\n    splittedByAreaDevice.otherEntities = {};\n  }\n  var splittedByGroups = splitByGroups(splittedByAreaDevice.otherEntities);\n  splittedByGroups.groups.sort(function (gr1, gr2) {\n    return groupOrders[gr1.entity_id] - groupOrders[gr2.entity_id];\n  });\n  var groupCards = [];\n  var _iterator5 = _createForOfIteratorHelper(splittedByGroups.groups),\n    _step5;\n  try {\n    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n      var groupEntity = _step5.value;\n      groupCards.push.apply(groupCards, _toConsumableArray(computeCards(entities, groupEntity.attributes.entity_id, {\n        title: computeStateName(groupEntity),\n        show_header_toggle: groupEntity.attributes.control !== \"hidden\"\n      })));\n    }\n  } catch (err) {\n    _iterator5.e(err);\n  } finally {\n    _iterator5.f();\n  }\n  var config = generateViewConfig(localize, path, title, icon, splittedByGroups.ungrouped);\n  var areaCards = [];\n  var sortedAreas = Object.keys(splittedByAreaDevice.areasWithEntities).sort(areaCompare(areaEntries, areasPrefs === null || areasPrefs === void 0 ? void 0 : areasPrefs.order));\n  var _iterator6 = _createForOfIteratorHelper(sortedAreas),\n    _step6;\n  try {\n    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n      var _areaId2 = _step6.value;\n      var areaEntities = splittedByAreaDevice.areasWithEntities[_areaId2];\n      var _area = areaEntries[_areaId2];\n      areaCards.push.apply(areaCards, _toConsumableArray(computeCards(entities, areaEntities.map(function (entity) {\n        return entity.entity_id;\n      }), {\n        title: _area.name\n      })));\n    }\n  } catch (err) {\n    _iterator6.e(err);\n  } finally {\n    _iterator6.f();\n  }\n  var deviceCards = [];\n  var sortedDevices = Object.entries(splittedByAreaDevice.devicesWithEntities).sort(function (a, b) {\n    var deviceA = deviceEntries[a[0]];\n    var deviceB = deviceEntries[b[0]];\n    return stringCompare(deviceA.name_by_user || deviceA.name || \"\", deviceB.name_by_user || deviceB.name || \"\");\n  });\n  var _iterator7 = _createForOfIteratorHelper(sortedDevices),\n    _step7;\n  try {\n    for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n      var _step7$value = _slicedToArray(_step7.value, 2),\n        _deviceId2 = _step7$value[0],\n        deviceEntities = _step7$value[1];\n      var device = deviceEntries[_deviceId2];\n      deviceCards.push.apply(deviceCards, _toConsumableArray(computeCards(entities, deviceEntities.map(function (entity) {\n        return entity.entity_id;\n      }), {\n        title: device.name_by_user || device.name || localize(\"ui.panel.config.devices.unnamed_device\", {\n          type: localize(\"ui.panel.config.devices.type.\".concat(device.entry_type || \"device\"))\n        })\n      })));\n    }\n  } catch (err) {\n    _iterator7.e(err);\n  } finally {\n    _iterator7.f();\n  }\n  var energyCard;\n  if (energyPrefs && !hideEnergy) {\n    // Distribution card requires the grid to be configured\n    var grid = energyPrefs.energy_sources.find(function (source) {\n      return source.type === \"grid\";\n    });\n    if (grid && grid.flow_from.length > 0) {\n      energyCard = {\n        title: localize(\"ui.panel.lovelace.cards.energy.energy_distribution.title_today\"),\n        type: \"energy-distribution\",\n        link_dashboard: true\n      };\n    }\n  }\n  (_ref = config.cards).unshift.apply(_ref, areaCards.concat(groupCards, _toConsumableArray(energyCard ? [energyCard] : [])));\n  (_ref2 = config.cards).push.apply(_ref2, deviceCards);\n  return config;\n};","map":{"version":3,"names":["SENSOR_ENTITIES","computeDomain","computeStateDomain","computeStateName","splitByGroups","stripPrefixFromEntityName","stringCompare","domainToName","computeUserInitials","HELPER_DOMAINS","areaCompare","HIDE_DOMAIN","Set","HIDE_PLATFORM","splitByAreaDevice","areaEntries","deviceEntries","entityEntries","entities","allEntities","Object","assign","areasWithEntities","devicesWithEntities","_i","_Object$values","values","length","_deviceEntries$entity","entity","areaId","area_id","device_id","entity_id","push","_i2","_Object$entries","entries","_Object$entries$_i","_slicedToArray","deviceId","deviceEntities","otherEntities","computeCards","states","entityIds","entityCardOptions","renderFooterEntities","arguments","undefined","cards","entitiesConf","titlePrefix","title","toLowerCase","footerEntities","_iterator","_createForOfIteratorHelper","_step","s","n","done","entityId","value","stateObj","domain","cardConfig","type","image_entity","_states$entityId$attr","_states$entityId","_states$entityId2","features","attributes","hvac_modes","show_forecast","conf","show_icon","show_name","name","entityConf","err","e","f","sort","a","b","entityIdA","entityIdB","categoryA","includes","categoryB","card","footer","unshift","square","columns","computeDefaultViewStates","hiddenEntities","filter","entry","entity_category","platform","has","hidden","map","_i3","_Object$keys","keys","generateViewConfig","localize","path","icon","ungroupedEntitites","_i4","_Object$keys2","state","personCards","person","backgroundColor","foregroundColor","_iterator2","_step2","personEntityId","image","entity_picture","computedStyle","getComputedStyle","document","body","encodeURIComponent","getPropertyValue","trim","initials","friendly_name","concat","aspect_ratio","helperEntities","_iterator3","_step3","apply","_toConsumableArray","domainTranslations","_i5","_Object$keys3","_helpers","domain1","domain2","forEach","view","generateDefaultViewConfig","energyPrefs","areasPrefs","hideEntitiesWithoutAreas","hideEnergy","_ref","_ref2","groupOrders","_i6","_Object$keys4","order","splittedByAreaDevice","_iterator4","_step4","area","splittedByGroups","groups","gr1","gr2","groupCards","_iterator5","_step5","groupEntity","show_header_toggle","control","config","ungrouped","areaCards","sortedAreas","_iterator6","_step6","areaEntities","deviceCards","sortedDevices","deviceA","deviceB","name_by_user","_iterator7","_step7","_step7$value","device","entry_type","energyCard","grid","energy_sources","find","source","flow_from","link_dashboard"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/lovelace/common/generate-lovelace-config.ts"],"sourcesContent":["import { HassEntities, HassEntity } from \"home-assistant-js-websocket\";\nimport { SENSOR_ENTITIES } from \"../../../common/const\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { computeStateDomain } from \"../../../common/entity/compute_state_domain\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { splitByGroups } from \"../../../common/entity/split_by_groups\";\nimport { stripPrefixFromEntityName } from \"../../../common/entity/strip_prefix_from_entity_name\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport { LocalizeFunc } from \"../../../common/translations/localize\";\nimport type { AreaFilterValue } from \"../../../components/ha-area-filter\";\nimport {\n  EnergyPreferences,\n  GridSourceTypeEnergyPreference,\n} from \"../../../data/energy\";\nimport { domainToName } from \"../../../data/integration\";\nimport { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport { LovelaceViewConfig } from \"../../../data/lovelace/config/view\";\nimport { computeUserInitials } from \"../../../data/user\";\nimport { HomeAssistant } from \"../../../types\";\nimport { HELPER_DOMAINS } from \"../../config/helpers/const\";\nimport {\n  AlarmPanelCardConfig,\n  EntitiesCardConfig,\n  HumidifierCardConfig,\n  PictureCardConfig,\n  PictureEntityCardConfig,\n  ThermostatCardConfig,\n} from \"../cards/types\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { ButtonsHeaderFooterConfig } from \"../header-footer/types\";\nimport { areaCompare } from \"../../../data/area_registry\";\n\nconst HIDE_DOMAIN = new Set([\n  \"automation\",\n  \"configurator\",\n  \"device_tracker\",\n  \"geo_location\",\n  \"persistent_notification\",\n  \"script\",\n  \"sun\",\n  \"zone\",\n  \"event\",\n  \"tts\",\n  \"stt\",\n  \"todo\",\n]);\n\nconst HIDE_PLATFORM = new Set([\"mobile_app\"]);\n\ninterface SplittedByAreaDevice {\n  areasWithEntities: { [areaId: string]: HassEntity[] };\n  devicesWithEntities: { [deviceId: string]: HassEntity[] };\n  otherEntities: HassEntities;\n}\n\nconst splitByAreaDevice = (\n  areaEntries: HomeAssistant[\"areas\"],\n  deviceEntries: HomeAssistant[\"devices\"],\n  entityEntries: HomeAssistant[\"entities\"],\n  entities: HassEntities\n): SplittedByAreaDevice => {\n  const allEntities = { ...entities };\n  const areasWithEntities: SplittedByAreaDevice[\"areasWithEntities\"] = {};\n  const devicesWithEntities: SplittedByAreaDevice[\"devicesWithEntities\"] = {};\n\n  for (const entity of Object.values(entityEntries)) {\n    const areaId =\n      entity.area_id ||\n      (entity.device_id && deviceEntries[entity.device_id]?.area_id);\n    if (areaId && areaId in areaEntries && entity.entity_id in allEntities) {\n      if (!(areaId in areasWithEntities)) {\n        areasWithEntities[areaId] = [];\n      }\n      areasWithEntities[areaId].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    } else if (\n      entity.device_id &&\n      entity.device_id in deviceEntries &&\n      entity.entity_id in allEntities\n    ) {\n      if (!(entity.device_id in devicesWithEntities)) {\n        devicesWithEntities[entity.device_id] = [];\n      }\n      devicesWithEntities[entity.device_id].push(allEntities[entity.entity_id]);\n      delete allEntities[entity.entity_id];\n    }\n  }\n  for (const [deviceId, deviceEntities] of Object.entries(\n    devicesWithEntities\n  )) {\n    if (deviceEntities.length === 1) {\n      allEntities[deviceEntities[0].entity_id] = deviceEntities[0];\n      delete devicesWithEntities[deviceId];\n    }\n  }\n  return {\n    areasWithEntities,\n    devicesWithEntities,\n    otherEntities: allEntities,\n  };\n};\n\nexport const computeCards = (\n  states: HassEntities,\n  entityIds: string[],\n  entityCardOptions: Partial<EntitiesCardConfig>,\n  renderFooterEntities = true\n): LovelaceCardConfig[] => {\n  const cards: LovelaceCardConfig[] = [];\n\n  // For entity card\n  const entitiesConf: Array<string | EntityConfig> = [];\n\n  const titlePrefix = entityCardOptions.title\n    ? entityCardOptions.title.toLowerCase()\n    : undefined;\n\n  const footerEntities: ButtonsHeaderFooterConfig[\"entities\"] = [];\n\n  for (const entityId of entityIds) {\n    const stateObj = states[entityId];\n    const domain = computeDomain(entityId);\n\n    if (domain === \"alarm_control_panel\") {\n      const cardConfig: AlarmPanelCardConfig = {\n        type: \"alarm-panel\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"camera\") {\n      const cardConfig: PictureEntityCardConfig = {\n        type: \"picture-entity\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"image\") {\n      const cardConfig: PictureCardConfig = {\n        type: \"picture\",\n        image_entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"climate\") {\n      const cardConfig: ThermostatCardConfig = {\n        type: \"thermostat\",\n        entity: entityId,\n        features:\n          (states[entityId]?.attributes?.hvac_modes?.length ?? 0) > 1\n            ? [\n                {\n                  type: \"climate-hvac-modes\",\n                  hvac_modes: states[entityId]?.attributes?.hvac_modes,\n                },\n              ]\n            : undefined,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"humidifier\") {\n      const cardConfig: HumidifierCardConfig = {\n        type: \"humidifier\",\n        entity: entityId,\n        features: [\n          {\n            type: \"humidifier-toggle\",\n          },\n        ],\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"media_player\") {\n      const cardConfig = {\n        type: \"media-control\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"plant\") {\n      const cardConfig = {\n        type: \"plant-status\",\n        entity: entityId,\n      };\n      cards.push(cardConfig);\n    } else if (domain === \"weather\") {\n      const cardConfig = {\n        type: \"weather-forecast\",\n        entity: entityId,\n        show_forecast: false,\n      };\n      cards.push(cardConfig);\n    } else if (\n      renderFooterEntities &&\n      (domain === \"scene\" || domain === \"script\")\n    ) {\n      const conf: (typeof footerEntities)[0] = {\n        entity: entityId,\n        show_icon: true,\n        show_name: true,\n      };\n      let name: string | undefined;\n      if (\n        titlePrefix &&\n        stateObj &&\n        // eslint-disable-next-line no-cond-assign\n        (name = stripPrefixFromEntityName(\n          computeStateName(stateObj),\n          titlePrefix\n        ))\n      ) {\n        conf.name = name;\n      }\n      footerEntities.push(conf);\n    } else {\n      let name: string | undefined;\n      const entityConf =\n        titlePrefix &&\n        stateObj &&\n        // eslint-disable-next-line no-cond-assign\n        (name = stripPrefixFromEntityName(\n          computeStateName(stateObj),\n          titlePrefix\n        ))\n          ? {\n              entity: entityId,\n              name,\n            }\n          : entityId;\n\n      entitiesConf.push(entityConf);\n    }\n  }\n\n  entitiesConf.sort((a, b) => {\n    const entityIdA = typeof a === \"string\" ? a : a.entity;\n    const entityIdB = typeof b === \"string\" ? b : b.entity;\n\n    const categoryA = SENSOR_ENTITIES.includes(computeDomain(entityIdA))\n      ? \"sensor\"\n      : \"control\";\n    const categoryB = SENSOR_ENTITIES.includes(computeDomain(entityIdB))\n      ? \"sensor\"\n      : \"control\";\n\n    if (categoryA !== categoryB) {\n      return categoryA === \"sensor\" ? 1 : -1;\n    }\n\n    return stringCompare(\n      typeof a === \"string\"\n        ? states[a]\n          ? computeStateName(states[a])\n          : \"\"\n        : a.name || \"\",\n      typeof b === \"string\"\n        ? states[b]\n          ? computeStateName(states[b])\n          : \"\"\n        : b.name || \"\"\n    );\n  });\n\n  // If we ended up with footer entities but no normal entities,\n  // render the footer entities as normal entities.\n  if (entitiesConf.length === 0 && footerEntities.length > 0) {\n    return computeCards(states, entityIds, entityCardOptions, false);\n  }\n\n  if (entitiesConf.length > 0 || footerEntities.length > 0) {\n    const card: EntitiesCardConfig = {\n      type: \"entities\",\n      entities: entitiesConf,\n      ...entityCardOptions,\n    };\n    if (footerEntities.length > 0) {\n      card.footer = {\n        type: \"buttons\",\n        entities: footerEntities,\n      } as ButtonsHeaderFooterConfig;\n    }\n    cards.unshift(card);\n  }\n\n  if (cards.length < 2) {\n    return cards;\n  }\n\n  return [\n    {\n      type: \"grid\",\n      square: false,\n      columns: 1,\n      cards,\n    },\n  ];\n};\n\nconst computeDefaultViewStates = (\n  entities: HassEntities,\n  entityEntries: HomeAssistant[\"entities\"]\n): HassEntities => {\n  const states = {};\n  const hiddenEntities = new Set(\n    Object.values(entityEntries)\n      .filter(\n        (entry) =>\n          entry.entity_category ||\n          (entry.platform && HIDE_PLATFORM.has(entry.platform)) ||\n          entry.hidden\n      )\n      .map((entry) => entry.entity_id)\n  );\n\n  for (const entityId of Object.keys(entities)) {\n    const stateObj = entities[entityId];\n    if (\n      !HIDE_DOMAIN.has(computeStateDomain(stateObj)) &&\n      !hiddenEntities.has(stateObj.entity_id)\n    ) {\n      states[entityId] = entities[entityId];\n    }\n  }\n  return states;\n};\n\nexport const generateViewConfig = (\n  localize: LocalizeFunc,\n  path: string,\n  title: string | undefined,\n  icon: string | undefined,\n  entities: HassEntities\n): LovelaceViewConfig => {\n  const ungroupedEntitites: { [domain: string]: string[] } = {};\n\n  // Organize ungrouped entities in ungrouped things\n  for (const entityId of Object.keys(entities)) {\n    const state = entities[entityId];\n    const domain = computeStateDomain(state);\n\n    if (!(domain in ungroupedEntitites)) {\n      ungroupedEntitites[domain] = [];\n    }\n\n    ungroupedEntitites[domain].push(state.entity_id);\n  }\n\n  const cards: LovelaceCardConfig[] = [];\n\n  if (\"person\" in ungroupedEntitites) {\n    const personCards: LovelaceCardConfig[] = [];\n\n    if (ungroupedEntitites.person.length === 1) {\n      cards.push({\n        type: \"entities\",\n        entities: ungroupedEntitites.person,\n      });\n    } else {\n      let backgroundColor: string | undefined;\n      let foregroundColor = \"\";\n\n      for (const personEntityId of ungroupedEntitites.person) {\n        const stateObj = entities[personEntityId];\n\n        let image = stateObj.attributes.entity_picture;\n\n        if (!image) {\n          if (backgroundColor === undefined) {\n            const computedStyle = getComputedStyle(document.body);\n            backgroundColor = encodeURIComponent(\n              computedStyle.getPropertyValue(\"--light-primary-color\").trim()\n            );\n            foregroundColor = encodeURIComponent(\n              (\n                computedStyle.getPropertyValue(\"--text-light-primary-color\") ||\n                computedStyle.getPropertyValue(\"--primary-text-color\")\n              ).trim()\n            );\n          }\n          const initials = computeUserInitials(\n            stateObj.attributes.friendly_name || \"\"\n          );\n          image = `data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 50 50' width='50' height='50' style='background-color:${backgroundColor}'%3E%3Cg%3E%3Ctext font-family='roboto' x='50%25' y='50%25' text-anchor='middle' stroke='${foregroundColor}' font-size='1.3em' dy='.3em'%3E${initials}%3C/text%3E%3C/g%3E%3C/svg%3E`;\n        }\n\n        personCards.push({\n          type: \"picture-entity\",\n          entity: personEntityId,\n          aspect_ratio: \"1\",\n          show_name: false,\n          image,\n        });\n      }\n\n      cards.push({\n        type: \"grid\",\n        square: true,\n        columns: 3,\n        cards: personCards,\n      });\n    }\n\n    delete ungroupedEntitites.person;\n  }\n\n  // Group helper entities in a single card\n  const helperEntities: string[] = [];\n\n  for (const domain of HELPER_DOMAINS) {\n    if (!(domain in ungroupedEntitites)) {\n      continue;\n    }\n    helperEntities.push(...ungroupedEntitites[domain]);\n    delete ungroupedEntitites[domain];\n  }\n\n  // Prepare translations for cards\n  const domainTranslations: Record<string, string> = {};\n\n  for (const domain of Object.keys(ungroupedEntitites)) {\n    domainTranslations[domain] = domainToName(localize, domain);\n  }\n\n  if (helperEntities.length) {\n    ungroupedEntitites._helpers = helperEntities;\n    domainTranslations._helpers = localize(\n      \"ui.panel.lovelace.strategy.original-states.helpers\"\n    );\n  }\n\n  Object.keys(ungroupedEntitites)\n    .sort((domain1, domain2) =>\n      stringCompare(domainTranslations[domain1], domainTranslations[domain2])\n    )\n    .forEach((domain) => {\n      cards.push(\n        ...computeCards(\n          entities,\n          ungroupedEntitites[domain].sort((a, b) =>\n            stringCompare(\n              computeStateName(entities[a]),\n              computeStateName(entities[b])\n            )\n          ),\n          {\n            title: domainTranslations[domain],\n          }\n        )\n      );\n    });\n\n  const view: LovelaceViewConfig = {\n    path,\n    title,\n    cards,\n  };\n\n  if (icon) {\n    view.icon = icon;\n  }\n\n  return view;\n};\n\nexport const generateDefaultViewConfig = (\n  areaEntries: HomeAssistant[\"areas\"],\n  deviceEntries: HomeAssistant[\"devices\"],\n  entityEntries: HomeAssistant[\"entities\"],\n  entities: HassEntities,\n  localize: LocalizeFunc,\n  energyPrefs?: EnergyPreferences,\n  areasPrefs?: AreaFilterValue,\n  hideEntitiesWithoutAreas?: boolean,\n  hideEnergy?: boolean\n): LovelaceViewConfig => {\n  const states = computeDefaultViewStates(entities, entityEntries);\n  const path = \"default_view\";\n  const title = \"Home\";\n  const icon = undefined;\n\n  // In the case of a default view, we want to use the group order attribute\n  const groupOrders = {};\n  for (const entityId of Object.keys(states)) {\n    const stateObj = states[entityId];\n    if (stateObj.attributes.order) {\n      groupOrders[entityId] = stateObj.attributes.order;\n    }\n  }\n\n  const splittedByAreaDevice = splitByAreaDevice(\n    areaEntries,\n    deviceEntries,\n    entityEntries,\n    states\n  );\n\n  if (areasPrefs?.hidden) {\n    for (const area of areasPrefs.hidden) {\n      delete splittedByAreaDevice.areasWithEntities[area];\n    }\n  }\n\n  if (hideEntitiesWithoutAreas) {\n    splittedByAreaDevice.devicesWithEntities = {};\n    splittedByAreaDevice.otherEntities = {};\n  }\n\n  const splittedByGroups = splitByGroups(splittedByAreaDevice.otherEntities);\n  splittedByGroups.groups.sort(\n    (gr1, gr2) => groupOrders[gr1.entity_id] - groupOrders[gr2.entity_id]\n  );\n\n  const groupCards: LovelaceCardConfig[] = [];\n\n  for (const groupEntity of splittedByGroups.groups) {\n    groupCards.push(\n      ...computeCards(entities, groupEntity.attributes.entity_id, {\n        title: computeStateName(groupEntity),\n        show_header_toggle: groupEntity.attributes.control !== \"hidden\",\n      })\n    );\n  }\n\n  const config = generateViewConfig(\n    localize,\n    path,\n    title,\n    icon,\n    splittedByGroups.ungrouped\n  );\n\n  const areaCards: LovelaceCardConfig[] = [];\n\n  const sortedAreas = Object.keys(splittedByAreaDevice.areasWithEntities).sort(\n    areaCompare(areaEntries, areasPrefs?.order)\n  );\n\n  for (const areaId of sortedAreas) {\n    const areaEntities = splittedByAreaDevice.areasWithEntities[areaId];\n    const area = areaEntries[areaId];\n    areaCards.push(\n      ...computeCards(\n        entities,\n        areaEntities.map((entity) => entity.entity_id),\n        {\n          title: area.name,\n        }\n      )\n    );\n  }\n\n  const deviceCards: LovelaceCardConfig[] = [];\n\n  const sortedDevices = Object.entries(\n    splittedByAreaDevice.devicesWithEntities\n  ).sort((a, b) => {\n    const deviceA = deviceEntries[a[0]];\n    const deviceB = deviceEntries[b[0]];\n    return stringCompare(\n      deviceA.name_by_user || deviceA.name || \"\",\n      deviceB.name_by_user || deviceB.name || \"\"\n    );\n  });\n\n  for (const [deviceId, deviceEntities] of sortedDevices) {\n    const device = deviceEntries[deviceId];\n    deviceCards.push(\n      ...computeCards(\n        entities,\n        deviceEntities.map((entity) => entity.entity_id),\n        {\n          title:\n            device.name_by_user ||\n            device.name ||\n            localize(\"ui.panel.config.devices.unnamed_device\", {\n              type: localize(\n                `ui.panel.config.devices.type.${device.entry_type || \"device\"}`\n              ),\n            }),\n        }\n      )\n    );\n  }\n\n  let energyCard: LovelaceCardConfig | undefined;\n\n  if (energyPrefs && !hideEnergy) {\n    // Distribution card requires the grid to be configured\n    const grid = energyPrefs.energy_sources.find(\n      (source) => source.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n\n    if (grid && grid.flow_from.length > 0) {\n      energyCard = {\n        title: localize(\n          \"ui.panel.lovelace.cards.energy.energy_distribution.title_today\"\n        ),\n        type: \"energy-distribution\",\n        link_dashboard: true,\n      };\n    }\n  }\n\n  config.cards!.unshift(\n    ...areaCards,\n    ...groupCards,\n    ...(energyCard ? [energyCard] : [])\n  );\n\n  config.cards!.push(...deviceCards);\n\n  return config;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}