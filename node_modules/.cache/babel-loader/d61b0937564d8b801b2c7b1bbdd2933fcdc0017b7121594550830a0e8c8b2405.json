{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../../components/ha-textarea\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\nexport let HaTemplateCondition = _decorate([customElement(\"ha-automation-condition-template\")], function (_initialize, _LitElement) {\n  class HaTemplateCondition extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaTemplateCondition,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"condition\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"defaultConfig\",\n      value: function defaultConfig() {\n        return {\n          value_template: \"\"\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const {\n          value_template\n        } = this.condition;\n        return html`\n      <p>\n        ${this.hass.localize(\"ui.panel.config.automation.editor.conditions.type.template.value_template\")}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        .readOnly=${this.disabled}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        handleChangeEvent(this, ev);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      p {\n        margin-top: 0;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","handleChangeEvent","HaTemplateCondition","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","static","defaultConfig","value_template","render","condition","hass","localize","disabled","_valueChanged","ev","styles"],"sources":["/workspaces/frontend/src/panels/config/automation/condition/types/ha-automation-condition-template.ts"],"sourcesContent":["import { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport \"../../../../../components/ha-textarea\";\nimport type { TemplateCondition } from \"../../../../../data/automation\";\nimport type { HomeAssistant } from \"../../../../../types\";\nimport { handleChangeEvent } from \"../ha-automation-condition-row\";\n\n@customElement(\"ha-automation-condition-template\")\nexport class HaTemplateCondition extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public condition!: TemplateCondition;\n\n  @property({ type: Boolean }) public disabled = false;\n\n  public static get defaultConfig() {\n    return { value_template: \"\" };\n  }\n\n  protected render() {\n    const { value_template } = this.condition;\n    return html`\n      <p>\n        ${this.hass.localize(\n          \"ui.panel.config.automation.editor.conditions.type.template.value_template\"\n        )}\n        *\n      </p>\n      <ha-code-editor\n        .name=${\"value_template\"}\n        mode=\"jinja2\"\n        .hass=${this.hass}\n        .value=${value_template}\n        .readOnly=${this.disabled}\n        autocomplete-entities\n        @value-changed=${this._valueChanged}\n        dir=\"ltr\"\n      ></ha-code-editor>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    handleChangeEvent(this, ev);\n  }\n\n  static get styles() {\n    return css`\n      p {\n        margin-top: 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-automation-condition-template\": HaTemplateCondition;\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAEC,IAAI,EAAEC,UAAU,QAAQ,KAAK;AAC3C,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,OAAO,uCAAuC;AAG9C,SAASC,iBAAiB,QAAQ,gCAAgC;AAElE,WACaC,mBAAmB,GAAAC,SAAA,EAD/BJ,aAAa,CAAC,kCAAkC,CAAC,aAAAK,WAAA,EAAAC,WAAA;EAAlD,MACaH,mBAAmB,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA4CpD;EAAC;IAAAI,CAAA,EA5CYN,mBAAmB;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAC7BX,QAAQ,CAAC;QAAEY,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BX,QAAQ,CAAC;QAAEY,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9BX,QAAQ,CAAC;QAAEe,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAH,GAAA;MAAAC,MAAA;QAAA,OAAmB,KAAK;MAAA;IAAA;MAAAJ,IAAA;MAAAO,MAAA;MAAAJ,GAAA;MAAAC,KAAA,EAEpD,SAAAI,cAAA,EAAkC;QAChC,OAAO;UAAEC,cAAc,EAAE;QAAG,CAAC;MAC/B;IAAC;MAAAT,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAM,OAAA,EAAmB;QACjB,MAAM;UAAED;QAAe,CAAC,GAAG,IAAI,CAACE,SAAS;QACzC,OAAOxB,IAAK;AAChB;AACA,UAAU,IAAI,CAACyB,IAAI,CAACC,QAAQ,CAClB,2EACF,CAAE;AACV;AACA;AACA;AACA,gBAAgB,gBAAiB;AACjC;AACA,gBAAgB,IAAI,CAACD,IAAK;AAC1B,iBAAiBH,cAAe;AAChC,oBAAoB,IAAI,CAACK,QAAS;AAClC;AACA,yBAAyB,IAAI,CAACC,aAAc;AAC5C;AACA;AACA,KAAK;MACH;IAAC;MAAAf,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAW,cAAsBC,EAAe,EAAQ;QAC3CzB,iBAAiB,CAAC,IAAI,EAAEyB,EAAE,CAAC;MAC7B;IAAC;MAAAhB,IAAA;MAAAO,MAAA;MAAAJ,GAAA;MAAAC,KAAA,EAED,SAAAa,OAAA,EAAoB;QAClB,OAAO/B,GAAI;AACf;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GA3CsCE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}