{"ast":null,"code":"/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from '@lit/reactive-element/decorators/base.js';\nimport { ContextConsumer } from '../controllers/context-consumer.js';\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param subscribe An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext, Logger} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @consume({context: loggerContext})\n *   logger?: Logger;\n *\n *   doThing() {\n *     this.logger!.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function consume({\n  context,\n  subscribe\n}) {\n  return decorateProperty({\n    finisher: (ctor, name) => {\n      ctor.addInitializer(element => {\n        new ContextConsumer(element, {\n          context,\n          callback: value => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- have to force the property on the type\n            element[name] = value;\n          },\n          subscribe\n        });\n      });\n    }\n  });\n}","map":{"version":3,"names":["decorateProperty","ContextConsumer","consume","context","subscribe","finisher","ctor","name","addInitializer","element","callback","value"],"sources":["../../../src/lib/decorators/consume.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {ContextConsumer} from '../controllers/context-consumer.js';\nimport {Context} from '../create-context.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param subscribe An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext, Logger} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @consume({context: loggerContext})\n *   logger?: Logger;\n *\n *   doThing() {\n *     this.logger!.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function consume<ValueType>({\n  context,\n  subscribe,\n}: {\n  context: Context<unknown, ValueType>;\n  subscribe?: boolean;\n}): ConsumerDecorator<ValueType> {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      ctor.addInitializer((element: ReactiveElement): void => {\n        new ContextConsumer(element, {\n          context,\n          callback: (value: ValueType) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any -- have to force the property on the type\n            (element as any)[name] = value;\n          },\n          subscribe,\n        });\n      });\n    },\n  });\n}\n\ntype ConsumerDecorator<ValueType> = {\n  <K extends PropertyKey, Proto extends ReactiveElement>(\n    protoOrDescriptor: Proto,\n    name?: K\n  ): FieldMustMatchProvidedType<Proto, K, ValueType>;\n};\n\n// Note TypeScript requires the return type of a decorator to be `void | any`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype DecoratorReturn = void | any;\n\ntype FieldMustMatchProvidedType<Obj, Key extends PropertyKey, ProvidedType> =\n  // First we check whether the object has the property as a required field\n  Obj extends Record<Key, infer ConsumingType>\n    ? // Ok, it does, just check whether it's ok to assign the\n      // provided type to the consuming field\n      [ProvidedType] extends [ConsumingType]\n      ? DecoratorReturn\n      : {\n          message: 'provided type not assignable to consuming field';\n          provided: ProvidedType;\n          consuming: ConsumingType;\n        }\n    : // Next we check whether the object has the property as an optional field\n    Obj extends Partial<Record<Key, infer ConsumingType>>\n    ? // Check assignability again. Note that we have to include undefined\n      // here on the consuming type because it's optional.\n      [ProvidedType] extends [ConsumingType | undefined]\n      ? DecoratorReturn\n      : {\n          message: 'provided type not assignable to consuming field';\n          provided: ProvidedType;\n          consuming: ConsumingType | undefined;\n        }\n    : // Ok, the field isn't present, so either someone's using consume\n      // manually, i.e. not as a decorator (maybe don't do that! but if you do,\n      // you're on your own for your type checking, sorry), or the field is\n      // private, in which case we can't check it.\n      DecoratorReturn;\n"],"mappings":"AAAA;;;;;AAOA,SAAQA,gBAAgB,QAAO,0CAA0C;AACzE,SAAQC,eAAe,QAAO,oCAAoC;AAGlE;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,OAAM,SAAUC,OAAOA,CAAY;EACjCC,OAAO;EACPC;AAAS,CAIV;EACC,OAAOJ,gBAAgB,CAAC;IACtBK,QAAQ,EAAEA,CAACC,IAA4B,EAAEC,IAAiB,KAAI;MAC5DD,IAAI,CAACE,cAAc,CAAEC,OAAwB,IAAU;QACrD,IAAIR,eAAe,CAACQ,OAAO,EAAE;UAC3BN,OAAO;UACPO,QAAQ,EAAGC,KAAgB,IAAI;YAC7B;YACCF,OAAe,CAACF,IAAI,CAAC,GAAGI,KAAK;UAChC,CAAC;UACDP;SACD,CAAC;MACJ,CAAC,CAAC;IACJ;GACD,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}