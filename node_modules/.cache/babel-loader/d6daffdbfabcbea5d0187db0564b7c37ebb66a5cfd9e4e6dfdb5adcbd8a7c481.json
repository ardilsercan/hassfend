{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button\";\nconst mdiArrowDown = \"M11,4H13V16L18.5,10.5L19.92,11.92L12,19.84L4.08,11.92L5.5,10.5L11,16V4Z\";\nconst mdiArrowLeft = \"M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z\";\nconst mdiArrowRight = \"M4,11V13H16L10.5,18.5L11.92,19.92L19.84,12L11.92,4.08L10.5,5.5L16,11H4Z\";\nconst mdiArrowUp = \"M13,20H11V8L5.5,13.5L4.08,12.08L12,4.16L19.92,12.08L18.5,13.5L13,8V20Z\";\nconst mdiBatteryHigh = \"M16 20H8V6H16M16.67 4H15V2H9V4H7.33C6.6 4 6 4.6 6 5.33V20.67C6 21.4 6.6 22 7.33 22H16.67C17.41 22 18 21.41 18 20.67V5.33C18 4.6 17.4 4 16.67 4M15 16H9V19H15V16M15 7H9V10H15V7M15 11.5H9V14.5H15V11.5Z\";\nconst mdiFire = \"M17.66 11.2C17.43 10.9 17.15 10.64 16.89 10.38C16.22 9.78 15.46 9.35 14.82 8.72C13.33 7.26 13 4.85 13.95 3C13 3.23 12.17 3.75 11.46 4.32C8.87 6.4 7.85 10.07 9.07 13.22C9.11 13.32 9.15 13.42 9.15 13.55C9.15 13.77 9 13.97 8.8 14.05C8.57 14.15 8.33 14.09 8.14 13.93C8.08 13.88 8.04 13.83 8 13.76C6.87 12.33 6.69 10.28 7.45 8.64C5.78 10 4.87 12.3 5 14.47C5.06 14.97 5.12 15.47 5.29 15.97C5.43 16.57 5.7 17.17 6 17.7C7.08 19.43 8.95 20.67 10.96 20.92C13.1 21.19 15.39 20.8 17.03 19.32C18.86 17.66 19.5 15 18.56 12.72L18.43 12.46C18.22 12 17.66 11.2 17.66 11.2M14.5 17.5C14.22 17.74 13.76 18 13.4 18.1C12.28 18.5 11.16 17.94 10.5 17.28C11.69 17 12.4 16.12 12.61 15.23C12.78 14.43 12.46 13.77 12.33 13C12.21 12.26 12.23 11.63 12.5 10.94C12.69 11.32 12.89 11.7 13.13 12C13.9 13 15.11 13.44 15.37 14.8C15.41 14.94 15.43 15.08 15.43 15.23C15.46 16.05 15.1 16.95 14.5 17.5H14.5Z\";\nconst mdiHome = \"M10,20V14H14V20H19V12H22L12,3L2,12H5V20H10Z\";\nconst mdiLeaf = \"M17,8C8,10 5.9,16.17 3.82,21.34L5.71,22L6.66,19.7C7.14,19.87 7.64,20 8,20C19,20 22,3 22,3C21,5 14,5.25 9,6.25C4,7.25 2,11.5 2,13.5C2,15.5 3.75,17.25 3.75,17.25C7,8 17,8 17,8Z\";\nconst mdiSolarPower = \"M11.45,2V5.55L15,3.77L11.45,2M10.45,8L8,10.46L11.75,11.71L10.45,8M2,11.45L3.77,15L5.55,11.45H2M10,2H2V10C2.57,10.17 3.17,10.25 3.77,10.25C7.35,10.26 10.26,7.35 10.27,3.75C10.26,3.16 10.17,2.57 10,2M17,22V16H14L19,7V13H22L17,22Z\";\nconst mdiTransmissionTower = \"M8.28,5.45L6.5,4.55L7.76,2H16.23L17.5,4.55L15.72,5.44L15,4H9L8.28,5.45M18.62,8H14.09L13.3,5H10.7L9.91,8H5.38L4.1,10.55L5.89,11.44L6.62,10H17.38L18.1,11.45L19.89,10.56L18.62,8M17.77,22H15.7L15.46,21.1L12,15.9L8.53,21.1L8.3,22H6.23L9.12,11H11.19L10.83,12.35L12,14.1L13.16,12.35L12.81,11H14.88L17.77,22M11.4,15L10.5,13.65L9.32,18.13L11.4,15M14.68,18.12L13.5,13.64L12.6,15L14.68,18.12Z\";\nconst mdiWater = \"M12,20A6,6 0 0,1 6,14C6,10 12,3.25 12,3.25C12,3.25 18,10 18,14A6,6 0 0,1 12,20Z\";\nimport { css, html, LitElement, svg, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { formatNumber } from \"../../../../common/number/format_number\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport { energySourcesByType, getEnergyDataCollection, getEnergyGasUnit, getEnergyWaterUnit } from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { hasConfigChanged } from \"../../common/has-changed\";\nconst CIRCLE_CIRCUMFERENCE = 238.76104;\nlet HuiEnergyDistrubutionCard = _decorate([customElement(\"hui-energy-distribution-card\")], function (_initialize, _SubscribeMixin) {\n  class HuiEnergyDistrubutionCard extends _SubscribeMixin {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiEnergyDistrubutionCard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_data\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"hassSubscribeRequiredHostProps\",\n      value() {\n        return [\"_config\"];\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"hassSubscribe\",\n      value: function hassSubscribe() {\n        var _this$_config;\n        return [getEnergyDataCollection(this.hass, {\n          key: (_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.collection_key\n        }).subscribe(data => {\n          this._data = data;\n        })];\n      }\n    }, {\n      kind: \"method\",\n      key: \"getCardSize\",\n      value: function getCardSize() {\n        return 3;\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        var _this$_data;\n        return hasConfigChanged(this, changedProps) || changedProps.size > 1 || !changedProps.has(\"hass\") || !!((_this$_data = this._data) !== null && _this$_data !== void 0 && _this$_data.co2SignalEntity) && this.hass.states[this._data.co2SignalEntity] !== changedProps.get(\"hass\").states[this._data.co2SignalEntity];\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _calculateStatisticsS, _homeHighCarbonCircum;\n        if (!this._config) {\n          return nothing;\n        }\n        if (!this._data) {\n          return html`${this.hass.localize(\"ui.panel.lovelace.cards.energy.loading\")}`;\n        }\n        const prefs = this._data.prefs;\n        const types = energySourcesByType(prefs);\n\n        // The strategy only includes this card if we have a grid.\n        const hasConsumption = true;\n        const hasSolarProduction = types.solar !== undefined;\n        const hasBattery = types.battery !== undefined;\n        const hasGas = types.gas !== undefined;\n        const hasWater = types.water !== undefined;\n        const hasReturnToGrid = hasConsumption && types.grid[0].flow_to.length > 0;\n        const totalFromGrid = (_calculateStatisticsS = calculateStatisticsSumGrowth(this._data.stats, types.grid[0].flow_from.map(flow => flow.stat_energy_from))) !== null && _calculateStatisticsS !== void 0 ? _calculateStatisticsS : 0;\n        let waterUsage = null;\n        if (hasWater) {\n          var _calculateStatisticsS2;\n          waterUsage = (_calculateStatisticsS2 = calculateStatisticsSumGrowth(this._data.stats, types.water.map(source => source.stat_energy_from))) !== null && _calculateStatisticsS2 !== void 0 ? _calculateStatisticsS2 : 0;\n        }\n        let gasUsage = null;\n        if (hasGas) {\n          var _calculateStatisticsS3;\n          gasUsage = (_calculateStatisticsS3 = calculateStatisticsSumGrowth(this._data.stats, types.gas.map(source => source.stat_energy_from))) !== null && _calculateStatisticsS3 !== void 0 ? _calculateStatisticsS3 : 0;\n        }\n        let totalSolarProduction = null;\n        if (hasSolarProduction) {\n          totalSolarProduction = calculateStatisticsSumGrowth(this._data.stats, types.solar.map(source => source.stat_energy_from)) || 0;\n        }\n        let totalBatteryIn = null;\n        let totalBatteryOut = null;\n        if (hasBattery) {\n          totalBatteryIn = calculateStatisticsSumGrowth(this._data.stats, types.battery.map(source => source.stat_energy_to)) || 0;\n          totalBatteryOut = calculateStatisticsSumGrowth(this._data.stats, types.battery.map(source => source.stat_energy_from)) || 0;\n        }\n        let returnedToGrid = null;\n        if (hasReturnToGrid) {\n          returnedToGrid = calculateStatisticsSumGrowth(this._data.stats, types.grid[0].flow_to.map(flow => flow.stat_energy_to)) || 0;\n        }\n        let solarConsumption = null;\n        if (hasSolarProduction) {\n          solarConsumption = (totalSolarProduction || 0) - (returnedToGrid || 0) - (totalBatteryIn || 0);\n        }\n        let batteryFromGrid = null;\n        let batteryToGrid = null;\n        if (solarConsumption !== null && solarConsumption < 0) {\n          // What we returned to the grid and what went in to the battery is more than produced,\n          // so we have used grid energy to fill the battery\n          // or returned battery energy to the grid\n          if (hasBattery) {\n            batteryFromGrid = solarConsumption * -1;\n            if (batteryFromGrid > totalFromGrid) {\n              batteryToGrid = Math.min(0, batteryFromGrid - totalFromGrid);\n              batteryFromGrid = totalFromGrid;\n            }\n          }\n          solarConsumption = 0;\n        }\n        let solarToBattery = null;\n        if (hasSolarProduction && hasBattery) {\n          if (!batteryToGrid) {\n            batteryToGrid = Math.max(0, (returnedToGrid || 0) - (totalSolarProduction || 0) - (totalBatteryIn || 0) - (batteryFromGrid || 0));\n          }\n          solarToBattery = totalBatteryIn - (batteryFromGrid || 0);\n        } else if (!hasSolarProduction && hasBattery) {\n          batteryToGrid = returnedToGrid;\n        }\n        let batteryConsumption = null;\n        if (hasBattery) {\n          batteryConsumption = (totalBatteryOut || 0) - (batteryToGrid || 0);\n        }\n        const gridConsumption = Math.max(0, totalFromGrid - (batteryFromGrid || 0));\n        const totalHomeConsumption = Math.max(0, gridConsumption + (solarConsumption || 0) + (batteryConsumption || 0));\n        let homeSolarCircumference;\n        if (hasSolarProduction) {\n          homeSolarCircumference = CIRCLE_CIRCUMFERENCE * (solarConsumption / totalHomeConsumption);\n        }\n        let homeBatteryCircumference;\n        if (batteryConsumption) {\n          homeBatteryCircumference = CIRCLE_CIRCUMFERENCE * (batteryConsumption / totalHomeConsumption);\n        }\n        let lowCarbonEnergy;\n        let homeLowCarbonCircumference;\n        let homeHighCarbonCircumference;\n\n        // This fallback is used in the demo\n        let electricityMapUrl = \"https://app.electricitymap.org\";\n        if (this._data.co2SignalEntity && this._data.fossilEnergyConsumption) {\n          // Calculate high carbon consumption\n          const highCarbonEnergy = Object.values(this._data.fossilEnergyConsumption).reduce((sum, a) => sum + a, 0);\n          const co2State = this.hass.states[this._data.co2SignalEntity];\n          if (co2State !== null && co2State !== void 0 && co2State.attributes.country_code) {\n            electricityMapUrl += `/zone/${co2State.attributes.country_code}`;\n          }\n          if (highCarbonEnergy !== null) {\n            lowCarbonEnergy = totalFromGrid - highCarbonEnergy;\n            let highCarbonConsumption;\n            if (gridConsumption !== totalFromGrid) {\n              // Only get the part that was used for consumption and not the battery\n              highCarbonConsumption = highCarbonEnergy * (gridConsumption / totalFromGrid);\n            } else {\n              highCarbonConsumption = highCarbonEnergy;\n            }\n            homeHighCarbonCircumference = CIRCLE_CIRCUMFERENCE * (highCarbonConsumption / totalHomeConsumption);\n            homeLowCarbonCircumference = CIRCLE_CIRCUMFERENCE - (homeSolarCircumference || 0) - (homeBatteryCircumference || 0) - homeHighCarbonCircumference;\n          }\n        }\n        const totalLines = gridConsumption + (solarConsumption || 0) + (returnedToGrid ? returnedToGrid - (batteryToGrid || 0) : 0) + (solarToBattery || 0) + (batteryConsumption || 0) + (batteryFromGrid || 0) + (batteryToGrid || 0);\n        return html`\n      <ha-card .header=${this._config.title}>\n        <div class=\"card-content\">\n          ${lowCarbonEnergy !== undefined || hasSolarProduction || hasGas || hasWater ? html`<div class=\"row\">\n                ${lowCarbonEnergy === undefined ? html`<div class=\"spacer\"></div>` : html`<div class=\"circle-container low-carbon\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.low_carbon\")}</span\n                      >\n                      <a\n                        class=\"circle\"\n                        href=${electricityMapUrl}\n                        target=\"_blank\"\n                        rel=\"noopener no referrer\"\n                      >\n                        <ha-svg-icon .path=${mdiLeaf}></ha-svg-icon>\n                        ${formatNumber(lowCarbonEnergy || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                        kWh\n                      </a>\n                      <svg width=\"80\" height=\"30\">\n                        <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"30\"></line>\n                      </svg>\n                    </div>`}\n                ${hasSolarProduction ? html`<div class=\"circle-container solar\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.solar\")}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>\n                        ${formatNumber(totalSolarProduction || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                        kWh\n                      </div>\n                    </div>` : hasGas || hasWater ? html`<div class=\"spacer\"></div>` : \"\"}\n                ${hasGas ? html`<div class=\"circle-container gas\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.gas\")}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiFire}></ha-svg-icon>\n                        ${formatNumber(gasUsage || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                        ${getEnergyGasUnit(this.hass, prefs, this._data.statsMetadata) || \"m³\"}\n                      </div>\n                      <svg width=\"80\" height=\"30\">\n                        <path d=\"M40 0 v30\" id=\"gas\" />\n                        ${gasUsage ? svg`<circle\n                    r=\"1\"\n                    class=\"gas\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"2s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#gas\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n                      </svg>\n                    </div>` : hasWater ? html`<div class=\"circle-container water\">\n                        <span class=\"label\"\n                          >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.water\")}</span\n                        >\n                        <div class=\"circle\">\n                          <ha-svg-icon .path=${mdiWater}></ha-svg-icon>\n                          ${formatNumber(waterUsage || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                          ${getEnergyWaterUnit(this.hass) || \"m³\"}\n                        </div>\n                        <svg width=\"80\" height=\"30\">\n                          <path d=\"M40 0 v30\" id=\"water\" />\n                          ${waterUsage ? svg`<circle\n                r=\"1\"\n                class=\"water\"\n                vector-effect=\"non-scaling-stroke\"\n              >\n                <animateMotion\n                  dur=\"2s\"\n                  repeatCount=\"indefinite\"\n                  calcMode=\"linear\"\n                >\n                  <mpath xlink:href=\"#water\" />\n                </animateMotion>\n              </circle>` : \"\"}\n                        </svg>\n                      </div>` : html`<div class=\"spacer\"></div>`}\n              </div>` : \"\"}\n          <div class=\"row\">\n            <div class=\"circle-container grid\">\n              <div class=\"circle\">\n                <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n                ${returnedToGrid !== null ? html`<span class=\"return\">\n                      <ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowLeft}\n                      ></ha-svg-icon\n                      >${formatNumber(returnedToGrid, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                      kWh\n                    </span>` : \"\"}\n                <span class=\"consumption\">\n                  ${hasReturnToGrid ? html`<ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowRight}\n                      ></ha-svg-icon>` : \"\"}${formatNumber(totalFromGrid, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                  kWh\n                </span>\n              </div>\n              <span class=\"label\"\n                >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.grid\")}</span\n              >\n            </div>\n            <div class=\"circle-container home\">\n              <div\n                class=\"circle ${classMap({\n          border: homeSolarCircumference === undefined && homeLowCarbonCircumference === undefined\n        })}\"\n              >\n                <ha-svg-icon .path=${mdiHome}></ha-svg-icon>\n                ${formatNumber(totalHomeConsumption, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                kWh\n                ${homeSolarCircumference !== undefined || homeLowCarbonCircumference !== undefined ? html`<svg>\n                      ${homeSolarCircumference !== undefined ? svg`<circle\n                            class=\"solar\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeSolarCircumference} ${CIRCLE_CIRCUMFERENCE - homeSolarCircumference}\"\n                            shape-rendering=\"geometricPrecision\"\n                            stroke-dashoffset=\"-${CIRCLE_CIRCUMFERENCE - homeSolarCircumference}\"\n                          />` : \"\"}\n                      ${homeBatteryCircumference ? svg`<circle\n                            class=\"battery\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeBatteryCircumference} ${CIRCLE_CIRCUMFERENCE - homeBatteryCircumference}\"\n                            stroke-dashoffset=\"-${CIRCLE_CIRCUMFERENCE - homeBatteryCircumference - (homeSolarCircumference || 0)}\"\n                            shape-rendering=\"geometricPrecision\"\n                          />` : \"\"}\n                      ${homeLowCarbonCircumference ? svg`<circle\n                            class=\"low-carbon\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeLowCarbonCircumference} ${CIRCLE_CIRCUMFERENCE - homeLowCarbonCircumference}\"\n                            stroke-dashoffset=\"-${CIRCLE_CIRCUMFERENCE - homeLowCarbonCircumference - (homeBatteryCircumference || 0) - (homeSolarCircumference || 0)}\"\n                            shape-rendering=\"geometricPrecision\"\n                          />` : \"\"}\n                      <circle\n                        class=\"grid\"\n                        cx=\"40\"\n                        cy=\"40\"\n                        r=\"38\"\n                        stroke-dasharray=\"${(_homeHighCarbonCircum = homeHighCarbonCircumference) !== null && _homeHighCarbonCircum !== void 0 ? _homeHighCarbonCircum : CIRCLE_CIRCUMFERENCE - homeSolarCircumference - (homeBatteryCircumference || 0)} ${homeHighCarbonCircumference !== undefined ? CIRCLE_CIRCUMFERENCE - homeHighCarbonCircumference : homeSolarCircumference + (homeBatteryCircumference || 0)}\"\n                        stroke-dashoffset=\"0\"\n                        shape-rendering=\"geometricPrecision\"\n                      />\n                    </svg>` : \"\"}\n              </div>\n              ${hasGas && hasWater ? \"\" : html`<span class=\"label\"\n                    >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.home\")}</span\n                  >`}\n            </div>\n          </div>\n          ${hasBattery || hasGas && hasWater ? html`<div class=\"row\">\n                <div class=\"spacer\"></div>\n                ${hasBattery ? html` <div class=\"circle-container battery\">\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>\n                        <span class=\"battery-in\">\n                          <ha-svg-icon\n                            class=\"small\"\n                            .path=${mdiArrowDown}\n                          ></ha-svg-icon\n                          >${formatNumber(totalBatteryIn || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                          kWh</span\n                        >\n                        <span class=\"battery-out\">\n                          <ha-svg-icon\n                            class=\"small\"\n                            .path=${mdiArrowUp}\n                          ></ha-svg-icon\n                          >${formatNumber(totalBatteryOut || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                          kWh</span\n                        >\n                      </div>\n                      <span class=\"label\"\n                        >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.battery\")}</span\n                      >\n                    </div>` : html`<div class=\"spacer\"></div>`}\n                ${hasGas && hasWater ? html`<div class=\"circle-container water bottom\">\n                      <svg width=\"80\" height=\"30\">\n                        <path d=\"M40 30 v-30\" id=\"water\" />\n                        ${waterUsage ? svg`<circle\n                    r=\"1\"\n                    class=\"water\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"2s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#water\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n                      </svg>\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiWater}></ha-svg-icon>\n                        ${formatNumber(waterUsage || 0, this.hass.locale, {\n          maximumFractionDigits: 1\n        })}\n                        ${getEnergyWaterUnit(this.hass) || \"m³\"}\n                      </div>\n                      <span class=\"label\"\n                        >${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.water\")}</span\n                      >\n                    </div>` : html`<div class=\"spacer\"></div>`}\n              </div>` : \"\"}\n          <div\n            class=\"lines ${classMap({\n          high: hasBattery || hasGas && hasWater\n        })}\"\n          >\n            <svg\n              viewBox=\"0 0 100 100\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              preserveAspectRatio=\"xMidYMid slice\"\n            >\n              ${hasReturnToGrid && hasSolarProduction ? svg`<path\n                    id=\"return\"\n                    class=\"return\"\n                    d=\"M${hasBattery ? 45 : 47},0 v15 c0,${hasBattery ? \"35 -10,30 -30,30\" : \"40 -10,35 -30,35\"} h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path> ` : \"\"}\n              ${hasSolarProduction ? svg`<path\n                    id=\"solar\"\n                    class=\"solar\"\n                    d=\"M${hasBattery ? 55 : 53},0 v15 c0,${hasBattery ? \"35 10,30 30,30\" : \"40 10,35 30,35\"} h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>` : \"\"}\n              ${hasBattery ? svg`<path\n                    id=\"battery-house\"\n                    class=\"battery-house\"\n                    d=\"M55,100 v-15 c0,-35 10,-30 30,-30 h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  <path\n                    id=\"battery-grid\"\n                    class=${classMap({\n          \"battery-from-grid\": Boolean(batteryFromGrid),\n          \"battery-to-grid\": Boolean(batteryToGrid)\n        })}\n                    d=\"M45,100 v-15 c0,-35 -10,-30 -30,-30 h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  ` : \"\"}\n              ${hasBattery && hasSolarProduction ? svg`<path\n                    id=\"battery-solar\"\n                    class=\"battery-solar\"\n                    d=\"M50,0 V100\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>` : \"\"}\n              <path\n                class=\"grid\"\n                id=\"grid\"\n                d=\"M0,${hasBattery ? 50 : hasSolarProduction ? 56 : 53} H100\"\n                vector-effect=\"non-scaling-stroke\"\n              ></path>\n              ${returnedToGrid && hasSolarProduction ? svg`<circle\n                    r=\"1\"\n                    class=\"return\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (returnedToGrid - (batteryToGrid || 0)) / totalLines * 6}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#return\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${solarConsumption ? svg`<circle\n                    r=\"1\"\n                    class=\"solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - solarConsumption / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#solar\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${gridConsumption ? svg`<circle\n                    r=\"1\"\n                    class=\"grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - gridConsumption / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#grid\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${solarToBattery ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - solarToBattery / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-solar\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${batteryConsumption ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-house\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - batteryConsumption / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-house\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${batteryFromGrid ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-from-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - batteryFromGrid / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      keyPoints=\"1;0\" keyTimes=\"0;1\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n              ${batteryToGrid ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-to-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - batteryToGrid / totalLines * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>` : \"\"}\n            </svg>\n          </div>\n        </div>\n        ${this._config.link_dashboard ? html`\n              <div class=\"card-actions\">\n                <a href=\"/energy\"\n                  ><mwc-button>\n                    ${this.hass.localize(\"ui.panel.lovelace.cards.energy.energy_distribution.go_to_energy_dashboard\")}\n                  </mwc-button></a\n                >\n              </div>\n            ` : \"\"}\n      </ha-card>\n    `;\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return css`\n    :host {\n      --mdc-icon-size: 24px;\n    }\n    ha-card {\n      min-width: 210px;\n    }\n    .card-content {\n      position: relative;\n      direction: ltr;\n    }\n    .lines {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 146px;\n      display: flex;\n      justify-content: center;\n      padding: 0 16px 16px;\n      box-sizing: border-box;\n    }\n    .lines.high {\n      bottom: 100px;\n      height: 156px;\n    }\n    .lines svg {\n      width: calc(100% - 160px);\n      height: 100%;\n      max-width: 340px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      max-width: 500px;\n      margin: 0 auto;\n    }\n    .circle-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .circle-container.low-carbon {\n      margin-right: 4px;\n    }\n    .circle-container.solar {\n      margin: 0 4px;\n      height: 130px;\n    }\n    .circle-container.gas {\n      margin-left: 4px;\n      height: 130px;\n    }\n    .circle-container.water {\n      margin-left: 4px;\n      height: 130px;\n    }\n    .circle-container.water.bottom {\n      position: relative;\n      top: -20px;\n      margin-bottom: -20px;\n    }\n    .circle-container.battery {\n      height: 110px;\n      justify-content: flex-end;\n    }\n    .spacer {\n      width: 84px;\n    }\n    .circle {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 2px solid;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      font-size: 12px;\n      line-height: 12px;\n      position: relative;\n      text-decoration: none;\n      color: var(--primary-text-color);\n    }\n    ha-svg-icon {\n      padding-bottom: 2px;\n    }\n    ha-svg-icon.small {\n      --mdc-icon-size: 12px;\n    }\n    .label {\n      color: var(--secondary-text-color);\n      font-size: 12px;\n      opacity: 1;\n      height: 20px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 80px;\n      white-space: nowrap;\n    }\n    line,\n    path {\n      stroke: var(--primary-text-color);\n      stroke-width: 1;\n      fill: none;\n    }\n    .circle svg {\n      position: absolute;\n      fill: none;\n      stroke-width: 4px;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n    }\n    .gas path,\n    .gas circle {\n      stroke: var(--energy-gas-color);\n    }\n    circle.gas {\n      stroke-width: 4;\n      fill: var(--energy-gas-color);\n    }\n    .gas .circle {\n      border-color: var(--energy-gas-color);\n    }\n    .water path,\n    .water circle {\n      stroke: var(--energy-water-color);\n    }\n    circle.water {\n      stroke-width: 4;\n      fill: var(--energy-water-color);\n    }\n    .water .circle {\n      border-color: var(--energy-water-color);\n    }\n    .low-carbon line {\n      stroke: var(--energy-non-fossil-color);\n    }\n    .low-carbon .circle {\n      border-color: var(--energy-non-fossil-color);\n    }\n    .low-carbon ha-svg-icon {\n      color: var(--energy-non-fossil-color);\n    }\n    circle.low-carbon {\n      stroke: var(--energy-non-fossil-color);\n      fill: var(--energy-non-fossil-color);\n    }\n    .solar .circle {\n      border-color: var(--energy-solar-color);\n    }\n    circle.solar,\n    path.solar {\n      stroke: var(--energy-solar-color);\n    }\n    circle.solar {\n      stroke-width: 4;\n      fill: var(--energy-solar-color);\n    }\n    .battery .circle {\n      border-color: var(--energy-battery-in-color);\n    }\n    circle.battery,\n    path.battery {\n      stroke: var(--energy-battery-out-color);\n    }\n    path.battery-house,\n    circle.battery-house {\n      stroke: var(--energy-battery-out-color);\n    }\n    circle.battery-house {\n      stroke-width: 4;\n      fill: var(--energy-battery-out-color);\n    }\n    path.battery-solar,\n    circle.battery-solar {\n      stroke: var(--energy-battery-in-color);\n    }\n    circle.battery-solar {\n      stroke-width: 4;\n      fill: var(--energy-battery-in-color);\n    }\n    .battery-in {\n      color: var(--energy-battery-in-color);\n    }\n    .battery-out {\n      color: var(--energy-battery-out-color);\n    }\n    path.battery-from-grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    path.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    path.return,\n    circle.return,\n    circle.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    circle.return,\n    circle.battery-to-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-return-color);\n    }\n    .return {\n      color: var(--energy-grid-return-color);\n    }\n    .grid .circle {\n      border-color: var(--energy-grid-consumption-color);\n    }\n    .consumption {\n      color: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid,\n    path.grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-consumption-color);\n    }\n    .home .circle {\n      border-width: 0;\n      border-color: var(--primary-color);\n    }\n    .home .circle.border {\n      border-width: 2px;\n    }\n    .circle svg circle {\n      animation: rotate-in 0.6s ease-in;\n      transition:\n        stroke-dashoffset 0.4s,\n        stroke-dasharray 0.4s;\n      fill: none;\n    }\n    @keyframes rotate-in {\n      from {\n        stroke-dashoffset: 238.76104;\n        stroke-dasharray: 238.76104;\n      }\n    }\n    .card-actions a {\n      text-decoration: none;\n    }\n  `;\n      }\n    }]\n  };\n}, SubscribeMixin(LitElement));","map":{"version":3,"names":["mdiArrowDown","mdiArrowLeft","mdiArrowRight","mdiArrowUp","mdiBatteryHigh","mdiFire","mdiHome","mdiLeaf","mdiSolarPower","mdiTransmissionTower","mdiWater","css","html","LitElement","svg","nothing","customElement","property","state","classMap","formatNumber","energySourcesByType","getEnergyDataCollection","getEnergyGasUnit","getEnergyWaterUnit","calculateStatisticsSumGrowth","SubscribeMixin","hasConfigChanged","CIRCLE_CIRCUMFERENCE","HuiEnergyDistrubutionCard","_decorate","_initialize","_SubscribeMixin","constructor","args","F","d","kind","decorators","attribute","key","value","setConfig","config","_config","hassSubscribe","_this$_config","hass","collection_key","subscribe","data","_data","getCardSize","shouldUpdate","changedProps","_this$_data","size","has","co2SignalEntity","states","get","render","_calculateStatisticsS","_homeHighCarbonCircum","localize","prefs","types","hasConsumption","hasSolarProduction","solar","undefined","hasBattery","battery","hasGas","gas","hasWater","water","hasReturnToGrid","grid","flow_to","length","totalFromGrid","stats","flow_from","map","flow","stat_energy_from","waterUsage","_calculateStatisticsS2","source","gasUsage","_calculateStatisticsS3","totalSolarProduction","totalBatteryIn","totalBatteryOut","stat_energy_to","returnedToGrid","solarConsumption","batteryFromGrid","batteryToGrid","Math","min","solarToBattery","max","batteryConsumption","gridConsumption","totalHomeConsumption","homeSolarCircumference","homeBatteryCircumference","lowCarbonEnergy","homeLowCarbonCircumference","homeHighCarbonCircumference","electricityMapUrl","fossilEnergyConsumption","highCarbonEnergy","Object","values","reduce","sum","a","co2State","attributes","country_code","highCarbonConsumption","totalLines","title","locale","maximumFractionDigits","statsMetadata","border","high","Boolean","link_dashboard","static"],"sources":["/workspaces/frontend/src/panels/lovelace/cards/energy/hui-energy-distribution-card.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport {\n  mdiArrowDown,\n  mdiArrowLeft,\n  mdiArrowRight,\n  mdiArrowUp,\n  mdiBatteryHigh,\n  mdiFire,\n  mdiHome,\n  mdiLeaf,\n  mdiSolarPower,\n  mdiTransmissionTower,\n  mdiWater,\n} from \"@mdi/js\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, svg, nothing, PropertyValues } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { formatNumber } from \"../../../../common/number/format_number\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-svg-icon\";\nimport {\n  EnergyData,\n  energySourcesByType,\n  getEnergyDataCollection,\n  getEnergyGasUnit,\n  getEnergyWaterUnit,\n} from \"../../../../data/energy\";\nimport { calculateStatisticsSumGrowth } from \"../../../../data/recorder\";\nimport { SubscribeMixin } from \"../../../../mixins/subscribe-mixin\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCard } from \"../../types\";\nimport { EnergyDistributionCardConfig } from \"../types\";\nimport { hasConfigChanged } from \"../../common/has-changed\";\n\nconst CIRCLE_CIRCUMFERENCE = 238.76104;\n\n@customElement(\"hui-energy-distribution-card\")\nclass HuiEnergyDistrubutionCard\n  extends SubscribeMixin(LitElement)\n  implements LovelaceCard\n{\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _config?: EnergyDistributionCardConfig;\n\n  @state() private _data?: EnergyData;\n\n  protected hassSubscribeRequiredHostProps = [\"_config\"];\n\n  public setConfig(config: EnergyDistributionCardConfig): void {\n    this._config = config;\n  }\n\n  public hassSubscribe(): UnsubscribeFunc[] {\n    return [\n      getEnergyDataCollection(this.hass, {\n        key: this._config?.collection_key,\n      }).subscribe((data) => {\n        this._data = data;\n      }),\n    ];\n  }\n\n  public getCardSize(): Promise<number> | number {\n    return 3;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return (\n      hasConfigChanged(this, changedProps) ||\n      changedProps.size > 1 ||\n      !changedProps.has(\"hass\") ||\n      (!!this._data?.co2SignalEntity &&\n        this.hass.states[this._data.co2SignalEntity] !==\n          changedProps.get(\"hass\").states[this._data.co2SignalEntity])\n    );\n  }\n\n  protected render() {\n    if (!this._config) {\n      return nothing;\n    }\n\n    if (!this._data) {\n      return html`${this.hass.localize(\n        \"ui.panel.lovelace.cards.energy.loading\"\n      )}`;\n    }\n\n    const prefs = this._data.prefs;\n    const types = energySourcesByType(prefs);\n\n    // The strategy only includes this card if we have a grid.\n    const hasConsumption = true;\n\n    const hasSolarProduction = types.solar !== undefined;\n    const hasBattery = types.battery !== undefined;\n    const hasGas = types.gas !== undefined;\n    const hasWater = types.water !== undefined;\n    const hasReturnToGrid = hasConsumption && types.grid![0].flow_to.length > 0;\n\n    const totalFromGrid =\n      calculateStatisticsSumGrowth(\n        this._data.stats,\n        types.grid![0].flow_from.map((flow) => flow.stat_energy_from)\n      ) ?? 0;\n\n    let waterUsage: number | null = null;\n    if (hasWater) {\n      waterUsage =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.water!.map((source) => source.stat_energy_from)\n        ) ?? 0;\n    }\n\n    let gasUsage: number | null = null;\n    if (hasGas) {\n      gasUsage =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.gas!.map((source) => source.stat_energy_from)\n        ) ?? 0;\n    }\n\n    let totalSolarProduction: number | null = null;\n\n    if (hasSolarProduction) {\n      totalSolarProduction =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.solar!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let totalBatteryIn: number | null = null;\n    let totalBatteryOut: number | null = null;\n\n    if (hasBattery) {\n      totalBatteryIn =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_to)\n        ) || 0;\n      totalBatteryOut =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.battery!.map((source) => source.stat_energy_from)\n        ) || 0;\n    }\n\n    let returnedToGrid: number | null = null;\n\n    if (hasReturnToGrid) {\n      returnedToGrid =\n        calculateStatisticsSumGrowth(\n          this._data.stats,\n          types.grid![0].flow_to.map((flow) => flow.stat_energy_to)\n        ) || 0;\n    }\n\n    let solarConsumption: number | null = null;\n    if (hasSolarProduction) {\n      solarConsumption =\n        (totalSolarProduction || 0) -\n        (returnedToGrid || 0) -\n        (totalBatteryIn || 0);\n    }\n\n    let batteryFromGrid: null | number = null;\n    let batteryToGrid: null | number = null;\n    if (solarConsumption !== null && solarConsumption < 0) {\n      // What we returned to the grid and what went in to the battery is more than produced,\n      // so we have used grid energy to fill the battery\n      // or returned battery energy to the grid\n      if (hasBattery) {\n        batteryFromGrid = solarConsumption * -1;\n        if (batteryFromGrid > totalFromGrid) {\n          batteryToGrid = Math.min(0, batteryFromGrid - totalFromGrid);\n          batteryFromGrid = totalFromGrid;\n        }\n      }\n      solarConsumption = 0;\n    }\n\n    let solarToBattery: null | number = null;\n    if (hasSolarProduction && hasBattery) {\n      if (!batteryToGrid) {\n        batteryToGrid = Math.max(\n          0,\n          (returnedToGrid || 0) -\n            (totalSolarProduction || 0) -\n            (totalBatteryIn || 0) -\n            (batteryFromGrid || 0)\n        );\n      }\n      solarToBattery = totalBatteryIn! - (batteryFromGrid || 0);\n    } else if (!hasSolarProduction && hasBattery) {\n      batteryToGrid = returnedToGrid;\n    }\n\n    let batteryConsumption: number | null = null;\n    if (hasBattery) {\n      batteryConsumption = (totalBatteryOut || 0) - (batteryToGrid || 0);\n    }\n\n    const gridConsumption = Math.max(0, totalFromGrid - (batteryFromGrid || 0));\n\n    const totalHomeConsumption = Math.max(\n      0,\n      gridConsumption + (solarConsumption || 0) + (batteryConsumption || 0)\n    );\n\n    let homeSolarCircumference: number | undefined;\n    if (hasSolarProduction) {\n      homeSolarCircumference =\n        CIRCLE_CIRCUMFERENCE * (solarConsumption! / totalHomeConsumption);\n    }\n\n    let homeBatteryCircumference: number | undefined;\n    if (batteryConsumption) {\n      homeBatteryCircumference =\n        CIRCLE_CIRCUMFERENCE * (batteryConsumption / totalHomeConsumption);\n    }\n\n    let lowCarbonEnergy: number | undefined;\n\n    let homeLowCarbonCircumference: number | undefined;\n    let homeHighCarbonCircumference: number | undefined;\n\n    // This fallback is used in the demo\n    let electricityMapUrl = \"https://app.electricitymap.org\";\n\n    if (this._data.co2SignalEntity && this._data.fossilEnergyConsumption) {\n      // Calculate high carbon consumption\n      const highCarbonEnergy = Object.values(\n        this._data.fossilEnergyConsumption\n      ).reduce((sum, a) => sum + a, 0);\n\n      const co2State = this.hass.states[this._data.co2SignalEntity];\n\n      if (co2State?.attributes.country_code) {\n        electricityMapUrl += `/zone/${co2State.attributes.country_code}`;\n      }\n\n      if (highCarbonEnergy !== null) {\n        lowCarbonEnergy = totalFromGrid - highCarbonEnergy;\n\n        let highCarbonConsumption: number;\n        if (gridConsumption !== totalFromGrid) {\n          // Only get the part that was used for consumption and not the battery\n          highCarbonConsumption =\n            highCarbonEnergy * (gridConsumption / totalFromGrid);\n        } else {\n          highCarbonConsumption = highCarbonEnergy;\n        }\n\n        homeHighCarbonCircumference =\n          CIRCLE_CIRCUMFERENCE * (highCarbonConsumption / totalHomeConsumption);\n\n        homeLowCarbonCircumference =\n          CIRCLE_CIRCUMFERENCE -\n          (homeSolarCircumference || 0) -\n          (homeBatteryCircumference || 0) -\n          homeHighCarbonCircumference;\n      }\n    }\n\n    const totalLines =\n      gridConsumption +\n      (solarConsumption || 0) +\n      (returnedToGrid ? returnedToGrid - (batteryToGrid || 0) : 0) +\n      (solarToBattery || 0) +\n      (batteryConsumption || 0) +\n      (batteryFromGrid || 0) +\n      (batteryToGrid || 0);\n\n    return html`\n      <ha-card .header=${this._config.title}>\n        <div class=\"card-content\">\n          ${lowCarbonEnergy !== undefined ||\n          hasSolarProduction ||\n          hasGas ||\n          hasWater\n            ? html`<div class=\"row\">\n                ${lowCarbonEnergy === undefined\n                  ? html`<div class=\"spacer\"></div>`\n                  : html`<div class=\"circle-container low-carbon\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.low_carbon\"\n                        )}</span\n                      >\n                      <a\n                        class=\"circle\"\n                        href=${electricityMapUrl}\n                        target=\"_blank\"\n                        rel=\"noopener no referrer\"\n                      >\n                        <ha-svg-icon .path=${mdiLeaf}></ha-svg-icon>\n                        ${formatNumber(lowCarbonEnergy || 0, this.hass.locale, {\n                          maximumFractionDigits: 1,\n                        })}\n                        kWh\n                      </a>\n                      <svg width=\"80\" height=\"30\">\n                        <line x1=\"40\" y1=\"0\" x2=\"40\" y2=\"30\"></line>\n                      </svg>\n                    </div>`}\n                ${hasSolarProduction\n                  ? html`<div class=\"circle-container solar\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.solar\"\n                        )}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiSolarPower}></ha-svg-icon>\n                        ${formatNumber(\n                          totalSolarProduction || 0,\n                          this.hass.locale,\n                          { maximumFractionDigits: 1 }\n                        )}\n                        kWh\n                      </div>\n                    </div>`\n                  : hasGas || hasWater\n                    ? html`<div class=\"spacer\"></div>`\n                    : \"\"}\n                ${hasGas\n                  ? html`<div class=\"circle-container gas\">\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.gas\"\n                        )}</span\n                      >\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiFire}></ha-svg-icon>\n                        ${formatNumber(gasUsage || 0, this.hass.locale, {\n                          maximumFractionDigits: 1,\n                        })}\n                        ${getEnergyGasUnit(\n                          this.hass,\n                          prefs,\n                          this._data.statsMetadata\n                        ) || \"m³\"}\n                      </div>\n                      <svg width=\"80\" height=\"30\">\n                        <path d=\"M40 0 v30\" id=\"gas\" />\n                        ${gasUsage\n                          ? svg`<circle\n                    r=\"1\"\n                    class=\"gas\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"2s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#gas\" />\n                    </animateMotion>\n                  </circle>`\n                          : \"\"}\n                      </svg>\n                    </div>`\n                  : hasWater\n                    ? html`<div class=\"circle-container water\">\n                        <span class=\"label\"\n                          >${this.hass.localize(\n                            \"ui.panel.lovelace.cards.energy.energy_distribution.water\"\n                          )}</span\n                        >\n                        <div class=\"circle\">\n                          <ha-svg-icon .path=${mdiWater}></ha-svg-icon>\n                          ${formatNumber(waterUsage || 0, this.hass.locale, {\n                            maximumFractionDigits: 1,\n                          })}\n                          ${getEnergyWaterUnit(this.hass) || \"m³\"}\n                        </div>\n                        <svg width=\"80\" height=\"30\">\n                          <path d=\"M40 0 v30\" id=\"water\" />\n                          ${waterUsage\n                            ? svg`<circle\n                r=\"1\"\n                class=\"water\"\n                vector-effect=\"non-scaling-stroke\"\n              >\n                <animateMotion\n                  dur=\"2s\"\n                  repeatCount=\"indefinite\"\n                  calcMode=\"linear\"\n                >\n                  <mpath xlink:href=\"#water\" />\n                </animateMotion>\n              </circle>`\n                            : \"\"}\n                        </svg>\n                      </div>`\n                    : html`<div class=\"spacer\"></div>`}\n              </div>`\n            : \"\"}\n          <div class=\"row\">\n            <div class=\"circle-container grid\">\n              <div class=\"circle\">\n                <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n                ${returnedToGrid !== null\n                  ? html`<span class=\"return\">\n                      <ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowLeft}\n                      ></ha-svg-icon\n                      >${formatNumber(returnedToGrid, this.hass.locale, {\n                        maximumFractionDigits: 1,\n                      })}\n                      kWh\n                    </span>`\n                  : \"\"}\n                <span class=\"consumption\">\n                  ${hasReturnToGrid\n                    ? html`<ha-svg-icon\n                        class=\"small\"\n                        .path=${mdiArrowRight}\n                      ></ha-svg-icon>`\n                    : \"\"}${formatNumber(totalFromGrid, this.hass.locale, {\n                    maximumFractionDigits: 1,\n                  })}\n                  kWh\n                </span>\n              </div>\n              <span class=\"label\"\n                >${this.hass.localize(\n                  \"ui.panel.lovelace.cards.energy.energy_distribution.grid\"\n                )}</span\n              >\n            </div>\n            <div class=\"circle-container home\">\n              <div\n                class=\"circle ${classMap({\n                  border:\n                    homeSolarCircumference === undefined &&\n                    homeLowCarbonCircumference === undefined,\n                })}\"\n              >\n                <ha-svg-icon .path=${mdiHome}></ha-svg-icon>\n                ${formatNumber(totalHomeConsumption, this.hass.locale, {\n                  maximumFractionDigits: 1,\n                })}\n                kWh\n                ${homeSolarCircumference !== undefined ||\n                homeLowCarbonCircumference !== undefined\n                  ? html`<svg>\n                      ${homeSolarCircumference !== undefined\n                        ? svg`<circle\n                            class=\"solar\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeSolarCircumference} ${\n                              CIRCLE_CIRCUMFERENCE - homeSolarCircumference\n                            }\"\n                            shape-rendering=\"geometricPrecision\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE - homeSolarCircumference\n                            }\"\n                          />`\n                        : \"\"}\n                      ${homeBatteryCircumference\n                        ? svg`<circle\n                            class=\"battery\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeBatteryCircumference} ${\n                              CIRCLE_CIRCUMFERENCE - homeBatteryCircumference\n                            }\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE -\n                              homeBatteryCircumference -\n                              (homeSolarCircumference || 0)\n                            }\"\n                            shape-rendering=\"geometricPrecision\"\n                          />`\n                        : \"\"}\n                      ${homeLowCarbonCircumference\n                        ? svg`<circle\n                            class=\"low-carbon\"\n                            cx=\"40\"\n                            cy=\"40\"\n                            r=\"38\"\n                            stroke-dasharray=\"${homeLowCarbonCircumference} ${\n                              CIRCLE_CIRCUMFERENCE - homeLowCarbonCircumference\n                            }\"\n                            stroke-dashoffset=\"-${\n                              CIRCLE_CIRCUMFERENCE -\n                              homeLowCarbonCircumference -\n                              (homeBatteryCircumference || 0) -\n                              (homeSolarCircumference || 0)\n                            }\"\n                            shape-rendering=\"geometricPrecision\"\n                          />`\n                        : \"\"}\n                      <circle\n                        class=\"grid\"\n                        cx=\"40\"\n                        cy=\"40\"\n                        r=\"38\"\n                        stroke-dasharray=\"${homeHighCarbonCircumference ??\n                        CIRCLE_CIRCUMFERENCE -\n                          homeSolarCircumference! -\n                          (homeBatteryCircumference ||\n                            0)} ${homeHighCarbonCircumference !== undefined\n                          ? CIRCLE_CIRCUMFERENCE - homeHighCarbonCircumference\n                          : homeSolarCircumference! +\n                            (homeBatteryCircumference || 0)}\"\n                        stroke-dashoffset=\"0\"\n                        shape-rendering=\"geometricPrecision\"\n                      />\n                    </svg>`\n                  : \"\"}\n              </div>\n              ${hasGas && hasWater\n                ? \"\"\n                : html`<span class=\"label\"\n                    >${this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.energy_distribution.home\"\n                    )}</span\n                  >`}\n            </div>\n          </div>\n          ${hasBattery || (hasGas && hasWater)\n            ? html`<div class=\"row\">\n                <div class=\"spacer\"></div>\n                ${hasBattery\n                  ? html` <div class=\"circle-container battery\">\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiBatteryHigh}></ha-svg-icon>\n                        <span class=\"battery-in\">\n                          <ha-svg-icon\n                            class=\"small\"\n                            .path=${mdiArrowDown}\n                          ></ha-svg-icon\n                          >${formatNumber(\n                            totalBatteryIn || 0,\n                            this.hass.locale,\n                            {\n                              maximumFractionDigits: 1,\n                            }\n                          )}\n                          kWh</span\n                        >\n                        <span class=\"battery-out\">\n                          <ha-svg-icon\n                            class=\"small\"\n                            .path=${mdiArrowUp}\n                          ></ha-svg-icon\n                          >${formatNumber(\n                            totalBatteryOut || 0,\n                            this.hass.locale,\n                            {\n                              maximumFractionDigits: 1,\n                            }\n                          )}\n                          kWh</span\n                        >\n                      </div>\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.battery\"\n                        )}</span\n                      >\n                    </div>`\n                  : html`<div class=\"spacer\"></div>`}\n                ${hasGas && hasWater\n                  ? html`<div class=\"circle-container water bottom\">\n                      <svg width=\"80\" height=\"30\">\n                        <path d=\"M40 30 v-30\" id=\"water\" />\n                        ${waterUsage\n                          ? svg`<circle\n                    r=\"1\"\n                    class=\"water\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"2s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#water\" />\n                    </animateMotion>\n                  </circle>`\n                          : \"\"}\n                      </svg>\n                      <div class=\"circle\">\n                        <ha-svg-icon .path=${mdiWater}></ha-svg-icon>\n                        ${formatNumber(waterUsage || 0, this.hass.locale, {\n                          maximumFractionDigits: 1,\n                        })}\n                        ${getEnergyWaterUnit(this.hass) || \"m³\"}\n                      </div>\n                      <span class=\"label\"\n                        >${this.hass.localize(\n                          \"ui.panel.lovelace.cards.energy.energy_distribution.water\"\n                        )}</span\n                      >\n                    </div>`\n                  : html`<div class=\"spacer\"></div>`}\n              </div>`\n            : \"\"}\n          <div\n            class=\"lines ${classMap({\n              high: hasBattery || (hasGas && hasWater),\n            })}\"\n          >\n            <svg\n              viewBox=\"0 0 100 100\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              preserveAspectRatio=\"xMidYMid slice\"\n            >\n              ${hasReturnToGrid && hasSolarProduction\n                ? svg`<path\n                    id=\"return\"\n                    class=\"return\"\n                    d=\"M${hasBattery ? 45 : 47},0 v15 c0,${\n                      hasBattery ? \"35 -10,30 -30,30\" : \"40 -10,35 -30,35\"\n                    } h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path> `\n                : \"\"}\n              ${hasSolarProduction\n                ? svg`<path\n                    id=\"solar\"\n                    class=\"solar\"\n                    d=\"M${hasBattery ? 55 : 53},0 v15 c0,${\n                      hasBattery ? \"35 10,30 30,30\" : \"40 10,35 30,35\"\n                    } h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>`\n                : \"\"}\n              ${hasBattery\n                ? svg`<path\n                    id=\"battery-house\"\n                    class=\"battery-house\"\n                    d=\"M55,100 v-15 c0,-35 10,-30 30,-30 h20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  <path\n                    id=\"battery-grid\"\n                    class=${classMap({\n                      \"battery-from-grid\": Boolean(batteryFromGrid),\n                      \"battery-to-grid\": Boolean(batteryToGrid),\n                    })}\n                    d=\"M45,100 v-15 c0,-35 -10,-30 -30,-30 h-20\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>\n                  `\n                : \"\"}\n              ${hasBattery && hasSolarProduction\n                ? svg`<path\n                    id=\"battery-solar\"\n                    class=\"battery-solar\"\n                    d=\"M50,0 V100\"\n                    vector-effect=\"non-scaling-stroke\"\n                  ></path>`\n                : \"\"}\n              <path\n                class=\"grid\"\n                id=\"grid\"\n                d=\"M0,${hasBattery ? 50 : hasSolarProduction ? 56 : 53} H100\"\n                vector-effect=\"non-scaling-stroke\"\n              ></path>\n              ${returnedToGrid && hasSolarProduction\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"return\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${\n                        6 -\n                        ((returnedToGrid - (batteryToGrid || 0)) / totalLines) *\n                          6\n                      }s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#return\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${solarConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (solarConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#solar\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${gridConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (gridConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${solarToBattery\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-solar\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (solarToBattery / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-solar\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryConsumption\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-house\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryConsumption / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-house\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryFromGrid\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-from-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryFromGrid / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      keyPoints=\"1;0\" keyTimes=\"0;1\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n              ${batteryToGrid\n                ? svg`<circle\n                    r=\"1\"\n                    class=\"battery-to-grid\"\n                    vector-effect=\"non-scaling-stroke\"\n                  >\n                    <animateMotion\n                      dur=\"${6 - (batteryToGrid / totalLines) * 5}s\"\n                      repeatCount=\"indefinite\"\n                      calcMode=\"linear\"\n                    >\n                      <mpath xlink:href=\"#battery-grid\" />\n                    </animateMotion>\n                  </circle>`\n                : \"\"}\n            </svg>\n          </div>\n        </div>\n        ${this._config.link_dashboard\n          ? html`\n              <div class=\"card-actions\">\n                <a href=\"/energy\"\n                  ><mwc-button>\n                    ${this.hass.localize(\n                      \"ui.panel.lovelace.cards.energy.energy_distribution.go_to_energy_dashboard\"\n                    )}\n                  </mwc-button></a\n                >\n              </div>\n            `\n          : \"\"}\n      </ha-card>\n    `;\n  }\n\n  static styles = css`\n    :host {\n      --mdc-icon-size: 24px;\n    }\n    ha-card {\n      min-width: 210px;\n    }\n    .card-content {\n      position: relative;\n      direction: ltr;\n    }\n    .lines {\n      position: absolute;\n      bottom: 0;\n      left: 0;\n      width: 100%;\n      height: 146px;\n      display: flex;\n      justify-content: center;\n      padding: 0 16px 16px;\n      box-sizing: border-box;\n    }\n    .lines.high {\n      bottom: 100px;\n      height: 156px;\n    }\n    .lines svg {\n      width: calc(100% - 160px);\n      height: 100%;\n      max-width: 340px;\n    }\n    .row {\n      display: flex;\n      justify-content: space-between;\n      max-width: 500px;\n      margin: 0 auto;\n    }\n    .circle-container {\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n    }\n    .circle-container.low-carbon {\n      margin-right: 4px;\n    }\n    .circle-container.solar {\n      margin: 0 4px;\n      height: 130px;\n    }\n    .circle-container.gas {\n      margin-left: 4px;\n      height: 130px;\n    }\n    .circle-container.water {\n      margin-left: 4px;\n      height: 130px;\n    }\n    .circle-container.water.bottom {\n      position: relative;\n      top: -20px;\n      margin-bottom: -20px;\n    }\n    .circle-container.battery {\n      height: 110px;\n      justify-content: flex-end;\n    }\n    .spacer {\n      width: 84px;\n    }\n    .circle {\n      width: 80px;\n      height: 80px;\n      border-radius: 50%;\n      box-sizing: border-box;\n      border: 2px solid;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: center;\n      text-align: center;\n      font-size: 12px;\n      line-height: 12px;\n      position: relative;\n      text-decoration: none;\n      color: var(--primary-text-color);\n    }\n    ha-svg-icon {\n      padding-bottom: 2px;\n    }\n    ha-svg-icon.small {\n      --mdc-icon-size: 12px;\n    }\n    .label {\n      color: var(--secondary-text-color);\n      font-size: 12px;\n      opacity: 1;\n      height: 20px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n      max-width: 80px;\n      white-space: nowrap;\n    }\n    line,\n    path {\n      stroke: var(--primary-text-color);\n      stroke-width: 1;\n      fill: none;\n    }\n    .circle svg {\n      position: absolute;\n      fill: none;\n      stroke-width: 4px;\n      width: 100%;\n      height: 100%;\n      top: 0;\n      left: 0;\n    }\n    .gas path,\n    .gas circle {\n      stroke: var(--energy-gas-color);\n    }\n    circle.gas {\n      stroke-width: 4;\n      fill: var(--energy-gas-color);\n    }\n    .gas .circle {\n      border-color: var(--energy-gas-color);\n    }\n    .water path,\n    .water circle {\n      stroke: var(--energy-water-color);\n    }\n    circle.water {\n      stroke-width: 4;\n      fill: var(--energy-water-color);\n    }\n    .water .circle {\n      border-color: var(--energy-water-color);\n    }\n    .low-carbon line {\n      stroke: var(--energy-non-fossil-color);\n    }\n    .low-carbon .circle {\n      border-color: var(--energy-non-fossil-color);\n    }\n    .low-carbon ha-svg-icon {\n      color: var(--energy-non-fossil-color);\n    }\n    circle.low-carbon {\n      stroke: var(--energy-non-fossil-color);\n      fill: var(--energy-non-fossil-color);\n    }\n    .solar .circle {\n      border-color: var(--energy-solar-color);\n    }\n    circle.solar,\n    path.solar {\n      stroke: var(--energy-solar-color);\n    }\n    circle.solar {\n      stroke-width: 4;\n      fill: var(--energy-solar-color);\n    }\n    .battery .circle {\n      border-color: var(--energy-battery-in-color);\n    }\n    circle.battery,\n    path.battery {\n      stroke: var(--energy-battery-out-color);\n    }\n    path.battery-house,\n    circle.battery-house {\n      stroke: var(--energy-battery-out-color);\n    }\n    circle.battery-house {\n      stroke-width: 4;\n      fill: var(--energy-battery-out-color);\n    }\n    path.battery-solar,\n    circle.battery-solar {\n      stroke: var(--energy-battery-in-color);\n    }\n    circle.battery-solar {\n      stroke-width: 4;\n      fill: var(--energy-battery-in-color);\n    }\n    .battery-in {\n      color: var(--energy-battery-in-color);\n    }\n    .battery-out {\n      color: var(--energy-battery-out-color);\n    }\n    path.battery-from-grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    path.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    path.return,\n    circle.return,\n    circle.battery-to-grid {\n      stroke: var(--energy-grid-return-color);\n    }\n    circle.return,\n    circle.battery-to-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-return-color);\n    }\n    .return {\n      color: var(--energy-grid-return-color);\n    }\n    .grid .circle {\n      border-color: var(--energy-grid-consumption-color);\n    }\n    .consumption {\n      color: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid,\n    path.grid {\n      stroke: var(--energy-grid-consumption-color);\n    }\n    circle.grid,\n    circle.battery-from-grid {\n      stroke-width: 4;\n      fill: var(--energy-grid-consumption-color);\n    }\n    .home .circle {\n      border-width: 0;\n      border-color: var(--primary-color);\n    }\n    .home .circle.border {\n      border-width: 2px;\n    }\n    .circle svg circle {\n      animation: rotate-in 0.6s ease-in;\n      transition:\n        stroke-dashoffset 0.4s,\n        stroke-dasharray 0.4s;\n      fill: none;\n    }\n    @keyframes rotate-in {\n      from {\n        stroke-dashoffset: 238.76104;\n        stroke-dasharray: 238.76104;\n      }\n    }\n    .card-actions a {\n      text-decoration: none;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-energy-distribution-card\": HuiEnergyDistrubutionCard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}