{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"../components/ha-textfield\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport \"../components/entity/state-badge\";\nimport { isUnavailableState, UNAVAILABLE } from \"../data/entity\";\nimport { setValue } from \"../data/text\";\nlet StateCardText = _decorate([customElement(\"state-card-text\")], function (_initialize, _LitElement) {\n  class StateCardText extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: StateCardText,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <state-badge .hass=${this.hass} .stateObj=${this.stateObj}></state-badge>\n      <ha-textfield\n        .label=${computeStateName(this.stateObj)}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .value=${this.stateObj.state}\n        .minlength=${this.stateObj.attributes.min}\n        .maxlength=${this.stateObj.attributes.max}\n        .autoValidate=${this.stateObj.attributes.pattern}\n        .pattern=${this.stateObj.attributes.pattern}\n        .type=${this.stateObj.attributes.mode}\n        @change=${this._valueChanged}\n        @click=${stopPropagation}\n        placeholder=${this.hass.localize(\"ui.card.text.emtpy_value\")}\n      ></ha-textfield>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.target.value;\n\n        // Filter out invalid text states\n        if (value && isUnavailableState(value)) {\n          ev.target.value = this.stateObj.state;\n          return;\n        }\n        if (value === this.stateObj.state) {\n          return;\n        }\n        setValue(this.hass, this.stateObj.entity_id, value);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: flex;\n      }\n\n      state-badge {\n        float: left;\n        margin-top: 10px;\n      }\n\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","computeStateName","stopPropagation","isUnavailableState","UNAVAILABLE","setValue","StateCardText","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","render","hass","stateObj","state","attributes","min","max","pattern","mode","_valueChanged","localize","ev","target","entity_id","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/state-summary/state-card-text.ts"],"sourcesContent":["import \"../components/ha-textfield\";\nimport { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport \"../components/entity/state-badge\";\nimport { isUnavailableState, UNAVAILABLE } from \"../data/entity\";\nimport { TextEntity, setValue } from \"../data/text\";\nimport type { HomeAssistant } from \"../types\";\n\n@customElement(\"state-card-text\")\nclass StateCardText extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj!: TextEntity;\n\n  protected render(): TemplateResult {\n    return html`\n      <state-badge .hass=${this.hass} .stateObj=${this.stateObj}></state-badge>\n      <ha-textfield\n        .label=${computeStateName(this.stateObj)}\n        .disabled=${this.stateObj.state === UNAVAILABLE}\n        .value=${this.stateObj.state}\n        .minlength=${this.stateObj.attributes.min}\n        .maxlength=${this.stateObj.attributes.max}\n        .autoValidate=${this.stateObj.attributes.pattern}\n        .pattern=${this.stateObj.attributes.pattern}\n        .type=${this.stateObj.attributes.mode}\n        @change=${this._valueChanged}\n        @click=${stopPropagation}\n        placeholder=${this.hass.localize(\"ui.card.text.emtpy_value\")}\n      ></ha-textfield>\n    `;\n  }\n\n  private _valueChanged(ev): void {\n    const value = ev.target.value;\n\n    // Filter out invalid text states\n    if (value && isUnavailableState(value)) {\n      ev.target.value = this.stateObj.state;\n      return;\n    }\n\n    if (value === this.stateObj.state) {\n      return;\n    }\n    setValue(this.hass!, this.stateObj.entity_id, value);\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n      }\n\n      state-badge {\n        float: left;\n        margin-top: 10px;\n      }\n\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-card-text\": StateCardText;\n  }\n}\n"],"mappings":";AAAA,OAAO,4BAA4B;AACnC,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,QAAwB,KAAK;AAC3E,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SAASC,gBAAgB,QAAQ,qCAAqC;AACtE,SAASC,eAAe,QAAQ,gCAAgC;AAChE,OAAO,kCAAkC;AACzC,SAASC,kBAAkB,EAAEC,WAAW,QAAQ,gBAAgB;AAChE,SAAqBC,QAAQ,QAAQ,cAAc;AAAC,IAI9CC,aAAa,GAAAC,SAAA,EADlBR,aAAa,CAAC,iBAAiB,CAAC,aAAAS,WAAA,EAAAC,WAAA;EAAjC,MACMH,aAAa,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAuDvC;EAAC;IAAAI,CAAA,EAvDKN,aAAa;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAChBf,QAAQ,CAAC;QAAEgB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAC,UAAA,GAE9Bf,QAAQ,CAAC;QAAEgB,SAAS,EAAE;MAAM,CAAC,CAAC;MAAAC,GAAA;MAAAC,KAAA;IAAA;MAAAJ,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAE/B,SAAAC,OAAA,EAAmC;QACjC,OAAOtB,IAAK;AAChB,2BAA2B,IAAI,CAACuB,IAAK,cAAa,IAAI,CAACC,QAAS;AAChE;AACA,iBAAiBpB,gBAAgB,CAAC,IAAI,CAACoB,QAAQ,CAAE;AACjD,oBAAoB,IAAI,CAACA,QAAQ,CAACC,KAAK,KAAKlB,WAAY;AACxD,iBAAiB,IAAI,CAACiB,QAAQ,CAACC,KAAM;AACrC,qBAAqB,IAAI,CAACD,QAAQ,CAACE,UAAU,CAACC,GAAI;AAClD,qBAAqB,IAAI,CAACH,QAAQ,CAACE,UAAU,CAACE,GAAI;AAClD,wBAAwB,IAAI,CAACJ,QAAQ,CAACE,UAAU,CAACG,OAAQ;AACzD,mBAAmB,IAAI,CAACL,QAAQ,CAACE,UAAU,CAACG,OAAQ;AACpD,gBAAgB,IAAI,CAACL,QAAQ,CAACE,UAAU,CAACI,IAAK;AAC9C,kBAAkB,IAAI,CAACC,aAAc;AACrC,iBAAiB1B,eAAgB;AACjC,sBAAsB,IAAI,CAACkB,IAAI,CAACS,QAAQ,CAAC,0BAA0B,CAAE;AACrE;AACA,KAAK;MACH;IAAC;MAAAf,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAU,cAAsBE,EAAE,EAAQ;QAC9B,MAAMZ,KAAK,GAAGY,EAAE,CAACC,MAAM,CAACb,KAAK;;QAE7B;QACA,IAAIA,KAAK,IAAIf,kBAAkB,CAACe,KAAK,CAAC,EAAE;UACtCY,EAAE,CAACC,MAAM,CAACb,KAAK,GAAG,IAAI,CAACG,QAAQ,CAACC,KAAK;UACrC;QACF;QAEA,IAAIJ,KAAK,KAAK,IAAI,CAACG,QAAQ,CAACC,KAAK,EAAE;UACjC;QACF;QACAjB,QAAQ,CAAC,IAAI,CAACe,IAAI,EAAG,IAAI,CAACC,QAAQ,CAACW,SAAS,EAAEd,KAAK,CAAC;MACtD;IAAC;MAAAJ,IAAA;MAAAmB,MAAA;MAAAhB,GAAA;MAAAC,KAAA,EAED,SAAAgB,OAAA,EAAoC;QAClC,OAAOtC,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAtDyBE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}