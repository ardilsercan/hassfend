{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport var ResizeController = /*#__PURE__*/function () {\n  function ResizeController(host, _ref) {\n    var _this = this;\n    var target = _ref.target,\n      config = _ref.config,\n      callback = _ref.callback,\n      skipInitial = _ref.skipInitial;\n    _classCallCheck(this, ResizeController);\n    this._targets = new Set();\n    this._skipInitial = false;\n    /**\n     * Flag used to help manage calling the `callback` when observe is called\n     * in addition to when a mutation occurs. This is done to help setup initial\n     * state and is performed async by requesting a host update and calling\n     * `handleChanges` once by checking and then resetting this flag.\n     */\n    this._unobservedUpdate = false;\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target !== null && target !== void 0 ? target : host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial !== null && skipInitial !== void 0 ? skipInitial : this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\"ResizeController error: browser does not support ResizeObserver.\");\n      return;\n    }\n    this._observer = new ResizeObserver(function (entries) {\n      _this.handleChanges(entries);\n      _this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  _createClass(ResizeController, [{\n    key: \"handleChanges\",\n    value: function handleChanges(entries) {\n      var _this$callback;\n      this.value = (_this$callback = this.callback) === null || _this$callback === void 0 ? void 0 : _this$callback.call(this, entries, this._observer);\n    }\n  }, {\n    key: \"hostConnected\",\n    value: function hostConnected() {\n      var _iterator = _createForOfIteratorHelper(this._targets),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var target = _step.value;\n          this.observe(target);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"hostDisconnected\",\n    value: function hostDisconnected() {\n      this.disconnect();\n    }\n  }, {\n    key: \"hostUpdated\",\n    value: function () {\n      var _hostUpdated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              // Handle initial state as a set of 0 changes. This helps setup initial\n              // state and promotes UI = f(state) since ideally the callback does not\n              // rely on changes.\n              if (!this._skipInitial && this._unobservedUpdate) {\n                this.handleChanges([]);\n              }\n              this._unobservedUpdate = false;\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function hostUpdated() {\n        return _hostUpdated.apply(this, arguments);\n      }\n      return hostUpdated;\n    }()\n    /**\n     * Observe the target element. The controller's `target` is automatically\n     * observed when the host connects.\n     * @param target Element to observe\n     */\n  }, {\n    key: \"observe\",\n    value: function observe(target) {\n      this._targets.add(target);\n      this._observer.observe(target, this._config);\n      this._unobservedUpdate = true;\n      this._host.requestUpdate();\n    }\n    /**\n     * Unobserve the target element.\n     * @param target Element to unobserve\n     */\n  }, {\n    key: \"unobserve\",\n    value: function unobserve(target) {\n      this._targets.delete(target);\n      this._observer.unobserve(target);\n    }\n    /**\n     * Disconnects the observer. This is done automatically when the host\n     * disconnects.\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      this._observer.disconnect();\n    }\n  }]);\n  return ResizeController;\n}();","map":{"version":3,"names":["ResizeController","host","_ref","_this","target","config","callback","skipInitial","_classCallCheck","_targets","Set","_skipInitial","_unobservedUpdate","_host","add","_config","window","ResizeObserver","console","warn","_observer","entries","handleChanges","requestUpdate","addController","_createClass","key","value","_this$callback","call","hostConnected","_iterator","_createForOfIteratorHelper","_step","s","n","done","observe","err","e","f","hostDisconnected","disconnect","_hostUpdated","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","stop","hostUpdated","apply","arguments","unobserve","delete"],"sources":["../src/resize-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a ResizeController.\n */\nexport type ResizeValueCallback<T = unknown> = (\n  ...args: Parameters<ResizeObserverCallback>\n) => T;\n\n/**\n * The config options for a ResizeController.\n */\nexport interface ResizeControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the ResizeController.\n   */\n  config?: ResizeObserverOptions;\n  /**\n   * The element to observe. In addition to configuring the target here,\n   * the `observe` method can be called to observe additional targets. When not\n   * specified, the target defaults to the `host`. If set to `null`, no target\n   * is automatically observed. Only the configured target will be re-observed\n   * if the host connects again after unobserving via disconnection.\n   */\n  target?: Element | null;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _targets = new Set<Element>();\n  private _config?: ResizeObserverOptions;\n  private _observer!: ResizeObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost & Element,\n    {target, config, callback, skipInitial}: ResizeControllerConfig<T>\n  ) {\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target ?? host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\n        `ResizeController error: browser does not support ResizeObserver.`\n      );\n      return;\n    }\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(entries: ResizeObserverEntry[]) {\n    this.value = this.callback?.(entries, this._observer);\n  }\n\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target: Element) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target: Element) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}