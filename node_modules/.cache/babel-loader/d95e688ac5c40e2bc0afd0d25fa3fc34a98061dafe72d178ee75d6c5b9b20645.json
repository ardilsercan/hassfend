{"ast":null,"code":"import { darkStyles, derivedStyles } from \"../../resources/styles-data\";\nimport { hex2rgb, lab2hex, lab2rgb, rgb2hex, rgb2lab } from \"../color/convert-color\";\nimport { hexBlend } from \"../color/hex\";\nimport { labBrighten, labDarken } from \"../color/lab\";\nimport { rgbContrast } from \"../color/rgb\";\nlet PROCESSED_THEMES = {};\n\n/**\n * Apply a theme to an element by setting the CSS variables on it.\n *\n * element: Element to apply theme on.\n * themes: HASS theme information (e.g. active dark mode and globally active theme name).\n * selectedTheme: Selected theme (used to override the globally active theme for this element).\n * themeSettings: Additional settings such as selected colors.\n */\nexport const applyThemesOnElement = (element, themes, selectedTheme, themeSettings, main) => {\n  var _element$__themes2, _element$__themes3;\n  // If there is no explicitly desired theme provided, and the element is the main element we automatically\n  // use the active one from `themes`.\n  const themeToApply = selectedTheme || (main ? themes.theme : undefined);\n\n  // If there is no explicitly desired dark mode provided, we automatically\n  // use the active one from `themes`.\n  const darkMode = (themeSettings === null || themeSettings === void 0 ? void 0 : themeSettings.dark) !== undefined ? themeSettings.dark : (themes === null || themes === void 0 ? void 0 : themes.darkMode) || false;\n  let cacheKey = themeToApply;\n  let themeRules = {};\n  if (themeToApply && darkMode) {\n    cacheKey = `${cacheKey}__dark`;\n    themeRules = {\n      ...darkStyles\n    };\n  }\n  if (themeToApply === \"default\") {\n    var _element$__themes;\n    // Determine the primary and accent colors from the current settings.\n    // Fallbacks are implicitly the HA default blue and orange or the\n    // derived \"darkStyles\" values, depending on the light vs dark mode.\n    const primaryColor = themeSettings === null || themeSettings === void 0 ? void 0 : themeSettings.primaryColor;\n    const accentColor = themeSettings === null || themeSettings === void 0 ? void 0 : themeSettings.accentColor;\n    if (darkMode && primaryColor) {\n      themeRules[\"app-header-background-color\"] = hexBlend(primaryColor, \"#121212\", 8);\n    }\n    if (primaryColor) {\n      cacheKey = `${cacheKey}__primary_${primaryColor}`;\n      const rgbPrimaryColor = hex2rgb(primaryColor);\n      const labPrimaryColor = rgb2lab(rgbPrimaryColor);\n      themeRules[\"primary-color\"] = primaryColor;\n      const rgbLightPrimaryColor = lab2rgb(labBrighten(labPrimaryColor));\n      themeRules[\"light-primary-color\"] = rgb2hex(rgbLightPrimaryColor);\n      themeRules[\"dark-primary-color\"] = lab2hex(labDarken(labPrimaryColor));\n      themeRules[\"text-primary-color\"] = rgbContrast(rgbPrimaryColor, [33, 33, 33]) < 6 ? \"#fff\" : \"#212121\";\n      themeRules[\"text-light-primary-color\"] = rgbContrast(rgbLightPrimaryColor, [33, 33, 33]) < 6 ? \"#fff\" : \"#212121\";\n      themeRules[\"state-icon-color\"] = themeRules[\"dark-primary-color\"];\n    }\n    if (accentColor) {\n      cacheKey = `${cacheKey}__accent_${accentColor}`;\n      themeRules[\"accent-color\"] = accentColor;\n      const rgbAccentColor = hex2rgb(accentColor);\n      themeRules[\"text-accent-color\"] = rgbContrast(rgbAccentColor, [33, 33, 33]) < 6 ? \"#fff\" : \"#212121\";\n    }\n\n    // Nothing was changed\n    if (((_element$__themes = element.__themes) === null || _element$__themes === void 0 ? void 0 : _element$__themes.cacheKey) === cacheKey) {\n      return;\n    }\n  }\n\n  // Custom theme logic (not relevant for default theme, since it would override\n  // the derived calculations from above)\n  if (themeToApply && themeToApply !== \"default\" && themes.themes[themeToApply]) {\n    // Apply theme vars that are relevant for all modes (but extract the \"modes\" section first)\n    const {\n      modes,\n      ...baseThemeRules\n    } = themes.themes[themeToApply];\n    themeRules = {\n      ...themeRules,\n      ...baseThemeRules\n    };\n\n    // Apply theme vars for the specific mode if available\n    if (modes) {\n      if (darkMode) {\n        themeRules = {\n          ...themeRules,\n          ...modes.dark\n        };\n      } else {\n        themeRules = {\n          ...themeRules,\n          ...modes.light\n        };\n      }\n    }\n  }\n  if (!((_element$__themes2 = element.__themes) !== null && _element$__themes2 !== void 0 && _element$__themes2.keys) && !Object.keys(themeRules).length) {\n    // No styles to reset, and no styles to set\n    return;\n  }\n  const newTheme = Object.keys(themeRules).length && cacheKey ? PROCESSED_THEMES[cacheKey] || processTheme(cacheKey, themeRules) : undefined;\n\n  // Add previous set keys to reset them, and new theme\n  const styles = {\n    ...((_element$__themes3 = element.__themes) === null || _element$__themes3 === void 0 ? void 0 : _element$__themes3.keys),\n    ...(newTheme === null || newTheme === void 0 ? void 0 : newTheme.styles)\n  };\n  element.__themes = {\n    cacheKey,\n    keys: newTheme === null || newTheme === void 0 ? void 0 : newTheme.keys\n  };\n\n  // Set and/or reset styles\n  if (element.updateStyles) {\n    // Use updateStyles() method of Polymer elements\n    element.updateStyles(styles);\n  } else if (window.ShadyCSS) {\n    // Use ShadyCSS if available\n    window.ShadyCSS.styleSubtree( /** @type {!HTMLElement} */element, styles);\n  } else {\n    for (const s in styles) {\n      if (s === null) {\n        element.style.removeProperty(s);\n      } else {\n        element.style.setProperty(s, styles[s]);\n      }\n    }\n  }\n};\nconst processTheme = (cacheKey, theme) => {\n  if (!theme || !Object.keys(theme).length) {\n    return undefined;\n  }\n  const combinedTheme = {\n    ...derivedStyles,\n    ...theme\n  };\n  const styles = {};\n  const keys = {};\n  for (const key of Object.keys(combinedTheme)) {\n    const prefixedKey = `--${key}`;\n    const value = String(combinedTheme[key]);\n    styles[prefixedKey] = value;\n    keys[prefixedKey] = \"\";\n\n    // Try to create a rgb value for this key if it is not a var\n    if (!value.startsWith(\"#\")) {\n      // Can't convert non hex value\n      continue;\n    }\n    const rgbKey = `rgb-${key}`;\n    if (combinedTheme[rgbKey] !== undefined) {\n      // Theme has it's own rgb value\n      continue;\n    }\n    try {\n      const rgbValue = hex2rgb(value).join(\",\");\n      const prefixedRgbKey = `--${rgbKey}`;\n      styles[prefixedRgbKey] = rgbValue;\n      keys[prefixedRgbKey] = \"\";\n    } catch (err) {\n      continue;\n    }\n  }\n  PROCESSED_THEMES[cacheKey] = {\n    styles,\n    keys\n  };\n  return {\n    styles,\n    keys\n  };\n};\nexport const invalidateThemeCache = () => {\n  PROCESSED_THEMES = {};\n};","map":{"version":3,"names":["darkStyles","derivedStyles","hex2rgb","lab2hex","lab2rgb","rgb2hex","rgb2lab","hexBlend","labBrighten","labDarken","rgbContrast","PROCESSED_THEMES","applyThemesOnElement","element","themes","selectedTheme","themeSettings","main","_element$__themes2","_element$__themes3","themeToApply","theme","undefined","darkMode","dark","cacheKey","themeRules","_element$__themes","primaryColor","accentColor","rgbPrimaryColor","labPrimaryColor","rgbLightPrimaryColor","rgbAccentColor","__themes","modes","baseThemeRules","light","keys","Object","length","newTheme","processTheme","styles","updateStyles","window","ShadyCSS","styleSubtree","s","style","removeProperty","setProperty","combinedTheme","key","prefixedKey","value","String","startsWith","rgbKey","rgbValue","join","prefixedRgbKey","err","invalidateThemeCache"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/dom/apply_themes_on_element.ts"],"sourcesContent":["import { ThemeVars } from \"../../data/ws-themes\";\nimport { darkStyles, derivedStyles } from \"../../resources/styles-data\";\nimport type { HomeAssistant } from \"../../types\";\nimport {\n  hex2rgb,\n  lab2hex,\n  lab2rgb,\n  rgb2hex,\n  rgb2lab,\n} from \"../color/convert-color\";\nimport { hexBlend } from \"../color/hex\";\nimport { labBrighten, labDarken } from \"../color/lab\";\nimport { rgbContrast } from \"../color/rgb\";\n\ninterface ProcessedTheme {\n  keys: { [key: string]: \"\" };\n  styles: Record<string, string>;\n}\n\nlet PROCESSED_THEMES: Record<string, ProcessedTheme> = {};\n\n/**\n * Apply a theme to an element by setting the CSS variables on it.\n *\n * element: Element to apply theme on.\n * themes: HASS theme information (e.g. active dark mode and globally active theme name).\n * selectedTheme: Selected theme (used to override the globally active theme for this element).\n * themeSettings: Additional settings such as selected colors.\n */\nexport const applyThemesOnElement = (\n  element,\n  themes: HomeAssistant[\"themes\"],\n  selectedTheme?: string,\n  themeSettings?: Partial<HomeAssistant[\"selectedTheme\"]>,\n  main?: boolean\n) => {\n  // If there is no explicitly desired theme provided, and the element is the main element we automatically\n  // use the active one from `themes`.\n  const themeToApply = selectedTheme || (main ? themes.theme : undefined);\n\n  // If there is no explicitly desired dark mode provided, we automatically\n  // use the active one from `themes`.\n  const darkMode =\n    themeSettings?.dark !== undefined\n      ? themeSettings.dark\n      : themes?.darkMode || false;\n\n  let cacheKey = themeToApply;\n  let themeRules: Partial<ThemeVars> = {};\n\n  if (themeToApply && darkMode) {\n    cacheKey = `${cacheKey}__dark`;\n    themeRules = { ...darkStyles };\n  }\n\n  if (themeToApply === \"default\") {\n    // Determine the primary and accent colors from the current settings.\n    // Fallbacks are implicitly the HA default blue and orange or the\n    // derived \"darkStyles\" values, depending on the light vs dark mode.\n    const primaryColor = themeSettings?.primaryColor;\n    const accentColor = themeSettings?.accentColor;\n\n    if (darkMode && primaryColor) {\n      themeRules[\"app-header-background-color\"] = hexBlend(\n        primaryColor,\n        \"#121212\",\n        8\n      );\n    }\n\n    if (primaryColor) {\n      cacheKey = `${cacheKey}__primary_${primaryColor}`;\n      const rgbPrimaryColor = hex2rgb(primaryColor);\n      const labPrimaryColor = rgb2lab(rgbPrimaryColor);\n      themeRules[\"primary-color\"] = primaryColor;\n      const rgbLightPrimaryColor = lab2rgb(labBrighten(labPrimaryColor));\n      themeRules[\"light-primary-color\"] = rgb2hex(rgbLightPrimaryColor);\n      themeRules[\"dark-primary-color\"] = lab2hex(labDarken(labPrimaryColor));\n      themeRules[\"text-primary-color\"] =\n        rgbContrast(rgbPrimaryColor, [33, 33, 33]) < 6 ? \"#fff\" : \"#212121\";\n      themeRules[\"text-light-primary-color\"] =\n        rgbContrast(rgbLightPrimaryColor, [33, 33, 33]) < 6\n          ? \"#fff\"\n          : \"#212121\";\n      themeRules[\"state-icon-color\"] = themeRules[\"dark-primary-color\"];\n    }\n    if (accentColor) {\n      cacheKey = `${cacheKey}__accent_${accentColor}`;\n      themeRules[\"accent-color\"] = accentColor;\n      const rgbAccentColor = hex2rgb(accentColor);\n      themeRules[\"text-accent-color\"] =\n        rgbContrast(rgbAccentColor, [33, 33, 33]) < 6 ? \"#fff\" : \"#212121\";\n    }\n\n    // Nothing was changed\n    if (element.__themes?.cacheKey === cacheKey) {\n      return;\n    }\n  }\n\n  // Custom theme logic (not relevant for default theme, since it would override\n  // the derived calculations from above)\n  if (\n    themeToApply &&\n    themeToApply !== \"default\" &&\n    themes.themes[themeToApply]\n  ) {\n    // Apply theme vars that are relevant for all modes (but extract the \"modes\" section first)\n    const { modes, ...baseThemeRules } = themes.themes[themeToApply];\n    themeRules = { ...themeRules, ...baseThemeRules };\n\n    // Apply theme vars for the specific mode if available\n    if (modes) {\n      if (darkMode) {\n        themeRules = { ...themeRules, ...modes.dark };\n      } else {\n        themeRules = { ...themeRules, ...modes.light };\n      }\n    }\n  }\n\n  if (!element.__themes?.keys && !Object.keys(themeRules).length) {\n    // No styles to reset, and no styles to set\n    return;\n  }\n\n  const newTheme =\n    Object.keys(themeRules).length && cacheKey\n      ? PROCESSED_THEMES[cacheKey] || processTheme(cacheKey, themeRules)\n      : undefined;\n\n  // Add previous set keys to reset them, and new theme\n  const styles = { ...element.__themes?.keys, ...newTheme?.styles };\n  element.__themes = { cacheKey, keys: newTheme?.keys };\n\n  // Set and/or reset styles\n  if (element.updateStyles) {\n    // Use updateStyles() method of Polymer elements\n    element.updateStyles(styles);\n  } else if (window.ShadyCSS) {\n    // Use ShadyCSS if available\n    window.ShadyCSS.styleSubtree(/** @type {!HTMLElement} */ element, styles);\n  } else {\n    for (const s in styles) {\n      if (s === null) {\n        element.style.removeProperty(s);\n      } else {\n        element.style.setProperty(s, styles[s]);\n      }\n    }\n  }\n};\n\nconst processTheme = (\n  cacheKey: string,\n  theme: Partial<ThemeVars>\n): ProcessedTheme | undefined => {\n  if (!theme || !Object.keys(theme).length) {\n    return undefined;\n  }\n  const combinedTheme: Partial<ThemeVars> = {\n    ...derivedStyles,\n    ...theme,\n  };\n  const styles = {};\n  const keys = {};\n  for (const key of Object.keys(combinedTheme)) {\n    const prefixedKey = `--${key}`;\n    const value = String(combinedTheme[key]);\n    styles[prefixedKey] = value;\n    keys[prefixedKey] = \"\";\n\n    // Try to create a rgb value for this key if it is not a var\n    if (!value.startsWith(\"#\")) {\n      // Can't convert non hex value\n      continue;\n    }\n\n    const rgbKey = `rgb-${key}`;\n    if (combinedTheme[rgbKey] !== undefined) {\n      // Theme has it's own rgb value\n      continue;\n    }\n    try {\n      const rgbValue = hex2rgb(value).join(\",\");\n      const prefixedRgbKey = `--${rgbKey}`;\n      styles[prefixedRgbKey] = rgbValue;\n      keys[prefixedRgbKey] = \"\";\n    } catch (err: any) {\n      continue;\n    }\n  }\n  PROCESSED_THEMES[cacheKey] = { styles, keys };\n  return { styles, keys };\n};\n\nexport const invalidateThemeCache = () => {\n  PROCESSED_THEMES = {};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}