{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport { customElement } from \"lit/decorators\";\nconst PaperTabs = customElements.get(\"paper-tabs\");\nlet subTemplate;\nexport let HaTabs = _decorate([customElement(\"ha-tabs\")], function (_initialize, _PaperTabs) {\n  class HaTabs extends _PaperTabs {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaTabs,\n    d: [{\n      kind: \"field\",\n      key: \"_firstTabWidth\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_lastTabWidth\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      key: \"_lastLeftHiddenState\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"template\",\n      value: function template() {\n        if (!subTemplate) {\n          subTemplate = PaperTabs.template.cloneNode(true);\n          const superStyle = subTemplate.content.querySelector(\"style\");\n\n          // Add \"noink\" attribute for scroll buttons to disable animation.\n          subTemplate.content.querySelectorAll(\"paper-icon-button\").forEach(arrow => {\n            arrow.setAttribute(\"noink\", \"\");\n          });\n          superStyle.appendChild(document.createTextNode(`\n          #selectionBar {\n            box-sizing: border-box;\n          }\n          .not-visible {\n            display: none;\n          }\n          paper-icon-button {\n            width: 24px;\n            height: 48px;\n            padding: 0;\n            margin: 0;\n          }\n        `));\n        }\n        return subTemplate;\n      }\n\n      // Get first and last tab's width for _affectScroll\n    }, {\n      kind: \"method\",\n      key: \"_tabChanged\",\n      value: function _tabChanged(tab, old) {\n        _get(_getPrototypeOf(HaTabs.prototype), \"_tabChanged\", this).call(this, tab, old);\n        const tabs = this.querySelectorAll(\"paper-tab:not(.hide-tab)\");\n        if (tabs.length > 0) {\n          this._firstTabWidth = tabs[0].clientWidth;\n          this._lastTabWidth = tabs[tabs.length - 1].clientWidth;\n        }\n\n        // Scroll active tab into view if needed.\n        const selected = this.querySelector(\".iron-selected\");\n        if (selected) {\n          selected.scrollIntoView();\n          this._affectScroll(0); // Ensure scroll arrows match scroll position\n        }\n      }\n\n      /**\n       * Modify _affectScroll so that when the scroll arrows appear\n       * while scrolling and the tab container shrinks we can counteract\n       * the jump in tab position so that the scroll still appears smooth.\n       */\n    }, {\n      kind: \"method\",\n      key: \"_affectScroll\",\n      value: function _affectScroll(dx) {\n        if (this._firstTabWidth === 0 || this._lastTabWidth === 0) {\n          return;\n        }\n        this.$.tabsContainer.scrollLeft += dx;\n        const scrollLeft = this.$.tabsContainer.scrollLeft;\n        this._leftHidden = scrollLeft - this._firstTabWidth < 0;\n        this._rightHidden = scrollLeft + this._lastTabWidth > this._tabContainerScrollSize;\n        if (this._lastLeftHiddenState !== this._leftHidden) {\n          this._lastLeftHiddenState = this._leftHidden;\n          this.$.tabsContainer.scrollLeft += this._leftHidden ? -23 : 23;\n        }\n      }\n    }]\n  };\n}, PaperTabs);","map":{"version":3,"names":["customElement","PaperTabs","customElements","get","subTemplate","HaTabs","_decorate","_initialize","_PaperTabs","constructor","args","F","d","kind","key","value","static","template","cloneNode","superStyle","content","querySelector","querySelectorAll","forEach","arrow","setAttribute","appendChild","document","createTextNode","_tabChanged","tab","old","_get","_getPrototypeOf","prototype","call","tabs","length","_firstTabWidth","clientWidth","_lastTabWidth","selected","scrollIntoView","_affectScroll","dx","$","tabsContainer","scrollLeft","_leftHidden","_rightHidden","_tabContainerScrollSize","_lastLeftHiddenState"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-tabs.ts"],"sourcesContent":["import type { PaperIconButtonElement } from \"@polymer/paper-icon-button/paper-icon-button\";\nimport type { PaperTabElement } from \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport type { PaperTabsElement } from \"@polymer/paper-tabs/paper-tabs\";\nimport { customElement } from \"lit/decorators\";\nimport { Constructor } from \"../types\";\n\nconst PaperTabs = customElements.get(\n  \"paper-tabs\"\n) as Constructor<PaperTabsElement>;\n\nlet subTemplate: HTMLTemplateElement;\n\n@customElement(\"ha-tabs\")\nexport class HaTabs extends PaperTabs {\n  private _firstTabWidth = 0;\n\n  private _lastTabWidth = 0;\n\n  private _lastLeftHiddenState = false;\n\n  static get template(): HTMLTemplateElement {\n    if (!subTemplate) {\n      subTemplate = (PaperTabs as any).template.cloneNode(true);\n\n      const superStyle = subTemplate.content.querySelector(\"style\");\n\n      // Add \"noink\" attribute for scroll buttons to disable animation.\n      subTemplate.content\n        .querySelectorAll(\"paper-icon-button\")\n        .forEach((arrow: PaperIconButtonElement) => {\n          arrow.setAttribute(\"noink\", \"\");\n        });\n\n      superStyle!.appendChild(\n        document.createTextNode(`\n          #selectionBar {\n            box-sizing: border-box;\n          }\n          .not-visible {\n            display: none;\n          }\n          paper-icon-button {\n            width: 24px;\n            height: 48px;\n            padding: 0;\n            margin: 0;\n          }\n        `)\n      );\n    }\n    return subTemplate;\n  }\n\n  // Get first and last tab's width for _affectScroll\n  public _tabChanged(tab: PaperTabElement, old: PaperTabElement): void {\n    super._tabChanged(tab, old);\n    const tabs = this.querySelectorAll(\"paper-tab:not(.hide-tab)\");\n    if (tabs.length > 0) {\n      this._firstTabWidth = tabs[0].clientWidth;\n      this._lastTabWidth = tabs[tabs.length - 1].clientWidth;\n    }\n\n    // Scroll active tab into view if needed.\n    const selected = this.querySelector(\".iron-selected\");\n    if (selected) {\n      selected.scrollIntoView();\n      this._affectScroll(0); // Ensure scroll arrows match scroll position\n    }\n  }\n\n  /**\n   * Modify _affectScroll so that when the scroll arrows appear\n   * while scrolling and the tab container shrinks we can counteract\n   * the jump in tab position so that the scroll still appears smooth.\n   */\n  public _affectScroll(dx: number): void {\n    if (this._firstTabWidth === 0 || this._lastTabWidth === 0) {\n      return;\n    }\n\n    this.$.tabsContainer.scrollLeft += dx;\n\n    const scrollLeft = this.$.tabsContainer.scrollLeft;\n\n    this._leftHidden = scrollLeft - this._firstTabWidth < 0;\n    this._rightHidden =\n      scrollLeft + this._lastTabWidth > this._tabContainerScrollSize;\n\n    if (this._lastLeftHiddenState !== this._leftHidden) {\n      this._lastLeftHiddenState = this._leftHidden;\n      this.$.tabsContainer.scrollLeft += this._leftHidden ? -23 : 23;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-tabs\": HaTabs;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}