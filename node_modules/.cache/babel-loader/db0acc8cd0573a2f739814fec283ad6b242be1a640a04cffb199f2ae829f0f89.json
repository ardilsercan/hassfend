{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-button/mwc-button\";\nconst mdiFolderMultipleOutline = \"M22,4A2,2 0 0,1 24,6V16A2,2 0 0,1 22,18H6A2,2 0 0,1 4,16V4A2,2 0 0,1 6,2H12L14,4H22M2,6V20H20V22H2A2,2 0 0,1 0,20V11H0V6H2M6,6V16H22V6H6Z\";\nconst mdiLan = \"M10,2C8.89,2 8,2.89 8,4V7C8,8.11 8.89,9 10,9H11V11H2V13H6V15H5C3.89,15 3,15.89 3,17V20C3,21.11 3.89,22 5,22H9C10.11,22 11,21.11 11,20V17C11,15.89 10.11,15 9,15H8V13H16V15H15C13.89,15 13,15.89 13,17V20C13,21.11 13.89,22 15,22H19C20.11,22 21,21.11 21,20V17C21,15.89 20.11,15 19,15H18V13H22V11H13V9H14C15.11,9 16,8.11 16,7V4C16,2.89 15.11,2 14,2H10M10,4H14V7H10V4M5,17H9V20H5V17M15,17H19V20H15V17Z\";\nconst mdiNetwork = \"M17,3A2,2 0 0,1 19,5V15A2,2 0 0,1 17,17H13V19H14A1,1 0 0,1 15,20H22V22H15A1,1 0 0,1 14,23H10A1,1 0 0,1 9,22H2V20H9A1,1 0 0,1 10,19H11V17H7C5.89,17 5,16.1 5,15V5A2,2 0 0,1 7,3H17Z\";\nconst mdiPlus = \"M19,13H13V19H11V13H5V11H11V5H13V11H19V13Z\";\nconst mdiPencil = \"M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { getConfigEntries } from \"../../../../../data/config_entries\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-icon-button\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nimport \"../../../../../components/ha-icon-next\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport \"../../../ha-config-section\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport \"../../../../../components/ha-settings-row\";\nimport { showZHAChangeChannelDialog } from \"./show-dialog-zha-change-channel\";\nimport { fetchZHAConfiguration, updateZHAConfiguration, fetchZHANetworkSettings, createZHANetworkBackup } from \"../../../../../data/zha\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\nconst MULTIPROTOCOL_ADDON_URL = \"socket://core-silabs-multiprotocol:9999\";\nexport const zhaTabs = [{\n  translationKey: \"ui.panel.config.zha.network.caption\",\n  path: `/config/zha/dashboard`,\n  iconPath: mdiNetwork\n}, {\n  translationKey: \"ui.panel.config.zha.groups.caption\",\n  path: `/config/zha/groups`,\n  iconPath: mdiFolderMultipleOutline\n}, {\n  translationKey: \"ui.panel.config.zha.visualization.caption\",\n  path: `/config/zha/visualization`,\n  iconPath: mdiLan\n}];\nlet ZHAConfigDashboard = _decorate([customElement(\"zha-config-dashboard\")], function (_initialize, _LitElement) {\n  class ZHAConfigDashboard extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: ZHAConfigDashboard,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"route\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"isWide\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"configEntryId\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_configuration\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_networkSettings\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_generatingBackup\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated(changedProperties) {\n        _get(_getPrototypeOf(ZHAConfigDashboard.prototype), \"firstUpdated\", this).call(this, changedProperties);\n        if (this.hass) {\n          this.hass.loadBackendTranslation(\"config_panel\", \"zha\", false);\n          this._fetchConfiguration();\n          this._fetchSettings();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${zhaTabs}\n        back-path=\"/config/integrations\"\n      >\n        <ha-card\n          header=${this.hass.localize(\"ui.panel.config.zha.configuration_page.shortcuts_title\")}\n        >\n          ${this.configEntryId ? html`<div class=\"card-actions\">\n                <a\n                  href=${`/config/devices/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\"ui.panel.config.devices.caption\")}</mwc-button\n                  >\n                </a>\n                <a\n                  href=${`/config/entities/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\"ui.panel.config.entities.caption\")}</mwc-button\n                  >\n                </a>\n              </div>` : \"\"}\n        </ha-card>\n        <ha-card\n          class=\"network-settings\"\n          header=${this.hass.localize(\"ui.panel.config.zha.configuration_page.network_settings_title\")}\n        >\n          ${this._networkSettings ? html`<div class=\"card-content\">\n                <ha-settings-row>\n                  <span slot=\"description\">PAN ID</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info.pan_id}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info.extended_pan_id}</span\n                  >\n                  <span slot=\"description\">Extended PAN ID</span>\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Channel</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info.channel}</span\n                  >\n\n                  <ha-icon-button\n                    .label=${this.hass.localize(\"ui.panel.config.zha.configuration_page.change_channel\")}\n                    .path=${mdiPencil}\n                    @click=${this._showChannelMigrationDialog}\n                  >\n                  </ha-icon-button>\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Coordinator IEEE</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.node_info.ieee}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Radio type</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.radio_type}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Serial port</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.device.path}</span\n                  >\n                </ha-settings-row>\n\n                ${this._networkSettings.device.baudrate && !this._networkSettings.device.path.startsWith(\"socket://\") ? html`\n                      <ha-settings-row>\n                        <span slot=\"description\">Baudrate</span>\n                        <span slot=\"heading\"\n                          >${this._networkSettings.device.baudrate}</span\n                        >\n                      </ha-settings-row>\n                    ` : \"\"}\n              </div>` : \"\"}\n          <div class=\"card-actions\">\n            <ha-progress-button\n              @click=${this._createAndDownloadBackup}\n              .progress=${this._generatingBackup}\n              .disabled=${!this._networkSettings || this._generatingBackup}\n            >\n              ${this.hass.localize(\"ui.panel.config.zha.configuration_page.download_backup\")}\n            </ha-progress-button>\n            <mwc-button class=\"warning\" @click=${this._openOptionFlow}>\n              ${this.hass.localize(\"ui.panel.config.zha.configuration_page.migrate_radio\")}\n            </mwc-button>\n          </div>\n        </ha-card>\n        ${this._configuration ? Object.entries(this._configuration.schemas).map(([section, schema]) => html`<ha-card\n                  header=${this.hass.localize(`component.zha.config_panel.${section}.title`)}\n                >\n                  <div class=\"card-content\">\n                    <ha-form\n                      .hass=${this.hass}\n                      .schema=${schema}\n                      .data=${this._configuration.data[section]}\n                      @value-changed=${this._dataChanged}\n                      .section=${section}\n                      .computeLabel=${this._computeLabelCallback(this.hass.localize, section)}\n                    ></ha-form>\n                  </div>\n                </ha-card>`) : \"\"}\n        <ha-card>\n          <div class=\"card-actions\">\n            <mwc-button @click=${this._updateConfiguration}>\n              ${this.hass.localize(\"ui.panel.config.zha.configuration_page.update_button\")}\n            </mwc-button>\n          </div>\n        </ha-card>\n\n        <a href=\"/config/zha/add\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n            extended\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchConfiguration\",\n      value: async function _fetchConfiguration() {\n        this._configuration = await fetchZHAConfiguration(this.hass);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchSettings\",\n      value: async function _fetchSettings() {\n        this._networkSettings = await fetchZHANetworkSettings(this.hass);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_showChannelMigrationDialog\",\n      value: async function _showChannelMigrationDialog() {\n        if (this._networkSettings.device.path === MULTIPROTOCOL_ADDON_URL) {\n          showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.zha.configuration_page.channel_dialog.title\"),\n            text: this.hass.localize(\"ui.panel.config.zha.configuration_page.channel_dialog.text\"),\n            warning: true\n          });\n          return;\n        }\n        showZHAChangeChannelDialog(this, {\n          currentChannel: this._networkSettings.settings.network_info.channel\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_createAndDownloadBackup\",\n      value: async function _createAndDownloadBackup() {\n        let backup_and_metadata;\n        this._generatingBackup = true;\n        try {\n          backup_and_metadata = await createZHANetworkBackup(this.hass);\n        } catch (err) {\n          showAlertDialog(this, {\n            title: \"Failed to create backup\",\n            text: err.message,\n            warning: true\n          });\n          return;\n        } finally {\n          this._generatingBackup = false;\n        }\n        if (!backup_and_metadata.is_complete) {\n          await showAlertDialog(this, {\n            title: \"Backup is incomplete\",\n            text: \"A backup has been created but it is incomplete and cannot be restored. This is a coordinator firmware limitation.\"\n          });\n        }\n        const backupJSON = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(JSON.stringify(backup_and_metadata.backup, null, 4));\n        const backupTime = new Date(Date.parse(backup_and_metadata.backup.backup_time));\n        let basename = `ZHA backup ${backupTime.toISOString().replace(/:/g, \"-\")}`;\n        if (!backup_and_metadata.is_complete) {\n          basename = `Incomplete ${basename}`;\n        }\n        fileDownload(backupJSON, `${basename}.json`);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_openOptionFlow\",\n      value: async function _openOptionFlow() {\n        if (!this.configEntryId) {\n          return;\n        }\n        const configEntries = await getConfigEntries(this.hass, {\n          domain: \"zha\"\n        });\n        const configEntry = configEntries.find(entry => entry.entry_id === this.configEntryId);\n        showOptionsFlowDialog(this, configEntry);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dataChanged\",\n      value: function _dataChanged(ev) {\n        this._configuration.data[ev.currentTarget.section] = ev.detail.value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateConfiguration\",\n      value: async function _updateConfiguration() {\n        await updateZHAConfiguration(this.hass, this._configuration.data);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_computeLabelCallback\",\n      value: function _computeLabelCallback(localize, section) {\n        // Returns a callback for ha-form to calculate labels per schema object\n        return schema => localize(`component.zha.config_panel.${section}.${schema.name}`) || schema.name;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, css`\n        ha-card {\n          margin: auto;\n          margin-top: 16px;\n          max-width: 500px;\n        }\n\n        .network-settings ha-settings-row {\n          padding-left: 0;\n          padding-right: 0;\n          padding-inline-start: 0;\n          padding-inline-end: 0;\n\n          --paper-item-body-two-line-min-height: 55px;\n        }\n\n        .network-settings ha-settings-row span[slot=\"heading\"] {\n          white-space: normal;\n          word-break: break-all;\n          text-indent: -1em;\n          padding-left: 1em;\n          padding-inline-start: 1em;\n          padding-inline-end: initial;\n        }\n\n        .network-settings ha-settings-row ha-icon-button {\n          margin-top: -16px;\n          margin-bottom: -16px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiFolderMultipleOutline","mdiLan","mdiNetwork","mdiPlus","mdiPencil","css","html","LitElement","customElement","property","state","getConfigEntries","fileDownload","showOptionsFlowDialog","haStyle","showZHAChangeChannelDialog","fetchZHAConfiguration","updateZHAConfiguration","fetchZHANetworkSettings","createZHANetworkBackup","showAlertDialog","MULTIPROTOCOL_ADDON_URL","zhaTabs","translationKey","path","iconPath","ZHAConfigDashboard","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","firstUpdated","changedProperties","_get","_getPrototypeOf","prototype","call","hass","loadBackendTranslation","_fetchConfiguration","_fetchSettings","render","narrow","route","localize","configEntryId","_networkSettings","settings","network_info","pan_id","extended_pan_id","channel","_showChannelMigrationDialog","node_info","ieee","radio_type","device","baudrate","startsWith","_createAndDownloadBackup","_generatingBackup","_openOptionFlow","_configuration","Object","entries","schemas","map","section","schema","data","_dataChanged","_computeLabelCallback","_updateConfiguration","title","text","warning","currentChannel","backup_and_metadata","err","message","is_complete","backupJSON","encodeURIComponent","JSON","stringify","backup","backupTime","Date","parse","backup_time","basename","toISOString","replace","configEntries","domain","configEntry","find","entry","entry_id","ev","currentTarget","detail","name","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/panels/config/integrations/integration-panels/zha/zha-config-dashboard.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiFolderMultipleOutline,\n  mdiLan,\n  mdiNetwork,\n  mdiPlus,\n  mdiPencil,\n} from \"@mdi/js\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  TemplateResult,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport {\n  ConfigEntry,\n  getConfigEntries,\n} from \"../../../../../data/config_entries\";\nimport \"../../../../../components/ha-card\";\nimport \"../../../../../components/ha-fab\";\nimport \"../../../../../components/ha-icon-button\";\nimport { fileDownload } from \"../../../../../util/file_download\";\nimport \"../../../../../components/ha-icon-next\";\nimport \"../../../../../layouts/hass-tabs-subpage\";\nimport type { PageNavigation } from \"../../../../../layouts/hass-tabs-subpage\";\nimport { showOptionsFlowDialog } from \"../../../../../dialogs/config-flow/show-dialog-options-flow\";\nimport { haStyle } from \"../../../../../resources/styles\";\nimport type { HomeAssistant, Route } from \"../../../../../types\";\nimport \"../../../ha-config-section\";\nimport \"../../../../../components/ha-form/ha-form\";\nimport \"../../../../../components/buttons/ha-progress-button\";\nimport \"../../../../../components/ha-settings-row\";\nimport { showZHAChangeChannelDialog } from \"./show-dialog-zha-change-channel\";\nimport {\n  fetchZHAConfiguration,\n  updateZHAConfiguration,\n  ZHAConfiguration,\n  fetchZHANetworkSettings,\n  createZHANetworkBackup,\n  ZHANetworkSettings,\n  ZHANetworkBackupAndMetadata,\n} from \"../../../../../data/zha\";\nimport { showAlertDialog } from \"../../../../../dialogs/generic/show-dialog-box\";\n\nconst MULTIPROTOCOL_ADDON_URL = \"socket://core-silabs-multiprotocol:9999\";\n\nexport const zhaTabs: PageNavigation[] = [\n  {\n    translationKey: \"ui.panel.config.zha.network.caption\",\n    path: `/config/zha/dashboard`,\n    iconPath: mdiNetwork,\n  },\n  {\n    translationKey: \"ui.panel.config.zha.groups.caption\",\n    path: `/config/zha/groups`,\n    iconPath: mdiFolderMultipleOutline,\n  },\n  {\n    translationKey: \"ui.panel.config.zha.visualization.caption\",\n    path: `/config/zha/visualization`,\n    iconPath: mdiLan,\n  },\n];\n\n@customElement(\"zha-config-dashboard\")\nclass ZHAConfigDashboard extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public route!: Route;\n\n  @property({ type: Boolean }) public narrow = false;\n\n  @property({ type: Boolean }) public isWide = false;\n\n  @property() public configEntryId?: string;\n\n  @state() private _configuration?: ZHAConfiguration;\n\n  @state() private _networkSettings?: ZHANetworkSettings;\n\n  @state() private _generatingBackup = false;\n\n  protected firstUpdated(changedProperties: PropertyValues): void {\n    super.firstUpdated(changedProperties);\n    if (this.hass) {\n      this.hass.loadBackendTranslation(\"config_panel\", \"zha\", false);\n      this._fetchConfiguration();\n      this._fetchSettings();\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      <hass-tabs-subpage\n        .hass=${this.hass}\n        .narrow=${this.narrow}\n        .route=${this.route}\n        .tabs=${zhaTabs}\n        back-path=\"/config/integrations\"\n      >\n        <ha-card\n          header=${this.hass.localize(\n            \"ui.panel.config.zha.configuration_page.shortcuts_title\"\n          )}\n        >\n          ${this.configEntryId\n            ? html`<div class=\"card-actions\">\n                <a\n                  href=${`/config/devices/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\n                      \"ui.panel.config.devices.caption\"\n                    )}</mwc-button\n                  >\n                </a>\n                <a\n                  href=${`/config/entities/dashboard?historyBack=1&config_entry=${this.configEntryId}`}\n                >\n                  <mwc-button\n                    >${this.hass.localize(\n                      \"ui.panel.config.entities.caption\"\n                    )}</mwc-button\n                  >\n                </a>\n              </div>`\n            : \"\"}\n        </ha-card>\n        <ha-card\n          class=\"network-settings\"\n          header=${this.hass.localize(\n            \"ui.panel.config.zha.configuration_page.network_settings_title\"\n          )}\n        >\n          ${this._networkSettings\n            ? html`<div class=\"card-content\">\n                <ha-settings-row>\n                  <span slot=\"description\">PAN ID</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info.pan_id}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info\n                      .extended_pan_id}</span\n                  >\n                  <span slot=\"description\">Extended PAN ID</span>\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Channel</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.network_info\n                      .channel}</span\n                  >\n\n                  <ha-icon-button\n                    .label=${this.hass.localize(\n                      \"ui.panel.config.zha.configuration_page.change_channel\"\n                    )}\n                    .path=${mdiPencil}\n                    @click=${this._showChannelMigrationDialog}\n                  >\n                  </ha-icon-button>\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Coordinator IEEE</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.settings.node_info.ieee}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Radio type</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.radio_type}</span\n                  >\n                </ha-settings-row>\n\n                <ha-settings-row>\n                  <span slot=\"description\">Serial port</span>\n                  <span slot=\"heading\"\n                    >${this._networkSettings.device.path}</span\n                  >\n                </ha-settings-row>\n\n                ${this._networkSettings.device.baudrate &&\n                !this._networkSettings.device.path.startsWith(\"socket://\")\n                  ? html`\n                      <ha-settings-row>\n                        <span slot=\"description\">Baudrate</span>\n                        <span slot=\"heading\"\n                          >${this._networkSettings.device.baudrate}</span\n                        >\n                      </ha-settings-row>\n                    `\n                  : \"\"}\n              </div>`\n            : \"\"}\n          <div class=\"card-actions\">\n            <ha-progress-button\n              @click=${this._createAndDownloadBackup}\n              .progress=${this._generatingBackup}\n              .disabled=${!this._networkSettings || this._generatingBackup}\n            >\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.download_backup\"\n              )}\n            </ha-progress-button>\n            <mwc-button class=\"warning\" @click=${this._openOptionFlow}>\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.migrate_radio\"\n              )}\n            </mwc-button>\n          </div>\n        </ha-card>\n        ${this._configuration\n          ? Object.entries(this._configuration.schemas).map(\n              ([section, schema]) =>\n                html`<ha-card\n                  header=${this.hass.localize(\n                    `component.zha.config_panel.${section}.title`\n                  )}\n                >\n                  <div class=\"card-content\">\n                    <ha-form\n                      .hass=${this.hass}\n                      .schema=${schema}\n                      .data=${this._configuration!.data[section]}\n                      @value-changed=${this._dataChanged}\n                      .section=${section}\n                      .computeLabel=${this._computeLabelCallback(\n                        this.hass.localize,\n                        section\n                      )}\n                    ></ha-form>\n                  </div>\n                </ha-card>`\n            )\n          : \"\"}\n        <ha-card>\n          <div class=\"card-actions\">\n            <mwc-button @click=${this._updateConfiguration}>\n              ${this.hass.localize(\n                \"ui.panel.config.zha.configuration_page.update_button\"\n              )}\n            </mwc-button>\n          </div>\n        </ha-card>\n\n        <a href=\"/config/zha/add\" slot=\"fab\">\n          <ha-fab\n            .label=${this.hass.localize(\"ui.panel.config.zha.add_device\")}\n            extended\n          >\n            <ha-svg-icon slot=\"icon\" .path=${mdiPlus}></ha-svg-icon>\n          </ha-fab>\n        </a>\n      </hass-tabs-subpage>\n    `;\n  }\n\n  private async _fetchConfiguration(): Promise<void> {\n    this._configuration = await fetchZHAConfiguration(this.hass!);\n  }\n\n  private async _fetchSettings(): Promise<void> {\n    this._networkSettings = await fetchZHANetworkSettings(this.hass!);\n  }\n\n  private async _showChannelMigrationDialog(): Promise<void> {\n    if (this._networkSettings!.device.path === MULTIPROTOCOL_ADDON_URL) {\n      showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.zha.configuration_page.channel_dialog.title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.config.zha.configuration_page.channel_dialog.text\"\n        ),\n        warning: true,\n      });\n      return;\n    }\n\n    showZHAChangeChannelDialog(this, {\n      currentChannel: this._networkSettings!.settings.network_info.channel,\n    });\n  }\n\n  private async _createAndDownloadBackup(): Promise<void> {\n    let backup_and_metadata: ZHANetworkBackupAndMetadata;\n\n    this._generatingBackup = true;\n\n    try {\n      backup_and_metadata = await createZHANetworkBackup(this.hass!);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        title: \"Failed to create backup\",\n        text: err.message,\n        warning: true,\n      });\n      return;\n    } finally {\n      this._generatingBackup = false;\n    }\n\n    if (!backup_and_metadata.is_complete) {\n      await showAlertDialog(this, {\n        title: \"Backup is incomplete\",\n        text: \"A backup has been created but it is incomplete and cannot be restored. This is a coordinator firmware limitation.\",\n      });\n    }\n\n    const backupJSON: string =\n      \"data:text/plain;charset=utf-8,\" +\n      encodeURIComponent(JSON.stringify(backup_and_metadata.backup, null, 4));\n    const backupTime: Date = new Date(\n      Date.parse(backup_and_metadata.backup.backup_time)\n    );\n    let basename = `ZHA backup ${backupTime.toISOString().replace(/:/g, \"-\")}`;\n\n    if (!backup_and_metadata.is_complete) {\n      basename = `Incomplete ${basename}`;\n    }\n\n    fileDownload(backupJSON, `${basename}.json`);\n  }\n\n  private async _openOptionFlow() {\n    if (!this.configEntryId) {\n      return;\n    }\n\n    const configEntries: ConfigEntry[] = await getConfigEntries(this.hass, {\n      domain: \"zha\",\n    });\n\n    const configEntry = configEntries.find(\n      (entry) => entry.entry_id === this.configEntryId\n    );\n\n    showOptionsFlowDialog(this, configEntry!);\n  }\n\n  private _dataChanged(ev) {\n    this._configuration!.data[ev.currentTarget!.section] = ev.detail.value;\n  }\n\n  private async _updateConfiguration(): Promise<any> {\n    await updateZHAConfiguration(this.hass!, this._configuration!.data);\n  }\n\n  private _computeLabelCallback(localize, section: string) {\n    // Returns a callback for ha-form to calculate labels per schema object\n    return (schema) =>\n      localize(`component.zha.config_panel.${section}.${schema.name}`) ||\n      schema.name;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      css`\n        ha-card {\n          margin: auto;\n          margin-top: 16px;\n          max-width: 500px;\n        }\n\n        .network-settings ha-settings-row {\n          padding-left: 0;\n          padding-right: 0;\n          padding-inline-start: 0;\n          padding-inline-end: 0;\n\n          --paper-item-body-two-line-min-height: 55px;\n        }\n\n        .network-settings ha-settings-row span[slot=\"heading\"] {\n          white-space: normal;\n          word-break: break-all;\n          text-indent: -1em;\n          padding-left: 1em;\n          padding-inline-start: 1em;\n          padding-inline-end: initial;\n        }\n\n        .network-settings ha-settings-row ha-icon-button {\n          margin-top: -16px;\n          margin-bottom: -16px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"zha-config-dashboard\": ZHAConfigDashboard;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}