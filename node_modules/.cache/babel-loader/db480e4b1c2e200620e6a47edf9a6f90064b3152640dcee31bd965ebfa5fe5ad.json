{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\n/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\nvar MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nvar INCLUDE_ATTR = 'include';\nvar SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */DomModule.import(moduleId);\n}\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  var container = importDoc.body ? importDoc.body : importDoc;\n  var importCss = resolveCss(container.textContent, importDoc.baseURI);\n  var style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nvar templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n  var modules = moduleIds.trim().split(/\\s+/);\n  var styles = [];\n  for (var i = 0; i < modules.length; i++) {\n    styles.push.apply(styles, _toConsumableArray(stylesFromModule(modules[i])));\n  }\n  return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  var m = importModule(moduleId);\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n  if (m._styles === undefined) {\n    var styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push.apply(styles, _toConsumableArray(_stylesFromModuleImports(m)));\n    // include css from the first template in the module\n    var template = /** @type {?HTMLTemplateElement} */\n    m.querySelector('template');\n    if (template) {\n      styles.push.apply(styles, _toConsumableArray(stylesFromTemplate(template, /** @type {templateWithAssetPath} */m.assetpath)));\n    }\n    m._styles = styles;\n  }\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    var styles = [];\n    // if element is a template, get content from its .content\n    var e$ = template.content.querySelectorAll('style');\n    for (var i = 0; i < e$.length; i++) {\n      var e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      var include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push.apply(styles, _toConsumableArray(stylesFromModules(include).filter(function (item, index, self) {\n          return self.indexOf(item) === index;\n        })));\n      }\n      if (baseURI) {\n        e.textContent = resolveCss(e.textContent, /** @type {string} */baseURI);\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n  var m = importModule(moduleId);\n  return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  var styles = [];\n  var p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (var i = 0; i < p$.length; i++) {\n    var p = p$[i];\n    if (p.import) {\n      var importDoc = p.import;\n      var unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        var style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n  var modules = moduleIds.trim().split(/\\s+/);\n  var cssText = '';\n  for (var i = 0; i < modules.length; i++) {\n    cssText += cssFromModule(modules[i]);\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  var m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    var cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    var t = /** @type {?HTMLTemplateElement} */m.querySelector('template');\n    if (t) {\n      cssText += cssFromTemplate(t, /** @type {templateWithAssetPath} */m.assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  var cssText = '';\n  var e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (var i = 0; i < e$.length; i++) {\n    var e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  var m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  var cssText = '';\n  var styles = _stylesFromModuleImports(module);\n  for (var i = 0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}","map":{"version":3,"names":["DomModule","resolveCss","MODULE_STYLE_LINK_SELECTOR","INCLUDE_ATTR","SHADY_UNSCOPED_ATTR","importModule","moduleId","import","styleForImport","importDoc","container","body","importCss","textContent","baseURI","style","document","createElement","templateWithAssetPath","stylesFromModules","moduleIds","modules","trim","split","styles","i","length","push","apply","_toConsumableArray","stylesFromModule","m","console","warn","_styles","undefined","_stylesFromModuleImports","template","querySelector","stylesFromTemplate","assetpath","e$","content","querySelectorAll","e","include","getAttribute","filter","item","index","self","indexOf","stylesFromModuleImports","module","p$","p","unscoped","hasAttribute","_unscopedStyle","setAttribute","_style","cssFromModules","cssText","cssFromModule","_cssText","_cssFromModuleImports","t","cssFromTemplate","parentNode","removeChild","cssFromModuleImports"],"sources":["/workspaces/frontend/node_modules/@polymer/polymer/lib/utils/style-gather.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2017 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Module with utilities for collection CSS text from `<templates>`, external\n * stylesheets, and `dom-module`s.\n *\n * @summary Module with utilities for collection CSS text from various sources.\n */\n\nimport { DomModule } from '../elements/dom-module.js';\nimport { resolveCss } from './resolve-url.js';\n\nconst MODULE_STYLE_LINK_SELECTOR = 'link[rel=import][type~=css]';\nconst INCLUDE_ATTR = 'include';\nconst SHADY_UNSCOPED_ATTR = 'shady-unscoped';\n\n/**\n * @param {string} moduleId .\n * @return {?DomModule} .\n */\nfunction importModule(moduleId) {\n  return /** @type {?DomModule} */(DomModule.import(moduleId));\n}\n\nfunction styleForImport(importDoc) {\n  // NOTE: polyfill affordance.\n  // under the HTMLImports polyfill, there will be no 'body',\n  // but the import pseudo-doc can be used directly.\n  let container = importDoc.body ? importDoc.body : importDoc;\n  const importCss = resolveCss(container.textContent,\n    importDoc.baseURI);\n  const style = document.createElement('style');\n  style.textContent = importCss;\n  return style;\n}\n\n/** @typedef {{assetpath: string}} */\nlet templateWithAssetPath; // eslint-disable-line no-unused-vars\n\n\n/**\n * Returns a list of <style> elements in a space-separated list of `dom-module`s.\n *\n * @function\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {!Array<!HTMLStyleElement>} Array of contained <style> elements\n */\nexport function stylesFromModules(moduleIds) {\n const modules = moduleIds.trim().split(/\\s+/);\n const styles = [];\n for (let i=0; i < modules.length; i++) {\n   styles.push(...stylesFromModule(modules[i]));\n }\n return styles;\n}\n\n/**\n * Returns a list of <style> elements in a given `dom-module`.\n * Styles in a `dom-module` can come either from `<style>`s within the\n * first `<template>`, or else from one or more\n * `<link rel=\"import\" type=\"css\">` links outside the template.\n *\n * @param {string} moduleId dom-module id to gather styles from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModule(moduleId) {\n  const m = importModule(moduleId);\n\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n    return [];\n  }\n\n  if (m._styles === undefined) {\n    const styles = [];\n    // module imports: <link rel=\"import\" type=\"css\">\n    styles.push(..._stylesFromModuleImports(m));\n    // include css from the first template in the module\n    const template = /** @type {?HTMLTemplateElement} */(\n        m.querySelector('template'));\n    if (template) {\n      styles.push(...stylesFromTemplate(template,\n        /** @type {templateWithAssetPath} */(m).assetpath));\n    }\n\n    m._styles = styles;\n  }\n\n  return m._styles;\n}\n\n/**\n * Returns the `<style>` elements within a given template.\n *\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string=} baseURI baseURI for style content\n * @return {!Array<!HTMLStyleElement>} Array of styles\n */\nexport function stylesFromTemplate(template, baseURI) {\n  if (!template._styles) {\n    const styles = [];\n    // if element is a template, get content from its .content\n    const e$ = template.content.querySelectorAll('style');\n    for (let i=0; i < e$.length; i++) {\n      let e = e$[i];\n      // support style sharing by allowing styles to \"include\"\n      // other dom-modules that contain styling\n      let include = e.getAttribute(INCLUDE_ATTR);\n      if (include) {\n        styles.push(...stylesFromModules(include).filter(function(item, index, self) {\n          return self.indexOf(item) === index;\n        }));\n      }\n      if (baseURI) {\n        e.textContent =\n            resolveCss(e.textContent, /** @type {string} */ (baseURI));\n      }\n      styles.push(e);\n    }\n    template._styles = styles;\n  }\n  return template._styles;\n}\n\n/**\n * Returns a list of <style> elements  from stylesheets loaded via `<link rel=\"import\" type=\"css\">` links within the specified `dom-module`.\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {!Array<!HTMLStyleElement>} Array of contained styles.\n */\nexport function stylesFromModuleImports(moduleId) {\n let m = importModule(moduleId);\n return m ? _stylesFromModuleImports(m) : [];\n}\n\n/**\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {!Array<!HTMLStyleElement>} Array of contained styles\n */\nfunction _stylesFromModuleImports(module) {\n  const styles = [];\n  const p$ = module.querySelectorAll(MODULE_STYLE_LINK_SELECTOR);\n  for (let i=0; i < p$.length; i++) {\n    let p = p$[i];\n    if (p.import) {\n      const importDoc = p.import;\n      const unscoped = p.hasAttribute(SHADY_UNSCOPED_ATTR);\n      if (unscoped && !importDoc._unscopedStyle) {\n        const style = styleForImport(importDoc);\n        style.setAttribute(SHADY_UNSCOPED_ATTR, '');\n        importDoc._unscopedStyle = style;\n      } else if (!importDoc._style) {\n        importDoc._style = styleForImport(importDoc);\n      }\n      styles.push(unscoped ? importDoc._unscopedStyle : importDoc._style);\n    }\n  }\n  return styles;\n}\n\n/**\n *\n * Returns CSS text of styles in a space-separated list of `dom-module`s.\n * Note: This method is deprecated, use `stylesFromModules` instead.\n *\n * @deprecated\n * @param {string} moduleIds List of dom-module id's within which to\n * search for css.\n * @return {string} Concatenated CSS content from specified `dom-module`s\n */\nexport function cssFromModules(moduleIds) {\n let modules = moduleIds.trim().split(/\\s+/);\n let cssText = '';\n for (let i=0; i < modules.length; i++) {\n   cssText += cssFromModule(modules[i]);\n }\n return cssText;\n}\n\n/**\n * Returns CSS text of styles in a given `dom-module`.  CSS in a `dom-module`\n * can come either from `<style>`s within the first `<template>`, or else\n * from one or more `<link rel=\"import\" type=\"css\">` links outside the\n * template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromModule` instead.\n *\n * @deprecated\n * @param {string} moduleId dom-module id to gather styles from\n * @return {string} Concatenated CSS content from specified `dom-module`\n */\nexport function cssFromModule(moduleId) {\n  let m = importModule(moduleId);\n  if (m && m._cssText === undefined) {\n    // module imports: <link rel=\"import\" type=\"css\">\n    let cssText = _cssFromModuleImports(m);\n    // include css from the first template in the module\n    let t = /** @type {?HTMLTemplateElement} */(m.querySelector('template'));\n    if (t) {\n      cssText += cssFromTemplate(t,\n        /** @type {templateWithAssetPath} */(m).assetpath);\n    }\n    m._cssText = cssText || null;\n  }\n  if (!m) {\n    console.warn('Could not find style data in module named', moduleId);\n  }\n  return m && m._cssText || '';\n}\n\n/**\n * Returns CSS text of `<styles>` within a given template.\n *\n * Any `<styles>` processed are removed from their original location.\n * Note: This method is deprecated, use `styleFromTemplate` instead.\n *\n * @deprecated\n * @param {!HTMLTemplateElement} template Template to gather styles from\n * @param {string} baseURI Base URI to resolve the URL against\n * @return {string} Concatenated CSS content from specified template\n */\nexport function cssFromTemplate(template, baseURI) {\n  let cssText = '';\n  const e$ = stylesFromTemplate(template, baseURI);\n  // if element is a template, get content from its .content\n  for (let i=0; i < e$.length; i++) {\n    let e = e$[i];\n    if (e.parentNode) {\n      e.parentNode.removeChild(e);\n    }\n    cssText += e.textContent;\n  }\n  return cssText;\n}\n\n/**\n * Returns CSS text from stylesheets loaded via `<link rel=\"import\" type=\"css\">`\n * links within the specified `dom-module`.\n *\n * Note: This method is deprecated, use `stylesFromModuleImports` instead.\n *\n * @deprecated\n *\n * @param {string} moduleId Id of `dom-module` to gather CSS from\n * @return {string} Concatenated CSS content from links in specified `dom-module`\n */\nexport function cssFromModuleImports(moduleId) {\n  let m = importModule(moduleId);\n  return m ? _cssFromModuleImports(m) : '';\n}\n\n/**\n * @deprecated\n * @param {!HTMLElement} module dom-module element that could contain `<link rel=\"import\" type=\"css\">` styles\n * @return {string} Concatenated CSS content from links in the dom-module\n */\nfunction _cssFromModuleImports(module) {\n  let cssText = '';\n  let styles = _stylesFromModuleImports(module);\n  for (let i=0; i < styles.length; i++) {\n    cssText += styles[i].textContent;\n  }\n  return cssText;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}