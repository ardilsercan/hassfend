{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-button\";\nimport { LitElement, html, css, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport \"../../components/ha-icon-button-prev\";\nimport { subscribeNotifications } from \"../../data/persistent_notification\";\nimport \"./notification-item\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-drawer\";\nexport let HuiNotificationDrawer = _decorate([customElement(\"notification-drawer\")], function (_initialize, _LitElement) {\n  class HuiNotificationDrawer extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiNotificationDrawer,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_notifications\",\n      value() {\n        return [];\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_open\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-drawer\")],\n      key: \"_drawer\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_unsubNotifications\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(HuiNotificationDrawer.prototype), \"connectedCallback\", this).call(this);\n        window.addEventListener(\"location-changed\", this.closeDialog);\n      }\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(HuiNotificationDrawer.prototype), \"disconnectedCallback\", this).call(this);\n        window.removeEventListener(\"location-changed\", this.closeDialog);\n      }\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog({\n        narrow\n      }) {\n        this._unsubNotifications = subscribeNotifications(this.hass.connection, notifications => {\n          if (this._notifications.length && !notifications.length) {\n            this.closeDialog();\n            return;\n          }\n          this._notifications = notifications;\n        });\n        this.style.setProperty(\"--mdc-drawer-width\", narrow ? window.innerWidth + \"px\" : \"500px\");\n        this._open = true;\n      }\n    }, {\n      kind: \"field\",\n      key: \"closeDialog\",\n      value() {\n        return () => {\n          if (this._drawer) {\n            this._drawer.open = false;\n          }\n          if (this._unsubNotifications) {\n            this._unsubNotifications();\n            this._unsubNotifications = undefined;\n          }\n          this._notifications = [];\n          fireEvent(this, \"dialog-closed\", {\n            dialog: this.localName\n          });\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._open) {\n          return nothing;\n        }\n        const configuratorEntities = Object.keys(this.hass.states).filter(entityId => computeDomain(entityId) === \"configurator\").map(entityId => this.hass.states[entityId]);\n\n        // @ts-ignore\n        const notifications = this._notifications.concat(configuratorEntities);\n        notifications.sort((n1, n2) => {\n          const d1 = new Date(n1.created_at);\n          const d2 = new Date(n2.created_at);\n          if (d1 < d2) {\n            return 1;\n          }\n          if (d1 > d2) {\n            return -1;\n          }\n          return 0;\n        });\n        return html`\n      <ha-drawer type=\"modal\" open @MDCDrawer:closed=${this._dialogClosed}>\n        <ha-header-bar>\n          <div slot=\"title\">\n            ${this.hass.localize(\"ui.notification_drawer.title\")}\n          </div>\n          <ha-icon-button-prev\n            slot=\"actionItems\"\n            .hass=${this.hass}\n            @click=${this.closeDialog}\n            .label=${this.hass.localize(\"ui.notification_drawer.close\")}\n          >\n          </ha-icon-button-prev>\n        </ha-header-bar>\n        <div class=\"notifications\">\n          ${notifications.length ? html`${notifications.map(notification => html`<div class=\"notification\">\n                    <notification-item\n                      .hass=${this.hass}\n                      .notification=${notification}\n                    ></notification-item>\n                  </div>`)}\n              ${this._notifications.length > 1 ? html`<div class=\"notification-actions\">\n                    <mwc-button raised @click=${this._dismissAll}>\n                      ${this.hass.localize(\"ui.notification_drawer.dismiss_all\")}\n                    </mwc-button>\n                  </div>` : \"\"}` : html` <div class=\"empty\">\n                ${this.hass.localize(\"ui.notification_drawer.empty\")}\n                <div></div>\n              </div>`}\n        </div>\n      </ha-drawer>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dialogClosed\",\n      value: function _dialogClosed(ev) {\n        ev.stopPropagation();\n        this._open = false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dismissAll\",\n      value: function _dismissAll() {\n        this.hass.callService(\"persistent_notification\", \"dismiss_all\");\n        this.closeDialog();\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return css`\n    ha-header-bar {\n      --mdc-theme-on-primary: var(--primary-text-color);\n      --mdc-theme-primary: var(--primary-background-color);\n      border-bottom: 1px solid var(--divider-color);\n      display: block;\n    }\n\n    .notifications {\n      overflow-y: auto;\n      padding-top: 16px;\n      padding-left: env(safe-area-inset-left);\n      padding-right: env(safe-area-inset-right);\n      padding-inline-start: env(safe-area-inset-left);\n      padding-inline-end: env(safe-area-inset-right);\n      padding-bottom: env(safe-area-inset-bottom);\n      height: calc(100% - 1px - var(--header-height));\n      box-sizing: border-box;\n      background-color: var(--primary-background-color);\n      color: var(--primary-text-color);\n    }\n\n    .notification {\n      padding: 0 16px 16px;\n    }\n\n    .notification-actions {\n      padding: 0 16px 16px;\n      text-align: center;\n    }\n\n    .empty {\n      padding: 16px;\n      text-align: center;\n    }\n  `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","html","css","nothing","customElement","property","query","state","fireEvent","computeDomain","subscribeNotifications","HuiNotificationDrawer","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","connectedCallback","_get","_getPrototypeOf","prototype","call","window","addEventListener","closeDialog","disconnectedCallback","removeEventListener","showDialog","narrow","_unsubNotifications","hass","connection","notifications","_notifications","length","style","setProperty","innerWidth","_open","_drawer","open","undefined","dialog","localName","render","configuratorEntities","Object","keys","states","filter","entityId","map","concat","sort","n1","n2","d1","Date","created_at","d2","_dialogClosed","localize","notification","_dismissAll","ev","stopPropagation","callService","static"],"sources":["/workspaces/frontend/src/dialogs/notifications/notification-drawer.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { LitElement, html, css, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { computeDomain } from \"../../common/entity/compute_domain\";\nimport \"../../components/ha-icon-button-prev\";\nimport {\n  PersistentNotification,\n  subscribeNotifications,\n} from \"../../data/persistent_notification\";\nimport { HomeAssistant } from \"../../types\";\nimport \"./notification-item\";\nimport \"../../components/ha-header-bar\";\nimport \"../../components/ha-drawer\";\nimport type { HaDrawer } from \"../../components/ha-drawer\";\n\n@customElement(\"notification-drawer\")\nexport class HuiNotificationDrawer extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _notifications: PersistentNotification[] = [];\n\n  @state() private _open = false;\n\n  @query(\"ha-drawer\") private _drawer?: HaDrawer;\n\n  private _unsubNotifications?: UnsubscribeFunc;\n\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"location-changed\", this.closeDialog);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"location-changed\", this.closeDialog);\n  }\n\n  showDialog({ narrow }) {\n    this._unsubNotifications = subscribeNotifications(\n      this.hass.connection,\n      (notifications) => {\n        if (this._notifications.length && !notifications.length) {\n          this.closeDialog();\n          return;\n        }\n        this._notifications = notifications;\n      }\n    );\n    this.style.setProperty(\n      \"--mdc-drawer-width\",\n      narrow ? window.innerWidth + \"px\" : \"500px\"\n    );\n    this._open = true;\n  }\n\n  closeDialog = () => {\n    if (this._drawer) {\n      this._drawer.open = false;\n    }\n    if (this._unsubNotifications) {\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n    this._notifications = [];\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  };\n\n  protected render() {\n    if (!this._open) {\n      return nothing;\n    }\n    const configuratorEntities = Object.keys(this.hass.states)\n      .filter((entityId) => computeDomain(entityId) === \"configurator\")\n      .map((entityId) => this.hass.states[entityId]);\n\n    // @ts-ignore\n    const notifications = this._notifications.concat(configuratorEntities);\n\n    notifications.sort((n1, n2) => {\n      const d1 = new Date(n1.created_at);\n      const d2 = new Date(n2.created_at);\n\n      if (d1 < d2) {\n        return 1;\n      }\n      if (d1 > d2) {\n        return -1;\n      }\n      return 0;\n    });\n\n    return html`\n      <ha-drawer type=\"modal\" open @MDCDrawer:closed=${this._dialogClosed}>\n        <ha-header-bar>\n          <div slot=\"title\">\n            ${this.hass.localize(\"ui.notification_drawer.title\")}\n          </div>\n          <ha-icon-button-prev\n            slot=\"actionItems\"\n            .hass=${this.hass}\n            @click=${this.closeDialog}\n            .label=${this.hass.localize(\"ui.notification_drawer.close\")}\n          >\n          </ha-icon-button-prev>\n        </ha-header-bar>\n        <div class=\"notifications\">\n          ${notifications.length\n            ? html`${notifications.map(\n                (notification) =>\n                  html`<div class=\"notification\">\n                    <notification-item\n                      .hass=${this.hass}\n                      .notification=${notification}\n                    ></notification-item>\n                  </div>`\n              )}\n              ${this._notifications.length > 1\n                ? html`<div class=\"notification-actions\">\n                    <mwc-button raised @click=${this._dismissAll}>\n                      ${this.hass.localize(\n                        \"ui.notification_drawer.dismiss_all\"\n                      )}\n                    </mwc-button>\n                  </div>`\n                : \"\"}`\n            : html` <div class=\"empty\">\n                ${this.hass.localize(\"ui.notification_drawer.empty\")}\n                <div></div>\n              </div>`}\n        </div>\n      </ha-drawer>\n    `;\n  }\n\n  private _dialogClosed(ev: Event) {\n    ev.stopPropagation();\n    this._open = false;\n  }\n\n  private _dismissAll() {\n    this.hass.callService(\"persistent_notification\", \"dismiss_all\");\n    this.closeDialog();\n  }\n\n  static styles = css`\n    ha-header-bar {\n      --mdc-theme-on-primary: var(--primary-text-color);\n      --mdc-theme-primary: var(--primary-background-color);\n      border-bottom: 1px solid var(--divider-color);\n      display: block;\n    }\n\n    .notifications {\n      overflow-y: auto;\n      padding-top: 16px;\n      padding-left: env(safe-area-inset-left);\n      padding-right: env(safe-area-inset-right);\n      padding-inline-start: env(safe-area-inset-left);\n      padding-inline-end: env(safe-area-inset-right);\n      padding-bottom: env(safe-area-inset-bottom);\n      height: calc(100% - 1px - var(--header-height));\n      box-sizing: border-box;\n      background-color: var(--primary-background-color);\n      color: var(--primary-text-color);\n    }\n\n    .notification {\n      padding: 0 16px 16px;\n    }\n\n    .notification-actions {\n      padding: 0 16px 16px;\n      text-align: center;\n    }\n\n    .empty {\n      padding: 16px;\n      text-align: center;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-drawer\": HuiNotificationDrawer;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}