{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiClose = \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\";\nimport { dump } from \"js-yaml\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/search-input\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport { fetchHassioHardwareInfo } from \"../../../data/hassio/hardware\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nconst _filterDevices = memoizeOne((showAdvanced, hardware, filter, language) => hardware.devices.filter(device => {\n  var _device$by_id;\n  return (showAdvanced || [\"tty\", \"gpio\", \"input\"].includes(device.subsystem)) && (((_device$by_id = device.by_id) === null || _device$by_id === void 0 ? void 0 : _device$by_id.toLowerCase().includes(filter)) || device.name.toLowerCase().includes(filter) || device.dev_path.toLocaleLowerCase().includes(filter) || JSON.stringify(device.attributes).toLocaleLowerCase().includes(filter));\n}).sort((a, b) => stringCompare(a.name, b.name, language)));\nlet DialogHardwareAvailable = _decorate([customElement(\"ha-dialog-hardware-available\")], function (_initialize, _LitElement) {\n  class DialogHardwareAvailable extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: DialogHardwareAvailable,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_hardware\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_filter\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: async function showDialog() {\n        try {\n          this._hardware = await fetchHassioHardwareInfo(this.hass);\n        } catch (err) {\n          await showAlertDialog(this, {\n            title: this.hass.localize(\"ui.panel.config.hardware.available_hardware.failed_to_get\"),\n            text: extractApiErrorMessage(err)\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._hardware = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass$userData;\n        if (!this._hardware) {\n          return nothing;\n        }\n        const devices = _filterDevices(((_this$hass$userData = this.hass.userData) === null || _this$hass$userData === void 0 ? void 0 : _this$hass$userData.showAdvanced) || false, this._hardware, (this._filter || \"\").toLowerCase(), this.hass.locale.language);\n        return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\"ui.panel.config.hardware.available_hardware.title\")}\n      >\n        <div class=\"header\" slot=\"heading\">\n          <h2>\n            ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.title\")}\n          </h2>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n          ></ha-icon-button>\n          <search-input\n            .hass=${this.hass}\n            .filter=${this._filter}\n            @value-changed=${this._handleSearchChange}\n            .label=${this.hass.localize(\"ui.panel.config.hardware.available_hardware.search\")}\n          >\n          </search-input>\n        </div>\n        ${devices.map(device => html`\n            <ha-expansion-panel\n              .header=${device.name}\n              .secondary=${device.by_id || undefined}\n              outlined\n            >\n              <div class=\"device-property\">\n                <span>\n                  ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.subsystem\")}:\n                </span>\n                <span>${device.subsystem}</span>\n              </div>\n              <div class=\"device-property\">\n                <span>\n                  ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.device_path\")}:\n                </span>\n                <code>${device.dev_path}</code>\n              </div>\n              ${device.by_id ? html`\n                    <div class=\"device-property\">\n                      <span>\n                        ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.id\")}:\n                      </span>\n                      <code>${device.by_id}</code>\n                    </div>\n                  ` : \"\"}\n              <div class=\"attributes\">\n                <span>\n                  ${this.hass.localize(\"ui.panel.config.hardware.available_hardware.attributes\")}:\n                </span>\n                <pre>${dump(device.attributes, {\n          indent: 2\n        })}</pre>\n              </div>\n            </ha-expansion-panel>\n          `)}\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleSearchChange\",\n      value: function _handleSearchChange(ev) {\n        this._filter = ev.detail.value;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, haStyleDialog, css`\n        ha-icon-button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        h2 {\n          margin: 18px 42px 0 18px;\n          color: var(--primary-text-color);\n        }\n        ha-expansion-panel {\n          margin: 4px 0;\n        }\n        pre,\n        code {\n          background-color: var(--markdown-code-background-color, none);\n          border-radius: 3px;\n        }\n        pre {\n          padding: 16px;\n          overflow: auto;\n          line-height: 1.45;\n          font-family: var(--code-font-family, monospace);\n        }\n        code {\n          font-size: 85%;\n          padding: 0.2em 0.4em;\n        }\n        search-input {\n          margin: 8px 16px 0;\n          display: block;\n        }\n        .device-property {\n          display: flex;\n          justify-content: space-between;\n        }\n        .attributes {\n          margin-top: 12px;\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["dump","css","html","LitElement","nothing","customElement","property","state","memoizeOne","fireEvent","stringCompare","extractApiErrorMessage","fetchHassioHardwareInfo","showAlertDialog","haStyle","haStyleDialog","_filterDevices","showAdvanced","hardware","filter","language","devices","device","_device$by_id","includes","subsystem","by_id","toLowerCase","name","dev_path","toLocaleLowerCase","JSON","stringify","attributes","sort","a","b","DialogHardwareAvailable","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","_hardware","hass","err","title","localize","text","closeDialog","undefined","dialog","localName","render","_this$hass$userData","userData","_filter","locale","mdiClose","_handleSearchChange","map","indent","ev","detail","static","styles"],"sources":["/workspaces/frontend/src/panels/config/hardware/dialog-hardware-available.ts"],"sourcesContent":["import { mdiClose } from \"@mdi/js\";\nimport { dump } from \"js-yaml\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport memoizeOne from \"memoize-one\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { stringCompare } from \"../../../common/string/compare\";\nimport \"../../../components/ha-dialog\";\nimport \"../../../components/ha-expansion-panel\";\nimport \"../../../components/ha-icon-next\";\nimport \"../../../components/search-input\";\nimport { extractApiErrorMessage } from \"../../../data/hassio/common\";\nimport {\n  fetchHassioHardwareInfo,\n  HassioHardwareInfo,\n} from \"../../../data/hassio/hardware\";\nimport { showAlertDialog } from \"../../../dialogs/generic/show-dialog-box\";\nimport type { HassDialog } from \"../../../dialogs/make-dialog-manager\";\nimport { haStyle, haStyleDialog } from \"../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../types\";\n\nconst _filterDevices = memoizeOne(\n  (\n    showAdvanced: boolean,\n    hardware: HassioHardwareInfo,\n    filter: string,\n    language: string\n  ) =>\n    hardware.devices\n      .filter(\n        (device) =>\n          (showAdvanced ||\n            [\"tty\", \"gpio\", \"input\"].includes(device.subsystem)) &&\n          (device.by_id?.toLowerCase().includes(filter) ||\n            device.name.toLowerCase().includes(filter) ||\n            device.dev_path.toLocaleLowerCase().includes(filter) ||\n            JSON.stringify(device.attributes)\n              .toLocaleLowerCase()\n              .includes(filter))\n      )\n      .sort((a, b) => stringCompare(a.name, b.name, language))\n);\n\n@customElement(\"ha-dialog-hardware-available\")\nclass DialogHardwareAvailable extends LitElement implements HassDialog {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _hardware?: HassioHardwareInfo;\n\n  @state() private _filter?: string;\n\n  public async showDialog(): Promise<Promise<void>> {\n    try {\n      this._hardware = await fetchHassioHardwareInfo(this.hass);\n    } catch (err: any) {\n      await showAlertDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.config.hardware.available_hardware.failed_to_get\"\n        ),\n        text: extractApiErrorMessage(err),\n      });\n    }\n  }\n\n  public closeDialog(): void {\n    this._hardware = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  protected render() {\n    if (!this._hardware) {\n      return nothing;\n    }\n\n    const devices = _filterDevices(\n      this.hass.userData?.showAdvanced || false,\n      this._hardware,\n      (this._filter || \"\").toLowerCase(),\n      this.hass.locale.language\n    );\n\n    return html`\n      <ha-dialog\n        open\n        hideActions\n        @closed=${this.closeDialog}\n        .heading=${this.hass.localize(\n          \"ui.panel.config.hardware.available_hardware.title\"\n        )}\n      >\n        <div class=\"header\" slot=\"heading\">\n          <h2>\n            ${this.hass.localize(\n              \"ui.panel.config.hardware.available_hardware.title\"\n            )}\n          </h2>\n          <ha-icon-button\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n            dialogAction=\"close\"\n          ></ha-icon-button>\n          <search-input\n            .hass=${this.hass}\n            .filter=${this._filter}\n            @value-changed=${this._handleSearchChange}\n            .label=${this.hass.localize(\n              \"ui.panel.config.hardware.available_hardware.search\"\n            )}\n          >\n          </search-input>\n        </div>\n        ${devices.map(\n          (device) => html`\n            <ha-expansion-panel\n              .header=${device.name}\n              .secondary=${device.by_id || undefined}\n              outlined\n            >\n              <div class=\"device-property\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.hardware.available_hardware.subsystem\"\n                  )}:\n                </span>\n                <span>${device.subsystem}</span>\n              </div>\n              <div class=\"device-property\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.hardware.available_hardware.device_path\"\n                  )}:\n                </span>\n                <code>${device.dev_path}</code>\n              </div>\n              ${device.by_id\n                ? html`\n                    <div class=\"device-property\">\n                      <span>\n                        ${this.hass.localize(\n                          \"ui.panel.config.hardware.available_hardware.id\"\n                        )}:\n                      </span>\n                      <code>${device.by_id}</code>\n                    </div>\n                  `\n                : \"\"}\n              <div class=\"attributes\">\n                <span>\n                  ${this.hass.localize(\n                    \"ui.panel.config.hardware.available_hardware.attributes\"\n                  )}:\n                </span>\n                <pre>${dump(device.attributes, { indent: 2 })}</pre>\n              </div>\n            </ha-expansion-panel>\n          `\n        )}\n      </ha-dialog>\n    `;\n  }\n\n  private _handleSearchChange(ev: CustomEvent) {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyle,\n      haStyleDialog,\n      css`\n        ha-icon-button {\n          position: absolute;\n          right: 16px;\n          top: 10px;\n          text-decoration: none;\n          color: var(--primary-text-color);\n        }\n        h2 {\n          margin: 18px 42px 0 18px;\n          color: var(--primary-text-color);\n        }\n        ha-expansion-panel {\n          margin: 4px 0;\n        }\n        pre,\n        code {\n          background-color: var(--markdown-code-background-color, none);\n          border-radius: 3px;\n        }\n        pre {\n          padding: 16px;\n          overflow: auto;\n          line-height: 1.45;\n          font-family: var(--code-font-family, monospace);\n        }\n        code {\n          font-size: 85%;\n          padding: 0.2em 0.4em;\n        }\n        search-input {\n          margin: 8px 16px 0;\n          display: block;\n        }\n        .device-property {\n          display: flex;\n          justify-content: space-between;\n        }\n        .attributes {\n          margin-top: 12px;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-dialog-hardware-available\": DialogHardwareAvailable;\n  }\n}\n"],"mappings":"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D,IAAI,CAACsB,MAAM,CAACW,UAAU,EAAE;UAAEoC,MAAM,EAAE;QAAE,CAAC,CAAE;AAC9D;AACA;AACA,WACQ,CAAE;AACV;AACA,KAAK;MACH;IAAC;MAAAxB,IAAA;MAAAG,GAAA;MAAAC,KAAA,EAED,SAAAkB,oBAA4BG,EAAe,EAAE;QAC3C,IAAI,CAACN,OAAO,GAAGM,EAAE,CAACC,MAAM,CAACtB,KAAK;MAChC;IAAC;MAAAJ,IAAA;MAAA2B,MAAA;MAAAxB,GAAA;MAAAC,KAAA,EAED,SAAAwB,OAAA,EAAoC;QAClC,OAAO,CACL3D,OAAO,EACPC,aAAa,EACbd,GAAI;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,CACF;MACH;IAAC;EAAA;AAAA,GAxKmCE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}