{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\n/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { AriaModalController } from '@vaadin/a11y-base/src/aria-modal-controller.js';\nimport { FocusRestorationController } from '@vaadin/a11y-base/src/focus-restoration-controller.js';\nimport { FocusTrapController } from '@vaadin/a11y-base/src/focus-trap-controller.js';\nimport { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n */\nexport var OverlayFocusMixin = function OverlayFocusMixin(superClass) {\n  return /*#__PURE__*/function (_ControllerMixin) {\n    _inherits(OverlayFocusMixin, _ControllerMixin);\n    function OverlayFocusMixin() {\n      var _this;\n      _classCallCheck(this, OverlayFocusMixin);\n      _this = _callSuper(this, OverlayFocusMixin);\n      _this.__ariaModalController = new AriaModalController(_assertThisInitialized(_this));\n      _this.__focusTrapController = new FocusTrapController(_assertThisInitialized(_this));\n      _this.__focusRestorationController = new FocusRestorationController();\n      return _this;\n    }\n\n    /** @protected */\n    _createClass(OverlayFocusMixin, [{\n      key: \"ready\",\n      value: function ready() {\n        _get(_getPrototypeOf(OverlayFocusMixin.prototype), \"ready\", this).call(this);\n        this.addController(this.__ariaModalController);\n        this.addController(this.__focusTrapController);\n        this.addController(this.__focusRestorationController);\n      }\n\n      /**\n       * Release focus and restore focus after the overlay is closed.\n       *\n       * @protected\n       */\n    }, {\n      key: \"_resetFocus\",\n      value: function _resetFocus() {\n        if (this.focusTrap) {\n          this.__ariaModalController.close();\n          this.__focusTrapController.releaseFocus();\n        }\n        if (this.restoreFocusOnClose && this._shouldRestoreFocus()) {\n          this.__focusRestorationController.restoreFocus();\n        }\n      }\n\n      /**\n       * Save the previously focused node when the overlay starts to open.\n       *\n       * @protected\n       */\n    }, {\n      key: \"_saveFocus\",\n      value: function _saveFocus() {\n        if (this.restoreFocusOnClose) {\n          this.__focusRestorationController.saveFocus(this.restoreFocusNode);\n        }\n      }\n\n      /**\n       * Trap focus within the overlay after opening has completed.\n       *\n       * @protected\n       */\n    }, {\n      key: \"_trapFocus\",\n      value: function _trapFocus() {\n        if (this.focusTrap) {\n          this.__ariaModalController.showModal();\n          this.__focusTrapController.trapFocus(this.$.overlay);\n        }\n      }\n\n      /**\n       * Returns true if focus is still inside the overlay or on the body element,\n       * otherwise false.\n       *\n       * Focus shouldn't be restored if it's been moved elsewhere by another\n       * component or as a result of a user interaction e.g. the user clicked\n       * on a button outside the overlay while the overlay was open.\n       *\n       * @protected\n       * @return {boolean}\n       */\n    }, {\n      key: \"_shouldRestoreFocus\",\n      value: function _shouldRestoreFocus() {\n        var activeElement = getDeepActiveElement();\n        return activeElement === document.body || this._deepContains(activeElement);\n      }\n\n      /**\n       * Returns true if the overlay contains the given node,\n       * including those within shadow DOM trees.\n       *\n       * @param {Node} node\n       * @return {boolean}\n       * @protected\n       */\n    }, {\n      key: \"_deepContains\",\n      value: function _deepContains(node) {\n        if (this.contains(node)) {\n          return true;\n        }\n        var n = node;\n        var doc = node.ownerDocument;\n        // Walk from node to `this` or `document`\n        while (n && n !== doc && n !== this) {\n          n = n.parentNode || n.host;\n        }\n        return n === this;\n      }\n    }], [{\n      key: \"properties\",\n      get: function get() {\n        return {\n          /**\n           * When true, opening the overlay moves focus to the first focusable child,\n           * or to the overlay part with tabindex if there are no focusable children.\n           * @attr {boolean} focus-trap\n           */\n          focusTrap: {\n            type: Boolean,\n            value: false\n          },\n          /**\n           * Set to true to enable restoring of focus when overlay is closed.\n           * @attr {boolean} restore-focus-on-close\n           */\n          restoreFocusOnClose: {\n            type: Boolean,\n            value: false\n          },\n          /**\n           * Set to specify the element which should be focused on overlay close,\n           * if `restoreFocusOnClose` is set to true.\n           * @type {HTMLElement}\n           */\n          restoreFocusNode: {\n            type: HTMLElement\n          }\n        };\n      }\n    }]);\n    return OverlayFocusMixin;\n  }(ControllerMixin(superClass));\n};","map":{"version":3,"names":["AriaModalController","FocusRestorationController","FocusTrapController","getDeepActiveElement","ControllerMixin","OverlayFocusMixin","superClass","_ControllerMixin","_inherits","_this","_classCallCheck","_callSuper","__ariaModalController","_assertThisInitialized","__focusTrapController","__focusRestorationController","_createClass","key","value","ready","_get","_getPrototypeOf","prototype","call","addController","_resetFocus","focusTrap","close","releaseFocus","restoreFocusOnClose","_shouldRestoreFocus","restoreFocus","_saveFocus","saveFocus","restoreFocusNode","_trapFocus","showModal","trapFocus","$","overlay","activeElement","document","body","_deepContains","node","contains","n","doc","ownerDocument","parentNode","host","get","type","Boolean","HTMLElement"],"sources":["/workspaces/frontend/node_modules/@vaadin/overlay/src/vaadin-overlay-focus-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\nimport { AriaModalController } from '@vaadin/a11y-base/src/aria-modal-controller.js';\nimport { FocusRestorationController } from '@vaadin/a11y-base/src/focus-restoration-controller.js';\nimport { FocusTrapController } from '@vaadin/a11y-base/src/focus-trap-controller.js';\nimport { getDeepActiveElement } from '@vaadin/a11y-base/src/focus-utils.js';\nimport { ControllerMixin } from '@vaadin/component-base/src/controller-mixin.js';\n\n/**\n * @polymerMixin\n * @mixes ControllerMixin\n */\nexport const OverlayFocusMixin = (superClass) =>\n  class OverlayFocusMixin extends ControllerMixin(superClass) {\n    static get properties() {\n      return {\n        /**\n         * When true, opening the overlay moves focus to the first focusable child,\n         * or to the overlay part with tabindex if there are no focusable children.\n         * @attr {boolean} focus-trap\n         */\n        focusTrap: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Set to true to enable restoring of focus when overlay is closed.\n         * @attr {boolean} restore-focus-on-close\n         */\n        restoreFocusOnClose: {\n          type: Boolean,\n          value: false,\n        },\n\n        /**\n         * Set to specify the element which should be focused on overlay close,\n         * if `restoreFocusOnClose` is set to true.\n         * @type {HTMLElement}\n         */\n        restoreFocusNode: {\n          type: HTMLElement,\n        },\n      };\n    }\n\n    constructor() {\n      super();\n\n      this.__ariaModalController = new AriaModalController(this);\n      this.__focusTrapController = new FocusTrapController(this);\n      this.__focusRestorationController = new FocusRestorationController();\n    }\n\n    /** @protected */\n    ready() {\n      super.ready();\n\n      this.addController(this.__ariaModalController);\n      this.addController(this.__focusTrapController);\n      this.addController(this.__focusRestorationController);\n    }\n\n    /**\n     * Release focus and restore focus after the overlay is closed.\n     *\n     * @protected\n     */\n    _resetFocus() {\n      if (this.focusTrap) {\n        this.__ariaModalController.close();\n        this.__focusTrapController.releaseFocus();\n      }\n\n      if (this.restoreFocusOnClose && this._shouldRestoreFocus()) {\n        this.__focusRestorationController.restoreFocus();\n      }\n    }\n\n    /**\n     * Save the previously focused node when the overlay starts to open.\n     *\n     * @protected\n     */\n    _saveFocus() {\n      if (this.restoreFocusOnClose) {\n        this.__focusRestorationController.saveFocus(this.restoreFocusNode);\n      }\n    }\n\n    /**\n     * Trap focus within the overlay after opening has completed.\n     *\n     * @protected\n     */\n    _trapFocus() {\n      if (this.focusTrap) {\n        this.__ariaModalController.showModal();\n        this.__focusTrapController.trapFocus(this.$.overlay);\n      }\n    }\n\n    /**\n     * Returns true if focus is still inside the overlay or on the body element,\n     * otherwise false.\n     *\n     * Focus shouldn't be restored if it's been moved elsewhere by another\n     * component or as a result of a user interaction e.g. the user clicked\n     * on a button outside the overlay while the overlay was open.\n     *\n     * @protected\n     * @return {boolean}\n     */\n    _shouldRestoreFocus() {\n      const activeElement = getDeepActiveElement();\n      return activeElement === document.body || this._deepContains(activeElement);\n    }\n\n    /**\n     * Returns true if the overlay contains the given node,\n     * including those within shadow DOM trees.\n     *\n     * @param {Node} node\n     * @return {boolean}\n     * @protected\n     */\n    _deepContains(node) {\n      if (this.contains(node)) {\n        return true;\n      }\n      let n = node;\n      const doc = node.ownerDocument;\n      // Walk from node to `this` or `document`\n      while (n && n !== doc && n !== this) {\n        n = n.parentNode || n.host;\n      }\n      return n === this;\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}