{"ast":null,"code":"import _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _wrapNativeSuper from \"@babel/runtime/helpers/wrapNativeSuper\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n/**\n * An event fired by a context requester to signal it desires a specified context with the given key.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * method to the callback which consumers can invoke to indicate they no longer wish to receive these updates.\n *\n * If no `subscribe` value is present in the event, then the provider can assume that this is a 'one time'\n * request for the context and can therefore not track the consumer.\n */\nexport var ContextRequestEvent = /*#__PURE__*/function (_Event) {\n  _inherits(ContextRequestEvent, _Event);\n  /**\n   *\n   * @param context the context key to request\n   * @param callback the callback that should be invoked when the context with the specified key is available\n   * @param subscribe when, true indicates we want to subscribe to future updates\n   */\n  function ContextRequestEvent(context, callback, subscribe) {\n    var _this;\n    _classCallCheck(this, ContextRequestEvent);\n    _this = _callSuper(this, ContextRequestEvent, ['context-request', {\n      bubbles: true,\n      composed: true\n    }]);\n    _this.context = context;\n    _this.callback = callback;\n    _this.subscribe = subscribe !== null && subscribe !== void 0 ? subscribe : false;\n    return _this;\n  }\n  return _createClass(ContextRequestEvent);\n}( /*#__PURE__*/_wrapNativeSuper(Event));","map":{"version":3,"names":["ContextRequestEvent","_Event","_inherits","context","callback","subscribe","_this","_classCallCheck","_callSuper","bubbles","composed","_createClass","_wrapNativeSuper","Event"],"sources":["../../src/lib/context-request-event.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextType, Context} from './create-context.js';\n\ndeclare global {\n  interface HTMLElementEventMap {\n    /**\n     * A 'context-request' event can be emitted by any element which desires\n     * a context value to be injected by an external provider.\n     */\n    'context-request': ContextRequestEvent<Context<unknown, unknown>>;\n  }\n}\n\n/**\n * A callback which is provided by a context requester and is called with the value satisfying the request.\n * This callback can be called multiple times by context providers as the requested value is changed.\n */\nexport type ContextCallback<ValueType> = (\n  value: ValueType,\n  unsubscribe?: () => void\n) => void;\n\n/**\n * Interface definition for a ContextRequest\n */\nexport interface ContextRequest<C extends Context<unknown, unknown>> {\n  readonly context: C;\n  readonly callback: ContextCallback<ContextType<C>>;\n  readonly subscribe?: boolean;\n}\n\n/**\n * An event fired by a context requester to signal it desires a specified context with the given key.\n *\n * A provider should inspect the `context` property of the event to determine if it has a value that can\n * satisfy the request, calling the `callback` with the requested value if so.\n *\n * If the requested context event contains a truthy `subscribe` value, then a provider can call the callback\n * multiple times if the value is changed, if this is the case the provider should pass an `unsubscribe`\n * method to the callback which consumers can invoke to indicate they no longer wish to receive these updates.\n *\n * If no `subscribe` value is present in the event, then the provider can assume that this is a 'one time'\n * request for the context and can therefore not track the consumer.\n */\nexport class ContextRequestEvent<C extends Context<unknown, unknown>>\n  extends Event\n  implements ContextRequest<C>\n{\n  readonly context: C;\n  readonly callback: ContextCallback<ContextType<C>>;\n  readonly subscribe: boolean;\n\n  /**\n   *\n   * @param context the context key to request\n   * @param callback the callback that should be invoked when the context with the specified key is available\n   * @param subscribe when, true indicates we want to subscribe to future updates\n   */\n  constructor(\n    context: C,\n    callback: ContextCallback<ContextType<C>>,\n    subscribe?: boolean\n  ) {\n    super('context-request', {bubbles: true, composed: true});\n    this.context = context;\n    this.callback = callback;\n    this.subscribe = subscribe ?? false;\n  }\n}\n"],"mappings":";;;;;AAAA;;;;;AAoCA;;;;;;;;;;;;;AAaA,WAAaA,mBACX,0BAAAC,MAAA;EAAAC,SAAA,CAAAF,mBAAA,EAAAC,MAAA;EAOA;;;;;;EAMA,SAAAD,oBACEG,OAAU,EACVC,QAAyC,EACzCC,SAAmB;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAP,mBAAA;IAEnBM,KAAA,GAAAE,UAAA,OAAAR,mBAAA,GAAM,iBAAiB,EAAE;MAACS,OAAO,EAAE,IAAI;MAAEC,QAAQ,EAAE;IAAI,CAAC;IACxDJ,KAAA,CAAKH,OAAO,GAAGA,OAAO;IACtBG,KAAA,CAAKF,QAAQ,GAAGA,QAAQ;IACxBE,KAAA,CAAKD,SAAS,GAAGA,SAAS,aAATA,SAAS,cAATA,SAAS,GAAI,KAAK;IAAC,OAAAC,KAAA;EACtC;EAAC,OAAAK,YAAA,CAAAX,mBAAA;AAAA,gBAAAY,gBAAA,CAtBOC,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}