{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nexport let HaSettingsRow = _decorate([customElement(\"ha-settings-row\")], function (_initialize, _LitElement) {\n  class HaSettingsRow extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaSettingsRow,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"narrow\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        attribute: \"three-line\"\n      })],\n      key: \"threeLine\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <div\n          class=\"body\"\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div class=\"secondary\"><slot name=\"description\"></slot></div>\n        </div>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      .body {\n        padding-top: 8px;\n        padding-bottom: 8px;\n        padding-left: 0;\n        padding-inline-start: 0;\n        padding-right: 16x;\n        padding-inline-end: 16px;\n        overflow: hidden;\n        display: var(--layout-vertical_-_display);\n        flex-direction: var(--layout-vertical_-_flex-direction);\n        justify-content: var(--layout-center-justified_-_justify-content);\n        flex: var(--layout-flex_-_flex);\n        flex-basis: var(--layout-flex_-_flex-basis);\n      }\n      .body[three-line] {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n      .body > * {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n      .body > .secondary {\n        display: block;\n        padding-top: 4px;\n        font-family: var(\n          --mdc-typography-body2-font-family,\n          var(--mdc-typography-font-family, Roboto, sans-serif)\n        );\n        -webkit-font-smoothing: antialiased;\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        font-weight: var(--mdc-typography-body2-font-weight, 400);\n        line-height: normal;\n        color: var(--secondary-text-color);\n      }\n      .body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      .secondary {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","HaSettingsRow","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","type","Boolean","reflect","key","value","attribute","render","threeLine","static","styles"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-settings-row.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\n\n@customElement(\"ha-settings-row\")\nexport class HaSettingsRow extends LitElement {\n  @property({ type: Boolean, reflect: true }) public narrow = false;\n\n  @property({ type: Boolean, attribute: \"three-line\" })\n  public threeLine = false;\n\n  protected render(): TemplateResult {\n    return html`\n      <div class=\"prefix-wrap\">\n        <slot name=\"prefix\"></slot>\n        <div\n          class=\"body\"\n          ?two-line=${!this.threeLine}\n          ?three-line=${this.threeLine}\n        >\n          <slot name=\"heading\"></slot>\n          <div class=\"secondary\"><slot name=\"description\"></slot></div>\n        </div>\n      </div>\n      <div class=\"content\"><slot></slot></div>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: flex;\n        padding: 0 16px;\n        align-content: normal;\n        align-self: auto;\n        align-items: center;\n      }\n      .body {\n        padding-top: 8px;\n        padding-bottom: 8px;\n        padding-left: 0;\n        padding-inline-start: 0;\n        padding-right: 16x;\n        padding-inline-end: 16px;\n        overflow: hidden;\n        display: var(--layout-vertical_-_display);\n        flex-direction: var(--layout-vertical_-_flex-direction);\n        justify-content: var(--layout-center-justified_-_justify-content);\n        flex: var(--layout-flex_-_flex);\n        flex-basis: var(--layout-flex_-_flex-basis);\n      }\n      .body[three-line] {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n      .body > * {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n      .body > .secondary {\n        display: block;\n        padding-top: 4px;\n        font-family: var(\n          --mdc-typography-body2-font-family,\n          var(--mdc-typography-font-family, Roboto, sans-serif)\n        );\n        -webkit-font-smoothing: antialiased;\n        font-size: var(--mdc-typography-body2-font-size, 0.875rem);\n        font-weight: var(--mdc-typography-body2-font-weight, 400);\n        line-height: normal;\n        color: var(--secondary-text-color);\n      }\n      .body[two-line] {\n        min-height: calc(\n          var(--paper-item-body-two-line-min-height, 72px) - 16px\n        );\n        flex: 1;\n      }\n      .content {\n        display: contents;\n      }\n      :host(:not([narrow])) .content {\n        display: var(--settings-row-content-display, flex);\n        justify-content: flex-end;\n        flex: 1;\n        padding: 16px 0;\n      }\n      .content ::slotted(*) {\n        width: var(--settings-row-content-width);\n      }\n      :host([narrow]) {\n        align-items: normal;\n        flex-direction: column;\n        border-top: 1px solid var(--divider-color);\n        padding-bottom: 8px;\n      }\n      ::slotted(ha-switch) {\n        padding: 16px 0;\n      }\n      .secondary {\n        white-space: normal;\n      }\n      .prefix-wrap {\n        display: var(--settings-row-prefix-display);\n      }\n      :host([narrow]) .prefix-wrap {\n        display: flex;\n        align-items: center;\n      }\n    `;\n  }\n}\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-settings-row\": HaSettingsRow;\n  }\n}\n"],"mappings":";AAAA,SAASA,GAAG,EAAkBC,IAAI,EAAEC,UAAU,QAAwB,KAAK;AAC3E,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AAExD,WACaC,aAAa,GAAAC,SAAA,EADzBH,aAAa,CAAC,iBAAiB,CAAC,aAAAI,WAAA,EAAAC,WAAA;EAAjC,MACaH,aAAa,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EA0G9C;EAAC;IAAAI,CAAA,EA1GYN,aAAa;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GACvBV,QAAQ,CAAC;QAAEW,IAAI,EAAEC,OAAO;QAAEC,OAAO,EAAE;MAAK,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAC,UAAA,GAEhEV,QAAQ,CAAC;QAAEW,IAAI,EAAEC,OAAO;QAAEI,SAAS,EAAE;MAAa,CAAC,CAAC;MAAAF,GAAA;MAAAC,MAAA;QAAA,OAClC,KAAK;MAAA;IAAA;MAAAN,IAAA;MAAAK,GAAA;MAAAC,KAAA,EAExB,SAAAE,OAAA,EAAmC;QACjC,OAAOpB,IAAK;AAChB;AACA;AACA;AACA;AACA,sBAAsB,CAAC,IAAI,CAACqB,SAAU;AACtC,wBAAwB,IAAI,CAACA,SAAU;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;MAAAT,IAAA;MAAAU,MAAA;MAAAL,GAAA;MAAAC,KAAA,EAED,SAAAK,OAAA,EAAoC;QAClC,OAAOxB,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;MACH;IAAC;EAAA;AAAA,GAzGgCE,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}