{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nexport var getCloudTTSInfo = function getCloudTTSInfo(hass) {\n  return hass.callWS({\n    type: \"cloud/tts/info\"\n  });\n};\nexport var getCloudTtsLanguages = function getCloudTtsLanguages(info) {\n  var languages = [];\n  if (!info) {\n    return languages;\n  }\n  var seen = new Set();\n  var _iterator = _createForOfIteratorHelper(info.languages),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 1),\n        lang = _step$value[0];\n      if (seen.has(lang)) {\n        continue;\n      }\n      seen.add(lang);\n      languages.push(lang);\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return languages;\n};\nexport var getCloudTtsSupportedGenders = function getCloudTtsSupportedGenders(language, info, localize) {\n  var genders = [];\n  if (!info) {\n    return genders;\n  }\n  var _iterator2 = _createForOfIteratorHelper(info.languages),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        curLang = _step2$value[0],\n        gender = _step2$value[1];\n      if (curLang === language) {\n        genders.push([gender, gender === \"male\" || gender === \"female\" ? localize(\"ui.components.media-browser.tts.gender_\".concat(gender)) : gender]);\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return genders.sort(function (a, b) {\n    return caseInsensitiveStringCompare(a[1], b[1]);\n  });\n};","map":{"version":3,"names":["caseInsensitiveStringCompare","getCloudTTSInfo","hass","callWS","type","getCloudTtsLanguages","info","languages","seen","Set","_iterator","_createForOfIteratorHelper","_step","s","n","done","_step$value","_slicedToArray","value","lang","has","add","push","err","e","f","getCloudTtsSupportedGenders","language","localize","genders","_iterator2","_step2","_step2$value","curLang","gender","concat","sort","a","b"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/cloud/tts.ts"],"sourcesContent":["import { caseInsensitiveStringCompare } from \"../../common/string/compare\";\nimport { LocalizeFunc } from \"../../common/translations/localize\";\nimport { HomeAssistant } from \"../../types\";\n\nexport interface CloudTTSInfo {\n  languages: Array<[string, string]>;\n}\n\nexport const getCloudTTSInfo = (hass: HomeAssistant) =>\n  hass.callWS<CloudTTSInfo>({ type: \"cloud/tts/info\" });\n\nexport const getCloudTtsLanguages = (info?: CloudTTSInfo) => {\n  const languages: string[] = [];\n\n  if (!info) {\n    return languages;\n  }\n\n  const seen = new Set<string>();\n  for (const [lang] of info.languages) {\n    if (seen.has(lang)) {\n      continue;\n    }\n    seen.add(lang);\n    languages.push(lang);\n  }\n  return languages;\n};\n\nexport const getCloudTtsSupportedGenders = (\n  language: string,\n  info: CloudTTSInfo | undefined,\n  localize: LocalizeFunc\n) => {\n  const genders: Array<[string, string]> = [];\n\n  if (!info) {\n    return genders;\n  }\n\n  for (const [curLang, gender] of info.languages) {\n    if (curLang === language) {\n      genders.push([\n        gender,\n        gender === \"male\" || gender === \"female\"\n          ? localize(`ui.components.media-browser.tts.gender_${gender}`)\n          : gender,\n      ]);\n    }\n  }\n\n  return genders.sort((a, b) => caseInsensitiveStringCompare(a[1], b[1]));\n};\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,4BAA4B,QAAQ,6BAA6B;AAQ1E,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAeA,CAAIC,IAAmB;EAAA,OACjDA,IAAI,CAACC,MAAM,CAAe;IAAEC,IAAI,EAAE;EAAiB,CAAC,CAAC;AAAA;AAEvD,OAAO,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoBA,CAAIC,IAAmB,EAAK;EAC3D,IAAMC,SAAmB,GAAG,EAAE;EAE9B,IAAI,CAACD,IAAI,EAAE;IACT,OAAOC,SAAS;EAClB;EAEA,IAAMC,IAAI,GAAG,IAAIC,GAAG,CAAS,CAAC;EAAC,IAAAC,SAAA,GAAAC,0BAAA,CACVL,IAAI,CAACC,SAAS;IAAAK,KAAA;EAAA;IAAnC,KAAAF,SAAA,CAAAG,CAAA,MAAAD,KAAA,GAAAF,SAAA,CAAAI,CAAA,IAAAC,IAAA,GAAqC;MAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAAM,KAAA;QAAzBC,IAAI,GAAAH,WAAA;MACd,IAAIR,IAAI,CAACY,GAAG,CAACD,IAAI,CAAC,EAAE;QAClB;MACF;MACAX,IAAI,CAACa,GAAG,CAACF,IAAI,CAAC;MACdZ,SAAS,CAACe,IAAI,CAACH,IAAI,CAAC;IACtB;EAAC,SAAAI,GAAA;IAAAb,SAAA,CAAAc,CAAA,CAAAD,GAAA;EAAA;IAAAb,SAAA,CAAAe,CAAA;EAAA;EACD,OAAOlB,SAAS;AAClB,CAAC;AAED,OAAO,IAAMmB,2BAA2B,GAAG,SAA9BA,2BAA2BA,CACtCC,QAAgB,EAChBrB,IAA8B,EAC9BsB,QAAsB,EACnB;EACH,IAAMC,OAAgC,GAAG,EAAE;EAE3C,IAAI,CAACvB,IAAI,EAAE;IACT,OAAOuB,OAAO;EAChB;EAAC,IAAAC,UAAA,GAAAnB,0BAAA,CAE+BL,IAAI,CAACC,SAAS;IAAAwB,MAAA;EAAA;IAA9C,KAAAD,UAAA,CAAAjB,CAAA,MAAAkB,MAAA,GAAAD,UAAA,CAAAhB,CAAA,IAAAC,IAAA,GAAgD;MAAA,IAAAiB,YAAA,GAAAf,cAAA,CAAAc,MAAA,CAAAb,KAAA;QAApCe,OAAO,GAAAD,YAAA;QAAEE,MAAM,GAAAF,YAAA;MACzB,IAAIC,OAAO,KAAKN,QAAQ,EAAE;QACxBE,OAAO,CAACP,IAAI,CAAC,CACXY,MAAM,EACNA,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,QAAQ,GACpCN,QAAQ,2CAAAO,MAAA,CAA2CD,MAAM,CAAE,CAAC,GAC5DA,MAAM,CACX,CAAC;MACJ;IACF;EAAC,SAAAX,GAAA;IAAAO,UAAA,CAAAN,CAAA,CAAAD,GAAA;EAAA;IAAAO,UAAA,CAAAL,CAAA;EAAA;EAED,OAAOI,OAAO,CAACO,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;IAAA,OAAKtC,4BAA4B,CAACqC,CAAC,CAAC,CAAC,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;EAAA,EAAC;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}