{"ast":null,"code":"/* eslint-disable no-console */\n\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport { closeDialog, showDialog } from \"../dialogs/make-dialog-manager\";\nconst DEBUG = false;\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let historyPromise;\nlet historyResolve;\nexport const urlSyncMixin = superClass =>\n// Disable this functionality in the demo.\n__DEMO__ ? superClass : class extends superClass {\n  constructor(...args) {\n    super(...args);\n    this._ignoreNextPopState = false;\n    this._dialogClosedListener = ev => {\n      var _mainWindow$history$s3, _mainWindow$history$s4;\n      if (DEBUG) {\n        var _mainWindow$history$s, _mainWindow$history$s2;\n        console.log(\"dialog closed\", ev.detail.dialog);\n        console.log(\"open\", (_mainWindow$history$s = mainWindow.history.state) === null || _mainWindow$history$s === void 0 ? void 0 : _mainWindow$history$s.open, \"dialog\", (_mainWindow$history$s2 = mainWindow.history.state) === null || _mainWindow$history$s2 === void 0 ? void 0 : _mainWindow$history$s2.dialog);\n      }\n      // If not closed by navigating back, and not a new dialog is open, remove the open state from history\n      if ((_mainWindow$history$s3 = mainWindow.history.state) !== null && _mainWindow$history$s3 !== void 0 && _mainWindow$history$s3.open && ((_mainWindow$history$s4 = mainWindow.history.state) === null || _mainWindow$history$s4 === void 0 ? void 0 : _mainWindow$history$s4.dialog) === ev.detail.dialog) {\n        if (DEBUG) {\n          console.log(\"remove state\", ev.detail.dialog);\n        }\n        if (mainWindow.history.length) {\n          this._ignoreNextPopState = true;\n          historyPromise = new Promise(resolve => {\n            historyResolve = () => {\n              resolve();\n              historyResolve = undefined;\n              historyPromise = undefined;\n            };\n            mainWindow.history.back();\n          });\n        }\n      }\n    };\n    this._popstateChangeListener = ev => {\n      if (this._ignoreNextPopState) {\n        var _ev$state, _ev$state2;\n        if (history.length && ((_ev$state = ev.state) !== null && _ev$state !== void 0 && (_ev$state = _ev$state.oldState) !== null && _ev$state !== void 0 && _ev$state.replaced || ((_ev$state2 = ev.state) === null || _ev$state2 === void 0 || (_ev$state2 = _ev$state2.oldState) === null || _ev$state2 === void 0 ? void 0 : _ev$state2.dialogParams) === null)) {\n          // if the previous dialog was replaced, or we could not copy the params, and the current dialog is closed, we should also remove the previous dialog from history\n          if (DEBUG) {\n            console.log(\"remove old state\", ev.state.oldState);\n          }\n          mainWindow.history.back();\n          return;\n        }\n        if (DEBUG) {\n          console.log(\"ignore popstate\");\n        }\n        this._ignoreNextPopState = false;\n        if (historyResolve) {\n          historyResolve();\n        }\n        return;\n      }\n      if (ev.state && \"dialog\" in ev.state) {\n        if (DEBUG) {\n          console.log(\"popstate\", ev);\n        }\n        this._handleDialogStateChange(ev.state);\n      }\n      if (historyResolve) {\n        historyResolve();\n      }\n    };\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    if (mainWindow.history.length === 1) {\n      mainWindow.history.replaceState({\n        ...mainWindow.history.state,\n        root: true\n      }, \"\");\n    }\n    mainWindow.addEventListener(\"popstate\", this._popstateChangeListener);\n    this.addEventListener(\"dialog-closed\", this._dialogClosedListener);\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    mainWindow.removeEventListener(\"popstate\", this._popstateChangeListener);\n    this.removeEventListener(\"dialog-closed\", this._dialogClosedListener);\n  }\n  firstUpdated(changedProperties) {\n    var _mainWindow$history$s5;\n    super.firstUpdated(changedProperties);\n    if ((_mainWindow$history$s5 = mainWindow.history.state) !== null && _mainWindow$history$s5 !== void 0 && _mainWindow$history$s5.dialog) {\n      this._handleDialogStateChange(mainWindow.history.state);\n    }\n  }\n  async _handleDialogStateChange(state) {\n    if (DEBUG) {\n      console.log(\"handle state\", state);\n    }\n    if (!state.open) {\n      const closed = await closeDialog(state.dialog);\n      if (!closed) {\n        if (DEBUG) {\n          console.log(\"dialog could not be closed\");\n        }\n        // dialog could not be closed, push state again\n        mainWindow.history.pushState({\n          dialog: state.dialog,\n          open: true,\n          dialogParams: null,\n          oldState: null\n        }, \"\");\n        return;\n      }\n      if (state.oldState) {\n        if (DEBUG) {\n          console.log(\"handle old state\");\n        }\n        this._handleDialogStateChange(state.oldState);\n      }\n      return;\n    }\n    let shown = false;\n    if (state.open && state.dialogParams !== null) {\n      shown = await showDialog(this, this.shadowRoot, state.dialog, state.dialogParams);\n    }\n    if (!shown) {\n      // can't open dialog, update state\n      mainWindow.history.replaceState({\n        ...mainWindow.history.state,\n        open: false\n      }, \"\");\n    }\n  }\n};","map":{"version":3,"names":["mainWindow","closeDialog","showDialog","DEBUG","historyPromise","historyResolve","urlSyncMixin","superClass","__DEMO__","constructor","args","_ignoreNextPopState","_dialogClosedListener","ev","_mainWindow$history$s3","_mainWindow$history$s4","_mainWindow$history$s","_mainWindow$history$s2","console","log","detail","dialog","history","state","open","length","Promise","resolve","undefined","back","_popstateChangeListener","_ev$state","_ev$state2","oldState","replaced","dialogParams","_handleDialogStateChange","connectedCallback","replaceState","root","addEventListener","disconnectedCallback","removeEventListener","firstUpdated","changedProperties","_mainWindow$history$s5","closed","pushState","shown","shadowRoot"],"sources":["/workspaces/frontend/src/state/url-sync-mixin.ts"],"sourcesContent":["/* eslint-disable no-console */\nimport { PropertyValueMap, ReactiveElement } from \"lit\";\nimport { HASSDomEvent } from \"../common/dom/fire_event\";\nimport { mainWindow } from \"../common/dom/get_main_window\";\nimport {\n  closeDialog,\n  DialogClosedParams,\n  DialogState,\n  showDialog,\n} from \"../dialogs/make-dialog-manager\";\nimport { ProvideHassElement } from \"../mixins/provide-hass-lit-mixin\";\nimport { Constructor } from \"../types\";\n\nconst DEBUG = false;\n\n// eslint-disable-next-line import/no-mutable-exports\nexport let historyPromise: Promise<void> | undefined;\n\nlet historyResolve: undefined | (() => void);\n\nexport const urlSyncMixin = <\n  T extends Constructor<ReactiveElement & ProvideHassElement>,\n>(\n  superClass: T\n) =>\n  // Disable this functionality in the demo.\n  __DEMO__\n    ? superClass\n    : class extends superClass {\n        private _ignoreNextPopState = false;\n\n        public connectedCallback(): void {\n          super.connectedCallback();\n          if (mainWindow.history.length === 1) {\n            mainWindow.history.replaceState(\n              { ...mainWindow.history.state, root: true },\n              \"\"\n            );\n          }\n          mainWindow.addEventListener(\"popstate\", this._popstateChangeListener);\n          this.addEventListener(\"dialog-closed\", this._dialogClosedListener);\n        }\n\n        public disconnectedCallback(): void {\n          super.disconnectedCallback();\n          mainWindow.removeEventListener(\n            \"popstate\",\n            this._popstateChangeListener\n          );\n          this.removeEventListener(\"dialog-closed\", this._dialogClosedListener);\n        }\n\n        protected firstUpdated(\n          changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>\n        ): void {\n          super.firstUpdated(changedProperties);\n          if (mainWindow.history.state?.dialog) {\n            this._handleDialogStateChange(mainWindow.history.state);\n          }\n        }\n\n        private _dialogClosedListener = (\n          ev: HASSDomEvent<DialogClosedParams>\n        ) => {\n          if (DEBUG) {\n            console.log(\"dialog closed\", ev.detail.dialog);\n            console.log(\n              \"open\",\n              mainWindow.history.state?.open,\n              \"dialog\",\n              mainWindow.history.state?.dialog\n            );\n          }\n          // If not closed by navigating back, and not a new dialog is open, remove the open state from history\n          if (\n            mainWindow.history.state?.open &&\n            mainWindow.history.state?.dialog === ev.detail.dialog\n          ) {\n            if (DEBUG) {\n              console.log(\"remove state\", ev.detail.dialog);\n            }\n            if (mainWindow.history.length) {\n              this._ignoreNextPopState = true;\n              historyPromise = new Promise((resolve) => {\n                historyResolve = () => {\n                  resolve();\n                  historyResolve = undefined;\n                  historyPromise = undefined;\n                };\n                mainWindow.history.back();\n              });\n            }\n          }\n        };\n\n        private _popstateChangeListener = (ev: PopStateEvent) => {\n          if (this._ignoreNextPopState) {\n            if (\n              history.length &&\n              (ev.state?.oldState?.replaced ||\n                ev.state?.oldState?.dialogParams === null)\n            ) {\n              // if the previous dialog was replaced, or we could not copy the params, and the current dialog is closed, we should also remove the previous dialog from history\n              if (DEBUG) {\n                console.log(\"remove old state\", ev.state.oldState);\n              }\n              mainWindow.history.back();\n              return;\n            }\n            if (DEBUG) {\n              console.log(\"ignore popstate\");\n            }\n            this._ignoreNextPopState = false;\n            if (historyResolve) {\n              historyResolve();\n            }\n            return;\n          }\n          if (ev.state && \"dialog\" in ev.state) {\n            if (DEBUG) {\n              console.log(\"popstate\", ev);\n            }\n            this._handleDialogStateChange(ev.state);\n          }\n          if (historyResolve) {\n            historyResolve();\n          }\n        };\n\n        private async _handleDialogStateChange(state: DialogState) {\n          if (DEBUG) {\n            console.log(\"handle state\", state);\n          }\n          if (!state.open) {\n            const closed = await closeDialog(state.dialog);\n            if (!closed) {\n              if (DEBUG) {\n                console.log(\"dialog could not be closed\");\n              }\n              // dialog could not be closed, push state again\n              mainWindow.history.pushState(\n                {\n                  dialog: state.dialog,\n                  open: true,\n                  dialogParams: null,\n                  oldState: null,\n                },\n                \"\"\n              );\n              return;\n            }\n            if (state.oldState) {\n              if (DEBUG) {\n                console.log(\"handle old state\");\n              }\n              this._handleDialogStateChange(state.oldState);\n            }\n            return;\n          }\n          let shown = false;\n          if (state.open && state.dialogParams !== null) {\n            shown = await showDialog(\n              this,\n              this.shadowRoot!,\n              state.dialog,\n              state.dialogParams\n            );\n          }\n          if (!shown) {\n            // can't open dialog, update state\n            mainWindow.history.replaceState(\n              { ...mainWindow.history.state, open: false },\n              \"\"\n            );\n          }\n        }\n      };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}