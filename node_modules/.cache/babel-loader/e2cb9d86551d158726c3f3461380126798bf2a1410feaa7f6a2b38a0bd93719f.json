{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport './iron-control-state.js';\nimport { IronA11yKeysBehavior } from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport { dom } from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior IronButtonState\n */\nexport const IronButtonStateImpl = {\n  properties: {\n    /**\n     * If true, the user is currently holding down the button.\n     */\n    pressed: {\n      type: Boolean,\n      readOnly: true,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_pressedChanged'\n    },\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * If true, the button is a toggle and is currently in the active state.\n     */\n    active: {\n      type: Boolean,\n      value: false,\n      notify: true,\n      reflectToAttribute: true\n    },\n    /**\n     * True if the element is currently being pressed by a \"pointer,\" which\n     * is loosely defined as mouse or touch input (but specifically excluding\n     * keyboard input).\n     */\n    pointerDown: {\n      type: Boolean,\n      readOnly: true,\n      value: false\n    },\n    /**\n     * True if the input device that caused the element to receive focus\n     * was a keyboard.\n     */\n    receivedFocusFromKeyboard: {\n      type: Boolean,\n      readOnly: true\n    },\n    /**\n     * The aria attribute to be set if the button is a toggle and in the\n     * active state.\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-pressed',\n      observer: '_ariaActiveAttributeChanged'\n    }\n  },\n  listeners: {\n    down: '_downHandler',\n    up: '_upHandler',\n    tap: '_tapHandler'\n  },\n  observers: ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'enter:keydown': '_asyncClick',\n    'space:keydown': '_spaceKeyDownHandler',\n    'space:keyup': '_spaceKeyUpHandler'\n  },\n  _mouseEventRe: /^mouse/,\n  _tapHandler: function () {\n    if (this.toggles) {\n      // a tap is needed to toggle the active state\n      this._userActivate(!this.active);\n    } else {\n      this.active = false;\n    }\n  },\n  _focusChanged: function (focused) {\n    this._detectKeyboardFocus(focused);\n    if (!focused) {\n      this._setPressed(false);\n    }\n  },\n  _detectKeyboardFocus: function (focused) {\n    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);\n  },\n  // to emulate native checkbox, (de-)activations from a user interaction fire\n  // 'change' events\n  _userActivate: function (active) {\n    if (this.active !== active) {\n      this.active = active;\n      this.fire('change');\n    }\n  },\n  _downHandler: function (event) {\n    this._setPointerDown(true);\n    this._setPressed(true);\n    this._setReceivedFocusFromKeyboard(false);\n  },\n  _upHandler: function () {\n    this._setPointerDown(false);\n    this._setPressed(false);\n  },\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function (event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant( /** @type {Node} */target)) return;\n    keyboardEvent.preventDefault();\n    keyboardEvent.stopImmediatePropagation();\n    this._setPressed(true);\n  },\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function (event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant( /** @type {Node} */target)) return;\n    if (this.pressed) {\n      this._asyncClick();\n    }\n    this._setPressed(false);\n  },\n  // trigger click asynchronously, the asynchrony is useful to allow one\n  // event handler to unwind before triggering another event\n  _asyncClick: function () {\n    this.async(function () {\n      this.click();\n    }, 1);\n  },\n  // any of these changes are considered a change to button state\n\n  _pressedChanged: function (pressed) {\n    this._changedButtonState();\n  },\n  _ariaActiveAttributeChanged: function (value, oldValue) {\n    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {\n      this.removeAttribute(oldValue);\n    }\n  },\n  _activeChanged: function (active, ariaActiveAttribute) {\n    if (this.toggles) {\n      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');\n    } else {\n      this.removeAttribute(this.ariaActiveAttribute);\n    }\n    this._changedButtonState();\n  },\n  _controlStateChanged: function () {\n    if (this.disabled) {\n      this._setPressed(false);\n    } else {\n      this._changedButtonState();\n    }\n  },\n  // provide hook for follow-on behaviors to react to button-state\n\n  _changedButtonState: function () {\n    if (this._buttonStateChanged) {\n      this._buttonStateChanged(); // abstract\n    }\n  }\n};\n\n/** @polymerBehavior */\nexport const IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];","map":{"version":3,"names":["IronA11yKeysBehavior","dom","IronButtonStateImpl","properties","pressed","type","Boolean","readOnly","value","reflectToAttribute","observer","toggles","active","notify","pointerDown","receivedFocusFromKeyboard","ariaActiveAttribute","String","listeners","down","up","tap","observers","keyBindings","_mouseEventRe","_tapHandler","_userActivate","_focusChanged","focused","_detectKeyboardFocus","_setPressed","_setReceivedFocusFromKeyboard","fire","_downHandler","event","_setPointerDown","_upHandler","_spaceKeyDownHandler","keyboardEvent","detail","target","localTarget","isLightDescendant","preventDefault","stopImmediatePropagation","_spaceKeyUpHandler","_asyncClick","async","click","_pressedChanged","_changedButtonState","_ariaActiveAttributeChanged","oldValue","hasAttribute","removeAttribute","_activeChanged","setAttribute","_controlStateChanged","disabled","_buttonStateChanged","IronButtonState"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@polymer/iron-behaviors/iron-button-state.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport './iron-control-state.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * @demo demo/index.html\n * @polymerBehavior IronButtonState\n */\nexport const IronButtonStateImpl = {\n\n  properties: {\n\n    /**\n     * If true, the user is currently holding down the button.\n     */\n    pressed: {\n      type: Boolean,\n      readOnly: true,\n      value: false,\n      reflectToAttribute: true,\n      observer: '_pressedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {type: Boolean, value: false, reflectToAttribute: true},\n\n    /**\n     * If true, the button is a toggle and is currently in the active state.\n     */\n    active:\n        {type: Boolean, value: false, notify: true, reflectToAttribute: true},\n\n    /**\n     * True if the element is currently being pressed by a \"pointer,\" which\n     * is loosely defined as mouse or touch input (but specifically excluding\n     * keyboard input).\n     */\n    pointerDown: {type: Boolean, readOnly: true, value: false},\n\n    /**\n     * True if the input device that caused the element to receive focus\n     * was a keyboard.\n     */\n    receivedFocusFromKeyboard: {type: Boolean, readOnly: true},\n\n    /**\n     * The aria attribute to be set if the button is a toggle and in the\n     * active state.\n     */\n    ariaActiveAttribute: {\n      type: String,\n      value: 'aria-pressed',\n      observer: '_ariaActiveAttributeChanged'\n    }\n  },\n\n  listeners: {down: '_downHandler', up: '_upHandler', tap: '_tapHandler'},\n\n  observers:\n      ['_focusChanged(focused)', '_activeChanged(active, ariaActiveAttribute)'],\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'enter:keydown': '_asyncClick',\n    'space:keydown': '_spaceKeyDownHandler',\n    'space:keyup': '_spaceKeyUpHandler',\n  },\n\n  _mouseEventRe: /^mouse/,\n\n  _tapHandler: function() {\n    if (this.toggles) {\n      // a tap is needed to toggle the active state\n      this._userActivate(!this.active);\n    } else {\n      this.active = false;\n    }\n  },\n\n  _focusChanged: function(focused) {\n    this._detectKeyboardFocus(focused);\n\n    if (!focused) {\n      this._setPressed(false);\n    }\n  },\n\n  _detectKeyboardFocus: function(focused) {\n    this._setReceivedFocusFromKeyboard(!this.pointerDown && focused);\n  },\n\n  // to emulate native checkbox, (de-)activations from a user interaction fire\n  // 'change' events\n  _userActivate: function(active) {\n    if (this.active !== active) {\n      this.active = active;\n      this.fire('change');\n    }\n  },\n\n  _downHandler: function(event) {\n    this._setPointerDown(true);\n    this._setPressed(true);\n    this._setReceivedFocusFromKeyboard(false);\n  },\n\n  _upHandler: function() {\n    this._setPointerDown(false);\n    this._setPressed(false);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyDownHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    keyboardEvent.preventDefault();\n    keyboardEvent.stopImmediatePropagation();\n    this._setPressed(true);\n  },\n\n  /**\n   * @param {!KeyboardEvent} event .\n   */\n  _spaceKeyUpHandler: function(event) {\n    var keyboardEvent = event.detail.keyboardEvent;\n    var target = dom(keyboardEvent).localTarget;\n\n    // Ignore the event if this is coming from a focused light child, since that\n    // element will deal with it.\n    if (this.isLightDescendant(/** @type {Node} */ (target)))\n      return;\n\n    if (this.pressed) {\n      this._asyncClick();\n    }\n    this._setPressed(false);\n  },\n\n  // trigger click asynchronously, the asynchrony is useful to allow one\n  // event handler to unwind before triggering another event\n  _asyncClick: function() {\n    this.async(function() {\n      this.click();\n    }, 1);\n  },\n\n  // any of these changes are considered a change to button state\n\n  _pressedChanged: function(pressed) {\n    this._changedButtonState();\n  },\n\n  _ariaActiveAttributeChanged: function(value, oldValue) {\n    if (oldValue && oldValue != value && this.hasAttribute(oldValue)) {\n      this.removeAttribute(oldValue);\n    }\n  },\n\n  _activeChanged: function(active, ariaActiveAttribute) {\n    if (this.toggles) {\n      this.setAttribute(this.ariaActiveAttribute, active ? 'true' : 'false');\n    } else {\n      this.removeAttribute(this.ariaActiveAttribute);\n    }\n    this._changedButtonState();\n  },\n\n  _controlStateChanged: function() {\n    if (this.disabled) {\n      this._setPressed(false);\n    } else {\n      this._changedButtonState();\n    }\n  },\n\n  // provide hook for follow-on behaviors to react to button-state\n\n  _changedButtonState: function() {\n    if (this._buttonStateChanged) {\n      this._buttonStateChanged();  // abstract\n    }\n  }\n\n};\n\n/** @polymerBehavior */\nexport const IronButtonState = [IronA11yKeysBehavior, IronButtonStateImpl];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}