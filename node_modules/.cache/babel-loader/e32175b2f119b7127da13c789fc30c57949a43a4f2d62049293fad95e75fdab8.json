{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button\";\nconst mdiCheck = \"M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z\";\nconst mdiClose = \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z\";\nconst mdiDotsVertical = \"M12,16A2,2 0 0,1 14,18A2,2 0 0,1 12,20A2,2 0 0,1 10,18A2,2 0 0,1 12,16M12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12A2,2 0 0,1 12,10M12,4A2,2 0 0,1 14,6A2,2 0 0,1 12,8A2,2 0 0,1 10,6A2,2 0 0,1 12,4Z\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { navigate } from \"../../../../common/navigate\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-dialog-header\";\nimport \"../../../../components/ha-yaml-editor\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport \"../../components/hui-entity-editor\";\nimport { DEFAULT_VIEW_LAYOUT, PANEL_VIEW_LAYOUT, VIEWS_NO_BADGE_SUPPORT } from \"../../views/const\";\nimport { addView, deleteView, replaceView } from \"../config-util\";\nimport \"../hui-badge-preview\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport \"./hui-view-editor\";\nimport \"./hui-view-visibility-editor\";\nimport { isStrategyView } from \"../../../../data/lovelace/config/view\";\nexport let HuiDialogEditView = _decorate([customElement(\"hui-dialog-edit-view\")], function (_initialize, _LitElement) {\n  class HuiDialogEditView extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiDialogEditView,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_badges\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_cards\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_saving\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_curTab\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_dirty\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_yamlMode\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-yaml-editor\")],\n      key: \"_editor\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_curTabIndex\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"get\",\n      key: \"_type\",\n      value: function _type() {\n        if (!this._config) {\n          return DEFAULT_VIEW_LAYOUT;\n        }\n        return this._config.panel ? PANEL_VIEW_LAYOUT : this._config.type || DEFAULT_VIEW_LAYOUT;\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProperties) {\n        if (this._yamlMode && changedProperties.has(\"_yamlMode\")) {\n          var _this$_editor;\n          const viewConfig = {\n            ...this._config,\n            badges: this._badges\n          };\n          (_this$_editor = this._editor) === null || _this$_editor === void 0 || _this$_editor.setValue(viewConfig);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._params = params;\n        if (this._params.viewIndex === undefined) {\n          this._config = {};\n          this._badges = [];\n          this._cards = [];\n          this._dirty = false;\n          return;\n        }\n        const view = this._params.lovelace.config.views[this._params.viewIndex];\n        // Todo : add better support for strategy views\n        if (isStrategyView(view)) {\n          const {\n            strategy,\n            ...viewConfig\n          } = view;\n          this._config = viewConfig;\n          this._badges = [];\n          this._cards = [];\n          return;\n        }\n        const {\n          cards,\n          badges,\n          ...viewConfig\n        } = view;\n        this._config = viewConfig;\n        this._badges = badges ? processEditorEntities(badges) : [];\n        this._cards = cards;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._curTabIndex = 0;\n        this._params = undefined;\n        this._config = {};\n        this._badges = [];\n        this._yamlMode = false;\n        this._dirty = false;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"get\",\n      key: \"_viewConfigTitle\",\n      value: function _viewConfigTitle() {\n        if (!this._config || !this._config.title) {\n          return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.header\");\n        }\n        return this.hass.localize(\"ui.panel.lovelace.editor.edit_view.header_name\", {\n          name: this._config.title\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$_badges;\n        if (!this._params) {\n          return nothing;\n        }\n        let content;\n        if (this._yamlMode) {\n          content = html`\n        <ha-yaml-editor\n          .hass=${this.hass}\n          dialogInitialFocus\n          @value-changed=${this._viewYamlChanged}\n        ></ha-yaml-editor>\n      `;\n        } else {\n          switch (this._curTab) {\n            case \"tab-settings\":\n              content = html`\n            <hui-view-editor\n              .isNew=${this._params.viewIndex === undefined}\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-config-changed=${this._viewConfigChanged}\n            ></hui-view-editor>\n          `;\n              break;\n            case \"tab-badges\":\n              content = html`\n            ${(_this$_badges = this._badges) !== null && _this$_badges !== void 0 && _this$_badges.length ? html`\n                  ${VIEWS_NO_BADGE_SUPPORT.includes(this._type) ? html`\n                        <ha-alert alert-type=\"warning\">\n                          ${this.hass.localize(\"ui.panel.lovelace.editor.edit_badges.view_no_badges\")}\n                        </ha-alert>\n                      ` : \"\"}\n                  <div class=\"preview-badges\">\n                    ${this._badges.map(badgeConfig => html`\n                        <hui-badge-preview\n                          .hass=${this.hass}\n                          .config=${badgeConfig}\n                        ></hui-badge-preview>\n                      `)}\n                  </div>\n                ` : \"\"}\n            <hui-entity-editor\n              .hass=${this.hass}\n              .entities=${this._badges}\n              @entities-changed=${this._badgesChanged}\n            ></hui-entity-editor>\n          `;\n              break;\n            case \"tab-visibility\":\n              content = html`\n            <hui-view-visibility-editor\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-visibility-changed=${this._viewVisibilityChanged}\n            ></hui-view-visibility-editor>\n          `;\n              break;\n            case \"tab-cards\":\n              content = html` Cards `;\n              break;\n          }\n        }\n        return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this.closeDialog}\n        .heading=${this._viewConfigTitle}\n        class=${classMap({\n          \"yaml-mode\": this._yamlMode\n        })}\n      >\n        <ha-dialog-header show-border slot=\"heading\">\n          <ha-icon-button\n            slot=\"navigationIcon\"\n            dialogAction=\"cancel\"\n            .label=${this.hass.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n          <h2 slot=\"title\">${this._viewConfigTitle}</h2>\n          <ha-button-menu\n            slot=\"actionItems\"\n            fixed\n            corner=\"BOTTOM_END\"\n            menuCorner=\"END\"\n            @action=${this._handleAction}\n            @closed=${stopPropagation}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.edit_ui\")}\n              ${!this._yamlMode ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>` : ``}\n            </mwc-list-item>\n\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.edit_yaml\")}\n              ${this._yamlMode ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>` : ``}\n            </mwc-list-item>\n          </ha-button-menu>\n          ${!this._yamlMode ? html`<paper-tabs\n                scrollable\n                hide-scroll-buttons\n                .selected=${this._curTabIndex}\n                @selected-item-changed=${this._handleTabSelected}\n              >\n                <paper-tab id=\"tab-settings\" dialogInitialFocus\n                  >${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.tab_settings\")}</paper-tab\n                >\n                <paper-tab id=\"tab-badges\"\n                  >${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.tab_badges\")}</paper-tab\n                >\n                <paper-tab id=\"tab-visibility\"\n                  >${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.tab_visibility\")}</paper-tab\n                >\n              </paper-tabs>` : \"\"}\n        </ha-dialog-header>\n        ${content}\n        ${this._params.viewIndex !== undefined ? html`\n              <mwc-button\n                class=\"warning\"\n                slot=\"secondaryAction\"\n                @click=${this._deleteConfirm}\n              >\n                ${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.delete\")}\n              </mwc-button>\n            ` : \"\"}\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\"\n          >${this.hass.localize(\"ui.common.cancel\")}</mwc-button\n        >\n        <mwc-button\n          slot=\"primaryAction\"\n          ?disabled=${!this._config || this._saving || !this._dirty}\n          @click=${this._save}\n        >\n          ${this._saving ? html`<ha-circular-progress\n                indeterminate\n                size=\"small\"\n                aria-label=\"Saving\"\n              ></ha-circular-progress>` : \"\"}\n          ${this.hass.localize(\"ui.common.save\")}</mwc-button\n        >\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleAction\",\n      value: async function _handleAction(ev) {\n        ev.stopPropagation();\n        ev.preventDefault();\n        switch (ev.detail.index) {\n          case 0:\n            this._yamlMode = false;\n            break;\n          case 1:\n            this._yamlMode = true;\n            break;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_delete\",\n      value: async function _delete() {\n        if (!this._params) {\n          return;\n        }\n        try {\n          await this._params.lovelace.saveConfig(deleteView(this._params.lovelace.config, this._params.viewIndex));\n          this.closeDialog();\n          navigate(`/${window.location.pathname.split(\"/\")[1]}`);\n        } catch (err) {\n          showAlertDialog(this, {\n            text: `Deleting failed: ${err.message}`\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteConfirm\",\n      value: function _deleteConfirm() {\n        var _this$_cards, _this$_cards2, _this$_config, _this$_cards3;\n        showConfirmationDialog(this, {\n          title: this.hass.localize(`ui.panel.lovelace.views.confirm_delete${(_this$_cards = this._cards) !== null && _this$_cards !== void 0 && _this$_cards.length ? `_existing_cards` : \"\"}`),\n          text: this.hass.localize(`ui.panel.lovelace.views.confirm_delete${(_this$_cards2 = this._cards) !== null && _this$_cards2 !== void 0 && _this$_cards2.length ? \"_existing_cards\" : \"\"}_text`, {\n            name: ((_this$_config = this._config) === null || _this$_config === void 0 ? void 0 : _this$_config.title) || \"Unnamed view\",\n            number: ((_this$_cards3 = this._cards) === null || _this$_cards3 === void 0 ? void 0 : _this$_cards3.length) || 0\n          }),\n          confirm: () => this._delete()\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleTabSelected\",\n      value: function _handleTabSelected(ev) {\n        if (!ev.detail.value) {\n          return;\n        }\n        this._curTab = ev.detail.value.id;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_save\",\n      value: async function _save() {\n        if (!this._params || !this._config) {\n          return;\n        }\n        if (!this._isConfigChanged()) {\n          this.closeDialog();\n          return;\n        }\n        this._saving = true;\n        const viewConf = {\n          ...this._config,\n          badges: this._badges,\n          cards: this._cards\n        };\n        const lovelace = this._params.lovelace;\n        try {\n          await lovelace.saveConfig(this._creatingView ? addView(this.hass, lovelace.config, viewConf) : replaceView(this.hass, lovelace.config, this._params.viewIndex, viewConf));\n          if (this._params.saveCallback) {\n            this._params.saveCallback(this._params.viewIndex || lovelace.config.views.length, viewConf);\n          }\n          this.closeDialog();\n        } catch (err) {\n          showAlertDialog(this, {\n            text: `${this.hass.localize(\"ui.panel.lovelace.editor.edit_view.saving_failed\")}: ${err.message}`\n          });\n        } finally {\n          this._saving = false;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_viewConfigChanged\",\n      value: function _viewConfigChanged(ev) {\n        if (ev.detail && ev.detail.config && !deepEqual(this._config, ev.detail.config)) {\n          this._config = ev.detail.config;\n          this._dirty = true;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_viewVisibilityChanged\",\n      value: function _viewVisibilityChanged(ev) {\n        if (ev.detail.visible && this._config) {\n          this._config.visible = ev.detail.visible;\n        }\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_badgesChanged\",\n      value: function _badgesChanged(ev) {\n        if (!this._badges || !this.hass || !ev.detail || !ev.detail.entities) {\n          return;\n        }\n        this._badges = processEditorEntities(ev.detail.entities);\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_viewYamlChanged\",\n      value: function _viewYamlChanged(ev) {\n        ev.stopPropagation();\n        if (!ev.detail.isValid) {\n          return;\n        }\n        const {\n          badges = [],\n          ...config\n        } = ev.detail.value;\n        this._config = config;\n        this._badges = badges;\n        this._dirty = true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_isConfigChanged\",\n      value: function _isConfigChanged() {\n        return this._creatingView || JSON.stringify(this._config) !== JSON.stringify(this._params.lovelace.config.views[this._params.viewIndex]);\n      }\n    }, {\n      kind: \"get\",\n      key: \"_creatingView\",\n      value: function _creatingView() {\n        return this._params.viewIndex === undefined;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyleDialog, css`\n        ha-dialog {\n          /* Set the top top of the dialog to a fixed position, so it doesnt jump when the content changes size */\n          --vertical-align-dialog: flex-start;\n          --dialog-surface-margin-top: 40px;\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* When in fullscreen dialog should be attached to top */\n          ha-dialog {\n            --dialog-surface-margin-top: 0px;\n          }\n        }\n        ha-dialog.yaml-mode {\n          --dialog-content-padding: 0;\n        }\n        h2 {\n          margin: 0;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          color: var(--primary-text-color);\n          text-transform: uppercase;\n          padding: 0 20px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n          margin-inline-end: auto;\n          margin-inline-start: initial;\n        }\n        ha-circular-progress {\n          display: none;\n        }\n        ha-circular-progress[indeterminate] {\n          display: block;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        .hidden {\n          display: none;\n        }\n        .error {\n          color: var(--error-color);\n          border-bottom: 1px solid var(--error-color);\n        }\n        .preview-badges {\n          display: flex;\n          justify-content: center;\n          margin: 12px 16px;\n          flex-wrap: wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 600px;\n          }\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiCheck","mdiClose","mdiDotsVertical","css","html","LitElement","nothing","customElement","property","query","state","classMap","fireEvent","stopPropagation","navigate","deepEqual","showAlertDialog","showConfirmationDialog","haStyleDialog","DEFAULT_VIEW_LAYOUT","PANEL_VIEW_LAYOUT","VIEWS_NO_BADGE_SUPPORT","addView","deleteView","replaceView","processEditorEntities","isStrategyView","HuiDialogEditView","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","_type","_config","panel","type","updated","changedProperties","_yamlMode","has","_this$_editor","viewConfig","badges","_badges","_editor","setValue","showDialog","params","_params","viewIndex","undefined","_cards","_dirty","view","lovelace","config","views","strategy","cards","closeDialog","_curTabIndex","dialog","localName","_viewConfigTitle","title","hass","localize","name","render","_this$_badges","content","_viewYamlChanged","_curTab","_viewConfigChanged","length","includes","map","badgeConfig","_badgesChanged","_viewVisibilityChanged","_handleAction","_handleTabSelected","_deleteConfirm","_saving","_save","ev","preventDefault","detail","index","_delete","saveConfig","window","location","pathname","split","err","text","message","_this$_cards","_this$_cards2","_this$_config","_this$_cards3","number","confirm","id","_isConfigChanged","viewConf","_creatingView","saveCallback","visible","entities","isValid","JSON","stringify","static","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/view-editor/hui-dialog-edit-view.ts"],"sourcesContent":["import \"@material/mwc-button\";\nimport { ActionDetail } from \"@material/mwc-list\";\nimport { mdiCheck, mdiClose, mdiDotsVertical } from \"@mdi/js\";\nimport \"@polymer/paper-tabs/paper-tab\";\nimport \"@polymer/paper-tabs/paper-tabs\";\nimport {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  nothing,\n  PropertyValues,\n} from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { fireEvent, HASSDomEvent } from \"../../../../common/dom/fire_event\";\nimport { stopPropagation } from \"../../../../common/dom/stop_propagation\";\nimport { navigate } from \"../../../../common/navigate\";\nimport { deepEqual } from \"../../../../common/util/deep-equal\";\nimport \"../../../../components/ha-alert\";\nimport \"../../../../components/ha-circular-progress\";\nimport \"../../../../components/ha-dialog\";\nimport \"../../../../components/ha-dialog-header\";\nimport \"../../../../components/ha-yaml-editor\";\nimport type { HaYamlEditor } from \"../../../../components/ha-yaml-editor\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyleDialog } from \"../../../../resources/styles\";\nimport type { HomeAssistant } from \"../../../../types\";\nimport \"../../components/hui-entity-editor\";\nimport {\n  DEFAULT_VIEW_LAYOUT,\n  PANEL_VIEW_LAYOUT,\n  VIEWS_NO_BADGE_SUPPORT,\n} from \"../../views/const\";\nimport { addView, deleteView, replaceView } from \"../config-util\";\nimport \"../hui-badge-preview\";\nimport { processEditorEntities } from \"../process-editor-entities\";\nimport {\n  EntitiesEditorEvent,\n  ViewEditEvent,\n  ViewVisibilityChangeEvent,\n} from \"../types\";\nimport \"./hui-view-editor\";\nimport \"./hui-view-visibility-editor\";\nimport { EditViewDialogParams } from \"./show-edit-view-dialog\";\nimport {\n  LovelaceViewConfig,\n  isStrategyView,\n} from \"../../../../data/lovelace/config/view\";\nimport { LovelaceBadgeConfig } from \"../../../../data/lovelace/config/badge\";\nimport { LovelaceCardConfig } from \"../../../../data/lovelace/config/card\";\n\n@customElement(\"hui-dialog-edit-view\")\nexport class HuiDialogEditView extends LitElement {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _params?: EditViewDialogParams;\n\n  @state() private _config?: LovelaceViewConfig;\n\n  @state() private _badges?: LovelaceBadgeConfig[];\n\n  @state() private _cards?: LovelaceCardConfig[];\n\n  @state() private _saving = false;\n\n  @state() private _curTab?: string;\n\n  @state() private _dirty = false;\n\n  @state() private _yamlMode = false;\n\n  @query(\"ha-yaml-editor\") private _editor?: HaYamlEditor;\n\n  private _curTabIndex = 0;\n\n  get _type(): string {\n    if (!this._config) {\n      return DEFAULT_VIEW_LAYOUT;\n    }\n    return this._config.panel\n      ? PANEL_VIEW_LAYOUT\n      : this._config.type || DEFAULT_VIEW_LAYOUT;\n  }\n\n  protected updated(changedProperties: PropertyValues) {\n    if (this._yamlMode && changedProperties.has(\"_yamlMode\")) {\n      const viewConfig = {\n        ...this._config,\n        badges: this._badges,\n      };\n      this._editor?.setValue(viewConfig);\n    }\n  }\n\n  public showDialog(params: EditViewDialogParams): void {\n    this._params = params;\n\n    if (this._params.viewIndex === undefined) {\n      this._config = {};\n      this._badges = [];\n      this._cards = [];\n      this._dirty = false;\n      return;\n    }\n    const view = this._params.lovelace!.config.views[this._params.viewIndex];\n    // Todo : add better support for strategy views\n    if (isStrategyView(view)) {\n      const { strategy, ...viewConfig } = view;\n      this._config = viewConfig;\n      this._badges = [];\n      this._cards = [];\n      return;\n    }\n    const { cards, badges, ...viewConfig } = view;\n    this._config = viewConfig;\n    this._badges = badges ? processEditorEntities(badges) : [];\n    this._cards = cards;\n  }\n\n  public closeDialog(): void {\n    this._curTabIndex = 0;\n    this._params = undefined;\n    this._config = {};\n    this._badges = [];\n    this._yamlMode = false;\n    this._dirty = false;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _viewConfigTitle(): string {\n    if (!this._config || !this._config.title) {\n      return this.hass!.localize(\"ui.panel.lovelace.editor.edit_view.header\");\n    }\n\n    return this.hass!.localize(\n      \"ui.panel.lovelace.editor.edit_view.header_name\",\n      { name: this._config.title }\n    );\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    let content;\n\n    if (this._yamlMode) {\n      content = html`\n        <ha-yaml-editor\n          .hass=${this.hass}\n          dialogInitialFocus\n          @value-changed=${this._viewYamlChanged}\n        ></ha-yaml-editor>\n      `;\n    } else {\n      switch (this._curTab) {\n        case \"tab-settings\":\n          content = html`\n            <hui-view-editor\n              .isNew=${this._params.viewIndex === undefined}\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-config-changed=${this._viewConfigChanged}\n            ></hui-view-editor>\n          `;\n          break;\n        case \"tab-badges\":\n          content = html`\n            ${this._badges?.length\n              ? html`\n                  ${VIEWS_NO_BADGE_SUPPORT.includes(this._type)\n                    ? html`\n                        <ha-alert alert-type=\"warning\">\n                          ${this.hass!.localize(\n                            \"ui.panel.lovelace.editor.edit_badges.view_no_badges\"\n                          )}\n                        </ha-alert>\n                      `\n                    : \"\"}\n                  <div class=\"preview-badges\">\n                    ${this._badges.map(\n                      (badgeConfig) => html`\n                        <hui-badge-preview\n                          .hass=${this.hass}\n                          .config=${badgeConfig}\n                        ></hui-badge-preview>\n                      `\n                    )}\n                  </div>\n                `\n              : \"\"}\n            <hui-entity-editor\n              .hass=${this.hass}\n              .entities=${this._badges}\n              @entities-changed=${this._badgesChanged}\n            ></hui-entity-editor>\n          `;\n          break;\n        case \"tab-visibility\":\n          content = html`\n            <hui-view-visibility-editor\n              .hass=${this.hass}\n              .config=${this._config}\n              @view-visibility-changed=${this._viewVisibilityChanged}\n            ></hui-view-visibility-editor>\n          `;\n          break;\n        case \"tab-cards\":\n          content = html` Cards `;\n          break;\n      }\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this.closeDialog}\n        .heading=${this._viewConfigTitle}\n        class=${classMap({\n          \"yaml-mode\": this._yamlMode,\n        })}\n      >\n        <ha-dialog-header show-border slot=\"heading\">\n          <ha-icon-button\n            slot=\"navigationIcon\"\n            dialogAction=\"cancel\"\n            .label=${this.hass!.localize(\"ui.common.close\")}\n            .path=${mdiClose}\n          ></ha-icon-button>\n          <h2 slot=\"title\">${this._viewConfigTitle}</h2>\n          <ha-button-menu\n            slot=\"actionItems\"\n            fixed\n            corner=\"BOTTOM_END\"\n            menuCorner=\"END\"\n            @action=${this._handleAction}\n            @closed=${stopPropagation}\n          >\n            <ha-icon-button\n              slot=\"trigger\"\n              .label=${this.hass!.localize(\"ui.common.menu\")}\n              .path=${mdiDotsVertical}\n            ></ha-icon-button>\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.edit_ui\"\n              )}\n              ${!this._yamlMode\n                ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>`\n                : ``}\n            </mwc-list-item>\n\n            <mwc-list-item graphic=\"icon\">\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.edit_view.edit_yaml\"\n              )}\n              ${this._yamlMode\n                ? html`<ha-svg-icon\n                    class=\"selected_menu_item\"\n                    slot=\"graphic\"\n                    .path=${mdiCheck}\n                  ></ha-svg-icon>`\n                : ``}\n            </mwc-list-item>\n          </ha-button-menu>\n          ${!this._yamlMode\n            ? html`<paper-tabs\n                scrollable\n                hide-scroll-buttons\n                .selected=${this._curTabIndex}\n                @selected-item-changed=${this._handleTabSelected}\n              >\n                <paper-tab id=\"tab-settings\" dialogInitialFocus\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_settings\"\n                  )}</paper-tab\n                >\n                <paper-tab id=\"tab-badges\"\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_badges\"\n                  )}</paper-tab\n                >\n                <paper-tab id=\"tab-visibility\"\n                  >${this.hass!.localize(\n                    \"ui.panel.lovelace.editor.edit_view.tab_visibility\"\n                  )}</paper-tab\n                >\n              </paper-tabs>`\n            : \"\"}\n        </ha-dialog-header>\n        ${content}\n        ${this._params.viewIndex !== undefined\n          ? html`\n              <mwc-button\n                class=\"warning\"\n                slot=\"secondaryAction\"\n                @click=${this._deleteConfirm}\n              >\n                ${this.hass!.localize(\n                  \"ui.panel.lovelace.editor.edit_view.delete\"\n                )}\n              </mwc-button>\n            `\n          : \"\"}\n        <mwc-button @click=${this.closeDialog} slot=\"primaryAction\"\n          >${this.hass!.localize(\"ui.common.cancel\")}</mwc-button\n        >\n        <mwc-button\n          slot=\"primaryAction\"\n          ?disabled=${!this._config || this._saving || !this._dirty}\n          @click=${this._save}\n        >\n          ${this._saving\n            ? html`<ha-circular-progress\n                indeterminate\n                size=\"small\"\n                aria-label=\"Saving\"\n              ></ha-circular-progress>`\n            : \"\"}\n          ${this.hass!.localize(\"ui.common.save\")}</mwc-button\n        >\n      </ha-dialog>\n    `;\n  }\n\n  private async _handleAction(ev: CustomEvent<ActionDetail>) {\n    ev.stopPropagation();\n    ev.preventDefault();\n    switch (ev.detail.index) {\n      case 0:\n        this._yamlMode = false;\n        break;\n      case 1:\n        this._yamlMode = true;\n        break;\n    }\n  }\n\n  private async _delete(): Promise<void> {\n    if (!this._params) {\n      return;\n    }\n    try {\n      await this._params.lovelace!.saveConfig(\n        deleteView(this._params.lovelace!.config, this._params.viewIndex!)\n      );\n      this.closeDialog();\n      navigate(`/${window.location.pathname.split(\"/\")[1]}`);\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `Deleting failed: ${err.message}`,\n      });\n    }\n  }\n\n  private _deleteConfirm(): void {\n    showConfirmationDialog(this, {\n      title: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? `_existing_cards` : \"\"\n        }`\n      ),\n      text: this.hass!.localize(\n        `ui.panel.lovelace.views.confirm_delete${\n          this._cards?.length ? \"_existing_cards\" : \"\"\n        }_text`,\n        {\n          name: this._config?.title || \"Unnamed view\",\n          number: this._cards?.length || 0,\n        }\n      ),\n      confirm: () => this._delete(),\n    });\n  }\n\n  private _handleTabSelected(ev: CustomEvent): void {\n    if (!ev.detail.value) {\n      return;\n    }\n    this._curTab = ev.detail.value.id;\n  }\n\n  private async _save(): Promise<void> {\n    if (!this._params || !this._config) {\n      return;\n    }\n    if (!this._isConfigChanged()) {\n      this.closeDialog();\n      return;\n    }\n\n    this._saving = true;\n\n    const viewConf: LovelaceViewConfig = {\n      ...this._config,\n      badges: this._badges,\n      cards: this._cards,\n    };\n\n    const lovelace = this._params.lovelace!;\n\n    try {\n      await lovelace.saveConfig(\n        this._creatingView\n          ? addView(this.hass!, lovelace.config, viewConf)\n          : replaceView(\n              this.hass!,\n              lovelace.config,\n              this._params.viewIndex!,\n              viewConf\n            )\n      );\n      if (this._params.saveCallback) {\n        this._params.saveCallback(\n          this._params.viewIndex || lovelace.config.views.length,\n          viewConf\n        );\n      }\n      this.closeDialog();\n    } catch (err: any) {\n      showAlertDialog(this, {\n        text: `${this.hass!.localize(\n          \"ui.panel.lovelace.editor.edit_view.saving_failed\"\n        )}: ${err.message}`,\n      });\n    } finally {\n      this._saving = false;\n    }\n  }\n\n  private _viewConfigChanged(ev: ViewEditEvent): void {\n    if (\n      ev.detail &&\n      ev.detail.config &&\n      !deepEqual(this._config, ev.detail.config)\n    ) {\n      this._config = ev.detail.config;\n      this._dirty = true;\n    }\n  }\n\n  private _viewVisibilityChanged(\n    ev: HASSDomEvent<ViewVisibilityChangeEvent>\n  ): void {\n    if (ev.detail.visible && this._config) {\n      this._config.visible = ev.detail.visible;\n    }\n    this._dirty = true;\n  }\n\n  private _badgesChanged(ev: EntitiesEditorEvent): void {\n    if (!this._badges || !this.hass || !ev.detail || !ev.detail.entities) {\n      return;\n    }\n    this._badges = processEditorEntities(ev.detail.entities);\n    this._dirty = true;\n  }\n\n  private _viewYamlChanged(ev: CustomEvent) {\n    ev.stopPropagation();\n    if (!ev.detail.isValid) {\n      return;\n    }\n    const { badges = [], ...config } = ev.detail.value;\n    this._config = config;\n    this._badges = badges;\n    this._dirty = true;\n  }\n\n  private _isConfigChanged(): boolean {\n    return (\n      this._creatingView ||\n      JSON.stringify(this._config) !==\n        JSON.stringify(\n          this._params!.lovelace!.config.views[this._params!.viewIndex!]\n        )\n    );\n  }\n\n  private get _creatingView(): boolean {\n    return this._params!.viewIndex === undefined;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      haStyleDialog,\n      css`\n        ha-dialog {\n          /* Set the top top of the dialog to a fixed position, so it doesnt jump when the content changes size */\n          --vertical-align-dialog: flex-start;\n          --dialog-surface-margin-top: 40px;\n        }\n\n        @media all and (max-width: 450px), all and (max-height: 500px) {\n          /* When in fullscreen dialog should be attached to top */\n          ha-dialog {\n            --dialog-surface-margin-top: 0px;\n          }\n        }\n        ha-dialog.yaml-mode {\n          --dialog-content-padding: 0;\n        }\n        h2 {\n          margin: 0;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        paper-tabs {\n          --paper-tabs-selection-bar-color: var(--primary-color);\n          color: var(--primary-text-color);\n          text-transform: uppercase;\n          padding: 0 20px;\n        }\n        mwc-button.warning {\n          margin-right: auto;\n          margin-inline-end: auto;\n          margin-inline-start: initial;\n        }\n        ha-circular-progress {\n          display: none;\n        }\n        ha-circular-progress[indeterminate] {\n          display: block;\n        }\n        .selected_menu_item {\n          color: var(--primary-color);\n        }\n        .hidden {\n          display: none;\n        }\n        .error {\n          color: var(--error-color);\n          border-bottom: 1px solid var(--error-color);\n        }\n        .preview-badges {\n          display: flex;\n          justify-content: center;\n          margin: 12px 16px;\n          flex-wrap: wrap;\n        }\n\n        @media all and (min-width: 600px) {\n          ha-dialog {\n            --mdc-dialog-min-width: 600px;\n          }\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-dialog-edit-view\": HuiDialogEditView;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}