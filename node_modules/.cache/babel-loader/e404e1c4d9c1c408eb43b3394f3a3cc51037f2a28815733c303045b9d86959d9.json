{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nconst mdiPlayCircleOutline = \"M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M10,16.5L16,12L10,7.5V16.5Z\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-button\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-textarea\";\nimport { convertTextToSpeech } from \"../../data/tts\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport \"../../components/ha-circular-progress\";\nexport let TTSTryDialog = _decorate([customElement(\"dialog-tts-try\")], function (_initialize, _LitElement) {\n  class TTSTryDialog extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: TTSTryDialog,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_loadingExample\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_valid\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"#message\")],\n      key: \"_messageInput\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [storage({\n        key: \"ttsTryMessages\",\n        state: false,\n        subscribe: false\n      })],\n      key: \"_messages\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: function showDialog(params) {\n        this._params = params;\n        this._valid = Boolean(this._defaultMessage);\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        this._params = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"get\",\n      key: \"_defaultMessage\",\n      value: function _defaultMessage() {\n        var _language, _this$_messages;\n        const language = (_language = this._params.language) === null || _language === void 0 ? void 0 : _language.substring(0, 2);\n        const userLanguage = this.hass.locale.language.substring(0, 2);\n        // Load previous message in the right language\n        if (language && (_this$_messages = this._messages) !== null && _this$_messages !== void 0 && _this$_messages[language]) {\n          return this._messages[language];\n        }\n        // Only display example message if it's interface language\n        if (language === userLanguage) {\n          return this.hass.localize(\"ui.dialogs.tts-try.message_example\");\n        }\n        return \"\";\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._params) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(this.hass, this.hass.localize(\"ui.dialogs.tts-try.header\"))}\n      >\n        <ha-textarea\n          autogrow\n          id=\"message\"\n          .label=${this.hass.localize(\"ui.dialogs.tts-try.message\")}\n          .placeholder=${this.hass.localize(\"ui.dialogs.tts-try.message_placeholder\")}\n          .value=${this._defaultMessage}\n          @input=${this._inputChanged}\n          ?dialogInitialFocus=${!this._defaultMessage}\n        >\n        </ha-textarea>\n        ${this._loadingExample ? html`\n              <ha-circular-progress\n                size=\"small\"\n                indeterminate\n                slot=\"primaryAction\"\n                class=\"loading\"\n              ></ha-circular-progress>\n            ` : html`\n              <ha-button\n                ?dialogInitialFocus=${Boolean(this._defaultMessage)}\n                slot=\"primaryAction\"\n                .label=${this.hass.localize(\"ui.dialogs.tts-try.play\")}\n                @click=${this._playExample}\n                .disabled=${!this._valid}\n              >\n                <ha-svg-icon\n                  slot=\"icon\"\n                  .path=${mdiPlayCircleOutline}\n                ></ha-svg-icon>\n              </ha-button>\n            `}\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_inputChanged\",\n      value: async function _inputChanged() {\n        var _this$_messageInput;\n        this._valid = Boolean((_this$_messageInput = this._messageInput) === null || _this$_messageInput === void 0 ? void 0 : _this$_messageInput.value);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_playExample\",\n      value: async function _playExample() {\n        var _this$_messageInput2;\n        const message = (_this$_messageInput2 = this._messageInput) === null || _this$_messageInput2 === void 0 ? void 0 : _this$_messageInput2.value;\n        if (!message) {\n          return;\n        }\n        const platform = this._params.engine;\n        const language = this._params.language;\n        const voice = this._params.voice;\n        if (language) {\n          this._messages = {\n            ...this._messages,\n            [language.substring(0, 2)]: message\n          };\n        }\n        this._loadingExample = true;\n        const audio = new Audio();\n        audio.play();\n        let url;\n        try {\n          const result = await convertTextToSpeech(this.hass, {\n            platform,\n            message,\n            language,\n            options: {\n              voice\n            }\n          });\n          url = result.path;\n        } catch (err) {\n          this._loadingExample = false;\n          showAlertDialog(this, {\n            text: `Unable to load example. ${err.error || err.body || err}`,\n            warning: true\n          });\n          return;\n        }\n        audio.src = url;\n        audio.addEventListener(\"canplaythrough\", () => audio.play());\n        audio.addEventListener(\"playing\", () => {\n          this._loadingExample = false;\n        });\n        audio.addEventListener(\"error\", () => {\n          showAlertDialog(this, {\n            title: \"Error playing audio.\"\n          });\n          this._loadingExample = false;\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-dialog {\n        --mdc-dialog-max-width: 500px;\n      }\n      ha-textarea,\n      ha-select {\n        width: 100%;\n      }\n      ha-select {\n        margin-top: 8px;\n      }\n      .loading {\n        height: 36px;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","query","state","storage","fireEvent","createCloseHeading","convertTextToSpeech","showAlertDialog","TTSTryDialog","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","subscribe","showDialog","params","_params","_valid","Boolean","_defaultMessage","closeDialog","undefined","dialog","localName","_language","_this$_messages","language","substring","userLanguage","hass","locale","_messages","localize","render","_inputChanged","_loadingExample","_playExample","mdiPlayCircleOutline","_this$_messageInput","_messageInput","_this$_messageInput2","message","platform","engine","voice","audio","Audio","play","url","result","options","path","err","text","error","body","warning","src","addEventListener","title","static","styles"],"sources":["/workspaces/frontend/src/dialogs/tts-try/dialog-tts-try.ts"],"sourcesContent":["import { mdiPlayCircleOutline } from \"@mdi/js\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { storage } from \"../../common/decorators/storage\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-button\";\nimport { createCloseHeading } from \"../../components/ha-dialog\";\nimport \"../../components/ha-textarea\";\nimport type { HaTextArea } from \"../../components/ha-textarea\";\nimport { convertTextToSpeech } from \"../../data/tts\";\nimport { HomeAssistant } from \"../../types\";\nimport { showAlertDialog } from \"../generic/show-dialog-box\";\nimport { TTSTryDialogParams } from \"./show-dialog-tts-try\";\nimport \"../../components/ha-circular-progress\";\n\n@customElement(\"dialog-tts-try\")\nexport class TTSTryDialog extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _loadingExample = false;\n\n  @state() private _params?: TTSTryDialogParams;\n\n  @state() private _valid = false;\n\n  @query(\"#message\") private _messageInput?: HaTextArea;\n\n  @storage({\n    key: \"ttsTryMessages\",\n    state: false,\n    subscribe: false,\n  })\n  private _messages?: Record<string, string>;\n\n  public showDialog(params: TTSTryDialogParams) {\n    this._params = params;\n    this._valid = Boolean(this._defaultMessage);\n  }\n\n  public closeDialog() {\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  private get _defaultMessage() {\n    const language = this._params!.language?.substring(0, 2);\n    const userLanguage = this.hass.locale.language.substring(0, 2);\n    // Load previous message in the right language\n    if (language && this._messages?.[language]) {\n      return this._messages[language];\n    }\n    // Only display example message if it's interface language\n    if (language === userLanguage) {\n      return this.hass.localize(\"ui.dialogs.tts-try.message_example\");\n    }\n    return \"\";\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n    return html`\n      <ha-dialog\n        open\n        @closed=${this.closeDialog}\n        .heading=${createCloseHeading(\n          this.hass,\n          this.hass.localize(\"ui.dialogs.tts-try.header\")\n        )}\n      >\n        <ha-textarea\n          autogrow\n          id=\"message\"\n          .label=${this.hass.localize(\"ui.dialogs.tts-try.message\")}\n          .placeholder=${this.hass.localize(\n            \"ui.dialogs.tts-try.message_placeholder\"\n          )}\n          .value=${this._defaultMessage}\n          @input=${this._inputChanged}\n          ?dialogInitialFocus=${!this._defaultMessage}\n        >\n        </ha-textarea>\n        ${this._loadingExample\n          ? html`\n              <ha-circular-progress\n                size=\"small\"\n                indeterminate\n                slot=\"primaryAction\"\n                class=\"loading\"\n              ></ha-circular-progress>\n            `\n          : html`\n              <ha-button\n                ?dialogInitialFocus=${Boolean(this._defaultMessage)}\n                slot=\"primaryAction\"\n                .label=${this.hass.localize(\"ui.dialogs.tts-try.play\")}\n                @click=${this._playExample}\n                .disabled=${!this._valid}\n              >\n                <ha-svg-icon\n                  slot=\"icon\"\n                  .path=${mdiPlayCircleOutline}\n                ></ha-svg-icon>\n              </ha-button>\n            `}\n      </ha-dialog>\n    `;\n  }\n\n  private async _inputChanged() {\n    this._valid = Boolean(this._messageInput?.value);\n  }\n\n  private async _playExample() {\n    const message = this._messageInput?.value;\n    if (!message) {\n      return;\n    }\n\n    const platform = this._params!.engine;\n    const language = this._params!.language;\n    const voice = this._params!.voice;\n\n    if (language) {\n      this._messages = {\n        ...this._messages,\n        [language.substring(0, 2)]: message,\n      };\n    }\n\n    this._loadingExample = true;\n\n    const audio = new Audio();\n    audio.play();\n\n    let url;\n    try {\n      const result = await convertTextToSpeech(this.hass, {\n        platform,\n        message,\n        language,\n        options: { voice },\n      });\n      url = result.path;\n    } catch (err: any) {\n      this._loadingExample = false;\n      showAlertDialog(this, {\n        text: `Unable to load example. ${err.error || err.body || err}`,\n        warning: true,\n      });\n      return;\n    }\n    audio.src = url;\n    audio.addEventListener(\"canplaythrough\", () => audio.play());\n    audio.addEventListener(\"playing\", () => {\n      this._loadingExample = false;\n    });\n    audio.addEventListener(\"error\", () => {\n      showAlertDialog(this, { title: \"Error playing audio.\" });\n      this._loadingExample = false;\n    });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      ha-dialog {\n        --mdc-dialog-max-width: 500px;\n      }\n      ha-textarea,\n      ha-select {\n        width: 100%;\n      }\n      ha-select {\n        margin-top: 8px;\n      }\n      .loading {\n        height: 36px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-tts-try\": TTSTryDialog;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}