{"ast":null,"code":"import _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforeUnit } from \"../common/translations/blank_before_unit\";\nexport var HaBigNumber = _decorate([customElement(\"ha-big-number\")], function (_initialize, _LitElement) {\n  var HaBigNumber = /*#__PURE__*/function (_LitElement2) {\n    _inherits(HaBigNumber, _LitElement2);\n    function HaBigNumber() {\n      var _this;\n      _classCallCheck(this, HaBigNumber);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, HaBigNumber, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(HaBigNumber);\n  }(_LitElement);\n  return {\n    F: HaBigNumber,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Number\n      })],\n      key: \"value\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"unit\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: \"unit-position\"\n      })],\n      key: \"unitPosition\",\n      value: function value() {\n        return \"top\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"formatOptions\",\n      value: function value() {\n        return {};\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$hass, _this$hass2;\n        var formatted = formatNumber(this.value, (_this$hass = this.hass) === null || _this$hass === void 0 ? void 0 : _this$hass.locale, this.formatOptions);\n        var _ref = formatted.includes(\".\") ? formatted.split(\".\") : formatted.split(\",\"),\n          _ref2 = _slicedToArray(_ref, 1),\n          integer = _ref2[0];\n        var temperatureDecimal = formatted.replace(integer, \"\");\n        var formattedValue = \"\".concat(this.value).concat(this.unit ? \"\".concat(blankBeforeUnit(this.unit, (_this$hass2 = this.hass) === null || _this$hass2 === void 0 ? void 0 : _this$hass2.locale)).concat(this.unit) : \"\");\n        var unitBottom = this.unitPosition === \"bottom\";\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <p class=\\\"value\\\">\\n        <span aria-hidden=\\\"true\\\" class=\\\"displayed-value\\\">\\n          <span>\", \"</span>\\n          <span class=\\\"addon \", \"\\\">\\n            <span class=\\\"decimal\\\">\", \"</span>\\n            <span class=\\\"unit\\\">\", \"</span>\\n          </span>\\n        </span>\\n        <span class=\\\"visually-hidden\\\">\", \"</span>\\n      </p>\\n    \"])), integer, classMap({\n          bottom: unitBottom\n        }), temperatureDecimal, this.unit, formattedValue);\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [css(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n        :host {\\n          font-size: 57px;\\n          line-height: 1.12;\\n          letter-spacing: -0.25px;\\n        }\\n        .value {\\n          display: flex;\\n          margin: 0;\\n          direction: ltr;\\n        }\\n        .displayed-value {\\n          display: inline-flex;\\n          flex-direction: row;\\n          align-items: flex-end;\\n        }\\n        .addon {\\n          display: flex;\\n          flex-direction: column-reverse;\\n          padding: 4px 0;\\n        }\\n        .addon.bottom {\\n          flex-direction: row;\\n          align-items: baseline;\\n        }\\n        .addon.bottom .unit {\\n          margin-bottom: 4px;\\n          margin-left: 2px;\\n        }\\n        .value .decimal {\\n          font-size: 0.42em;\\n          line-height: 1.33;\\n          min-height: 1.33em;\\n        }\\n        .value .unit {\\n          font-size: 0.33em;\\n          line-height: 1.26;\\n        }\\n        /* Accessibility */\\n        .visually-hidden {\\n          position: absolute;\\n          overflow: hidden;\\n          clip: rect(0 0 0 0);\\n          height: 1px;\\n          width: 1px;\\n          margin: -1px;\\n          padding: 0;\\n          border: 0;\\n        }\\n      \"])))];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","customElement","property","classMap","formatNumber","blankBeforeUnit","HaBigNumber","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","type","Number","key","value","attribute","render","_this$hass","_this$hass2","formatted","hass","locale","formatOptions","_ref","includes","split","_ref2","_slicedToArray","integer","temperatureDecimal","replace","formattedValue","unit","unitBottom","unitPosition","_templateObject","_taggedTemplateLiteral","bottom","static","styles","_templateObject2"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-big-number.ts"],"sourcesContent":["import { CSSResultGroup, LitElement, css, html } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { formatNumber } from \"../common/number/format_number\";\nimport { blankBeforeUnit } from \"../common/translations/blank_before_unit\";\nimport { HomeAssistant } from \"../types\";\n\n@customElement(\"ha-big-number\")\nexport class HaBigNumber extends LitElement {\n  @property({ type: Number }) public value!: number;\n\n  @property() public unit?: string;\n\n  @property({ attribute: \"unit-position\" })\n  public unitPosition: \"top\" | \"bottom\" = \"top\";\n\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false })\n  public formatOptions: Intl.NumberFormatOptions = {};\n\n  protected render() {\n    const formatted = formatNumber(\n      this.value,\n      this.hass?.locale,\n      this.formatOptions\n    );\n    const [integer] = formatted.includes(\".\")\n      ? formatted.split(\".\")\n      : formatted.split(\",\");\n\n    const temperatureDecimal = formatted.replace(integer, \"\");\n\n    const formattedValue = `${this.value}${\n      this.unit\n        ? `${blankBeforeUnit(this.unit, this.hass?.locale)}${this.unit}`\n        : \"\"\n    }`;\n\n    const unitBottom = this.unitPosition === \"bottom\";\n\n    return html`\n      <p class=\"value\">\n        <span aria-hidden=\"true\" class=\"displayed-value\">\n          <span>${integer}</span>\n          <span class=\"addon ${classMap({ bottom: unitBottom })}\">\n            <span class=\"decimal\">${temperatureDecimal}</span>\n            <span class=\"unit\">${this.unit}</span>\n          </span>\n        </span>\n        <span class=\"visually-hidden\">${formattedValue}</span>\n      </p>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        :host {\n          font-size: 57px;\n          line-height: 1.12;\n          letter-spacing: -0.25px;\n        }\n        .value {\n          display: flex;\n          margin: 0;\n          direction: ltr;\n        }\n        .displayed-value {\n          display: inline-flex;\n          flex-direction: row;\n          align-items: flex-end;\n        }\n        .addon {\n          display: flex;\n          flex-direction: column-reverse;\n          padding: 4px 0;\n        }\n        .addon.bottom {\n          flex-direction: row;\n          align-items: baseline;\n        }\n        .addon.bottom .unit {\n          margin-bottom: 4px;\n          margin-left: 2px;\n        }\n        .value .decimal {\n          font-size: 0.42em;\n          line-height: 1.33;\n          min-height: 1.33em;\n        }\n        .value .unit {\n          font-size: 0.33em;\n          line-height: 1.26;\n        }\n        /* Accessibility */\n        .visually-hidden {\n          position: absolute;\n          overflow: hidden;\n          clip: rect(0 0 0 0);\n          height: 1px;\n          width: 1px;\n          margin: -1px;\n          padding: 0;\n          border: 0;\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-big-number\": HaBigNumber;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}