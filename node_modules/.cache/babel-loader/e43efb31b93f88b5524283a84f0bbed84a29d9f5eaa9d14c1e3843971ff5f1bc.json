{"ast":null,"code":"import { isStrategyView } from \"../../../data/lovelace/config/view\";\nexport const addCard = (config, path, cardConfig) => {\n  const [viewIndex] = path;\n  const views = [];\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot add a card in a strategy view.\");\n    }\n    const cards = viewConf.cards ? [...viewConf.cards, cardConfig] : [cardConfig];\n    views.push({\n      ...viewConf,\n      cards\n    });\n  });\n  return {\n    ...config,\n    views\n  };\n};\nexport const addCards = (config, path, cardConfigs) => {\n  const [viewIndex] = path;\n  const views = [];\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot add cards in a strategy view.\");\n    }\n    const cards = viewConf.cards ? [...viewConf.cards, ...cardConfigs] : [...cardConfigs];\n    views.push({\n      ...viewConf,\n      cards\n    });\n  });\n  return {\n    ...config,\n    views\n  };\n};\nexport const replaceCard = (config, path, cardConfig) => {\n  const [viewIndex, cardIndex] = path;\n  const views = [];\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot replace a card in a strategy view.\");\n    }\n    views.push({\n      ...viewConf,\n      cards: (viewConf.cards || []).map((origConf, ind) => ind === cardIndex ? cardConfig : origConf)\n    });\n  });\n  return {\n    ...config,\n    views\n  };\n};\nexport const deleteCard = (config, path) => {\n  const [viewIndex, cardIndex] = path;\n  const views = [];\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot delete a card in a strategy view.\");\n    }\n    views.push({\n      ...viewConf,\n      cards: (viewConf.cards || []).filter((_origConf, ind) => ind !== cardIndex)\n    });\n  });\n  return {\n    ...config,\n    views\n  };\n};\nexport const insertCard = (config, path, cardConfig) => {\n  const [viewIndex, cardIndex] = path;\n  const views = [];\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot insert a card in a strategy view.\");\n    }\n    const cards = viewConf.cards ? [...viewConf.cards.slice(0, cardIndex), cardConfig, ...viewConf.cards.slice(cardIndex)] : [cardConfig];\n    views.push({\n      ...viewConf,\n      cards\n    });\n  });\n  return {\n    ...config,\n    views\n  };\n};\nexport const swapCard = (config, path1, path2) => {\n  const origView1 = config.views[path1[0]];\n  const origView2 = config.views[path2[0]];\n  if (isStrategyView(origView1) || isStrategyView(origView2)) {\n    throw new Error(\"You cannot move swap cards in a strategy view.\");\n  }\n  const card1 = origView1.cards[path1[1]];\n  const card2 = origView2.cards[path2[1]];\n  const newView1 = {\n    ...origView1,\n    cards: origView1.cards.map((origCard, index) => index === path1[1] ? card2 : origCard)\n  };\n  const updatedOrigView2 = path1[0] === path2[0] ? newView1 : origView2;\n  const newView2 = {\n    ...updatedOrigView2,\n    cards: updatedOrigView2.cards.map((origCard, index) => index === path2[1] ? card1 : origCard)\n  };\n  return {\n    ...config,\n    views: config.views.map((origView, index) => index === path2[0] ? newView2 : index === path1[0] ? newView1 : origView)\n  };\n};\nexport const moveCardToPosition = (config, path, position) => {\n  const view = config.views[path[0]];\n  if (isStrategyView(view)) {\n    throw new Error(\"You cannot move a card in a strategy view.\");\n  }\n  const oldIndex = path[1];\n  const newIndex = Math.max(Math.min(position - 1, view.cards.length - 1), 0);\n  const newCards = [...view.cards];\n  const card = newCards[oldIndex];\n  newCards.splice(oldIndex, 1);\n  newCards.splice(newIndex, 0, card);\n  const newView = {\n    ...view,\n    cards: newCards\n  };\n  return {\n    ...config,\n    views: config.views.map((origView, index) => index === path[0] ? newView : origView)\n  };\n};\nexport const moveCard = (config, fromPath, toPath) => {\n  if (fromPath[0] === toPath[0]) {\n    throw new Error(\"You cannot move a card to the view it is in.\");\n  }\n  const fromView = config.views[fromPath[0]];\n  const toView = config.views[toPath[0]];\n  if (isStrategyView(fromView)) {\n    throw new Error(\"You cannot move a card from a strategy view.\");\n  }\n  if (isStrategyView(toView)) {\n    throw new Error(\"You cannot move a card to a strategy view.\");\n  }\n  const card = fromView.cards[fromPath[1]];\n  const newView1 = {\n    ...fromView,\n    cards: (fromView.cards || []).filter((_origConf, ind) => ind !== fromPath[1])\n  };\n  const cards = toView.cards ? [...toView.cards, card] : [card];\n  const newView2 = {\n    ...toView,\n    cards\n  };\n  return {\n    ...config,\n    views: config.views.map((origView, index) => index === toPath[0] ? newView2 : index === fromPath[0] ? newView1 : origView)\n  };\n};\nexport const addView = (hass, config, viewConfig) => {\n  if (viewConfig.path && config.views.some(v => v.path === viewConfig.path)) {\n    throw new Error(hass.localize(\"ui.panel.lovelace.editor.edit_view.error_same_url\"));\n  }\n  return {\n    ...config,\n    views: config.views.concat(viewConfig)\n  };\n};\nexport const replaceView = (hass, config, viewIndex, viewConfig) => {\n  if (viewConfig.path && config.views.some((v, idx) => v.path === viewConfig.path && idx !== viewIndex)) {\n    throw new Error(hass.localize(\"ui.panel.lovelace.editor.edit_view.error_same_url\"));\n  }\n  return {\n    ...config,\n    views: config.views.map((origView, index) => index === viewIndex ? viewConfig : origView)\n  };\n};\nexport const swapView = (config, path1, path2) => {\n  const view1 = config.views[path1];\n  const view2 = config.views[path2];\n  return {\n    ...config,\n    views: config.views.map((origView, index) => index === path2 ? view1 : index === path1 ? view2 : origView)\n  };\n};\nexport const deleteView = (config, viewIndex) => ({\n  ...config,\n  views: config.views.filter((_origView, index) => index !== viewIndex)\n});","map":{"version":3,"names":["isStrategyView","addCard","config","path","cardConfig","viewIndex","views","forEach","viewConf","index","push","Error","cards","addCards","cardConfigs","replaceCard","cardIndex","map","origConf","ind","deleteCard","filter","_origConf","insertCard","slice","swapCard","path1","path2","origView1","origView2","card1","card2","newView1","origCard","updatedOrigView2","newView2","origView","moveCardToPosition","position","view","oldIndex","newIndex","Math","max","min","length","newCards","card","splice","newView","moveCard","fromPath","toPath","fromView","toView","addView","hass","viewConfig","some","v","localize","concat","replaceView","idx","swapView","view1","view2","deleteView","_origView"],"sources":["/workspaces/frontend/src/panels/lovelace/editor/config-util.ts"],"sourcesContent":["import { LovelaceCardConfig } from \"../../../data/lovelace/config/card\";\nimport { LovelaceConfig } from \"../../../data/lovelace/config/types\";\nimport {\n  LovelaceViewConfig,\n  isStrategyView,\n} from \"../../../data/lovelace/config/view\";\nimport type { HomeAssistant } from \"../../../types\";\n\nexport const addCard = (\n  config: LovelaceConfig,\n  path: [number],\n  cardConfig: LovelaceCardConfig\n): LovelaceConfig => {\n  const [viewIndex] = path;\n  const views: LovelaceViewConfig[] = [];\n\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot add a card in a strategy view.\");\n    }\n\n    const cards = viewConf.cards\n      ? [...viewConf.cards, cardConfig]\n      : [cardConfig];\n\n    views.push({\n      ...viewConf,\n      cards,\n    });\n  });\n\n  return {\n    ...config,\n    views,\n  };\n};\n\nexport const addCards = (\n  config: LovelaceConfig,\n  path: [number],\n  cardConfigs: LovelaceCardConfig[]\n): LovelaceConfig => {\n  const [viewIndex] = path;\n  const views: LovelaceViewConfig[] = [];\n\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot add cards in a strategy view.\");\n    }\n\n    const cards = viewConf.cards\n      ? [...viewConf.cards, ...cardConfigs]\n      : [...cardConfigs];\n\n    views.push({\n      ...viewConf,\n      cards,\n    });\n  });\n\n  return {\n    ...config,\n    views,\n  };\n};\n\nexport const replaceCard = (\n  config: LovelaceConfig,\n  path: [number, number],\n  cardConfig: LovelaceCardConfig\n): LovelaceConfig => {\n  const [viewIndex, cardIndex] = path;\n  const views: LovelaceViewConfig[] = [];\n\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot replace a card in a strategy view.\");\n    }\n\n    views.push({\n      ...viewConf,\n      cards: (viewConf.cards || []).map((origConf, ind) =>\n        ind === cardIndex ? cardConfig : origConf\n      ),\n    });\n  });\n\n  return {\n    ...config,\n    views,\n  };\n};\n\nexport const deleteCard = (\n  config: LovelaceConfig,\n  path: [number, number]\n): LovelaceConfig => {\n  const [viewIndex, cardIndex] = path;\n  const views: LovelaceViewConfig[] = [];\n\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot delete a card in a strategy view.\");\n    }\n\n    views.push({\n      ...viewConf,\n      cards: (viewConf.cards || []).filter(\n        (_origConf, ind) => ind !== cardIndex\n      ),\n    });\n  });\n\n  return {\n    ...config,\n    views,\n  };\n};\n\nexport const insertCard = (\n  config: LovelaceConfig,\n  path: [number, number],\n  cardConfig: LovelaceCardConfig\n) => {\n  const [viewIndex, cardIndex] = path;\n  const views: LovelaceViewConfig[] = [];\n\n  config.views.forEach((viewConf, index) => {\n    if (index !== viewIndex) {\n      views.push(config.views[index]);\n      return;\n    }\n\n    if (isStrategyView(viewConf)) {\n      throw new Error(\"You cannot insert a card in a strategy view.\");\n    }\n\n    const cards = viewConf.cards\n      ? [\n          ...viewConf.cards.slice(0, cardIndex),\n          cardConfig,\n          ...viewConf.cards.slice(cardIndex),\n        ]\n      : [cardConfig];\n\n    views.push({\n      ...viewConf,\n      cards,\n    });\n  });\n\n  return {\n    ...config,\n    views,\n  };\n};\n\nexport const swapCard = (\n  config: LovelaceConfig,\n  path1: [number, number],\n  path2: [number, number]\n): LovelaceConfig => {\n  const origView1 = config.views[path1[0]];\n  const origView2 = config.views[path2[0]];\n\n  if (isStrategyView(origView1) || isStrategyView(origView2)) {\n    throw new Error(\"You cannot move swap cards in a strategy view.\");\n  }\n\n  const card1 = origView1.cards![path1[1]];\n  const card2 = origView2.cards![path2[1]];\n\n  const newView1 = {\n    ...origView1,\n    cards: origView1.cards!.map((origCard, index) =>\n      index === path1[1] ? card2 : origCard\n    ),\n  };\n\n  const updatedOrigView2 = path1[0] === path2[0] ? newView1 : origView2;\n  const newView2 = {\n    ...updatedOrigView2,\n    cards: updatedOrigView2.cards!.map((origCard, index) =>\n      index === path2[1] ? card1 : origCard\n    ),\n  };\n\n  return {\n    ...config,\n    views: config.views.map((origView, index) =>\n      index === path2[0] ? newView2 : index === path1[0] ? newView1 : origView\n    ),\n  };\n};\n\nexport const moveCardToPosition = (\n  config: LovelaceConfig,\n  path: [number, number],\n  position: number\n): LovelaceConfig => {\n  const view = config.views[path[0]];\n\n  if (isStrategyView(view)) {\n    throw new Error(\"You cannot move a card in a strategy view.\");\n  }\n\n  const oldIndex = path[1];\n  const newIndex = Math.max(Math.min(position - 1, view.cards!.length - 1), 0);\n\n  const newCards = [...view.cards!];\n\n  const card = newCards[oldIndex];\n  newCards.splice(oldIndex, 1);\n  newCards.splice(newIndex, 0, card);\n\n  const newView = {\n    ...view,\n    cards: newCards,\n  };\n\n  return {\n    ...config,\n    views: config.views.map((origView, index) =>\n      index === path[0] ? newView : origView\n    ),\n  };\n};\n\nexport const moveCard = (\n  config: LovelaceConfig,\n  fromPath: [number, number],\n  toPath: [number]\n): LovelaceConfig => {\n  if (fromPath[0] === toPath[0]) {\n    throw new Error(\"You cannot move a card to the view it is in.\");\n  }\n  const fromView = config.views[fromPath[0]];\n  const toView = config.views[toPath[0]];\n\n  if (isStrategyView(fromView)) {\n    throw new Error(\"You cannot move a card from a strategy view.\");\n  }\n\n  if (isStrategyView(toView)) {\n    throw new Error(\"You cannot move a card to a strategy view.\");\n  }\n\n  const card = fromView.cards![fromPath[1]];\n\n  const newView1 = {\n    ...fromView,\n    cards: (fromView.cards || []).filter(\n      (_origConf, ind) => ind !== fromPath[1]\n    ),\n  };\n\n  const cards = toView.cards ? [...toView.cards, card] : [card];\n\n  const newView2 = {\n    ...toView,\n    cards,\n  };\n\n  return {\n    ...config,\n    views: config.views.map((origView, index) =>\n      index === toPath[0]\n        ? newView2\n        : index === fromPath[0]\n          ? newView1\n          : origView\n    ),\n  };\n};\n\nexport const addView = (\n  hass: HomeAssistant,\n  config: LovelaceConfig,\n  viewConfig: LovelaceViewConfig\n): LovelaceConfig => {\n  if (viewConfig.path && config.views.some((v) => v.path === viewConfig.path)) {\n    throw new Error(\n      hass.localize(\"ui.panel.lovelace.editor.edit_view.error_same_url\")\n    );\n  }\n  return {\n    ...config,\n    views: config.views.concat(viewConfig),\n  };\n};\n\nexport const replaceView = (\n  hass: HomeAssistant,\n  config: LovelaceConfig,\n  viewIndex: number,\n  viewConfig: LovelaceViewConfig\n): LovelaceConfig => {\n  if (\n    viewConfig.path &&\n    config.views.some(\n      (v, idx) => v.path === viewConfig.path && idx !== viewIndex\n    )\n  ) {\n    throw new Error(\n      hass.localize(\"ui.panel.lovelace.editor.edit_view.error_same_url\")\n    );\n  }\n  return {\n    ...config,\n    views: config.views.map((origView, index) =>\n      index === viewIndex ? viewConfig : origView\n    ),\n  };\n};\n\nexport const swapView = (\n  config: LovelaceConfig,\n  path1: number,\n  path2: number\n): LovelaceConfig => {\n  const view1 = config.views[path1];\n  const view2 = config.views[path2];\n\n  return {\n    ...config,\n    views: config.views.map((origView, index) =>\n      index === path2 ? view1 : index === path1 ? view2 : origView\n    ),\n  };\n};\n\nexport const deleteView = (\n  config: LovelaceConfig,\n  viewIndex: number\n): LovelaceConfig => ({\n  ...config,\n  views: config.views.filter((_origView, index) => index !== viewIndex),\n});\n"],"mappings":"AAEA,SAEEA,cAAc,QACT,oCAAoC;AAG3C,OAAO,MAAMC,OAAO,GAAGA,CACrBC,MAAsB,EACtBC,IAAc,EACdC,UAA8B,KACX;EACnB,MAAM,CAACC,SAAS,CAAC,GAAGF,IAAI;EACxB,MAAMG,KAA2B,GAAG,EAAE;EAEtCJ,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACxC,IAAIA,KAAK,KAAKJ,SAAS,EAAE;MACvBC,KAAK,CAACI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACG,KAAK,CAAC,CAAC;MAC/B;IACF;IAEA,IAAIT,cAAc,CAACQ,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,2CAA2C,CAAC;IAC9D;IAEA,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAK,GACxB,CAAC,GAAGJ,QAAQ,CAACI,KAAK,EAAER,UAAU,CAAC,GAC/B,CAACA,UAAU,CAAC;IAEhBE,KAAK,CAACI,IAAI,CAAC;MACT,GAAGF,QAAQ;MACXI;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACL,GAAGV,MAAM;IACTI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMO,QAAQ,GAAGA,CACtBX,MAAsB,EACtBC,IAAc,EACdW,WAAiC,KACd;EACnB,MAAM,CAACT,SAAS,CAAC,GAAGF,IAAI;EACxB,MAAMG,KAA2B,GAAG,EAAE;EAEtCJ,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACxC,IAAIA,KAAK,KAAKJ,SAAS,EAAE;MACvBC,KAAK,CAACI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACG,KAAK,CAAC,CAAC;MAC/B;IACF;IAEA,IAAIT,cAAc,CAACQ,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,0CAA0C,CAAC;IAC7D;IAEA,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAK,GACxB,CAAC,GAAGJ,QAAQ,CAACI,KAAK,EAAE,GAAGE,WAAW,CAAC,GACnC,CAAC,GAAGA,WAAW,CAAC;IAEpBR,KAAK,CAACI,IAAI,CAAC;MACT,GAAGF,QAAQ;MACXI;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACL,GAAGV,MAAM;IACTI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMS,WAAW,GAAGA,CACzBb,MAAsB,EACtBC,IAAsB,EACtBC,UAA8B,KACX;EACnB,MAAM,CAACC,SAAS,EAAEW,SAAS,CAAC,GAAGb,IAAI;EACnC,MAAMG,KAA2B,GAAG,EAAE;EAEtCJ,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACxC,IAAIA,KAAK,KAAKJ,SAAS,EAAE;MACvBC,KAAK,CAACI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACG,KAAK,CAAC,CAAC;MAC/B;IACF;IAEA,IAAIT,cAAc,CAACQ,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,+CAA+C,CAAC;IAClE;IAEAL,KAAK,CAACI,IAAI,CAAC;MACT,GAAGF,QAAQ;MACXI,KAAK,EAAE,CAACJ,QAAQ,CAACI,KAAK,IAAI,EAAE,EAAEK,GAAG,CAAC,CAACC,QAAQ,EAAEC,GAAG,KAC9CA,GAAG,KAAKH,SAAS,GAAGZ,UAAU,GAAGc,QACnC;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACL,GAAGhB,MAAM;IACTI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMc,UAAU,GAAGA,CACxBlB,MAAsB,EACtBC,IAAsB,KACH;EACnB,MAAM,CAACE,SAAS,EAAEW,SAAS,CAAC,GAAGb,IAAI;EACnC,MAAMG,KAA2B,GAAG,EAAE;EAEtCJ,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACxC,IAAIA,KAAK,KAAKJ,SAAS,EAAE;MACvBC,KAAK,CAACI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACG,KAAK,CAAC,CAAC;MAC/B;IACF;IAEA,IAAIT,cAAc,CAACQ,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,8CAA8C,CAAC;IACjE;IAEAL,KAAK,CAACI,IAAI,CAAC;MACT,GAAGF,QAAQ;MACXI,KAAK,EAAE,CAACJ,QAAQ,CAACI,KAAK,IAAI,EAAE,EAAES,MAAM,CAClC,CAACC,SAAS,EAAEH,GAAG,KAAKA,GAAG,KAAKH,SAC9B;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACL,GAAGd,MAAM;IACTI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMiB,UAAU,GAAGA,CACxBrB,MAAsB,EACtBC,IAAsB,EACtBC,UAA8B,KAC3B;EACH,MAAM,CAACC,SAAS,EAAEW,SAAS,CAAC,GAAGb,IAAI;EACnC,MAAMG,KAA2B,GAAG,EAAE;EAEtCJ,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC,CAACC,QAAQ,EAAEC,KAAK,KAAK;IACxC,IAAIA,KAAK,KAAKJ,SAAS,EAAE;MACvBC,KAAK,CAACI,IAAI,CAACR,MAAM,CAACI,KAAK,CAACG,KAAK,CAAC,CAAC;MAC/B;IACF;IAEA,IAAIT,cAAc,CAACQ,QAAQ,CAAC,EAAE;MAC5B,MAAM,IAAIG,KAAK,CAAC,8CAA8C,CAAC;IACjE;IAEA,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAK,GACxB,CACE,GAAGJ,QAAQ,CAACI,KAAK,CAACY,KAAK,CAAC,CAAC,EAAER,SAAS,CAAC,EACrCZ,UAAU,EACV,GAAGI,QAAQ,CAACI,KAAK,CAACY,KAAK,CAACR,SAAS,CAAC,CACnC,GACD,CAACZ,UAAU,CAAC;IAEhBE,KAAK,CAACI,IAAI,CAAC;MACT,GAAGF,QAAQ;MACXI;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,OAAO;IACL,GAAGV,MAAM;IACTI;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMmB,QAAQ,GAAGA,CACtBvB,MAAsB,EACtBwB,KAAuB,EACvBC,KAAuB,KACJ;EACnB,MAAMC,SAAS,GAAG1B,MAAM,CAACI,KAAK,CAACoB,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMG,SAAS,GAAG3B,MAAM,CAACI,KAAK,CAACqB,KAAK,CAAC,CAAC,CAAC,CAAC;EAExC,IAAI3B,cAAc,CAAC4B,SAAS,CAAC,IAAI5B,cAAc,CAAC6B,SAAS,CAAC,EAAE;IAC1D,MAAM,IAAIlB,KAAK,CAAC,gDAAgD,CAAC;EACnE;EAEA,MAAMmB,KAAK,GAAGF,SAAS,CAAChB,KAAK,CAAEc,KAAK,CAAC,CAAC,CAAC,CAAC;EACxC,MAAMK,KAAK,GAAGF,SAAS,CAACjB,KAAK,CAAEe,KAAK,CAAC,CAAC,CAAC,CAAC;EAExC,MAAMK,QAAQ,GAAG;IACf,GAAGJ,SAAS;IACZhB,KAAK,EAAEgB,SAAS,CAAChB,KAAK,CAAEK,GAAG,CAAC,CAACgB,QAAQ,EAAExB,KAAK,KAC1CA,KAAK,KAAKiB,KAAK,CAAC,CAAC,CAAC,GAAGK,KAAK,GAAGE,QAC/B;EACF,CAAC;EAED,MAAMC,gBAAgB,GAAGR,KAAK,CAAC,CAAC,CAAC,KAAKC,KAAK,CAAC,CAAC,CAAC,GAAGK,QAAQ,GAAGH,SAAS;EACrE,MAAMM,QAAQ,GAAG;IACf,GAAGD,gBAAgB;IACnBtB,KAAK,EAAEsB,gBAAgB,CAACtB,KAAK,CAAEK,GAAG,CAAC,CAACgB,QAAQ,EAAExB,KAAK,KACjDA,KAAK,KAAKkB,KAAK,CAAC,CAAC,CAAC,GAAGG,KAAK,GAAGG,QAC/B;EACF,CAAC;EAED,OAAO;IACL,GAAG/B,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACW,GAAG,CAAC,CAACmB,QAAQ,EAAE3B,KAAK,KACtCA,KAAK,KAAKkB,KAAK,CAAC,CAAC,CAAC,GAAGQ,QAAQ,GAAG1B,KAAK,KAAKiB,KAAK,CAAC,CAAC,CAAC,GAAGM,QAAQ,GAAGI,QAClE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAGA,CAChCnC,MAAsB,EACtBC,IAAsB,EACtBmC,QAAgB,KACG;EACnB,MAAMC,IAAI,GAAGrC,MAAM,CAACI,KAAK,CAACH,IAAI,CAAC,CAAC,CAAC,CAAC;EAElC,IAAIH,cAAc,CAACuC,IAAI,CAAC,EAAE;IACxB,MAAM,IAAI5B,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,MAAM6B,QAAQ,GAAGrC,IAAI,CAAC,CAAC,CAAC;EACxB,MAAMsC,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACN,QAAQ,GAAG,CAAC,EAAEC,IAAI,CAAC3B,KAAK,CAAEiC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;EAE5E,MAAMC,QAAQ,GAAG,CAAC,GAAGP,IAAI,CAAC3B,KAAM,CAAC;EAEjC,MAAMmC,IAAI,GAAGD,QAAQ,CAACN,QAAQ,CAAC;EAC/BM,QAAQ,CAACE,MAAM,CAACR,QAAQ,EAAE,CAAC,CAAC;EAC5BM,QAAQ,CAACE,MAAM,CAACP,QAAQ,EAAE,CAAC,EAAEM,IAAI,CAAC;EAElC,MAAME,OAAO,GAAG;IACd,GAAGV,IAAI;IACP3B,KAAK,EAAEkC;EACT,CAAC;EAED,OAAO;IACL,GAAG5C,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACW,GAAG,CAAC,CAACmB,QAAQ,EAAE3B,KAAK,KACtCA,KAAK,KAAKN,IAAI,CAAC,CAAC,CAAC,GAAG8C,OAAO,GAAGb,QAChC;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMc,QAAQ,GAAGA,CACtBhD,MAAsB,EACtBiD,QAA0B,EAC1BC,MAAgB,KACG;EACnB,IAAID,QAAQ,CAAC,CAAC,CAAC,KAAKC,MAAM,CAAC,CAAC,CAAC,EAAE;IAC7B,MAAM,IAAIzC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,MAAM0C,QAAQ,GAAGnD,MAAM,CAACI,KAAK,CAAC6C,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1C,MAAMG,MAAM,GAAGpD,MAAM,CAACI,KAAK,CAAC8C,MAAM,CAAC,CAAC,CAAC,CAAC;EAEtC,IAAIpD,cAAc,CAACqD,QAAQ,CAAC,EAAE;IAC5B,MAAM,IAAI1C,KAAK,CAAC,8CAA8C,CAAC;EACjE;EAEA,IAAIX,cAAc,CAACsD,MAAM,CAAC,EAAE;IAC1B,MAAM,IAAI3C,KAAK,CAAC,4CAA4C,CAAC;EAC/D;EAEA,MAAMoC,IAAI,GAAGM,QAAQ,CAACzC,KAAK,CAAEuC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEzC,MAAMnB,QAAQ,GAAG;IACf,GAAGqB,QAAQ;IACXzC,KAAK,EAAE,CAACyC,QAAQ,CAACzC,KAAK,IAAI,EAAE,EAAES,MAAM,CAClC,CAACC,SAAS,EAAEH,GAAG,KAAKA,GAAG,KAAKgC,QAAQ,CAAC,CAAC,CACxC;EACF,CAAC;EAED,MAAMvC,KAAK,GAAG0C,MAAM,CAAC1C,KAAK,GAAG,CAAC,GAAG0C,MAAM,CAAC1C,KAAK,EAAEmC,IAAI,CAAC,GAAG,CAACA,IAAI,CAAC;EAE7D,MAAMZ,QAAQ,GAAG;IACf,GAAGmB,MAAM;IACT1C;EACF,CAAC;EAED,OAAO;IACL,GAAGV,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACW,GAAG,CAAC,CAACmB,QAAQ,EAAE3B,KAAK,KACtCA,KAAK,KAAK2C,MAAM,CAAC,CAAC,CAAC,GACfjB,QAAQ,GACR1B,KAAK,KAAK0C,QAAQ,CAAC,CAAC,CAAC,GACnBnB,QAAQ,GACRI,QACR;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMmB,OAAO,GAAGA,CACrBC,IAAmB,EACnBtD,MAAsB,EACtBuD,UAA8B,KACX;EACnB,IAAIA,UAAU,CAACtD,IAAI,IAAID,MAAM,CAACI,KAAK,CAACoD,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAACxD,IAAI,KAAKsD,UAAU,CAACtD,IAAI,CAAC,EAAE;IAC3E,MAAM,IAAIQ,KAAK,CACb6C,IAAI,CAACI,QAAQ,CAAC,mDAAmD,CACnE,CAAC;EACH;EACA,OAAO;IACL,GAAG1D,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACuD,MAAM,CAACJ,UAAU;EACvC,CAAC;AACH,CAAC;AAED,OAAO,MAAMK,WAAW,GAAGA,CACzBN,IAAmB,EACnBtD,MAAsB,EACtBG,SAAiB,EACjBoD,UAA8B,KACX;EACnB,IACEA,UAAU,CAACtD,IAAI,IACfD,MAAM,CAACI,KAAK,CAACoD,IAAI,CACf,CAACC,CAAC,EAAEI,GAAG,KAAKJ,CAAC,CAACxD,IAAI,KAAKsD,UAAU,CAACtD,IAAI,IAAI4D,GAAG,KAAK1D,SACpD,CAAC,EACD;IACA,MAAM,IAAIM,KAAK,CACb6C,IAAI,CAACI,QAAQ,CAAC,mDAAmD,CACnE,CAAC;EACH;EACA,OAAO;IACL,GAAG1D,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACW,GAAG,CAAC,CAACmB,QAAQ,EAAE3B,KAAK,KACtCA,KAAK,KAAKJ,SAAS,GAAGoD,UAAU,GAAGrB,QACrC;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAM4B,QAAQ,GAAGA,CACtB9D,MAAsB,EACtBwB,KAAa,EACbC,KAAa,KACM;EACnB,MAAMsC,KAAK,GAAG/D,MAAM,CAACI,KAAK,CAACoB,KAAK,CAAC;EACjC,MAAMwC,KAAK,GAAGhE,MAAM,CAACI,KAAK,CAACqB,KAAK,CAAC;EAEjC,OAAO;IACL,GAAGzB,MAAM;IACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACW,GAAG,CAAC,CAACmB,QAAQ,EAAE3B,KAAK,KACtCA,KAAK,KAAKkB,KAAK,GAAGsC,KAAK,GAAGxD,KAAK,KAAKiB,KAAK,GAAGwC,KAAK,GAAG9B,QACtD;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAM+B,UAAU,GAAGA,CACxBjE,MAAsB,EACtBG,SAAiB,MACG;EACpB,GAAGH,MAAM;EACTI,KAAK,EAAEJ,MAAM,CAACI,KAAK,CAACe,MAAM,CAAC,CAAC+C,SAAS,EAAE3D,KAAK,KAAKA,KAAK,KAAKJ,SAAS;AACtE,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}