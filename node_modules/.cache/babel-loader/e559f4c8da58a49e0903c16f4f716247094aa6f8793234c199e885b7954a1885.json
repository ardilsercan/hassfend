{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime/helpers/taggedTemplateLiteral\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _decorate from \"@babel/runtime/helpers/decorate\";\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6, _templateObject7, _templateObject8, _templateObject9, _templateObject10;\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.assign.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.find.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"@material/mwc-button/mwc-button\";\nvar mdiDelete = \"M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z\";\nvar mdiHomeExportOutline = \"M24 13L20 17V14H11V12H20V9L24 13M4 20V12H1L11 3L18 9.3V10H15.79L11 5.69L6 10.19V18H16V16H18V20H4Z\";\nvar mdiHomeImportOutline = \"M15 13L11 17V14H2V12H11V9L15 13M5 20V16H7V18H17V10.19L12 5.69L7.21 10H4.22L12 3L22 12H19V20H5Z\";\nvar mdiPencil = \"M20.71,7.04C21.1,6.65 21.1,6 20.71,5.63L18.37,3.29C18,2.9 17.35,2.9 16.96,3.29L15.12,5.12L18.87,8.87M3,17.25V21H6.75L17.81,9.93L14.06,6.18L3,17.25Z\";\nvar mdiTransmissionTower = \"M8.28,5.45L6.5,4.55L7.76,2H16.23L17.5,4.55L15.72,5.44L15,4H9L8.28,5.45M18.62,8H14.09L13.3,5H10.7L9.91,8H5.38L4.1,10.55L5.89,11.44L6.62,10H17.38L18.1,11.45L19.89,10.56L18.62,8M17.77,22H15.7L15.46,21.1L12,15.9L8.53,21.1L8.3,22H6.23L9.12,11H11.19L10.83,12.35L12,14.1L13.16,12.35L12.81,11H14.88L17.77,22M11.4,15L10.5,13.65L9.32,18.13L11.4,15M14.68,18.12L13.5,13.64L12.6,15L14.68,18.12Z\";\nimport { html, LitElement } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport { deleteConfigEntry, getConfigEntries } from \"../../../../data/config_entries\";\nimport { emptyGridSourceEnergyPreference, energySourcesByType, saveEnergyPreferences } from \"../../../../data/energy\";\nimport { getStatisticLabel } from \"../../../../data/recorder\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport { showAlertDialog, showConfirmationDialog } from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport { showEnergySettingsGridFlowFromDialog, showEnergySettingsGridFlowToDialog } from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\nexport var EnergyGridSettings = _decorate([customElement(\"ha-energy-grid-settings\")], function (_initialize, _LitElement) {\n  var EnergyGridSettings = /*#__PURE__*/function (_LitElement2) {\n    _inherits(EnergyGridSettings, _LitElement2);\n    function EnergyGridSettings() {\n      var _this;\n      _classCallCheck(this, EnergyGridSettings);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, EnergyGridSettings, [].concat(args));\n      _initialize(_assertThisInitialized(_this));\n      return _this;\n    }\n    return _createClass(EnergyGridSettings);\n  }(_LitElement);\n  return {\n    F: EnergyGridSettings,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"preferences\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"statsMetadata\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"validationResult\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_co2ConfigEntry\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        this._fetchCO2SignalConfigEntries();\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this2 = this,\n          _this$hass$themes,\n          _this$_co2ConfigEntry,\n          _this$hass$themes2;\n        var gridIdx = this.preferences.energy_sources.findIndex(function (source) {\n          return source.type === \"grid\";\n        });\n        var gridSource;\n        var gridValidation;\n        if (gridIdx === -1) {\n          gridSource = emptyGridSourceEnergyPreference();\n        } else {\n          gridSource = this.preferences.energy_sources[gridIdx];\n          if (this.validationResult) {\n            gridValidation = this.validationResult.energy_sources[gridIdx];\n          }\n        }\n        return html(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n      <ha-card outlined>\\n        <h1 class=\\\"card-header\\\">\\n          <ha-svg-icon .path=\", \"></ha-svg-icon>\\n          \", \"\\n        </h1>\\n\\n        <div class=\\\"card-content\\\">\\n          <p>\\n            \", \"\\n            <a\\n              target=\\\"_blank\\\"\\n              rel=\\\"noopener noreferrer\\\"\\n              href=\", \"\\n              >\", \"</a\\n            >\\n          </p>\\n          \", \"\\n\\n          <h3>\\n            \", \"\\n          </h3>\\n          \", \"\\n          <div class=\\\"row border-bottom\\\">\\n            <ha-svg-icon .path=\", \"></ha-svg-icon>\\n            <mwc-button @click=\", \"\\n              >\", \"</mwc-button\\n            >\\n          </div>\\n\\n          <h3>\\n            \", \"\\n          </h3>\\n          \", \"\\n          <div class=\\\"row border-bottom\\\">\\n            <ha-svg-icon .path=\", \"></ha-svg-icon>\\n            <mwc-button @click=\", \"\\n              >\", \"</mwc-button\\n            >\\n          </div>\\n\\n          <h3>\\n            \", \"\\n          </h3>\\n          \", \"\\n        </div>\\n      </ha-card>\\n    \"])), mdiTransmissionTower, this.hass.localize(\"ui.panel.config.energy.grid.title\"), this.hass.localize(\"ui.panel.config.energy.grid.sub\"), documentationUrl(this.hass, \"/docs/energy/electricity-grid/\"), this.hass.localize(\"ui.panel.config.energy.grid.learn_more\"), gridValidation ? html(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n                <ha-energy-validation-result\\n                  .hass=\", \"\\n                  .issues=\", \"\\n                ></ha-energy-validation-result>\\n              \"])), this.hass, gridValidation) : \"\", this.hass.localize(\"ui.panel.config.energy.grid.grid_consumption\"), gridSource.flow_from.map(function (flow) {\n          var _this2$statsMetadata;\n          var entityState = _this2.hass.states[flow.stat_energy_from];\n          return html(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n              <div class=\\\"row\\\" .source=\", \">\\n                \", \"\\n                <span class=\\\"content\\\"\\n                  >\", \"</span\\n                >\\n                <ha-icon-button\\n                  .label=\", \"\\n                  @click=\", \"\\n                  .path=\", \"\\n                ></ha-icon-button>\\n                <ha-icon-button\\n                  .label=\", \"\\n                  @click=\", \"\\n                  .path=\", \"\\n                ></ha-icon-button>\\n              </div>\\n            \"])), flow, entityState !== null && entityState !== void 0 && entityState.attributes.icon ? html(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"<ha-icon\\n                      .icon=\", \"\\n                    ></ha-icon>\"])), entityState === null || entityState === void 0 ? void 0 : entityState.attributes.icon) : html(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"<ha-svg-icon\\n                      .path=\", \"\\n                    ></ha-svg-icon>\"])), mdiHomeImportOutline), getStatisticLabel(_this2.hass, flow.stat_energy_from, (_this2$statsMetadata = _this2.statsMetadata) === null || _this2$statsMetadata === void 0 ? void 0 : _this2$statsMetadata[flow.stat_energy_from]), _this2.hass.localize(\"ui.panel.config.energy.grid.edit_consumption\"), _this2._editFromSource, mdiPencil, _this2.hass.localize(\"ui.panel.config.energy.grid.delete_consumption\"), _this2._deleteFromSource, mdiDelete);\n        }), mdiHomeImportOutline, this._addFromSource, this.hass.localize(\"ui.panel.config.energy.grid.add_consumption\"), this.hass.localize(\"ui.panel.config.energy.grid.return_to_grid\"), gridSource.flow_to.map(function (flow) {\n          var _this2$statsMetadata2;\n          var entityState = _this2.hass.states[flow.stat_energy_to];\n          return html(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n              <div class=\\\"row\\\" .source=\", \">\\n                \", \"\\n                <span class=\\\"content\\\"\\n                  >\", \"</span\\n                >\\n                <ha-icon-button\\n                  .label=\", \"\\n                  @click=\", \"\\n                  .path=\", \"\\n                ></ha-icon-button>\\n                <ha-icon-button\\n                  .label=\", \"\\n                  @click=\", \"\\n                  .path=\", \"\\n                ></ha-icon-button>\\n              </div>\\n            \"])), flow, entityState !== null && entityState !== void 0 && entityState.attributes.icon ? html(_templateObject7 || (_templateObject7 = _taggedTemplateLiteral([\"<ha-icon\\n                      .icon=\", \"\\n                    ></ha-icon>\"])), entityState.attributes.icon) : html(_templateObject8 || (_templateObject8 = _taggedTemplateLiteral([\"<ha-svg-icon\\n                      .path=\", \"\\n                    ></ha-svg-icon>\"])), mdiHomeExportOutline), getStatisticLabel(_this2.hass, flow.stat_energy_to, (_this2$statsMetadata2 = _this2.statsMetadata) === null || _this2$statsMetadata2 === void 0 ? void 0 : _this2$statsMetadata2[flow.stat_energy_to]), _this2.hass.localize(\"ui.panel.config.energy.grid.edit_return\"), _this2._editToSource, mdiPencil, _this2.hass.localize(\"ui.panel.config.energy.grid.delete_return\"), _this2._deleteToSource, mdiDelete);\n        }), mdiHomeExportOutline, this._addToSource, this.hass.localize(\"ui.panel.config.energy.grid.add_return\"), this.hass.localize(\"ui.panel.config.energy.grid.grid_carbon_footprint\"), this._co2ConfigEntry ? html(_templateObject9 || (_templateObject9 = _taggedTemplateLiteral([\"<div class=\\\"row\\\" .entry=\", \">\\n                <img\\n                  alt=\\\"\\\"\\n                  crossorigin=\\\"anonymous\\\"\\n                  referrerpolicy=\\\"no-referrer\\\"\\n                  src=\", \"\\n                />\\n                <span class=\\\"content\\\">\", \"</span>\\n                <a\\n                  href=\", \"\\n                >\\n                  <ha-icon-button .path=\", \"></ha-icon-button>\\n                </a>\\n                <ha-icon-button\\n                  .label=\", \"\\n                  @click=\", \"\\n                  .path=\", \"\\n                ></ha-icon-button>\\n              </div>\"])), this._co2ConfigEntry, brandsUrl({\n          domain: \"co2signal\",\n          type: \"icon\",\n          darkOptimized: (_this$hass$themes = this.hass.themes) === null || _this$hass$themes === void 0 ? void 0 : _this$hass$themes.darkMode\n        }), this._co2ConfigEntry.title, \"/config/integrations/integration/\".concat((_this$_co2ConfigEntry = this._co2ConfigEntry) === null || _this$_co2ConfigEntry === void 0 ? void 0 : _this$_co2ConfigEntry.domain), mdiPencil, this.hass.localize(\"ui.panel.config.energy.grid.remove_co2_signal\"), this._removeCO2Sensor, mdiDelete) : html(_templateObject10 || (_templateObject10 = _taggedTemplateLiteral([\"\\n                <div class=\\\"row border-bottom\\\">\\n                  <img\\n                    alt=\\\"\\\"\\n                    crossorigin=\\\"anonymous\\\"\\n                    referrerpolicy=\\\"no-referrer\\\"\\n                    src=\", \"\\n                  />\\n                  <mwc-button @click=\", \">\\n                    \", \"\\n                  </mwc-button>\\n                </div>\\n              \"])), brandsUrl({\n          domain: \"co2signal\",\n          type: \"icon\",\n          darkOptimized: (_this$hass$themes2 = this.hass.themes) === null || _this$hass$themes2 === void 0 ? void 0 : _this$hass$themes2.darkMode\n        }), this._addCO2Sensor, this.hass.localize(\"ui.panel.config.energy.grid.add_co2_signal\")));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_fetchCO2SignalConfigEntries\",\n      value: function () {\n        var _fetchCO2SignalConfigEntries2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var entries;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getConfigEntries(this.hass, {\n                  domain: \"co2signal\"\n                });\n              case 2:\n                entries = _context.sent;\n                this._co2ConfigEntry = entries.length ? entries[0] : undefined;\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, this);\n        }));\n        function _fetchCO2SignalConfigEntries() {\n          return _fetchCO2SignalConfigEntries2.apply(this, arguments);\n        }\n        return _fetchCO2SignalConfigEntries;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_addCO2Sensor\",\n      value: function _addCO2Sensor() {\n        var _this3 = this;\n        showConfigFlowDialog(this, {\n          startFlowHandler: \"co2signal\",\n          dialogClosedCallback: function dialogClosedCallback() {\n            _this3._fetchCO2SignalConfigEntries();\n          }\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_removeCO2Sensor\",\n      value: function () {\n        var _removeCO2Sensor2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(ev) {\n          var entryId;\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                entryId = ev.currentTarget.closest(\".row\").entry.entry_id;\n                _context2.next = 3;\n                return showConfirmationDialog(this, {\n                  title: this.hass.localize(\"ui.panel.config.energy.delete_integration\")\n                });\n              case 3:\n                if (_context2.sent) {\n                  _context2.next = 5;\n                  break;\n                }\n                return _context2.abrupt(\"return\");\n              case 5:\n                _context2.next = 7;\n                return deleteConfigEntry(this.hass, entryId);\n              case 7:\n                this._fetchCO2SignalConfigEntries();\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2, this);\n        }));\n        function _removeCO2Sensor(_x) {\n          return _removeCO2Sensor2.apply(this, arguments);\n        }\n        return _removeCO2Sensor;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_addFromSource\",\n      value: function _addFromSource() {\n        var _this4 = this;\n        var gridSource = this.preferences.energy_sources.find(function (src) {\n          return src.type === \"grid\";\n        });\n        showEnergySettingsGridFlowFromDialog(this, {\n          grid_source: gridSource,\n          saveCallback: function () {\n            var _saveCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(flow) {\n              var preferences;\n              return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                while (1) switch (_context3.prev = _context3.next) {\n                  case 0:\n                    if (!gridSource) {\n                      preferences = Object.assign(Object.assign({}, _this4.preferences), {}, {\n                        energy_sources: [].concat(_toConsumableArray(_this4.preferences.energy_sources), [Object.assign(Object.assign({}, emptyGridSourceEnergyPreference()), {}, {\n                          flow_from: [flow]\n                        })])\n                      });\n                    } else {\n                      preferences = Object.assign(Object.assign({}, _this4.preferences), {}, {\n                        energy_sources: _this4.preferences.energy_sources.map(function (src) {\n                          return src.type === \"grid\" ? Object.assign(Object.assign({}, src), {}, {\n                            flow_from: [].concat(_toConsumableArray(gridSource.flow_from), [flow])\n                          }) : src;\n                        })\n                      });\n                    }\n                    _context3.next = 3;\n                    return _this4._savePreferences(preferences);\n                  case 3:\n                  case \"end\":\n                    return _context3.stop();\n                }\n              }, _callee3);\n            }));\n            function saveCallback(_x2) {\n              return _saveCallback.apply(this, arguments);\n            }\n            return saveCallback;\n          }()\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_addToSource\",\n      value: function _addToSource() {\n        var _this5 = this;\n        var gridSource = this.preferences.energy_sources.find(function (src) {\n          return src.type === \"grid\";\n        });\n        showEnergySettingsGridFlowToDialog(this, {\n          grid_source: gridSource,\n          saveCallback: function () {\n            var _saveCallback2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(flow) {\n              var preferences;\n              return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n                while (1) switch (_context4.prev = _context4.next) {\n                  case 0:\n                    if (!gridSource) {\n                      preferences = Object.assign(Object.assign({}, _this5.preferences), {}, {\n                        energy_sources: [].concat(_toConsumableArray(_this5.preferences.energy_sources), [Object.assign(Object.assign({}, emptyGridSourceEnergyPreference()), {}, {\n                          flow_to: [flow]\n                        })])\n                      });\n                    } else {\n                      preferences = Object.assign(Object.assign({}, _this5.preferences), {}, {\n                        energy_sources: _this5.preferences.energy_sources.map(function (src) {\n                          return src.type === \"grid\" ? Object.assign(Object.assign({}, src), {}, {\n                            flow_to: [].concat(_toConsumableArray(gridSource.flow_to), [flow])\n                          }) : src;\n                        })\n                      });\n                    }\n                    _context4.next = 3;\n                    return _this5._savePreferences(preferences);\n                  case 3:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }, _callee4);\n            }));\n            function saveCallback(_x3) {\n              return _saveCallback2.apply(this, arguments);\n            }\n            return saveCallback;\n          }()\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_editFromSource\",\n      value: function _editFromSource(ev) {\n        var _this$statsMetadata,\n          _this6 = this;\n        var origSource = ev.currentTarget.closest(\".row\").source;\n        var gridSource = this.preferences.energy_sources.find(function (src) {\n          return src.type === \"grid\";\n        });\n        showEnergySettingsGridFlowFromDialog(this, {\n          source: Object.assign({}, origSource),\n          grid_source: gridSource,\n          metadata: (_this$statsMetadata = this.statsMetadata) === null || _this$statsMetadata === void 0 ? void 0 : _this$statsMetadata[origSource.stat_energy_from],\n          saveCallback: function () {\n            var _saveCallback3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(source) {\n              var flowFrom, preferences;\n              return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n                while (1) switch (_context5.prev = _context5.next) {\n                  case 0:\n                    flowFrom = energySourcesByType(_this6.preferences).grid[0].flow_from;\n                    preferences = Object.assign(Object.assign({}, _this6.preferences), {}, {\n                      energy_sources: _this6.preferences.energy_sources.map(function (src) {\n                        return src.type === \"grid\" ? Object.assign(Object.assign({}, src), {}, {\n                          flow_from: flowFrom.map(function (flow) {\n                            return flow === origSource ? source : flow;\n                          })\n                        }) : src;\n                      })\n                    });\n                    _context5.next = 4;\n                    return _this6._savePreferences(preferences);\n                  case 4:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }, _callee5);\n            }));\n            function saveCallback(_x4) {\n              return _saveCallback3.apply(this, arguments);\n            }\n            return saveCallback;\n          }()\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_editToSource\",\n      value: function _editToSource(ev) {\n        var _this$statsMetadata2,\n          _this7 = this;\n        var origSource = ev.currentTarget.closest(\".row\").source;\n        var gridSource = this.preferences.energy_sources.find(function (src) {\n          return src.type === \"grid\";\n        });\n        showEnergySettingsGridFlowToDialog(this, {\n          source: Object.assign({}, origSource),\n          grid_source: gridSource,\n          metadata: (_this$statsMetadata2 = this.statsMetadata) === null || _this$statsMetadata2 === void 0 ? void 0 : _this$statsMetadata2[origSource.stat_energy_to],\n          saveCallback: function () {\n            var _saveCallback4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(source) {\n              var flowTo, preferences;\n              return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n                while (1) switch (_context6.prev = _context6.next) {\n                  case 0:\n                    flowTo = energySourcesByType(_this7.preferences).grid[0].flow_to;\n                    preferences = Object.assign(Object.assign({}, _this7.preferences), {}, {\n                      energy_sources: _this7.preferences.energy_sources.map(function (src) {\n                        return src.type === \"grid\" ? Object.assign(Object.assign({}, src), {}, {\n                          flow_to: flowTo.map(function (flow) {\n                            return flow === origSource ? source : flow;\n                          })\n                        }) : src;\n                      })\n                    });\n                    _context6.next = 4;\n                    return _this7._savePreferences(preferences);\n                  case 4:\n                  case \"end\":\n                    return _context6.stop();\n                }\n              }, _callee6);\n            }));\n            function saveCallback(_x5) {\n              return _saveCallback4.apply(this, arguments);\n            }\n            return saveCallback;\n          }()\n        });\n      }\n    }, {\n      kind: \"method\",\n      key: \"_deleteFromSource\",\n      value: function () {\n        var _deleteFromSource2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(ev) {\n          var sourceToDelete, flowFrom, preferences;\n          return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n            while (1) switch (_context7.prev = _context7.next) {\n              case 0:\n                sourceToDelete = ev.currentTarget.closest(\".row\").source;\n                _context7.next = 3;\n                return showConfirmationDialog(this, {\n                  title: this.hass.localize(\"ui.panel.config.energy.delete_source\")\n                });\n              case 3:\n                if (_context7.sent) {\n                  _context7.next = 5;\n                  break;\n                }\n                return _context7.abrupt(\"return\");\n              case 5:\n                flowFrom = energySourcesByType(this.preferences).grid[0].flow_from.filter(function (flow) {\n                  return flow !== sourceToDelete;\n                });\n                preferences = Object.assign(Object.assign({}, this.preferences), {}, {\n                  energy_sources: this.preferences.energy_sources.map(function (source) {\n                    return source.type === \"grid\" ? Object.assign(Object.assign({}, source), {}, {\n                      flow_from: flowFrom\n                    }) : source;\n                  })\n                });\n                _context7.prev = 7;\n                _context7.next = 10;\n                return this._savePreferences(preferences);\n              case 10:\n                _context7.next = 15;\n                break;\n              case 12:\n                _context7.prev = 12;\n                _context7.t0 = _context7[\"catch\"](7);\n                showAlertDialog(this, {\n                  title: \"Failed to save config: \".concat(_context7.t0.message)\n                });\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }, _callee7, this, [[7, 12]]);\n        }));\n        function _deleteFromSource(_x6) {\n          return _deleteFromSource2.apply(this, arguments);\n        }\n        return _deleteFromSource;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_deleteToSource\",\n      value: function () {\n        var _deleteToSource2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(ev) {\n          var sourceToDelete, flowTo, preferences;\n          return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n            while (1) switch (_context8.prev = _context8.next) {\n              case 0:\n                sourceToDelete = ev.currentTarget.closest(\".row\").source;\n                _context8.next = 3;\n                return showConfirmationDialog(this, {\n                  title: this.hass.localize(\"ui.panel.config.energy.delete_source\")\n                });\n              case 3:\n                if (_context8.sent) {\n                  _context8.next = 5;\n                  break;\n                }\n                return _context8.abrupt(\"return\");\n              case 5:\n                flowTo = energySourcesByType(this.preferences).grid[0].flow_to.filter(function (flow) {\n                  return flow !== sourceToDelete;\n                });\n                preferences = Object.assign(Object.assign({}, this.preferences), {}, {\n                  energy_sources: this.preferences.energy_sources.map(function (source) {\n                    return source.type === \"grid\" ? Object.assign(Object.assign({}, source), {}, {\n                      flow_to: flowTo\n                    }) : source;\n                  })\n                });\n                _context8.prev = 7;\n                _context8.next = 10;\n                return this._savePreferences(preferences);\n              case 10:\n                _context8.next = 15;\n                break;\n              case 12:\n                _context8.prev = 12;\n                _context8.t0 = _context8[\"catch\"](7);\n                showAlertDialog(this, {\n                  title: \"Failed to save config: \".concat(_context8.t0.message)\n                });\n              case 15:\n              case \"end\":\n                return _context8.stop();\n            }\n          }, _callee8, this, [[7, 12]]);\n        }));\n        function _deleteToSource(_x7) {\n          return _deleteToSource2.apply(this, arguments);\n        }\n        return _deleteToSource;\n      }()\n    }, {\n      kind: \"method\",\n      key: \"_savePreferences\",\n      value: function () {\n        var _savePreferences2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(preferences) {\n          var result;\n          return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n            while (1) switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return saveEnergyPreferences(this.hass, preferences);\n              case 2:\n                result = _context9.sent;\n                fireEvent(this, \"value-changed\", {\n                  value: result\n                });\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }, _callee9, this);\n        }));\n        function _savePreferences(_x8) {\n          return _savePreferences2.apply(this, arguments);\n        }\n        return _savePreferences;\n      }()\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [haStyle, energyCardStyles];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiDelete","mdiHomeExportOutline","mdiHomeImportOutline","mdiPencil","mdiTransmissionTower","html","LitElement","customElement","property","state","fireEvent","deleteConfigEntry","getConfigEntries","emptyGridSourceEnergyPreference","energySourcesByType","saveEnergyPreferences","getStatisticLabel","showConfigFlowDialog","showAlertDialog","showConfirmationDialog","haStyle","brandsUrl","documentationUrl","showEnergySettingsGridFlowFromDialog","showEnergySettingsGridFlowToDialog","energyCardStyles","EnergyGridSettings","_decorate","_initialize","_LitElement","_LitElement2","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_assertThisInitialized","_createClass","F","d","kind","decorators","attribute","key","value","firstUpdated","_fetchCO2SignalConfigEntries","render","_this2","_this$hass$themes","_this$_co2ConfigEntry","_this$hass$themes2","gridIdx","preferences","energy_sources","findIndex","source","type","gridSource","gridValidation","validationResult","_templateObject","_taggedTemplateLiteral","hass","localize","_templateObject2","flow_from","map","flow","_this2$statsMetadata","entityState","states","stat_energy_from","_templateObject3","attributes","icon","_templateObject4","_templateObject5","statsMetadata","_editFromSource","_deleteFromSource","_addFromSource","flow_to","_this2$statsMetadata2","stat_energy_to","_templateObject6","_templateObject7","_templateObject8","_editToSource","_deleteToSource","_addToSource","_co2ConfigEntry","_templateObject9","domain","darkOptimized","themes","darkMode","title","_removeCO2Sensor","_templateObject10","_addCO2Sensor","_fetchCO2SignalConfigEntries2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","entries","wrap","_callee$","_context","prev","next","sent","undefined","stop","apply","_this3","startFlowHandler","dialogClosedCallback","_removeCO2Sensor2","_callee2","ev","entryId","_callee2$","_context2","currentTarget","closest","entry","entry_id","abrupt","_x","_this4","find","src","grid_source","saveCallback","_saveCallback","_callee3","_callee3$","_context3","Object","assign","_toConsumableArray","_savePreferences","_x2","_this5","_saveCallback2","_callee4","_callee4$","_context4","_x3","_this$statsMetadata","_this6","origSource","metadata","_saveCallback3","_callee5","flowFrom","_callee5$","_context5","grid","_x4","_this$statsMetadata2","_this7","_saveCallback4","_callee6","flowTo","_callee6$","_context6","_x5","_deleteFromSource2","_callee7","sourceToDelete","_callee7$","_context7","filter","t0","message","_x6","_deleteToSource2","_callee8","_callee8$","_context8","_x7","_savePreferences2","_callee9","result","_callee9$","_context9","_x8","static","styles"],"sources":["/workspaces/frontend/src/panels/config/energy/components/ha-energy-grid-settings.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport {\n  mdiDelete,\n  mdiHomeExportOutline,\n  mdiHomeImportOutline,\n  mdiPencil,\n  mdiTransmissionTower,\n} from \"@mdi/js\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport \"../../../../components/ha-card\";\nimport \"../../../../components/ha-icon-button\";\nimport {\n  ConfigEntry,\n  deleteConfigEntry,\n  getConfigEntries,\n} from \"../../../../data/config_entries\";\nimport {\n  emptyGridSourceEnergyPreference,\n  EnergyPreferences,\n  EnergyPreferencesValidation,\n  energySourcesByType,\n  EnergyValidationIssue,\n  FlowFromGridSourceEnergyPreference,\n  FlowToGridSourceEnergyPreference,\n  GridSourceTypeEnergyPreference,\n  saveEnergyPreferences,\n} from \"../../../../data/energy\";\nimport {\n  StatisticsMetaData,\n  getStatisticLabel,\n} from \"../../../../data/recorder\";\nimport { showConfigFlowDialog } from \"../../../../dialogs/config-flow/show-dialog-config-flow\";\nimport {\n  showAlertDialog,\n  showConfirmationDialog,\n} from \"../../../../dialogs/generic/show-dialog-box\";\nimport { haStyle } from \"../../../../resources/styles\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { brandsUrl } from \"../../../../util/brands-url\";\nimport { documentationUrl } from \"../../../../util/documentation-url\";\nimport {\n  showEnergySettingsGridFlowFromDialog,\n  showEnergySettingsGridFlowToDialog,\n} from \"../dialogs/show-dialogs-energy\";\nimport \"./ha-energy-validation-result\";\nimport { energyCardStyles } from \"./styles\";\n\n@customElement(\"ha-energy-grid-settings\")\nexport class EnergyGridSettings extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false })\n  public preferences!: EnergyPreferences;\n\n  @property({ attribute: false })\n  public statsMetadata?: Record<string, StatisticsMetaData>;\n\n  @property({ attribute: false })\n  public validationResult?: EnergyPreferencesValidation;\n\n  @state() private _co2ConfigEntry?: ConfigEntry;\n\n  protected firstUpdated() {\n    this._fetchCO2SignalConfigEntries();\n  }\n\n  protected render(): TemplateResult {\n    const gridIdx = this.preferences.energy_sources.findIndex(\n      (source) => source.type === \"grid\"\n    );\n\n    let gridSource: GridSourceTypeEnergyPreference;\n    let gridValidation: EnergyValidationIssue[] | undefined;\n\n    if (gridIdx === -1) {\n      gridSource = emptyGridSourceEnergyPreference();\n    } else {\n      gridSource = this.preferences.energy_sources[\n        gridIdx\n      ] as GridSourceTypeEnergyPreference;\n      if (this.validationResult) {\n        gridValidation = this.validationResult.energy_sources[gridIdx];\n      }\n    }\n\n    return html`\n      <ha-card outlined>\n        <h1 class=\"card-header\">\n          <ha-svg-icon .path=${mdiTransmissionTower}></ha-svg-icon>\n          ${this.hass.localize(\"ui.panel.config.energy.grid.title\")}\n        </h1>\n\n        <div class=\"card-content\">\n          <p>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.sub\")}\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href=${documentationUrl(\n                this.hass,\n                \"/docs/energy/electricity-grid/\"\n              )}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.learn_more\"\n              )}</a\n            >\n          </p>\n          ${gridValidation\n            ? html`\n                <ha-energy-validation-result\n                  .hass=${this.hass}\n                  .issues=${gridValidation}\n                ></ha-energy-validation-result>\n              `\n            : \"\"}\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.grid.grid_consumption\"\n            )}\n          </h3>\n          ${gridSource.flow_from.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_from];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState?.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeImportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_from,\n                    this.statsMetadata?.[flow.stat_energy_from]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_consumption\"\n                  )}\n                  @click=${this._editFromSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_consumption\"\n                  )}\n                  @click=${this._deleteFromSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeImportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addFromSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_consumption\"\n              )}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\"ui.panel.config.energy.grid.return_to_grid\")}\n          </h3>\n          ${gridSource.flow_to.map((flow) => {\n            const entityState = this.hass.states[flow.stat_energy_to];\n            return html`\n              <div class=\"row\" .source=${flow}>\n                ${entityState?.attributes.icon\n                  ? html`<ha-icon\n                      .icon=${entityState.attributes.icon}\n                    ></ha-icon>`\n                  : html`<ha-svg-icon\n                      .path=${mdiHomeExportOutline}\n                    ></ha-svg-icon>`}\n                <span class=\"content\"\n                  >${getStatisticLabel(\n                    this.hass,\n                    flow.stat_energy_to,\n                    this.statsMetadata?.[flow.stat_energy_to]\n                  )}</span\n                >\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.edit_return\"\n                  )}\n                  @click=${this._editToSource}\n                  .path=${mdiPencil}\n                ></ha-icon-button>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.delete_return\"\n                  )}\n                  @click=${this._deleteToSource}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>\n            `;\n          })}\n          <div class=\"row border-bottom\">\n            <ha-svg-icon .path=${mdiHomeExportOutline}></ha-svg-icon>\n            <mwc-button @click=${this._addToSource}\n              >${this.hass.localize(\n                \"ui.panel.config.energy.grid.add_return\"\n              )}</mwc-button\n            >\n          </div>\n\n          <h3>\n            ${this.hass.localize(\n              \"ui.panel.config.energy.grid.grid_carbon_footprint\"\n            )}\n          </h3>\n          ${this._co2ConfigEntry\n            ? html`<div class=\"row\" .entry=${this._co2ConfigEntry}>\n                <img\n                  alt=\"\"\n                  crossorigin=\"anonymous\"\n                  referrerpolicy=\"no-referrer\"\n                  src=${brandsUrl({\n                    domain: \"co2signal\",\n                    type: \"icon\",\n                    darkOptimized: this.hass.themes?.darkMode,\n                  })}\n                />\n                <span class=\"content\">${this._co2ConfigEntry.title}</span>\n                <a\n                  href=${`/config/integrations/integration/${this._co2ConfigEntry?.domain}`}\n                >\n                  <ha-icon-button .path=${mdiPencil}></ha-icon-button>\n                </a>\n                <ha-icon-button\n                  .label=${this.hass.localize(\n                    \"ui.panel.config.energy.grid.remove_co2_signal\"\n                  )}\n                  @click=${this._removeCO2Sensor}\n                  .path=${mdiDelete}\n                ></ha-icon-button>\n              </div>`\n            : html`\n                <div class=\"row border-bottom\">\n                  <img\n                    alt=\"\"\n                    crossorigin=\"anonymous\"\n                    referrerpolicy=\"no-referrer\"\n                    src=${brandsUrl({\n                      domain: \"co2signal\",\n                      type: \"icon\",\n                      darkOptimized: this.hass.themes?.darkMode,\n                    })}\n                  />\n                  <mwc-button @click=${this._addCO2Sensor}>\n                    ${this.hass.localize(\n                      \"ui.panel.config.energy.grid.add_co2_signal\"\n                    )}\n                  </mwc-button>\n                </div>\n              `}\n        </div>\n      </ha-card>\n    `;\n  }\n\n  private async _fetchCO2SignalConfigEntries() {\n    const entries = await getConfigEntries(this.hass, { domain: \"co2signal\" });\n    this._co2ConfigEntry = entries.length ? entries[0] : undefined;\n  }\n\n  private _addCO2Sensor() {\n    showConfigFlowDialog(this, {\n      startFlowHandler: \"co2signal\",\n      dialogClosedCallback: () => {\n        this._fetchCO2SignalConfigEntries();\n      },\n    });\n  }\n\n  private async _removeCO2Sensor(ev) {\n    const entryId = ev.currentTarget.closest(\".row\").entry.entry_id;\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_integration\"),\n      }))\n    ) {\n      return;\n    }\n\n    await deleteConfigEntry(this.hass, entryId);\n    this._fetchCO2SignalConfigEntries();\n  }\n\n  private _addFromSource() {\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowFromDialog(this, {\n      grid_source: gridSource,\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_from: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_from: [...gridSource.flow_from, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _addToSource() {\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowToDialog(this, {\n      grid_source: gridSource,\n      saveCallback: async (flow) => {\n        let preferences: EnergyPreferences;\n        if (!gridSource) {\n          preferences = {\n            ...this.preferences,\n            energy_sources: [\n              ...this.preferences.energy_sources,\n              {\n                ...emptyGridSourceEnergyPreference(),\n                flow_to: [flow],\n              },\n            ],\n          };\n        } else {\n          preferences = {\n            ...this.preferences,\n            energy_sources: this.preferences.energy_sources.map((src) =>\n              src.type === \"grid\"\n                ? { ...src, flow_to: [...gridSource.flow_to, flow] }\n                : src\n            ),\n          };\n        }\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editFromSource(ev) {\n    const origSource: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowFromDialog(this, {\n      source: { ...origSource },\n      grid_source: gridSource,\n      metadata: this.statsMetadata?.[origSource.stat_energy_from],\n      saveCallback: async (source) => {\n        const flowFrom = energySourcesByType(this.preferences).grid![0]\n          .flow_from;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_from: flowFrom.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private _editToSource(ev) {\n    const origSource: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n    const gridSource = this.preferences.energy_sources.find(\n      (src) => src.type === \"grid\"\n    ) as GridSourceTypeEnergyPreference | undefined;\n    showEnergySettingsGridFlowToDialog(this, {\n      source: { ...origSource },\n      grid_source: gridSource,\n      metadata: this.statsMetadata?.[origSource.stat_energy_to],\n      saveCallback: async (source) => {\n        const flowTo = energySourcesByType(this.preferences).grid![0].flow_to;\n\n        const preferences: EnergyPreferences = {\n          ...this.preferences,\n          energy_sources: this.preferences.energy_sources.map((src) =>\n            src.type === \"grid\"\n              ? {\n                  ...src,\n                  flow_to: flowTo.map((flow) =>\n                    flow === origSource ? source : flow\n                  ),\n                }\n              : src\n          ),\n        };\n        await this._savePreferences(preferences);\n      },\n    });\n  }\n\n  private async _deleteFromSource(ev) {\n    const sourceToDelete: FlowFromGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowFrom = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_from.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_from: flowFrom } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _deleteToSource(ev) {\n    const sourceToDelete: FlowToGridSourceEnergyPreference =\n      ev.currentTarget.closest(\".row\").source;\n\n    if (\n      !(await showConfirmationDialog(this, {\n        title: this.hass.localize(\"ui.panel.config.energy.delete_source\"),\n      }))\n    ) {\n      return;\n    }\n\n    const flowTo = energySourcesByType(\n      this.preferences\n    ).grid![0].flow_to.filter((flow) => flow !== sourceToDelete);\n\n    const preferences: EnergyPreferences = {\n      ...this.preferences,\n      energy_sources: this.preferences.energy_sources.map((source) =>\n        source.type === \"grid\" ? { ...source, flow_to: flowTo } : source\n      ),\n    };\n\n    try {\n      await this._savePreferences(preferences);\n    } catch (err: any) {\n      showAlertDialog(this, { title: `Failed to save config: ${err.message}` });\n    }\n  }\n\n  private async _savePreferences(preferences: EnergyPreferences) {\n    const result = await saveEnergyPreferences(this.hass, preferences);\n    fireEvent(this, \"value-changed\", { value: result });\n  }\n\n  static get styles(): CSSResultGroup {\n    return [haStyle, energyCardStyles];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-energy-grid-settings\": EnergyGridSettings;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}