{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { decorateProperty } from '@lit/reactive-element/decorators/base.js';\nimport { ContextProvider } from '../controllers/context-provider.js';\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @provide({context: loggerContext})\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function provide({\n  context: context\n}) {\n  return decorateProperty({\n    finisher: (ctor, name) => {\n      const controllerMap = new WeakMap();\n      ctor.addInitializer(element => {\n        controllerMap.set(element, new ContextProvider(element, {\n          context\n        }));\n      });\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);\n      const oldSetter = descriptor === null || descriptor === void 0 ? void 0 : descriptor.set;\n      const newDescriptor = {\n        ...descriptor,\n        set: function (value) {\n          var _a;\n          (_a = controllerMap.get(this)) === null || _a === void 0 ? void 0 : _a.setValue(value);\n          if (oldSetter) {\n            oldSetter.call(this, value);\n          }\n        }\n      };\n      Object.defineProperty(ctor.prototype, name, newDescriptor);\n    }\n  });\n}","map":{"version":3,"names":["decorateProperty","ContextProvider","provide","context","finisher","ctor","name","controllerMap","WeakMap","addInitializer","element","set","descriptor","Object","getOwnPropertyDescriptor","prototype","oldSetter","newDescriptor","value","_a","get","setValue","call","defineProperty"],"sources":["../../../src/lib/decorators/provide.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ReactiveElement} from '@lit/reactive-element';\nimport {decorateProperty} from '@lit/reactive-element/decorators/base.js';\nimport {Context} from '../create-context.js';\nimport {ContextProvider} from '../controllers/context-provider.js';\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\n/**\n * A property decorator that adds a ContextConsumer controller to the component\n * which will try and retrieve a value for the property via the Context API.\n *\n * @param context A Context identifier value created via `createContext`\n * @param multiple An optional boolean which when true allows the value to be updated\n *   multiple times.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * import {consume} from '@lit-labs/context';\n * import {loggerContext} from 'community-protocols/logger';\n *\n * class MyElement {\n *   @provide({context: loggerContext})\n *   logger;\n *\n *   doThing() {\n *     this.logger.log('thing was done');\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function provide<ValueType>({\n  context: context,\n}: {\n  context: Context<unknown, ValueType>;\n}): ProvideDecorator<ValueType> {\n  return decorateProperty({\n    finisher: (ctor: typeof ReactiveElement, name: PropertyKey) => {\n      const controllerMap = new WeakMap();\n      ctor.addInitializer((element: ReactiveElement): void => {\n        controllerMap.set(element, new ContextProvider(element, {context}));\n      });\n      // proxy any existing setter for this property and use it to\n      // notify the controller of an updated value\n      const descriptor = Object.getOwnPropertyDescriptor(ctor.prototype, name);\n      const oldSetter = descriptor?.set;\n      const newDescriptor = {\n        ...descriptor,\n        set: function (this: ReactiveElement, value: ValueType) {\n          controllerMap.get(this)?.setValue(value);\n          if (oldSetter) {\n            oldSetter.call(this, value);\n          }\n        },\n      };\n      Object.defineProperty(ctor.prototype, name, newDescriptor);\n    },\n  });\n}\n\ntype ProvideDecorator<ContextType> = {\n  <K extends PropertyKey, Proto extends ReactiveElement>(\n    protoOrDescriptor: Proto,\n    name?: K\n  ): FieldMustMatchContextType<Proto, K, ContextType>;\n};\n\n// Note TypeScript requires the return type of a decorator to be `void | any`\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ntype DecoratorReturn = void | any;\n\ntype FieldMustMatchContextType<Obj, Key extends PropertyKey, ContextType> =\n  // First we check whether the object has the property as a required field\n  Obj extends Record<Key, infer ProvidingType>\n    ? // Ok, it does, just check whether it's ok to assign the\n      // provided type to the consuming field\n      [ProvidingType] extends [ContextType]\n      ? DecoratorReturn\n      : {\n          message: 'providing field not assignable to context';\n          context: ContextType;\n          provided: ProvidingType;\n        }\n    : // Next we check whether the object has the property as an optional field\n    Obj extends Partial<Record<Key, infer Providing>>\n    ? // Check assignability again. Note that we have to include undefined\n      // here on the providing type because it's optional.\n      [Providing | undefined] extends [ContextType]\n      ? DecoratorReturn\n      : {\n          message: 'providing field not assignable to context';\n          context: ContextType;\n          consuming: Providing | undefined;\n        }\n    : // Ok, the field isn't present, so either someone's using provide\n      // manually, i.e. not as a decorator (maybe don't do that! but if you do,\n      // you're on your own for your type checking, sorry), or the field is\n      // private, in which case we can't check it.\n      DecoratorReturn;\n"],"mappings":"AAAA;;;;;AAOA,SAAQA,gBAAgB,QAAO,0CAA0C;AAEzE,SAAQC,eAAe,QAAO,oCAAoC;AAElE;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,OAAM,SAAUC,OAAOA,CAAY;EACjCC,OAAO,EAAEA;AAAO,CAGjB;EACC,OAAOH,gBAAgB,CAAC;IACtBI,QAAQ,EAAEA,CAACC,IAA4B,EAAEC,IAAiB,KAAI;MAC5D,MAAMC,aAAa,GAAG,IAAIC,OAAO,EAAE;MACnCH,IAAI,CAACI,cAAc,CAAEC,OAAwB,IAAU;QACrDH,aAAa,CAACI,GAAG,CAACD,OAAO,EAAE,IAAIT,eAAe,CAACS,OAAO,EAAE;UAACP;QAAO,CAAC,CAAC,CAAC;MACrE,CAAC,CAAC;MACF;MACA;MACA,MAAMS,UAAU,GAAGC,MAAM,CAACC,wBAAwB,CAACT,IAAI,CAACU,SAAS,EAAET,IAAI,CAAC;MACxE,MAAMU,SAAS,GAAGJ,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAED,GAAG;MACjC,MAAMM,aAAa,GAAG;QACpB,GAAGL,UAAU;QACbD,GAAG,EAAE,SAAAA,CAAiCO,KAAgB;;UACpD,CAAAC,EAAA,GAAAZ,aAAa,CAACa,GAAG,CAAC,IAAI,CAAC,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,QAAQ,CAACH,KAAK,CAAC;UACxC,IAAIF,SAAS,EAAE;YACbA,SAAS,CAACM,IAAI,CAAC,IAAI,EAAEJ,KAAK,CAAC;;QAE/B;OACD;MACDL,MAAM,CAACU,cAAc,CAAClB,IAAI,CAACU,SAAS,EAAET,IAAI,EAAEW,aAAa,CAAC;IAC5D;GACD,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}