{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller which prevents the virtual keyboard from showing up on mobile devices\n * when the field's overlay is closed.\n */\nexport class VirtualKeyboardController {\n  /**\n   * @param {{ inputElement?: HTMLElement; opened: boolean } & HTMLElement} host\n   */\n  constructor(host) {\n    this.host = host;\n    host.addEventListener('opened-changed', () => {\n      if (!host.opened) {\n        // Prevent opening the virtual keyboard when the input gets re-focused on dropdown close\n        this.__setVirtualKeyboardEnabled(false);\n      }\n    });\n\n    // Re-enable virtual keyboard on blur, so it gets opened when the field is focused again\n    host.addEventListener('blur', () => this.__setVirtualKeyboardEnabled(true));\n\n    // Re-enable the virtual keyboard whenever the field is touched\n    host.addEventListener('touchstart', () => this.__setVirtualKeyboardEnabled(true));\n  }\n\n  /** @private */\n  __setVirtualKeyboardEnabled(value) {\n    if (this.host.inputElement) {\n      this.host.inputElement.inputMode = value ? '' : 'none';\n    }\n  }\n}","map":{"version":3,"names":["VirtualKeyboardController","constructor","host","addEventListener","opened","__setVirtualKeyboardEnabled","value","inputElement","inputMode"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/field-base/src/virtual-keyboard-controller.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * A controller which prevents the virtual keyboard from showing up on mobile devices\n * when the field's overlay is closed.\n */\nexport class VirtualKeyboardController {\n  /**\n   * @param {{ inputElement?: HTMLElement; opened: boolean } & HTMLElement} host\n   */\n  constructor(host) {\n    this.host = host;\n\n    host.addEventListener('opened-changed', () => {\n      if (!host.opened) {\n        // Prevent opening the virtual keyboard when the input gets re-focused on dropdown close\n        this.__setVirtualKeyboardEnabled(false);\n      }\n    });\n\n    // Re-enable virtual keyboard on blur, so it gets opened when the field is focused again\n    host.addEventListener('blur', () => this.__setVirtualKeyboardEnabled(true));\n\n    // Re-enable the virtual keyboard whenever the field is touched\n    host.addEventListener('touchstart', () => this.__setVirtualKeyboardEnabled(true));\n  }\n\n  /** @private */\n  __setVirtualKeyboardEnabled(value) {\n    if (this.host.inputElement) {\n      this.host.inputElement.inputMode = value ? '' : 'none';\n    }\n  }\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,yBAAyB,CAAC;EACrC;AACF;AACA;EACEC,WAAWA,CAACC,IAAI,EAAE;IAChB,IAAI,CAACA,IAAI,GAAGA,IAAI;IAEhBA,IAAI,CAACC,gBAAgB,CAAC,gBAAgB,EAAE,MAAM;MAC5C,IAAI,CAACD,IAAI,CAACE,MAAM,EAAE;QAChB;QACA,IAAI,CAACC,2BAA2B,CAAC,KAAK,CAAC;MACzC;IACF,CAAC,CAAC;;IAEF;IACAH,IAAI,CAACC,gBAAgB,CAAC,MAAM,EAAE,MAAM,IAAI,CAACE,2BAA2B,CAAC,IAAI,CAAC,CAAC;;IAE3E;IACAH,IAAI,CAACC,gBAAgB,CAAC,YAAY,EAAE,MAAM,IAAI,CAACE,2BAA2B,CAAC,IAAI,CAAC,CAAC;EACnF;;EAEA;EACAA,2BAA2BA,CAACC,KAAK,EAAE;IACjC,IAAI,IAAI,CAACJ,IAAI,CAACK,YAAY,EAAE;MAC1B,IAAI,CAACL,IAAI,CAACK,YAAY,CAACC,SAAS,GAAGF,KAAK,GAAG,EAAE,GAAG,MAAM;IACxD;EACF;AACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}