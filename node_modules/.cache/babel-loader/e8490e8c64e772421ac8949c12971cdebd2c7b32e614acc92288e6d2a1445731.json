{"ast":null,"code":"import { addDays, addHours, addMonths, differenceInHours, endOfDay } from \"date-fns\";\nconst generateMeanStatistics = (start, end,\n// eslint-disable-next-line @typescript-eslint/default-param-last\nperiod = \"hour\", initValue, maxDiff) => {\n  const statistics = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let lastVal = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const delta = Math.random() * maxDiff;\n    const mean = lastVal + delta;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean,\n      min: mean - Math.random() * maxDiff,\n      max: mean + Math.random() * maxDiff,\n      last_reset: 0,\n      state: mean,\n      sum: null\n    });\n    lastVal = mean;\n    currentDate = period === \"day\" ? addDays(currentDate, 1) : period === \"month\" ? addMonths(currentDate, 1) : addHours(currentDate, 1);\n  }\n  return statistics;\n};\nconst generateSumStatistics = (start, end,\n// eslint-disable-next-line @typescript-eslint/default-param-last\nperiod = \"hour\", initValue, maxDiff) => {\n  const statistics = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = Math.random() * maxDiff;\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum\n    });\n    currentDate = period === \"day\" ? addDays(currentDate, 1) : period === \"month\" ? addMonths(currentDate, 1) : addHours(currentDate, 1);\n  }\n  return statistics;\n};\nconst generateCurvedStatistics = (start, end,\n// eslint-disable-next-line @typescript-eslint/default-param-last\n_period = \"hour\", initValue, maxDiff, metered) => {\n  const statistics = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const hours = differenceInHours(end, start) - 1;\n  let i = 0;\n  let half = false;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = i * (Math.random() * maxDiff);\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum: metered ? sum : null\n    });\n    currentDate = addHours(currentDate, 1);\n    if (!half && i > hours / 2) {\n      half = true;\n    }\n    i += half ? -1 : 1;\n  }\n  return statistics;\n};\nconst statisticsFunctions = {\n  \"sensor.energy_consumption_tarif_1\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    const morningEnd = new Date(start.getTime() + 10 * 60 * 60 * 1000);\n    const morningLow = generateSumStatistics(start, morningEnd, period, 0, 0.7);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const morningFinalVal = morningLow.length ? morningLow[morningLow.length - 1].sum : 0;\n    const empty = generateSumStatistics(morningEnd, eveningStart, period, morningFinalVal, 0);\n    const eveningLow = generateSumStatistics(eveningStart, end, period, morningFinalVal, 0.7);\n    return [...morningLow, ...empty, ...eveningLow];\n  },\n  \"sensor.energy_consumption_tarif_2\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    const morningEnd = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const highTarif = generateSumStatistics(morningEnd, eveningStart, period, 0, 0.3);\n    const highTarifFinalVal = highTarif.length ? highTarif[highTarif.length - 1].sum : 0;\n    const morning = generateSumStatistics(start, morningEnd, period, 0, 0);\n    const evening = generateSumStatistics(eveningStart, end, period, highTarifFinalVal, 0);\n    return [...morning, ...highTarif, ...evening];\n  },\n  \"sensor.energy_production_tarif_1\": (_id, start, end, period = \"hour\") => generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_1_compensation\": (_id, start, end, period = \"hour\") => generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_2\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    const productionStart = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 21 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(productionStart, productionEnd, period, 0, 0.15, true);\n    const productionFinalVal = production.length ? production[production.length - 1].sum : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(productionEnd, dayEnd, period, productionFinalVal, 0);\n    const rest = generateSumStatistics(dayEnd, end, period, productionFinalVal, 1);\n    return [...morning, ...production, ...evening, ...rest];\n  },\n  \"sensor.solar_production\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    const productionStart = new Date(start.getTime() + 7 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 23 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(productionStart, productionEnd, period, 0, 0.3, true);\n    const productionFinalVal = production.length ? production[production.length - 1].sum : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(productionEnd, dayEnd, period, productionFinalVal, 0);\n    const rest = generateSumStatistics(dayEnd, end, period, productionFinalVal, 2);\n    return [...morning, ...production, ...evening, ...rest];\n  }\n};\nexport const mockRecorder = mockHass => {\n  mockHass.mockWS(\"recorder/get_statistics_metadata\", () => []);\n  mockHass.mockWS(\"recorder/list_statistic_ids\", () => []);\n  mockHass.mockWS(\"recorder/statistics_during_period\", ({\n    statistic_ids,\n    start_time,\n    end_time,\n    period\n  }, hass) => {\n    const start = new Date(start_time);\n    const end = end_time ? new Date(end_time) : new Date();\n    const statistics = {};\n    statistic_ids.forEach(id => {\n      if (id in statisticsFunctions) {\n        statistics[id] = statisticsFunctions[id](id, start, end, period);\n      } else {\n        const entityState = hass.states[id];\n        const state = entityState ? Number(entityState.state) : 1;\n        statistics[id] = entityState && \"last_reset\" in entityState.attributes ? generateSumStatistics(start, end, period, state, state * (state > 80 ? 0.01 : 0.05)) : generateMeanStatistics(start, end, period, state, state * (state > 80 ? 0.05 : 0.1));\n      }\n    });\n    return statistics;\n  });\n};","map":{"version":3,"names":["addDays","addHours","addMonths","differenceInHours","endOfDay","generateMeanStatistics","start","end","period","initValue","maxDiff","statistics","currentDate","Date","setMinutes","lastVal","now","delta","Math","random","mean","push","getTime","min","max","last_reset","state","sum","generateSumStatistics","add","change","generateCurvedStatistics","_period","metered","hours","i","half","statisticsFunctions","sensor.energy_consumption_tarif_1","_id","morningEnd","morningLow","eveningStart","morningFinalVal","length","empty","eveningLow","sensor.energy_consumption_tarif_2","highTarif","highTarifFinalVal","morning","evening","sensor.energy_production_tarif_1","sensor.energy_production_tarif_1_compensation","sensor.energy_production_tarif_2","productionStart","productionEnd","dayEnd","production","productionFinalVal","rest","sensor.solar_production","mockRecorder","mockHass","mockWS","statistic_ids","start_time","end_time","hass","forEach","id","entityState","states","Number","attributes"],"sources":["/workspaces/frontend/demo/src/stubs/recorder.ts"],"sourcesContent":["import {\n  addDays,\n  addHours,\n  addMonths,\n  differenceInHours,\n  endOfDay,\n} from \"date-fns\";\nimport {\n  Statistics,\n  StatisticsMetaData,\n  StatisticValue,\n} from \"../../../src/data/recorder\";\nimport { MockHomeAssistant } from \"../../../src/fake_data/provide_hass\";\n\nconst generateMeanStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let lastVal = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const delta = Math.random() * maxDiff;\n    const mean = lastVal + delta;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean,\n      min: mean - Math.random() * maxDiff,\n      max: mean + Math.random() * maxDiff,\n      last_reset: 0,\n      state: mean,\n      sum: null,\n    });\n    lastVal = mean;\n    currentDate =\n      period === \"day\"\n        ? addDays(currentDate, 1)\n        : period === \"month\"\n          ? addMonths(currentDate, 1)\n          : addHours(currentDate, 1);\n  }\n  return statistics;\n};\n\nconst generateSumStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = Math.random() * maxDiff;\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum,\n    });\n    currentDate =\n      period === \"day\"\n        ? addDays(currentDate, 1)\n        : period === \"month\"\n          ? addMonths(currentDate, 1)\n          : addHours(currentDate, 1);\n  }\n  return statistics;\n};\n\nconst generateCurvedStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  _period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number,\n  metered: boolean\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const hours = differenceInHours(end, start) - 1;\n  let i = 0;\n  let half = false;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = i * (Math.random() * maxDiff);\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum: metered ? sum : null,\n    });\n    currentDate = addHours(currentDate, 1);\n    if (!half && i > hours / 2) {\n      half = true;\n    }\n    i += half ? -1 : 1;\n  }\n  return statistics;\n};\n\nconst statisticsFunctions: Record<\n  string,\n  (\n    id: string,\n    start: Date,\n    end: Date,\n    period: \"5minute\" | \"hour\" | \"day\" | \"month\"\n  ) => StatisticValue[]\n> = {\n  \"sensor.energy_consumption_tarif_1\": (\n    _id: string,\n    start: Date,\n    end: Date,\n    period = \"hour\"\n  ) => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const morningEnd = new Date(start.getTime() + 10 * 60 * 60 * 1000);\n    const morningLow = generateSumStatistics(start, morningEnd, period, 0, 0.7);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const morningFinalVal = morningLow.length\n      ? morningLow[morningLow.length - 1].sum!\n      : 0;\n    const empty = generateSumStatistics(\n      morningEnd,\n      eveningStart,\n      period,\n      morningFinalVal,\n      0\n    );\n    const eveningLow = generateSumStatistics(\n      eveningStart,\n      end,\n      period,\n      morningFinalVal,\n      0.7\n    );\n    return [...morningLow, ...empty, ...eveningLow];\n  },\n  \"sensor.energy_consumption_tarif_2\": (\n    _id: string,\n    start: Date,\n    end: Date,\n    period = \"hour\"\n  ) => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const morningEnd = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const highTarif = generateSumStatistics(\n      morningEnd,\n      eveningStart,\n      period,\n      0,\n      0.3\n    );\n    const highTarifFinalVal = highTarif.length\n      ? highTarif[highTarif.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, morningEnd, period, 0, 0);\n    const evening = generateSumStatistics(\n      eveningStart,\n      end,\n      period,\n      highTarifFinalVal,\n      0\n    );\n    return [...morning, ...highTarif, ...evening];\n  },\n  \"sensor.energy_production_tarif_1\": (_id, start, end, period = \"hour\") =>\n    generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_1_compensation\": (\n    _id,\n    start,\n    end,\n    period = \"hour\"\n  ) => generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_2\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const productionStart = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 21 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(\n      productionStart,\n      productionEnd,\n      period,\n      0,\n      0.15,\n      true\n    );\n    const productionFinalVal = production.length\n      ? production[production.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(\n      productionEnd,\n      dayEnd,\n      period,\n      productionFinalVal,\n      0\n    );\n    const rest = generateSumStatistics(\n      dayEnd,\n      end,\n      period,\n      productionFinalVal,\n      1\n    );\n    return [...morning, ...production, ...evening, ...rest];\n  },\n  \"sensor.solar_production\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const productionStart = new Date(start.getTime() + 7 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 23 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(\n      productionStart,\n      productionEnd,\n      period,\n      0,\n      0.3,\n      true\n    );\n    const productionFinalVal = production.length\n      ? production[production.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(\n      productionEnd,\n      dayEnd,\n      period,\n      productionFinalVal,\n      0\n    );\n    const rest = generateSumStatistics(\n      dayEnd,\n      end,\n      period,\n      productionFinalVal,\n      2\n    );\n    return [...morning, ...production, ...evening, ...rest];\n  },\n};\nexport const mockRecorder = (mockHass: MockHomeAssistant) => {\n  mockHass.mockWS(\n    \"recorder/get_statistics_metadata\",\n    (): StatisticsMetaData[] => []\n  );\n  mockHass.mockWS(\n    \"recorder/list_statistic_ids\",\n    (): StatisticsMetaData[] => []\n  );\n  mockHass.mockWS(\n    \"recorder/statistics_during_period\",\n    ({ statistic_ids, start_time, end_time, period }, hass): Statistics => {\n      const start = new Date(start_time);\n      const end = end_time ? new Date(end_time) : new Date();\n\n      const statistics: Record<string, StatisticValue[]> = {};\n\n      statistic_ids.forEach((id: string) => {\n        if (id in statisticsFunctions) {\n          statistics[id] = statisticsFunctions[id](id, start, end, period);\n        } else {\n          const entityState = hass.states[id];\n          const state = entityState ? Number(entityState.state) : 1;\n          statistics[id] =\n            entityState && \"last_reset\" in entityState.attributes\n              ? generateSumStatistics(\n                  start,\n                  end,\n                  period,\n                  state,\n                  state * (state > 80 ? 0.01 : 0.05)\n                )\n              : generateMeanStatistics(\n                  start,\n                  end,\n                  period,\n                  state,\n                  state * (state > 80 ? 0.05 : 0.1)\n                );\n        }\n      });\n      return statistics;\n    }\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}