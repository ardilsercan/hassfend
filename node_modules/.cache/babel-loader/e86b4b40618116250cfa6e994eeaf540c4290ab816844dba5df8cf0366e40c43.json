{"ast":null,"code":"/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController {\n  constructor(host, {\n    target,\n    config,\n    callback,\n    skipInitial\n  }) {\n    this._targets = new Set();\n    this._skipInitial = false;\n    /**\n     * Flag used to help manage calling the `callback` when observe is called\n     * in addition to when a mutation occurs. This is done to help setup initial\n     * state and is performed async by requesting a host update and calling\n     * `handleChanges` once by checking and then resetting this flag.\n     */\n    this._unobservedUpdate = false;\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target !== null && target !== void 0 ? target : host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial !== null && skipInitial !== void 0 ? skipInitial : this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(`ResizeController error: browser does not support ResizeObserver.`);\n      return;\n    }\n    this._observer = new ResizeObserver(entries => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  handleChanges(entries) {\n    var _this$callback;\n    this.value = (_this$callback = this.callback) === null || _this$callback === void 0 ? void 0 : _this$callback.call(this, entries, this._observer);\n  }\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n  hostDisconnected() {\n    this.disconnect();\n  }\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  disconnect() {\n    this._observer.disconnect();\n  }\n}","map":{"version":3,"names":["ResizeController","constructor","host","target","config","callback","skipInitial","_targets","Set","_skipInitial","_unobservedUpdate","_host","add","_config","window","ResizeObserver","console","warn","_observer","entries","handleChanges","requestUpdate","addController","_this$callback","value","call","hostConnected","observe","hostDisconnected","disconnect","hostUpdated","unobserve","delete"],"sources":["../src/resize-controller.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {\n  ReactiveController,\n  ReactiveControllerHost,\n} from '@lit/reactive-element/reactive-controller.js';\n\n/**\n * The callback function for a ResizeController.\n */\nexport type ResizeValueCallback<T = unknown> = (\n  ...args: Parameters<ResizeObserverCallback>\n) => T;\n\n/**\n * The config options for a ResizeController.\n */\nexport interface ResizeControllerConfig<T = unknown> {\n  /**\n   * Configuration object for the ResizeController.\n   */\n  config?: ResizeObserverOptions;\n  /**\n   * The element to observe. In addition to configuring the target here,\n   * the `observe` method can be called to observe additional targets. When not\n   * specified, the target defaults to the `host`. If set to `null`, no target\n   * is automatically observed. Only the configured target will be re-observed\n   * if the host connects again after unobserving via disconnection.\n   */\n  target?: Element | null;\n  /**\n   * The callback used to process detected changes into a value stored\n   * in the controller's `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  /**\n   * By default the `callback` is called without changes when a target is\n   * observed. This is done to help manage initial state, but this\n   * setup step can be skipped by setting this to true.\n   */\n  skipInitial?: boolean;\n}\n\n/**\n * ResizeController is a ReactiveController that integrates a ResizeObserver\n * with a ReactiveControllerHost's reactive update lifecycle. This is typically\n * a ReactiveElement or LitElement. ResizeObservers can be used to detect\n * size changes to DOM elements.\n *\n * The controller can specify a `target` element to observe and the\n * configuration options to pass to the ResizeObserver. The `observe`\n * method can be called to observe additional elements.\n *\n * When a change is detected, the controller's given `callback` function is\n * used to process the result into a value which is stored on the controller.\n * The controller's `value` is usable during the host's update cycle.\n */\nexport class ResizeController<T = unknown> implements ReactiveController {\n  private _host: ReactiveControllerHost;\n  private _targets = new Set<Element>();\n  private _config?: ResizeObserverOptions;\n  private _observer!: ResizeObserver;\n  private _skipInitial = false;\n  /**\n   * Flag used to help manage calling the `callback` when observe is called\n   * in addition to when a mutation occurs. This is done to help setup initial\n   * state and is performed async by requesting a host update and calling\n   * `handleChanges` once by checking and then resetting this flag.\n   */\n  private _unobservedUpdate = false;\n  /**\n   * The result of processing the observer's changes via the `callback`\n   * function.\n   */\n  value?: T;\n  /**\n   * Function that returns a value processed from the observer's changes.\n   * The result is stored in the `value` property.\n   */\n  callback?: ResizeValueCallback<T>;\n  constructor(\n    host: ReactiveControllerHost & Element,\n    {target, config, callback, skipInitial}: ResizeControllerConfig<T>\n  ) {\n    this._host = host;\n    // Target defaults to `host` unless explicitly `null`.\n    if (target !== null) {\n      this._targets.add(target ?? host);\n    }\n    this._config = config;\n    this._skipInitial = skipInitial ?? this._skipInitial;\n    this.callback = callback;\n    // Check browser support.\n    if (!window.ResizeObserver) {\n      console.warn(\n        `ResizeController error: browser does not support ResizeObserver.`\n      );\n      return;\n    }\n    this._observer = new ResizeObserver((entries: ResizeObserverEntry[]) => {\n      this.handleChanges(entries);\n      this._host.requestUpdate();\n    });\n    host.addController(this);\n  }\n\n  /**\n   * Process the observer's changes with the controller's `callback`\n   * function to produce a result stored in the `value` property.\n   */\n  protected handleChanges(entries: ResizeObserverEntry[]) {\n    this.value = this.callback?.(entries, this._observer);\n  }\n\n  hostConnected() {\n    for (const target of this._targets) {\n      this.observe(target);\n    }\n  }\n\n  hostDisconnected() {\n    this.disconnect();\n  }\n\n  async hostUpdated() {\n    // Handle initial state as a set of 0 changes. This helps setup initial\n    // state and promotes UI = f(state) since ideally the callback does not\n    // rely on changes.\n    if (!this._skipInitial && this._unobservedUpdate) {\n      this.handleChanges([]);\n    }\n    this._unobservedUpdate = false;\n  }\n\n  /**\n   * Observe the target element. The controller's `target` is automatically\n   * observed when the host connects.\n   * @param target Element to observe\n   */\n  observe(target: Element) {\n    this._targets.add(target);\n    this._observer.observe(target, this._config);\n    this._unobservedUpdate = true;\n    this._host.requestUpdate();\n  }\n\n  /**\n   * Unobserve the target element.\n   * @param target Element to unobserve\n   */\n  unobserve(target: Element) {\n    this._targets.delete(target);\n    this._observer.unobserve(target);\n  }\n\n  /**\n   * Disconnects the observer. This is done automatically when the host\n   * disconnects.\n   */\n  protected disconnect() {\n    this._observer.disconnect();\n  }\n}\n"],"mappings":"AA8CA;;;;;;;;;;;;;;AAcA,OAAM,MAAOA,gBAAgB;EAuB3BC,YACEC,IAAsC,EACtC;IAACC,MAAM;IAAEC,MAAM;IAAEC,QAAQ;IAAEC;EAAW,CAA4B;IAvB5D,KAAAC,QAAQ,GAAG,IAAIC,GAAG,EAAW;IAG7B,KAAAC,YAAY,GAAG,KAAK;IAC5B;;;;;;IAMQ,KAAAC,iBAAiB,GAAG,KAAK;IAe/B,IAAI,CAACC,KAAK,GAAGT,IAAI;IACjB;IACA,IAAIC,MAAM,KAAK,IAAI,EAAE;MACnB,IAAI,CAACI,QAAQ,CAACK,GAAG,CAACT,MAAM,aAANA,MAAM,cAANA,MAAM,GAAID,IAAI,CAAC;;IAEnC,IAAI,CAACW,OAAO,GAAGT,MAAM;IACrB,IAAI,CAACK,YAAY,GAAGH,WAAW,aAAXA,WAAW,cAAXA,WAAW,GAAI,IAAI,CAACG,YAAY;IACpD,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;IACxB;IACA,IAAI,CAACS,MAAM,CAACC,cAAc,EAAE;MAC1BC,OAAO,CAACC,IAAI,CACV,kEAAkE,CACnE;MACD;;IAEF,IAAI,CAACC,SAAS,GAAG,IAAIH,cAAc,CAAEI,OAA8B,IAAI;MACrE,IAAI,CAACC,aAAa,CAACD,OAAO,CAAC;MAC3B,IAAI,CAACR,KAAK,CAACU,aAAa,EAAE;IAC5B,CAAC,CAAC;IACFnB,IAAI,CAACoB,aAAa,CAAC,IAAI,CAAC;EAC1B;EAEA;;;;EAIUF,aAAaA,CAACD,OAA8B;IAAA,IAAAI,cAAA;IACpD,IAAI,CAACC,KAAK,IAAAD,cAAA,GAAG,IAAI,CAAClB,QAAQ,cAAAkB,cAAA,uBAAbA,cAAA,CAAAE,IAAA,KAAI,EAAYN,OAAO,EAAE,IAAI,CAACD,SAAS,CAAC;EACvD;EAEAQ,aAAaA,CAAA;IACX,KAAK,MAAMvB,MAAM,IAAI,IAAI,CAACI,QAAQ,EAAE;MAClC,IAAI,CAACoB,OAAO,CAACxB,MAAM,CAAC;;EAExB;EAEAyB,gBAAgBA,CAAA;IACd,IAAI,CAACC,UAAU,EAAE;EACnB;EAEA,MAAMC,WAAWA,CAAA;IACf;IACA;IACA;IACA,IAAI,CAAC,IAAI,CAACrB,YAAY,IAAI,IAAI,CAACC,iBAAiB,EAAE;MAChD,IAAI,CAACU,aAAa,CAAC,EAAE,CAAC;;IAExB,IAAI,CAACV,iBAAiB,GAAG,KAAK;EAChC;EAEA;;;;;EAKAiB,OAAOA,CAACxB,MAAe;IACrB,IAAI,CAACI,QAAQ,CAACK,GAAG,CAACT,MAAM,CAAC;IACzB,IAAI,CAACe,SAAS,CAACS,OAAO,CAACxB,MAAM,EAAE,IAAI,CAACU,OAAO,CAAC;IAC5C,IAAI,CAACH,iBAAiB,GAAG,IAAI;IAC7B,IAAI,CAACC,KAAK,CAACU,aAAa,EAAE;EAC5B;EAEA;;;;EAIAU,SAASA,CAAC5B,MAAe;IACvB,IAAI,CAACI,QAAQ,CAACyB,MAAM,CAAC7B,MAAM,CAAC;IAC5B,IAAI,CAACe,SAAS,CAACa,SAAS,CAAC5B,MAAM,CAAC;EAClC;EAEA;;;;EAIU0B,UAAUA,CAAA;IAClB,IAAI,CAACX,SAAS,CAACW,UAAU,EAAE;EAC7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}