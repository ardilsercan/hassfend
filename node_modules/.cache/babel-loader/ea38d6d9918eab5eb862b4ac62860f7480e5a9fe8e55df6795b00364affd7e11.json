{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-textfield\";\nimport { isUnavailableState, UNAVAILABLE } from \"../../../data/entity\";\nimport { setValue } from \"../../../data/text\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nlet HuiTextEntityRow = _decorate([customElement(\"hui-text-entity-row\")], function (_initialize, _LitElement) {\n  class HuiTextEntityRow extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiTextEntityRow,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config) {\n          throw new Error(\"Invalid configuration\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"shouldUpdate\",\n      value: function shouldUpdate(changedProps) {\n        return hasConfigOrEntityChanged(this, changedProps);\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._config || !this.hass) {\n          return nothing;\n        }\n        const stateObj = this.hass.states[this._config.entity];\n        if (!stateObj) {\n          return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n        }\n        return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        hideName\n      >\n        <ha-textfield\n          .label=${this._config.name || computeStateName(stateObj)}\n          .disabled=${stateObj.state === UNAVAILABLE}\n          .value=${stateObj.state}\n          .minlength=${stateObj.attributes.min}\n          .maxlength=${stateObj.attributes.max}\n          .autoValidate=${stateObj.attributes.pattern}\n          .pattern=${stateObj.attributes.pattern}\n          .type=${stateObj.attributes.mode}\n          @change=${this._valueChanged}\n          placeholder=${this.hass.localize(\"ui.card.text.emtpy_value\")}\n        ></ha-textfield>\n      </hui-generic-entity-row>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const stateObj = this.hass.states[this._config.entity];\n        const newValue = ev.target.value;\n\n        // Filter out invalid text states\n        if (newValue && isUnavailableState(newValue)) {\n          ev.target.value = stateObj.state;\n          return;\n        }\n        if (newValue !== stateObj.state) {\n          setValue(this.hass, stateObj.entity_id, newValue);\n        }\n        ev.target.blur();\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return css`\n    hui-generic-entity-row {\n      display: flex;\n      align-items: center;\n    }\n    ha-textfield {\n      width: 100%;\n    }\n  `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","computeStateName","isUnavailableState","UNAVAILABLE","setValue","hasConfigOrEntityChanged","createEntityNotFoundWarning","HuiTextEntityRow","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","setConfig","config","Error","_config","shouldUpdate","changedProps","render","hass","stateObj","states","entity","name","attributes","min","max","pattern","mode","_valueChanged","localize","ev","newValue","target","entity_id","blur","static"],"sources":["/workspaces/frontend/src/panels/lovelace/entity-rows/hui-text-entity-row.ts"],"sourcesContent":["import { css, html, LitElement, PropertyValues, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport \"../../../components/ha-textfield\";\nimport { isUnavailableState, UNAVAILABLE } from \"../../../data/entity\";\nimport { setValue, TextEntity } from \"../../../data/text\";\nimport { HomeAssistant } from \"../../../types\";\nimport { hasConfigOrEntityChanged } from \"../common/has-changed\";\nimport \"../components/hui-generic-entity-row\";\nimport { createEntityNotFoundWarning } from \"../components/hui-warning\";\nimport { EntityConfig, LovelaceRow } from \"./types\";\n\n@customElement(\"hui-text-entity-row\")\nclass HuiTextEntityRow extends LitElement implements LovelaceRow {\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: EntityConfig;\n\n  public setConfig(config: EntityConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    return hasConfigOrEntityChanged(this, changedProps);\n  }\n\n  protected render() {\n    if (!this._config || !this.hass) {\n      return nothing;\n    }\n\n    const stateObj = this.hass.states[this._config.entity] as\n      | TextEntity\n      | undefined;\n\n    if (!stateObj) {\n      return html`\n        <hui-warning>\n          ${createEntityNotFoundWarning(this.hass, this._config.entity)}\n        </hui-warning>\n      `;\n    }\n\n    return html`\n      <hui-generic-entity-row\n        .hass=${this.hass}\n        .config=${this._config}\n        hideName\n      >\n        <ha-textfield\n          .label=${this._config.name || computeStateName(stateObj)}\n          .disabled=${stateObj.state === UNAVAILABLE}\n          .value=${stateObj.state}\n          .minlength=${stateObj.attributes.min}\n          .maxlength=${stateObj.attributes.max}\n          .autoValidate=${stateObj.attributes.pattern}\n          .pattern=${stateObj.attributes.pattern}\n          .type=${stateObj.attributes.mode}\n          @change=${this._valueChanged}\n          placeholder=${this.hass!.localize(\"ui.card.text.emtpy_value\")}\n        ></ha-textfield>\n      </hui-generic-entity-row>\n    `;\n  }\n\n  private _valueChanged(ev): void {\n    const stateObj = this.hass!.states[this._config!.entity] as TextEntity;\n    const newValue = ev.target.value;\n\n    // Filter out invalid text states\n    if (newValue && isUnavailableState(newValue)) {\n      ev.target.value = stateObj.state;\n      return;\n    }\n\n    if (newValue !== stateObj.state) {\n      setValue(this.hass!, stateObj.entity_id, newValue);\n    }\n\n    ev.target.blur();\n  }\n\n  static styles = css`\n    hui-generic-entity-row {\n      display: flex;\n      align-items: center;\n    }\n    ha-textfield {\n      width: 100%;\n    }\n  `;\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-text-entity-row\": HuiTextEntityRow;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}