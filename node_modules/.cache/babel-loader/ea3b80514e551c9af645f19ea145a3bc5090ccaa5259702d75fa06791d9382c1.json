{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport \"unfetch/polyfill\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.promise.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/esnext.set.difference.v2.js\";\nimport \"core-js/modules/esnext.set.intersection.v2.js\";\nimport \"core-js/modules/esnext.set.is-disjoint-from.v2.js\";\nimport \"core-js/modules/esnext.set.is-subset-of.v2.js\";\nimport \"core-js/modules/esnext.set.is-superset-of.v2.js\";\nimport \"core-js/modules/esnext.set.symmetric-difference.v2.js\";\nimport \"core-js/modules/esnext.set.union.v2.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\n// Loads the static locale data for a given language from FormatJS\n// Parents need to load polyfills first; they are not imported here to avoid a circular reference\n\nvar INTL_POLYFILLS = [\"DateTimeFormat\", \"DisplayNames\", \"ListFormat\", \"NumberFormat\", \"RelativeTimeFormat\"];\nvar loadedLocales = new Set();\nvar addData = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(obj, language) {\n    var _Intl$obj;\n    var addFunc,\n      result,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          addFunc = _args.length > 2 && _args[2] !== undefined ? _args[2] : \"__addLocaleData\";\n          if (!(typeof ((_Intl$obj = Intl[obj]) === null || _Intl$obj === void 0 ? void 0 : _Intl$obj[addFunc]) === \"function\")) {\n            _context.next = 12;\n            break;\n          }\n          _context.next = 4;\n          return fetch(\"\".concat(__STATIC_PATH__, \"locale-data/intl-\").concat(obj.toLowerCase(), \"/\").concat(language, \".json\"));\n        case 4:\n          result = _context.sent;\n          if (!result.ok) {\n            _context.next = 12;\n            break;\n          }\n          _context.t0 = Intl[obj];\n          _context.t1 = addFunc;\n          _context.next = 10;\n          return result.json();\n        case 10:\n          _context.t2 = _context.sent;\n          _context.t0[_context.t1].call(_context.t0, _context.t2);\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return function addData(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var polyfillLocaleData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(language) {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!loadedLocales.has(language)) {\n            _context2.next = 2;\n            break;\n          }\n          return _context2.abrupt(\"return\");\n        case 2:\n          loadedLocales.add(language);\n          _context2.next = 5;\n          return Promise.all(INTL_POLYFILLS.map(function (obj) {\n            return addData(obj, language);\n          }));\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function polyfillLocaleData(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var polyfillTimeZoneData = function polyfillTimeZoneData() {\n  return addData(\"DateTimeFormat\", \"add-all-tz\", \"__addTZData\");\n};","map":{"version":3,"names":["INTL_POLYFILLS","loadedLocales","Set","addData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","obj","language","_Intl$obj","addFunc","result","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","Intl","fetch","concat","__STATIC_PATH__","toLowerCase","sent","ok","t0","t1","json","t2","call","stop","_x","_x2","apply","polyfillLocaleData","_ref2","_callee2","_callee2$","_context2","has","abrupt","add","Promise","all","map","_x3","polyfillTimeZoneData"],"sources":["/Users/sercanardil/Desktop/frontend/src/resources/locale-data-polyfill.ts"],"sourcesContent":["// Loads the static locale data for a given language from FormatJS\n// Parents need to load polyfills first; they are not imported here to avoid a circular reference\n\nconst INTL_POLYFILLS = [\n  \"DateTimeFormat\",\n  \"DisplayNames\",\n  \"ListFormat\",\n  \"NumberFormat\",\n  \"RelativeTimeFormat\",\n] as const satisfies readonly (keyof typeof Intl)[];\n\nconst loadedLocales: Set<string> = new Set();\n\nconst addData = async (\n  obj: (typeof INTL_POLYFILLS)[number],\n  language: string,\n  addFunc = \"__addLocaleData\"\n) => {\n  // Add function will only exist if constructor is polyfilled\n  if (typeof (Intl[obj] as any)?.[addFunc] === \"function\") {\n    const result = await fetch(\n      `${__STATIC_PATH__}locale-data/intl-${obj.toLowerCase()}/${language}.json`\n    );\n    // Ignore if polyfill data does not exist for language\n    if (result.ok) {\n      (Intl[obj] as any)[addFunc](await result.json());\n    }\n  }\n};\n\nexport const polyfillLocaleData = async (language: string) => {\n  if (loadedLocales.has(language)) {\n    return;\n  }\n  loadedLocales.add(language);\n  await Promise.all(INTL_POLYFILLS.map((obj) => addData(obj, language)));\n};\n\nexport const polyfillTimeZoneData = () =>\n  addData(\"DateTimeFormat\", \"add-all-tz\", \"__addTZData\");\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}