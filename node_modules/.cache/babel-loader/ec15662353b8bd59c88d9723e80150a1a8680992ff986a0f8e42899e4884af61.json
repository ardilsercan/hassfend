{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { LitElement, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { getAppKey } from \"../data/notify_html5\";\nimport { showPromptDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nexport const pushSupported = \"serviceWorker\" in navigator && \"PushManager\" in window && (document.location.protocol === \"https:\" || document.location.hostname === \"localhost\" || document.location.hostname === \"127.0.0.1\");\nlet HaPushNotificationsToggle = _decorate([customElement(\"ha-push-notifications-toggle\")], function (_initialize, _LitElement) {\n  class HaPushNotificationsToggle extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaPushNotificationsToggle,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_pushChecked\",\n      value() {\n        return \"Notification\" in window && Notification.permission === \"granted\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_loading\",\n      value() {\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`\n      <ha-switch\n        .disabled=${this._disabled || this._loading}\n        .checked=${this._pushChecked}\n        @change=${this._handlePushChange}\n      ></ha-switch>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: async function connectedCallback() {\n        _get(_getPrototypeOf(HaPushNotificationsToggle.prototype), \"connectedCallback\", this).call(this);\n        if (!pushSupported) return;\n        try {\n          const reg = await navigator.serviceWorker.ready;\n          if (!reg.pushManager) {\n            return;\n          }\n          reg.pushManager.getSubscription().then(subscription => {\n            this._loading = false;\n            this._pushChecked = !!subscription;\n          });\n        } catch (err) {\n          // We don't set loading to `false` so we remain disabled\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handlePushChange\",\n      value: function _handlePushChange(ev) {\n        // Somehow this is triggered on Safari on page load causing\n        // it to get into a loop and crash the page.\n        if (!pushSupported) return;\n        const pushnotifications = ev.target.checked;\n        if (pushnotifications) {\n          this._subscribePushNotifications();\n        } else {\n          this._unsubscribePushNotifications();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_subscribePushNotifications\",\n      value: async function _subscribePushNotifications() {\n        const reg = await navigator.serviceWorker.ready;\n        let sub;\n        try {\n          let browserName;\n          if (navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1) {\n            browserName = \"firefox\";\n          } else {\n            browserName = \"chrome\";\n          }\n          const name = await showPromptDialog(this, {\n            title: this.hass.localize(\"ui.panel.profile.push_notifications.add_device_prompt.title\"),\n            inputLabel: this.hass.localize(\"ui.panel.profile.push_notifications.add_device_prompt.input_label\")\n          });\n          if (name == null) {\n            this._pushChecked = false;\n            return;\n          }\n          let applicationServerKey;\n          try {\n            applicationServerKey = await getAppKey(this.hass);\n          } catch (ex) {\n            applicationServerKey = null;\n          }\n          if (applicationServerKey) {\n            sub = await reg.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey\n            });\n          } else {\n            sub = await reg.pushManager.subscribe({\n              userVisibleOnly: true\n            });\n          }\n          await this.hass.callApi(\"POST\", \"notify.html5\", {\n            subscription: sub,\n            browser: browserName,\n            name\n          });\n        } catch (err) {\n          const message = err.message || \"Notification registration failed.\";\n          if (sub) {\n            await sub.unsubscribe();\n          }\n\n          // eslint-disable-next-line\n          console.error(err);\n          fireEvent(this, \"hass-notification\", {\n            message\n          });\n          this._pushChecked = false;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_unsubscribePushNotifications\",\n      value: async function _unsubscribePushNotifications() {\n        const reg = await navigator.serviceWorker.ready;\n        try {\n          const sub = await reg.pushManager.getSubscription();\n          if (!sub) return;\n          await this.hass.callApi(\"DELETE\", \"notify.html5\", {\n            subscription: sub\n          });\n          await sub.unsubscribe();\n        } catch (err) {\n          const message = err.message || \"Failed unsubscribing for push notifications.\";\n\n          // eslint-disable-next-line\n          console.error(\"Error in unsub push\", err);\n          fireEvent(this, \"hass-notification\", {\n            message\n          });\n          this._pushChecked = true;\n        }\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","html","customElement","property","state","getAppKey","showPromptDialog","fireEvent","pushSupported","navigator","window","document","location","protocol","hostname","HaPushNotificationsToggle","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","Notification","permission","render","_disabled","_loading","_pushChecked","_handlePushChange","connectedCallback","_get","_getPrototypeOf","prototype","call","reg","serviceWorker","ready","pushManager","getSubscription","then","subscription","err","ev","pushnotifications","target","checked","_subscribePushNotifications","_unsubscribePushNotifications","sub","browserName","userAgent","toLowerCase","indexOf","name","title","hass","localize","inputLabel","applicationServerKey","ex","subscribe","userVisibleOnly","callApi","browser","message","unsubscribe","console","error"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-push-notifications-toggle.ts"],"sourcesContent":["import { LitElement, TemplateResult, html } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { getAppKey } from \"../data/notify_html5\";\nimport { showPromptDialog } from \"../dialogs/generic/show-dialog-box\";\nimport { HaSwitch } from \"./ha-switch\";\nimport { HomeAssistant } from \"../types\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\nexport const pushSupported =\n  \"serviceWorker\" in navigator &&\n  \"PushManager\" in window &&\n  (document.location.protocol === \"https:\" ||\n    document.location.hostname === \"localhost\" ||\n    document.location.hostname === \"127.0.0.1\");\n\n@customElement(\"ha-push-notifications-toggle\")\nclass HaPushNotificationsToggle extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _disabled: boolean = false;\n\n  @state() private _pushChecked: boolean =\n    \"Notification\" in window && Notification.permission === \"granted\";\n\n  @state() private _loading: boolean = true;\n\n  protected render(): TemplateResult {\n    return html`\n      <ha-switch\n        .disabled=${this._disabled || this._loading}\n        .checked=${this._pushChecked}\n        @change=${this._handlePushChange}\n      ></ha-switch>\n    `;\n  }\n\n  async connectedCallback() {\n    super.connectedCallback();\n\n    if (!pushSupported) return;\n\n    try {\n      const reg = await navigator.serviceWorker.ready;\n      if (!reg.pushManager) {\n        return;\n      }\n      reg.pushManager.getSubscription().then((subscription) => {\n        this._loading = false;\n        this._pushChecked = !!subscription;\n      });\n    } catch (err) {\n      // We don't set loading to `false` so we remain disabled\n    }\n  }\n\n  private _handlePushChange(ev: Event) {\n    // Somehow this is triggered on Safari on page load causing\n    // it to get into a loop and crash the page.\n    if (!pushSupported) return;\n\n    const pushnotifications = (ev.target as HaSwitch).checked;\n    if (pushnotifications) {\n      this._subscribePushNotifications();\n    } else {\n      this._unsubscribePushNotifications();\n    }\n  }\n\n  private async _subscribePushNotifications() {\n    const reg = await navigator.serviceWorker.ready;\n    let sub;\n\n    try {\n      let browserName: string;\n      if (navigator.userAgent.toLowerCase().indexOf(\"firefox\") > -1) {\n        browserName = \"firefox\";\n      } else {\n        browserName = \"chrome\";\n      }\n\n      const name = await showPromptDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.profile.push_notifications.add_device_prompt.title\"\n        ),\n        inputLabel: this.hass.localize(\n          \"ui.panel.profile.push_notifications.add_device_prompt.input_label\"\n        ),\n      });\n      if (name == null) {\n        this._pushChecked = false;\n        return;\n      }\n\n      let applicationServerKey: Uint8Array | null;\n      try {\n        applicationServerKey = await getAppKey(this.hass);\n      } catch (ex) {\n        applicationServerKey = null;\n      }\n\n      if (applicationServerKey) {\n        sub = await reg.pushManager.subscribe({\n          userVisibleOnly: true,\n          applicationServerKey,\n        });\n      } else {\n        sub = await reg.pushManager.subscribe({ userVisibleOnly: true });\n      }\n\n      await this.hass.callApi(\"POST\", \"notify.html5\", {\n        subscription: sub,\n        browser: browserName,\n        name,\n      });\n    } catch (err: any) {\n      const message = err.message || \"Notification registration failed.\";\n      if (sub) {\n        await sub.unsubscribe();\n      }\n\n      // eslint-disable-next-line\n      console.error(err);\n\n      fireEvent(this, \"hass-notification\", { message });\n      this._pushChecked = false;\n    }\n  }\n\n  private async _unsubscribePushNotifications() {\n    const reg = await navigator.serviceWorker.ready;\n\n    try {\n      const sub = await reg.pushManager.getSubscription();\n\n      if (!sub) return;\n\n      await this.hass.callApi(\"DELETE\", \"notify.html5\", { subscription: sub });\n      await sub.unsubscribe();\n    } catch (err: any) {\n      const message =\n        err.message || \"Failed unsubscribing for push notifications.\";\n\n      // eslint-disable-next-line\n      console.error(\"Error in unsub push\", err);\n\n      fireEvent(this, \"hass-notification\", { message });\n      this._pushChecked = true;\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-push-notifications-toggle\": HaPushNotificationsToggle;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}