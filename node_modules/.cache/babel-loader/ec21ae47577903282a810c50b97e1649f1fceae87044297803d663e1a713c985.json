{"ast":null,"code":"/**\n * Compares two values for shallow equality, only 1 level deep.\n */\nexport const shallowEqual = (a, b) => {\n  if (a === b) {\n    return true;\n  }\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n    let i;\n    let length;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) {\n        return false;\n      }\n      for (i = length; i-- !== 0;) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (i of a.entries()) {\n        if (!b.has(i[0])) {\n          return false;\n        }\n      }\n      for (i of a.entries()) {\n        if (i[1] !== b.get(i[0])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (i of a.entries()) {\n        if (!b.has(i[0])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      // @ts-ignore\n      length = a.length;\n      // @ts-ignore\n      if (length !== b.length) {\n        return false;\n      }\n      for (i = length; i-- !== 0;) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags;\n    }\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf();\n    }\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString();\n    }\n    const keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n    for (i = length; i-- !== 0;) {\n      const key = keys[i];\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b;\n};","map":{"version":3,"names":["shallowEqual","a","b","constructor","i","length","Array","isArray","Map","size","entries","has","get","Set","ArrayBuffer","isView","RegExp","source","flags","valueOf","Object","prototype","toString","keys","hasOwnProperty","call","key"],"sources":["/Users/sercanardil/Desktop/frontend/src/common/util/shallow-equal.ts"],"sourcesContent":["/**\n * Compares two values for shallow equality, only 1 level deep.\n */\nexport const shallowEqual = (a: any, b: any): boolean => {\n  if (a === b) {\n    return true;\n  }\n\n  if (a && b && typeof a === \"object\" && typeof b === \"object\") {\n    if (a.constructor !== b.constructor) {\n      return false;\n    }\n\n    let i: number | [any, any];\n    let length: number;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length !== b.length) {\n        return false;\n      }\n      for (i = length; i-- !== 0; ) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (a instanceof Map && b instanceof Map) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (i of a.entries()) {\n        if (!b.has(i[0])) {\n          return false;\n        }\n      }\n      for (i of a.entries()) {\n        if (i[1] !== b.get(i[0])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (a instanceof Set && b instanceof Set) {\n      if (a.size !== b.size) {\n        return false;\n      }\n      for (i of a.entries()) {\n        if (!b.has(i[0])) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {\n      // @ts-ignore\n      length = a.length;\n      // @ts-ignore\n      if (length !== b.length) {\n        return false;\n      }\n      for (i = length; i-- !== 0; ) {\n        if (a[i] !== b[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n    if (a.constructor === RegExp) {\n      return a.source === b.source && a.flags === b.flags;\n    }\n    if (a.valueOf !== Object.prototype.valueOf) {\n      return a.valueOf() === b.valueOf();\n    }\n    if (a.toString !== Object.prototype.toString) {\n      return a.toString() === b.toString();\n    }\n\n    const keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) {\n      return false;\n    }\n    for (i = length; i-- !== 0; ) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {\n        return false;\n      }\n    }\n\n    for (i = length; i-- !== 0; ) {\n      const key = keys[i];\n\n      if (a[key] !== b[key]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  // eslint-disable-next-line no-self-compare\n  return a !== a && b !== b;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}