{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nconst mdiCamera = \"M4,4H7L9,2H15L17,4H20A2,2 0 0,1 22,6V18A2,2 0 0,1 20,20H4A2,2 0 0,1 2,18V6A2,2 0 0,1 4,4M12,7A5,5 0 0,0 7,12A5,5 0 0,0 12,17A5,5 0 0,0 17,12A5,5 0 0,0 12,7M12,9A3,3 0 0,1 15,12A3,3 0 0,1 12,15A3,3 0 0,1 9,12A3,3 0 0,1 12,9Z\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport \"./ha-alert\";\nimport \"./ha-button-menu\";\nimport \"./ha-textfield\";\nlet HaQrScanner = _decorate([customElement(\"ha-qr-scanner\")], function (_initialize, _LitElement) {\n  class HaQrScanner extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaQrScanner,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"localize\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_cameras\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_error\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_qrScanner\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_qrNotFoundCount\",\n      value() {\n        return 0;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"video\", true)],\n      key: \"_video\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"#canvas-container\", true)],\n      key: \"_canvasContainer\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-textfield\")],\n      key: \"_manualInput\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(HaQrScanner.prototype), \"disconnectedCallback\", this).call(this);\n        this._qrNotFoundCount = 0;\n        if (this._qrScanner) {\n          this._qrScanner.stop();\n          this._qrScanner.destroy();\n          this._qrScanner = undefined;\n        }\n        while (this._canvasContainer.lastChild) {\n          this._canvasContainer.removeChild(this._canvasContainer.lastChild);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(HaQrScanner.prototype), \"connectedCallback\", this).call(this);\n        if (this.hasUpdated && navigator.mediaDevices) {\n          this._loadQrScanner();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value: function firstUpdated() {\n        if (navigator.mediaDevices) {\n          this._loadQrScanner();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"updated\",\n      value: function updated(changedProps) {\n        if (changedProps.has(\"_error\") && this._error) {\n          fireEvent(this, \"qr-code-error\", {\n            message: this._error\n          });\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        return html`${this._error ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>` : \"\"}\n    ${navigator.mediaDevices ? html`<video></video>\n          <div id=\"canvas-container\">\n            ${this._cameras && this._cameras.length > 1 ? html`<ha-button-menu fixed @closed=${stopPropagation}>\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.localize(\"ui.components.qr-scanner.select_camera\")}\n                    .path=${mdiCamera}\n                  ></ha-icon-button>\n                  ${this._cameras.map(camera => html`\n                      <mwc-list-item\n                        .value=${camera.id}\n                        @click=${this._cameraChanged}\n                        >${camera.label}</mwc-list-item\n                      >\n                    `)}\n                </ha-button-menu>` : \"\"}\n          </div>` : html`<ha-alert alert-type=\"warning\">\n            ${!window.isSecureContext ? this.localize(\"ui.components.qr-scanner.only_https_supported\") : this.localize(\"ui.components.qr-scanner.not_supported\")}\n          </ha-alert>\n          <p>${this.localize(\"ui.components.qr-scanner.manual_input\")}</p>\n          <div class=\"row\">\n            <ha-textfield\n              .label=${this.localize(\"ui.components.qr-scanner.enter_qr_code\")}\n              @keyup=${this._manualKeyup}\n              @paste=${this._manualPaste}\n            ></ha-textfield>\n            <mwc-button @click=${this._manualSubmit}\n              >${this.localize(\"ui.common.submit\")}</mwc-button\n            >\n          </div>`}`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_loadQrScanner\",\n      value: async function _loadQrScanner() {\n        const QrScanner = (await import(\"qr-scanner\")).default;\n        if (!(await QrScanner.hasCamera())) {\n          this._error = \"No camera found\";\n          return;\n        }\n        QrScanner.WORKER_PATH = \"/static/js/qr-scanner-worker.min.js\";\n        this._listCameras(QrScanner);\n        this._qrScanner = new QrScanner(this._video, this._qrCodeScanned, this._qrCodeError);\n        // @ts-ignore\n        const canvas = this._qrScanner.$canvas;\n        this._canvasContainer.appendChild(canvas);\n        canvas.style.display = \"block\";\n        try {\n          await this._qrScanner.start();\n        } catch (err) {\n          this._error = err;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_listCameras\",\n      value: async function _listCameras(qrScanner) {\n        this._cameras = await qrScanner.listCameras(true);\n      }\n    }, {\n      kind: \"field\",\n      key: \"_qrCodeError\",\n      value() {\n        return err => {\n          if (err === \"No QR code found\") {\n            this._qrNotFoundCount++;\n            if (this._qrNotFoundCount === 250) {\n              this._error = err;\n            }\n            return;\n          }\n          this._error = err.message || err;\n          // eslint-disable-next-line no-console\n          console.log(err);\n        };\n      }\n    }, {\n      kind: \"field\",\n      key: \"_qrCodeScanned\",\n      value() {\n        return async qrCodeString => {\n          this._qrNotFoundCount = 0;\n          fireEvent(this, \"qr-code-scanned\", {\n            value: qrCodeString\n          });\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_manualKeyup\",\n      value: function _manualKeyup(ev) {\n        if (ev.key === \"Enter\") {\n          this._qrCodeScanned(ev.target.value);\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"_manualPaste\",\n      value: function _manualPaste(ev) {\n        this._qrCodeScanned(\n        // @ts-ignore\n        (ev.clipboardData || window.clipboardData).getData(\"text\"));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_manualSubmit\",\n      value: function _manualSubmit() {\n        this._qrCodeScanned(this._manualInput.value);\n      }\n    }, {\n      kind: \"method\",\n      key: \"_cameraChanged\",\n      value: function _cameraChanged(ev) {\n        var _this$_qrScanner;\n        (_this$_qrScanner = this._qrScanner) === null || _this$_qrScanner === void 0 || _this$_qrScanner.setCamera(ev.target.value);\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return css`\n    canvas {\n      width: 100%;\n    }\n    #canvas-container {\n      position: relative;\n    }\n    ha-button-menu {\n      position: absolute;\n      bottom: 8px;\n      right: 8px;\n      background: #727272b2;\n      color: white;\n      border-radius: 50%;\n    }\n    .row {\n      display: flex;\n      align-items: center;\n    }\n    ha-textfield {\n      flex: 1;\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n  `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["mdiCamera","css","html","LitElement","customElement","property","query","state","fireEvent","stopPropagation","HaQrScanner","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","disconnectedCallback","_get","_getPrototypeOf","prototype","call","_qrNotFoundCount","_qrScanner","stop","destroy","undefined","_canvasContainer","lastChild","removeChild","connectedCallback","hasUpdated","navigator","mediaDevices","_loadQrScanner","firstUpdated","updated","changedProps","has","_error","message","render","_cameras","length","localize","map","camera","id","_cameraChanged","label","window","isSecureContext","_manualKeyup","_manualPaste","_manualSubmit","QrScanner","default","hasCamera","WORKER_PATH","_listCameras","_video","_qrCodeScanned","_qrCodeError","canvas","$canvas","appendChild","style","display","start","err","qrScanner","listCameras","console","log","qrCodeString","ev","target","clipboardData","getData","_manualInput","_this$_qrScanner","setCamera","static"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-qr-scanner.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport \"@material/mwc-list/mwc-list-item\";\nimport { mdiCamera } from \"@mdi/js\";\nimport { css, html, LitElement, PropertyValues, TemplateResult } from \"lit\";\nimport { customElement, property, query, state } from \"lit/decorators\";\nimport type QrScanner from \"qr-scanner\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport { stopPropagation } from \"../common/dom/stop_propagation\";\nimport { LocalizeFunc } from \"../common/translations/localize\";\nimport \"./ha-alert\";\nimport \"./ha-button-menu\";\nimport \"./ha-textfield\";\nimport type { HaTextField } from \"./ha-textfield\";\n\n@customElement(\"ha-qr-scanner\")\nclass HaQrScanner extends LitElement {\n  @property({ attribute: false }) public localize!: LocalizeFunc;\n\n  @state() private _cameras?: QrScanner.Camera[];\n\n  @state() private _error?: string;\n\n  private _qrScanner?: QrScanner;\n\n  private _qrNotFoundCount = 0;\n\n  @query(\"video\", true) private _video!: HTMLVideoElement;\n\n  @query(\"#canvas-container\", true) private _canvasContainer!: HTMLDivElement;\n\n  @query(\"ha-textfield\") private _manualInput?: HaTextField;\n\n  public disconnectedCallback(): void {\n    super.disconnectedCallback();\n    this._qrNotFoundCount = 0;\n    if (this._qrScanner) {\n      this._qrScanner.stop();\n      this._qrScanner.destroy();\n      this._qrScanner = undefined;\n    }\n    while (this._canvasContainer.lastChild) {\n      this._canvasContainer.removeChild(this._canvasContainer.lastChild);\n    }\n  }\n\n  public connectedCallback(): void {\n    super.connectedCallback();\n    if (this.hasUpdated && navigator.mediaDevices) {\n      this._loadQrScanner();\n    }\n  }\n\n  protected firstUpdated() {\n    if (navigator.mediaDevices) {\n      this._loadQrScanner();\n    }\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (changedProps.has(\"_error\") && this._error) {\n      fireEvent(this, \"qr-code-error\", { message: this._error });\n    }\n  }\n\n  protected render(): TemplateResult {\n    return html`${this._error\n      ? html`<ha-alert alert-type=\"error\">${this._error}</ha-alert>`\n      : \"\"}\n    ${navigator.mediaDevices\n      ? html`<video></video>\n          <div id=\"canvas-container\">\n            ${this._cameras && this._cameras.length > 1\n              ? html`<ha-button-menu fixed @closed=${stopPropagation}>\n                  <ha-icon-button\n                    slot=\"trigger\"\n                    .label=${this.localize(\n                      \"ui.components.qr-scanner.select_camera\"\n                    )}\n                    .path=${mdiCamera}\n                  ></ha-icon-button>\n                  ${this._cameras!.map(\n                    (camera) => html`\n                      <mwc-list-item\n                        .value=${camera.id}\n                        @click=${this._cameraChanged}\n                        >${camera.label}</mwc-list-item\n                      >\n                    `\n                  )}\n                </ha-button-menu>`\n              : \"\"}\n          </div>`\n      : html`<ha-alert alert-type=\"warning\">\n            ${!window.isSecureContext\n              ? this.localize(\"ui.components.qr-scanner.only_https_supported\")\n              : this.localize(\"ui.components.qr-scanner.not_supported\")}\n          </ha-alert>\n          <p>${this.localize(\"ui.components.qr-scanner.manual_input\")}</p>\n          <div class=\"row\">\n            <ha-textfield\n              .label=${this.localize(\"ui.components.qr-scanner.enter_qr_code\")}\n              @keyup=${this._manualKeyup}\n              @paste=${this._manualPaste}\n            ></ha-textfield>\n            <mwc-button @click=${this._manualSubmit}\n              >${this.localize(\"ui.common.submit\")}</mwc-button\n            >\n          </div>`}`;\n  }\n\n  private async _loadQrScanner() {\n    const QrScanner = (await import(\"qr-scanner\")).default;\n    if (!(await QrScanner.hasCamera())) {\n      this._error = \"No camera found\";\n      return;\n    }\n    QrScanner.WORKER_PATH = \"/static/js/qr-scanner-worker.min.js\";\n    this._listCameras(QrScanner);\n    this._qrScanner = new QrScanner(\n      this._video,\n      this._qrCodeScanned,\n      this._qrCodeError\n    );\n    // @ts-ignore\n    const canvas = this._qrScanner.$canvas;\n    this._canvasContainer.appendChild(canvas);\n    canvas.style.display = \"block\";\n    try {\n      await this._qrScanner.start();\n    } catch (err: any) {\n      this._error = err;\n    }\n  }\n\n  private async _listCameras(qrScanner: typeof QrScanner): Promise<void> {\n    this._cameras = await qrScanner.listCameras(true);\n  }\n\n  private _qrCodeError = (err: any) => {\n    if (err === \"No QR code found\") {\n      this._qrNotFoundCount++;\n      if (this._qrNotFoundCount === 250) {\n        this._error = err;\n      }\n      return;\n    }\n    this._error = err.message || err;\n    // eslint-disable-next-line no-console\n    console.log(err);\n  };\n\n  private _qrCodeScanned = async (qrCodeString: string): Promise<void> => {\n    this._qrNotFoundCount = 0;\n    fireEvent(this, \"qr-code-scanned\", { value: qrCodeString });\n  };\n\n  private _manualKeyup(ev: KeyboardEvent) {\n    if (ev.key === \"Enter\") {\n      this._qrCodeScanned((ev.target as HaTextField).value);\n    }\n  }\n\n  private _manualPaste(ev: ClipboardEvent) {\n    this._qrCodeScanned(\n      // @ts-ignore\n      (ev.clipboardData || window.clipboardData).getData(\"text\")\n    );\n  }\n\n  private _manualSubmit() {\n    this._qrCodeScanned(this._manualInput!.value);\n  }\n\n  private _cameraChanged(ev: CustomEvent): void {\n    this._qrScanner?.setCamera((ev.target as any).value);\n  }\n\n  static styles = css`\n    canvas {\n      width: 100%;\n    }\n    #canvas-container {\n      position: relative;\n    }\n    ha-button-menu {\n      position: absolute;\n      bottom: 8px;\n      right: 8px;\n      background: #727272b2;\n      color: white;\n      border-radius: 50%;\n    }\n    .row {\n      display: flex;\n      align-items: center;\n    }\n    ha-textfield {\n      flex: 1;\n      margin-right: 8px;\n      margin-inline-end: 8px;\n      margin-inline-start: initial;\n    }\n  `;\n}\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"qr-code-scanned\": { value: string };\n    \"qr-code-error\": { message: string };\n  }\n\n  interface HTMLElementTagNameMap {\n    \"ha-qr-scanner\": HaQrScanner;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}