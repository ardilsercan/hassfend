{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\nexport let HaSwitch = _decorate([customElement(\"ha-switch\")], function (_initialize, _SwitchBase) {\n  class HaSwitch extends _SwitchBase {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HaSwitch,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"haptic\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"method\",\n      key: \"firstUpdated\",\n      value:\n      // Generate a haptic vibration.\n      // Only set to true if the new value of the switch is applied right away when toggling.\n      // Do not add haptic when a user is required to press save.\n\n      function firstUpdated() {\n        _get(_getPrototypeOf(HaSwitch.prototype), \"firstUpdated\", this).call(this);\n        this.addEventListener(\"change\", () => {\n          if (this.haptic) {\n            forwardHaptic(\"light\");\n          }\n        });\n      }\n    }, {\n      kind: \"field\",\n      static: true,\n      key: \"styles\",\n      value() {\n        return [styles, css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `];\n      }\n    }]\n  };\n}, SwitchBase);","map":{"version":3,"names":["SwitchBase","styles","css","customElement","property","forwardHaptic","HaSwitch","_decorate","_initialize","_SwitchBase","constructor","args","F","d","kind","decorators","type","Boolean","key","value","firstUpdated","_get","_getPrototypeOf","prototype","call","addEventListener","haptic","static"],"sources":["/Users/sercanardil/Desktop/frontend/src/components/ha-switch.ts"],"sourcesContent":["import { SwitchBase } from \"@material/mwc-switch/deprecated/mwc-switch-base\";\nimport { styles } from \"@material/mwc-switch/deprecated/mwc-switch.css\";\nimport { css } from \"lit\";\nimport { customElement, property } from \"lit/decorators\";\nimport { forwardHaptic } from \"../data/haptics\";\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends SwitchBase {\n  // Generate a haptic vibration.\n  // Only set to true if the new value of the switch is applied right away when toggling.\n  // Do not add haptic when a user is required to press save.\n  @property({ type: Boolean }) public haptic = false;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.addEventListener(\"change\", () => {\n      if (this.haptic) {\n        forwardHaptic(\"light\");\n      }\n    });\n  }\n\n  static override styles = [\n    styles,\n    css`\n      :host {\n        --mdc-theme-secondary: var(--switch-checked-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n        background-color: var(--switch-checked-button-color);\n        border-color: var(--switch-checked-button-color);\n      }\n      .mdc-switch.mdc-switch--checked .mdc-switch__track {\n        background-color: var(--switch-checked-track-color);\n        border-color: var(--switch-checked-track-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n        background-color: var(--switch-unchecked-button-color);\n        border-color: var(--switch-unchecked-button-color);\n      }\n      .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n        background-color: var(--switch-unchecked-track-color);\n        border-color: var(--switch-unchecked-track-color);\n      }\n    `,\n  ];\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,UAAU,QAAQ,iDAAiD;AAC5E,SAASC,MAAM,QAAQ,gDAAgD;AACvE,SAASC,GAAG,QAAQ,KAAK;AACzB,SAASC,aAAa,EAAEC,QAAQ,QAAQ,gBAAgB;AACxD,SAASC,aAAa,QAAQ,iBAAiB;AAE/C,WACaC,QAAQ,GAAAC,SAAA,EADpBJ,aAAa,CAAC,WAAW,CAAC,aAAAK,WAAA,EAAAC,WAAA;EAA3B,MACaH,QAAQ,SAAAG,WAAA,CAAoB;IAAAC,YAAA,GAAAC,IAAA;MAAA,SAAAA,IAAA;MAAAH,WAAA;IAAA;EAuCzC;EAAC;IAAAI,CAAA,EAvCYN,QAAQ;IAAAO,CAAA;MAAAC,IAAA;MAAAC,UAAA,GAIlBX,QAAQ,CAAC;QAAEY,IAAI,EAAEC;MAAQ,CAAC,CAAC;MAAAC,GAAA;MAAAC,MAAA;QAAA,OAAiB,KAAK;MAAA;IAAA;MAAAL,IAAA;MAAAI,GAAA;MAAAC,KAAA;MAHlD;MACA;MACA;;MAGA,SAAAC,aAAA,EAAyB;QACvBC,IAAA,CAAAC,eAAA,CAPShB,QAAQ,CAAAiB,SAAA,yBAAAC,IAAA;QAQjB,IAAI,CAACC,gBAAgB,CAAC,QAAQ,EAAE,MAAM;UACpC,IAAI,IAAI,CAACC,MAAM,EAAE;YACfrB,aAAa,CAAC,OAAO,CAAC;UACxB;QACF,CAAC,CAAC;MACJ;IAAC;MAAAS,IAAA;MAAAa,MAAA;MAAAT,GAAA;MAAAC,MAAA;QAAA,OAEwB,CACvBlB,MAAM,EACNC,GAAI;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,CACF;MAAA;IAAA;EAAA;AAAA,GAtC2BF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}