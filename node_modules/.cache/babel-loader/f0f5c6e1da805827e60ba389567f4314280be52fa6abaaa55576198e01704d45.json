{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport \"@material/mwc-button/mwc-button\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nimport { RecurrenceRange } from \"../../data/calendar\";\nlet ConfirmEventDialogBox = _decorate([customElement(\"confirm-event-dialog-box\")], function (_initialize, _LitElement) {\n  class ConfirmEventDialogBox extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: ConfirmEventDialogBox,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_params\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"showDialog\",\n      value: async function showDialog(params) {\n        this._params = params;\n      }\n    }, {\n      kind: \"method\",\n      key: \"closeDialog\",\n      value: function closeDialog() {\n        return true;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this._params) {\n          return nothing;\n        }\n        return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${this._params.title}\n      >\n        <div>\n          <p>${this._params.text}</p>\n        </div>\n        <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._confirm}\n          dialogInitialFocus\n          class=\"destructive\"\n        >\n          ${this._params.confirmText}\n        </mwc-button>\n        ${this._params.confirmFutureText ? html`\n              <mwc-button\n                @click=${this._confirmFuture}\n                class=\"destructive\"\n                slot=\"primaryAction\"\n              >\n                ${this._params.confirmFutureText}\n              </mwc-button>\n            ` : \"\"}\n      </ha-dialog>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dismiss\",\n      value: function _dismiss() {\n        if (this._params.cancel) {\n          this._params.cancel();\n        }\n        this._close();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_confirm\",\n      value: function _confirm() {\n        if (this._params.confirm) {\n          this._params.confirm(RecurrenceRange.THISEVENT);\n        }\n        this._close();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_confirmFuture\",\n      value: function _confirmFuture() {\n        if (this._params.confirm) {\n          this._params.confirm(RecurrenceRange.THISANDFUTURE);\n        }\n        this._close();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_dialogClosed\",\n      value: function _dialogClosed(ev) {\n        if (ev.detail.action === \"ignore\") {\n          return;\n        }\n        this._dismiss();\n      }\n    }, {\n      kind: \"method\",\n      key: \"_close\",\n      value: function _close() {\n        if (!this._params) {\n          return;\n        }\n        this._params = undefined;\n        fireEvent(this, \"dialog-closed\", {\n          dialog: this.localName\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .destructive {\n        --mdc-theme-primary: var(--error-color);\n      }\n      ha-dialog {\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n      @media all and (min-width: 600px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 400px;\n        }\n      }\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","fireEvent","RecurrenceRange","ConfirmEventDialogBox","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","showDialog","params","_params","closeDialog","render","_dialogClosed","title","text","_dismiss","hass","localize","_confirm","confirmText","confirmFutureText","_confirmFuture","cancel","_close","confirm","THISEVENT","THISANDFUTURE","ev","detail","action","undefined","dialog","localName","static","styles"],"sources":["/workspaces/frontend/src/panels/calendar/confirm-event-dialog-box.ts"],"sourcesContent":["import \"@material/mwc-button/mwc-button\";\nimport { css, CSSResultGroup, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport \"../../components/ha-dialog\";\nimport \"../../components/ha-svg-icon\";\nimport \"../../components/ha-switch\";\nimport { RecurrenceRange } from \"../../data/calendar\";\nimport { HomeAssistant } from \"../../types\";\nimport { ConfirmEventDialogBoxParams } from \"./show-confirm-event-dialog-box\";\n\n@customElement(\"confirm-event-dialog-box\")\nclass ConfirmEventDialogBox extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @state() private _params?: ConfirmEventDialogBoxParams;\n\n  public async showDialog(params: ConfirmEventDialogBoxParams): Promise<void> {\n    this._params = params;\n  }\n\n  public closeDialog(): boolean {\n    return true;\n  }\n\n  protected render() {\n    if (!this._params) {\n      return nothing;\n    }\n\n    return html`\n      <ha-dialog\n        open\n        scrimClickAction\n        escapeKeyAction\n        @closed=${this._dialogClosed}\n        defaultAction=\"ignore\"\n        .heading=${this._params.title}\n      >\n        <div>\n          <p>${this._params.text}</p>\n        </div>\n        <mwc-button @click=${this._dismiss} slot=\"secondaryAction\">\n          ${this.hass.localize(\"ui.dialogs.generic.cancel\")}\n        </mwc-button>\n        <mwc-button\n          slot=\"primaryAction\"\n          @click=${this._confirm}\n          dialogInitialFocus\n          class=\"destructive\"\n        >\n          ${this._params.confirmText}\n        </mwc-button>\n        ${this._params.confirmFutureText\n          ? html`\n              <mwc-button\n                @click=${this._confirmFuture}\n                class=\"destructive\"\n                slot=\"primaryAction\"\n              >\n                ${this._params.confirmFutureText}\n              </mwc-button>\n            `\n          : \"\"}\n      </ha-dialog>\n    `;\n  }\n\n  private _dismiss(): void {\n    if (this._params!.cancel) {\n      this._params!.cancel();\n    }\n    this._close();\n  }\n\n  private _confirm(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(RecurrenceRange.THISEVENT);\n    }\n    this._close();\n  }\n\n  private _confirmFuture(): void {\n    if (this._params!.confirm) {\n      this._params!.confirm(RecurrenceRange.THISANDFUTURE);\n    }\n    this._close();\n  }\n\n  private _dialogClosed(ev) {\n    if (ev.detail.action === \"ignore\") {\n      return;\n    }\n    this._dismiss();\n  }\n\n  private _close(): void {\n    if (!this._params) {\n      return;\n    }\n    this._params = undefined;\n    fireEvent(this, \"dialog-closed\", { dialog: this.localName });\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host([inert]) {\n        pointer-events: initial !important;\n        cursor: initial !important;\n      }\n      a {\n        color: var(--primary-color);\n      }\n      p {\n        margin: 0;\n        color: var(--primary-text-color);\n      }\n      .no-bottom-padding {\n        padding-bottom: 0;\n      }\n      .secondary {\n        color: var(--secondary-text-color);\n      }\n      .destructive {\n        --mdc-theme-primary: var(--error-color);\n      }\n      ha-dialog {\n        /* Place above other dialogs */\n        --dialog-z-index: 104;\n      }\n      @media all and (min-width: 600px) {\n        ha-dialog {\n          --mdc-dialog-min-width: 400px;\n        }\n      }\n      ha-textfield {\n        width: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"confirm-event-dialog-box\": ConfirmEventDialogBox;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}