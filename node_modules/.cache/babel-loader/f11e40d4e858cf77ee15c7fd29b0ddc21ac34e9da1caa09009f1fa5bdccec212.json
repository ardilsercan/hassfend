{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nconst mdiFolder = \"M10,4H4C2.89,4 2,4.89 2,6V18A2,2 0 0,0 4,20H20A2,2 0 0,0 22,18V8C22,6.89 21.1,6 20,6H12L10,4Z\";\nconst mdiPuzzle = \"M20.5,11H19V7C19,5.89 18.1,5 17,5H13V3.5A2.5,2.5 0 0,0 10.5,1A2.5,2.5 0 0,0 8,3.5V5H4A2,2 0 0,0 2,7V10.8H3.5C5,10.8 6.2,12 6.2,13.5C6.2,15 5,16.2 3.5,16.2H2V20A2,2 0 0,0 4,22H7.8V20.5C7.8,19 9,17.8 10.5,17.8C12,17.8 13.2,19 13.2,20.5V22H17A2,2 0 0,0 19,20V16H20.5A2.5,2.5 0 0,0 23,13.5A2.5,2.5 0 0,0 20.5,11Z\";\nimport { LitElement, css, html, nothing } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { atLeastVersion } from \"../../../src/common/config/version\";\nimport { formatDate } from \"../../../src/common/datetime/format_date\";\nimport { formatDateTime } from \"../../../src/common/datetime/format_date_time\";\nimport \"../../../src/components/ha-checkbox\";\nimport \"../../../src/components/ha-formfield\";\nimport \"../../../src/components/ha-textfield\";\nimport \"../../../src/components/ha-radio\";\nimport { mdiHomeAssistant } from \"../../../src/resources/home-assistant-logo-svg\";\nimport \"./supervisor-formfield-label\";\nconst _computeFolders = folders => {\n  const list = [];\n  if (folders.includes(\"ssl\")) {\n    list.push({\n      slug: \"ssl\",\n      name: \"SSL\",\n      checked: false\n    });\n  }\n  if (folders.includes(\"share\")) {\n    list.push({\n      slug: \"share\",\n      name: \"Share\",\n      checked: false\n    });\n  }\n  if (folders.includes(\"media\")) {\n    list.push({\n      slug: \"media\",\n      name: \"Media\",\n      checked: false\n    });\n  }\n  if (folders.includes(\"addons/local\")) {\n    list.push({\n      slug: \"addons/local\",\n      name: \"Local add-ons\",\n      checked: false\n    });\n  }\n  return list.sort((a, b) => a.name > b.name ? 1 : -1);\n};\nconst _computeAddons = addons => addons.map(addon => ({\n  slug: addon.slug,\n  name: addon.name,\n  version: addon.version,\n  checked: false\n})).sort((a, b) => a.name > b.name ? 1 : -1);\nexport let SupervisorBackupContent = _decorate([customElement(\"supervisor-backup-content\")], function (_initialize, _LitElement) {\n  class SupervisorBackupContent extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: SupervisorBackupContent,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"localize\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"supervisor\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"backup\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"backupType\",\n      value() {\n        return \"full\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"folders\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"addons\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"homeAssistant\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"backupHasPassword\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean\n      })],\n      key: \"onboarding\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"backupName\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"backupPassword\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property()],\n      key: \"confirmBackupPassword\",\n      value() {\n        return \"\";\n      }\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-textfield, ha-radio, ha-checkbox\", true)],\n      key: \"_focusTarget\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(SupervisorBackupContent.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (!this.hasUpdated) {\n          var _this$supervisor, _this$backup, _this$backup2, _this$backup3;\n          this.folders = _computeFolders(this.backup ? this.backup.folders : [\"ssl\", \"share\", \"media\", \"addons/local\"]);\n          this.addons = _computeAddons(this.backup ? this.backup.addons : (_this$supervisor = this.supervisor) === null || _this$supervisor === void 0 ? void 0 : _this$supervisor.addon.addons);\n          this.backupType = ((_this$backup = this.backup) === null || _this$backup === void 0 ? void 0 : _this$backup.type) || \"full\";\n          this.backupName = ((_this$backup2 = this.backup) === null || _this$backup2 === void 0 ? void 0 : _this$backup2.name) || \"\";\n          this.backupHasPassword = ((_this$backup3 = this.backup) === null || _this$backup3 === void 0 ? void 0 : _this$backup3.protected) || false;\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"focus\",\n      value: function focus() {\n        var _this$_focusTarget;\n        (_this$_focusTarget = this._focusTarget) === null || _this$_focusTarget === void 0 || _this$_focusTarget.focus();\n      }\n    }, {\n      kind: \"field\",\n      key: \"_localize\",\n      value() {\n        return key => {\n          var _this$supervisor2;\n          return ((_this$supervisor2 = this.supervisor) === null || _this$supervisor2 === void 0 ? void 0 : _this$supervisor2.localize(`backup.${key}`)) || this.localize(`ui.panel.page-onboarding.restore.${key}`);\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.onboarding && !this.supervisor) {\n          return nothing;\n        }\n        const foldersSection = this.backupType === \"partial\" ? this._getSection(\"folders\") : undefined;\n        const addonsSection = this.backupType === \"partial\" ? this._getSection(\"addons\") : undefined;\n        return html`\n      ${this.backup ? html`<div class=\"details\">\n            ${this.backup.type === \"full\" ? this._localize(\"full_backup\") : this._localize(\"partial_backup\")}\n            (${Math.ceil(this.backup.size * 10) / 10 + \" MB\"})<br />\n            ${this.hass ? formatDateTime(new Date(this.backup.date), this.hass.locale, this.hass.config) : this.backup.date}\n          </div>` : html`<ha-textfield\n            name=\"backupName\"\n            .label=${this._localize(\"name\")}\n            .value=${this.backupName}\n            @change=${this._handleTextValueChanged}\n          >\n          </ha-textfield>`}\n      ${!this.backup || this.backup.type === \"full\" ? html`<div class=\"sub-header\">\n              ${!this.backup ? this._localize(\"type\") : this._localize(\"select_type\")}\n            </div>\n            <div class=\"backup-types\">\n              <ha-formfield .label=${this._localize(\"full_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"full\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"full\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n              <ha-formfield .label=${this._localize(\"partial_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"partial\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"partial\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n            </div>` : \"\"}\n      ${this.backupType === \"partial\" ? html`<div class=\"partial-picker\">\n            ${!this.backup || this.backup.homeassistant ? html`<ha-formfield\n                  .label=${html`<supervisor-formfield-label\n                    label=\"Indexline Technology\"\n                    .iconPath=${mdiHomeAssistant}\n                    .version=${this.backup ? this.backup.homeassistant : this.hass.config.version}\n                  >\n                  </supervisor-formfield-label>`}\n                >\n                  <ha-checkbox\n                    .checked=${this.homeAssistant}\n                    @change=${this.toggleHomeAssistant}\n                  >\n                  </ha-checkbox>\n                </ha-formfield>` : \"\"}\n            ${foldersSection !== null && foldersSection !== void 0 && foldersSection.templates.length ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"folders\")}\n                      .iconPath=${mdiFolder}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${foldersSection.checked}\n                      .indeterminate=${foldersSection.indeterminate}\n                      .section=${\"folders\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${foldersSection.templates}</div>\n                ` : \"\"}\n            ${addonsSection !== null && addonsSection !== void 0 && addonsSection.templates.length ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"addons\")}\n                      .iconPath=${mdiPuzzle}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${addonsSection.checked}\n                      .indeterminate=${addonsSection.indeterminate}\n                      .section=${\"addons\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${addonsSection.templates}</div>\n                ` : \"\"}\n          </div> ` : \"\"}\n      ${this.backupType === \"partial\" && (!this.backup || this.backupHasPassword) ? html`<hr />` : \"\"}\n      ${!this.backup ? html`<ha-formfield\n            class=\"password\"\n            .label=${this._localize(\"password_protection\")}\n          >\n            <ha-checkbox\n              .checked=${this.backupHasPassword}\n              @change=${this._toggleHasPassword}\n            >\n            </ha-checkbox>\n          </ha-formfield>` : \"\"}\n      ${this.backupHasPassword ? html`\n            <ha-textfield\n              .label=${this._localize(\"password\")}\n              type=\"password\"\n              name=\"backupPassword\"\n              .value=${this.backupPassword}\n              @change=${this._handleTextValueChanged}\n            >\n            </ha-textfield>\n            ${!this.backup ? html`<ha-textfield\n                  .label=${this._localize(\"confirm_password\")}\n                  type=\"password\"\n                  name=\"confirmBackupPassword\"\n                  .value=${this.confirmBackupPassword}\n                  @change=${this._handleTextValueChanged}\n                >\n                </ha-textfield>` : \"\"}\n          ` : \"\"}\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"toggleHomeAssistant\",\n      value: function toggleHomeAssistant() {\n        this.homeAssistant = !this.homeAssistant;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      .partial-picker ha-formfield {\n        display: block;\n      }\n      .partial-picker ha-checkbox {\n        --mdc-checkbox-touch-target-size: 32px;\n      }\n      .partial-picker {\n        display: block;\n        margin: 0px -6px;\n      }\n      supervisor-formfield-label {\n        display: inline-flex;\n        align-items: center;\n      }\n      hr {\n        border-color: var(--divider-color);\n        border-bottom: none;\n        margin: 16px 0;\n      }\n      .details {\n        color: var(--secondary-text-color);\n      }\n      .section-content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 30px;\n        margin-inline-start: 30px;\n        margin-inline-end: initial;\n      }\n      ha-formfield.password {\n        display: block;\n        margin: 0 -14px -16px;\n      }\n      .backup-types {\n        display: flex;\n        margin-left: -13px;\n        margin-inline-start: -13px;\n        margin-inline-end: initial;\n      }\n      .sub-header {\n        margin-top: 8px;\n      }\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"backupDetails\",\n      value: function backupDetails() {\n        var _this$addons, _this$folders;\n        const data = {};\n        if (!this.backup) {\n          data.name = this.backupName || formatDate(new Date(), this.hass.locale, this.hass.config);\n        }\n        if (this.backupHasPassword) {\n          data.password = this.backupPassword;\n          if (!this.backup) {\n            data.confirm_password = this.confirmBackupPassword;\n          }\n        }\n        if (this.backupType === \"full\") {\n          return data;\n        }\n        const addons = (_this$addons = this.addons) === null || _this$addons === void 0 ? void 0 : _this$addons.filter(addon => addon.checked).map(addon => addon.slug);\n        const folders = (_this$folders = this.folders) === null || _this$folders === void 0 ? void 0 : _this$folders.filter(folder => folder.checked).map(folder => folder.slug);\n        if (addons !== null && addons !== void 0 && addons.length) {\n          data.addons = addons;\n        }\n        if (folders !== null && folders !== void 0 && folders.length) {\n          data.folders = folders;\n        }\n        data.homeassistant = this.homeAssistant;\n        return data;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getSection\",\n      value: function _getSection(section) {\n        var _this$supervisor3;\n        const templates = [];\n        const addons = section === \"addons\" ? new Map((_this$supervisor3 = this.supervisor) === null || _this$supervisor3 === void 0 ? void 0 : _this$supervisor3.addon.addons.map(item => [item.slug, item])) : undefined;\n        let checkedItems = 0;\n        this[section].forEach(item => {\n          var _addons$get;\n          templates.push(html`<ha-formfield\n          .label=${html`<supervisor-formfield-label\n            .label=${item.name}\n            .iconPath=${section === \"addons\" ? mdiPuzzle : mdiFolder}\n            .imageUrl=${section === \"addons\" && !this.onboarding && atLeastVersion(this.hass.config.version, 0, 105) && addons !== null && addons !== void 0 && (_addons$get = addons.get(item.slug)) !== null && _addons$get !== void 0 && _addons$get.icon ? `/api/hassio/addons/${item.slug}/icon` : undefined}\n            .version=${item.version}\n          >\n          </supervisor-formfield-label>`}\n        >\n          <ha-checkbox\n            .item=${item}\n            .checked=${item.checked}\n            .section=${section}\n            @change=${this._updateSectionEntry}\n          >\n          </ha-checkbox>\n        </ha-formfield>`);\n          if (item.checked) {\n            checkedItems++;\n          }\n        });\n        const checked = checkedItems === this[section].length;\n        return {\n          templates,\n          checked,\n          indeterminate: !checked && checkedItems !== 0\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleRadioValueChanged\",\n      value: function _handleRadioValueChanged(ev) {\n        const input = ev.currentTarget;\n        this[input.name] = input.value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_handleTextValueChanged\",\n      value: function _handleTextValueChanged(ev) {\n        const input = ev.currentTarget;\n        this[input.name] = input.value;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleHasPassword\",\n      value: function _toggleHasPassword() {\n        this.backupHasPassword = !this.backupHasPassword;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_toggleSection\",\n      value: function _toggleSection(ev) {\n        const section = ev.currentTarget.section;\n        this[section] = (section === \"addons\" ? this.addons : this.folders).map(item => ({\n          ...item,\n          checked: ev.currentTarget.checked\n        }));\n      }\n    }, {\n      kind: \"method\",\n      key: \"_updateSectionEntry\",\n      value: function _updateSectionEntry(ev) {\n        const item = ev.currentTarget.item;\n        const section = ev.currentTarget.section;\n        this[section] = this[section].map(entry => entry.slug === item.slug ? {\n          ...entry,\n          checked: ev.currentTarget.checked\n        } : entry);\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["LitElement","css","html","nothing","customElement","property","query","atLeastVersion","formatDate","formatDateTime","mdiHomeAssistant","_computeFolders","folders","list","includes","push","slug","name","checked","sort","a","b","_computeAddons","addons","map","addon","version","SupervisorBackupContent","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","type","Boolean","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","hasUpdated","_this$supervisor","_this$backup","_this$backup2","_this$backup3","backup","supervisor","backupType","backupName","backupHasPassword","protected","focus","_this$_focusTarget","_focusTarget","_this$supervisor2","localize","render","onboarding","foldersSection","_getSection","undefined","addonsSection","_localize","Math","ceil","size","hass","Date","date","locale","config","_handleTextValueChanged","_handleRadioValueChanged","homeassistant","homeAssistant","toggleHomeAssistant","templates","length","mdiFolder","_toggleSection","indeterminate","mdiPuzzle","_toggleHasPassword","backupPassword","confirmBackupPassword","static","styles","backupDetails","_this$addons","_this$folders","data","password","confirm_password","filter","folder","section","_this$supervisor3","Map","item","checkedItems","forEach","_addons$get","get","icon","_updateSectionEntry","ev","input","currentTarget","entry"],"sources":["/workspaces/frontend/hassio/src/components/supervisor-backup-content.ts"],"sourcesContent":["import { mdiFolder, mdiPuzzle } from \"@mdi/js\";\nimport {\n  CSSResultGroup,\n  LitElement,\n  TemplateResult,\n  css,\n  html,\n  nothing,\n} from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { atLeastVersion } from \"../../../src/common/config/version\";\nimport { formatDate } from \"../../../src/common/datetime/format_date\";\nimport { formatDateTime } from \"../../../src/common/datetime/format_date_time\";\nimport { LocalizeFunc } from \"../../../src/common/translations/localize\";\nimport \"../../../src/components/ha-checkbox\";\nimport \"../../../src/components/ha-formfield\";\nimport \"../../../src/components/ha-textfield\";\nimport \"../../../src/components/ha-radio\";\nimport type { HaRadio } from \"../../../src/components/ha-radio\";\nimport {\n  HassioBackupDetail,\n  HassioFullBackupCreateParams,\n  HassioPartialBackupCreateParams,\n} from \"../../../src/data/hassio/backup\";\nimport { Supervisor } from \"../../../src/data/supervisor/supervisor\";\nimport { mdiHomeAssistant } from \"../../../src/resources/home-assistant-logo-svg\";\nimport { HomeAssistant, TranslationDict } from \"../../../src/types\";\nimport \"./supervisor-formfield-label\";\nimport type { HaTextField } from \"../../../src/components/ha-textfield\";\n\ntype BackupOrRestoreKey = keyof TranslationDict[\"supervisor\"][\"backup\"] &\n  keyof TranslationDict[\"ui\"][\"panel\"][\"page-onboarding\"][\"restore\"];\n\ninterface CheckboxItem {\n  slug: string;\n  checked: boolean;\n  name: string;\n}\n\ninterface AddonCheckboxItem extends CheckboxItem {\n  version: string;\n}\n\nconst _computeFolders = (folders): CheckboxItem[] => {\n  const list: CheckboxItem[] = [];\n  if (folders.includes(\"ssl\")) {\n    list.push({ slug: \"ssl\", name: \"SSL\", checked: false });\n  }\n  if (folders.includes(\"share\")) {\n    list.push({ slug: \"share\", name: \"Share\", checked: false });\n  }\n  if (folders.includes(\"media\")) {\n    list.push({ slug: \"media\", name: \"Media\", checked: false });\n  }\n  if (folders.includes(\"addons/local\")) {\n    list.push({ slug: \"addons/local\", name: \"Local add-ons\", checked: false });\n  }\n  return list.sort((a, b) => (a.name > b.name ? 1 : -1));\n};\n\nconst _computeAddons = (addons): AddonCheckboxItem[] =>\n  addons\n    .map((addon) => ({\n      slug: addon.slug,\n      name: addon.name,\n      version: addon.version,\n      checked: false,\n    }))\n    .sort((a, b) => (a.name > b.name ? 1 : -1));\n\n@customElement(\"supervisor-backup-content\")\nexport class SupervisorBackupContent extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public localize?: LocalizeFunc;\n\n  @property({ attribute: false }) public supervisor?: Supervisor;\n\n  @property({ attribute: false }) public backup?: HassioBackupDetail;\n\n  @property() public backupType: HassioBackupDetail[\"type\"] = \"full\";\n\n  @property({ attribute: false }) public folders?: CheckboxItem[];\n\n  @property({ attribute: false }) public addons?: AddonCheckboxItem[];\n\n  @property({ type: Boolean }) public homeAssistant = false;\n\n  @property({ type: Boolean }) public backupHasPassword = false;\n\n  @property({ type: Boolean }) public onboarding = false;\n\n  @property() public backupName = \"\";\n\n  @property() public backupPassword = \"\";\n\n  @property() public confirmBackupPassword = \"\";\n\n  @query(\"ha-textfield, ha-radio, ha-checkbox\", true) private _focusTarget;\n\n  public willUpdate(changedProps) {\n    super.willUpdate(changedProps);\n    if (!this.hasUpdated) {\n      this.folders = _computeFolders(\n        this.backup\n          ? this.backup.folders\n          : [\"ssl\", \"share\", \"media\", \"addons/local\"]\n      );\n      this.addons = _computeAddons(\n        this.backup ? this.backup.addons : this.supervisor?.addon.addons\n      );\n      this.backupType = this.backup?.type || \"full\";\n      this.backupName = this.backup?.name || \"\";\n      this.backupHasPassword = this.backup?.protected || false;\n    }\n  }\n\n  public override focus() {\n    this._focusTarget?.focus();\n  }\n\n  private _localize = (key: BackupOrRestoreKey) =>\n    this.supervisor?.localize(`backup.${key}`) ||\n    this.localize!(`ui.panel.page-onboarding.restore.${key}`);\n\n  protected render() {\n    if (!this.onboarding && !this.supervisor) {\n      return nothing;\n    }\n    const foldersSection =\n      this.backupType === \"partial\" ? this._getSection(\"folders\") : undefined;\n    const addonsSection =\n      this.backupType === \"partial\" ? this._getSection(\"addons\") : undefined;\n\n    return html`\n      ${this.backup\n        ? html`<div class=\"details\">\n            ${this.backup.type === \"full\"\n              ? this._localize(\"full_backup\")\n              : this._localize(\"partial_backup\")}\n            (${Math.ceil(this.backup.size * 10) / 10 + \" MB\"})<br />\n            ${this.hass\n              ? formatDateTime(\n                  new Date(this.backup.date),\n                  this.hass.locale,\n                  this.hass.config\n                )\n              : this.backup.date}\n          </div>`\n        : html`<ha-textfield\n            name=\"backupName\"\n            .label=${this._localize(\"name\")}\n            .value=${this.backupName}\n            @change=${this._handleTextValueChanged}\n          >\n          </ha-textfield>`}\n      ${!this.backup || this.backup.type === \"full\"\n        ? html`<div class=\"sub-header\">\n              ${!this.backup\n                ? this._localize(\"type\")\n                : this._localize(\"select_type\")}\n            </div>\n            <div class=\"backup-types\">\n              <ha-formfield .label=${this._localize(\"full_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"full\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"full\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n              <ha-formfield .label=${this._localize(\"partial_backup\")}>\n                <ha-radio\n                  @change=${this._handleRadioValueChanged}\n                  value=\"partial\"\n                  name=\"backupType\"\n                  .checked=${this.backupType === \"partial\"}\n                >\n                </ha-radio>\n              </ha-formfield>\n            </div>`\n        : \"\"}\n      ${this.backupType === \"partial\"\n        ? html`<div class=\"partial-picker\">\n            ${!this.backup || this.backup.homeassistant\n              ? html`<ha-formfield\n                  .label=${html`<supervisor-formfield-label\n                    label=\"Indexline Technology\"\n                    .iconPath=${mdiHomeAssistant}\n                    .version=${this.backup\n                      ? this.backup.homeassistant\n                      : this.hass.config.version}\n                  >\n                  </supervisor-formfield-label>`}\n                >\n                  <ha-checkbox\n                    .checked=${this.homeAssistant}\n                    @change=${this.toggleHomeAssistant}\n                  >\n                  </ha-checkbox>\n                </ha-formfield>`\n              : \"\"}\n            ${foldersSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"folders\")}\n                      .iconPath=${mdiFolder}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${foldersSection.checked}\n                      .indeterminate=${foldersSection.indeterminate}\n                      .section=${\"folders\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${foldersSection.templates}</div>\n                `\n              : \"\"}\n            ${addonsSection?.templates.length\n              ? html`\n                  <ha-formfield\n                    .label=${html`<supervisor-formfield-label\n                      .label=${this._localize(\"addons\")}\n                      .iconPath=${mdiPuzzle}\n                    >\n                    </supervisor-formfield-label>`}\n                  >\n                    <ha-checkbox\n                      @change=${this._toggleSection}\n                      .checked=${addonsSection.checked}\n                      .indeterminate=${addonsSection.indeterminate}\n                      .section=${\"addons\"}\n                    >\n                    </ha-checkbox>\n                  </ha-formfield>\n                  <div class=\"section-content\">${addonsSection.templates}</div>\n                `\n              : \"\"}\n          </div> `\n        : \"\"}\n      ${this.backupType === \"partial\" &&\n      (!this.backup || this.backupHasPassword)\n        ? html`<hr />`\n        : \"\"}\n      ${!this.backup\n        ? html`<ha-formfield\n            class=\"password\"\n            .label=${this._localize(\"password_protection\")}\n          >\n            <ha-checkbox\n              .checked=${this.backupHasPassword}\n              @change=${this._toggleHasPassword}\n            >\n            </ha-checkbox>\n          </ha-formfield>`\n        : \"\"}\n      ${this.backupHasPassword\n        ? html`\n            <ha-textfield\n              .label=${this._localize(\"password\")}\n              type=\"password\"\n              name=\"backupPassword\"\n              .value=${this.backupPassword}\n              @change=${this._handleTextValueChanged}\n            >\n            </ha-textfield>\n            ${!this.backup\n              ? html`<ha-textfield\n                  .label=${this._localize(\"confirm_password\")}\n                  type=\"password\"\n                  name=\"confirmBackupPassword\"\n                  .value=${this.confirmBackupPassword}\n                  @change=${this._handleTextValueChanged}\n                >\n                </ha-textfield>`\n              : \"\"}\n          `\n        : \"\"}\n    `;\n  }\n\n  private toggleHomeAssistant() {\n    this.homeAssistant = !this.homeAssistant;\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      .partial-picker ha-formfield {\n        display: block;\n      }\n      .partial-picker ha-checkbox {\n        --mdc-checkbox-touch-target-size: 32px;\n      }\n      .partial-picker {\n        display: block;\n        margin: 0px -6px;\n      }\n      supervisor-formfield-label {\n        display: inline-flex;\n        align-items: center;\n      }\n      hr {\n        border-color: var(--divider-color);\n        border-bottom: none;\n        margin: 16px 0;\n      }\n      .details {\n        color: var(--secondary-text-color);\n      }\n      .section-content {\n        display: flex;\n        flex-direction: column;\n        margin-left: 30px;\n        margin-inline-start: 30px;\n        margin-inline-end: initial;\n      }\n      ha-formfield.password {\n        display: block;\n        margin: 0 -14px -16px;\n      }\n      .backup-types {\n        display: flex;\n        margin-left: -13px;\n        margin-inline-start: -13px;\n        margin-inline-end: initial;\n      }\n      .sub-header {\n        margin-top: 8px;\n      }\n    `;\n  }\n\n  public backupDetails():\n    | HassioPartialBackupCreateParams\n    | HassioFullBackupCreateParams {\n    const data: any = {};\n\n    if (!this.backup) {\n      data.name =\n        this.backupName ||\n        formatDate(new Date(), this.hass.locale, this.hass.config);\n    }\n\n    if (this.backupHasPassword) {\n      data.password = this.backupPassword;\n      if (!this.backup) {\n        data.confirm_password = this.confirmBackupPassword;\n      }\n    }\n\n    if (this.backupType === \"full\") {\n      return data;\n    }\n\n    const addons = this.addons\n      ?.filter((addon) => addon.checked)\n      .map((addon) => addon.slug);\n    const folders = this.folders\n      ?.filter((folder) => folder.checked)\n      .map((folder) => folder.slug);\n\n    if (addons?.length) {\n      data.addons = addons;\n    }\n    if (folders?.length) {\n      data.folders = folders;\n    }\n    data.homeassistant = this.homeAssistant;\n\n    return data;\n  }\n\n  private _getSection(section: string) {\n    const templates: TemplateResult[] = [];\n    const addons =\n      section === \"addons\"\n        ? new Map(\n            this.supervisor?.addon.addons.map((item) => [item.slug, item])\n          )\n        : undefined;\n    let checkedItems = 0;\n    this[section].forEach((item) => {\n      templates.push(\n        html`<ha-formfield\n          .label=${html`<supervisor-formfield-label\n            .label=${item.name}\n            .iconPath=${section === \"addons\" ? mdiPuzzle : mdiFolder}\n            .imageUrl=${section === \"addons\" &&\n            !this.onboarding &&\n            atLeastVersion(this.hass.config.version, 0, 105) &&\n            addons?.get(item.slug)?.icon\n              ? `/api/hassio/addons/${item.slug}/icon`\n              : undefined}\n            .version=${item.version}\n          >\n          </supervisor-formfield-label>`}\n        >\n          <ha-checkbox\n            .item=${item}\n            .checked=${item.checked}\n            .section=${section}\n            @change=${this._updateSectionEntry}\n          >\n          </ha-checkbox>\n        </ha-formfield>`\n      );\n\n      if (item.checked) {\n        checkedItems++;\n      }\n    });\n\n    const checked = checkedItems === this[section].length;\n\n    return {\n      templates,\n      checked,\n      indeterminate: !checked && checkedItems !== 0,\n    };\n  }\n\n  private _handleRadioValueChanged(ev: CustomEvent) {\n    const input = ev.currentTarget as HaRadio;\n    this[input.name] = input.value;\n  }\n\n  private _handleTextValueChanged(ev: InputEvent) {\n    const input = ev.currentTarget as HaTextField;\n    this[input.name!] = input.value;\n  }\n\n  private _toggleHasPassword(): void {\n    this.backupHasPassword = !this.backupHasPassword;\n  }\n\n  private _toggleSection(ev): void {\n    const section = ev.currentTarget.section;\n\n    this[section] = (section === \"addons\" ? this.addons : this.folders)!.map(\n      (item) => ({\n        ...item,\n        checked: ev.currentTarget.checked,\n      })\n    );\n  }\n\n  private _updateSectionEntry(ev): void {\n    const item = ev.currentTarget.item;\n    const section = ev.currentTarget.section;\n    this[section] = this[section].map((entry) =>\n      entry.slug === item.slug\n        ? {\n            ...entry,\n            checked: ev.currentTarget.checked,\n          }\n        : entry\n    );\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"supervisor-backup-content\": SupervisorBackupContent;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}