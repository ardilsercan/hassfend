{"ast":null,"code":"import { ensureArray } from \"../common/array/ensure-array\";\nimport { formatDuration } from \"../common/datetime/format_duration\";\nimport secondsToDuration from \"../common/datetime/seconds_to_duration\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { formatListWithAnds } from \"../common/string/format-list\";\nimport { isTemplate } from \"../common/string/has-template\";\nimport { describeCondition } from \"./automation_i18n\";\nimport { localizeDeviceAutomationAction } from \"./device_automation\";\nimport { computeDeviceName } from \"./device_registry\";\nimport { computeEntityRegistryName, entityRegistryById } from \"./entity_registry\";\nimport { domainToName } from \"./integration\";\nimport { getActionType } from \"./script\";\nconst actionTranslationBaseKey = \"ui.panel.config.automation.editor.actions.type\";\nexport const describeAction = (hass, entityRegistry, action, actionType, ignoreAlias = false) => {\n  try {\n    return tryDescribeAction(hass, entityRegistry, action, actionType, ignoreAlias);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    let msg = \"Error in describing action\";\n    if (error.message) {\n      msg += \": \" + error.message;\n    }\n    return msg;\n  }\n};\nconst tryDescribeAction = (hass, entityRegistry, action, actionType, ignoreAlias = false) => {\n  if (action.alias && !ignoreAlias) {\n    return action.alias;\n  }\n  if (!actionType) {\n    actionType = getActionType(action);\n  }\n  if (actionType === \"service\") {\n    const config = action;\n    const targets = [];\n    if (config.target) {\n      for (const [key, label] of Object.entries({\n        area_id: \"areas\",\n        device_id: \"devices\",\n        entity_id: \"entities\"\n      })) {\n        if (!(key in config.target)) {\n          continue;\n        }\n        const keyConf = Array.isArray(config.target[key]) ? config.target[key] : [config.target[key]];\n        for (const targetThing of keyConf) {\n          if (isTemplate(targetThing)) {\n            targets.push(hass.localize(`${actionTranslationBaseKey}.service.description.target_template`, {\n              name: label\n            }));\n            break;\n          } else if (key === \"entity_id\") {\n            if (targetThing.includes(\".\")) {\n              const state = hass.states[targetThing];\n              if (state) {\n                targets.push(computeStateName(state));\n              } else {\n                targets.push(targetThing);\n              }\n            } else {\n              const entityReg = entityRegistryById(entityRegistry)[targetThing];\n              if (entityReg) {\n                targets.push(computeEntityRegistryName(hass, entityReg) || targetThing);\n              } else {\n                targets.push(hass.localize(`${actionTranslationBaseKey}.service.description.target_unknown_entity`));\n              }\n            }\n          } else if (key === \"device_id\") {\n            const device = hass.devices[targetThing];\n            if (device) {\n              targets.push(computeDeviceName(device, hass));\n            } else {\n              targets.push(hass.localize(`${actionTranslationBaseKey}.service.description.target_unknown_device`));\n            }\n          } else if (key === \"area_id\") {\n            const area = hass.areas[targetThing];\n            if (area !== null && area !== void 0 && area.name) {\n              targets.push(area.name);\n            } else {\n              targets.push(hass.localize(`${actionTranslationBaseKey}.service.description.target_unknown_area`));\n            }\n          } else {\n            targets.push(targetThing);\n          }\n        }\n      }\n    }\n    if (config.service_template || config.service && isTemplate(config.service)) {\n      return hass.localize(`${actionTranslationBaseKey}.service.description.service_based_on_template`, {\n        targets: formatListWithAnds(hass.locale, targets)\n      });\n    }\n    if (config.service) {\n      var _hass$services$domain;\n      const [domain, serviceName] = config.service.split(\".\", 2);\n      const service = hass.localize(`component.${domain}.services.${serviceName}.name`) || ((_hass$services$domain = hass.services[domain][serviceName]) === null || _hass$services$domain === void 0 ? void 0 : _hass$services$domain.name);\n      if (config.metadata) {\n        return hass.localize(`${actionTranslationBaseKey}.service.description.service_name`, {\n          domain: domainToName(hass.localize, domain),\n          name: service || config.service,\n          targets: formatListWithAnds(hass.locale, targets)\n        });\n      }\n      return hass.localize(`${actionTranslationBaseKey}.service.description.service_based_on_name`, {\n        name: service ? `${domainToName(hass.localize, domain)}: ${service}` : config.service,\n        targets: formatListWithAnds(hass.locale, targets)\n      });\n    }\n    return hass.localize(`${actionTranslationBaseKey}.service.description.service`);\n  }\n  if (actionType === \"delay\") {\n    const config = action;\n    let duration;\n    if (typeof config.delay === \"number\") {\n      duration = hass.localize(`${actionTranslationBaseKey}.delay.description.duration_string`, {\n        string: secondsToDuration(config.delay)\n      });\n    } else if (typeof config.delay === \"string\") {\n      duration = isTemplate(config.delay) ? hass.localize(`${actionTranslationBaseKey}.delay.description.duration_template`) : hass.localize(`${actionTranslationBaseKey}.delay.description.duration_string`, {\n        string: config.delay || hass.localize(`${actionTranslationBaseKey}.delay.description.duration_unknown`)\n      });\n    } else if (config.delay) {\n      duration = hass.localize(`${actionTranslationBaseKey}.delay.description.duration_string`, {\n        string: formatDuration(hass.locale, config.delay)\n      });\n    } else {\n      duration = hass.localize(`${actionTranslationBaseKey}.delay.description.duration_string`, {\n        string: hass.localize(`${actionTranslationBaseKey}.delay.description.duration_unknown`)\n      });\n    }\n    return hass.localize(`${actionTranslationBaseKey}.delay.description.full`, {\n      duration: duration\n    });\n  }\n  if (actionType === \"activate_scene\") {\n    const config = action;\n    let entityId;\n    if (\"scene\" in config) {\n      entityId = config.scene;\n    } else {\n      var _config$target;\n      entityId = ((_config$target = config.target) === null || _config$target === void 0 ? void 0 : _config$target.entity_id) || config.entity_id;\n    }\n    if (!entityId) {\n      return hass.localize(`${actionTranslationBaseKey}.activate_scene.description.activate_scene`);\n    }\n    const sceneStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(`${actionTranslationBaseKey}.activate_scene.description.activate_scene_with_name`, {\n      name: sceneStateObj ? computeStateName(sceneStateObj) : entityId\n    });\n  }\n  if (actionType === \"play_media\") {\n    var _config$target2;\n    const config = action;\n    const entityId = ((_config$target2 = config.target) === null || _config$target2 === void 0 ? void 0 : _config$target2.entity_id) || config.entity_id;\n    const mediaStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(`${actionTranslationBaseKey}.play_media.description.full`, {\n      hasMedia: config.metadata.title || config.data.media_content_id ? \"true\" : \"false\",\n      media: config.metadata.title || config.data.media_content_id,\n      hasMediaPlayer: mediaStateObj || entityId !== undefined ? \"true\" : \"false\",\n      mediaPlayer: mediaStateObj ? computeStateName(mediaStateObj) : entityId\n    });\n  }\n  if (actionType === \"wait_for_trigger\") {\n    const config = action;\n    const triggers = ensureArray(config.wait_for_trigger);\n    if (!triggers || triggers.length === 0) {\n      return hass.localize(`${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_a_trigger`);\n    }\n    return hass.localize(`${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_triggers`, {\n      count: triggers.length\n    });\n  }\n  if (actionType === \"variables\") {\n    const config = action;\n    return hass.localize(`${actionTranslationBaseKey}.variables.description.full`, {\n      names: formatListWithAnds(hass.locale, Object.keys(config.variables))\n    });\n  }\n  if (actionType === \"fire_event\") {\n    const config = action;\n    if (isTemplate(config.event)) {\n      return hass.localize(`${actionTranslationBaseKey}.event.description.full`, {\n        name: hass.localize(`${actionTranslationBaseKey}.event.description.template`)\n      });\n    }\n    return hass.localize(`${actionTranslationBaseKey}.event.description.full`, {\n      name: config.event\n    });\n  }\n  if (actionType === \"wait_template\") {\n    return hass.localize(`${actionTranslationBaseKey}.wait_template.description.full`);\n  }\n  if (actionType === \"stop\") {\n    const config = action;\n    return hass.localize(`${actionTranslationBaseKey}.stop.description.full`, {\n      hasReason: config.stop !== undefined ? \"true\" : \"false\",\n      reason: config.stop\n    });\n  }\n  if (actionType === \"if\") {\n    const config = action;\n    if (config.else !== undefined) {\n      return hass.localize(`${actionTranslationBaseKey}.if.description.if_else`);\n    }\n    return hass.localize(`${actionTranslationBaseKey}.if.description.if`);\n  }\n  if (actionType === \"choose\") {\n    const config = action;\n    if (config.choose) {\n      const numActions = ensureArray(config.choose).length + (config.default ? 1 : 0);\n      return hass.localize(`${actionTranslationBaseKey}.choose.description.full`, {\n        number: numActions\n      });\n    }\n    return hass.localize(`${actionTranslationBaseKey}.choose.description.no_action`);\n  }\n  if (actionType === \"repeat\") {\n    const config = action;\n    let chosenAction = \"\";\n    if (\"count\" in config.repeat) {\n      const count = config.repeat.count;\n      chosenAction = hass.localize(`${actionTranslationBaseKey}.repeat.description.count`, {\n        count: count\n      });\n    } else if (\"while\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.while);\n      chosenAction = hass.localize(`${actionTranslationBaseKey}.repeat.description.while_count`, {\n        count: conditions.length\n      });\n    } else if (\"until\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.until);\n      chosenAction = hass.localize(`${actionTranslationBaseKey}.repeat.description.until_count`, {\n        count: conditions.length\n      });\n    } else if (\"for_each\" in config.repeat) {\n      const items = ensureArray(config.repeat.for_each).map(item => JSON.stringify(item));\n      chosenAction = hass.localize(`${actionTranslationBaseKey}.repeat.description.for_each`, {\n        items: formatListWithAnds(hass.locale, items)\n      });\n    }\n    return hass.localize(`${actionTranslationBaseKey}.repeat.description.full`, {\n      chosenAction: chosenAction\n    });\n  }\n  if (actionType === \"check_condition\") {\n    return hass.localize(`${actionTranslationBaseKey}.check_condition.description.full`, {\n      condition: describeCondition(action, hass, entityRegistry)\n    });\n  }\n  if (actionType === \"device_action\") {\n    const config = action;\n    if (!config.device_id) {\n      return hass.localize(`${actionTranslationBaseKey}.device_id.description.no_device`);\n    }\n    const localized = localizeDeviceAutomationAction(hass, entityRegistry, config);\n    if (localized) {\n      return localized;\n    }\n    const stateObj = hass.states[config.entity_id];\n    return `${config.type || \"Perform action with\"} ${stateObj ? computeStateName(stateObj) : config.entity_id}`;\n  }\n  if (actionType === \"parallel\") {\n    const config = action;\n    const numActions = ensureArray(config.parallel).length;\n    return hass.localize(`${actionTranslationBaseKey}.parallel.description.full`, {\n      number: numActions\n    });\n  }\n  if (actionType === \"set_conversation_response\") {\n    const config = action;\n    return hass.localize(`${actionTranslationBaseKey}.set_conversation_response.description.full`, {\n      response: config.set_conversation_response\n    });\n  }\n  return actionType;\n};","map":{"version":3,"names":["ensureArray","formatDuration","secondsToDuration","computeStateName","formatListWithAnds","isTemplate","describeCondition","localizeDeviceAutomationAction","computeDeviceName","computeEntityRegistryName","entityRegistryById","domainToName","getActionType","actionTranslationBaseKey","describeAction","hass","entityRegistry","action","actionType","ignoreAlias","tryDescribeAction","error","console","msg","message","alias","config","targets","target","key","label","Object","entries","area_id","device_id","entity_id","keyConf","Array","isArray","targetThing","push","localize","name","includes","state","states","entityReg","device","devices","area","areas","service_template","service","locale","_hass$services$domain","domain","serviceName","split","services","metadata","duration","delay","string","entityId","scene","_config$target","sceneStateObj","undefined","_config$target2","mediaStateObj","hasMedia","title","data","media_content_id","media","hasMediaPlayer","mediaPlayer","triggers","wait_for_trigger","length","count","names","keys","variables","event","hasReason","stop","reason","else","choose","numActions","default","number","chosenAction","repeat","conditions","while","until","items","for_each","map","item","JSON","stringify","condition","localized","stateObj","type","parallel","response","set_conversation_response"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/script_i18n.ts"],"sourcesContent":["import { ensureArray } from \"../common/array/ensure-array\";\nimport { formatDuration } from \"../common/datetime/format_duration\";\nimport secondsToDuration from \"../common/datetime/seconds_to_duration\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { formatListWithAnds } from \"../common/string/format-list\";\nimport { isTemplate } from \"../common/string/has-template\";\nimport { HomeAssistant } from \"../types\";\nimport { Condition } from \"./automation\";\nimport { describeCondition } from \"./automation_i18n\";\nimport { localizeDeviceAutomationAction } from \"./device_automation\";\nimport { computeDeviceName } from \"./device_registry\";\nimport {\n  EntityRegistryEntry,\n  computeEntityRegistryName,\n  entityRegistryById,\n} from \"./entity_registry\";\nimport { domainToName } from \"./integration\";\nimport {\n  ActionType,\n  ActionTypes,\n  ChooseAction,\n  DelayAction,\n  DeviceAction,\n  EventAction,\n  IfAction,\n  ParallelAction,\n  PlayMediaAction,\n  RepeatAction,\n  SceneAction,\n  SetConversationResponseAction,\n  StopAction,\n  VariablesAction,\n  WaitForTriggerAction,\n  getActionType,\n} from \"./script\";\n\nconst actionTranslationBaseKey =\n  \"ui.panel.config.automation.editor.actions.type\";\n\nexport const describeAction = <T extends ActionType>(\n  hass: HomeAssistant,\n  entityRegistry: EntityRegistryEntry[],\n  action: ActionTypes[T],\n  actionType?: T,\n  ignoreAlias = false\n): string => {\n  try {\n    return tryDescribeAction(\n      hass,\n      entityRegistry,\n      action,\n      actionType,\n      ignoreAlias\n    );\n  } catch (error: any) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    let msg = \"Error in describing action\";\n    if (error.message) {\n      msg += \": \" + error.message;\n    }\n    return msg;\n  }\n};\n\nconst tryDescribeAction = <T extends ActionType>(\n  hass: HomeAssistant,\n  entityRegistry: EntityRegistryEntry[],\n  action: ActionTypes[T],\n  actionType?: T,\n  ignoreAlias = false\n): string => {\n  if (action.alias && !ignoreAlias) {\n    return action.alias;\n  }\n  if (!actionType) {\n    actionType = getActionType(action) as T;\n  }\n\n  if (actionType === \"service\") {\n    const config = action as ActionTypes[\"service\"];\n\n    const targets: string[] = [];\n    if (config.target) {\n      for (const [key, label] of Object.entries({\n        area_id: \"areas\",\n        device_id: \"devices\",\n        entity_id: \"entities\",\n      })) {\n        if (!(key in config.target)) {\n          continue;\n        }\n        const keyConf: string[] = Array.isArray(config.target[key])\n          ? config.target[key]\n          : [config.target[key]];\n\n        for (const targetThing of keyConf) {\n          if (isTemplate(targetThing)) {\n            targets.push(\n              hass.localize(\n                `${actionTranslationBaseKey}.service.description.target_template`,\n                { name: label }\n              )\n            );\n            break;\n          } else if (key === \"entity_id\") {\n            if (targetThing.includes(\".\")) {\n              const state = hass.states[targetThing];\n              if (state) {\n                targets.push(computeStateName(state));\n              } else {\n                targets.push(targetThing);\n              }\n            } else {\n              const entityReg = entityRegistryById(entityRegistry)[targetThing];\n              if (entityReg) {\n                targets.push(\n                  computeEntityRegistryName(hass, entityReg) || targetThing\n                );\n              } else {\n                targets.push(\n                  hass.localize(\n                    `${actionTranslationBaseKey}.service.description.target_unknown_entity`\n                  )\n                );\n              }\n            }\n          } else if (key === \"device_id\") {\n            const device = hass.devices[targetThing];\n            if (device) {\n              targets.push(computeDeviceName(device, hass));\n            } else {\n              targets.push(\n                hass.localize(\n                  `${actionTranslationBaseKey}.service.description.target_unknown_device`\n                )\n              );\n            }\n          } else if (key === \"area_id\") {\n            const area = hass.areas[targetThing];\n            if (area?.name) {\n              targets.push(area.name);\n            } else {\n              targets.push(\n                hass.localize(\n                  `${actionTranslationBaseKey}.service.description.target_unknown_area`\n                )\n              );\n            }\n          } else {\n            targets.push(targetThing);\n          }\n        }\n      }\n    }\n\n    if (\n      config.service_template ||\n      (config.service && isTemplate(config.service))\n    ) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.service.description.service_based_on_template`,\n        { targets: formatListWithAnds(hass.locale, targets) }\n      );\n    }\n\n    if (config.service) {\n      const [domain, serviceName] = config.service.split(\".\", 2);\n      const service =\n        hass.localize(`component.${domain}.services.${serviceName}.name`) ||\n        hass.services[domain][serviceName]?.name;\n\n      if (config.metadata) {\n        return hass.localize(\n          `${actionTranslationBaseKey}.service.description.service_name`,\n          {\n            domain: domainToName(hass.localize, domain),\n            name: service || config.service,\n            targets: formatListWithAnds(hass.locale, targets),\n          }\n        );\n      }\n\n      return hass.localize(\n        `${actionTranslationBaseKey}.service.description.service_based_on_name`,\n        {\n          name: service\n            ? `${domainToName(hass.localize, domain)}: ${service}`\n            : config.service,\n          targets: formatListWithAnds(hass.locale, targets),\n        }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.service.description.service`\n    );\n  }\n\n  if (actionType === \"delay\") {\n    const config = action as DelayAction;\n\n    let duration: string;\n    if (typeof config.delay === \"number\") {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: secondsToDuration(config.delay)!,\n        }\n      );\n    } else if (typeof config.delay === \"string\") {\n      duration = isTemplate(config.delay)\n        ? hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_template`\n          )\n        : hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_string`,\n            {\n              string:\n                config.delay ||\n                hass.localize(\n                  `${actionTranslationBaseKey}.delay.description.duration_unknown`\n                ),\n            }\n          );\n    } else if (config.delay) {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: formatDuration(hass.locale, config.delay),\n        }\n      );\n    } else {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_unknown`\n          ),\n        }\n      );\n    }\n\n    return hass.localize(`${actionTranslationBaseKey}.delay.description.full`, {\n      duration: duration,\n    });\n  }\n\n  if (actionType === \"activate_scene\") {\n    const config = action as SceneAction;\n    let entityId: string | undefined;\n    if (\"scene\" in config) {\n      entityId = config.scene;\n    } else {\n      entityId = config.target?.entity_id || config.entity_id;\n    }\n    if (!entityId) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.activate_scene.description.activate_scene`\n      );\n    }\n    const sceneStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(\n      `${actionTranslationBaseKey}.activate_scene.description.activate_scene_with_name`,\n      { name: sceneStateObj ? computeStateName(sceneStateObj) : entityId }\n    );\n  }\n\n  if (actionType === \"play_media\") {\n    const config = action as PlayMediaAction;\n    const entityId = config.target?.entity_id || config.entity_id;\n    const mediaStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(\n      `${actionTranslationBaseKey}.play_media.description.full`,\n      {\n        hasMedia:\n          config.metadata.title || config.data.media_content_id\n            ? \"true\"\n            : \"false\",\n        media:\n          (config.metadata.title as string | undefined) ||\n          config.data.media_content_id,\n        hasMediaPlayer:\n          mediaStateObj || entityId !== undefined ? \"true\" : \"false\",\n        mediaPlayer: mediaStateObj ? computeStateName(mediaStateObj) : entityId,\n      }\n    );\n  }\n\n  if (actionType === \"wait_for_trigger\") {\n    const config = action as WaitForTriggerAction;\n    const triggers = ensureArray(config.wait_for_trigger);\n    if (!triggers || triggers.length === 0) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_a_trigger`\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_triggers`,\n      { count: triggers.length }\n    );\n  }\n\n  if (actionType === \"variables\") {\n    const config = action as VariablesAction;\n    return hass.localize(\n      `${actionTranslationBaseKey}.variables.description.full`,\n      {\n        names: formatListWithAnds(hass.locale, Object.keys(config.variables)),\n      }\n    );\n  }\n\n  if (actionType === \"fire_event\") {\n    const config = action as EventAction;\n    if (isTemplate(config.event)) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.event.description.full`,\n        {\n          name: hass.localize(\n            `${actionTranslationBaseKey}.event.description.template`\n          ),\n        }\n      );\n    }\n    return hass.localize(`${actionTranslationBaseKey}.event.description.full`, {\n      name: config.event,\n    });\n  }\n\n  if (actionType === \"wait_template\") {\n    return hass.localize(\n      `${actionTranslationBaseKey}.wait_template.description.full`\n    );\n  }\n\n  if (actionType === \"stop\") {\n    const config = action as StopAction;\n    return hass.localize(`${actionTranslationBaseKey}.stop.description.full`, {\n      hasReason: config.stop !== undefined ? \"true\" : \"false\",\n      reason: config.stop,\n    });\n  }\n\n  if (actionType === \"if\") {\n    const config = action as IfAction;\n\n    if (config.else !== undefined) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.if.description.if_else`\n      );\n    }\n\n    return hass.localize(`${actionTranslationBaseKey}.if.description.if`);\n  }\n\n  if (actionType === \"choose\") {\n    const config = action as ChooseAction;\n    if (config.choose) {\n      const numActions =\n        ensureArray(config.choose).length + (config.default ? 1 : 0);\n      return hass.localize(\n        `${actionTranslationBaseKey}.choose.description.full`,\n        { number: numActions }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.choose.description.no_action`\n    );\n  }\n\n  if (actionType === \"repeat\") {\n    const config = action as RepeatAction;\n\n    let chosenAction = \"\";\n    if (\"count\" in config.repeat) {\n      const count = config.repeat.count;\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.count`,\n        { count: count }\n      );\n    } else if (\"while\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.while);\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.while_count`,\n        { count: conditions.length }\n      );\n    } else if (\"until\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.until);\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.until_count`,\n        { count: conditions.length }\n      );\n    } else if (\"for_each\" in config.repeat) {\n      const items = ensureArray(config.repeat.for_each).map((item) =>\n        JSON.stringify(item)\n      );\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.for_each`,\n        { items: formatListWithAnds(hass.locale, items) }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.repeat.description.full`,\n      { chosenAction: chosenAction }\n    );\n  }\n\n  if (actionType === \"check_condition\") {\n    return hass.localize(\n      `${actionTranslationBaseKey}.check_condition.description.full`,\n      {\n        condition: describeCondition(action as Condition, hass, entityRegistry),\n      }\n    );\n  }\n\n  if (actionType === \"device_action\") {\n    const config = action as DeviceAction;\n    if (!config.device_id) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.device_id.description.no_device`\n      );\n    }\n    const localized = localizeDeviceAutomationAction(\n      hass,\n      entityRegistry,\n      config\n    );\n    if (localized) {\n      return localized;\n    }\n    const stateObj = hass.states[config.entity_id];\n    return `${config.type || \"Perform action with\"} ${\n      stateObj ? computeStateName(stateObj) : config.entity_id\n    }`;\n  }\n\n  if (actionType === \"parallel\") {\n    const config = action as ParallelAction;\n    const numActions = ensureArray(config.parallel).length;\n    return hass.localize(\n      `${actionTranslationBaseKey}.parallel.description.full`,\n      { number: numActions }\n    );\n  }\n\n  if (actionType === \"set_conversation_response\") {\n    const config = action as SetConversationResponseAction;\n    return hass.localize(\n      `${actionTranslationBaseKey}.set_conversation_response.description.full`,\n      { response: config.set_conversation_response }\n    );\n  }\n\n  return actionType;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}