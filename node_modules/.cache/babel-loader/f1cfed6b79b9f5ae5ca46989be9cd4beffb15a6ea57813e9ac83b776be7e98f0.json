{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { CoverEntityFeature } from \"../../../data/cover\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\nexport const supportsCoverPositionCardFeature = stateObj => {\n  const domain = computeDomain(stateObj.entity_id);\n  return domain === \"cover\" && supportsFeature(stateObj, CoverEntityFeature.SET_POSITION);\n};\nlet HuiCoverPositionCardFeature = _decorate([customElement(\"hui-cover-position-card-feature\")], function (_initialize, _LitElement) {\n  class HuiCoverPositionCardFeature extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: HuiCoverPositionCardFeature,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"color\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_config\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      static: true,\n      key: \"getStubConfig\",\n      value: function getStubConfig() {\n        return {\n          type: \"cover-position\"\n        };\n      }\n    }, {\n      kind: \"method\",\n      key: \"setConfig\",\n      value: function setConfig(config) {\n        if (!config) {\n          throw new Error(\"Invalid configuration\");\n        }\n        this._config = config;\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        var _this$stateObj$attrib;\n        if (!this._config || !this.hass || !this.stateObj || !supportsCoverPositionCardFeature(this.stateObj)) {\n          return nothing;\n        }\n        const percentage = stateActive(this.stateObj) ? (_this$stateObj$attrib = this.stateObj.attributes.current_position) !== null && _this$stateObj$attrib !== void 0 ? _this$stateObj$attrib : 0 : 0;\n        const value = Math.max(Math.round(percentage), 0);\n        const openColor = stateColorCss(this.stateObj, \"open\");\n        const color = this.color ? computeCssColor(this.color) : stateColorCss(this.stateObj);\n        const style = {\n          \"--color\": color,\n          // Use open color for inactive state to avoid grey slider that looks disabled\n          \"--state-cover-inactive-color\": openColor\n        };\n        return html`\n      <div class=\"container\" style=${styleMap(style)}>\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          inverted\n          show-handle\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(this.hass.localize, this.stateObj, this.hass.entities, \"current_position\")}\n          .disabled=${this.stateObj.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_position}\n          .locale=${this.hass.locale}\n        ></ha-control-slider>\n      </div>\n    `;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_valueChanged\",\n      value: function _valueChanged(ev) {\n        const value = ev.detail.value;\n        if (isNaN(value)) return;\n        this.hass.callService(\"cover\", \"set_cover_position\", {\n          entity_id: this.stateObj.entity_id,\n          position: value\n        });\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      ha-control-slider {\n        --control-slider-color: var(--color);\n        --control-slider-background: var(--color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","styleMap","computeCssColor","computeAttributeNameDisplay","computeDomain","stateActive","stateColorCss","supportsFeature","CoverEntityFeature","UNAVAILABLE","DOMAIN_ATTRIBUTES_UNITS","supportsCoverPositionCardFeature","stateObj","domain","entity_id","SET_POSITION","HuiCoverPositionCardFeature","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","static","getStubConfig","type","setConfig","config","Error","_config","render","_this$stateObj$attrib","hass","percentage","attributes","current_position","Math","max","round","openColor","color","style","_valueChanged","localize","entities","cover","locale","ev","detail","isNaN","callService","position","styles"],"sources":["/workspaces/frontend/src/panels/lovelace/card-features/hui-cover-position-card-feature.ts"],"sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeCssColor } from \"../../../common/color/compute-color\";\nimport { computeAttributeNameDisplay } from \"../../../common/entity/compute_attribute_display\";\nimport { computeDomain } from \"../../../common/entity/compute_domain\";\nimport { stateActive } from \"../../../common/entity/state_active\";\nimport { stateColorCss } from \"../../../common/entity/state_color\";\nimport { supportsFeature } from \"../../../common/entity/supports-feature\";\nimport { CoverEntityFeature } from \"../../../data/cover\";\nimport { UNAVAILABLE } from \"../../../data/entity\";\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceCardFeature } from \"../types\";\nimport { CoverPositionCardFeatureConfig } from \"./types\";\nimport { DOMAIN_ATTRIBUTES_UNITS } from \"../../../data/entity_attributes\";\n\nexport const supportsCoverPositionCardFeature = (stateObj: HassEntity) => {\n  const domain = computeDomain(stateObj.entity_id);\n  return (\n    domain === \"cover\" &&\n    supportsFeature(stateObj, CoverEntityFeature.SET_POSITION)\n  );\n};\n\n@customElement(\"hui-cover-position-card-feature\")\nclass HuiCoverPositionCardFeature\n  extends LitElement\n  implements LovelaceCardFeature\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @property({ attribute: false }) public stateObj?: HassEntity;\n\n  @property({ attribute: false }) public color?: string;\n\n  @state() private _config?: CoverPositionCardFeatureConfig;\n\n  static getStubConfig(): CoverPositionCardFeatureConfig {\n    return {\n      type: \"cover-position\",\n    };\n  }\n\n  public setConfig(config: CoverPositionCardFeatureConfig): void {\n    if (!config) {\n      throw new Error(\"Invalid configuration\");\n    }\n    this._config = config;\n  }\n\n  protected render() {\n    if (\n      !this._config ||\n      !this.hass ||\n      !this.stateObj ||\n      !supportsCoverPositionCardFeature(this.stateObj)\n    ) {\n      return nothing;\n    }\n\n    const percentage = stateActive(this.stateObj)\n      ? this.stateObj.attributes.current_position ?? 0\n      : 0;\n\n    const value = Math.max(Math.round(percentage), 0);\n\n    const openColor = stateColorCss(this.stateObj, \"open\");\n\n    const color = this.color\n      ? computeCssColor(this.color)\n      : stateColorCss(this.stateObj);\n\n    const style = {\n      \"--color\": color,\n      // Use open color for inactive state to avoid grey slider that looks disabled\n      \"--state-cover-inactive-color\": openColor,\n    };\n\n    return html`\n      <div class=\"container\" style=${styleMap(style)}>\n        <ha-control-slider\n          .value=${value}\n          min=\"0\"\n          max=\"100\"\n          step=\"1\"\n          inverted\n          show-handle\n          @value-changed=${this._valueChanged}\n          .ariaLabel=${computeAttributeNameDisplay(\n            this.hass.localize,\n            this.stateObj,\n            this.hass.entities,\n            \"current_position\"\n          )}\n          .disabled=${this.stateObj!.state === UNAVAILABLE}\n          .unit=${DOMAIN_ATTRIBUTES_UNITS.cover.current_position}\n          .locale=${this.hass.locale}\n        ></ha-control-slider>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: CustomEvent) {\n    const value = (ev.detail as any).value;\n    if (isNaN(value)) return;\n\n    this.hass!.callService(\"cover\", \"set_cover_position\", {\n      entity_id: this.stateObj!.entity_id,\n      position: value,\n    });\n  }\n\n  static get styles() {\n    return css`\n      ha-control-slider {\n        --control-slider-color: var(--color);\n        --control-slider-background: var(--color);\n        --control-slider-background-opacity: 0.2;\n        --control-slider-thickness: 40px;\n        --control-slider-border-radius: 10px;\n      }\n      .container {\n        padding: 0 12px 12px 12px;\n        width: auto;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-cover-position-card-feature\": HuiCoverPositionCardFeature;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}