{"ast":null,"code":"import { createCollection } from \"home-assistant-js-websocket\";\nvar fetchThemes = function fetchThemes(conn) {\n  return conn.sendMessagePromise({\n    type: \"frontend/get_themes\"\n  });\n};\nvar subscribeUpdates = function subscribeUpdates(conn, store) {\n  return conn.subscribeEvents(function () {\n    return fetchThemes(conn).then(function (data) {\n      return store.setState(data, true);\n    });\n  }, \"themes_updated\");\n};\nexport var subscribeThemes = function subscribeThemes(conn, onChange) {\n  return createCollection(\"_thm\", fetchThemes, subscribeUpdates, conn, onChange);\n};","map":{"version":3,"names":["createCollection","fetchThemes","conn","sendMessagePromise","type","subscribeUpdates","store","subscribeEvents","then","data","setState","subscribeThemes","onChange"],"sources":["/workspaces/frontend/src/data/ws-themes.ts"],"sourcesContent":["import { Connection, createCollection } from \"home-assistant-js-websocket\";\n\nexport interface ThemeVars {\n  // Incomplete\n  \"primary-color\": string;\n  \"text-primary-color\": string;\n  \"accent-color\": string;\n  [key: string]: string;\n}\n\nexport type Theme = ThemeVars & {\n  modes?: {\n    light?: ThemeVars;\n    dark?: ThemeVars;\n  };\n};\n\nexport interface Themes {\n  default_theme: string;\n  default_dark_theme: string | null;\n  themes: Record<string, Theme>;\n  // Currently effective dark mode. Will never be undefined. If user selected \"auto\"\n  // in theme picker, this property will still contain either true or false based on\n  // what has been determined via system preferences and support from the selected theme.\n  darkMode: boolean;\n  // Currently globally active theme name\n  theme: string;\n}\n\nconst fetchThemes = (conn) =>\n  conn.sendMessagePromise({\n    type: \"frontend/get_themes\",\n  });\n\nconst subscribeUpdates = (conn, store) =>\n  conn.subscribeEvents(\n    () => fetchThemes(conn).then((data) => store.setState(data, true)),\n    \"themes_updated\"\n  );\n\nexport const subscribeThemes = (\n  conn: Connection,\n  onChange: (themes: Themes) => void\n) =>\n  createCollection<Themes>(\n    \"_thm\",\n    fetchThemes,\n    subscribeUpdates,\n    conn,\n    onChange\n  );\n"],"mappings":"AAAA,SAAqBA,gBAAgB,QAAQ,6BAA6B;AA6B1E,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,IAAI;EAAA,OACvBA,IAAI,CAACC,kBAAkB,CAAC;IACtBC,IAAI,EAAE;EACR,CAAC,CAAC;AAAA;AAEJ,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIH,IAAI,EAAEI,KAAK;EAAA,OACnCJ,IAAI,CAACK,eAAe,CAClB;IAAA,OAAMN,WAAW,CAACC,IAAI,CAAC,CAACM,IAAI,CAAC,UAACC,IAAI;MAAA,OAAKH,KAAK,CAACI,QAAQ,CAACD,IAAI,EAAE,IAAI,CAAC;IAAA,EAAC;EAAA,GAClE,gBACF,CAAC;AAAA;AAEH,OAAO,IAAME,eAAe,GAAG,SAAlBA,eAAeA,CAC1BT,IAAgB,EAChBU,QAAkC;EAAA,OAElCZ,gBAAgB,CACd,MAAM,EACNC,WAAW,EACXI,gBAAgB,EAChBH,IAAI,EACJU,QACF,CAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}