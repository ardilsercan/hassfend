{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\n/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * Array of Vaadin custom element classes that have been subscribed to the dir changes.\n */\nvar directionSubscribers = [];\nfunction alignDirs(element, documentDir) {\n  var elementDir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : element.getAttribute('dir');\n  if (documentDir) {\n    element.setAttribute('dir', documentDir);\n  } else if (elementDir != null) {\n    element.removeAttribute('dir');\n  }\n}\nfunction getDocumentDir() {\n  return document.documentElement.getAttribute('dir');\n}\nfunction directionUpdater() {\n  var documentDir = getDocumentDir();\n  directionSubscribers.forEach(function (element) {\n    alignDirs(element, documentDir);\n  });\n}\nvar directionObserver = new MutationObserver(directionUpdater);\ndirectionObserver.observe(document.documentElement, {\n  attributes: true,\n  attributeFilter: ['dir']\n});\n\n/**\n * A mixin to handle `dir` attribute based on the one set on the `<html>` element.\n *\n * @polymerMixin\n */\nexport var DirMixin = function DirMixin(superClass) {\n  return /*#__PURE__*/function (_superClass) {\n    _inherits(VaadinDirMixin, _superClass);\n    function VaadinDirMixin() {\n      _classCallCheck(this, VaadinDirMixin);\n      return _callSuper(this, VaadinDirMixin, arguments);\n    }\n    _createClass(VaadinDirMixin, [{\n      key: \"__isRTL\",\n      get:\n      /**\n       * @return {boolean}\n       * @protected\n       */\n      function get() {\n        return this.getAttribute('dir') === 'rtl';\n      }\n\n      /** @protected */\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        _get(_getPrototypeOf(VaadinDirMixin.prototype), \"connectedCallback\", this).call(this);\n        if (!this.hasAttribute('dir') || this.__restoreSubscription) {\n          this.__subscribe();\n          alignDirs(this, getDocumentDir(), null);\n        }\n      }\n\n      /** @protected */\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(name, oldValue, newValue) {\n        _get(_getPrototypeOf(VaadinDirMixin.prototype), \"attributeChangedCallback\", this).call(this, name, oldValue, newValue);\n        if (name !== 'dir') {\n          return;\n        }\n        var documentDir = getDocumentDir();\n\n        // New value equals to the document direction and the element is not subscribed to the changes\n        var newValueEqlDocDir = newValue === documentDir && directionSubscribers.indexOf(this) === -1;\n        // Value was emptied and the element is not subscribed to the changes\n        var newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1;\n        // New value is different and the old equals to document direction and the element is not subscribed to the changes\n        var newDiffValue = newValue !== documentDir && oldValue === documentDir;\n        if (newValueEqlDocDir || newValueEmptied) {\n          this.__subscribe();\n          alignDirs(this, documentDir, newValue);\n        } else if (newDiffValue) {\n          this.__unsubscribe();\n        }\n      }\n\n      /** @protected */\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        _get(_getPrototypeOf(VaadinDirMixin.prototype), \"disconnectedCallback\", this).call(this);\n        this.__restoreSubscription = directionSubscribers.includes(this);\n        this.__unsubscribe();\n      }\n\n      /** @protected */\n    }, {\n      key: \"_valueToNodeAttribute\",\n      value: function _valueToNodeAttribute(node, value, attribute) {\n        // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n        // If the property contains an empty string then it should not create an empty attribute\n        if (attribute === 'dir' && value === '' && !node.hasAttribute('dir')) {\n          return;\n        }\n        _get(_getPrototypeOf(VaadinDirMixin.prototype), \"_valueToNodeAttribute\", this).call(this, node, value, attribute);\n      }\n\n      /** @protected */\n    }, {\n      key: \"_attributeToProperty\",\n      value: function _attributeToProperty(attribute, value, type) {\n        // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n        // If the attribute is removed, then the dir property should contain an empty string instead of null\n        if (attribute === 'dir' && !value) {\n          this.dir = '';\n        } else {\n          _get(_getPrototypeOf(VaadinDirMixin.prototype), \"_attributeToProperty\", this).call(this, attribute, value, type);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"__subscribe\",\n      value: function __subscribe() {\n        if (!directionSubscribers.includes(this)) {\n          directionSubscribers.push(this);\n        }\n      }\n\n      /** @private */\n    }, {\n      key: \"__unsubscribe\",\n      value: function __unsubscribe() {\n        if (directionSubscribers.includes(this)) {\n          directionSubscribers.splice(directionSubscribers.indexOf(this), 1);\n        }\n      }\n    }], [{\n      key: \"properties\",\n      get: function get() {\n        return {\n          /**\n           * @protected\n           */\n          dir: {\n            type: String,\n            value: '',\n            reflectToAttribute: true,\n            converter: {\n              fromAttribute: function fromAttribute(attr) {\n                return !attr ? '' : attr;\n              },\n              toAttribute: function toAttribute(prop) {\n                return prop === '' ? null : prop;\n              }\n            }\n          }\n        };\n      }\n    }]);\n    return VaadinDirMixin;\n  }(superClass);\n};","map":{"version":3,"names":["directionSubscribers","alignDirs","element","documentDir","elementDir","arguments","length","undefined","getAttribute","setAttribute","removeAttribute","getDocumentDir","document","documentElement","directionUpdater","forEach","directionObserver","MutationObserver","observe","attributes","attributeFilter","DirMixin","superClass","_superClass","_inherits","VaadinDirMixin","_classCallCheck","_callSuper","_createClass","key","get","value","connectedCallback","_get","_getPrototypeOf","prototype","call","hasAttribute","__restoreSubscription","__subscribe","attributeChangedCallback","name","oldValue","newValue","newValueEqlDocDir","indexOf","newValueEmptied","newDiffValue","__unsubscribe","disconnectedCallback","includes","_valueToNodeAttribute","node","attribute","_attributeToProperty","type","dir","push","splice","String","reflectToAttribute","converter","fromAttribute","attr","toAttribute","prop"],"sources":["/Users/sercanardil/Desktop/frontend/node_modules/@vaadin/component-base/src/dir-mixin.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2021 - 2023 Vaadin Ltd.\n * This program is available under Apache License Version 2.0, available at https://vaadin.com/license/\n */\n\n/**\n * Array of Vaadin custom element classes that have been subscribed to the dir changes.\n */\nconst directionSubscribers = [];\n\nfunction alignDirs(element, documentDir, elementDir = element.getAttribute('dir')) {\n  if (documentDir) {\n    element.setAttribute('dir', documentDir);\n  } else if (elementDir != null) {\n    element.removeAttribute('dir');\n  }\n}\n\nfunction getDocumentDir() {\n  return document.documentElement.getAttribute('dir');\n}\n\nfunction directionUpdater() {\n  const documentDir = getDocumentDir();\n  directionSubscribers.forEach((element) => {\n    alignDirs(element, documentDir);\n  });\n}\n\nconst directionObserver = new MutationObserver(directionUpdater);\ndirectionObserver.observe(document.documentElement, { attributes: true, attributeFilter: ['dir'] });\n\n/**\n * A mixin to handle `dir` attribute based on the one set on the `<html>` element.\n *\n * @polymerMixin\n */\nexport const DirMixin = (superClass) =>\n  class VaadinDirMixin extends superClass {\n    static get properties() {\n      return {\n        /**\n         * @protected\n         */\n        dir: {\n          type: String,\n          value: '',\n          reflectToAttribute: true,\n          converter: {\n            fromAttribute: (attr) => {\n              return !attr ? '' : attr;\n            },\n            toAttribute: (prop) => {\n              return prop === '' ? null : prop;\n            },\n          },\n        },\n      };\n    }\n\n    /**\n     * @return {boolean}\n     * @protected\n     */\n    get __isRTL() {\n      return this.getAttribute('dir') === 'rtl';\n    }\n\n    /** @protected */\n    connectedCallback() {\n      super.connectedCallback();\n\n      if (!this.hasAttribute('dir') || this.__restoreSubscription) {\n        this.__subscribe();\n        alignDirs(this, getDocumentDir(), null);\n      }\n    }\n\n    /** @protected */\n    attributeChangedCallback(name, oldValue, newValue) {\n      super.attributeChangedCallback(name, oldValue, newValue);\n      if (name !== 'dir') {\n        return;\n      }\n\n      const documentDir = getDocumentDir();\n\n      // New value equals to the document direction and the element is not subscribed to the changes\n      const newValueEqlDocDir = newValue === documentDir && directionSubscribers.indexOf(this) === -1;\n      // Value was emptied and the element is not subscribed to the changes\n      const newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1;\n      // New value is different and the old equals to document direction and the element is not subscribed to the changes\n      const newDiffValue = newValue !== documentDir && oldValue === documentDir;\n\n      if (newValueEqlDocDir || newValueEmptied) {\n        this.__subscribe();\n        alignDirs(this, documentDir, newValue);\n      } else if (newDiffValue) {\n        this.__unsubscribe();\n      }\n    }\n\n    /** @protected */\n    disconnectedCallback() {\n      super.disconnectedCallback();\n      this.__restoreSubscription = directionSubscribers.includes(this);\n      this.__unsubscribe();\n    }\n\n    /** @protected */\n    _valueToNodeAttribute(node, value, attribute) {\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n      // If the property contains an empty string then it should not create an empty attribute\n      if (attribute === 'dir' && value === '' && !node.hasAttribute('dir')) {\n        return;\n      }\n      super._valueToNodeAttribute(node, value, attribute);\n    }\n\n    /** @protected */\n    _attributeToProperty(attribute, value, type) {\n      // Override default Polymer attribute reflection to match native behavior of HTMLElement.dir property\n      // If the attribute is removed, then the dir property should contain an empty string instead of null\n      if (attribute === 'dir' && !value) {\n        this.dir = '';\n      } else {\n        super._attributeToProperty(attribute, value, type);\n      }\n    }\n\n    /** @private */\n    __subscribe() {\n      if (!directionSubscribers.includes(this)) {\n        directionSubscribers.push(this);\n      }\n    }\n\n    /** @private */\n    __unsubscribe() {\n      if (directionSubscribers.includes(this)) {\n        directionSubscribers.splice(directionSubscribers.indexOf(this), 1);\n      }\n    }\n  };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}