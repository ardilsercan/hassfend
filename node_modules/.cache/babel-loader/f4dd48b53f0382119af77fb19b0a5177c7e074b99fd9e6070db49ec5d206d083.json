{"ast":null,"code":"export const hassUrl = `${location.protocol}//${location.host}`;\nexport const autocompleteLoginFields = schema => schema.map(field => {\n  if (field.type !== \"string\") return field;\n  switch (field.name) {\n    case \"username\":\n      return {\n        ...field,\n        autocomplete: \"username\"\n      };\n    case \"password\":\n      return {\n        ...field,\n        autocomplete: \"current-password\"\n      };\n    case \"code\":\n      return {\n        ...field,\n        autocomplete: \"one-time-code\"\n      };\n    default:\n      return field;\n  }\n});\nexport const getSignedPath = (hass, path) => hass.callWS({\n  type: \"auth/sign_path\",\n  path\n});\nexport const fetchAuthProviders = () => fetch(\"/auth/providers\", {\n  credentials: \"same-origin\"\n});\nexport const createLoginFlow = (client_id, redirect_uri, handler) => fetch(\"/auth/login_flow\", {\n  method: \"POST\",\n  credentials: \"same-origin\",\n  body: JSON.stringify({\n    client_id,\n    handler,\n    redirect_uri\n  })\n});\nexport const submitLoginFlow = (flow_id, data) => fetch(`/auth/login_flow/${flow_id}`, {\n  method: \"POST\",\n  credentials: \"same-origin\",\n  body: JSON.stringify(data)\n});\nexport const deleteLoginFlow = flow_id => fetch(`/auth/login_flow/${flow_id}`, {\n  method: \"DELETE\",\n  credentials: \"same-origin\"\n});\nexport const redirectWithAuthCode = (url, authCode, oauth2State, storeToken) => {\n  // OAuth 2: 3.1.2 we need to retain query component of a redirect URI\n  if (!url.includes(\"?\")) {\n    url += \"?\";\n  } else if (!url.endsWith(\"&\")) {\n    url += \"&\";\n  }\n  url += `code=${encodeURIComponent(authCode)}`;\n  if (oauth2State) {\n    url += `&state=${encodeURIComponent(oauth2State)}`;\n  }\n  if (storeToken) {\n    url += `&storeToken=true`;\n  }\n  document.location.assign(url);\n};\nexport const createAuthForUser = async (hass, userId, username, password) => hass.callWS({\n  type: \"config/auth_provider/homeassistant/create\",\n  user_id: userId,\n  username,\n  password\n});\nexport const changePassword = (hass, current_password, new_password) => hass.callWS({\n  type: \"config/auth_provider/homeassistant/change_password\",\n  current_password,\n  new_password\n});\nexport const adminChangePassword = (hass, userId, password) => hass.callWS({\n  type: \"config/auth_provider/homeassistant/admin_change_password\",\n  user_id: userId,\n  password\n});\nexport const deleteAllRefreshTokens = (hass, token_type, delete_current_token) => hass.callWS({\n  type: \"auth/delete_all_refresh_tokens\",\n  token_type,\n  delete_current_token\n});","map":{"version":3,"names":["hassUrl","location","protocol","host","autocompleteLoginFields","schema","map","field","type","name","autocomplete","getSignedPath","hass","path","callWS","fetchAuthProviders","fetch","credentials","createLoginFlow","client_id","redirect_uri","handler","method","body","JSON","stringify","submitLoginFlow","flow_id","data","deleteLoginFlow","redirectWithAuthCode","url","authCode","oauth2State","storeToken","includes","endsWith","encodeURIComponent","document","assign","createAuthForUser","userId","username","password","user_id","changePassword","current_password","new_password","adminChangePassword","deleteAllRefreshTokens","token_type","delete_current_token"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/auth.ts"],"sourcesContent":["import { HaFormSchema } from \"../components/ha-form/types\";\nimport { HomeAssistant } from \"../types\";\nimport { RefreshTokenType } from \"./refresh_token\";\n\nexport interface AuthUrlSearchParams {\n  client_id?: string;\n  redirect_uri?: string;\n  state?: string;\n}\n\nexport interface AuthProvider {\n  name: string;\n  id: string;\n  type: string;\n  users?: Record<string, string>;\n}\n\nexport interface Credential {\n  type: string;\n}\n\nexport interface SignedPath {\n  path: string;\n}\n\nexport const hassUrl = `${location.protocol}//${location.host}`;\n\nexport const autocompleteLoginFields = (schema: HaFormSchema[]) =>\n  schema.map((field) => {\n    if (field.type !== \"string\") return field;\n    switch (field.name) {\n      case \"username\":\n        return { ...field, autocomplete: \"username\" };\n      case \"password\":\n        return { ...field, autocomplete: \"current-password\" };\n      case \"code\":\n        return { ...field, autocomplete: \"one-time-code\" };\n      default:\n        return field;\n    }\n  });\n\nexport const getSignedPath = (\n  hass: HomeAssistant,\n  path: string\n): Promise<SignedPath> => hass.callWS({ type: \"auth/sign_path\", path });\n\nexport const fetchAuthProviders = () =>\n  fetch(\"/auth/providers\", {\n    credentials: \"same-origin\",\n  });\n\nexport const createLoginFlow = (\n  client_id: string | undefined,\n  redirect_uri: string | undefined,\n  handler: (string | null)[]\n) =>\n  fetch(\"/auth/login_flow\", {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify({\n      client_id,\n      handler,\n      redirect_uri,\n    }),\n  });\n\nexport const submitLoginFlow = (flow_id: string, data: Record<string, any>) =>\n  fetch(`/auth/login_flow/${flow_id}`, {\n    method: \"POST\",\n    credentials: \"same-origin\",\n    body: JSON.stringify(data),\n  });\n\nexport const deleteLoginFlow = (flow_id) =>\n  fetch(`/auth/login_flow/${flow_id}`, {\n    method: \"DELETE\",\n    credentials: \"same-origin\",\n  });\n\nexport const redirectWithAuthCode = (\n  url: string,\n  authCode: string,\n  oauth2State: string | undefined,\n  storeToken: boolean\n) => {\n  // OAuth 2: 3.1.2 we need to retain query component of a redirect URI\n  if (!url.includes(\"?\")) {\n    url += \"?\";\n  } else if (!url.endsWith(\"&\")) {\n    url += \"&\";\n  }\n\n  url += `code=${encodeURIComponent(authCode)}`;\n\n  if (oauth2State) {\n    url += `&state=${encodeURIComponent(oauth2State)}`;\n  }\n  if (storeToken) {\n    url += `&storeToken=true`;\n  }\n\n  document.location.assign(url);\n};\n\nexport const createAuthForUser = async (\n  hass: HomeAssistant,\n  userId: string,\n  username: string,\n  password: string\n) =>\n  hass.callWS({\n    type: \"config/auth_provider/homeassistant/create\",\n    user_id: userId,\n    username,\n    password,\n  });\n\nexport const changePassword = (\n  hass: HomeAssistant,\n  current_password: string,\n  new_password: string\n) =>\n  hass.callWS({\n    type: \"config/auth_provider/homeassistant/change_password\",\n    current_password,\n    new_password,\n  });\n\nexport const adminChangePassword = (\n  hass: HomeAssistant,\n  userId: string,\n  password: string\n) =>\n  hass.callWS<void>({\n    type: \"config/auth_provider/homeassistant/admin_change_password\",\n    user_id: userId,\n    password,\n  });\n\nexport const deleteAllRefreshTokens = (\n  hass: HomeAssistant,\n  token_type?: RefreshTokenType,\n  delete_current_token?: boolean\n) =>\n  hass.callWS({\n    type: \"auth/delete_all_refresh_tokens\",\n    token_type,\n    delete_current_token,\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}