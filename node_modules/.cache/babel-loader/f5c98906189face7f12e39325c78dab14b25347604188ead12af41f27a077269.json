{"ast":null,"code":"import { atLeastVersion } from \"../../common/config/version\";\nexport const hassioApiResultExtractor = response => response.data;\nexport const extractApiErrorMessage = error => typeof error === \"object\" ? typeof error.body === \"object\" ? error.body.message || \"Unknown error, see supervisor logs\" : error.body || error.message || \"Unknown error, see supervisor logs\" : error;\nconst ignoredStatusCodes = new Set([502, 503, 504]);\nexport const ignoreSupervisorError = error => {\n  if (error && error.status_code && ignoredStatusCodes.has(error.status_code)) {\n    return true;\n  }\n  if (error && error.message && (error.message.includes(\"ERR_CONNECTION_CLOSED\") || error.message.includes(\"ERR_CONNECTION_RESET\"))) {\n    return true;\n  }\n  return false;\n};\nexport const fetchHassioStats = async (hass, container) => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/${container}/stats`,\n      method: \"get\"\n    });\n  }\n  return hassioApiResultExtractor(await hass.callApi(\"GET\", `hassio/${container}/stats`));\n};","map":{"version":3,"names":["atLeastVersion","hassioApiResultExtractor","response","data","extractApiErrorMessage","error","body","message","ignoredStatusCodes","Set","ignoreSupervisorError","status_code","has","includes","fetchHassioStats","hass","container","config","version","callWS","type","endpoint","method","callApi"],"sources":["/Users/sercanardil/Desktop/frontend/src/data/hassio/common.ts"],"sourcesContent":["import { atLeastVersion } from \"../../common/config/version\";\nimport { HomeAssistant } from \"../../types\";\n\nexport interface HassioResponse<T> {\n  data: T;\n  message?: string;\n  result: \"ok\" | \"error\";\n}\n\nexport interface HassioStats {\n  blk_read: number;\n  blk_write: number;\n  cpu_percent: number;\n  memory_limit: number;\n  memory_percent: number;\n  memory_usage: number;\n  network_rx: number;\n  network_tx: number;\n}\n\nexport const hassioApiResultExtractor = <T>(response: HassioResponse<T>) =>\n  response.data;\n\nexport const extractApiErrorMessage = (error: any): string =>\n  typeof error === \"object\"\n    ? typeof error.body === \"object\"\n      ? error.body.message || \"Unknown error, see supervisor logs\"\n      : error.body || error.message || \"Unknown error, see supervisor logs\"\n    : error;\n\nconst ignoredStatusCodes = new Set([502, 503, 504]);\n\nexport const ignoreSupervisorError = (error): boolean => {\n  if (error && error.status_code && ignoredStatusCodes.has(error.status_code)) {\n    return true;\n  }\n  if (\n    error &&\n    error.message &&\n    (error.message.includes(\"ERR_CONNECTION_CLOSED\") ||\n      error.message.includes(\"ERR_CONNECTION_RESET\"))\n  ) {\n    return true;\n  }\n  return false;\n};\n\nexport const fetchHassioStats = async (\n  hass: HomeAssistant,\n  container: string\n): Promise<HassioStats> => {\n  if (atLeastVersion(hass.config.version, 2021, 2, 4)) {\n    return hass.callWS({\n      type: \"supervisor/api\",\n      endpoint: `/${container}/stats`,\n      method: \"get\",\n    });\n  }\n\n  return hassioApiResultExtractor(\n    await hass.callApi<HassioResponse<HassioStats>>(\n      \"GET\",\n      `hassio/${container}/stats`\n    )\n  );\n};\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,6BAA6B;AAoB5D,OAAO,MAAMC,wBAAwB,GAAOC,QAA2B,IACrEA,QAAQ,CAACC,IAAI;AAEf,OAAO,MAAMC,sBAAsB,GAAIC,KAAU,IAC/C,OAAOA,KAAK,KAAK,QAAQ,GACrB,OAAOA,KAAK,CAACC,IAAI,KAAK,QAAQ,GAC5BD,KAAK,CAACC,IAAI,CAACC,OAAO,IAAI,oCAAoC,GAC1DF,KAAK,CAACC,IAAI,IAAID,KAAK,CAACE,OAAO,IAAI,oCAAoC,GACrEF,KAAK;AAEX,MAAMG,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AAEnD,OAAO,MAAMC,qBAAqB,GAAIL,KAAK,IAAc;EACvD,IAAIA,KAAK,IAAIA,KAAK,CAACM,WAAW,IAAIH,kBAAkB,CAACI,GAAG,CAACP,KAAK,CAACM,WAAW,CAAC,EAAE;IAC3E,OAAO,IAAI;EACb;EACA,IACEN,KAAK,IACLA,KAAK,CAACE,OAAO,KACZF,KAAK,CAACE,OAAO,CAACM,QAAQ,CAAC,uBAAuB,CAAC,IAC9CR,KAAK,CAACE,OAAO,CAACM,QAAQ,CAAC,sBAAsB,CAAC,CAAC,EACjD;IACA,OAAO,IAAI;EACb;EACA,OAAO,KAAK;AACd,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAC9BC,IAAmB,EACnBC,SAAiB,KACQ;EACzB,IAAIhB,cAAc,CAACe,IAAI,CAACE,MAAM,CAACC,OAAO,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE;IACnD,OAAOH,IAAI,CAACI,MAAM,CAAC;MACjBC,IAAI,EAAE,gBAAgB;MACtBC,QAAQ,EAAG,IAAGL,SAAU,QAAO;MAC/BM,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,OAAOrB,wBAAwB,CAC7B,MAAMc,IAAI,CAACQ,OAAO,CAChB,KAAK,EACJ,UAASP,SAAU,QACtB,CACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}