{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport { css, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { hs2rgb, rgb2hex } from \"../../../../common/color/convert-color\";\nimport { rgbw2rgb, rgbww2rgb, temperature2rgb } from \"../../../../common/color/convert-light-color\";\nimport { luminosity } from \"../../../../common/color/rgb\";\nimport \"../../../../components/ha-outlined-icon-button\";\nimport \"../../../../components/ha-svg-icon\";\nlet MoreInfoViewLightColorPicker = _decorate([customElement(\"ha-favorite-color-button\")], function (_initialize, _LitElement) {\n  class MoreInfoViewLightColorPicker extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: MoreInfoViewLightColorPicker,\n    d: [{\n      kind: \"method\",\n      key: \"focus\",\n      value: function focus() {\n        var _this$_button;\n        (_this$_button = this._button) === null || _this$_button === void 0 || _this$_button.focus();\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"label\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        type: Boolean,\n        reflect: true\n      })],\n      key: \"disabled\",\n      value() {\n        return false;\n      }\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"stateObj\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"color\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [query(\"ha-outlined-icon-button\", true)],\n      key: \"_button\",\n      value: void 0\n    }, {\n      kind: \"get\",\n      key: \"_rgbColor\",\n      value: function _rgbColor() {\n        if (this.color) {\n          if (\"hs_color\" in this.color) {\n            return hs2rgb([this.color.hs_color[0], this.color.hs_color[1] / 100]);\n          }\n          if (\"color_temp_kelvin\" in this.color) {\n            return temperature2rgb(this.color.color_temp_kelvin);\n          }\n          if (\"rgb_color\" in this.color) {\n            return this.color.rgb_color;\n          }\n          if (\"rgbw_color\" in this.color) {\n            return rgbw2rgb(this.color.rgbw_color);\n          }\n          if (\"rgbww_color\" in this.color) {\n            var _this$stateObj, _this$stateObj2;\n            return rgbww2rgb(this.color.rgbww_color, (_this$stateObj = this.stateObj) === null || _this$stateObj === void 0 ? void 0 : _this$stateObj.attributes.min_color_temp_kelvin, (_this$stateObj2 = this.stateObj) === null || _this$stateObj2 === void 0 ? void 0 : _this$stateObj2.attributes.max_color_temp_kelvin);\n          }\n        }\n        return [255, 255, 255];\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        const backgroundColor = rgb2hex(this._rgbColor);\n        const isLight = luminosity(this._rgbColor) > 0.8;\n        const iconColor = isLight ? [33, 33, 33] : [255, 255, 255];\n        const hexIconColor = rgb2hex(iconColor);\n        const rgbIconColor = iconColor.join(\", \");\n        return html`\n      <ha-outlined-icon-button\n        no-ripple\n        .disabled=${this.disabled}\n        title=${ifDefined(this.label)}\n        aria-label=${ifDefined(this.label)}\n        style=${styleMap({\n          \"background-color\": backgroundColor,\n          \"--icon-color\": hexIconColor,\n          \"--rgb-icon-color\": rgbIconColor\n        })}\n      ></ha-outlined-icon-button>\n    `;\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return [css`\n        :host {\n          display: block;\n        }\n        ha-outlined-icon-button {\n          --ha-icon-display: block;\n          --md-sys-color-on-surface: var(\n            --icon-color,\n            var(--secondary-text-color)\n          );\n          --md-sys-color-on-surface-variant: var(\n            --icon-color,\n            var(--secondary-text-color)\n          );\n          --md-sys-color-on-surface-rgb: var(\n            --rgb-icon-color,\n            var(--rgb-secondary-text-color)\n          );\n          --md-sys-color-outline: var(--divider-color);\n          --md-ripple-focus-color: 0;\n          --md-ripple-hover-opacity: 0;\n          --md-ripple-pressed-opacity: 0;\n          border-radius: 9999px;\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        ha-outlined-icon-button[disabled] {\n          filter: grayscale(1) opacity(0.5);\n        }\n      `];\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","customElement","property","query","ifDefined","styleMap","hs2rgb","rgb2hex","rgbw2rgb","rgbww2rgb","temperature2rgb","luminosity","MoreInfoViewLightColorPicker","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","key","value","focus","_this$_button","_button","decorators","attribute","type","Boolean","reflect","_rgbColor","color","hs_color","color_temp_kelvin","rgb_color","rgbw_color","_this$stateObj","_this$stateObj2","rgbww_color","stateObj","attributes","min_color_temp_kelvin","max_color_temp_kelvin","render","backgroundColor","isLight","iconColor","hexIconColor","rgbIconColor","join","disabled","label","static","styles"],"sources":["/workspaces/frontend/src/dialogs/more-info/components/lights/ha-favorite-color-button.ts"],"sourcesContent":["import { css, CSSResultGroup, html, LitElement } from \"lit\";\nimport { customElement, property, query } from \"lit/decorators\";\nimport { ifDefined } from \"lit/directives/if-defined\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { hs2rgb, rgb2hex } from \"../../../../common/color/convert-color\";\nimport {\n  rgbw2rgb,\n  rgbww2rgb,\n  temperature2rgb,\n} from \"../../../../common/color/convert-light-color\";\nimport { luminosity } from \"../../../../common/color/rgb\";\nimport type { HaOutlinedIconButton } from \"../../../../components/ha-outlined-icon-button\";\nimport \"../../../../components/ha-outlined-icon-button\";\nimport \"../../../../components/ha-svg-icon\";\nimport { LightColor, LightEntity } from \"../../../../data/light\";\n\n@customElement(\"ha-favorite-color-button\")\nclass MoreInfoViewLightColorPicker extends LitElement {\n  public override focus() {\n    this._button?.focus();\n  }\n\n  @property({ attribute: false }) label?: string;\n\n  @property({ type: Boolean, reflect: true }) disabled = false;\n\n  @property({ attribute: false }) public stateObj?: LightEntity;\n\n  @property({ attribute: false }) color!: LightColor;\n\n  @query(\"ha-outlined-icon-button\", true)\n  private _button?: HaOutlinedIconButton;\n\n  private get _rgbColor(): [number, number, number] {\n    if (this.color) {\n      if (\"hs_color\" in this.color) {\n        return hs2rgb([this.color.hs_color[0], this.color.hs_color[1] / 100]);\n      }\n      if (\"color_temp_kelvin\" in this.color) {\n        return temperature2rgb(this.color.color_temp_kelvin);\n      }\n      if (\"rgb_color\" in this.color) {\n        return this.color.rgb_color;\n      }\n      if (\"rgbw_color\" in this.color) {\n        return rgbw2rgb(this.color.rgbw_color);\n      }\n      if (\"rgbww_color\" in this.color) {\n        return rgbww2rgb(\n          this.color.rgbww_color,\n          this.stateObj?.attributes.min_color_temp_kelvin,\n          this.stateObj?.attributes.max_color_temp_kelvin\n        );\n      }\n    }\n\n    return [255, 255, 255];\n  }\n\n  protected render() {\n    const backgroundColor = rgb2hex(this._rgbColor);\n    const isLight = luminosity(this._rgbColor) > 0.8;\n    const iconColor = isLight\n      ? ([33, 33, 33] as [number, number, number])\n      : ([255, 255, 255] as [number, number, number]);\n    const hexIconColor = rgb2hex(iconColor);\n    const rgbIconColor = iconColor.join(\", \");\n\n    return html`\n      <ha-outlined-icon-button\n        no-ripple\n        .disabled=${this.disabled}\n        title=${ifDefined(this.label)}\n        aria-label=${ifDefined(this.label)}\n        style=${styleMap({\n          \"background-color\": backgroundColor,\n          \"--icon-color\": hexIconColor,\n          \"--rgb-icon-color\": rgbIconColor,\n        })}\n      ></ha-outlined-icon-button>\n    `;\n  }\n\n  static get styles(): CSSResultGroup {\n    return [\n      css`\n        :host {\n          display: block;\n        }\n        ha-outlined-icon-button {\n          --ha-icon-display: block;\n          --md-sys-color-on-surface: var(\n            --icon-color,\n            var(--secondary-text-color)\n          );\n          --md-sys-color-on-surface-variant: var(\n            --icon-color,\n            var(--secondary-text-color)\n          );\n          --md-sys-color-on-surface-rgb: var(\n            --rgb-icon-color,\n            var(--rgb-secondary-text-color)\n          );\n          --md-sys-color-outline: var(--divider-color);\n          --md-ripple-focus-color: 0;\n          --md-ripple-hover-opacity: 0;\n          --md-ripple-pressed-opacity: 0;\n          border-radius: 9999px;\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        ha-outlined-icon-button[disabled] {\n          filter: grayscale(1) opacity(0.5);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-favorite-color-button\": MoreInfoViewLightColorPicker;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}