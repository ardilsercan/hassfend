{"ast":null,"code":"/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport { IronMenuBehavior } from './iron-menu-behavior.js';\n\n/**\n * `IronMenubarBehavior` implements accessible menubar behavior.\n *\n * @polymerBehavior IronMenubarBehavior\n */\nexport var IronMenubarBehaviorImpl = {\n  hostAttributes: {\n    'role': 'menubar'\n  },\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {\n    'left': '_onLeftKey',\n    'right': '_onRightKey'\n  },\n  _onUpKey: function _onUpKey(event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n  _onDownKey: function _onDownKey(event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n  get _isRTL() {\n    return window.getComputedStyle(this)['direction'] === 'rtl';\n  },\n  _onLeftKey: function _onLeftKey(event) {\n    if (this._isRTL) {\n      this._focusNext();\n    } else {\n      this._focusPrevious();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n  _onRightKey: function _onRightKey(event) {\n    if (this._isRTL) {\n      this._focusPrevious();\n    } else {\n      this._focusNext();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n  _onKeydown: function _onKeydown(event) {\n    if (this.keyboardEventMatchesKeys(event, 'up down left right esc')) {\n      return;\n    }\n\n    // all other keys focus the menu item starting with that character\n    this._focusWithKeyboardEvent(event);\n  }\n};\n\n/** @polymerBehavior */\nexport var IronMenubarBehavior = [IronMenuBehavior, IronMenubarBehaviorImpl];","map":{"version":3,"names":["IronMenuBehavior","IronMenubarBehaviorImpl","hostAttributes","keyBindings","_onUpKey","event","focusedItem","click","detail","keyboardEvent","preventDefault","_onDownKey","_isRTL","window","getComputedStyle","_onLeftKey","_focusNext","_focusPrevious","_onRightKey","_onKeydown","keyboardEventMatchesKeys","_focusWithKeyboardEvent","IronMenubarBehavior"],"sources":["/workspaces/frontend/node_modules/@polymer/iron-menu-behavior/iron-menubar-behavior.js"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronMenuBehavior} from './iron-menu-behavior.js';\n\n/**\n * `IronMenubarBehavior` implements accessible menubar behavior.\n *\n * @polymerBehavior IronMenubarBehavior\n */\nexport const IronMenubarBehaviorImpl = {\n\n  hostAttributes: {'role': 'menubar'},\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {'left': '_onLeftKey', 'right': '_onRightKey'},\n\n  _onUpKey: function(event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onDownKey: function(event) {\n    this.focusedItem.click();\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  get _isRTL() {\n    return window.getComputedStyle(this)['direction'] === 'rtl';\n  },\n\n  _onLeftKey: function(event) {\n    if (this._isRTL) {\n      this._focusNext();\n    } else {\n      this._focusPrevious();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onRightKey: function(event) {\n    if (this._isRTL) {\n      this._focusPrevious();\n    } else {\n      this._focusNext();\n    }\n    event.detail.keyboardEvent.preventDefault();\n  },\n\n  _onKeydown: function(event) {\n    if (this.keyboardEventMatchesKeys(event, 'up down left right esc')) {\n      return;\n    }\n\n    // all other keys focus the menu item starting with that character\n    this._focusWithKeyboardEvent(event);\n  }\n\n};\n\n/** @polymerBehavior */\nexport const IronMenubarBehavior = [IronMenuBehavior, IronMenubarBehaviorImpl];\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,oCAAoC;AAE3C,SAAQA,gBAAgB,QAAO,yBAAyB;;AAExD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,uBAAuB,GAAG;EAErCC,cAAc,EAAE;IAAC,MAAM,EAAE;EAAS,CAAC;EAEnC;AACF;AACA;EACEC,WAAW,EAAE;IAAC,MAAM,EAAE,YAAY;IAAE,OAAO,EAAE;EAAa,CAAC;EAE3DC,QAAQ,EAAE,SAAAA,SAASC,KAAK,EAAE;IACxB,IAAI,CAACC,WAAW,CAACC,KAAK,CAAC,CAAC;IACxBF,KAAK,CAACG,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;EAC7C,CAAC;EAEDC,UAAU,EAAE,SAAAA,WAASN,KAAK,EAAE;IAC1B,IAAI,CAACC,WAAW,CAACC,KAAK,CAAC,CAAC;IACxBF,KAAK,CAACG,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;EAC7C,CAAC;EAED,IAAIE,MAAMA,CAAA,EAAG;IACX,OAAOC,MAAM,CAACC,gBAAgB,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,KAAK;EAC7D,CAAC;EAEDC,UAAU,EAAE,SAAAA,WAASV,KAAK,EAAE;IAC1B,IAAI,IAAI,CAACO,MAAM,EAAE;MACf,IAAI,CAACI,UAAU,CAAC,CAAC;IACnB,CAAC,MAAM;MACL,IAAI,CAACC,cAAc,CAAC,CAAC;IACvB;IACAZ,KAAK,CAACG,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;EAC7C,CAAC;EAEDQ,WAAW,EAAE,SAAAA,YAASb,KAAK,EAAE;IAC3B,IAAI,IAAI,CAACO,MAAM,EAAE;MACf,IAAI,CAACK,cAAc,CAAC,CAAC;IACvB,CAAC,MAAM;MACL,IAAI,CAACD,UAAU,CAAC,CAAC;IACnB;IACAX,KAAK,CAACG,MAAM,CAACC,aAAa,CAACC,cAAc,CAAC,CAAC;EAC7C,CAAC;EAEDS,UAAU,EAAE,SAAAA,WAASd,KAAK,EAAE;IAC1B,IAAI,IAAI,CAACe,wBAAwB,CAACf,KAAK,EAAE,wBAAwB,CAAC,EAAE;MAClE;IACF;;IAEA;IACA,IAAI,CAACgB,uBAAuB,CAAChB,KAAK,CAAC;EACrC;AAEF,CAAC;;AAED;AACA,OAAO,IAAMiB,mBAAmB,GAAG,CAACtB,gBAAgB,EAAEC,uBAAuB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}