{"ast":null,"code":"/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { html } from 'lit';\nimport { Progress } from './progress.js';\n/**\n * A circular progress component.\n */\nexport class CircularProgress extends Progress {\n  renderIndicator() {\n    if (this.indeterminate) {\n      return this.renderIndeterminateContainer();\n    }\n    return this.renderDeterminateContainer();\n  }\n  // Determinate mode is rendered with an svg so the progress arc can be\n  // easily animated via stroke-dashoffset.\n  renderDeterminateContainer() {\n    const dashOffset = (1 - this.value / this.max) * 100;\n    // note, dash-array/offset are relative to Setting `pathLength` but\n    // Chrome seems to render this inaccurately and using a large viewbox helps.\n    return html`\n      <svg viewBox=\"0 0 4800 4800\">\n        <circle class=\"track\" pathLength=\"100\"></circle>\n        <circle\n          class=\"active-track\"\n          pathLength=\"100\"\n          stroke-dashoffset=${dashOffset}></circle>\n      </svg>\n    `;\n  }\n  // Indeterminate mode rendered with 2 bordered-divs. The borders are\n  // clipped into half circles by their containers. The divs are then carefully\n  // animated to produce changes to the spinner arc size.\n  // This approach has 4.5x the FPS of rendering via svg on Chrome 111.\n  // See https://lit.dev/playground/#gist=febb773565272f75408ab06a0eb49746.\n  renderIndeterminateContainer() {\n    return html` <div class=\"spinner\">\n      <div class=\"left\">\n        <div class=\"circle\"></div>\n      </div>\n      <div class=\"right\">\n        <div class=\"circle\"></div>\n      </div>\n    </div>`;\n  }\n}","map":{"version":3,"names":["html","Progress","CircularProgress","renderIndicator","indeterminate","renderIndeterminateContainer","renderDeterminateContainer","dashOffset","value","max"],"sources":["circular-progress.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2023 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\nimport {html} from 'lit';\n\nimport {Progress} from './progress.js';\n\n/**\n * A circular progress component.\n */\nexport class CircularProgress extends Progress {\n  protected override renderIndicator() {\n    if (this.indeterminate) {\n      return this.renderIndeterminateContainer();\n    }\n\n    return this.renderDeterminateContainer();\n  }\n\n  // Determinate mode is rendered with an svg so the progress arc can be\n  // easily animated via stroke-dashoffset.\n  private renderDeterminateContainer() {\n    const dashOffset = (1 - this.value / this.max) * 100;\n    // note, dash-array/offset are relative to Setting `pathLength` but\n    // Chrome seems to render this inaccurately and using a large viewbox helps.\n    return html`\n      <svg viewBox=\"0 0 4800 4800\">\n        <circle class=\"track\" pathLength=\"100\"></circle>\n        <circle\n          class=\"active-track\"\n          pathLength=\"100\"\n          stroke-dashoffset=${dashOffset}></circle>\n      </svg>\n    `;\n  }\n\n  // Indeterminate mode rendered with 2 bordered-divs. The borders are\n  // clipped into half circles by their containers. The divs are then carefully\n  // animated to produce changes to the spinner arc size.\n  // This approach has 4.5x the FPS of rendering via svg on Chrome 111.\n  // See https://lit.dev/playground/#gist=febb773565272f75408ab06a0eb49746.\n  private renderIndeterminateContainer() {\n    return html` <div class=\"spinner\">\n      <div class=\"left\">\n        <div class=\"circle\"></div>\n      </div>\n      <div class=\"right\">\n        <div class=\"circle\"></div>\n      </div>\n    </div>`;\n  }\n}\n"],"mappings":"AAAA;;;;;AAMA,SAAQA,IAAI,QAAO,KAAK;AAExB,SAAQC,QAAQ,QAAO,eAAe;AAEtC;;;AAGA,OAAM,MAAOC,gBAAiB,SAAQD,QAAQ;EACzBE,eAAeA,CAAA;IAChC,IAAI,IAAI,CAACC,aAAa,EAAE;MACtB,OAAO,IAAI,CAACC,4BAA4B,EAAE;;IAG5C,OAAO,IAAI,CAACC,0BAA0B,EAAE;EAC1C;EAEA;EACA;EACQA,0BAA0BA,CAAA;IAChC,MAAMC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAACC,KAAK,GAAG,IAAI,CAACC,GAAG,IAAI,GAAG;IACpD;IACA;IACA,OAAOT,IAAI;;;;;;8BAMeO,UAAU;;KAEnC;EACH;EAEA;EACA;EACA;EACA;EACA;EACQF,4BAA4BA,CAAA;IAClC,OAAOL,IAAI;;;;;;;WAOJ;EACT"},"metadata":{},"sourceType":"module","externalDependencies":[]}