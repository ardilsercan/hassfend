{"ast":null,"code":"import { navigate } from \"../common/navigate\";\nimport { subscribeDeviceRegistry } from \"./device_registry\";\nexport let NetworkType = /*#__PURE__*/function (NetworkType) {\n  NetworkType[\"THREAD\"] = \"thread\";\n  NetworkType[\"WIFI\"] = \"wifi\";\n  NetworkType[\"ETHERNET\"] = \"ethernet\";\n  NetworkType[\"UNKNOWN\"] = \"unknown\";\n  return NetworkType;\n}({});\nexport let NodeType = /*#__PURE__*/function (NodeType) {\n  NodeType[\"END_DEVICE\"] = \"end_device\";\n  NodeType[\"SLEEPY_END_DEVICE\"] = \"sleepy_end_device\";\n  NodeType[\"ROUTING_END_DEVICE\"] = \"routing_end_device\";\n  NodeType[\"BRIDGE\"] = \"bridge\";\n  NodeType[\"UNKNOWN\"] = \"unknown\";\n  return NodeType;\n}({});\nexport const canCommissionMatterExternal = hass => {\n  var _hass$auth$external;\n  return (_hass$auth$external = hass.auth.external) === null || _hass$auth$external === void 0 ? void 0 : _hass$auth$external.config.canCommissionMatter;\n};\nexport const startExternalCommissioning = hass => hass.auth.external.fireMessage({\n  type: \"matter/commission\"\n});\nexport const redirectOnNewMatterDevice = (hass, callback) => {\n  let curMatterDevices;\n  const unsubDeviceReg = subscribeDeviceRegistry(hass.connection, entries => {\n    if (!curMatterDevices) {\n      curMatterDevices = new Set(Object.values(entries).filter(device => device.identifiers.find(identifier => identifier[0] === \"matter\")).map(device => device.id));\n      return;\n    }\n    const newMatterDevices = Object.values(entries).filter(device => device.identifiers.find(identifier => identifier[0] === \"matter\") && !curMatterDevices.has(device.id));\n    if (newMatterDevices.length) {\n      unsubDeviceReg();\n      curMatterDevices = undefined;\n      callback === null || callback === void 0 || callback();\n      navigate(`/config/devices/device/${newMatterDevices[0].id}`);\n    }\n  });\n  return () => {\n    unsubDeviceReg();\n    curMatterDevices = undefined;\n  };\n};\nexport const addMatterDevice = hass => {\n  startExternalCommissioning(hass);\n};\nexport const commissionMatterDevice = (hass, code) => hass.callWS({\n  type: \"matter/commission\",\n  code\n});\nexport const acceptSharedMatterDevice = (hass, pin) => hass.callWS({\n  type: \"matter/commission_on_network\",\n  pin\n});\nexport const matterSetWifi = (hass, network_name, password) => hass.callWS({\n  type: \"matter/set_wifi_credentials\",\n  network_name,\n  password\n});\nexport const matterSetThread = (hass, thread_operation_dataset) => hass.callWS({\n  type: \"matter/set_thread\",\n  thread_operation_dataset\n});\nexport const getMatterNodeDiagnostics = (hass, device_id) => hass.callWS({\n  type: \"matter/node_diagnostics\",\n  device_id\n});\nexport const pingMatterNode = (hass, device_id) => hass.callWS({\n  type: \"matter/ping_node\",\n  device_id\n});\nexport const openMatterCommissioningWindow = (hass, device_id) => hass.callWS({\n  type: \"matter/open_commissioning_window\",\n  device_id\n});\nexport const removeMatterFabric = (hass, device_id, fabric_index) => hass.callWS({\n  type: \"matter/remove_matter_fabric\",\n  device_id,\n  fabric_index\n});\nexport const interviewMatterNode = (hass, device_id) => hass.callWS({\n  type: \"matter/interview_node\",\n  device_id\n});","map":{"version":3,"names":["navigate","subscribeDeviceRegistry","NetworkType","NodeType","canCommissionMatterExternal","hass","_hass$auth$external","auth","external","config","canCommissionMatter","startExternalCommissioning","fireMessage","type","redirectOnNewMatterDevice","callback","curMatterDevices","unsubDeviceReg","connection","entries","Set","Object","values","filter","device","identifiers","find","identifier","map","id","newMatterDevices","has","length","undefined","addMatterDevice","commissionMatterDevice","code","callWS","acceptSharedMatterDevice","pin","matterSetWifi","network_name","password","matterSetThread","thread_operation_dataset","getMatterNodeDiagnostics","device_id","pingMatterNode","openMatterCommissioningWindow","removeMatterFabric","fabric_index","interviewMatterNode"],"sources":["/workspaces/frontend/src/data/matter.ts"],"sourcesContent":["import { UnsubscribeFunc } from \"home-assistant-js-websocket\";\nimport { navigate } from \"../common/navigate\";\nimport { HomeAssistant } from \"../types\";\nimport { subscribeDeviceRegistry } from \"./device_registry\";\n\nexport enum NetworkType {\n  THREAD = \"thread\",\n  WIFI = \"wifi\",\n  ETHERNET = \"ethernet\",\n  UNKNOWN = \"unknown\",\n}\n\nexport enum NodeType {\n  END_DEVICE = \"end_device\",\n  SLEEPY_END_DEVICE = \"sleepy_end_device\",\n  ROUTING_END_DEVICE = \"routing_end_device\",\n  BRIDGE = \"bridge\",\n  UNKNOWN = \"unknown\",\n}\n\nexport interface MatterFabricData {\n  fabric_id: number;\n  vendor_id: number;\n  fabric_index: number;\n  fabric_label?: string;\n  vendor_name?: string;\n}\n\nexport interface MatterNodeDiagnostics {\n  node_id: number;\n  network_type: NetworkType;\n  node_type: NodeType;\n  network_name?: string;\n  ip_adresses: string[];\n  mac_address?: string;\n  available: boolean;\n  active_fabrics: MatterFabricData[];\n}\n\nexport interface MatterPingResult {\n  [ip_address: string]: boolean;\n}\n\nexport interface MatterCommissioningParameters {\n  setup_pin_code: number;\n  setup_manual_code: string;\n  setup_qr_code: string;\n}\n\nexport const canCommissionMatterExternal = (hass: HomeAssistant) =>\n  hass.auth.external?.config.canCommissionMatter;\n\nexport const startExternalCommissioning = (hass: HomeAssistant) =>\n  hass.auth.external!.fireMessage({\n    type: \"matter/commission\",\n  });\n\nexport const redirectOnNewMatterDevice = (\n  hass: HomeAssistant,\n  callback?: () => void\n): UnsubscribeFunc => {\n  let curMatterDevices: Set<string> | undefined;\n  const unsubDeviceReg = subscribeDeviceRegistry(hass.connection, (entries) => {\n    if (!curMatterDevices) {\n      curMatterDevices = new Set(\n        Object.values(entries)\n          .filter((device) =>\n            device.identifiers.find((identifier) => identifier[0] === \"matter\")\n          )\n          .map((device) => device.id)\n      );\n      return;\n    }\n    const newMatterDevices = Object.values(entries).filter(\n      (device) =>\n        device.identifiers.find((identifier) => identifier[0] === \"matter\") &&\n        !curMatterDevices!.has(device.id)\n    );\n    if (newMatterDevices.length) {\n      unsubDeviceReg();\n      curMatterDevices = undefined;\n      callback?.();\n      navigate(`/config/devices/device/${newMatterDevices[0].id}`);\n    }\n  });\n  return () => {\n    unsubDeviceReg();\n    curMatterDevices = undefined;\n  };\n};\n\nexport const addMatterDevice = (hass: HomeAssistant) => {\n  startExternalCommissioning(hass);\n};\n\nexport const commissionMatterDevice = (\n  hass: HomeAssistant,\n  code: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/commission\",\n    code,\n  });\n\nexport const acceptSharedMatterDevice = (\n  hass: HomeAssistant,\n  pin: number\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/commission_on_network\",\n    pin,\n  });\n\nexport const matterSetWifi = (\n  hass: HomeAssistant,\n  network_name: string,\n  password: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/set_wifi_credentials\",\n    network_name,\n    password,\n  });\n\nexport const matterSetThread = (\n  hass: HomeAssistant,\n  thread_operation_dataset: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/set_thread\",\n    thread_operation_dataset,\n  });\n\nexport const getMatterNodeDiagnostics = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterNodeDiagnostics> =>\n  hass.callWS({\n    type: \"matter/node_diagnostics\",\n    device_id,\n  });\n\nexport const pingMatterNode = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterPingResult> =>\n  hass.callWS({\n    type: \"matter/ping_node\",\n    device_id,\n  });\n\nexport const openMatterCommissioningWindow = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<MatterCommissioningParameters> =>\n  hass.callWS({\n    type: \"matter/open_commissioning_window\",\n    device_id,\n  });\n\nexport const removeMatterFabric = (\n  hass: HomeAssistant,\n  device_id: string,\n  fabric_index: number\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/remove_matter_fabric\",\n    device_id,\n    fabric_index,\n  });\n\nexport const interviewMatterNode = (\n  hass: HomeAssistant,\n  device_id: string\n): Promise<void> =>\n  hass.callWS({\n    type: \"matter/interview_node\",\n    device_id,\n  });\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}