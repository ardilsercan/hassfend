{"ast":null,"code":"/**\n * Call a function with result caching per entity.\n * @param cacheKey key to store the cache on hass object\n * @param cacheTime time to cache the results\n * @param func function to fetch the data\n * @param hass Indexline Technology object\n * @param entityId entity to fetch data for\n * @param args extra arguments to pass to the function to fetch the data\n * @returns\n */\nexport const timeCacheEntityPromiseFunc = async (cacheKey, cacheTime, func, hass, entityId, ...args) => {\n  let cache = hass[cacheKey];\n  if (!cache) {\n    cache = hass[cacheKey] = {};\n  }\n  const lastResult = cache[entityId];\n  if (lastResult) {\n    return lastResult;\n  }\n  const result = func(hass, entityId, ...args);\n  cache[entityId] = result;\n  result.then(\n  // When successful, set timer to clear cache\n  () => setTimeout(() => {\n    cache[entityId] = undefined;\n  }, cacheTime),\n  // On failure, clear cache right away\n  () => {\n    cache[entityId] = undefined;\n  });\n  return result;\n};","map":{"version":3,"names":["timeCacheEntityPromiseFunc","cacheKey","cacheTime","func","hass","entityId","args","cache","lastResult","result","then","setTimeout","undefined"],"sources":["/workspaces/frontend/src/common/util/time-cache-entity-promise-func.ts"],"sourcesContent":["import { HomeAssistant } from \"../../types\";\n\ninterface ResultCache<T> {\n  [entityId: string]: Promise<T> | undefined;\n}\n\n/**\n * Call a function with result caching per entity.\n * @param cacheKey key to store the cache on hass object\n * @param cacheTime time to cache the results\n * @param func function to fetch the data\n * @param hass Indexline Technology object\n * @param entityId entity to fetch data for\n * @param args extra arguments to pass to the function to fetch the data\n * @returns\n */\nexport const timeCacheEntityPromiseFunc = async <T>(\n  cacheKey: string,\n  cacheTime: number,\n  func: (hass: HomeAssistant, entityId: string, ...args: any[]) => Promise<T>,\n  hass: HomeAssistant,\n  entityId: string,\n  ...args: any[]\n): Promise<T> => {\n  let cache: ResultCache<T> | undefined = (hass as any)[cacheKey];\n\n  if (!cache) {\n    cache = hass[cacheKey] = {};\n  }\n\n  const lastResult = cache[entityId];\n\n  if (lastResult) {\n    return lastResult;\n  }\n\n  const result = func(hass, entityId, ...args);\n  cache[entityId] = result;\n\n  result.then(\n    // When successful, set timer to clear cache\n    () =>\n      setTimeout(() => {\n        cache![entityId] = undefined;\n      }, cacheTime),\n    // On failure, clear cache right away\n    () => {\n      cache![entityId] = undefined;\n    }\n  );\n\n  return result;\n};\n"],"mappings":"AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,0BAA0B,GAAG,MAAAA,CACxCC,QAAgB,EAChBC,SAAiB,EACjBC,IAA2E,EAC3EC,IAAmB,EACnBC,QAAgB,EAChB,GAAGC,IAAW,KACC;EACf,IAAIC,KAAiC,GAAIH,IAAI,CAASH,QAAQ,CAAC;EAE/D,IAAI,CAACM,KAAK,EAAE;IACVA,KAAK,GAAGH,IAAI,CAACH,QAAQ,CAAC,GAAG,CAAC,CAAC;EAC7B;EAEA,MAAMO,UAAU,GAAGD,KAAK,CAACF,QAAQ,CAAC;EAElC,IAAIG,UAAU,EAAE;IACd,OAAOA,UAAU;EACnB;EAEA,MAAMC,MAAM,GAAGN,IAAI,CAACC,IAAI,EAAEC,QAAQ,EAAE,GAAGC,IAAI,CAAC;EAC5CC,KAAK,CAACF,QAAQ,CAAC,GAAGI,MAAM;EAExBA,MAAM,CAACC,IAAI;EACT;EACA,MACEC,UAAU,CAAC,MAAM;IACfJ,KAAK,CAAEF,QAAQ,CAAC,GAAGO,SAAS;EAC9B,CAAC,EAAEV,SAAS,CAAC;EACf;EACA,MAAM;IACJK,KAAK,CAAEF,QAAQ,CAAC,GAAGO,SAAS;EAC9B,CACF,CAAC;EAED,OAAOH,MAAM;AACf,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}