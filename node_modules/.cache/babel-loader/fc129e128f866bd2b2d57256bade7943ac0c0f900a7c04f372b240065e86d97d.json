{"ast":null,"code":"import { format, startOfToday, startOfTomorrow } from \"date-fns/esm\";\nexport const mockEnergy = hass => {\n  hass.mockWS(\"energy/get_prefs\", () => ({\n    energy_sources: [{\n      type: \"grid\",\n      flow_from: [{\n        stat_energy_from: \"sensor.energy_consumption_tarif_1\",\n        stat_cost: \"sensor.energy_consumption_tarif_1_cost\",\n        entity_energy_price: null,\n        number_energy_price: null\n      }, {\n        stat_energy_from: \"sensor.energy_consumption_tarif_2\",\n        stat_cost: \"sensor.energy_consumption_tarif_2_cost\",\n        entity_energy_price: null,\n        number_energy_price: null\n      }],\n      flow_to: [{\n        stat_energy_to: \"sensor.energy_production_tarif_1\",\n        stat_compensation: \"sensor.energy_production_tarif_1_compensation\",\n        entity_energy_price: null,\n        number_energy_price: null\n      }, {\n        stat_energy_to: \"sensor.energy_production_tarif_2\",\n        stat_compensation: \"sensor.energy_production_tarif_2_compensation\",\n        entity_energy_price: null,\n        number_energy_price: null\n      }],\n      cost_adjustment_day: 0\n    }, {\n      type: \"solar\",\n      stat_energy_from: \"sensor.solar_production\",\n      config_entry_solar_forecast: [\"solar_forecast\"]\n    },\n    /*         {\n      type: \"battery\",\n      stat_energy_from: \"sensor.battery_output\",\n      stat_energy_to: \"sensor.battery_input\",\n    }, */\n    {\n      type: \"gas\",\n      stat_energy_from: \"sensor.energy_gas\",\n      stat_cost: \"sensor.energy_gas_cost\",\n      entity_energy_price: null,\n      number_energy_price: null\n    }],\n    device_consumption: [{\n      stat_consumption: \"sensor.energy_car\"\n    }, {\n      stat_consumption: \"sensor.energy_ac\"\n    }, {\n      stat_consumption: \"sensor.energy_washing_machine\"\n    }, {\n      stat_consumption: \"sensor.energy_dryer\"\n    }, {\n      stat_consumption: \"sensor.energy_heat_pump\"\n    }, {\n      stat_consumption: \"sensor.energy_boiler\"\n    }]\n  }));\n  hass.mockWS(\"energy/info\", () => ({\n    cost_sensors: {},\n    solar_forecast_domains: []\n  }));\n  hass.mockWS(\"energy/fossil_energy_consumption\", ({\n    period\n  }) => ({\n    start: period === \"month\" ? 250 : period === \"day\" ? 10 : 2\n  }));\n  const todayString = format(startOfToday(), \"yyyy-MM-dd\");\n  const tomorrowString = format(startOfTomorrow(), \"yyyy-MM-dd\");\n  hass.mockWS(\"energy/solar_forecast\", () => ({\n    solar_forecast: {\n      wh_hours: {\n        [`${todayString}T06:00:00`]: 0,\n        [`${todayString}T06:23:00`]: 6,\n        [`${todayString}T06:45:00`]: 39,\n        [`${todayString}T07:00:00`]: 28,\n        [`${todayString}T08:00:00`]: 208,\n        [`${todayString}T09:00:00`]: 352,\n        [`${todayString}T10:00:00`]: 544,\n        [`${todayString}T11:00:00`]: 748,\n        [`${todayString}T12:00:00`]: 1259,\n        [`${todayString}T13:00:00`]: 1361,\n        [`${todayString}T14:00:00`]: 1373,\n        [`${todayString}T15:00:00`]: 1370,\n        [`${todayString}T16:00:00`]: 1186,\n        [`${todayString}T17:00:00`]: 937,\n        [`${todayString}T18:00:00`]: 652,\n        [`${todayString}T19:00:00`]: 370,\n        [`${todayString}T20:00:00`]: 155,\n        [`${todayString}T21:48:00`]: 24,\n        [`${todayString}T22:36:00`]: 0,\n        [`${tomorrowString}T06:01:00`]: 0,\n        [`${tomorrowString}T06:23:00`]: 9,\n        [`${tomorrowString}T06:45:00`]: 47,\n        [`${tomorrowString}T07:00:00`]: 48,\n        [`${tomorrowString}T08:00:00`]: 473,\n        [`${tomorrowString}T09:00:00`]: 827,\n        [`${tomorrowString}T10:00:00`]: 1153,\n        [`${tomorrowString}T11:00:00`]: 1413,\n        [`${tomorrowString}T12:00:00`]: 1590,\n        [`${tomorrowString}T13:00:00`]: 1652,\n        [`${tomorrowString}T14:00:00`]: 1612,\n        [`${tomorrowString}T15:00:00`]: 1438,\n        [`${tomorrowString}T16:00:00`]: 1149,\n        [`${tomorrowString}T17:00:00`]: 830,\n        [`${tomorrowString}T18:00:00`]: 542,\n        [`${tomorrowString}T19:00:00`]: 311,\n        [`${tomorrowString}T20:00:00`]: 140,\n        [`${tomorrowString}T21:47:00`]: 22,\n        [`${tomorrowString}T22:34:00`]: 0\n      }\n    }\n  }));\n};","map":{"version":3,"names":["format","startOfToday","startOfTomorrow","mockEnergy","hass","mockWS","energy_sources","type","flow_from","stat_energy_from","stat_cost","entity_energy_price","number_energy_price","flow_to","stat_energy_to","stat_compensation","cost_adjustment_day","config_entry_solar_forecast","device_consumption","stat_consumption","cost_sensors","solar_forecast_domains","period","start","todayString","tomorrowString","solar_forecast","wh_hours"],"sources":["/Users/sercanardil/Desktop/frontend/demo/src/stubs/energy.ts"],"sourcesContent":["import { format, startOfToday, startOfTomorrow } from \"date-fns/esm\";\nimport {\n  EnergyInfo,\n  EnergyPreferences,\n  EnergySolarForecasts,\n  FossilEnergyConsumption,\n} from \"../../../src/data/energy\";\nimport { MockHomeAssistant } from \"../../../src/fake_data/provide_hass\";\n\nexport const mockEnergy = (hass: MockHomeAssistant) => {\n  hass.mockWS(\n    \"energy/get_prefs\",\n    (): EnergyPreferences => ({\n      energy_sources: [\n        {\n          type: \"grid\",\n          flow_from: [\n            {\n              stat_energy_from: \"sensor.energy_consumption_tarif_1\",\n              stat_cost: \"sensor.energy_consumption_tarif_1_cost\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n            {\n              stat_energy_from: \"sensor.energy_consumption_tarif_2\",\n              stat_cost: \"sensor.energy_consumption_tarif_2_cost\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n          ],\n          flow_to: [\n            {\n              stat_energy_to: \"sensor.energy_production_tarif_1\",\n              stat_compensation:\n                \"sensor.energy_production_tarif_1_compensation\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n            {\n              stat_energy_to: \"sensor.energy_production_tarif_2\",\n              stat_compensation:\n                \"sensor.energy_production_tarif_2_compensation\",\n              entity_energy_price: null,\n              number_energy_price: null,\n            },\n          ],\n          cost_adjustment_day: 0,\n        },\n        {\n          type: \"solar\",\n          stat_energy_from: \"sensor.solar_production\",\n          config_entry_solar_forecast: [\"solar_forecast\"],\n        },\n        /*         {\n          type: \"battery\",\n          stat_energy_from: \"sensor.battery_output\",\n          stat_energy_to: \"sensor.battery_input\",\n        }, */\n        {\n          type: \"gas\",\n          stat_energy_from: \"sensor.energy_gas\",\n          stat_cost: \"sensor.energy_gas_cost\",\n          entity_energy_price: null,\n          number_energy_price: null,\n        },\n      ],\n      device_consumption: [\n        {\n          stat_consumption: \"sensor.energy_car\",\n        },\n        {\n          stat_consumption: \"sensor.energy_ac\",\n        },\n        {\n          stat_consumption: \"sensor.energy_washing_machine\",\n        },\n        {\n          stat_consumption: \"sensor.energy_dryer\",\n        },\n        {\n          stat_consumption: \"sensor.energy_heat_pump\",\n        },\n        {\n          stat_consumption: \"sensor.energy_boiler\",\n        },\n      ],\n    })\n  );\n  hass.mockWS(\n    \"energy/info\",\n    (): EnergyInfo => ({ cost_sensors: {}, solar_forecast_domains: [] })\n  );\n  hass.mockWS(\n    \"energy/fossil_energy_consumption\",\n    ({ period }): FossilEnergyConsumption => ({\n      start: period === \"month\" ? 250 : period === \"day\" ? 10 : 2,\n    })\n  );\n  const todayString = format(startOfToday(), \"yyyy-MM-dd\");\n  const tomorrowString = format(startOfTomorrow(), \"yyyy-MM-dd\");\n  hass.mockWS(\n    \"energy/solar_forecast\",\n    (): EnergySolarForecasts => ({\n      solar_forecast: {\n        wh_hours: {\n          [`${todayString}T06:00:00`]: 0,\n          [`${todayString}T06:23:00`]: 6,\n          [`${todayString}T06:45:00`]: 39,\n          [`${todayString}T07:00:00`]: 28,\n          [`${todayString}T08:00:00`]: 208,\n          [`${todayString}T09:00:00`]: 352,\n          [`${todayString}T10:00:00`]: 544,\n          [`${todayString}T11:00:00`]: 748,\n          [`${todayString}T12:00:00`]: 1259,\n          [`${todayString}T13:00:00`]: 1361,\n          [`${todayString}T14:00:00`]: 1373,\n          [`${todayString}T15:00:00`]: 1370,\n          [`${todayString}T16:00:00`]: 1186,\n          [`${todayString}T17:00:00`]: 937,\n          [`${todayString}T18:00:00`]: 652,\n          [`${todayString}T19:00:00`]: 370,\n          [`${todayString}T20:00:00`]: 155,\n          [`${todayString}T21:48:00`]: 24,\n          [`${todayString}T22:36:00`]: 0,\n          [`${tomorrowString}T06:01:00`]: 0,\n          [`${tomorrowString}T06:23:00`]: 9,\n          [`${tomorrowString}T06:45:00`]: 47,\n          [`${tomorrowString}T07:00:00`]: 48,\n          [`${tomorrowString}T08:00:00`]: 473,\n          [`${tomorrowString}T09:00:00`]: 827,\n          [`${tomorrowString}T10:00:00`]: 1153,\n          [`${tomorrowString}T11:00:00`]: 1413,\n          [`${tomorrowString}T12:00:00`]: 1590,\n          [`${tomorrowString}T13:00:00`]: 1652,\n          [`${tomorrowString}T14:00:00`]: 1612,\n          [`${tomorrowString}T15:00:00`]: 1438,\n          [`${tomorrowString}T16:00:00`]: 1149,\n          [`${tomorrowString}T17:00:00`]: 830,\n          [`${tomorrowString}T18:00:00`]: 542,\n          [`${tomorrowString}T19:00:00`]: 311,\n          [`${tomorrowString}T20:00:00`]: 140,\n          [`${tomorrowString}T21:47:00`]: 22,\n          [`${tomorrowString}T22:34:00`]: 0,\n        },\n      },\n    })\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}