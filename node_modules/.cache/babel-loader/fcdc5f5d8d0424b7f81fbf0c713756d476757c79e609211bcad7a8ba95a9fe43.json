{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/helpers/regeneratorRuntime\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _callSuper from \"@babel/runtime/helpers/callSuper\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { computeFormatFunctions } from \"../common/translations/entity-state\";\nexport default (function (superClass) {\n  var StateDisplayMixin = /*#__PURE__*/function (_superClass) {\n    _inherits(StateDisplayMixin, _superClass);\n    function StateDisplayMixin() {\n      var _this;\n      _classCallCheck(this, StateDisplayMixin);\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      _this = _callSuper(this, StateDisplayMixin, [].concat(args));\n      _this._updateStateDisplay = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$computeFormatF, formatEntityState, formatEntityAttributeName, formatEntityAttributeValue;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (_this.hass) {\n                _context.next = 2;\n                break;\n              }\n              return _context.abrupt(\"return\");\n            case 2:\n              _context.next = 4;\n              return computeFormatFunctions(_this.hass.localize, _this.hass.locale, _this.hass.config, _this.hass.entities);\n            case 4:\n              _yield$computeFormatF = _context.sent;\n              formatEntityState = _yield$computeFormatF.formatEntityState;\n              formatEntityAttributeName = _yield$computeFormatF.formatEntityAttributeName;\n              formatEntityAttributeValue = _yield$computeFormatF.formatEntityAttributeValue;\n              _this._updateHass({\n                formatEntityState: formatEntityState,\n                formatEntityAttributeName: formatEntityAttributeName,\n                formatEntityAttributeValue: formatEntityAttributeValue\n              });\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n      return _this;\n    }\n    _createClass(StateDisplayMixin, [{\n      key: \"hassConnected\",\n      value: function hassConnected() {\n        _get(_getPrototypeOf(StateDisplayMixin.prototype), \"hassConnected\", this).call(this);\n        this._updateStateDisplay();\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(StateDisplayMixin.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (!changedProps.has(\"hass\")) {\n          return;\n        }\n        var oldHass = changedProps.get(\"hass\");\n        if (this.hass && (!oldHass || this.hass.localize !== oldHass.localize || this.hass.locale !== oldHass.locale || this.hass.config !== oldHass.config || this.hass.entities !== oldHass.entities)) {\n          this._updateStateDisplay();\n        }\n      }\n    }]);\n    return StateDisplayMixin;\n  }(superClass);\n  return StateDisplayMixin;\n});","map":{"version":3,"names":["computeFormatFunctions","superClass","StateDisplayMixin","_superClass","_inherits","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","_updateStateDisplay","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_yield$computeFormatF","formatEntityState","formatEntityAttributeName","formatEntityAttributeValue","wrap","_callee$","_context","prev","next","hass","abrupt","localize","locale","config","entities","sent","_updateHass","stop","_createClass","key","value","hassConnected","_get","_getPrototypeOf","prototype","call","willUpdate","changedProps","has","oldHass","get"],"sources":["/workspaces/frontend/src/state/state-display-mixin.ts"],"sourcesContent":["import { computeFormatFunctions } from \"../common/translations/entity-state\";\nimport { Constructor, HomeAssistant } from \"../types\";\nimport { HassBaseEl } from \"./hass-base-mixin\";\n\nexport default <T extends Constructor<HassBaseEl>>(superClass: T) => {\n  class StateDisplayMixin extends superClass {\n    protected hassConnected() {\n      super.hassConnected();\n      this._updateStateDisplay();\n    }\n\n    protected willUpdate(changedProps) {\n      super.willUpdate(changedProps);\n\n      if (!changedProps.has(\"hass\")) {\n        return;\n      }\n      const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n\n      if (\n        this.hass &&\n        (!oldHass ||\n          this.hass.localize !== oldHass.localize ||\n          this.hass.locale !== oldHass.locale ||\n          this.hass.config !== oldHass.config ||\n          this.hass.entities !== oldHass.entities)\n      ) {\n        this._updateStateDisplay();\n      }\n    }\n\n    private _updateStateDisplay = async () => {\n      if (!this.hass) return;\n      const {\n        formatEntityState,\n        formatEntityAttributeName,\n        formatEntityAttributeValue,\n      } = await computeFormatFunctions(\n        this.hass.localize,\n        this.hass.locale,\n        this.hass.config,\n        this.hass.entities\n      );\n      this._updateHass({\n        formatEntityState,\n        formatEntityAttributeName,\n        formatEntityAttributeValue,\n      });\n    };\n  }\n  return StateDisplayMixin;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}