{"ast":null,"code":"import _createForOfIteratorHelper from \"@babel/runtime/helpers/createForOfIteratorHelper\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.object.entries.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.string.repeat.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport { ensureArray } from \"../common/array/ensure-array\";\nimport { formatDuration } from \"../common/datetime/format_duration\";\nimport secondsToDuration from \"../common/datetime/seconds_to_duration\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { formatListWithAnds } from \"../common/string/format-list\";\nimport { isTemplate } from \"../common/string/has-template\";\nimport { describeCondition } from \"./automation_i18n\";\nimport { localizeDeviceAutomationAction } from \"./device_automation\";\nimport { computeDeviceName } from \"./device_registry\";\nimport { computeEntityRegistryName, entityRegistryById } from \"./entity_registry\";\nimport { domainToName } from \"./integration\";\nimport { getActionType } from \"./script\";\nvar actionTranslationBaseKey = \"ui.panel.config.automation.editor.actions.type\";\nexport var describeAction = function describeAction(hass, entityRegistry, action, actionType) {\n  var ignoreAlias = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  try {\n    return tryDescribeAction(hass, entityRegistry, action, actionType, ignoreAlias);\n  } catch (error) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    var msg = \"Error in describing action\";\n    if (error.message) {\n      msg += \": \" + error.message;\n    }\n    return msg;\n  }\n};\nvar tryDescribeAction = function tryDescribeAction(hass, entityRegistry, action, actionType) {\n  var ignoreAlias = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  if (action.alias && !ignoreAlias) {\n    return action.alias;\n  }\n  if (!actionType) {\n    actionType = getActionType(action);\n  }\n  if (actionType === \"service\") {\n    var config = action;\n    var targets = [];\n    if (config.target) {\n      for (var _i = 0, _Object$entries = Object.entries({\n          area_id: \"areas\",\n          device_id: \"devices\",\n          entity_id: \"entities\"\n        }); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          label = _Object$entries$_i[1];\n        if (!(key in config.target)) {\n          continue;\n        }\n        var keyConf = Array.isArray(config.target[key]) ? config.target[key] : [config.target[key]];\n        var _iterator = _createForOfIteratorHelper(keyConf),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var targetThing = _step.value;\n            if (isTemplate(targetThing)) {\n              targets.push(hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.target_template\"), {\n                name: label\n              }));\n              break;\n            } else if (key === \"entity_id\") {\n              if (targetThing.includes(\".\")) {\n                var state = hass.states[targetThing];\n                if (state) {\n                  targets.push(computeStateName(state));\n                } else {\n                  targets.push(targetThing);\n                }\n              } else {\n                var entityReg = entityRegistryById(entityRegistry)[targetThing];\n                if (entityReg) {\n                  targets.push(computeEntityRegistryName(hass, entityReg) || targetThing);\n                } else {\n                  targets.push(hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.target_unknown_entity\")));\n                }\n              }\n            } else if (key === \"device_id\") {\n              var device = hass.devices[targetThing];\n              if (device) {\n                targets.push(computeDeviceName(device, hass));\n              } else {\n                targets.push(hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.target_unknown_device\")));\n              }\n            } else if (key === \"area_id\") {\n              var area = hass.areas[targetThing];\n              if (area !== null && area !== void 0 && area.name) {\n                targets.push(area.name);\n              } else {\n                targets.push(hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.target_unknown_area\")));\n              }\n            } else {\n              targets.push(targetThing);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n    }\n    if (config.service_template || config.service && isTemplate(config.service)) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.service_based_on_template\"), {\n        targets: formatListWithAnds(hass.locale, targets)\n      });\n    }\n    if (config.service) {\n      var _hass$services$domain;\n      var _config$service$split = config.service.split(\".\", 2),\n        _config$service$split2 = _slicedToArray(_config$service$split, 2),\n        domain = _config$service$split2[0],\n        serviceName = _config$service$split2[1];\n      var service = hass.localize(\"component.\".concat(domain, \".services.\").concat(serviceName, \".name\")) || ((_hass$services$domain = hass.services[domain][serviceName]) === null || _hass$services$domain === void 0 ? void 0 : _hass$services$domain.name);\n      if (config.metadata) {\n        return hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.service_name\"), {\n          domain: domainToName(hass.localize, domain),\n          name: service || config.service,\n          targets: formatListWithAnds(hass.locale, targets)\n        });\n      }\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.service_based_on_name\"), {\n        name: service ? \"\".concat(domainToName(hass.localize, domain), \": \").concat(service) : config.service,\n        targets: formatListWithAnds(hass.locale, targets)\n      });\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".service.description.service\"));\n  }\n  if (actionType === \"delay\") {\n    var _config = action;\n    var duration;\n    if (typeof _config.delay === \"number\") {\n      duration = hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_string\"), {\n        string: secondsToDuration(_config.delay)\n      });\n    } else if (typeof _config.delay === \"string\") {\n      duration = isTemplate(_config.delay) ? hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_template\")) : hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_string\"), {\n        string: _config.delay || hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_unknown\"))\n      });\n    } else if (_config.delay) {\n      duration = hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_string\"), {\n        string: formatDuration(hass.locale, _config.delay)\n      });\n    } else {\n      duration = hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_string\"), {\n        string: hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.duration_unknown\"))\n      });\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".delay.description.full\"), {\n      duration: duration\n    });\n  }\n  if (actionType === \"activate_scene\") {\n    var _config2 = action;\n    var entityId;\n    if (\"scene\" in _config2) {\n      entityId = _config2.scene;\n    } else {\n      var _config2$target;\n      entityId = ((_config2$target = _config2.target) === null || _config2$target === void 0 ? void 0 : _config2$target.entity_id) || _config2.entity_id;\n    }\n    if (!entityId) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".activate_scene.description.activate_scene\"));\n    }\n    var sceneStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".activate_scene.description.activate_scene_with_name\"), {\n      name: sceneStateObj ? computeStateName(sceneStateObj) : entityId\n    });\n  }\n  if (actionType === \"play_media\") {\n    var _config3$target;\n    var _config3 = action;\n    var _entityId = ((_config3$target = _config3.target) === null || _config3$target === void 0 ? void 0 : _config3$target.entity_id) || _config3.entity_id;\n    var mediaStateObj = _entityId ? hass.states[_entityId] : undefined;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".play_media.description.full\"), {\n      hasMedia: _config3.metadata.title || _config3.data.media_content_id ? \"true\" : \"false\",\n      media: _config3.metadata.title || _config3.data.media_content_id,\n      hasMediaPlayer: mediaStateObj || _entityId !== undefined ? \"true\" : \"false\",\n      mediaPlayer: mediaStateObj ? computeStateName(mediaStateObj) : _entityId\n    });\n  }\n  if (actionType === \"wait_for_trigger\") {\n    var _config4 = action;\n    var triggers = ensureArray(_config4.wait_for_trigger);\n    if (!triggers || triggers.length === 0) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".wait_for_trigger.description.wait_for_a_trigger\"));\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".wait_for_trigger.description.wait_for_triggers\"), {\n      count: triggers.length\n    });\n  }\n  if (actionType === \"variables\") {\n    var _config5 = action;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".variables.description.full\"), {\n      names: formatListWithAnds(hass.locale, Object.keys(_config5.variables))\n    });\n  }\n  if (actionType === \"fire_event\") {\n    var _config6 = action;\n    if (isTemplate(_config6.event)) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".event.description.full\"), {\n        name: hass.localize(\"\".concat(actionTranslationBaseKey, \".event.description.template\"))\n      });\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".event.description.full\"), {\n      name: _config6.event\n    });\n  }\n  if (actionType === \"wait_template\") {\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".wait_template.description.full\"));\n  }\n  if (actionType === \"stop\") {\n    var _config7 = action;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".stop.description.full\"), {\n      hasReason: _config7.stop !== undefined ? \"true\" : \"false\",\n      reason: _config7.stop\n    });\n  }\n  if (actionType === \"if\") {\n    var _config8 = action;\n    if (_config8.else !== undefined) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".if.description.if_else\"));\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".if.description.if\"));\n  }\n  if (actionType === \"choose\") {\n    var _config9 = action;\n    if (_config9.choose) {\n      var numActions = ensureArray(_config9.choose).length + (_config9.default ? 1 : 0);\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".choose.description.full\"), {\n        number: numActions\n      });\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".choose.description.no_action\"));\n  }\n  if (actionType === \"repeat\") {\n    var _config10 = action;\n    var chosenAction = \"\";\n    if (\"count\" in _config10.repeat) {\n      var count = _config10.repeat.count;\n      chosenAction = hass.localize(\"\".concat(actionTranslationBaseKey, \".repeat.description.count\"), {\n        count: count\n      });\n    } else if (\"while\" in _config10.repeat) {\n      var conditions = ensureArray(_config10.repeat.while);\n      chosenAction = hass.localize(\"\".concat(actionTranslationBaseKey, \".repeat.description.while_count\"), {\n        count: conditions.length\n      });\n    } else if (\"until\" in _config10.repeat) {\n      var _conditions = ensureArray(_config10.repeat.until);\n      chosenAction = hass.localize(\"\".concat(actionTranslationBaseKey, \".repeat.description.until_count\"), {\n        count: _conditions.length\n      });\n    } else if (\"for_each\" in _config10.repeat) {\n      var items = ensureArray(_config10.repeat.for_each).map(function (item) {\n        return JSON.stringify(item);\n      });\n      chosenAction = hass.localize(\"\".concat(actionTranslationBaseKey, \".repeat.description.for_each\"), {\n        items: formatListWithAnds(hass.locale, items)\n      });\n    }\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".repeat.description.full\"), {\n      chosenAction: chosenAction\n    });\n  }\n  if (actionType === \"check_condition\") {\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".check_condition.description.full\"), {\n      condition: describeCondition(action, hass, entityRegistry)\n    });\n  }\n  if (actionType === \"device_action\") {\n    var _config11 = action;\n    if (!_config11.device_id) {\n      return hass.localize(\"\".concat(actionTranslationBaseKey, \".device_id.description.no_device\"));\n    }\n    var localized = localizeDeviceAutomationAction(hass, entityRegistry, _config11);\n    if (localized) {\n      return localized;\n    }\n    var stateObj = hass.states[_config11.entity_id];\n    return \"\".concat(_config11.type || \"Perform action with\", \" \").concat(stateObj ? computeStateName(stateObj) : _config11.entity_id);\n  }\n  if (actionType === \"parallel\") {\n    var _config12 = action;\n    var _numActions = ensureArray(_config12.parallel).length;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".parallel.description.full\"), {\n      number: _numActions\n    });\n  }\n  if (actionType === \"set_conversation_response\") {\n    var _config13 = action;\n    return hass.localize(\"\".concat(actionTranslationBaseKey, \".set_conversation_response.description.full\"), {\n      response: _config13.set_conversation_response\n    });\n  }\n  return actionType;\n};","map":{"version":3,"names":["ensureArray","formatDuration","secondsToDuration","computeStateName","formatListWithAnds","isTemplate","describeCondition","localizeDeviceAutomationAction","computeDeviceName","computeEntityRegistryName","entityRegistryById","domainToName","getActionType","actionTranslationBaseKey","describeAction","hass","entityRegistry","action","actionType","ignoreAlias","arguments","length","undefined","tryDescribeAction","error","console","msg","message","alias","config","targets","target","_i","_Object$entries","Object","entries","area_id","device_id","entity_id","_Object$entries$_i","_slicedToArray","key","label","keyConf","Array","isArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","targetThing","value","push","localize","concat","name","includes","state","states","entityReg","device","devices","area","areas","err","e","f","service_template","service","locale","_hass$services$domain","_config$service$split","split","_config$service$split2","domain","serviceName","services","metadata","duration","delay","string","entityId","scene","_config2$target","sceneStateObj","_config3$target","mediaStateObj","hasMedia","title","data","media_content_id","media","hasMediaPlayer","mediaPlayer","triggers","wait_for_trigger","count","names","keys","variables","event","hasReason","stop","reason","else","choose","numActions","default","number","chosenAction","repeat","conditions","while","until","items","for_each","map","item","JSON","stringify","condition","localized","stateObj","type","parallel","response","set_conversation_response"],"sources":["/workspaces/frontend/src/data/script_i18n.ts"],"sourcesContent":["import { ensureArray } from \"../common/array/ensure-array\";\nimport { formatDuration } from \"../common/datetime/format_duration\";\nimport secondsToDuration from \"../common/datetime/seconds_to_duration\";\nimport { computeStateName } from \"../common/entity/compute_state_name\";\nimport { formatListWithAnds } from \"../common/string/format-list\";\nimport { isTemplate } from \"../common/string/has-template\";\nimport { HomeAssistant } from \"../types\";\nimport { Condition } from \"./automation\";\nimport { describeCondition } from \"./automation_i18n\";\nimport { localizeDeviceAutomationAction } from \"./device_automation\";\nimport { computeDeviceName } from \"./device_registry\";\nimport {\n  EntityRegistryEntry,\n  computeEntityRegistryName,\n  entityRegistryById,\n} from \"./entity_registry\";\nimport { domainToName } from \"./integration\";\nimport {\n  ActionType,\n  ActionTypes,\n  ChooseAction,\n  DelayAction,\n  DeviceAction,\n  EventAction,\n  IfAction,\n  ParallelAction,\n  PlayMediaAction,\n  RepeatAction,\n  SceneAction,\n  SetConversationResponseAction,\n  StopAction,\n  VariablesAction,\n  WaitForTriggerAction,\n  getActionType,\n} from \"./script\";\n\nconst actionTranslationBaseKey =\n  \"ui.panel.config.automation.editor.actions.type\";\n\nexport const describeAction = <T extends ActionType>(\n  hass: HomeAssistant,\n  entityRegistry: EntityRegistryEntry[],\n  action: ActionTypes[T],\n  actionType?: T,\n  ignoreAlias = false\n): string => {\n  try {\n    return tryDescribeAction(\n      hass,\n      entityRegistry,\n      action,\n      actionType,\n      ignoreAlias\n    );\n  } catch (error: any) {\n    // eslint-disable-next-line no-console\n    console.error(error);\n    let msg = \"Error in describing action\";\n    if (error.message) {\n      msg += \": \" + error.message;\n    }\n    return msg;\n  }\n};\n\nconst tryDescribeAction = <T extends ActionType>(\n  hass: HomeAssistant,\n  entityRegistry: EntityRegistryEntry[],\n  action: ActionTypes[T],\n  actionType?: T,\n  ignoreAlias = false\n): string => {\n  if (action.alias && !ignoreAlias) {\n    return action.alias;\n  }\n  if (!actionType) {\n    actionType = getActionType(action) as T;\n  }\n\n  if (actionType === \"service\") {\n    const config = action as ActionTypes[\"service\"];\n\n    const targets: string[] = [];\n    if (config.target) {\n      for (const [key, label] of Object.entries({\n        area_id: \"areas\",\n        device_id: \"devices\",\n        entity_id: \"entities\",\n      })) {\n        if (!(key in config.target)) {\n          continue;\n        }\n        const keyConf: string[] = Array.isArray(config.target[key])\n          ? config.target[key]\n          : [config.target[key]];\n\n        for (const targetThing of keyConf) {\n          if (isTemplate(targetThing)) {\n            targets.push(\n              hass.localize(\n                `${actionTranslationBaseKey}.service.description.target_template`,\n                { name: label }\n              )\n            );\n            break;\n          } else if (key === \"entity_id\") {\n            if (targetThing.includes(\".\")) {\n              const state = hass.states[targetThing];\n              if (state) {\n                targets.push(computeStateName(state));\n              } else {\n                targets.push(targetThing);\n              }\n            } else {\n              const entityReg = entityRegistryById(entityRegistry)[targetThing];\n              if (entityReg) {\n                targets.push(\n                  computeEntityRegistryName(hass, entityReg) || targetThing\n                );\n              } else {\n                targets.push(\n                  hass.localize(\n                    `${actionTranslationBaseKey}.service.description.target_unknown_entity`\n                  )\n                );\n              }\n            }\n          } else if (key === \"device_id\") {\n            const device = hass.devices[targetThing];\n            if (device) {\n              targets.push(computeDeviceName(device, hass));\n            } else {\n              targets.push(\n                hass.localize(\n                  `${actionTranslationBaseKey}.service.description.target_unknown_device`\n                )\n              );\n            }\n          } else if (key === \"area_id\") {\n            const area = hass.areas[targetThing];\n            if (area?.name) {\n              targets.push(area.name);\n            } else {\n              targets.push(\n                hass.localize(\n                  `${actionTranslationBaseKey}.service.description.target_unknown_area`\n                )\n              );\n            }\n          } else {\n            targets.push(targetThing);\n          }\n        }\n      }\n    }\n\n    if (\n      config.service_template ||\n      (config.service && isTemplate(config.service))\n    ) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.service.description.service_based_on_template`,\n        { targets: formatListWithAnds(hass.locale, targets) }\n      );\n    }\n\n    if (config.service) {\n      const [domain, serviceName] = config.service.split(\".\", 2);\n      const service =\n        hass.localize(`component.${domain}.services.${serviceName}.name`) ||\n        hass.services[domain][serviceName]?.name;\n\n      if (config.metadata) {\n        return hass.localize(\n          `${actionTranslationBaseKey}.service.description.service_name`,\n          {\n            domain: domainToName(hass.localize, domain),\n            name: service || config.service,\n            targets: formatListWithAnds(hass.locale, targets),\n          }\n        );\n      }\n\n      return hass.localize(\n        `${actionTranslationBaseKey}.service.description.service_based_on_name`,\n        {\n          name: service\n            ? `${domainToName(hass.localize, domain)}: ${service}`\n            : config.service,\n          targets: formatListWithAnds(hass.locale, targets),\n        }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.service.description.service`\n    );\n  }\n\n  if (actionType === \"delay\") {\n    const config = action as DelayAction;\n\n    let duration: string;\n    if (typeof config.delay === \"number\") {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: secondsToDuration(config.delay)!,\n        }\n      );\n    } else if (typeof config.delay === \"string\") {\n      duration = isTemplate(config.delay)\n        ? hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_template`\n          )\n        : hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_string`,\n            {\n              string:\n                config.delay ||\n                hass.localize(\n                  `${actionTranslationBaseKey}.delay.description.duration_unknown`\n                ),\n            }\n          );\n    } else if (config.delay) {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: formatDuration(hass.locale, config.delay),\n        }\n      );\n    } else {\n      duration = hass.localize(\n        `${actionTranslationBaseKey}.delay.description.duration_string`,\n        {\n          string: hass.localize(\n            `${actionTranslationBaseKey}.delay.description.duration_unknown`\n          ),\n        }\n      );\n    }\n\n    return hass.localize(`${actionTranslationBaseKey}.delay.description.full`, {\n      duration: duration,\n    });\n  }\n\n  if (actionType === \"activate_scene\") {\n    const config = action as SceneAction;\n    let entityId: string | undefined;\n    if (\"scene\" in config) {\n      entityId = config.scene;\n    } else {\n      entityId = config.target?.entity_id || config.entity_id;\n    }\n    if (!entityId) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.activate_scene.description.activate_scene`\n      );\n    }\n    const sceneStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(\n      `${actionTranslationBaseKey}.activate_scene.description.activate_scene_with_name`,\n      { name: sceneStateObj ? computeStateName(sceneStateObj) : entityId }\n    );\n  }\n\n  if (actionType === \"play_media\") {\n    const config = action as PlayMediaAction;\n    const entityId = config.target?.entity_id || config.entity_id;\n    const mediaStateObj = entityId ? hass.states[entityId] : undefined;\n    return hass.localize(\n      `${actionTranslationBaseKey}.play_media.description.full`,\n      {\n        hasMedia:\n          config.metadata.title || config.data.media_content_id\n            ? \"true\"\n            : \"false\",\n        media:\n          (config.metadata.title as string | undefined) ||\n          config.data.media_content_id,\n        hasMediaPlayer:\n          mediaStateObj || entityId !== undefined ? \"true\" : \"false\",\n        mediaPlayer: mediaStateObj ? computeStateName(mediaStateObj) : entityId,\n      }\n    );\n  }\n\n  if (actionType === \"wait_for_trigger\") {\n    const config = action as WaitForTriggerAction;\n    const triggers = ensureArray(config.wait_for_trigger);\n    if (!triggers || triggers.length === 0) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_a_trigger`\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.wait_for_trigger.description.wait_for_triggers`,\n      { count: triggers.length }\n    );\n  }\n\n  if (actionType === \"variables\") {\n    const config = action as VariablesAction;\n    return hass.localize(\n      `${actionTranslationBaseKey}.variables.description.full`,\n      {\n        names: formatListWithAnds(hass.locale, Object.keys(config.variables)),\n      }\n    );\n  }\n\n  if (actionType === \"fire_event\") {\n    const config = action as EventAction;\n    if (isTemplate(config.event)) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.event.description.full`,\n        {\n          name: hass.localize(\n            `${actionTranslationBaseKey}.event.description.template`\n          ),\n        }\n      );\n    }\n    return hass.localize(`${actionTranslationBaseKey}.event.description.full`, {\n      name: config.event,\n    });\n  }\n\n  if (actionType === \"wait_template\") {\n    return hass.localize(\n      `${actionTranslationBaseKey}.wait_template.description.full`\n    );\n  }\n\n  if (actionType === \"stop\") {\n    const config = action as StopAction;\n    return hass.localize(`${actionTranslationBaseKey}.stop.description.full`, {\n      hasReason: config.stop !== undefined ? \"true\" : \"false\",\n      reason: config.stop,\n    });\n  }\n\n  if (actionType === \"if\") {\n    const config = action as IfAction;\n\n    if (config.else !== undefined) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.if.description.if_else`\n      );\n    }\n\n    return hass.localize(`${actionTranslationBaseKey}.if.description.if`);\n  }\n\n  if (actionType === \"choose\") {\n    const config = action as ChooseAction;\n    if (config.choose) {\n      const numActions =\n        ensureArray(config.choose).length + (config.default ? 1 : 0);\n      return hass.localize(\n        `${actionTranslationBaseKey}.choose.description.full`,\n        { number: numActions }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.choose.description.no_action`\n    );\n  }\n\n  if (actionType === \"repeat\") {\n    const config = action as RepeatAction;\n\n    let chosenAction = \"\";\n    if (\"count\" in config.repeat) {\n      const count = config.repeat.count;\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.count`,\n        { count: count }\n      );\n    } else if (\"while\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.while);\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.while_count`,\n        { count: conditions.length }\n      );\n    } else if (\"until\" in config.repeat) {\n      const conditions = ensureArray(config.repeat.until);\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.until_count`,\n        { count: conditions.length }\n      );\n    } else if (\"for_each\" in config.repeat) {\n      const items = ensureArray(config.repeat.for_each).map((item) =>\n        JSON.stringify(item)\n      );\n      chosenAction = hass.localize(\n        `${actionTranslationBaseKey}.repeat.description.for_each`,\n        { items: formatListWithAnds(hass.locale, items) }\n      );\n    }\n    return hass.localize(\n      `${actionTranslationBaseKey}.repeat.description.full`,\n      { chosenAction: chosenAction }\n    );\n  }\n\n  if (actionType === \"check_condition\") {\n    return hass.localize(\n      `${actionTranslationBaseKey}.check_condition.description.full`,\n      {\n        condition: describeCondition(action as Condition, hass, entityRegistry),\n      }\n    );\n  }\n\n  if (actionType === \"device_action\") {\n    const config = action as DeviceAction;\n    if (!config.device_id) {\n      return hass.localize(\n        `${actionTranslationBaseKey}.device_id.description.no_device`\n      );\n    }\n    const localized = localizeDeviceAutomationAction(\n      hass,\n      entityRegistry,\n      config\n    );\n    if (localized) {\n      return localized;\n    }\n    const stateObj = hass.states[config.entity_id];\n    return `${config.type || \"Perform action with\"} ${\n      stateObj ? computeStateName(stateObj) : config.entity_id\n    }`;\n  }\n\n  if (actionType === \"parallel\") {\n    const config = action as ParallelAction;\n    const numActions = ensureArray(config.parallel).length;\n    return hass.localize(\n      `${actionTranslationBaseKey}.parallel.description.full`,\n      { number: numActions }\n    );\n  }\n\n  if (actionType === \"set_conversation_response\") {\n    const config = action as SetConversationResponseAction;\n    return hass.localize(\n      `${actionTranslationBaseKey}.set_conversation_response.description.full`,\n      { response: config.set_conversation_response }\n    );\n  }\n\n  return actionType;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}