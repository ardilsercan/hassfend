{"ast":null,"code":"import _decorate from \"@babel/runtime/helpers/decorate\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport { css, html, LitElement, nothing } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials } from \"../../data/user\";\nlet UserBadge = _decorate([customElement(\"ha-user-badge\")], function (_initialize, _LitElement) {\n  class UserBadge extends _LitElement {\n    constructor(...args) {\n      super(...args);\n      _initialize(this);\n    }\n  }\n  return {\n    F: UserBadge,\n    d: [{\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"hass\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [property({\n        attribute: false\n      })],\n      key: \"user\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      decorators: [state()],\n      key: \"_personPicture\",\n      value: void 0\n    }, {\n      kind: \"field\",\n      key: \"_personEntityId\",\n      value: void 0\n    }, {\n      kind: \"method\",\n      key: \"willUpdate\",\n      value: function willUpdate(changedProps) {\n        _get(_getPrototypeOf(UserBadge.prototype), \"willUpdate\", this).call(this, changedProps);\n        if (changedProps.has(\"user\")) {\n          this._getPersonPicture();\n          return;\n        }\n        const oldHass = changedProps.get(\"hass\");\n        if (this._personEntityId && oldHass && this.hass.states[this._personEntityId] !== oldHass.states[this._personEntityId]) {\n          const entityState = this.hass.states[this._personEntityId];\n          if (entityState) {\n            this._personPicture = entityState.attributes.entity_picture;\n          } else {\n            this._getPersonPicture();\n          }\n        } else if (!this._personEntityId && oldHass) {\n          this._getPersonPicture();\n        }\n      }\n    }, {\n      kind: \"method\",\n      key: \"render\",\n      value: function render() {\n        if (!this.hass || !this.user) {\n          return nothing;\n        }\n        const picture = this._personPicture;\n        if (picture) {\n          return html`<div\n        style=${styleMap({\n            backgroundImage: `url(${picture})`\n          })}\n        class=\"picture\"\n      ></div>`;\n        }\n        const initials = computeUserInitials(this.user.name);\n        return html`<div\n      class=\"initials ${classMap({\n          long: initials.length > 2\n        })}\"\n    >\n      ${initials}\n    </div>`;\n      }\n    }, {\n      kind: \"method\",\n      key: \"_getPersonPicture\",\n      value: function _getPersonPicture() {\n        this._personEntityId = undefined;\n        this._personPicture = undefined;\n        if (!this.hass || !this.user) {\n          return;\n        }\n        for (const entity of Object.values(this.hass.states)) {\n          if (entity.attributes.user_id === this.user.id && computeStateDomain(entity) === \"person\") {\n            this._personEntityId = entity.entity_id;\n            this._personPicture = entity.attributes.entity_picture;\n            break;\n          }\n        }\n      }\n    }, {\n      kind: \"get\",\n      static: true,\n      key: \"styles\",\n      value: function styles() {\n        return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n      }\n    }]\n  };\n}, LitElement);","map":{"version":3,"names":["css","html","LitElement","nothing","customElement","property","state","classMap","styleMap","computeStateDomain","computeUserInitials","UserBadge","_decorate","_initialize","_LitElement","constructor","args","F","d","kind","decorators","attribute","key","value","willUpdate","changedProps","_get","_getPrototypeOf","prototype","call","has","_getPersonPicture","oldHass","get","_personEntityId","hass","states","entityState","_personPicture","attributes","entity_picture","render","user","picture","backgroundImage","initials","name","long","length","undefined","entity","Object","values","user_id","id","entity_id","static","styles"],"sources":["/workspaces/frontend/src/components/user/ha-user-badge.ts"],"sourcesContent":["import {\n  css,\n  CSSResultGroup,\n  html,\n  LitElement,\n  PropertyValues,\n  nothing,\n} from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { classMap } from \"lit/directives/class-map\";\nimport { styleMap } from \"lit/directives/style-map\";\nimport { computeStateDomain } from \"../../common/entity/compute_state_domain\";\nimport { computeUserInitials, User } from \"../../data/user\";\nimport { CurrentUser, HomeAssistant } from \"../../types\";\n\n@customElement(\"ha-user-badge\")\nclass UserBadge extends LitElement {\n  @property({ attribute: false }) public hass!: HomeAssistant;\n\n  @property({ attribute: false }) public user?: User | CurrentUser;\n\n  @state() private _personPicture?: string;\n\n  private _personEntityId?: string;\n\n  public willUpdate(changedProps: PropertyValues<this>) {\n    super.willUpdate(changedProps);\n    if (changedProps.has(\"user\")) {\n      this._getPersonPicture();\n      return;\n    }\n    const oldHass = changedProps.get(\"hass\") as HomeAssistant | undefined;\n    if (\n      this._personEntityId &&\n      oldHass &&\n      this.hass.states[this._personEntityId] !==\n        oldHass.states[this._personEntityId]\n    ) {\n      const entityState = this.hass.states[this._personEntityId];\n      if (entityState) {\n        this._personPicture = entityState.attributes.entity_picture;\n      } else {\n        this._getPersonPicture();\n      }\n    } else if (!this._personEntityId && oldHass) {\n      this._getPersonPicture();\n    }\n  }\n\n  protected render() {\n    if (!this.hass || !this.user) {\n      return nothing;\n    }\n    const picture = this._personPicture;\n\n    if (picture) {\n      return html`<div\n        style=${styleMap({ backgroundImage: `url(${picture})` })}\n        class=\"picture\"\n      ></div>`;\n    }\n    const initials = computeUserInitials(this.user.name);\n    return html`<div\n      class=\"initials ${classMap({ long: initials!.length > 2 })}\"\n    >\n      ${initials}\n    </div>`;\n  }\n\n  private _getPersonPicture() {\n    this._personEntityId = undefined;\n    this._personPicture = undefined;\n    if (!this.hass || !this.user) {\n      return;\n    }\n    for (const entity of Object.values(this.hass.states)) {\n      if (\n        entity.attributes.user_id === this.user.id &&\n        computeStateDomain(entity) === \"person\"\n      ) {\n        this._personEntityId = entity.entity_id;\n        this._personPicture = entity.attributes.entity_picture;\n        break;\n      }\n    }\n  }\n\n  static get styles(): CSSResultGroup {\n    return css`\n      :host {\n        display: contents;\n      }\n      .picture {\n        width: 40px;\n        height: 40px;\n        background-size: cover;\n        border-radius: 50%;\n      }\n      .initials {\n        display: inline-block;\n        box-sizing: border-box;\n        width: 40px;\n        line-height: 40px;\n        border-radius: 50%;\n        text-align: center;\n        background-color: var(--light-primary-color);\n        text-decoration: none;\n        color: var(--text-light-primary-color, var(--primary-text-color));\n        overflow: hidden;\n      }\n      .initials.long {\n        font-size: 80%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-user-badge\": UserBadge;\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}