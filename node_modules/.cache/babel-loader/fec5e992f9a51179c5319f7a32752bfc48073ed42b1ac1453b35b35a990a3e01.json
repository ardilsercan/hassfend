{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.global-this.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\n/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a;\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\nimport { decorateProperty } from './base.js';\nvar NODE_MODE = false;\nvar global = NODE_MODE ? globalThis : window;\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nvar slotAssignedElements = ((_a = global.HTMLSlotElement) === null || _a === void 0 ? void 0 : _a.prototype.assignedElements) != null ? function (slot, opts) {\n  return slot.assignedElements(opts);\n} : function (slot, opts) {\n  return slot.assignedNodes(opts).filter(function (node) {\n    return node.nodeType === Node.ELEMENT_NODE;\n  });\n};\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options) {\n  var _ref = options !== null && options !== void 0 ? options : {},\n    slot = _ref.slot,\n    selector = _ref.selector;\n  return decorateProperty({\n    descriptor: function descriptor(_name) {\n      return {\n        get: function get() {\n          var _a;\n          var slotSelector = \"slot\".concat(slot ? \"[name=\".concat(slot, \"]\") : ':not([name])');\n          var slotEl = (_a = this.renderRoot) === null || _a === void 0 ? void 0 : _a.querySelector(slotSelector);\n          var elements = slotEl != null ? slotAssignedElements(slotEl, options) : [];\n          if (selector) {\n            return elements.filter(function (node) {\n              return node.matches(selector);\n            });\n          }\n          return elements;\n        },\n        enumerable: true,\n        configurable: true\n      };\n    }\n  });\n}","map":{"version":3,"names":["decorateProperty","NODE_MODE","global","globalThis","window","slotAssignedElements","_a","HTMLSlotElement","prototype","assignedElements","slot","opts","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","queryAssignedElements","options","_ref","selector","descriptor","_name","get","slotSelector","concat","slotEl","renderRoot","querySelector","elements","matches","enumerable","configurable"],"sources":["../../src/decorators/query-assigned-elements.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/*\n * IMPORTANT: For compatibility with tsickle and the Closure JS compiler, all\n * property decorators (but not class decorators) in this file that have\n * an @ExportDecoratedItems annotation must be defined as a regular function,\n * not an arrow function.\n */\n\nimport {decorateProperty} from './base.js';\n\nimport type {ReactiveElement} from '../reactive-element.js';\nimport type {QueryAssignedNodesOptions} from './query-assigned-nodes.js';\n\nconst NODE_MODE = false;\nconst global = NODE_MODE ? globalThis : window;\n\n/**\n * A tiny module scoped polyfill for HTMLSlotElement.assignedElements.\n */\nconst slotAssignedElements =\n  global.HTMLSlotElement?.prototype.assignedElements != null\n    ? (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot.assignedElements(opts)\n    : (slot: HTMLSlotElement, opts?: AssignedNodesOptions) =>\n        slot\n          .assignedNodes(opts)\n          .filter(\n            (node): node is Element => node.nodeType === Node.ELEMENT_NODE\n          );\n\n/**\n * Options for the {@linkcode queryAssignedElements} decorator. Extends the\n * options that can be passed into\n * [HTMLSlotElement.assignedElements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n */\nexport interface QueryAssignedElementsOptions\n  extends QueryAssignedNodesOptions {\n  /**\n   * CSS selector used to filter the elements returned. For example, a selector\n   * of `\".item\"` will only include elements with the `item` class.\n   */\n  selector?: string;\n}\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedElements` of the given `slot`. Provides a declarative\n * way to use\n * [`HTMLSlotElement.assignedElements`](https://developer.mozilla.org/en-US/docs/Web/API/HTMLSlotElement/assignedElements).\n *\n * Can be passed an optional {@linkcode QueryAssignedElementsOptions} object.\n *\n * Example usage:\n * ```ts\n * class MyElement {\n *   @queryAssignedElements({ slot: 'list' })\n *   listItems!: Array<HTMLElement>;\n *   @queryAssignedElements()\n *   unnamedSlotEls!: Array<HTMLElement>;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *       <slot></slot>\n *     `;\n *   }\n * }\n * ```\n *\n * Note, the type of this property should be annotated as `Array<HTMLElement>`.\n *\n * @category Decorator\n */\nexport function queryAssignedElements(options?: QueryAssignedElementsOptions) {\n  const {slot, selector} = options ?? {};\n  return decorateProperty({\n    descriptor: (_name: PropertyKey) => ({\n      get(this: ReactiveElement) {\n        const slotSelector = `slot${slot ? `[name=${slot}]` : ':not([name])'}`;\n        const slotEl =\n          this.renderRoot?.querySelector<HTMLSlotElement>(slotSelector);\n        const elements =\n          slotEl != null ? slotAssignedElements(slotEl, options) : [];\n        if (selector) {\n          return elements.filter((node) => node.matches(selector));\n        }\n        return elements;\n      },\n      enumerable: true,\n      configurable: true,\n    }),\n  });\n}\n"],"mappings":";;;;;AAAA;;;;;;AAMA;;;;;;AAOA,SAAQA,gBAAgB,QAAO,WAAW;AAK1C,IAAMC,SAAS,GAAG,KAAK;AACvB,IAAMC,MAAM,GAAGD,SAAS,GAAGE,UAAU,GAAGC,MAAM;AAE9C;;;AAGA,IAAMC,oBAAoB,GACxB,EAAAC,EAAA,GAAAJ,MAAM,CAACK,eAAe,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,SAAS,CAACC,gBAAgB,KAAI,IAAI,GACtD,UAACC,IAAqB,EAAEC,IAA2B;EAAA,OACjDD,IAAI,CAACD,gBAAgB,CAACE,IAAI,CAAC;AAAA,IAC7B,UAACD,IAAqB,EAAEC,IAA2B;EAAA,OACjDD,IAAI,CACDE,aAAa,CAACD,IAAI,CAAC,CACnBE,MAAM,CACL,UAACC,IAAI;IAAA,OAAsBA,IAAI,CAACC,QAAQ,KAAKC,IAAI,CAACC,YAAY;EAAA,EAC/D;AAAA;AAgBX;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,qBAAqBA,CAACC,OAAsC;EAC1E,IAAAC,IAAA,GAAyBD,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAA/BT,IAAI,GAAAU,IAAA,CAAJV,IAAI;IAAEW,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACrB,OAAOrB,gBAAgB,CAAC;IACtBsB,UAAU,EAAE,SAAAA,WAACC,KAAkB;MAAA,OAAM;QACnCC,GAAG,WAAAA,IAAA;;UACD,IAAMC,YAAY,UAAAC,MAAA,CAAUhB,IAAI,YAAAgB,MAAA,CAAYhB,IAAI,SAAM,cAAc,CAAE;UACtE,IAAMiB,MAAM,GACV,CAAArB,EAAA,OAAI,CAACsB,UAAU,cAAAtB,EAAA,uBAAAA,EAAA,CAAEuB,aAAa,CAAkBJ,YAAY,CAAC;UAC/D,IAAMK,QAAQ,GACZH,MAAM,IAAI,IAAI,GAAGtB,oBAAoB,CAACsB,MAAM,EAAER,OAAO,CAAC,GAAG,EAAE;UAC7D,IAAIE,QAAQ,EAAE;YACZ,OAAOS,QAAQ,CAACjB,MAAM,CAAC,UAACC,IAAI;cAAA,OAAKA,IAAI,CAACiB,OAAO,CAACV,QAAQ,CAAC;YAAA,EAAC;;UAE1D,OAAOS,QAAQ;QACjB,CAAC;QACDE,UAAU,EAAE,IAAI;QAChBC,YAAY,EAAE;OACf;IAAA;GACF,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}