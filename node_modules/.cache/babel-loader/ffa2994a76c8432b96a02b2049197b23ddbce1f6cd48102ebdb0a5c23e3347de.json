{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { addDays, addHours, addMonths, differenceInHours, endOfDay } from \"date-fns\";\nvar generateMeanStatistics = function generateMeanStatistics(start, end) {\n  var period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hour\";\n  var initValue = arguments.length > 3 ? arguments[3] : undefined;\n  var maxDiff = arguments.length > 4 ? arguments[4] : undefined;\n  var statistics = [];\n  var currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  var lastVal = initValue;\n  var now = new Date();\n  while (end > currentDate && currentDate < now) {\n    var delta = Math.random() * maxDiff;\n    var mean = lastVal + delta;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: mean,\n      min: mean - Math.random() * maxDiff,\n      max: mean + Math.random() * maxDiff,\n      last_reset: 0,\n      state: mean,\n      sum: null\n    });\n    lastVal = mean;\n    currentDate = period === \"day\" ? addDays(currentDate, 1) : period === \"month\" ? addMonths(currentDate, 1) : addHours(currentDate, 1);\n  }\n  return statistics;\n};\nvar generateSumStatistics = function generateSumStatistics(start, end) {\n  var period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hour\";\n  var initValue = arguments.length > 3 ? arguments[3] : undefined;\n  var maxDiff = arguments.length > 4 ? arguments[4] : undefined;\n  var statistics = [];\n  var currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  var sum = initValue;\n  var now = new Date();\n  while (end > currentDate && currentDate < now) {\n    var add = Math.random() * maxDiff;\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum: sum\n    });\n    currentDate = period === \"day\" ? addDays(currentDate, 1) : period === \"month\" ? addMonths(currentDate, 1) : addHours(currentDate, 1);\n  }\n  return statistics;\n};\nvar generateCurvedStatistics = function generateCurvedStatistics(start, end) {\n  var _period = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"hour\";\n  var initValue = arguments.length > 3 ? arguments[3] : undefined;\n  var maxDiff = arguments.length > 4 ? arguments[4] : undefined;\n  var metered = arguments.length > 5 ? arguments[5] : undefined;\n  var statistics = [];\n  var currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  var sum = initValue;\n  var hours = differenceInHours(end, start) - 1;\n  var i = 0;\n  var half = false;\n  var now = new Date();\n  while (end > currentDate && currentDate < now) {\n    var add = i * (Math.random() * maxDiff);\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum: metered ? sum : null\n    });\n    currentDate = addHours(currentDate, 1);\n    if (!half && i > hours / 2) {\n      half = true;\n    }\n    i += half ? -1 : 1;\n  }\n  return statistics;\n};\nvar statisticsFunctions = {\n  \"sensor.energy_consumption_tarif_1\": function sensorEnergy_consumption_tarif_1(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    var morningEnd = new Date(start.getTime() + 10 * 60 * 60 * 1000);\n    var morningLow = generateSumStatistics(start, morningEnd, period, 0, 0.7);\n    var eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    var morningFinalVal = morningLow.length ? morningLow[morningLow.length - 1].sum : 0;\n    var empty = generateSumStatistics(morningEnd, eveningStart, period, morningFinalVal, 0);\n    var eveningLow = generateSumStatistics(eveningStart, end, period, morningFinalVal, 0.7);\n    return [].concat(_toConsumableArray(morningLow), _toConsumableArray(empty), _toConsumableArray(eveningLow));\n  },\n  \"sensor.energy_consumption_tarif_2\": function sensorEnergy_consumption_tarif_2(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    var morningEnd = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    var eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    var highTarif = generateSumStatistics(morningEnd, eveningStart, period, 0, 0.3);\n    var highTarifFinalVal = highTarif.length ? highTarif[highTarif.length - 1].sum : 0;\n    var morning = generateSumStatistics(start, morningEnd, period, 0, 0);\n    var evening = generateSumStatistics(eveningStart, end, period, highTarifFinalVal, 0);\n    return [].concat(_toConsumableArray(morning), _toConsumableArray(highTarif), _toConsumableArray(evening));\n  },\n  \"sensor.energy_production_tarif_1\": function sensorEnergy_production_tarif_1(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    return generateSumStatistics(start, end, period, 0, 0);\n  },\n  \"sensor.energy_production_tarif_1_compensation\": function sensorEnergy_production_tarif_1_compensation(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    return generateSumStatistics(start, end, period, 0, 0);\n  },\n  \"sensor.energy_production_tarif_2\": function sensorEnergy_production_tarif_2(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    var productionStart = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    var productionEnd = new Date(start.getTime() + 21 * 60 * 60 * 1000);\n    var dayEnd = new Date(endOfDay(productionEnd));\n    var production = generateCurvedStatistics(productionStart, productionEnd, period, 0, 0.15, true);\n    var productionFinalVal = production.length ? production[production.length - 1].sum : 0;\n    var morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    var evening = generateSumStatistics(productionEnd, dayEnd, period, productionFinalVal, 0);\n    var rest = generateSumStatistics(dayEnd, end, period, productionFinalVal, 1);\n    return [].concat(_toConsumableArray(morning), _toConsumableArray(production), _toConsumableArray(evening), _toConsumableArray(rest));\n  },\n  \"sensor.solar_production\": function sensorSolar_production(_id, start, end) {\n    var period = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"hour\";\n    if (period !== \"hour\") {\n      return generateSumStatistics(start, end, period, 0, period === \"day\" ? 17 : 504);\n    }\n    var productionStart = new Date(start.getTime() + 7 * 60 * 60 * 1000);\n    var productionEnd = new Date(start.getTime() + 23 * 60 * 60 * 1000);\n    var dayEnd = new Date(endOfDay(productionEnd));\n    var production = generateCurvedStatistics(productionStart, productionEnd, period, 0, 0.3, true);\n    var productionFinalVal = production.length ? production[production.length - 1].sum : 0;\n    var morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    var evening = generateSumStatistics(productionEnd, dayEnd, period, productionFinalVal, 0);\n    var rest = generateSumStatistics(dayEnd, end, period, productionFinalVal, 2);\n    return [].concat(_toConsumableArray(morning), _toConsumableArray(production), _toConsumableArray(evening), _toConsumableArray(rest));\n  }\n};\nexport var mockRecorder = function mockRecorder(mockHass) {\n  mockHass.mockWS(\"recorder/get_statistics_metadata\", function () {\n    return [];\n  });\n  mockHass.mockWS(\"recorder/list_statistic_ids\", function () {\n    return [];\n  });\n  mockHass.mockWS(\"recorder/statistics_during_period\", function (_ref, hass) {\n    var statistic_ids = _ref.statistic_ids,\n      start_time = _ref.start_time,\n      end_time = _ref.end_time,\n      period = _ref.period;\n    var start = new Date(start_time);\n    var end = end_time ? new Date(end_time) : new Date();\n    var statistics = {};\n    statistic_ids.forEach(function (id) {\n      if (id in statisticsFunctions) {\n        statistics[id] = statisticsFunctions[id](id, start, end, period);\n      } else {\n        var entityState = hass.states[id];\n        var state = entityState ? Number(entityState.state) : 1;\n        statistics[id] = entityState && \"last_reset\" in entityState.attributes ? generateSumStatistics(start, end, period, state, state * (state > 80 ? 0.01 : 0.05)) : generateMeanStatistics(start, end, period, state, state * (state > 80 ? 0.05 : 0.1));\n      }\n    });\n    return statistics;\n  });\n};","map":{"version":3,"names":["addDays","addHours","addMonths","differenceInHours","endOfDay","generateMeanStatistics","start","end","period","arguments","length","undefined","initValue","maxDiff","statistics","currentDate","Date","setMinutes","lastVal","now","delta","Math","random","mean","push","getTime","min","max","last_reset","state","sum","generateSumStatistics","add","change","generateCurvedStatistics","_period","metered","hours","i","half","statisticsFunctions","sensorEnergy_consumption_tarif_1","_id","morningEnd","morningLow","eveningStart","morningFinalVal","empty","eveningLow","concat","_toConsumableArray","sensorEnergy_consumption_tarif_2","highTarif","highTarifFinalVal","morning","evening","sensorEnergy_production_tarif_1","sensorEnergy_production_tarif_1_compensation","sensorEnergy_production_tarif_2","productionStart","productionEnd","dayEnd","production","productionFinalVal","rest","sensorSolar_production","mockRecorder","mockHass","mockWS","_ref","hass","statistic_ids","start_time","end_time","forEach","id","entityState","states","Number","attributes"],"sources":["/workspaces/frontend/demo/src/stubs/recorder.ts"],"sourcesContent":["import {\n  addDays,\n  addHours,\n  addMonths,\n  differenceInHours,\n  endOfDay,\n} from \"date-fns\";\nimport {\n  Statistics,\n  StatisticsMetaData,\n  StatisticValue,\n} from \"../../../src/data/recorder\";\nimport { MockHomeAssistant } from \"../../../src/fake_data/provide_hass\";\n\nconst generateMeanStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let lastVal = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const delta = Math.random() * maxDiff;\n    const mean = lastVal + delta;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean,\n      min: mean - Math.random() * maxDiff,\n      max: mean + Math.random() * maxDiff,\n      last_reset: 0,\n      state: mean,\n      sum: null,\n    });\n    lastVal = mean;\n    currentDate =\n      period === \"day\"\n        ? addDays(currentDate, 1)\n        : period === \"month\"\n          ? addMonths(currentDate, 1)\n          : addHours(currentDate, 1);\n  }\n  return statistics;\n};\n\nconst generateSumStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = Math.random() * maxDiff;\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum,\n    });\n    currentDate =\n      period === \"day\"\n        ? addDays(currentDate, 1)\n        : period === \"month\"\n          ? addMonths(currentDate, 1)\n          : addHours(currentDate, 1);\n  }\n  return statistics;\n};\n\nconst generateCurvedStatistics = (\n  start: Date,\n  end: Date,\n  // eslint-disable-next-line @typescript-eslint/default-param-last\n  _period: \"5minute\" | \"hour\" | \"day\" | \"month\" = \"hour\",\n  initValue: number,\n  maxDiff: number,\n  metered: boolean\n): StatisticValue[] => {\n  const statistics: StatisticValue[] = [];\n  let currentDate = new Date(start);\n  currentDate.setMinutes(0, 0, 0);\n  let sum = initValue;\n  const hours = differenceInHours(end, start) - 1;\n  let i = 0;\n  let half = false;\n  const now = new Date();\n  while (end > currentDate && currentDate < now) {\n    const add = i * (Math.random() * maxDiff);\n    sum += add;\n    statistics.push({\n      start: currentDate.getTime(),\n      end: currentDate.getTime(),\n      mean: null,\n      min: null,\n      max: null,\n      last_reset: 0,\n      change: add,\n      state: initValue + sum,\n      sum: metered ? sum : null,\n    });\n    currentDate = addHours(currentDate, 1);\n    if (!half && i > hours / 2) {\n      half = true;\n    }\n    i += half ? -1 : 1;\n  }\n  return statistics;\n};\n\nconst statisticsFunctions: Record<\n  string,\n  (\n    id: string,\n    start: Date,\n    end: Date,\n    period: \"5minute\" | \"hour\" | \"day\" | \"month\"\n  ) => StatisticValue[]\n> = {\n  \"sensor.energy_consumption_tarif_1\": (\n    _id: string,\n    start: Date,\n    end: Date,\n    period = \"hour\"\n  ) => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const morningEnd = new Date(start.getTime() + 10 * 60 * 60 * 1000);\n    const morningLow = generateSumStatistics(start, morningEnd, period, 0, 0.7);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const morningFinalVal = morningLow.length\n      ? morningLow[morningLow.length - 1].sum!\n      : 0;\n    const empty = generateSumStatistics(\n      morningEnd,\n      eveningStart,\n      period,\n      morningFinalVal,\n      0\n    );\n    const eveningLow = generateSumStatistics(\n      eveningStart,\n      end,\n      period,\n      morningFinalVal,\n      0.7\n    );\n    return [...morningLow, ...empty, ...eveningLow];\n  },\n  \"sensor.energy_consumption_tarif_2\": (\n    _id: string,\n    start: Date,\n    end: Date,\n    period = \"hour\"\n  ) => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const morningEnd = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const eveningStart = new Date(start.getTime() + 20 * 60 * 60 * 1000);\n    const highTarif = generateSumStatistics(\n      morningEnd,\n      eveningStart,\n      period,\n      0,\n      0.3\n    );\n    const highTarifFinalVal = highTarif.length\n      ? highTarif[highTarif.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, morningEnd, period, 0, 0);\n    const evening = generateSumStatistics(\n      eveningStart,\n      end,\n      period,\n      highTarifFinalVal,\n      0\n    );\n    return [...morning, ...highTarif, ...evening];\n  },\n  \"sensor.energy_production_tarif_1\": (_id, start, end, period = \"hour\") =>\n    generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_1_compensation\": (\n    _id,\n    start,\n    end,\n    period = \"hour\"\n  ) => generateSumStatistics(start, end, period, 0, 0),\n  \"sensor.energy_production_tarif_2\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const productionStart = new Date(start.getTime() + 9 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 21 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(\n      productionStart,\n      productionEnd,\n      period,\n      0,\n      0.15,\n      true\n    );\n    const productionFinalVal = production.length\n      ? production[production.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(\n      productionEnd,\n      dayEnd,\n      period,\n      productionFinalVal,\n      0\n    );\n    const rest = generateSumStatistics(\n      dayEnd,\n      end,\n      period,\n      productionFinalVal,\n      1\n    );\n    return [...morning, ...production, ...evening, ...rest];\n  },\n  \"sensor.solar_production\": (_id, start, end, period = \"hour\") => {\n    if (period !== \"hour\") {\n      return generateSumStatistics(\n        start,\n        end,\n        period,\n        0,\n        period === \"day\" ? 17 : 504\n      );\n    }\n    const productionStart = new Date(start.getTime() + 7 * 60 * 60 * 1000);\n    const productionEnd = new Date(start.getTime() + 23 * 60 * 60 * 1000);\n    const dayEnd = new Date(endOfDay(productionEnd));\n    const production = generateCurvedStatistics(\n      productionStart,\n      productionEnd,\n      period,\n      0,\n      0.3,\n      true\n    );\n    const productionFinalVal = production.length\n      ? production[production.length - 1].sum!\n      : 0;\n    const morning = generateSumStatistics(start, productionStart, period, 0, 0);\n    const evening = generateSumStatistics(\n      productionEnd,\n      dayEnd,\n      period,\n      productionFinalVal,\n      0\n    );\n    const rest = generateSumStatistics(\n      dayEnd,\n      end,\n      period,\n      productionFinalVal,\n      2\n    );\n    return [...morning, ...production, ...evening, ...rest];\n  },\n};\nexport const mockRecorder = (mockHass: MockHomeAssistant) => {\n  mockHass.mockWS(\n    \"recorder/get_statistics_metadata\",\n    (): StatisticsMetaData[] => []\n  );\n  mockHass.mockWS(\n    \"recorder/list_statistic_ids\",\n    (): StatisticsMetaData[] => []\n  );\n  mockHass.mockWS(\n    \"recorder/statistics_during_period\",\n    ({ statistic_ids, start_time, end_time, period }, hass): Statistics => {\n      const start = new Date(start_time);\n      const end = end_time ? new Date(end_time) : new Date();\n\n      const statistics: Record<string, StatisticValue[]> = {};\n\n      statistic_ids.forEach((id: string) => {\n        if (id in statisticsFunctions) {\n          statistics[id] = statisticsFunctions[id](id, start, end, period);\n        } else {\n          const entityState = hass.states[id];\n          const state = entityState ? Number(entityState.state) : 1;\n          statistics[id] =\n            entityState && \"last_reset\" in entityState.attributes\n              ? generateSumStatistics(\n                  start,\n                  end,\n                  period,\n                  state,\n                  state * (state > 80 ? 0.01 : 0.05)\n                )\n              : generateMeanStatistics(\n                  start,\n                  end,\n                  period,\n                  state,\n                  state * (state > 80 ? 0.05 : 0.1)\n                );\n        }\n      });\n      return statistics;\n    }\n  );\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}