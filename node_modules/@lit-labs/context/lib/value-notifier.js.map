{"version":3,"file":"value-notifier.js","sources":["../src/lib/value-notifier.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {ContextCallback} from './context-request-event.js';\n\n/**\n * A disposer function\n */\ntype Disposer = () => void;\n\ninterface CallbackInfo {\n  disposer: Disposer;\n  consumerHost: Element;\n}\n\n/**\n * A simple class which stores a value, and triggers registered callbacks when\n * the value is changed via its setter.\n *\n * An implementor might use other observable patterns such as MobX or Redux to\n * get behavior like this. But this is a pretty minimal approach that will\n * likely work for a number of use cases.\n */\nexport class ValueNotifier<T> {\n  protected readonly subscriptions: Map<ContextCallback<T>, CallbackInfo> =\n    new Map();\n  private _value!: T;\n  get value(): T {\n    return this._value;\n  }\n  set value(v: T) {\n    this.setValue(v);\n  }\n\n  setValue(v: T, force = false) {\n    const update = force || !Object.is(v, this._value);\n    this._value = v;\n    if (update) {\n      this.updateObservers();\n    }\n  }\n\n  constructor(defaultValue?: T) {\n    if (defaultValue !== undefined) {\n      this.value = defaultValue;\n    }\n  }\n\n  updateObservers = (): void => {\n    for (const [callback, {disposer}] of this.subscriptions) {\n      callback(this._value, disposer);\n    }\n  };\n\n  addCallback(\n    callback: ContextCallback<T>,\n    consumerHost: Element,\n    subscribe?: boolean\n  ): void {\n    if (!subscribe) {\n      // just call the callback once and we're done\n      callback(this.value);\n      return;\n    }\n    if (!this.subscriptions.has(callback)) {\n      this.subscriptions.set(callback, {\n        disposer: () => {\n          this.subscriptions.delete(callback);\n        },\n        consumerHost,\n      });\n    }\n    const {disposer} = this.subscriptions.get(callback)!;\n    callback(this.value, disposer);\n  }\n\n  clearCallbacks(): void {\n    this.subscriptions.clear();\n  }\n}\n"],"names":["ValueNotifier","constructor","defaultValue","this","subscriptions","Map","updateObservers","callback","disposer","_value","undefined","value","v","setValue","force","update","Object","is","addCallback","consumerHost","subscribe","has","set","delete","get","clearCallbacks","clear"],"mappings":";;;;;MA0BaA,EAmBX,WAAAC,CAAYC,GAlBOC,KAAAC,cACjB,IAAIC,IAuBNF,KAAeG,gBAAG,KAChB,IAAK,MAAOC,GAAUC,SAACA,MAAcL,KAAKC,cACxCG,EAASJ,KAAKM,EAAQD,EACvB,OARoBE,IAAjBR,IACFC,KAAKQ,MAAQT,EAEhB,CAnBD,SAAIS,GACF,OAAOR,KAAKM,CACb,CACD,SAAIE,CAAMC,GACRT,KAAKU,SAASD,EACf,CAED,QAAAC,CAASD,EAAME,GAAQ,GACrB,MAAMC,EAASD,IAAUE,OAAOC,GAAGL,EAAGT,KAAKM,GAC3CN,KAAKM,EAASG,EACVG,GACFZ,KAAKG,iBAER,CAcD,WAAAY,CACEX,EACAY,EACAC,GAEA,IAAKA,EAGH,YADAb,EAASJ,KAAKQ,OAGXR,KAAKC,cAAciB,IAAId,IAC1BJ,KAAKC,cAAckB,IAAIf,EAAU,CAC/BC,SAAU,KACRL,KAAKC,cAAcmB,OAAOhB,EAAS,EAErCY,iBAGJ,MAAMX,SAACA,GAAYL,KAAKC,cAAcoB,IAAIjB,GAC1CA,EAASJ,KAAKQ,MAAOH,EACtB,CAED,cAAAiB,GACEtB,KAAKC,cAAcsB,OACpB"}