"use strict";
/**
 * @fileoverview Require `define(...)` calls to include an `if` statement
 * @author James Garbutt <https://github.com/43081j>
 * @author Keith Cirkel <https://github.com/keithamus>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const customElements_1 = require("../util/customElements");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Require `define(...)` calls to include an `if` statement',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/guard-define-call.md'
        },
        messages: {
            guard: '`customElements.define` call should be wrapped in an `if` which ' +
                ' asserts that the element has not already been defined.'
        }
    },
    create(context) {
        const definedCustomElements = new Set();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            CallExpression: (node) => {
                const arg0 = node.arguments[0];
                const tagName = arg0 && arg0.type === 'Literal' && typeof arg0.value === 'string'
                    ? arg0.value
                    : null;
                if ((0, customElements_1.isDefineCall)(node) && tagName) {
                    const inTryCatch = node.parent.type === 'ExpressionStatement' &&
                        node.parent.parent.type === 'BlockStatement' &&
                        node.parent.parent.parent.type === 'TryStatement';
                    if (definedCustomElements.has(tagName)) {
                        definedCustomElements.delete(tagName);
                    }
                    else if (!inTryCatch) {
                        context.report({
                            node,
                            messageId: 'guard'
                        });
                    }
                }
                if ((0, customElements_1.isGetCall)(node) && tagName) {
                    // TODO (43081j): use source.getAncestors(node)
                    const ancestors = context.getAncestors();
                    const isInsideIfStatement = ancestors.some((ancestor) => ancestor.type === 'IfStatement' &&
                        ancestors.includes(ancestor.test) &&
                        (ancestor.test.type === 'UnaryExpression' ||
                            ancestor.test.type === 'BinaryExpression' ||
                            ancestor.test.type === 'LogicalExpression'));
                    if (isInsideIfStatement) {
                        if (node.parent.type === 'UnaryExpression' &&
                            node.parent.operator === '!') {
                            let unaryCounter = 0;
                            let unaryNode = node.parent;
                            while (unaryNode.type === 'UnaryExpression') {
                                unaryCounter++;
                                unaryNode = unaryNode.parent;
                            }
                            if (unaryCounter % 2 !== 0) {
                                definedCustomElements.add(tagName);
                            }
                        }
                        else if (node.parent.type !== 'LogicalExpression') {
                            definedCustomElements.add(tagName);
                        }
                    }
                }
            }
        };
    }
};
exports.default = rule;
