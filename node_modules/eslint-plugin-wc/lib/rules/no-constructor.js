"use strict";
/**
 * @fileoverview Disallows constructors in custom element classes
 * @author James Garbutt <https://github.com/43081j>
 * @author Keith Cirkel <https://github.com/keithamus>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows constructors in custom element classes',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/no-constructor.md'
        },
        messages: {
            noConstructor: 'Constructors should be avoided in custom elements. ' +
                'Consider using lifecycle methods instead (e.g. `connectedCallback`)'
        }
    },
    create(context) {
        // variables should be defined here
        let insideElement = false;
        const source = context.getSourceCode();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            'ClassDeclaration,ClassExpression': (node) => {
                if ((0, util_1.isCustomElement)(context, node, source.getJSDocComment(node))) {
                    insideElement = true;
                }
            },
            'ClassDeclaration,ClassExpression:exit': () => {
                insideElement = false;
            },
            MethodDefinition: (node) => {
                if (insideElement &&
                    node.kind === 'constructor' &&
                    node.key.type === 'Identifier' &&
                    node.key.name === 'constructor') {
                    context.report({
                        node,
                        messageId: 'noConstructor'
                    });
                }
            }
        };
    }
};
exports.default = rule;
