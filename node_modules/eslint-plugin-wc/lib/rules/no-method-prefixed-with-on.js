"use strict";
/**
 * @fileoverview Disallows methods prefixed with `on`
 * @author James Garbutt <https://github.com/43081j>
 * @author Keith Cirkel <https://github.com/keithamus>
 */
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const ast_1 = require("../util/ast");
//------------------------------------------------------------------------------
// Rule Definition
//------------------------------------------------------------------------------
const rule = {
    meta: {
        docs: {
            description: 'Disallows methods prefixed with `on`',
            url: 'https://github.com/43081j/eslint-plugin-wc/blob/master/docs/rules/no-method-prefixed-with-on.md'
        },
        messages: {
            noPrefix: 'Avoid using `on` as a prefix of method names as they can ' +
                'easily conflict with reserved event handler names'
        }
    },
    create(context) {
        // variables should be defined here
        let insideElement = false;
        const source = context.getSourceCode();
        //----------------------------------------------------------------------
        // Helpers
        //----------------------------------------------------------------------
        //----------------------------------------------------------------------
        // Public
        //----------------------------------------------------------------------
        return {
            'ClassDeclaration,ClassExpression': (node) => {
                if ((0, util_1.isCustomElement)(context, node, source.getJSDocComment(node))) {
                    insideElement = true;
                }
            },
            'ClassDeclaration,ClassExpression:exit': () => {
                insideElement = false;
            },
            MethodDefinition: (node) => {
                if (insideElement) {
                    const name = (0, ast_1.getMethodName)(node);
                    if (name && name.startsWith('on')) {
                        context.report({
                            node,
                            messageId: 'noPrefix'
                        });
                    }
                }
            }
        };
    }
};
exports.default = rule;
