"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveReference = exports.getMethodName = void 0;
/**
 * Computes the name of a given method node
 * @param {ESTree.MethodDefinition} node Node to retrieve name from
 * @return {string|null}
 */
function getMethodName(node) {
    if (node.key.type === 'PrivateIdentifier' ||
        (node.key.type === 'Identifier' && !node.computed)) {
        return node.key.name;
    }
    if (node.key.type === 'Literal') {
        return String(node.key.value);
    }
    return null;
}
exports.getMethodName = getMethodName;
/**
 * Attempts to resolve any references, e.g. if a node is an identifier
 * @param {ESTree.Node} node Node to resolve
 * @param {Rule.RuleContext} context Rule context
 * @return {ESTree.Node}
 */
function resolveReference(node, context) {
    if (node.type !== 'Identifier') {
        return node;
    }
    const ref = context
        .getSourceCode()
        .getScope(node)
        .references.find((r) => r.identifier.name === node.name);
    if (ref?.resolved && ref.resolved.defs.length === 1) {
        return ref.resolved.defs[0].node;
    }
    return node;
}
exports.resolveReference = resolveReference;
