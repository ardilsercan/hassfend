"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
exports.default = utils_1.createRule("negation", {
    meta: {
        docs: {
            description: "enforce use of escapes on negation",
            category: "Best Practices",
            recommended: false,
        },
        fixable: "code",
        schema: [],
        messages: {
            unexpected: "Unexpected negated character class. Use '{{negatedCharSet}}' instead.",
        },
        type: "suggestion",
    },
    create(context) {
        function createVisitor({ node, getRegexpLocation, fixReplaceNode, }) {
            return {
                onCharacterClassEnter(ccNode) {
                    if (!ccNode.negate || ccNode.elements.length !== 1) {
                        return;
                    }
                    const element = ccNode.elements[0];
                    if (element.type === "CharacterSet") {
                        const negatedCharSet = getNegationText(element);
                        context.report({
                            node,
                            loc: getRegexpLocation(ccNode),
                            messageId: "unexpected",
                            data: { negatedCharSet },
                            fix: fixReplaceNode(ccNode, negatedCharSet),
                        });
                    }
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
function getNegationText(node) {
    let text;
    if (node.kind === "digit") {
        text = "d";
    }
    else if (node.kind === "space") {
        text = "s";
    }
    else if (node.kind === "word") {
        text = "w";
    }
    else if (node.kind === "property") {
        text = "p";
    }
    else {
        throw new Error(`unknown kind:${node.kind}`);
    }
    if (!node.negate) {
        text = text.toUpperCase();
    }
    if (node.kind === "property") {
        if (node.value != null) {
            text += `{${node.key}=${node.value}}`;
        }
        else {
            text += `{${node.key}}`;
        }
    }
    return `\\${text}`;
}
