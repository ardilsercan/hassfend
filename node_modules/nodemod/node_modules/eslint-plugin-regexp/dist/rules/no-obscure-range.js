"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const char_ranges_1 = require("../utils/char-ranges");
const utils_1 = require("../utils");
exports.default = utils_1.createRule("no-obscure-range", {
    meta: {
        docs: {
            description: "disallow obscure character ranges",
            category: "Best Practices",
            recommended: false,
        },
        schema: [
            {
                type: "object",
                properties: {
                    allowed: char_ranges_1.getAllowedCharValueSchema(),
                },
                additionalProperties: false,
            },
        ],
        messages: {
            unexpected: "Unexpected obscure character range. The characters of '{{range}}' ({{unicode}}) are not obvious.",
        },
        type: "suggestion",
    },
    create(context) {
        var _a;
        const allowedRanges = char_ranges_1.getAllowedCharRanges((_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.allowed, context);
        function createVisitor({ node, getRegexpLocation, }) {
            return {
                onCharacterClassRangeEnter(rNode) {
                    const { min, max } = rNode;
                    if (min.value === max.value) {
                        return;
                    }
                    if (utils_1.isControlEscape(min.raw) && utils_1.isControlEscape(max.raw)) {
                        return;
                    }
                    if (utils_1.isOctalEscape(min.raw) && utils_1.isOctalEscape(max.raw)) {
                        return;
                    }
                    if ((utils_1.isUseHexEscape(min.raw) || min.value === 0) &&
                        utils_1.isUseHexEscape(max.raw)) {
                        return;
                    }
                    if (!utils_1.isEscapeSequence(min.raw) &&
                        !utils_1.isEscapeSequence(max.raw) &&
                        char_ranges_1.inRange(allowedRanges, min.value, max.value)) {
                        return;
                    }
                    const uMin = `U+${min.value.toString(16).padStart(4, "0")}`;
                    const uMax = `U+${max.value.toString(16).padStart(4, "0")}`;
                    context.report({
                        node,
                        loc: getRegexpLocation(rNode),
                        messageId: "unexpected",
                        data: {
                            range: rNode.raw,
                            unicode: `${uMin} - ${uMax}`,
                        },
                    });
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
