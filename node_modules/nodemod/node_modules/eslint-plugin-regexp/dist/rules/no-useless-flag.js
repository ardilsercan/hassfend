"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const ast_utils_1 = require("../utils/ast-utils");
const type_tracker_1 = require("../utils/type-tracker");
class GlobalRegExpData {
    constructor(defineNode) {
        this.readNodes = new Map();
        this.state = {
            used: false,
            track: true,
        };
        this.defineNode = defineNode;
    }
    isNeedReport() {
        if (!this.readNodes.size) {
            return false;
        }
        if (this.state.used) {
            return false;
        }
        if (!this.state.track) {
            return false;
        }
        let countOfUsedInExecOrTest = 0;
        for (const readData of this.readNodes.values()) {
            if (!readData.marked) {
                return false;
            }
            if (readData.usedInSearchOrSplit) {
                continue;
            }
            if (readData.usedInExecOrTest) {
                if (!this.defineId) {
                    return false;
                }
                if (this.defineId.codePathId ===
                    readData.usedInExecOrTest.id.codePathId &&
                    this.defineId.loopNode ===
                        readData.usedInExecOrTest.id.loopNode) {
                    countOfUsedInExecOrTest++;
                    if (countOfUsedInExecOrTest > 1) {
                        return false;
                    }
                    continue;
                }
                else {
                    return false;
                }
            }
        }
        return true;
    }
    pushReadNode(node) {
        this.readNodes.set(node, {});
    }
    setDefineId(codePathId, loopNode) {
        this.defineId = { codePathId, loopNode };
    }
    markAsUsedInSearchOrSplit(node) {
        const exprState = this.readNodes.get(node);
        if (exprState) {
            exprState.marked = true;
            exprState.usedInSearchOrSplit = true;
        }
    }
    markAsUsedInExecOrTest(node, codePathId, loopNode) {
        const exprState = this.readNodes.get(node);
        if (exprState) {
            exprState.marked = true;
            exprState.usedInExecOrTest = { id: { codePathId, loopNode } };
        }
    }
    isUsed() {
        return this.state.used;
    }
    markAsUsed() {
        this.state.used = true;
    }
    markAsCannotTrack() {
        this.state.track = false;
    }
}
function getVariableId(node) {
    const parent = ast_utils_1.getParent(node);
    if (!parent ||
        parent.type !== "VariableDeclarator" ||
        parent.init !== node ||
        parent.id.type !== "Identifier") {
        return null;
    }
    const decl = ast_utils_1.getParent(parent);
    if (decl && decl.type === "VariableDeclaration" && decl.kind === "const") {
        return parent.id;
    }
    return null;
}
function getFlagLocation(context, node, flag) {
    const sourceCode = context.getSourceCode();
    if (node.type === "Literal") {
        const flagIndex = node.range[1] -
            node.regex.flags.length +
            node.regex.flags.indexOf(flag);
        return {
            start: sourceCode.getLocFromIndex(flagIndex),
            end: sourceCode.getLocFromIndex(flagIndex + 1),
        };
    }
    return node.arguments[1].loc;
}
function fixRemoveFlag({ flagsString, fixReplaceFlags }, flag) {
    if (flagsString) {
        return fixReplaceFlags(flagsString.replace(flag, ""));
    }
    return null;
}
function createUselessIgnoreCaseFlagVisitor(context) {
    return utils_1.defineRegexpVisitor(context, {
        createVisitor(regExpContext) {
            const { flags, regexpNode, toCharSet, ownsFlags } = regExpContext;
            if (!flags.ignoreCase || !ownsFlags) {
                return {};
            }
            const flagsNoI = Object.assign(Object.assign({}, flags), { ignoreCase: false });
            let unnecessary = true;
            return {
                onAssertionEnter(aNode) {
                    if (unnecessary) {
                        if (aNode.kind === "word" && flags.unicode) {
                            unnecessary = false;
                        }
                    }
                },
                onCharacterEnter(cNode) {
                    if (unnecessary) {
                        if (toCharSet(cNode).size > 1) {
                            unnecessary = false;
                        }
                    }
                },
                onCharacterSetEnter(cNode) {
                    if (unnecessary) {
                        if (cNode.kind === "word" && flags.unicode) {
                            unnecessary = false;
                        }
                        if (cNode.kind === "property") {
                            const caseInsensitive = toCharSet(cNode);
                            const caseSensitive = toCharSet(cNode, flagsNoI);
                            if (!caseInsensitive.equals(caseSensitive)) {
                                unnecessary = false;
                            }
                        }
                    }
                },
                onPatternLeave() {
                    if (unnecessary) {
                        context.report({
                            node: regexpNode,
                            loc: getFlagLocation(context, regexpNode, "i"),
                            messageId: "uselessIgnoreCaseFlag",
                            fix: fixRemoveFlag(regExpContext, "i"),
                        });
                    }
                },
            };
        },
    });
}
function createUselessMultilineFlagVisitor(context) {
    return utils_1.defineRegexpVisitor(context, {
        createVisitor(regExpContext) {
            const { flags, regexpNode, ownsFlags } = regExpContext;
            if (!flags.multiline || !ownsFlags) {
                return {};
            }
            let unnecessary = true;
            return {
                onAssertionEnter(node) {
                    if (node.kind === "start" || node.kind === "end") {
                        unnecessary = false;
                    }
                },
                onPatternLeave() {
                    if (unnecessary) {
                        context.report({
                            node: regexpNode,
                            loc: getFlagLocation(context, regexpNode, "m"),
                            messageId: "uselessMultilineFlag",
                            fix: fixRemoveFlag(regExpContext, "m"),
                        });
                    }
                },
            };
        },
    });
}
function createUselessDotAllFlagVisitor(context) {
    return utils_1.defineRegexpVisitor(context, {
        createVisitor(regExpContext) {
            const { flags, regexpNode, ownsFlags } = regExpContext;
            if (!flags.dotAll || !ownsFlags) {
                return {};
            }
            let unnecessary = true;
            return {
                onCharacterSetEnter(node) {
                    if (node.kind === "any") {
                        unnecessary = false;
                    }
                },
                onPatternLeave() {
                    if (unnecessary) {
                        context.report({
                            node: regexpNode,
                            loc: getFlagLocation(context, regexpNode, "s"),
                            messageId: "uselessDotAllFlag",
                            fix: fixRemoveFlag(regExpContext, "s"),
                        });
                    }
                },
            };
        },
    });
}
function createUselessGlobalFlagVisitor(context) {
    const typeTracer = type_tracker_1.createTypeTracker(context);
    let stack = null;
    const globalRegExpMap = new Map();
    const globalRegExpList = [];
    function reportUselessGlobalFlag(globalRegExp) {
        const node = globalRegExp.defineNode;
        context.report({
            node,
            loc: getFlagLocation(context, node, "g"),
            messageId: "uselessGlobalFlag",
        });
    }
    function extractReadReferences(node) {
        const references = [];
        const variable = ast_utils_1.findVariable(context, node);
        if (!variable) {
            return references;
        }
        for (const reference of variable.references) {
            if (reference.isRead()) {
                const id = getVariableId(reference.identifier);
                if (id) {
                    references.push(...extractReadReferences(id));
                }
                else {
                    references.push(reference.identifier);
                }
            }
        }
        return references;
    }
    function verifyForSearchOrSplit(node) {
        const globalRegExp = globalRegExpMap.get(node.arguments[0]);
        if (globalRegExp == null || globalRegExp.isUsed()) {
            return;
        }
        if (!typeTracer.isString(node.callee.object)) {
            globalRegExp.markAsCannotTrack();
            return;
        }
        globalRegExp.markAsUsedInSearchOrSplit(node.arguments[0]);
    }
    function verifyForExecOrTest(node) {
        const globalRegExp = globalRegExpMap.get(node.callee.object);
        if (globalRegExp == null || globalRegExp.isUsed()) {
            return;
        }
        globalRegExp.markAsUsedInExecOrTest(node.callee.object, stack.codePathId, stack.loopStack[0]);
    }
    return utils_1.compositingVisitors(utils_1.defineRegexpVisitor(context, {
        createVisitor({ flags, regexpNode }) {
            if (flags.global) {
                const globalRegExp = new GlobalRegExpData(regexpNode);
                globalRegExpList.push(globalRegExp);
                globalRegExpMap.set(regexpNode, globalRegExp);
                const id = getVariableId(regexpNode);
                if (id) {
                    const readReferences = extractReadReferences(id);
                    for (const ref of readReferences) {
                        globalRegExpMap.set(ref, globalRegExp);
                        globalRegExp.pushReadNode(ref);
                    }
                }
                else {
                    globalRegExp.pushReadNode(regexpNode);
                }
            }
            return {};
        },
    }), {
        "Program:exit"() {
            for (const globalRegExp of globalRegExpList) {
                if (globalRegExp.isNeedReport()) {
                    reportUselessGlobalFlag(globalRegExp);
                }
            }
        },
        onCodePathStart(codePath) {
            stack = {
                codePathId: codePath.id,
                upper: stack,
                loopStack: [],
            };
        },
        onCodePathEnd() {
            var _a;
            stack = (_a = stack === null || stack === void 0 ? void 0 : stack.upper) !== null && _a !== void 0 ? _a : null;
        },
        ["WhileStatement, DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, " +
            ":matches(WhileStatement, DoWhileStatement, ForStatement, ForInStatement, ForOfStatement) > :statement"](node) {
            stack === null || stack === void 0 ? void 0 : stack.loopStack.unshift(node);
        },
        ["WhileStatement, DoWhileStatement, ForStatement, ForInStatement, ForOfStatement, " +
            ":matches(WhileStatement, DoWhileStatement, ForStatement, ForInStatement, ForOfStatement) > :statement" +
            ":exit"]() {
            stack === null || stack === void 0 ? void 0 : stack.loopStack.shift();
        },
        "Literal, NewExpression, CallExpression:exit"(node) {
            if (!stack) {
                return;
            }
            const globalRegExp = globalRegExpMap.get(node);
            if (!globalRegExp || globalRegExp.defineNode !== node) {
                return;
            }
            globalRegExp.setDefineId(stack.codePathId, stack.loopStack[0]);
        },
        "CallExpression:exit"(node) {
            if (!stack) {
                return;
            }
            if (!ast_utils_1.isKnownMethodCall(node, {
                search: 1,
                split: 1,
                test: 1,
                exec: 1,
                match: 1,
                matchAll: 1,
                replace: 2,
                replaceAll: 2,
            })) {
                return;
            }
            if (node.callee.property.name === "search" ||
                node.callee.property.name === "split") {
                verifyForSearchOrSplit(node);
            }
            else if (node.callee.property.name === "test" ||
                node.callee.property.name === "exec") {
                verifyForExecOrTest(node);
            }
            else if (node.callee.property.name === "match" ||
                node.callee.property.name === "matchAll" ||
                node.callee.property.name === "replace" ||
                node.callee.property.name === "replaceAll") {
                const globalRegExp = globalRegExpMap.get(node.arguments[0]);
                globalRegExp === null || globalRegExp === void 0 ? void 0 : globalRegExp.markAsUsed();
            }
        },
    });
}
exports.default = utils_1.createRule("no-useless-flag", {
    meta: {
        docs: {
            description: "disallow unnecessary regex flags",
            category: "Best Practices",
            recommended: false,
            default: "warn",
        },
        fixable: "code",
        schema: [
            {
                type: "object",
                properties: {
                    ignore: {
                        type: "array",
                        items: {
                            enum: ["i", "m", "s", "g"],
                        },
                        uniqueItems: true,
                    },
                },
                additionalProperties: false,
            },
        ],
        messages: {
            uselessIgnoreCaseFlag: "The 'i' flag is unnecessary because the pattern only contains case-invariant characters.",
            uselessMultilineFlag: "The 'm' flag is unnecessary because the pattern does not contain start (^) or end ($) assertions.",
            uselessDotAllFlag: "The 's' flag is unnecessary because the pattern does not contain dots (.).",
            uselessGlobalFlag: "The 'g' flag is unnecessary because not using global testing.",
        },
        type: "suggestion",
    },
    create(context) {
        var _a, _b;
        const ignore = new Set((_b = (_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.ignore) !== null && _b !== void 0 ? _b : []);
        let visitor = {};
        if (!ignore.has("i")) {
            visitor = utils_1.compositingVisitors(visitor, createUselessIgnoreCaseFlagVisitor(context));
        }
        if (!ignore.has("m")) {
            visitor = utils_1.compositingVisitors(visitor, createUselessMultilineFlagVisitor(context));
        }
        if (!ignore.has("s")) {
            visitor = utils_1.compositingVisitors(visitor, createUselessDotAllFlagVisitor(context));
        }
        if (!ignore.has("g")) {
            visitor = utils_1.compositingVisitors(visitor, createUselessGlobalFlagVisitor(context));
        }
        return visitor;
    },
});
