"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
function isTopLevel(group) {
    const parent = group.parent;
    if (parent.type === "Alternative" && parent.elements.length === 1) {
        const parentParent = parent.parent;
        if (parentParent.type === "Pattern" &&
            parentParent.alternatives.length === 1) {
            return true;
        }
    }
    return false;
}
exports.default = utils_1.createRule("no-useless-non-capturing-group", {
    meta: {
        docs: {
            description: "disallow unnecessary Non-capturing group",
            category: "Stylistic Issues",
            recommended: false,
        },
        fixable: "code",
        schema: [
            {
                type: "object",
                properties: {
                    allowTop: { type: "boolean" },
                },
                additionalProperties: false,
            },
        ],
        messages: {
            unexpected: "Unexpected quantifier Non-capturing group.",
        },
        type: "suggestion",
    },
    create(context) {
        var _a, _b;
        const allowTop = (_b = (_a = context.options[0]) === null || _a === void 0 ? void 0 : _a.allowTop) !== null && _b !== void 0 ? _b : false;
        function createVisitor({ node, getRegexpLocation, fixReplaceNode, }) {
            return {
                onGroupEnter(gNode) {
                    if (allowTop && isTopLevel(gNode)) {
                        return;
                    }
                    if (gNode.alternatives.length === 1) {
                        const alt = gNode.alternatives[0];
                        if (alt.elements.length === 0) {
                            return;
                        }
                        const parent = gNode.parent;
                        if (parent.type === "Quantifier" &&
                            (alt.elements.length > 1 ||
                                alt.elements[0].type === "Quantifier")) {
                            return;
                        }
                        if (!utils_1.canUnwrapped(gNode, alt.raw)) {
                            return;
                        }
                    }
                    else {
                        const parent = gNode.parent;
                        if (parent.type !== "Alternative") {
                            return;
                        }
                        if (parent.elements.length !== 1) {
                            return;
                        }
                    }
                    context.report({
                        node,
                        loc: getRegexpLocation(gNode),
                        messageId: "unexpected",
                        fix: fixReplaceNode(gNode, gNode.raw.slice(3, -1)),
                    });
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
